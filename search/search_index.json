{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u7b80\u4ecb \u8fd9\u662f\u6211\u7684\u5b66\u4e60Rust\u4e4b\u65c5\u7684\u5b9e\u4f8bAPP\u5408\u96c6 github\u5730\u5740: https://github.com/hellowac/rust-example-apps","title":"\u7b80\u4ecb"},{"location":"#_1","text":"\u8fd9\u662f\u6211\u7684\u5b66\u4e60Rust\u4e4b\u65c5\u7684\u5b9e\u4f8bAPP\u5408\u96c6 github\u5730\u5740: https://github.com/hellowac/rust-example-apps","title":"\u7b80\u4ecb"},{"location":"common-collections/","text":"\u5e38\u89c1\u96c6\u5408 Rust \u6807\u51c6\u5e93\u4e2d\u5305\u542b\u4e00\u7cfb\u5217\u88ab\u79f0\u4e3a \u96c6\u5408 \uff08collections\uff09\u7684\u975e\u5e38\u6709\u7528\u7684\u6570\u636e\u7ed3\u6784\u3002 \u5927\u90e8\u5206\u5176\u4ed6\u6570\u636e\u7c7b\u578b\u90fd\u4ee3\u8868\u4e00\u4e2a\u7279\u5b9a\u7684\u503c\uff0c\u4e0d\u8fc7\u96c6\u5408\u53ef\u4ee5\u5305\u542b\u591a\u4e2a\u503c\u3002 \u4e0d\u540c\u4e8e\u5185\u5efa\u7684\u6570\u7ec4\u548c\u5143\u7ec4\u7c7b\u578b\uff0c\u8fd9\u4e9b\u96c6\u5408\u6307\u5411\u7684\u6570\u636e\u662f\u50a8\u5b58\u5728\u5806\u4e0a\u7684\uff0c\u8fd9\u610f\u5473\u7740\u6570\u636e\u7684\u6570\u91cf\u4e0d\u5fc5\u5728\u7f16\u8bd1\u65f6\u5c31\u5df2\u77e5\uff0c\u5e76\u4e14\u8fd8\u53ef\u4ee5\u968f\u7740\u7a0b\u5e8f\u7684\u8fd0\u884c\u589e\u957f\u6216\u7f29\u5c0f\u3002 \u6bcf\u79cd\u96c6\u5408\u90fd\u6709\u7740\u4e0d\u540c\u529f\u80fd\u548c\u6210\u672c\uff0c\u800c\u6839\u636e\u5f53\u524d\u60c5\u51b5\u9009\u62e9\u5408\u9002\u7684\u96c6\u5408\uff0c\u8fd9\u662f\u4e00\u9879\u5e94\u5f53\u9010\u6e10\u638c\u63e1\u7684\u6280\u80fd\u3002 vector \u5141\u8bb8\u6211\u4eec\u4e00\u4e2a\u6328\u7740\u4e00\u4e2a\u5730\u50a8\u5b58\u4e00\u7cfb\u5217\u6570\u91cf\u53ef\u53d8\u7684\u503c \u5b57\u7b26\u4e32 \uff08string\uff09\u662f\u5b57\u7b26\u7684\u96c6\u5408\u3002\u4e4b\u524d\u89c1\u8fc7 String \u7c7b\u578b\u3002 \u54c8\u5e0c map \uff08hash map\uff09\u5141\u8bb8\u6211\u4eec\u5c06\u503c\u4e0e\u4e00\u4e2a\u7279\u5b9a\u7684\u952e\uff08key\uff09\u76f8\u5173\u8054\u3002\u8fd9\u662f\u4e00\u4e2a\u53eb\u505a map \u7684\u66f4\u901a\u7528\u7684\u6570\u636e\u7ed3\u6784\u7684\u7279\u5b9a\u5b9e\u73b0\u3002 \u5bf9\u4e8e\u6807\u51c6\u5e93\u63d0\u4f9b\u7684\u5176\u4ed6\u7c7b\u578b\u7684\u96c6\u5408\uff0c\u8bf7\u67e5\u770b \u6587\u6863 \u3002 Vector \u5217\u8868 Vec<T> \uff0c\u4e5f\u88ab\u79f0\u4e3a vector \u3002 vector \u5141\u8bb8\u5728\u4e00\u4e2a\u5355\u72ec\u7684\u6570\u636e\u7ed3\u6784\u4e2d\u50a8\u5b58\u591a\u4e8e\u4e00\u4e2a\u7684\u503c\uff0c\u5b83\u5728\u5185\u5b58\u4e2d\u5f7c\u6b64\u76f8\u90bb\u5730\u6392\u5217\u6240\u6709\u7684\u503c\u3002 vector \u53ea\u80fd\u50a8\u5b58\u76f8\u540c\u7c7b\u578b\u7684\u503c\u3002\u5b83\u4eec\u5728\u62e5\u6709 \u4e00\u7cfb\u5217\u9879 \u7684\u573a\u666f\u4e0b\u975e\u5e38\u5b9e\u7528\uff0c\u4f8b\u5982\u6587\u4ef6\u4e2d\u7684\u6587\u672c\u884c\u6216\u662f\u8d2d\u7269\u8f66\u4e2d\u5546\u54c1\u7684\u4ef7\u683c\u3002 \u65b0\u5efa vector // \u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u7a7a vector\uff0c\u53ef\u4ee5\u8c03\u7528 Vec::new \u51fd\u6570 let v : Vec < i32 > = Vec :: new (); // \u544a\u8bc9 Rust v \u8fd9\u4e2a Vec<T> \u5c06\u5b58\u653e i32 \u7c7b\u578b\u7684\u5143\u7d20\u3002 // \u6ce8\u610f\u589e\u52a0\u4e86\u4e00\u4e2a\u7c7b\u578b\u6ce8\u89e3, \u56e0\u4e3a\u6ca1\u6709\u5411\u8fd9\u4e2a vector \u4e2d\u63d2\u5165\u4efb\u4f55\u503c\uff0cRust \u5e76\u4e0d\u77e5\u9053\u6211\u4eec\u60f3\u8981\u50a8\u5b58\u4ec0\u4e48\u7c7b\u578b\u7684\u5143\u7d20\u3002 // vector \u662f\u7528\u6cdb\u578b\u5b9e\u73b0\u7684\uff0c\u7b2c\u5341\u7ae0\u4f1a\u6d89\u53ca\u5230\u5982\u4f55\u5bf9\u4f60\u81ea\u5df1\u7684\u7c7b\u578b\u4f7f\u7528\u5b83\u4eec\u3002 \u73b0\u5728\uff0c\u6240\u9700\u8981\u77e5\u9053\u7684\u5c31\u662f Vec<T> \u662f\u4e00\u4e2a\u7531\u6807\u51c6\u5e93\u63d0\u4f9b\u7684\u7c7b\u578b\uff0c\u5b83\u53ef\u4ee5\u5b58\u653e\u4efb\u4f55\u7c7b\u578b\uff0c\u800c\u5f53 Vec \u5b58\u653e\u67d0\u4e2a\u7279\u5b9a\u7c7b\u578b\u65f6\uff0c\u90a3\u4e2a\u7c7b\u578b\u4f4d\u4e8e\u5c16\u62ec\u53f7\u4e2d\u3002 \u901a\u5e38\uff0c\u4f1a\u7528\u521d\u59cb\u503c\u6765\u521b\u5efa\u4e00\u4e2a Vec<T> \u800c Rust \u4f1a\u63a8\u65ad\u51fa\u50a8\u5b58\u503c\u7684\u7c7b\u578b\uff0c\u6240\u4ee5\u5f88\u5c11\u4f1a\u9700\u8981\u8fd9\u4e9b\u7c7b\u578b\u6ce8\u89e3\u3002 \u4e3a\u4e86\u65b9\u4fbf Rust \u63d0\u4f9b\u4e86 vec! \u5b8f\uff0c\u8fd9\u4e2a\u5b8f\u4f1a\u6839\u636e\u6211\u4eec\u63d0\u4f9b\u7684\u503c\u6765\u521b\u5efa\u4e00\u4e2a\u65b0\u7684 vector \u3002 // \u65b0\u5efa\u4e00\u4e2a\u62e5\u6709\u503c 1\u30012 \u548c 3 \u7684 Vec<i32> let v = vec! [ 1 , 2 , 3 ]; \u56e0\u4e3a\u63d0\u4f9b\u4e86 i32 \u7c7b\u578b\u7684\u521d\u59cb\u503c\uff0cRust \u53ef\u4ee5\u63a8\u65ad\u51fa v \u7684\u7c7b\u578b\u662f Vec<i32> \uff0c\u56e0\u6b64\u7c7b\u578b\u6ce8\u89e3\u5c31\u4e0d\u662f\u5fc5\u987b\u7684\u3002 \u66f4\u65b0 vector \u4f7f\u7528 push \u65b9\u6cd5\u53ef\u4ee5\u5411\u5176\u589e\u52a0\u5143\u7d20\uff1a // \u5982\u679c\u60f3\u8981\u80fd\u591f\u6539\u53d8\u5b83\u7684\u503c\uff0c\u5fc5\u987b\u4f7f\u7528 mut \u5173\u952e\u5b57\u4f7f\u5176\u53ef\u53d8 let mut v = Vec :: new (); v . push ( 5 ); // \u589e\u52a0\u5143\u7d20 v . push ( 6 ); // \u589e\u52a0\u5143\u7d20 v . push ( 7 ); v . push ( 8 ); // \u653e\u5165\u5176\u4e2d\u7684\u6240\u6709\u503c\u90fd\u662f i32 \u7c7b\u578b\u7684\uff0c\u800c\u4e14 Rust \u4e5f\u6839\u636e\u6570\u636e\u505a\u51fa\u5982\u6b64\u5224\u65ad\uff0c\u6240\u4ee5\u4e0d\u9700\u8981 Vec<i32> \u6ce8\u89e3\u3002 \u4e22\u5f03 vector \u7c7b\u4f3c\u4e8e\u4efb\u4f55\u5176\u4ed6\u7684 struct \uff0c vector \u5728\u5176\u79bb\u5f00\u4f5c\u7528\u57df\u65f6\u4f1a\u88ab\u91ca\u653e { let v = vec! [ 1 , 2 , 3 , 4 ]; // \u5904\u7406\u53d8\u91cf v } // <- \u8fd9\u91cc v \u79bb\u5f00\u4f5c\u7528\u57df\u5e76\u88ab\u4e22\u5f03 \u5f53 vector \u88ab\u4e22\u5f03\u65f6\uff0c\u6240\u6709\u5176\u5185\u5bb9\u4e5f\u4f1a\u88ab\u4e22\u5f03\uff0c\u8fd9\u610f\u5473\u7740\u8fd9\u91cc\u5b83\u5305\u542b\u7684\u6574\u6570\u5c06\u88ab\u6e05\u7406\u3002 \u8fd9\u53ef\u80fd\u770b\u8d77\u6765\u975e\u5e38\u76f4\u89c2\uff0c\u4e0d\u8fc7\u4e00\u65e6\u5f00\u59cb\u4f7f\u7528 vector \u5143\u7d20\u7684\u5f15\u7528\uff0c\u60c5\u51b5\u5c31\u53d8\u5f97\u6709\u4e9b\u590d\u6742\u4e86\u3002 \u8bfb\u53d6 vector \u6709\u4e24\u79cd\u65b9\u6cd5\u5f15\u7528 vector \u4e2d\u50a8\u5b58\u7684\u503c\u3002 \u7d22\u5f15\u8bed\u6cd5 \u6216\u8005 get \u65b9\u6cd5 fn main () { let v = vec! [ 1 , 2 , 3 , 4 , 5 ]; // \u4f7f\u7528\u7d22\u5f15\u503c 2 \u6765\u83b7\u53d6\u7b2c\u4e09\u4e2a\u5143\u7d20\uff0c\u7d22\u5f15\u662f\u4ece 0 \u5f00\u59cb\u7684\u3002 // \u4f7f\u7528 & \u548c [] \u8fd4\u56de\u4e00\u4e2a\u5f15\u7528 let third : & i32 = & v [ 2 ]; println! ( \"\u7b2c\u4e09\u4e2a\u6570\u662f {}\" , third ); // \u4f7f\u7528 get \u65b9\u6cd5\u4ee5\u7d22\u5f15\u4f5c\u4e3a\u53c2\u6570\u6765\u8fd4\u56de\u4e00\u4e2a Option<&T>\u3002 match v . get ( 2 ) { Some ( third ) => println! ( \"\u7b2c\u4e09\u4e2a\u5143\u7d20\u662f {}\" , third ), None => println! ( \"\u8fd9\u513f\u6ca1\u6709\u5143\u7d20\" ), } } Rust \u63d0\u4f9b\u4e86\u4e24\u79cd\u5f15\u7528\u5143\u7d20\u7684\u65b9\u6cd5\u7684\u539f\u56e0\u662f\u5f53 \u5c1d\u8bd5\u4f7f\u7528\u73b0\u6709\u5143\u7d20\u8303\u56f4\u4e4b\u5916\u7684\u7d22\u5f15\u503c\u65f6\u53ef\u4ee5\u9009\u62e9\u8ba9\u7a0b\u5e8f\u5982\u4f55\u8fd0\u884c\u3002 // \u5c1d\u8bd5\u5728\u5f53\u6709\u4e00\u4e2a 5 \u4e2a\u5143\u7d20\u7684 vector \u63a5\u7740\u8bbf\u95ee\u7d22\u5f15 100 \u4f4d\u7f6e\u7684\u5143\u7d20\u4f1a\u53d1\u751f\u4ec0\u4e48 let v = vec! [ 1 , 2 , 3 , 4 , 5 ]; let does_not_exist = & v [ 100 ]; // \u5f53\u5f15\u7528\u4e00\u4e2a\u4e0d\u5b58\u5728\u7684\u5143\u7d20\u65f6 Rust \u4f1a\u9020\u6210 panic let does_not_exist = v . get ( 100 ); // \u5f53 get \u65b9\u6cd5\u88ab\u4f20\u9012\u4e86\u4e00\u4e2a\u6570\u7ec4\u5916\u7684\u7d22\u5f15\u65f6\uff0c\u5b83\u4e0d\u4f1a panic \u800c\u662f\u8fd4\u56de None\u3002 // \u5f53\u5076\u5c14\u51fa\u73b0\u8d85\u8fc7 vector \u8303\u56f4\u7684\u8bbf\u95ee\u5c5e\u4e8e\u6b63\u5e38\u60c5\u51b5\u7684\u65f6\u5019\u53ef\u4ee5\u8003\u8651\u4f7f\u7528\u5b83\u3002 // \u63a5\u7740\u4f60\u7684\u4ee3\u7801\u53ef\u4ee5\u6709\u5904\u7406 Some(&element) \u6216 None \u7684\u903b\u8f91\uff0c \u4e00\u65e6\u7a0b\u5e8f\u83b7\u53d6\u4e86\u4e00\u4e2a\u6709\u6548\u7684\u5f15\u7528\uff0c\u501f\u7528\u68c0\u67e5\u5668\u5c06\u4f1a\u6267\u884c\u6240\u6709\u6743\u548c\u501f\u7528\u89c4\u5219\u6765\u786e\u4fdd vector \u5185\u5bb9\u7684\u8fd9\u4e2a\u5f15\u7528\u548c\u4efb\u4f55\u5176\u4ed6\u5f15\u7528\u4fdd\u6301\u6709\u6548\u3002 \u56de\u5fc6\u4e00\u4e0b\u4e0d\u80fd\u5728\u76f8\u540c\u4f5c\u7528\u57df\u4e2d\u540c\u65f6\u5b58\u5728\u53ef\u53d8\u548c\u4e0d\u53ef\u53d8\u5f15\u7528\u7684\u89c4\u5219\u3002 \u8fd9\u4e2a\u89c4\u5219\u9002\u7528\u4e8e\u4e0b\u9762\u7684\u793a\u4f8b\uff1a // \u5728\u62e5\u6709 vector \u4e2d\u9879\u7684\u5f15\u7528\u7684\u540c\u65f6\u5411\u5176\u589e\u52a0\u4e00\u4e2a\u5143\u7d20 let mut v = vec! [ 1 , 2 , 3 , 4 , 5 ]; let first = & v [ 0 ]; v . push ( 6 ); println! ( \"\u7b2c\u4e00\u4e2a\u5143\u7d20\u662f: {}\" , first ); // \u5f53\u6211\u4eec\u83b7\u53d6\u4e86 vector \u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u4e0d\u53ef\u53d8\u5f15\u7528 // \u5e76\u5c1d\u8bd5\u5728 vector \u672b\u5c3e\u589e\u52a0\u4e00\u4e2a\u5143\u7d20\u7684\u65f6\u5019\uff0c\u5982\u679c\u5c1d\u8bd5\u5728\u51fd\u6570\u7684\u540e\u9762\u5f15\u7528\u8fd9\u4e2a\u5143\u7d20\u662f\u884c\u4e0d\u901a\u7684 \u7f16\u8bd1\u4f1a\u7ed9\u51fa\u8fd9\u4e2a\u9519\u8bef $ cargo run Compiling collections v0 . 1.0 ( file : ///projects/collections) error [ E0502 ] : cannot borrow ` v ` as mutable because it is also borrowed as immutable - -> src / main . rs : 6 : 5 | 4 | let first = & v [ 0 ]; | - immutable borrow occurs here 5 | 6 | v . push ( 6 ); | ^^^^^^^^^ mutable borrow occurs here 7 | 8 | println! ( \"The first element is: {}\" , first ); | ----- immutable borrow later used here For more information about this error , try ` rustc -- explain E0502 ` . error : could not compile ` collections ` due to previous error \u4e3a\u4ec0\u4e48\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u5f15\u7528\u4f1a\u5173\u5fc3 vector \u7ed3\u5c3e\u7684\u53d8\u5316\uff1f \u4e0d\u80fd\u8fd9\u4e48\u505a\u7684\u539f\u56e0\u662f\u7531\u4e8e vector \u7684\u5de5\u4f5c\u65b9\u5f0f\uff1a \u5728 vector \u7684\u7ed3\u5c3e\u589e\u52a0\u65b0\u5143\u7d20\u65f6\uff0c\u5728\u6ca1\u6709\u8db3\u591f\u7a7a\u95f4\u5c06\u6240\u6709\u5143\u7d20\u4f9d\u6b21\u76f8\u90bb\u5b58\u653e\u7684\u60c5\u51b5\u4e0b\uff0c\u53ef\u80fd\u4f1a\u8981\u6c42\u5206\u914d\u65b0\u5185\u5b58\u5e76\u5c06\u8001\u7684\u5143\u7d20\u62f7\u8d1d\u5230\u65b0\u7684\u7a7a\u95f4\u4e2d\u3002 \u8fd9\u65f6\uff0c \u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u5f15\u7528\u5c31\u6307\u5411\u4e86\u88ab\u91ca\u653e\u7684\u5185\u5b58\u3002 \u501f\u7528\u89c4\u5219\u963b\u6b62\u7a0b\u5e8f\u9677\u5165\u8fd9\u79cd\u72b6\u51b5\u3002 \u5173\u4e8e Vec<T> \u7c7b\u578b\u7684\u66f4\u591a\u5b9e\u73b0\u7ec6\u8282\uff0c\u8bf7\u67e5\u770b \u201c The Rust onomicon \u201d \u904d\u5386 vector \u5982\u679c\u60f3\u8981\u4f9d\u6b21\u8bbf\u95ee vector \u4e2d\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\uff0c\u53ef\u4ee5\u904d\u5386\u5176\u6240\u6709\u7684\u5143\u7d20\u800c\u65e0\u9700\u901a\u8fc7\u7d22\u5f15\u4e00\u6b21\u4e00\u4e2a\u7684\u8bbf\u95ee\u3002 // \u901a\u8fc7 for \u5faa\u73af\u904d\u5386 vector \u7684\u5143\u7d20\u5e76\u6253\u5370 let v = vec! [ 100 , 32 , 57 ]; for i in & v { println! ( \"{}\" , i ); } // \u4e5f\u53ef\u4ee5\u904d\u5386\u53ef\u53d8 vector \u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\u7684\u53ef\u53d8\u5f15\u7528\u4ee5\u4fbf\u80fd\u6539\u53d8\u4ed6\u4eec let mut v = vec! [ 100 , 32 , 57 ]; for i in & mut v { // \u4e3a\u4e86\u4fee\u6539\u53ef\u53d8\u5f15\u7528\u6240\u6307\u5411\u7684\u503c\uff0c\u5728\u4f7f\u7528 += \u8fd0\u7b97\u7b26\u4e4b\u524d\u5fc5\u987b\u4f7f\u7528\u89e3\u5f15\u7528\u8fd0\u7b97\u7b26\uff08*\uff09\u83b7\u53d6 i \u4e2d\u7684\u503c\u3002 * i += 50 ; } \u679a\u4e3e\u6765\u50a8\u5b58\u591a\u79cd\u7c7b\u578b vector \u53ea\u80fd\u50a8\u5b58\u76f8\u540c\u7c7b\u578b\u7684\u503c\u3002\u8fd9\u662f\u5f88\u4e0d\u65b9\u4fbf\u7684\uff1b \u7edd\u5bf9\u4f1a\u6709\u9700\u8981\u50a8\u5b58\u4e00\u7cfb\u5217\u4e0d\u540c\u7c7b\u578b\u7684\u503c\u7684\u7528\u4f8b \u3002 \u5e78\u8fd0\u7684\u662f\uff0c\u679a\u4e3e\u7684\u6210\u5458\u90fd\u88ab\u5b9a\u4e49\u4e3a\u76f8\u540c\u7684\u679a\u4e3e\u7c7b\u578b\uff0c\u6240\u4ee5\u5f53\u9700\u8981\u5728 vector \u4e2d\u50a8\u5b58\u4e0d\u540c\u7c7b\u578b\u503c\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u5b9a\u4e49\u5e76\u4f7f\u7528\u4e00\u4e2a\u679a\u4e3e\uff01 \u4f8b\u5982\uff0c\u5047\u5982\u6211\u4eec\u60f3\u8981\u4ece\u7535\u5b50\u8868\u683c\u7684\u4e00\u884c\u4e2d\u83b7\u53d6\u503c\uff0c\u800c\u8fd9\u4e00\u884c\u7684\u6709\u4e9b\u5217\u5305\u542b\u6570\u5b57\uff0c\u6709\u4e9b\u5305\u542b\u6d6e\u70b9\u503c\uff0c\u8fd8\u6709\u4e9b\u662f\u5b57\u7b26\u4e32\u3002 \u6211\u4eec\u53ef\u4ee5\u5b9a\u4e49\u4e00\u4e2a\u679a\u4e3e\uff0c\u5176\u6210\u5458\u4f1a\u5b58\u653e\u8fd9\u4e9b\u4e0d\u540c\u7c7b\u578b\u7684\u503c\uff0c\u540c\u65f6\u6240\u6709\u8fd9\u4e9b\u679a\u4e3e\u6210\u5458\u90fd\u4f1a\u88ab\u5f53\u4f5c\u76f8\u540c\u7c7b\u578b\uff0c\u90a3\u4e2a\u679a\u4e3e\u7684\u7c7b\u578b\u3002 \u63a5\u7740\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u50a8\u5b58\u679a\u4e3e\u503c\u7684 vector\uff0c\u8fd9\u6837\u6700\u7ec8\u5c31\u80fd\u591f\u50a8\u5b58\u4e0d\u540c\u7c7b\u578b\u7684\u503c\u4e86\u3002 fn main () { enum SpreadsheetCell { Int ( i32 ), Float ( f64 ), Text ( String ), } let row = vec! [ SpreadsheetCell :: Int ( 3 ), SpreadsheetCell :: Text ( String :: from ( \"blue\" )), SpreadsheetCell :: Float ( 10.12 ), ]; } Rust \u5728\u7f16\u8bd1\u65f6\u5c31\u5fc5\u987b\u51c6\u786e\u7684\u77e5\u9053 vector \u4e2d\u7c7b\u578b\u7684\u539f\u56e0\u5728\u4e8e\u5b83\u9700\u8981\u77e5\u9053\u50a8\u5b58\u6bcf\u4e2a\u5143\u7d20\u5230\u5e95\u9700\u8981\u591a\u5c11\u5185\u5b58\u3002 \u7b2c\u4e8c\u4e2a\u597d\u5904\u662f\u53ef\u4ee5\u51c6\u786e\u7684\u77e5\u9053\u8fd9\u4e2a vector \u4e2d\u5141\u8bb8\u4ec0\u4e48\u7c7b\u578b\u3002 \u5982\u679c Rust \u5141\u8bb8 vector \u5b58\u653e\u4efb\u610f\u7c7b\u578b\uff0c\u90a3\u4e48\u5f53\u5bf9 vector \u5143\u7d20\u6267\u884c\u64cd\u4f5c\u65f6\u4e00\u4e2a\u6216\u591a\u4e2a\u7c7b\u578b\u7684\u503c\u5c31\u6709\u53ef\u80fd\u4f1a\u9020\u6210\u9519\u8bef\u3002 \u4f7f\u7528\u679a\u4e3e\u5916\u52a0 match \u610f\u5473\u7740 Rust \u80fd\u5728\u7f16\u8bd1\u65f6\u5c31\u4fdd\u8bc1\u603b\u662f\u4f1a\u5904\u7406\u6240\u6709\u53ef\u80fd\u7684\u60c5\u51b5. \u5982\u679c\u5728\u7f16\u5199\u7a0b\u5e8f\u65f6\u4e0d\u80fd\u786e\u5207\u65e0\u9057\u5730\u77e5\u9053\u8fd0\u884c\u65f6\u4f1a\u50a8\u5b58\u8fdb vector \u7684\u6240\u6709\u7c7b\u578b\uff0c\u679a\u4e3e\u6280\u672f\u5c31\u884c\u4e0d\u901a\u4e86\u3002\u76f8\u53cd\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 trait \u5bf9\u8c61\uff0c\u7b2c\u5341\u4e03\u7ae0\u4f1a\u8bb2\u5230\u5b83\u3002 \u73b0\u5728\u6211\u4eec\u4e86\u89e3\u4e86\u4e00\u4e9b\u4f7f\u7528 vector \u7684\u6700\u5e38\u89c1\u7684\u65b9\u5f0f\uff0c\u8bf7\u4e00\u5b9a\u53bb\u770b\u770b\u6807\u51c6\u5e93\u4e2d Vec \u5b9a\u4e49\u7684\u5f88\u591a\u5176\u4ed6\u5b9e\u7528\u65b9\u6cd5\u7684 API \u6587\u6863 \u3002 \u4f8b\u5982\uff0c\u9664\u4e86 push \u4e4b\u5916\u8fd8\u6709\u4e00\u4e2a pop \u65b9\u6cd5\uff0c\u5b83\u4f1a\u79fb\u9664\u5e76\u8fd4\u56de vector \u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u3002 \u5b57\u7b26\u4e32\u548cUTF-8 \u5b57\u7b26\u4e32 \u662f\u65b0\u664b Rustacean \u4eec\u901a\u5e38\u4f1a\u88ab\u56f0\u4f4f\u7684\u9886\u57df\uff0c\u8fd9\u662f\u7531\u4e8e\u4e09\u65b9\u9762\u7406\u7531\u7684\u7ed3\u5408\uff1a Rust \u503e\u5411\u4e8e\u786e\u4fdd\u66b4\u9732\u51fa\u53ef\u80fd\u7684\u9519\u8bef\uff0c\u5b57\u7b26\u4e32\u662f\u6bd4\u5f88\u591a\u7a0b\u5e8f\u5458\u6240\u60f3\u8c61\u7684\u8981\u66f4\u4e3a\u590d\u6742\u7684\u6570\u636e\u7ed3\u6784\uff0c\u4ee5\u53ca UTF-8 \u3002\u6240\u6709\u8fd9\u4e9b\u8981\u7d20\u7ed3\u5408\u8d77\u6765\u5bf9\u4e8e\u6765\u81ea\u5176\u4ed6\u8bed\u8a00\u80cc\u666f\u7684\u7a0b\u5e8f\u5458\u5c31\u53ef\u80fd\u663e\u5f97\u5f88\u56f0\u96be\u4e86\u3002 \u5728\u96c6\u5408\u7ae0\u8282\u4e2d\u8ba8\u8bba\u5b57\u7b26\u4e32\u7684\u539f\u56e0\u662f\uff0c\u5b57\u7b26\u4e32\u5c31\u662f\u4f5c\u4e3a\u5b57\u8282\u7684\u96c6\u5408\u5916\u52a0\u4e00\u4e9b\u65b9\u6cd5\u5b9e\u73b0\u7684\uff0c\u5f53\u8fd9\u4e9b\u5b57\u8282\u88ab\u89e3\u91ca\u4e3a\u6587\u672c\u65f6\uff0c\u8fd9\u4e9b\u65b9\u6cd5\u63d0\u4f9b\u4e86\u5b9e\u7528\u7684\u529f\u80fd\u3002 \u4ec0\u4e48\u662f\u5b57\u7b26\u4e32\uff1f \u5b57\u7b26\u4e32 \u3002Rust \u7684\u6838\u5fc3\u8bed\u8a00\u4e2d\u53ea\u6709\u4e00\u79cd\u5b57\u7b26\u4e32\u7c7b\u578b\uff1a \u5b57\u7b26\u4e32slice str \uff0c\u5b83\u901a\u5e38\u4ee5\u88ab \u501f\u7528 \u7684\u5f62\u5f0f\u51fa\u73b0\uff0c &str \u3002\u7b2c\u56db\u7ae0\u8bb2\u5230\u4e86 \u5b57\u7b26\u4e32 slices \uff1a \u5b83\u4eec\u662f\u4e00\u4e9b\u5bf9\u50a8\u5b58\u5728\u522b\u5904\u7684 UTF-8 \u7f16\u7801\u5b57\u7b26\u4e32\u6570\u636e\u7684\u5f15\u7528 \u3002 \u4e3e\u4f8b\u6765\u8bf4\uff0c\u7531\u4e8e\u5b57\u7b26\u4e32 \u5b57\u9762\u503c \u88ab\u50a8\u5b58\u5728\u7a0b\u5e8f\u7684\u4e8c\u8fdb\u5236\u8f93\u51fa\u4e2d\uff0c\u56e0\u6b64\u5b57\u7b26\u4e32\u5b57\u9762\u503c\u4e5f\u662f \u5b57\u7b26\u4e32slices \u3002 \u79f0\u4f5c String \u7684\u7c7b\u578b\u662f\u7531\u6807\u51c6\u5e93\u63d0\u4f9b\u7684\uff0c\u800c\u6ca1\u6709\u5199\u8fdb\u6838\u5fc3\u8bed\u8a00\u90e8\u5206\uff0c\u5b83\u662f \u53ef\u589e\u957f\u7684 \u3001 \u53ef\u53d8\u7684 \u3001 \u6709\u6240\u6709\u6743\u7684 \u3001 UTF-8 \u7f16\u7801\u7684\u5b57\u7b26\u4e32\u7c7b\u578b \u3002 \u5f53 Rustacean \u4eec\u8c08\u5230 Rust \u7684 \u201c \u5b57\u7b26\u4e32 \u201d\u65f6\uff0c\u5b83\u4eec\u901a\u5e38\u6307\u7684\u662f String \u6216 \u5b57\u7b26\u4e32slice &str \u7c7b\u578b \uff0c\u800c\u4e0d\u7279\u6307\u5176\u4e2d\u67d0\u4e00\u4e2a\u3002 \u867d\u7136\u672c\u90e8\u5206\u5185\u5bb9\u5927\u591a\u662f\u5173\u4e8e String \u7684\uff0c\u4e0d\u8fc7\u8fd9\u4e24\u4e2a\u7c7b\u578b\u5728 Rust \u6807\u51c6\u5e93\u4e2d\u90fd\u88ab\u5e7f\u6cdb\u4f7f\u7528\uff0c String \u548c \u5b57\u7b26\u4e32 slices \u90fd\u662f UTF-8 \u7f16\u7801\u7684\u3002 \u65b0\u5efa\u5b57\u7b26\u4e32 // \u4ee5 new \u51fd\u6570\u521b\u5efa\u5b57\u7b26\u4e32\u5f00\u59cb // \u65b0\u5efa\u4e00\u4e2a\u7a7a\u7684 String let mut s = String :: new (); \u901a\u5e38\u5b57\u7b26\u4e32\u4f1a\u6709\u521d\u59cb\u6570\u636e\uff0c\u56e0\u4e3a\u5e0c\u671b\u4e00\u5f00\u59cb\u5c31\u6709\u8fd9\u4e2a\u5b57\u7b26\u4e32\u3002\u4e3a\u6b64\uff0c\u53ef\u4ee5\u4f7f\u7528 to_string \u65b9\u6cd5\uff0c\u5b83\u80fd\u7528\u4e8e\u4efb\u4f55\u5b9e\u73b0\u4e86 Display trait \u7684\u7c7b\u578b\uff0c\u5b57\u7b26\u4e32\u5b57\u9762\u503c\u4e5f\u5b9e\u73b0\u4e86\u5b83\u3002 let data = \"initial contents\" ; let s = data . to_string (); // \u8be5\u65b9\u6cd5\u4e5f\u53ef\u76f4\u63a5\u7528\u4e8e\u5b57\u7b26\u4e32\u5b57\u9762\u503c\uff1a // \u4f1a\u521b\u5efa\u5305\u542b initial contents \u7684\u5b57\u7b26\u4e32\u3002 let s = \"initial contents\" . to_string (); // \u4e5f\u53ef\u4ee5\u4f7f\u7528 String::from \u51fd\u6570\u6765\u4ece\u5b57\u7b26\u4e32\u5b57\u9762\u503c\u521b\u5efa String let s = String :: from ( \"initial contents\" ); \u56e0\u4e3a\u5b57\u7b26\u4e32\u5e94\u7528\u5e7f\u6cdb\uff0c\u8fd9\u91cc\u6709\u5f88\u591a\u4e0d\u540c\u7684\u7528\u4e8e\u5b57\u7b26\u4e32\u7684\u901a\u7528 API \u53ef\u4f9b\u9009\u62e9\u3002\u5176\u4e2d\u4e00\u4e9b\u53ef\u80fd\u770b\u8d77\u6765\u591a\u4f59\uff0c\u4e0d\u8fc7\u90fd\u6709\u5176\u7528\u6b66\u4e4b\u5730\uff01\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c String::from \u548c .to_string \u6700\u7ec8\u505a\u4e86\u5b8c\u5168\u76f8\u540c\u7684\u5de5\u4f5c\uff0c\u6240\u4ee5\u5982\u4f55\u9009\u62e9\u5c31\u662f \u4ee3\u7801\u98ce\u683c\u4e0e\u53ef\u8bfb\u6027 \u7684\u95ee\u9898\u4e86\u3002 // \u5b57\u7b26\u4e32\u662f UTF-8 \u7f16\u7801\u7684\uff0c\u6240\u4ee5\u53ef\u4ee5\u5305\u542b\u4efb\u4f55\u53ef\u4ee5\u6b63\u786e\u7f16\u7801\u7684\u6570\u636e let hello = String :: from ( \"\u0627\u0644\u0633\u0644\u0627\u0645 \u0639\u0644\u064a\u0643\u0645\" ); let hello = String :: from ( \"Dobr\u00fd den\" ); let hello = String :: from ( \"Hello\" ); let hello = String :: from ( \"\u05e9\u05b8\u05c1\u05dc\u05d5\u05b9\u05dd\" ); let hello = String :: from ( \"\u0928\u092e\u0938\u094d\u0924\u0947\" ); let hello = String :: from ( \"\u3053\u3093\u306b\u3061\u306f\" ); let hello = String :: from ( \"\uc548\ub155\ud558\uc138\uc694\" ); let hello = String :: from ( \"\u4f60\u597d\" ); let hello = String :: from ( \"Ol\u00e1\" ); let hello = String :: from ( \"\u0417\u0434\u0440\u0430\u0432\u0441\u0442\u0432\u0443\u0439\u0442\u0435\" ); let hello = String :: from ( \"Hola\" ); // \u6240\u6709\u8fd9\u4e9b\u90fd\u662f\u6709\u6548\u7684 String \u503c \u66f4\u65b0\u5b57\u7b26\u4e32 String \u7684\u5927\u5c0f\u53ef\u4ee5\u589e\u52a0\uff0c\u5176\u5185\u5bb9\u4e5f\u53ef\u4ee5\u6539\u53d8\uff0c\u5c31\u50cf\u53ef\u4ee5\u653e\u5165\u66f4\u591a\u6570\u636e\u6765\u6539\u53d8 Vec \u7684\u5185\u5bb9\u4e00\u6837\u3002 \u53e6\u5916\uff0c\u53ef\u4ee5\u65b9\u4fbf\u7684\u4f7f\u7528 + \u8fd0\u7b97\u7b26\u6216 format! \u5b8f\u6765\u62fc\u63a5 String \u503c\u3002 push_str \u548c push // \u901a\u8fc7 push_str \u65b9\u6cd5\u6765\u9644\u52a0\u5b57\u7b26\u4e32 slice\uff0c\u4ece\u800c\u4f7f String \u53d8\u957f let mut s = String :: from ( \"foo\" ); s . push_str ( \"bar\" ); // s \u5c06\u4f1a\u5305\u542b foobar\u3002push_str \u65b9\u6cd5\u91c7\u7528\u5b57\u7b26\u4e32 slice\uff0c\u56e0\u4e3a\u6211\u4eec\u5e76\u4e0d\u9700\u8981\u83b7\u53d6\u53c2\u6570\u7684\u6240\u6709\u6743\u3002 // \u5c06\u5b57\u7b26\u4e32 slice \u7684\u5185\u5bb9\u9644\u52a0\u5230 String \u540e\u4f7f\u7528\u5b83 let mut s1 = String :: from ( \"foo\" ); let s2 = \"bar\" ; s1 . push_str ( s2 ); // \u5982\u679c push_str \u65b9\u6cd5\u83b7\u53d6\u4e86 s2 \u7684\u6240\u6709\u6743\uff0c\u5c31\u4e0d\u80fd\u5728\u6700\u540e\u4e00\u884c\u6253\u5370\u51fa\u5176\u503c\u4e86 println! ( \"s2 is {}\" , s2 ); // push \u65b9\u6cd5\u88ab\u5b9a\u4e49\u4e3a\u83b7\u53d6\u4e00\u4e2a\u5355\u72ec\u7684\u5b57\u7b26\u4f5c\u4e3a\u53c2\u6570\uff0c\u5e76\u9644\u52a0\u5230 String \u4e2d // \u4f7f\u7528 push \u5c06\u4e00\u4e2a\u5b57\u7b26\u52a0\u5165 String \u503c\u4e2d let mut s = String :: from ( \"lo\" ); // \u6dfb\u52a0mut\u5173\u952e\u5b57\u4f7f\u5176\u53ef\u53d8\u3002 s . push ( 'l' ); + \u8fd0\u7b97\u7b26\u6216 format! \u5b8f \u901a\u5e38\u4f1a\u5e0c\u671b\u5c06\u4e24\u4e2a\u5df2\u77e5\u7684\u5b57\u7b26\u4e32\u5408\u5e76\u5728\u4e00\u8d77\u3002\u4e00\u79cd\u529e\u6cd5\u662f\u50cf\u8fd9\u6837\u4f7f\u7528 + \u8fd0\u7b97\u7b26 // \u4f7f\u7528 + \u8fd0\u7b97\u7b26\u5c06\u4e24\u4e2a String \u503c\u5408\u5e76\u5230\u4e00\u4e2a\u65b0\u7684 String \u503c\u4e2d fn main () { let s1 = String :: from ( \"Hello, \" ); let s2 = String :: from ( \"world!\" ); let s3 = s1 + & s2 ; // \u6ce8\u610f s1 \u88ab\u79fb\u52a8\u4e86\uff0c\u4e0d\u80fd\u7ee7\u7eed\u4f7f\u7528 // \u4f7f\u7528\u4e86 &\uff0c\u610f\u5473\u7740\u6211\u4eec\u4f7f\u7528\u7b2c\u4e8c\u4e2a\u5b57\u7b26\u4e32\u7684 \u5f15\u7528 \u4e0e\u7b2c\u4e00\u4e2a\u5b57\u7b26\u4e32\u76f8\u52a0\u3002 // \u56e0\u4e3a add \u51fd\u6570\u7684 s \u53c2\u6570\uff1a\u53ea\u80fd\u5c06 &str \u548c String \u76f8\u52a0\uff0c\u4e0d\u80fd\u5c06\u4e24\u4e2a String \u503c\u76f8\u52a0\u3002 // println!(\"a is {s1}\"); // \u53d6\u6d88\u6ce8\u91ca\uff0c\u4f1a\u7f16\u8bd1\u4e0d\u901a\u8fc7\uff0cs1\u5df2\u7ecf\u79fb\u52a8\u4e86\uff0c\u4e0d\u53ef\u4f7f\u7528 println! ( \"c is {s3}\" ); // s3 \u5219\u6ca1\u95ee\u9898 } s1 \u5728\u76f8\u52a0\u540e\u4e0d\u518d\u6709\u6548\u7684\u539f\u56e0\uff0c\u548c\u4f7f\u7528 s2 \u7684\u5f15\u7528\u7684\u539f\u56e0\uff0c\u4e0e\u4f7f\u7528 + \u8fd0\u7b97\u7b26\u65f6\u8c03\u7528\u7684\u51fd\u6570\u7b7e\u540d\u6709\u5173\u3002 + \u8fd0\u7b97\u7b26\u4f7f\u7528\u4e86 add \u51fd\u6570\uff0c\u8fd9\u4e2a\u51fd\u6570\u7b7e\u540d\u770b\u8d77\u6765\u50cf\u8fd9\u6837\uff1a fn add ( self , s : & str ) -> String { // \u8fd9\u5e76\u4e0d\u662f\u6807\u51c6\u5e93\u4e2d\u5b9e\u9645\u7684\u7b7e\u540d\uff1b\u6807\u51c6\u5e93\u4e2d\u7684 add \u4f7f\u7528\u6cdb\u578b\u5b9a\u4e49\u3002 \u8fd9\u91cc\u6211\u4eec\u770b\u5230\u7684 add \u7684\u7b7e\u540d\u4f7f\u7528\u5177\u4f53\u7c7b\u578b\u4ee3\u66ff\u4e86\u6cdb\u578b\uff0c\u8fd9\u4e5f\u6b63\u662f\u5f53\u4f7f\u7528 String \u503c\u8c03\u7528\u8fd9\u4e2a\u65b9\u6cd5\u4f1a\u53d1\u751f\u7684\u3002\u7b2c\u5341\u7ae0\u4f1a\u8ba8\u8bba\u6cdb\u578b\u3002 \u6b63\u5982 add \u7684\u7b2c\u4e8c\u4e2a\u53c2\u6570\u6240\u6307\u5b9a\u7684\uff0c &s2 \u7684\u7c7b\u578b\u662f &String \u800c\u4e0d\u662f &str \u3002\u90a3\u4e48\u4e3a\u4ec0\u4e48\u793a\u4f8b\u8fd8\u80fd\u7f16\u8bd1\u5462\uff1f \u4e4b\u6240\u4ee5\u80fd\u591f\u5728 add \u8c03\u7528\u4e2d\u4f7f\u7528 &s2 \u662f\u56e0\u4e3a &String \u53ef\u4ee5\u88ab \u5f3a\u8f6c \uff08coerced\uff09\u6210 &str \u3002\u5f53 add \u51fd\u6570\u88ab\u8c03\u7528\u65f6\uff0cRust \u4f7f\u7528\u4e86\u4e00\u4e2a\u88ab\u79f0\u4e3a Deref \u5f3a\u5236\u8f6c\u6362 \uff08deref coercion\uff09\u7684\u6280\u672f\uff0c \u53ef\u4ee5\u5c06\u5176\u7406\u89e3\u4e3a\u5b83\u628a &s2 \u53d8\u6210\u4e86 &s2[..] \u3002 \u7b2c\u5341\u4e94\u7ae0 \u4f1a\u66f4\u6df1\u5165\u7684\u8ba8\u8bba Deref \u5f3a\u5236\u8f6c\u6362\u3002 \u56e0\u4e3a add \u6ca1\u6709\u83b7\u53d6\u53c2\u6570\u7684\u6240\u6709\u6743\uff0c\u6240\u4ee5 s2 \u5728\u8fd9\u4e2a\u64cd\u4f5c\u540e\u4ecd\u7136\u662f\u6709\u6548\u7684 String \u3002 \u5176\u6b21\uff0c\u53ef\u4ee5\u53d1\u73b0\u7b7e\u540d\u4e2d add \u83b7\u53d6\u4e86 self \u7684\u6240\u6709\u6743\uff0c\u56e0\u4e3a self \u6ca1\u6709 \u4f7f\u7528 & \u3002\u8fd9\u610f\u5473\u7740\u793a\u4f8b\u4e2d\u7684 s1 \u7684\u6240\u6709\u6743\u5c06\u88ab\u79fb\u52a8\u5230 add \u8c03\u7528\u4e2d\uff0c\u4e4b\u540e\u5c31\u4e0d\u518d\u6709\u6548\u3002 \u6240\u4ee5\u867d\u7136 let s3 = s1 + &s2; \u770b\u8d77\u6765\u5c31\u50cf\u5b83\u4f1a\u590d\u5236\u4e24\u4e2a\u5b57\u7b26\u4e32\u5e76\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u5b57\u7b26\u4e32\uff0c\u800c\u5b9e\u9645\u4e0a\u8fd9\u4e2a\u8bed\u53e5\u4f1a\u83b7\u53d6 s1 \u7684\u6240\u6709\u6743\uff0c\u9644\u52a0\u4e0a\u4ece s2 \u4e2d\u62f7\u8d1d\u7684\u5185\u5bb9\uff0c \u5e76\u8fd4\u56de\u7ed3\u679c\u7684\u6240\u6709\u6743 \u3002 \u6362\u53e5\u8bdd\u8bf4\uff0c\u5b83\u770b\u8d77\u6765\u597d\u50cf\u751f\u6210\u4e86\u5f88\u591a\u62f7\u8d1d\uff0c\u4e0d\u8fc7\u5b9e\u9645\u4e0a\u5e76\u6ca1\u6709\uff1a \u8fd9\u4e2a\u5b9e\u73b0\u6bd4\u62f7\u8d1d\u8981\u66f4\u9ad8\u6548 \u3002 // \u7ea7\u8054\u591a\u4e2a\u5b57\u7b26\u4e32\uff0c+ \u7684\u884c\u4e3a\u5c31\u663e\u5f97\u7b28\u91cd\u4e86 let s1 = String :: from ( \"tic\" ); let s2 = String :: from ( \"tac\" ); let s3 = String :: from ( \"toe\" ); let s = s1 + \"-\" + & s2 + \"-\" + & s3 ; // \u8fd9\u65f6 s \u7684\u5185\u5bb9\u4f1a\u662f \u201ctic-tac-toe\u201d // \u5bf9\u4e8e\u66f4\u4e3a\u590d\u6742\u7684\u5b57\u7b26\u4e32\u94fe\u63a5\uff0c\u53ef\u4ee5\u4f7f\u7528 format! \u5b8f let s = format! ( \"{}-{}-{}\" , s1 , s2 , s3 ); format! \u4e0e println! \u7684\u5de5\u4f5c\u539f\u7406\u76f8\u540c\uff0c\u4e0d\u8fc7\u4e0d\u540c\u4e8e\u5c06\u8f93\u51fa\u6253\u5370\u5230\u5c4f\u5e55\u4e0a\uff0c\u5b83\u8fd4\u56de\u4e00\u4e2a\u5e26\u6709\u7ed3\u679c\u5185\u5bb9\u7684 String \u3002\u8fd9\u4e2a\u7248\u672c\u5c31\u597d\u7406\u89e3\u7684\u591a\uff0c\u5b8f format! \u751f\u6210\u7684\u4ee3\u7801\u4f7f\u7528\u5f15\u7528\u6240\u4ee5\u4e0d\u4f1a\u83b7\u53d6\u4efb\u4f55\u53c2\u6570\u7684\u6240\u6709\u6743\u3002 \u7d22\u5f15\u5b57\u7b26\u4e32 Rust \u7684\u5b57\u7b26\u4e32\u4e0d\u652f\u6301\u7d22\u5f15\u3002 \u5982\u4e0b\u4f7f\u7528\u7d22\u5f15\u8bbf\u95ee\u5b57\u7b26\u4e32\u4f1a\u62a5\u7f16\u8bd1\u9519\u8bef\uff1a let s1 = String :: from ( \"hello\" ); let h = s1 [ 0 ]; // \u5c1d\u8bd5\u5bf9\u5b57\u7b26\u4e32\u4f7f\u7528\u7d22\u5f15\u8bed\u6cd5 \u4f1a\u5bfc\u81f4\u5982\u4e0b\u9519\u8bef\uff1a $ cargo run Compiling collections v0 . 1.0 ( file : ///projects/collections) error [ E0277 ] : the type ` String ` cannot be indexed by ` { integer } ` - -> src / main . rs : 3 : 13 | 3 | let h = s1 [ 0 ]; | ^^^^^ ` String ` cannot be indexed by ` { integer } ` | = help : the trait ` Index < { integer } > ` is not implemented for ` String ` For more information about this error , try ` rustc -- explain E0277 ` . error : could not compile ` collections ` due to previous error \u4e3a\u4ec0\u4e48\u4e0d\u652f\u6301\u5462\uff1f\u90a3\u4e48\u5c31\u8981\u56de\u7b54 Rust\u662f\u5982\u4f55\u5728\u5185\u5b58\u4e2d\u50a8\u5b58\u5b57\u7b26\u4e32\u7684 \u3002\u770b\u4e0b\u9762\ud83d\udc47\ud83c\udffb \u5185\u90e8\u8868\u73b0 String \u662f\u4e00\u4e2a Vec<u8> \u7684\u5c01\u88c5\u3002 let hello = String :: from ( \"Hola\" ); // \u5728\u8fd9\u91cc\uff0clen \u7684\u503c\u662f 4 \uff0c // \u8fd9\u610f\u5473\u7740\u50a8\u5b58\u5b57\u7b26\u4e32 \u201cHola\u201d \u7684 Vec \u7684\u957f\u5ea6\u662f\u56db\u4e2a\u5b57\u8282\uff1a // \u8fd9\u91cc\u6bcf\u4e00\u4e2a\u5b57\u6bcd\u7684 UTF-8 \u7f16\u7801\u90fd\u5360\u7528\u4e00\u4e2a\u5b57\u8282\u3002 \u8fd9\u4e2a\u5462? // \u5b57\u7b26\u4e32\u4e2d\u7684\u9996\u5b57\u6bcd\u662f\u897f\u91cc\u5c14\u5b57\u6bcd\u7684 Ze \u800c\u4e0d\u662f\u963f\u62c9\u4f2f\u6570\u5b57 3 let hello = String :: from ( \"\u0417\u0434\u0440\u0430\u0432\u0441\u0442\u0432\u0443\u0439\u0442\u0435\" ); // \u5f53\u95ee\u53ca\u8fd9\u4e2a\u5b57\u7b26\u662f\u591a\u957f\u7684\u65f6\u5019\u6709\u4eba\u53ef\u80fd\u4f1a\u8bf4\u662f 12\u3002 // \u7136\u800c\uff0cRust \u7684\u56de\u7b54\u662f 24\u3002 \u8fd9\u662f\u4f7f\u7528 UTF-8 \u7f16\u7801 \u201c\u0417\u0434\u0440\u0430\u0432\u0441\u0442\u0432\u0443\u0439\u0442\u0435\u201d \u6240\u9700\u8981\u7684\u5b57\u8282\u6570\uff0c\u8fd9\u662f\u56e0\u4e3a\u6bcf\u4e2a Unicode \u6807\u91cf\u503c\u9700\u8981 \u4e24\u4e2a\u5b57\u8282 \u5b58\u50a8\u3002 \u56e0\u6b64\u4e00\u4e2a\u5b57\u7b26\u4e32\u5b57\u8282\u503c\u7684\u7d22\u5f15\u5e76\u4e0d\u603b\u662f\u5bf9\u5e94\u4e00\u4e2a\u6709\u6548\u7684 Unicode \u6807\u91cf\u503c\u3002 \u4f5c\u4e3a\u6f14\u793a\uff0c\u8003\u8651\u5982\u4e0b\u65e0\u6548\u7684 Rust \u4ee3\u7801\uff1a let hello = \"\u0417\u0434\u0440\u0430\u0432\u0441\u0442\u0432\u0443\u0439\u0442\u0435\" ; let answer = & hello [ 0 ]; // \u5df2\u7ecf\u77e5\u9053 answer \u4e0d\u662f\u7b2c\u4e00\u4e2a\u5b57\u7b26 \u0417\u3002 \u5f53\u4f7f\u7528 UTF-8 \u7f16\u7801\u65f6\uff0c \u0417 \u7684\u7b2c\u4e00\u4e2a\u5b57\u8282 208 \uff0c\u7b2c\u4e8c\u4e2a\u662f 151 \uff0c\u6240\u4ee5 answer \u5b9e\u9645\u4e0a\u5e94\u8be5\u662f 208 \uff0c\u4e0d\u8fc7 208 \u81ea\u8eab\u5e76\u4e0d\u662f\u4e00\u4e2a\u6709\u6548\u7684\u5b57\u6bcd\u3002 \u8fd4\u56de 208 \u53ef\u4e0d\u662f\u4e00\u4e2a\u8bf7\u6c42\u5b57\u7b26\u4e32\u7b2c\u4e00\u4e2a\u5b57\u6bcd\u7684\u4eba\u6240\u5e0c\u671b\u770b\u5230\u7684\uff0c\u4e0d\u8fc7\u5b83\u662f Rust \u5728\u5b57\u8282\u7d22\u5f15 0 \u4f4d\u7f6e\u6240\u80fd\u63d0\u4f9b\u7684\u552f\u4e00\u6570\u636e\u3002 \u7528\u6237\u901a\u5e38\u4e0d\u4f1a\u60f3\u8981\u4e00\u4e2a\u5b57\u8282\u503c\u88ab\u8fd4\u56de\uff0c\u5373\u4fbf\u8fd9\u4e2a\u5b57\u7b26\u4e32\u53ea\u6709\u62c9\u4e01\u5b57\u6bcd\uff1a \u5373\u4fbf &\"hello\"[0] \u662f\u8fd4\u56de\u5b57\u8282\u503c\u7684\u6709\u6548\u4ee3\u7801\uff0c\u5b83\u4e5f\u5e94\u5f53\u8fd4\u56de 104 \u800c\u4e0d\u662f h \u3002 \u4e3a\u4e86\u907f\u514d\u8fd4\u56de\u610f\u5916\u7684\u503c\u5e76\u9020\u6210\u4e0d\u80fd\u7acb\u523b\u53d1\u73b0\u7684 bug\uff0cRust \u6839\u672c\u4e0d\u4f1a\u7f16\u8bd1\u8fd9\u4e9b\u4ee3\u7801\uff0c\u5e76\u5728\u5f00\u53d1\u8fc7\u7a0b\u4e2d\u53ca\u65e9\u675c\u7edd\u4e86\u8bef\u4f1a\u7684\u53d1\u751f\u3002 \u5b57\u8282\u3001\u6807\u91cf\u503c\u548c\u5b57\u5f62\u7c07 \u4ece Rust \u7684\u89d2\u5ea6\u6765\u8bb2\uff0c\u4e8b\u5b9e\u4e0a\u6709\u4e09\u79cd\u76f8\u5173\u65b9\u5f0f\u53ef\u4ee5\u7406\u89e3\u5b57\u7b26\u4e32\uff1a \u5b57\u8282 \u3001 \u6807\u91cf\u503c \u548c \u5b57\u5f62\u7c07 \uff08\u6700\u63a5\u8fd1\u4eba\u4eec\u773c\u4e2d \u5b57\u6bcd \u7684\u6982\u5ff5\uff09\u3002 \u6bd4\u5982\u8fd9\u4e2a\u7528\u68b5\u6587\u4e66\u5199\u7684\u5370\u5ea6\u8bed\u5355\u8bcd \u201c\u0928\u092e\u0938\u094d\u0924\u0947\u201d \uff0c\u6700\u7ec8\u5b83\u50a8\u5b58\u5728 vector \u4e2d\u7684 u8 \u503c\u770b\u8d77\u6765\u50cf\u8fd9\u6837\uff1a [ 224 , 164 , 168 , 224 , 164 , 174 , 224 , 164 , 184 , 224 , 165 , 141 , 224 , 164 , 164 , 224 , 165 , 135 ] \u8fd9\u91cc\u6709 18 \u4e2a\u5b57\u8282\uff0c\u4e5f\u5c31\u662f\u8ba1\u7b97\u673a\u6700\u7ec8\u4f1a\u50a8\u5b58\u7684\u6570\u636e\u3002\u5982\u679c\u4ece Unicode \u6807\u91cf\u503c\u7684\u89d2\u5ea6\u7406\u89e3\u5b83\u4eec\uff0c\u4e5f\u5c31\u50cf Rust \u7684 char \u7c7b\u578b\u90a3\u6837\uff0c\u8fd9\u4e9b\u5b57\u8282\u770b\u8d77\u6765\u50cf\u8fd9\u6837\uff1a [ '\u0928' , '\u092e' , '\u0938' , '\u094d' , '\u0924' , '\u0947' ] // \u8fd9\u91cc\u6709\u516d\u4e2a char\uff0c\u4e0d\u8fc7\u7b2c\u56db\u4e2a\u548c\u7b2c\u516d\u4e2a\u90fd\u4e0d\u662f\u5b57\u6bcd\uff0c\u5b83\u4eec\u662f\u53d1\u97f3\u7b26\u53f7\u672c\u8eab\u5e76\u6ca1\u6709\u4efb\u4f55\u610f\u4e49\u3002 // \u6700\u540e\uff0c\u5982\u679c\u4ee5\u5b57\u5f62\u7c07\u7684\u89d2\u5ea6\u7406\u89e3\uff0c\u5c31\u4f1a\u5f97\u5230\u4eba\u4eec\u6240\u8bf4\u7684\u6784\u6210\u8fd9\u4e2a\u5355\u8bcd\u7684\u56db\u4e2a\u5b57\u6bcd\uff1a [ \"\u0928\" , \"\u092e\" , \"\u0938\u094d\" , \"\u0924\u0947\" ] Rust \u63d0\u4f9b\u4e86\u591a\u79cd\u4e0d\u540c\u7684\u65b9\u5f0f\u6765\u89e3\u91ca\u8ba1\u7b97\u673a\u50a8\u5b58\u7684\u539f\u59cb\u5b57\u7b26\u4e32\u6570\u636e\uff0c\u8fd9\u6837\u7a0b\u5e8f\u5c31\u53ef\u4ee5\u9009\u62e9\u5b83\u9700\u8981\u7684\u8868\u73b0\u65b9\u5f0f\uff0c\u800c\u65e0\u6240\u8c13\u662f\u4f55\u79cd\u4eba\u7c7b\u8bed\u8a00\u3002 \u6700\u540e\u4e00\u4e2a Rust \u4e0d\u5141\u8bb8\u4f7f\u7528\u7d22\u5f15\u83b7\u53d6 String \u5b57\u7b26\u7684\u539f\u56e0\u662f\uff0c \u7d22\u5f15\u64cd\u4f5c\u9884\u671f\u603b\u662f\u9700\u8981\u5e38\u6570\u65f6\u95f4 (O(1)) \u3002\u4f46\u662f\u5bf9\u4e8e String \u4e0d\u53ef\u80fd\u4fdd\u8bc1\u8fd9\u6837\u7684\u6027\u80fd\uff0c \u56e0\u4e3a Rust \u5fc5\u987b\u4ece\u5f00\u5934\u5230\u7d22\u5f15\u4f4d\u7f6e\u904d\u5386\u6765\u786e\u5b9a\u6709\u591a\u5c11\u6709\u6548\u7684\u5b57\u7b26\u3002 \u5b57\u7b26\u4e32 slice \u7d22\u5f15\u5b57\u7b26\u4e32\u901a\u5e38\u662f\u4e00\u4e2a\u574f\u70b9\u5b50\uff0c \u56e0\u4e3a\u5b57\u7b26\u4e32\u7d22\u5f15\u5e94\u8be5\u8fd4\u56de\u7684\u7c7b\u578b\u662f\u4e0d\u660e\u786e\u7684\uff1a\u5b57\u8282\u503c\u3001\u5b57\u7b26\u3001\u5b57\u5f62\u7c07\u6216\u8005\u5b57\u7b26\u4e32 slice\u3002 \u4e3a\u4e86\u66f4\u660e\u786e\u7d22\u5f15\u5e76\u8868\u660e\u4f60\u9700\u8981\u4e00\u4e2a\u5b57\u7b26\u4e32 slice \uff0c\u76f8\u6bd4\u4f7f\u7528 [] \u548c \u5355\u4e2a\u503c \u7684\u7d22\u5f15\uff0c\u53ef\u4ee5\u4f7f\u7528 [] \u548c\u4e00\u4e2a range \u6765\u521b\u5efa\u542b\u7279\u5b9a\u5b57\u8282\u7684\u5b57\u7b26\u4e32 slice \uff1a let hello = \"\u0417\u0434\u0440\u0430\u0432\u0441\u0442\u0432\u0443\u0439\u0442\u0435\" ; let s = & hello [ 0 .. 4 ]; // s \u4f1a\u662f\u4e00\u4e2a &str\uff0c\u5b83\u5305\u542b\u5b57\u7b26\u4e32\u7684\u5934\u56db\u4e2a\u5b57\u8282\u3002 // \u65e9\u4e9b\u65f6\u5019\uff0c\u63d0\u5230\u4e86\u8fd9\u4e9b\u5b57\u6bcd\u90fd\u662f\u4e24\u4e2a\u5b57\u8282\u957f\u7684\uff0c // \u6240\u4ee5\u8fd9\u610f\u5473\u7740 s \u5c06\u4f1a\u662f \u201c\u0417\u0434\u201d\u3002 \u5982\u679c\u83b7\u53d6 &hello[0..1] \u4f1a\u53d1\u751f\u4ec0\u4e48\u5462\uff1f \u7b54\u6848\u662f\uff1aRust \u5728\u8fd0\u884c\u65f6\u4f1a panic \uff0c\u5c31\u8ddf\u8bbf\u95ee vector \u4e2d\u7684\u65e0\u6548\u7d22\u5f15\u65f6\u4e00\u6837\uff1a $ cargo run Compiling collections v0 . 1.0 ( file : ///projects/collections) Finished dev [ unoptimized + debuginfo ] target ( s ) in 0.43 s Running ` target / debug / collections ` thread ' main ' panicked at ' byte index 1 is not a char boundary ; it is inside '\u0417' ( bytes 0 .. 2 ) of `\u0417\u0434\u0440\u0430\u0432\u0441\u0442\u0432\u0443\u0439\u0442\u0435` ' , src / main . rs : 4 : 14 note : run with ` RUST_BACKTRACE = 1 ` environment variable to display a backtrace \u5e94\u8be5\u5c0f\u5fc3\u8c28\u614e\u7684\u4f7f\u7528\u8fd9\u4e2a\u64cd\u4f5c\uff0c\u56e0\u4e3a\u8fd9\u4e48\u505a\u53ef\u80fd\u4f1a\u4f7f\u4f60\u7684\u7a0b\u5e8f\u5d29\u6e83\u3002 \u904d\u5386\u5b57\u7b26\u4e32 \u64cd\u4f5c\u5b57\u7b26\u4e32\u6bcf\u4e00\u90e8\u5206\u7684\u6700\u597d\u7684\u65b9\u6cd5\u662f\u660e\u786e\u8868\u793a\u9700\u8981 \u5b57\u7b26 \u8fd8\u662f \u5b57\u8282 \u3002\u5bf9\u4e8e\u5355\u72ec\u7684 Unicode \u6807\u91cf\u503c\u4f7f\u7528 chars \u65b9\u6cd5\u3002 \u5bf9 \u201c\u0928\u092e\u0938\u094d\u0924\u0947\u201d \u8c03\u7528 chars \u65b9\u6cd5\u4f1a\u5c06\u5176\u5206\u5f00\u5e76\u8fd4\u56de\u516d\u4e2a char \u7c7b\u578b\u7684\u503c\uff0c\u63a5\u7740\u5c31\u53ef\u4ee5\u904d\u5386\u5176\u7ed3\u679c\u6765\u8bbf\u95ee\u6bcf\u4e00\u4e2a\u5143\u7d20\u4e86\uff1a for c in \"\u0928\u092e\u0938\u094d\u0924\u0947\" . chars () { println! ( \"{}\" , c ); } \u4f1a\u6253\u5370\u51fa\u5982\u4e0b\u5185\u5bb9\uff1a \u0928 \u092e \u0938 \u094d \u0924 \u0947 \u53e6\u5916 bytes \u65b9\u6cd5\u8fd4\u56de\u6bcf\u4e00\u4e2a \u539f\u59cb\u5b57\u8282 \uff0c\u8fd9\u53ef\u80fd\u4f1a\u9002\u5408\u4f60\u7684\u4f7f\u7528\u573a\u666f\uff1a for b in \"\u0928\u092e\u0938\u094d\u0924\u0947\" . bytes () { println! ( \"{}\" , b ); } \u4f1a\u6253\u5370\u51fa\u7ec4\u6210 String \u7684 18 \u4e2a\u5b57\u8282\uff1a 224 164 // --snip-- 165 135 \u8bf7\u8bb0\u4f4f\u6709\u6548\u7684 Unicode \u6807\u91cf\u503c\u53ef\u80fd\u4f1a\u7531\u4e0d\u6b62\u4e00\u4e2a\u5b57\u8282\u7ec4\u6210\u3002 \u4ece\u5b57\u7b26\u4e32\u4e2d\u83b7\u53d6\u5b57\u5f62\u7c07\u662f\u5f88\u590d\u6742\u7684\uff0c\u6240\u4ee5\u6807\u51c6\u5e93\u5e76\u6ca1\u6709\u63d0\u4f9b\u8fd9\u4e2a\u529f\u80fd\u3002 crates.io \u4e0a\u6709\u4e9b\u63d0\u4f9b\u8fd9\u6837\u529f\u80fd\u7684 crate \u3002 \u5b57\u7b26\u4e32\u5e76\u4e0d\u7b80\u5355 \u603b\u800c\u8a00\u4e4b\uff0c\u5b57\u7b26\u4e32\u8fd8\u662f\u5f88\u590d\u6742\u7684\u3002 \u4e0d\u540c\u7684\u8bed\u8a00\u9009\u62e9\u4e86\u4e0d\u540c\u7684\u5411\u7a0b\u5e8f\u5458\u5c55\u793a\u5176\u590d\u6742\u6027\u7684\u65b9\u5f0f \u3002 Rust \u9009\u62e9\u4e86\u4ee5\u51c6\u786e\u7684\u65b9\u5f0f\u5904\u7406 String \u6570\u636e\u4f5c\u4e3a\u6240\u6709 Rust \u7a0b\u5e8f\u7684\u9ed8\u8ba4\u884c\u4e3a\uff0c\u8fd9\u610f\u5473\u7740\u7a0b\u5e8f\u5458\u4eec\u5fc5\u987b\u66f4\u591a\u7684\u601d\u8003\u5982\u4f55\u9884\u5148\u5904\u7406 UTF-8 \u6570\u636e\u3002 \u8fd9\u79cd\u6743\u8861\u53d6\u820d\u76f8\u6bd4\u5176\u4ed6\u8bed\u8a00\u66f4\u591a\u7684\u66b4\u9732\u51fa\u4e86\u5b57\u7b26\u4e32\u7684\u590d\u6742\u6027\uff0c\u4e0d\u8fc7\u4e5f\u4f7f\u4f60\u5728\u5f00\u53d1\u751f\u547d\u5468\u671f\u540e\u671f\u514d\u4e8e\u5904\u7406\u6d89\u53ca\u975e ASCII \u5b57\u7b26\u7684\u9519\u8bef\u3002 HashMap \u952e\u503c\u5bf9 \u96c6\u5408\u7c7b\u578b \u54c8\u5e0c map \uff08hash map\uff09\u3002 HashMap<K, V> \u7c7b\u578b\u50a8\u5b58\u4e86\u4e00\u4e2a\u952e\u7c7b\u578b K \u5bf9\u5e94\u4e00\u4e2a\u503c\u7c7b\u578b V \u7684\u6620\u5c04\u3002 \u5b83\u901a\u8fc7\u4e00\u4e2a \u54c8\u5e0c\u51fd\u6570 \uff08hashing function\uff09\u6765\u5b9e\u73b0\u6620\u5c04\uff0c\u51b3\u5b9a\u5982\u4f55\u5c06\u952e\u548c\u503c\u653e\u5165\u5185\u5b58\u4e2d\u3002 \u5f88\u591a\u7f16\u7a0b\u8bed\u8a00\u652f\u6301\u8fd9\u79cd\u6570\u636e\u7ed3\u6784\uff0c\u4e0d\u8fc7\u901a\u5e38\u6709\u4e0d\u540c\u7684\u540d\u5b57\uff1a \u54c8\u5e0c \u3001 map \u3001 \u5bf9\u8c61 \u3001 \u54c8\u5e0c\u8868 \u6216\u8005 \u5173\u8054\u6570\u7ec4 \uff0c \u54c8\u5e0c map \u53ef\u4ee5\u7528\u4e8e\u9700\u8981\u4efb\u4f55\u7c7b\u578b\u4f5c\u4e3a\u952e\u6765\u5bfb\u627e\u6570\u636e\u7684\u60c5\u51b5\uff0c\u800c\u4e0d\u662f\u50cf vector \u90a3\u6837\u901a\u8fc7\u7d22\u5f15\u3002 \u65b0\u5efa\u54c8\u5e0c map // \u7528 new \u521b\u5efa\u4e00\u4e2a\u7a7a\u7684 HashMap\uff0c\u5e76\u4f7f\u7528 insert \u589e\u52a0\u5143\u7d20\u3002 use std :: collections :: HashMap ; // \u5fc5\u987b\u9996\u5148 use \u6807\u51c6\u5e93\u4e2d\u96c6\u5408\u90e8\u5206\u7684 HashMap // HashMap \u662f\u6700\u4e0d\u5e38\u7528\u7684\uff0c\u6240\u4ee5\u5e76\u6ca1\u6709\u88ab prelude \u81ea\u52a8\u5f15\u7528\u3002 // \u6807\u51c6\u5e93\u4e2d\u5bf9 HashMap \u7684\u652f\u6301\u4e5f\u76f8\u5bf9\u8f83\u5c11\uff0c\u4f8b\u5982\uff0c\u5e76\u6ca1\u6709\u5185\u5efa\u7684\u6784\u5efa\u5b8f\u3002 let mut scores = HashMap :: new (); scores . insert ( String :: from ( \"Blue\" ), 10 ); scores . insert ( String :: from ( \"Yellow\" ), 50 ); \u50cf vector \u4e00\u6837\uff0c\u54c8\u5e0c map \u5c06\u5b83\u4eec\u7684\u6570\u636e\u50a8\u5b58\u5728\u5806\u4e0a\uff0c\u8fd9\u4e2a HashMap \u7684\u952e\u7c7b\u578b\u662f String \u800c\u503c\u7c7b\u578b\u662f i32 \u3002 \u7c7b\u4f3c\u4e8e vector \uff0c \u54c8\u5e0c map \u662f\u540c\u8d28\u7684\uff1a \u6240\u6709\u7684\u952e\u5fc5\u987b\u662f\u76f8\u540c\u7c7b\u578b\uff0c\u503c\u4e5f\u5fc5\u987b\u90fd\u662f\u76f8\u540c\u7c7b\u578b\u3002 \u53e6\u4e00\u4e2a\u6784\u5efa\u54c8\u5e0c map \u7684\u65b9\u6cd5\u662f\u5728\u4e00\u4e2a\u5143\u7ec4\u7684 vector \u4e0a\u4f7f\u7528 \u8fed\u4ee3\u5668 \uff08iterator\uff09\u548c collect \u65b9\u6cd5\uff0c\u5176\u4e2d\u6bcf\u4e2a\u5143\u7ec4\u5305\u542b\u4e00\u4e2a\u952e\u503c\u5bf9\u3002 \u4f1a\u5728\u7b2c\u5341\u4e09\u7ae0\u7684 \u201c \u4f7f\u7528\u8fed\u4ee3\u5668\u5904\u7406\u4e00\u7cfb\u5217\u5143\u7d20 \u201d \u90e8\u5206 \u4ecb\u7ecd\u8fed\u4ee3\u5668\u53ca\u5176\u5173\u8054\u65b9\u6cd5 \u3002 collect \u65b9\u6cd5\u53ef\u4ee5\u5c06\u6570\u636e\u6536\u96c6\u8fdb\u4e00\u7cfb\u5217\u7684\u96c6\u5408\u7c7b\u578b\uff0c\u5305\u62ec HashMap \u3002 use std :: collections :: HashMap ; let teams = vec! [ String :: from ( \"Blue\" ), String :: from ( \"Yellow\" )]; let initial_scores = vec! [ 10 , 50 ]; // \u8fd9\u91cc HashMap<_, _> \u7c7b\u578b\u6ce8\u89e3\u662f\u5fc5\u8981\u7684\uff0c\u56e0\u4e3a\u53ef\u80fd collect \u4e3a\u5f88\u591a\u4e0d\u540c\u7684\u6570\u636e\u7ed3\u6784\uff0c\u800c\u9664\u975e\u663e\u5f0f\u6307\u5b9a\u5426\u5219 Rust \u65e0\u4ece\u5f97\u77e5\u4f60\u9700\u8981\u7684\u7c7b\u578b\u3002 // \u4f46\u662f\u5bf9\u4e8e\u952e\u548c\u503c\u7684\u7c7b\u578b\u53c2\u6570\u6765\u8bf4\uff0c\u53ef\u4ee5\u4f7f\u7528\u4e0b\u5212\u7ebf\u5360\u4f4d\uff0c\u800c Rust \u80fd\u591f\u6839\u636e vector \u4e2d\u6570\u636e\u7684\u7c7b\u578b\u63a8\u65ad\u51fa HashMap \u6240\u5305\u542b\u7684\u7c7b\u578b\u3002 // \u952e\uff08key\uff09\u7c7b\u578b\u662f String\uff0c // \u503c\uff08value\uff09\u7c7b\u578b\u662f i32\uff0c let mut scores : HashMap < _ , _ > = teams . into_iter (). zip ( initial_scores . into_iter ()). collect (); \u54c8\u5e0c map \u548c\u6240\u6709\u6743 \u5bf9\u4e8e\u50cf i32 \u8fd9\u6837\u7684\u5b9e\u73b0\u4e86 Copy trait \u7684\u7c7b\u578b\uff0c\u5176\u503c\u53ef\u4ee5\u62f7\u8d1d\u8fdb \u54c8\u5e0c map \u3002\u5bf9\u4e8e\u50cf String \u8fd9\u6837\u62e5\u6709\u6240\u6709\u6743\u7684\u503c\uff0c\u5176\u503c\u5c06\u88ab \u79fb\u52a8 \u800c \u54c8\u5e0c map \u4f1a\u6210\u4e3a\u8fd9\u4e9b\u503c\u7684\u6240\u6709\u8005\uff0c use std :: collections :: HashMap ; let field_name = String :: from ( \"Favorite color\" ); let field_value = String :: from ( \"Blue\" ); let mut map = HashMap :: new (); map . insert ( field_name , field_value ); // \u8fd9\u91cc field_name \u548c field_value \u4e0d\u518d\u6709\u6548\uff0c // \u5c1d\u8bd5\u4f7f\u7528\u5b83\u4eec\u770b\u770b\u4f1a\u51fa\u73b0\u4ec0\u4e48\u7f16\u8bd1\u9519\u8bef\uff01 // \u5f53 insert \u8c03\u7528\u5c06 field_name \u548c field_value \u79fb\u52a8\u5230\u54c8\u5e0c map \u4e2d\u540e\uff0c\u5c06\u4e0d\u80fd\u4f7f\u7528\u8fd9\u4e24\u4e2a\u7ed1\u5b9a\u3002 \u5982\u679c\u5c06\u503c\u7684\u5f15\u7528\u63d2\u5165\u54c8\u5e0c map\uff0c\u8fd9\u4e9b\u503c\u672c\u8eab\u5c06\u4e0d\u4f1a\u88ab\u79fb\u52a8\u8fdb\u54c8\u5e0c map\u3002\u4f46\u662f\u8fd9\u4e9b\u5f15\u7528\u6307\u5411\u7684\u503c\u5fc5\u987b\u81f3\u5c11\u5728\u54c8\u5e0c map \u6709\u6548\u65f6\u4e5f\u662f\u6709\u6548\u7684\u3002 \u7b2c\u5341\u7ae0 \u201c \u751f\u547d\u5468\u671f\u4e0e\u5f15\u7528\u6709\u6548\u6027 \u201d \u90e8\u5206\u5c06\u4f1a\u66f4\u591a\u7684\u8ba8\u8bba\u8fd9\u4e2a\u95ee\u9898\u3002 \u8bbf\u95ee\u54c8\u5e0c map \u53ef\u4ee5\u901a\u8fc7 get \u65b9\u6cd5\u5e76\u63d0\u4f9b\u5bf9\u5e94\u7684\u952e\u6765\u4ece\u54c8\u5e0c map \u4e2d\u83b7\u53d6\u503c use std :: collections :: HashMap ; let mut scores = HashMap :: new (); scores . insert ( String :: from ( \"Blue\" ), 10 ); scores . insert ( String :: from ( \"Yellow\" ), 50 ); let team_name = String :: from ( \"Blue\" ); let score = scores . get ( & team_name ); // score \u662f\u4e0e\u84dd\u961f\u5206\u6570\u76f8\u5173\u7684\u503c\uff0c\u5e94\u4e3a Some(10)\u3002 // \u56e0\u4e3a get \u8fd4\u56de Option<V>\uff0c\u6240\u4ee5\u7ed3\u679c\u88ab\u88c5\u8fdb Some\uff1b // \u5982\u679c\u67d0\u4e2a\u952e\u5728\u54c8\u5e0c map \u4e2d\u6ca1\u6709\u5bf9\u5e94\u7684\u503c\uff0cget \u4f1a\u8fd4\u56de None\u3002 // \u8fd9\u65f6\u5c31\u8981\u7528\u67d0\u79cd\u7b2c\u516d\u7ae0\u63d0\u5230\u7684\u65b9\u6cd5\u4e4b\u4e00\u6765\u5904\u7406 Option\u3002 // if let \u65b9\u5f0f\ud83d\udc47\ud83c\udffb if let Some ( value ) = score { println! ( \"value is {value}\" ) } else { println! ( \"not value\" ) } // match \u65b9\u5f0f\ud83d\udc47\ud83c\udffb match score { Some ( value ) => { println! ( \"value is {value}\" ) } // None => { // println!(\"not value\") // } _ => println! ( \"not value\" ), } \u53ef\u4ee5\u4f7f\u7528\u4e0e vector \u7c7b\u4f3c\u7684\u65b9\u5f0f\u6765\u904d\u5386\u54c8\u5e0c map \u4e2d\u7684\u6bcf\u4e00\u4e2a\u952e\u503c\u5bf9\uff0c\u4e5f\u5c31\u662f for \u5faa\u73af\uff1a use std :: collections :: HashMap ; let mut scores = HashMap :: new (); scores . insert ( String :: from ( \"Blue\" ), 10 ); scores . insert ( String :: from ( \"Yellow\" ), 50 ); for ( key , value ) in & scores { println! ( \"{}: {}\" , key , value ); } // \u8fd9\u4f1a\u4ee5\u4efb\u610f\u987a\u5e8f\u6253\u5370\u51fa\u6bcf\u4e00\u4e2a\u952e\u503c\u5bf9\uff1a // Blue:10 // Yellow:50 \u66f4\u65b0\u54c8\u5e0c map \u5c3d\u7ba1\u952e\u503c\u5bf9\u7684\u6570\u91cf\u662f\u53ef\u4ee5\u589e\u957f\u7684\uff0c\u4e0d\u8fc7\u4efb\u4f55\u65f6\u5019\uff0c\u6bcf\u4e2a\u952e\u53ea\u80fd\u5173\u8054\u4e00\u4e2a\u503c\u3002 \u5f53\u6211\u4eec\u60f3\u8981\u6539\u53d8\u54c8\u5e0c map \u4e2d\u7684\u6570\u636e\u65f6\uff0c\u5fc5\u987b\u51b3\u5b9a\u5982\u4f55\u5904\u7406\u4e00\u4e2a\u952e\u5df2\u7ecf\u6709\u503c\u4e86\u7684\u60c5\u51b5\u3002 \u53ef\u4ee5\u9009\u62e9\u5b8c\u5168\u65e0\u89c6\u65e7\u503c\u5e76\u7528\u65b0\u503c\u4ee3\u66ff\u65e7\u503c\u3002 \u53ef\u4ee5\u9009\u62e9\u4fdd\u7559\u65e7\u503c\u800c\u5ffd\u7565\u65b0\u503c\uff0c\u5e76\u53ea\u5728\u952e \u6ca1\u6709 \u5bf9\u5e94\u503c\u65f6\u589e\u52a0\u65b0\u503c\u3002 \u6216\u8005\u53ef\u4ee5\u7ed3\u5408\u65b0\u65e7\u4e24\u503c\u3002 \u8986\u76d6\u4e00\u4e2a\u503c \u5982\u679c\u63d2\u5165\u4e86\u4e00\u4e2a\u952e\u503c\u5bf9\uff0c\u63a5\u7740\u7528\u76f8\u540c\u7684\u952e\u63d2\u5165\u4e00\u4e2a\u4e0d\u540c\u7684\u503c\uff0c\u4e0e\u8fd9\u4e2a\u952e\u76f8\u5173\u8054\u7684\u65e7\u503c\u5c06\u88ab\u66ff\u6362\u3002 use std :: collections :: HashMap ; let mut scores = HashMap :: new (); scores . insert ( String :: from ( \"Blue\" ), 10 ); scores . insert ( String :: from ( \"Blue\" ), 25 ); println! ( \"{:?}\" , scores ); // \u8fd9\u4f1a\u6253\u5370\u51fa {\"Blue\": 25}\u3002\u539f\u59cb\u7684\u503c 10 \u5219\u88ab\u8986\u76d6\u4e86\u3002 \u53ea\u5728\u952e\u6ca1\u6709\u5bf9\u5e94\u503c\u65f6\u63d2\u5165 \u7ecf\u5e38\u4f1a\u68c0\u67e5\u67d0\u4e2a\u7279\u5b9a\u7684\u952e\u662f\u5426\u6709\u503c\uff0c\u5982\u679c\u6ca1\u6709\u5c31\u63d2\u5165\u4e00\u4e2a\u503c\u3002 \u4e3a\u6b64 \u54c8\u5e0c map \u6709\u4e00\u4e2a\u7279\u6709\u7684 API\uff0c\u53eb\u505a entry \uff0c\u5b83\u83b7\u53d6\u6211\u4eec\u60f3\u8981\u68c0\u67e5\u7684\u952e\u4f5c\u4e3a\u53c2\u6570\u3002 entry \u51fd\u6570\u7684\u8fd4\u56de\u503c\u662f\u4e00\u4e2a\u679a\u4e3e\uff0c Entry \uff0c\u5b83\u4ee3\u8868\u4e86\u53ef\u80fd\u5b58\u5728\u4e5f\u53ef\u80fd\u4e0d\u5b58\u5728\u7684\u503c\u3002 use std :: collections :: HashMap ; let mut scores = HashMap :: new (); scores . insert ( String :: from ( \"Blue\" ), 10 ); scores . entry ( String :: from ( \"Yellow\" )). or_insert ( 50 ); scores . entry ( String :: from ( \"Blue\" )). or_insert ( 50 ); println! ( \"{:?}\" , scores ); // \u4f1a\u6253\u5370\u51fa {\"Yellow\": 50, \"Blue\": 10}\u3002 Entry \u7684 or_insert \u65b9\u6cd5\u5728\u952e\u5bf9\u5e94\u7684\u503c\u5b58\u5728\u65f6\u5c31\u8fd4\u56de\u8fd9\u4e2a\u503c\u7684\u53ef\u53d8\u5f15\u7528\uff0c\u5982\u679c\u4e0d\u5b58\u5728\u5219\u5c06\u53c2\u6570\u4f5c\u4e3a\u65b0\u503c\u63d2\u5165\u5e76\u8fd4\u56de\u65b0\u503c\u7684\u53ef\u53d8\u5f15\u7528\u3002 \u8fd9\u6bd4\u7f16\u5199\u81ea\u5df1\u7684\u903b\u8f91\u8981\u7b80\u660e\u7684\u591a\uff0c\u53e6\u5916\u4e5f\u4e0e\u501f\u7528\u68c0\u67e5\u5668\u7ed3\u5408\u5f97\u66f4\u597d\u3002 \u6839\u636e\u65e7\u503c\u66f4\u65b0\u4e00\u4e2a\u503c \u53e6\u4e00\u4e2a\u5e38\u89c1\u7684\u54c8\u5e0c map \u7684\u5e94\u7528\u573a\u666f\u662f\u627e\u5230\u4e00\u4e2a\u952e\u5bf9\u5e94\u7684\u503c\u5e76\u6839\u636e\u65e7\u7684\u503c\u66f4\u65b0\u5b83\u3002 \u793a\u4f8b\u4e2d\u7684\u4ee3\u7801\u8ba1\u6570\u4e00\u4e9b\u6587\u672c\u4e2d\u6bcf\u4e00\u4e2a\u5355\u8bcd\u5206\u522b\u51fa\u73b0\u4e86\u591a\u5c11\u6b21\u3002 use std :: collections :: HashMap ; let text = \"hello world wonderful world\" ; let mut map = HashMap :: new (); // split_whitespace \u65b9\u6cd5\u4f1a\u8fed\u4ee3 text \u7684\u503c\u7531\u7a7a\u683c\u5206\u9694\u7684\u5b50 slice. for word in text . split_whitespace () { // or_insert \u65b9\u6cd5\u8fd4\u56de\u8fd9\u4e2a\u952e\u7684\u503c\u7684\u4e00\u4e2a\u53ef\u53d8\u5f15\u7528\uff08&mut V\uff09\u3002 let count = map . entry ( word ). or_insert ( 0 ); // \u8fd9\u91cc\u5c06\u8fd9\u4e2a\u53ef\u53d8\u5f15\u7528\u50a8\u5b58\u5728 count \u53d8\u91cf\u4e2d\uff0c\u6240\u4ee5\u4e3a\u4e86\u8d4b\u503c\u5fc5\u987b\u9996\u5148\u4f7f\u7528\u661f\u53f7\uff08*\uff09\u89e3\u5f15\u7528 count\u3002 * count += 1 ; // \u8fd9\u4e2a\u53ef\u53d8\u5f15\u7528\u5728 for \u5faa\u73af\u7684\u7ed3\u5c3e\u79bb\u5f00\u4f5c\u7528\u57df\uff0c\u8fd9\u6837\u6240\u6709\u8fd9\u4e9b\u6539\u53d8\u90fd\u662f\u5b89\u5168\u7684\u5e76\u7b26\u5408\u501f\u7528\u89c4\u5219\u3002 } println! ( \"{:?}\" , map ); // \u4f1a\u6253\u5370\u51fa {\"world\": 2, \"hello\": 1, \"wonderful\": 1}\u3002 \u54c8\u5e0c\u51fd\u6570 HashMap \u9ed8\u8ba4\u4f7f\u7528\u4e00\u79cd\u53eb\u505a SipHash \u7684\u54c8\u5e0c\u51fd\u6570\uff0c\u5b83\u53ef\u4ee5\u62b5\u5fa1\u6d89\u53ca \u54c8\u5e0c\u8868 \uff08hash table\uff091 \u7684\u62d2\u7edd\u670d\u52a1\uff08Denial of Service, DoS\uff09\u653b\u51fb\u3002 \u7136\u800c\u8fd9\u5e76\u4e0d\u662f\u53ef\u7528\u7684\u6700\u5feb\u7684\u7b97\u6cd5\uff0c\u4e0d\u8fc7\u4e3a\u4e86\u66f4\u9ad8\u7684\u5b89\u5168\u6027\u503c\u5f97\u4ed8\u51fa\u4e00\u4e9b\u6027\u80fd\u7684\u4ee3\u4ef7\u3002 \u5982\u679c\u6027\u80fd\u76d1\u6d4b\u663e\u793a\u6b64\u54c8\u5e0c\u51fd\u6570\u975e\u5e38\u6162\uff0c\u4ee5\u81f4\u4e8e\u4f60\u65e0\u6cd5\u63a5\u53d7\uff0c\u53ef\u4ee5\u6307\u5b9a\u4e00\u4e2a\u4e0d\u540c\u7684 hasher \u6765\u5207\u6362\u4e3a\u5176\u5b83\u51fd\u6570\u3002 hasher \u662f\u4e00\u4e2a\u5b9e\u73b0\u4e86 BuildHasher trait \u7684\u7c7b\u578b\u3002 \u7b2c\u5341\u7ae0\u4f1a\u8ba8\u8bba trait \u548c\u5982\u4f55\u5b9e\u73b0\u5b83\u4eec\u3002\u5e76\u4e0d\u9700\u8981\u4ece\u5934\u5f00\u59cb\u5b9e\u73b0\u4f60\u81ea\u5df1\u7684 hasher \uff1b crates.io \u6709\u5176\u4ed6\u4eba\u5206\u4eab\u7684\u5b9e\u73b0\u4e86\u8bb8\u591a\u5e38\u7528\u54c8\u5e0c\u7b97\u6cd5\u7684 hasher \u7684\u5e93\u3002 \u53c2\u8003: https://en.wikipedia.org/wiki/SipHash \u603b\u7ed3 vector \u3001 \u5b57\u7b26\u4e32 \u548c \u54c8\u5e0c map \u4f1a\u5728\u4f60\u7684\u7a0b\u5e8f\u9700\u8981 \u50a8\u5b58 \u3001 \u8bbf\u95ee \u548c \u4fee\u6539\u6570\u636e \u65f6\u5e2e\u52a9\u4f60\u3002\u8fd9\u91cc\u6709\u4e00\u4e9b\u4f60\u5e94\u8be5\u80fd\u591f\u89e3\u51b3\u7684\u7ec3\u4e60\u95ee\u9898\uff1a \u7ed9\u5b9a\u4e00\u7cfb\u5217\u6570\u5b57\uff0c\u4f7f\u7528 vector \u5e76\u8fd4\u56de\u8fd9\u4e2a\u5217\u8868\u7684\u4e2d\u4f4d\u6570\uff08\u6392\u5217\u6570\u7ec4\u540e\u4f4d\u4e8e\u4e2d\u95f4\u7684\u503c\uff09\u548c\u4f17\u6570\uff08mode\uff0c\u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684\u503c\uff1b\u8fd9\u91cc\u54c8\u5e0c map \u4f1a\u5f88\u6709\u5e2e\u52a9\uff09\u3002 \u5c06\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a Pig Latin \uff0c\u4e5f\u5c31\u662f\u6bcf\u4e00\u4e2a\u5355\u8bcd\u7684\u7b2c\u4e00\u4e2a\u8f85\u97f3\u5b57\u6bcd\u88ab\u79fb\u52a8\u5230\u5355\u8bcd\u7684\u7ed3\u5c3e\u5e76\u589e\u52a0 \u201cay\u201d\uff0c\u6240\u4ee5 \u201cfirst\u201d \u4f1a\u53d8\u6210 \u201cirst-fay\u201d\u3002\u5143\u97f3\u5b57\u6bcd\u5f00\u5934\u7684\u5355\u8bcd\u5219\u5728\u7ed3\u5c3e\u589e\u52a0 \u201chay\u201d\uff08\u201capple\u201d \u4f1a\u53d8\u6210 \u201capple-hay\u201d\uff09\u3002\u7262\u8bb0 UTF-8 \u7f16\u7801\uff01 \u4f7f\u7528 \u54c8\u5e0c map \u548c vector \uff0c\u521b\u5efa\u4e00\u4e2a\u6587\u672c\u63a5\u53e3\u6765\u5141\u8bb8\u7528\u6237\u5411\u516c\u53f8\u7684\u90e8\u95e8\u4e2d\u589e\u52a0\u5458\u5de5\u7684\u540d\u5b57\u3002\u4f8b\u5982\uff0c\u201cAdd Sally to Engineering\u201d \u6216 \u201cAdd Amir to Sales\u201d\u3002\u63a5\u7740\u8ba9\u7528\u6237\u83b7\u53d6\u4e00\u4e2a\u90e8\u95e8\u7684\u6240\u6709\u5458\u5de5\u7684\u5217\u8868\uff0c\u6216\u8005\u516c\u53f8\u6bcf\u4e2a\u90e8\u95e8\u7684\u6240\u6709\u5458\u5de5\u6309\u7167\u5b57\u5178\u5e8f\u6392\u5217\u7684\u5217\u8868\u3002 \u6807\u51c6\u5e93 API \u6587\u6863\u4e2d\u63cf\u8ff0\u7684\u8fd9\u4e9b\u7c7b\u578b\u7684\u65b9\u6cd5\u5c06\u6709\u52a9\u4e8e\u4f60\u8fdb\u884c\u8fd9\u4e9b\u7ec3\u4e60\uff01 \u7ec3\u4e60-\u6211\u7684\u7b54\u6848 \u8fd4\u56de\u5217\u8868\u7684\u4e2d\u4f4d\u6570 fn main () { let mut numbers = vec! []; // \u751f\u6210100\u4e2a\u968f\u673a\u6570 for _ in 0 .. 100 { let rand_number = thread_rng (). gen_range ( 0 .. 100 ); // \u968f\u673a\u6570\u4ece0-100\u4e2d\u53d6\u5f97\u3002 numbers . push ( rand_number ); } numbers . sort (); // \u4ece\u5c0f\u5230\u5927\u6392\u5e8f numbers . reverse (); // \u9006\u5e8f println! ( \"\u751f\u6210\u7684\u968f\u673a\u6570\u5217\u662f: {:?}\" , & numbers ); let mid_idx = numbers . len () / 2 ; // \u627e\u5230\u4e2d\u4f4d\u6570\u5750\u6807 println! ( \"\u4e2d\u4f4d\u6570\u662f: {}\" , numbers [ mid_idx ]); // \u6253\u5370\u4e2d\u4f4d\u6570 let max_word = max_count_word ( & numbers ); // \u83b7\u53d6\u51fa\u73b0\u6700\u591a\u6b21\u6570\u7684\u968f\u673a\u6570 // \u4f7f\u7528if let \u5224\u65ad\u5e76\u6253\u5370\u51fa\u73b0\u6700\u591a\u6b21\u6570\u7684\u968f\u673a\u6570 if let Some ( value ) = max_word { println! ( \"\u4f17\u6570\u662f: {}\" , value ); } else { println! ( \"\u672a\u53d1\u73b0\u4f17\u6570!\" ); } } fn max_count_word ( vec : & Vec < i32 > ) -> Option <& i32 > { let mut word_count = HashMap :: new (); // \u7edf\u8ba1\u6bcf\u4e2a\u968f\u673a\u6570\u51fa\u73b0\u7684\u6b21\u6570 for word in vec { let count = word_count . entry ( word ). or_insert ( 0 ); * count += 1 ; } let mut max_count = 0 ; let mut max_count_key = None ; // \u627e\u5230\u51fa\u73b0\u6700\u591a\u6b21\u7684\u968f\u673a\u6570; for ( k , v ) in word_count { if v > max_count { max_count = v ; max_count_key = Some ( k ); } } // \u8fd4\u56de\u51fa\u73b0\u6700\u591a\u6b21\u7684\u968f\u673a\u6570 max_count_key } \u5b57\u7b26\u4e32\u8f6c\u6362 fn main () { let vowel_chars = [ 'a' , 'e' , 'i' , 'o' , 'u' ]; // \u4ece\u63a7\u5236\u53f0\u83b7\u53d6\u5355\u8bcd let word = get_word_from_line (); println! ( \"\u83b7\u53d6\u7684\u5355\u8bcd\u662f: {}\" , & word ); let mut fixed_word = String :: from ( \"\" ); // \u975e\u5143\u97f3\u5f00\u5934\u5355\u8bcd\u7684\u7b2c\u4e00\u4e2a\u5b57\u6bcd let mut not_vowel_char : Option < char > = None ; let mut other_chars = String :: from ( \"\" ); for ( idx , c ) in word . chars (). enumerate () { // \u83b7\u53d6\u7b2c\u4e00\u4e2a\u5b57\u7b26\u5e76\u4e14\u4e0d\u662f\u5143\u97f3\u5b57\u6bcd\u5f00\u5934\u7684\u5355\u8bcd\u7684\u7b2c\u4e00\u4e2a\u5b57\u6bcd if idx == 0 && ! vowel_chars . contains ( & c ) { not_vowel_char = Some ( c ); continue ; } else { other_chars . push ( c ); }; } // \u975e\u5143\u97f3\u5b57\u6bcd\u5f00\u5934\u7684\u60c5\u51b5 if let Some ( not_vowel_c ) = not_vowel_char { fixed_word = format! ( \"{}-{}ay\" , other_chars , not_vowel_c ); // \u4f7f\u7528format!\u5b8f\u683c\u5f0f\u5316\u5b57\u7b26 // \u5143\u97f3\u5b57\u6bcd\u5f00\u5934\u7684\u60c5\u51b5 } else { fixed_word = format! ( \"{}-hay\" , other_chars ); // \u4f7f\u7528format!\u5b8f\u683c\u5f0f\u5316\u5b57\u7b26 } println! ( \"\u4fee\u6539\u540e\u7684\u5b57\u7b26\u4e3a: {}\" , fixed_word ); } fn get_word_from_line () -> String { let mut word = String :: new (); println! ( \"\u8bf7\u8f93\u5165\u4e00\u4e2a\u5355\u8bcd:\" ); loop { match io :: stdin (). read_line ( & mut word ) { Ok ( _ ) => break , Err ( _ ) => continue , } } word = match word . trim (). parse () { Ok ( w ) => w , Err ( _ ) => String :: from ( \"\" ), }; word } \u589e\u52a0\u5458\u5de5\u540d\u5b57 // \u6700\u540e\u4e00\u9898\u4e0d\u7b80\u5355 // \u77e5\u8bc6\u70b9\uff1a // 1. \u4ece\u547d\u4ee4\u884c\u89e3\u6790\u5b57\u7b26\u4e32\u8f93\u5165 // 2. \u5224\u65ad\u5b57\u7b26\u4e32\u76f8\u7b49 // 3. \u751f\u547d\u5468\u671f\u63a7\u5236 fn main () { let mut dep_map = HashMap :: new (); let mut continue_add = true ; // \u5faa\u73af\u6dfb\u52a0\u4eba\u5458\u5230\u90e8\u95e8 while continue_add { println! ( \"\u8bf7\u8f93\u5165\u8981\u6dfb\u52a0\u7684\u4eba\u5458\u548c\u90e8\u95e8(add who to where):\" ); let add_text = get_input_text (); // Add Sally to Engineering let mut name : Option < String > = None ; let mut department : Option < String > = None ; for ( idx , word ) in add_text . split_whitespace (). enumerate () { let text : String = match word . parse () { Ok ( name ) => { println! ( \"\u89e3\u6790\u7684\u5355\u8bcd\u4e3a: {name}\" ); name } Err ( _ ) => { println! ( \"\u89e3\u6790\u8f93\u5165\u5931\u8d25\" ); break ; } }; match idx { 1 => name = Some ( String :: from ( text )), // \u7d22\u5f15\u4e3a1\u4e3a\u540d\u79f0\uff1b 3 => department = Some ( String :: from ( text )), // \u7d22\u5f15\u4e3a3\u4e3a\u90e8\u95e8\uff1b _ => (), } } // \u589e\u52a0\u90e8\u95e8\u5230\u516c\u53f8 if let Some ( name ) = name { if let Some ( department ) = department { let persons = dep_map . entry ( department ). or_insert ( Vec :: from ([])); persons . push ( name ); } } println! ( \"\u662f\u5426\u7ee7\u7eed\u589e\u52a0(y/n):\" ); continue_add = get_answer (); } println! ( \"\u8bf7\u8f93\u5165\u8981\u83b7\u53d6\u7684\u5458\u5de5\u5217\u8868\u7684\u90e8\u95e8(where):\" ); let dep_name = get_input_text (); let mut persons = dep_map . get_mut ( & dep_name ); // \u83b7\u53d6\u53ef\u4ee5\u6539\u53d8\u7684vec\u96c6\u5408 if let Some ( persons ) = persons { println! ( \"{} \u90e8\u95e8\u7684\u5458\u5de5\u6709:\" , & dep_name ); persons . sort (); // \u6839\u636e\u5b57\u6bcd\u8868\u6392\u5e8f for person in persons { println! ( \" \\t {}\" , person ); } } else { println! ( \"{}\u90e8\u95e8\u6ca1\u6709\u5458\u5de5\u5b58\u5728!\" , & dep_name ) } dbg! ( dep_map ); } fn get_answer () -> bool { let mut word = String :: new (); loop { match io :: stdin (). read_line ( & mut word ) { Ok ( _ ) => { let chars_count = word . trim (). chars (). count (); dbg! ( chars_count ); dbg! ( word . trim (). chars ()); if chars_count == 1 && word . trim (). chars (). eq ( \"y\" . chars ()) { return true ; } return false ; } Err ( _ ) => { println! ( \"\u8bf7\u8f93\u5165y\u6216\u8005n!\" ); continue ; } } } } fn get_input_text () -> String { let mut word = String :: new (); loop { match io :: stdin (). read_line ( & mut word ) { Ok ( _ ) => break , Err ( _ ) => continue , } } word = match word . trim (). parse () { Ok ( w ) => w , Err ( _ ) => String :: from ( \"\" ), }; word }","title":"\u5e38\u89c1\u96c6\u5408"},{"location":"common-collections/#_1","text":"Rust \u6807\u51c6\u5e93\u4e2d\u5305\u542b\u4e00\u7cfb\u5217\u88ab\u79f0\u4e3a \u96c6\u5408 \uff08collections\uff09\u7684\u975e\u5e38\u6709\u7528\u7684\u6570\u636e\u7ed3\u6784\u3002 \u5927\u90e8\u5206\u5176\u4ed6\u6570\u636e\u7c7b\u578b\u90fd\u4ee3\u8868\u4e00\u4e2a\u7279\u5b9a\u7684\u503c\uff0c\u4e0d\u8fc7\u96c6\u5408\u53ef\u4ee5\u5305\u542b\u591a\u4e2a\u503c\u3002 \u4e0d\u540c\u4e8e\u5185\u5efa\u7684\u6570\u7ec4\u548c\u5143\u7ec4\u7c7b\u578b\uff0c\u8fd9\u4e9b\u96c6\u5408\u6307\u5411\u7684\u6570\u636e\u662f\u50a8\u5b58\u5728\u5806\u4e0a\u7684\uff0c\u8fd9\u610f\u5473\u7740\u6570\u636e\u7684\u6570\u91cf\u4e0d\u5fc5\u5728\u7f16\u8bd1\u65f6\u5c31\u5df2\u77e5\uff0c\u5e76\u4e14\u8fd8\u53ef\u4ee5\u968f\u7740\u7a0b\u5e8f\u7684\u8fd0\u884c\u589e\u957f\u6216\u7f29\u5c0f\u3002 \u6bcf\u79cd\u96c6\u5408\u90fd\u6709\u7740\u4e0d\u540c\u529f\u80fd\u548c\u6210\u672c\uff0c\u800c\u6839\u636e\u5f53\u524d\u60c5\u51b5\u9009\u62e9\u5408\u9002\u7684\u96c6\u5408\uff0c\u8fd9\u662f\u4e00\u9879\u5e94\u5f53\u9010\u6e10\u638c\u63e1\u7684\u6280\u80fd\u3002 vector \u5141\u8bb8\u6211\u4eec\u4e00\u4e2a\u6328\u7740\u4e00\u4e2a\u5730\u50a8\u5b58\u4e00\u7cfb\u5217\u6570\u91cf\u53ef\u53d8\u7684\u503c \u5b57\u7b26\u4e32 \uff08string\uff09\u662f\u5b57\u7b26\u7684\u96c6\u5408\u3002\u4e4b\u524d\u89c1\u8fc7 String \u7c7b\u578b\u3002 \u54c8\u5e0c map \uff08hash map\uff09\u5141\u8bb8\u6211\u4eec\u5c06\u503c\u4e0e\u4e00\u4e2a\u7279\u5b9a\u7684\u952e\uff08key\uff09\u76f8\u5173\u8054\u3002\u8fd9\u662f\u4e00\u4e2a\u53eb\u505a map \u7684\u66f4\u901a\u7528\u7684\u6570\u636e\u7ed3\u6784\u7684\u7279\u5b9a\u5b9e\u73b0\u3002 \u5bf9\u4e8e\u6807\u51c6\u5e93\u63d0\u4f9b\u7684\u5176\u4ed6\u7c7b\u578b\u7684\u96c6\u5408\uff0c\u8bf7\u67e5\u770b \u6587\u6863 \u3002","title":"\u5e38\u89c1\u96c6\u5408"},{"location":"common-collections/#vector","text":"Vec<T> \uff0c\u4e5f\u88ab\u79f0\u4e3a vector \u3002 vector \u5141\u8bb8\u5728\u4e00\u4e2a\u5355\u72ec\u7684\u6570\u636e\u7ed3\u6784\u4e2d\u50a8\u5b58\u591a\u4e8e\u4e00\u4e2a\u7684\u503c\uff0c\u5b83\u5728\u5185\u5b58\u4e2d\u5f7c\u6b64\u76f8\u90bb\u5730\u6392\u5217\u6240\u6709\u7684\u503c\u3002 vector \u53ea\u80fd\u50a8\u5b58\u76f8\u540c\u7c7b\u578b\u7684\u503c\u3002\u5b83\u4eec\u5728\u62e5\u6709 \u4e00\u7cfb\u5217\u9879 \u7684\u573a\u666f\u4e0b\u975e\u5e38\u5b9e\u7528\uff0c\u4f8b\u5982\u6587\u4ef6\u4e2d\u7684\u6587\u672c\u884c\u6216\u662f\u8d2d\u7269\u8f66\u4e2d\u5546\u54c1\u7684\u4ef7\u683c\u3002","title":"Vector \u5217\u8868"},{"location":"common-collections/#vector_1","text":"// \u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u7a7a vector\uff0c\u53ef\u4ee5\u8c03\u7528 Vec::new \u51fd\u6570 let v : Vec < i32 > = Vec :: new (); // \u544a\u8bc9 Rust v \u8fd9\u4e2a Vec<T> \u5c06\u5b58\u653e i32 \u7c7b\u578b\u7684\u5143\u7d20\u3002 // \u6ce8\u610f\u589e\u52a0\u4e86\u4e00\u4e2a\u7c7b\u578b\u6ce8\u89e3, \u56e0\u4e3a\u6ca1\u6709\u5411\u8fd9\u4e2a vector \u4e2d\u63d2\u5165\u4efb\u4f55\u503c\uff0cRust \u5e76\u4e0d\u77e5\u9053\u6211\u4eec\u60f3\u8981\u50a8\u5b58\u4ec0\u4e48\u7c7b\u578b\u7684\u5143\u7d20\u3002 // vector \u662f\u7528\u6cdb\u578b\u5b9e\u73b0\u7684\uff0c\u7b2c\u5341\u7ae0\u4f1a\u6d89\u53ca\u5230\u5982\u4f55\u5bf9\u4f60\u81ea\u5df1\u7684\u7c7b\u578b\u4f7f\u7528\u5b83\u4eec\u3002 \u73b0\u5728\uff0c\u6240\u9700\u8981\u77e5\u9053\u7684\u5c31\u662f Vec<T> \u662f\u4e00\u4e2a\u7531\u6807\u51c6\u5e93\u63d0\u4f9b\u7684\u7c7b\u578b\uff0c\u5b83\u53ef\u4ee5\u5b58\u653e\u4efb\u4f55\u7c7b\u578b\uff0c\u800c\u5f53 Vec \u5b58\u653e\u67d0\u4e2a\u7279\u5b9a\u7c7b\u578b\u65f6\uff0c\u90a3\u4e2a\u7c7b\u578b\u4f4d\u4e8e\u5c16\u62ec\u53f7\u4e2d\u3002 \u901a\u5e38\uff0c\u4f1a\u7528\u521d\u59cb\u503c\u6765\u521b\u5efa\u4e00\u4e2a Vec<T> \u800c Rust \u4f1a\u63a8\u65ad\u51fa\u50a8\u5b58\u503c\u7684\u7c7b\u578b\uff0c\u6240\u4ee5\u5f88\u5c11\u4f1a\u9700\u8981\u8fd9\u4e9b\u7c7b\u578b\u6ce8\u89e3\u3002 \u4e3a\u4e86\u65b9\u4fbf Rust \u63d0\u4f9b\u4e86 vec! \u5b8f\uff0c\u8fd9\u4e2a\u5b8f\u4f1a\u6839\u636e\u6211\u4eec\u63d0\u4f9b\u7684\u503c\u6765\u521b\u5efa\u4e00\u4e2a\u65b0\u7684 vector \u3002 // \u65b0\u5efa\u4e00\u4e2a\u62e5\u6709\u503c 1\u30012 \u548c 3 \u7684 Vec<i32> let v = vec! [ 1 , 2 , 3 ]; \u56e0\u4e3a\u63d0\u4f9b\u4e86 i32 \u7c7b\u578b\u7684\u521d\u59cb\u503c\uff0cRust \u53ef\u4ee5\u63a8\u65ad\u51fa v \u7684\u7c7b\u578b\u662f Vec<i32> \uff0c\u56e0\u6b64\u7c7b\u578b\u6ce8\u89e3\u5c31\u4e0d\u662f\u5fc5\u987b\u7684\u3002","title":"\u65b0\u5efa vector"},{"location":"common-collections/#vector_2","text":"\u4f7f\u7528 push \u65b9\u6cd5\u53ef\u4ee5\u5411\u5176\u589e\u52a0\u5143\u7d20\uff1a // \u5982\u679c\u60f3\u8981\u80fd\u591f\u6539\u53d8\u5b83\u7684\u503c\uff0c\u5fc5\u987b\u4f7f\u7528 mut \u5173\u952e\u5b57\u4f7f\u5176\u53ef\u53d8 let mut v = Vec :: new (); v . push ( 5 ); // \u589e\u52a0\u5143\u7d20 v . push ( 6 ); // \u589e\u52a0\u5143\u7d20 v . push ( 7 ); v . push ( 8 ); // \u653e\u5165\u5176\u4e2d\u7684\u6240\u6709\u503c\u90fd\u662f i32 \u7c7b\u578b\u7684\uff0c\u800c\u4e14 Rust \u4e5f\u6839\u636e\u6570\u636e\u505a\u51fa\u5982\u6b64\u5224\u65ad\uff0c\u6240\u4ee5\u4e0d\u9700\u8981 Vec<i32> \u6ce8\u89e3\u3002","title":"\u66f4\u65b0 vector"},{"location":"common-collections/#vector_3","text":"\u7c7b\u4f3c\u4e8e\u4efb\u4f55\u5176\u4ed6\u7684 struct \uff0c vector \u5728\u5176\u79bb\u5f00\u4f5c\u7528\u57df\u65f6\u4f1a\u88ab\u91ca\u653e { let v = vec! [ 1 , 2 , 3 , 4 ]; // \u5904\u7406\u53d8\u91cf v } // <- \u8fd9\u91cc v \u79bb\u5f00\u4f5c\u7528\u57df\u5e76\u88ab\u4e22\u5f03 \u5f53 vector \u88ab\u4e22\u5f03\u65f6\uff0c\u6240\u6709\u5176\u5185\u5bb9\u4e5f\u4f1a\u88ab\u4e22\u5f03\uff0c\u8fd9\u610f\u5473\u7740\u8fd9\u91cc\u5b83\u5305\u542b\u7684\u6574\u6570\u5c06\u88ab\u6e05\u7406\u3002 \u8fd9\u53ef\u80fd\u770b\u8d77\u6765\u975e\u5e38\u76f4\u89c2\uff0c\u4e0d\u8fc7\u4e00\u65e6\u5f00\u59cb\u4f7f\u7528 vector \u5143\u7d20\u7684\u5f15\u7528\uff0c\u60c5\u51b5\u5c31\u53d8\u5f97\u6709\u4e9b\u590d\u6742\u4e86\u3002","title":"\u4e22\u5f03 vector"},{"location":"common-collections/#vector_4","text":"\u6709\u4e24\u79cd\u65b9\u6cd5\u5f15\u7528 vector \u4e2d\u50a8\u5b58\u7684\u503c\u3002 \u7d22\u5f15\u8bed\u6cd5 \u6216\u8005 get \u65b9\u6cd5 fn main () { let v = vec! [ 1 , 2 , 3 , 4 , 5 ]; // \u4f7f\u7528\u7d22\u5f15\u503c 2 \u6765\u83b7\u53d6\u7b2c\u4e09\u4e2a\u5143\u7d20\uff0c\u7d22\u5f15\u662f\u4ece 0 \u5f00\u59cb\u7684\u3002 // \u4f7f\u7528 & \u548c [] \u8fd4\u56de\u4e00\u4e2a\u5f15\u7528 let third : & i32 = & v [ 2 ]; println! ( \"\u7b2c\u4e09\u4e2a\u6570\u662f {}\" , third ); // \u4f7f\u7528 get \u65b9\u6cd5\u4ee5\u7d22\u5f15\u4f5c\u4e3a\u53c2\u6570\u6765\u8fd4\u56de\u4e00\u4e2a Option<&T>\u3002 match v . get ( 2 ) { Some ( third ) => println! ( \"\u7b2c\u4e09\u4e2a\u5143\u7d20\u662f {}\" , third ), None => println! ( \"\u8fd9\u513f\u6ca1\u6709\u5143\u7d20\" ), } } Rust \u63d0\u4f9b\u4e86\u4e24\u79cd\u5f15\u7528\u5143\u7d20\u7684\u65b9\u6cd5\u7684\u539f\u56e0\u662f\u5f53 \u5c1d\u8bd5\u4f7f\u7528\u73b0\u6709\u5143\u7d20\u8303\u56f4\u4e4b\u5916\u7684\u7d22\u5f15\u503c\u65f6\u53ef\u4ee5\u9009\u62e9\u8ba9\u7a0b\u5e8f\u5982\u4f55\u8fd0\u884c\u3002 // \u5c1d\u8bd5\u5728\u5f53\u6709\u4e00\u4e2a 5 \u4e2a\u5143\u7d20\u7684 vector \u63a5\u7740\u8bbf\u95ee\u7d22\u5f15 100 \u4f4d\u7f6e\u7684\u5143\u7d20\u4f1a\u53d1\u751f\u4ec0\u4e48 let v = vec! [ 1 , 2 , 3 , 4 , 5 ]; let does_not_exist = & v [ 100 ]; // \u5f53\u5f15\u7528\u4e00\u4e2a\u4e0d\u5b58\u5728\u7684\u5143\u7d20\u65f6 Rust \u4f1a\u9020\u6210 panic let does_not_exist = v . get ( 100 ); // \u5f53 get \u65b9\u6cd5\u88ab\u4f20\u9012\u4e86\u4e00\u4e2a\u6570\u7ec4\u5916\u7684\u7d22\u5f15\u65f6\uff0c\u5b83\u4e0d\u4f1a panic \u800c\u662f\u8fd4\u56de None\u3002 // \u5f53\u5076\u5c14\u51fa\u73b0\u8d85\u8fc7 vector \u8303\u56f4\u7684\u8bbf\u95ee\u5c5e\u4e8e\u6b63\u5e38\u60c5\u51b5\u7684\u65f6\u5019\u53ef\u4ee5\u8003\u8651\u4f7f\u7528\u5b83\u3002 // \u63a5\u7740\u4f60\u7684\u4ee3\u7801\u53ef\u4ee5\u6709\u5904\u7406 Some(&element) \u6216 None \u7684\u903b\u8f91\uff0c \u4e00\u65e6\u7a0b\u5e8f\u83b7\u53d6\u4e86\u4e00\u4e2a\u6709\u6548\u7684\u5f15\u7528\uff0c\u501f\u7528\u68c0\u67e5\u5668\u5c06\u4f1a\u6267\u884c\u6240\u6709\u6743\u548c\u501f\u7528\u89c4\u5219\u6765\u786e\u4fdd vector \u5185\u5bb9\u7684\u8fd9\u4e2a\u5f15\u7528\u548c\u4efb\u4f55\u5176\u4ed6\u5f15\u7528\u4fdd\u6301\u6709\u6548\u3002 \u56de\u5fc6\u4e00\u4e0b\u4e0d\u80fd\u5728\u76f8\u540c\u4f5c\u7528\u57df\u4e2d\u540c\u65f6\u5b58\u5728\u53ef\u53d8\u548c\u4e0d\u53ef\u53d8\u5f15\u7528\u7684\u89c4\u5219\u3002 \u8fd9\u4e2a\u89c4\u5219\u9002\u7528\u4e8e\u4e0b\u9762\u7684\u793a\u4f8b\uff1a // \u5728\u62e5\u6709 vector \u4e2d\u9879\u7684\u5f15\u7528\u7684\u540c\u65f6\u5411\u5176\u589e\u52a0\u4e00\u4e2a\u5143\u7d20 let mut v = vec! [ 1 , 2 , 3 , 4 , 5 ]; let first = & v [ 0 ]; v . push ( 6 ); println! ( \"\u7b2c\u4e00\u4e2a\u5143\u7d20\u662f: {}\" , first ); // \u5f53\u6211\u4eec\u83b7\u53d6\u4e86 vector \u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u4e0d\u53ef\u53d8\u5f15\u7528 // \u5e76\u5c1d\u8bd5\u5728 vector \u672b\u5c3e\u589e\u52a0\u4e00\u4e2a\u5143\u7d20\u7684\u65f6\u5019\uff0c\u5982\u679c\u5c1d\u8bd5\u5728\u51fd\u6570\u7684\u540e\u9762\u5f15\u7528\u8fd9\u4e2a\u5143\u7d20\u662f\u884c\u4e0d\u901a\u7684 \u7f16\u8bd1\u4f1a\u7ed9\u51fa\u8fd9\u4e2a\u9519\u8bef $ cargo run Compiling collections v0 . 1.0 ( file : ///projects/collections) error [ E0502 ] : cannot borrow ` v ` as mutable because it is also borrowed as immutable - -> src / main . rs : 6 : 5 | 4 | let first = & v [ 0 ]; | - immutable borrow occurs here 5 | 6 | v . push ( 6 ); | ^^^^^^^^^ mutable borrow occurs here 7 | 8 | println! ( \"The first element is: {}\" , first ); | ----- immutable borrow later used here For more information about this error , try ` rustc -- explain E0502 ` . error : could not compile ` collections ` due to previous error \u4e3a\u4ec0\u4e48\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u5f15\u7528\u4f1a\u5173\u5fc3 vector \u7ed3\u5c3e\u7684\u53d8\u5316\uff1f \u4e0d\u80fd\u8fd9\u4e48\u505a\u7684\u539f\u56e0\u662f\u7531\u4e8e vector \u7684\u5de5\u4f5c\u65b9\u5f0f\uff1a \u5728 vector \u7684\u7ed3\u5c3e\u589e\u52a0\u65b0\u5143\u7d20\u65f6\uff0c\u5728\u6ca1\u6709\u8db3\u591f\u7a7a\u95f4\u5c06\u6240\u6709\u5143\u7d20\u4f9d\u6b21\u76f8\u90bb\u5b58\u653e\u7684\u60c5\u51b5\u4e0b\uff0c\u53ef\u80fd\u4f1a\u8981\u6c42\u5206\u914d\u65b0\u5185\u5b58\u5e76\u5c06\u8001\u7684\u5143\u7d20\u62f7\u8d1d\u5230\u65b0\u7684\u7a7a\u95f4\u4e2d\u3002 \u8fd9\u65f6\uff0c \u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u5f15\u7528\u5c31\u6307\u5411\u4e86\u88ab\u91ca\u653e\u7684\u5185\u5b58\u3002 \u501f\u7528\u89c4\u5219\u963b\u6b62\u7a0b\u5e8f\u9677\u5165\u8fd9\u79cd\u72b6\u51b5\u3002 \u5173\u4e8e Vec<T> \u7c7b\u578b\u7684\u66f4\u591a\u5b9e\u73b0\u7ec6\u8282\uff0c\u8bf7\u67e5\u770b \u201c The Rust onomicon \u201d","title":"\u8bfb\u53d6 vector"},{"location":"common-collections/#vector_5","text":"\u5982\u679c\u60f3\u8981\u4f9d\u6b21\u8bbf\u95ee vector \u4e2d\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\uff0c\u53ef\u4ee5\u904d\u5386\u5176\u6240\u6709\u7684\u5143\u7d20\u800c\u65e0\u9700\u901a\u8fc7\u7d22\u5f15\u4e00\u6b21\u4e00\u4e2a\u7684\u8bbf\u95ee\u3002 // \u901a\u8fc7 for \u5faa\u73af\u904d\u5386 vector \u7684\u5143\u7d20\u5e76\u6253\u5370 let v = vec! [ 100 , 32 , 57 ]; for i in & v { println! ( \"{}\" , i ); } // \u4e5f\u53ef\u4ee5\u904d\u5386\u53ef\u53d8 vector \u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\u7684\u53ef\u53d8\u5f15\u7528\u4ee5\u4fbf\u80fd\u6539\u53d8\u4ed6\u4eec let mut v = vec! [ 100 , 32 , 57 ]; for i in & mut v { // \u4e3a\u4e86\u4fee\u6539\u53ef\u53d8\u5f15\u7528\u6240\u6307\u5411\u7684\u503c\uff0c\u5728\u4f7f\u7528 += \u8fd0\u7b97\u7b26\u4e4b\u524d\u5fc5\u987b\u4f7f\u7528\u89e3\u5f15\u7528\u8fd0\u7b97\u7b26\uff08*\uff09\u83b7\u53d6 i \u4e2d\u7684\u503c\u3002 * i += 50 ; }","title":"\u904d\u5386 vector"},{"location":"common-collections/#_2","text":"vector \u53ea\u80fd\u50a8\u5b58\u76f8\u540c\u7c7b\u578b\u7684\u503c\u3002\u8fd9\u662f\u5f88\u4e0d\u65b9\u4fbf\u7684\uff1b \u7edd\u5bf9\u4f1a\u6709\u9700\u8981\u50a8\u5b58\u4e00\u7cfb\u5217\u4e0d\u540c\u7c7b\u578b\u7684\u503c\u7684\u7528\u4f8b \u3002 \u5e78\u8fd0\u7684\u662f\uff0c\u679a\u4e3e\u7684\u6210\u5458\u90fd\u88ab\u5b9a\u4e49\u4e3a\u76f8\u540c\u7684\u679a\u4e3e\u7c7b\u578b\uff0c\u6240\u4ee5\u5f53\u9700\u8981\u5728 vector \u4e2d\u50a8\u5b58\u4e0d\u540c\u7c7b\u578b\u503c\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u5b9a\u4e49\u5e76\u4f7f\u7528\u4e00\u4e2a\u679a\u4e3e\uff01 \u4f8b\u5982\uff0c\u5047\u5982\u6211\u4eec\u60f3\u8981\u4ece\u7535\u5b50\u8868\u683c\u7684\u4e00\u884c\u4e2d\u83b7\u53d6\u503c\uff0c\u800c\u8fd9\u4e00\u884c\u7684\u6709\u4e9b\u5217\u5305\u542b\u6570\u5b57\uff0c\u6709\u4e9b\u5305\u542b\u6d6e\u70b9\u503c\uff0c\u8fd8\u6709\u4e9b\u662f\u5b57\u7b26\u4e32\u3002 \u6211\u4eec\u53ef\u4ee5\u5b9a\u4e49\u4e00\u4e2a\u679a\u4e3e\uff0c\u5176\u6210\u5458\u4f1a\u5b58\u653e\u8fd9\u4e9b\u4e0d\u540c\u7c7b\u578b\u7684\u503c\uff0c\u540c\u65f6\u6240\u6709\u8fd9\u4e9b\u679a\u4e3e\u6210\u5458\u90fd\u4f1a\u88ab\u5f53\u4f5c\u76f8\u540c\u7c7b\u578b\uff0c\u90a3\u4e2a\u679a\u4e3e\u7684\u7c7b\u578b\u3002 \u63a5\u7740\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u50a8\u5b58\u679a\u4e3e\u503c\u7684 vector\uff0c\u8fd9\u6837\u6700\u7ec8\u5c31\u80fd\u591f\u50a8\u5b58\u4e0d\u540c\u7c7b\u578b\u7684\u503c\u4e86\u3002 fn main () { enum SpreadsheetCell { Int ( i32 ), Float ( f64 ), Text ( String ), } let row = vec! [ SpreadsheetCell :: Int ( 3 ), SpreadsheetCell :: Text ( String :: from ( \"blue\" )), SpreadsheetCell :: Float ( 10.12 ), ]; } Rust \u5728\u7f16\u8bd1\u65f6\u5c31\u5fc5\u987b\u51c6\u786e\u7684\u77e5\u9053 vector \u4e2d\u7c7b\u578b\u7684\u539f\u56e0\u5728\u4e8e\u5b83\u9700\u8981\u77e5\u9053\u50a8\u5b58\u6bcf\u4e2a\u5143\u7d20\u5230\u5e95\u9700\u8981\u591a\u5c11\u5185\u5b58\u3002 \u7b2c\u4e8c\u4e2a\u597d\u5904\u662f\u53ef\u4ee5\u51c6\u786e\u7684\u77e5\u9053\u8fd9\u4e2a vector \u4e2d\u5141\u8bb8\u4ec0\u4e48\u7c7b\u578b\u3002 \u5982\u679c Rust \u5141\u8bb8 vector \u5b58\u653e\u4efb\u610f\u7c7b\u578b\uff0c\u90a3\u4e48\u5f53\u5bf9 vector \u5143\u7d20\u6267\u884c\u64cd\u4f5c\u65f6\u4e00\u4e2a\u6216\u591a\u4e2a\u7c7b\u578b\u7684\u503c\u5c31\u6709\u53ef\u80fd\u4f1a\u9020\u6210\u9519\u8bef\u3002 \u4f7f\u7528\u679a\u4e3e\u5916\u52a0 match \u610f\u5473\u7740 Rust \u80fd\u5728\u7f16\u8bd1\u65f6\u5c31\u4fdd\u8bc1\u603b\u662f\u4f1a\u5904\u7406\u6240\u6709\u53ef\u80fd\u7684\u60c5\u51b5. \u5982\u679c\u5728\u7f16\u5199\u7a0b\u5e8f\u65f6\u4e0d\u80fd\u786e\u5207\u65e0\u9057\u5730\u77e5\u9053\u8fd0\u884c\u65f6\u4f1a\u50a8\u5b58\u8fdb vector \u7684\u6240\u6709\u7c7b\u578b\uff0c\u679a\u4e3e\u6280\u672f\u5c31\u884c\u4e0d\u901a\u4e86\u3002\u76f8\u53cd\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 trait \u5bf9\u8c61\uff0c\u7b2c\u5341\u4e03\u7ae0\u4f1a\u8bb2\u5230\u5b83\u3002 \u73b0\u5728\u6211\u4eec\u4e86\u89e3\u4e86\u4e00\u4e9b\u4f7f\u7528 vector \u7684\u6700\u5e38\u89c1\u7684\u65b9\u5f0f\uff0c\u8bf7\u4e00\u5b9a\u53bb\u770b\u770b\u6807\u51c6\u5e93\u4e2d Vec \u5b9a\u4e49\u7684\u5f88\u591a\u5176\u4ed6\u5b9e\u7528\u65b9\u6cd5\u7684 API \u6587\u6863 \u3002 \u4f8b\u5982\uff0c\u9664\u4e86 push \u4e4b\u5916\u8fd8\u6709\u4e00\u4e2a pop \u65b9\u6cd5\uff0c\u5b83\u4f1a\u79fb\u9664\u5e76\u8fd4\u56de vector \u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u3002","title":"\u679a\u4e3e\u6765\u50a8\u5b58\u591a\u79cd\u7c7b\u578b"},{"location":"common-collections/#utf-8","text":"\u5b57\u7b26\u4e32 \u662f\u65b0\u664b Rustacean \u4eec\u901a\u5e38\u4f1a\u88ab\u56f0\u4f4f\u7684\u9886\u57df\uff0c\u8fd9\u662f\u7531\u4e8e\u4e09\u65b9\u9762\u7406\u7531\u7684\u7ed3\u5408\uff1a Rust \u503e\u5411\u4e8e\u786e\u4fdd\u66b4\u9732\u51fa\u53ef\u80fd\u7684\u9519\u8bef\uff0c\u5b57\u7b26\u4e32\u662f\u6bd4\u5f88\u591a\u7a0b\u5e8f\u5458\u6240\u60f3\u8c61\u7684\u8981\u66f4\u4e3a\u590d\u6742\u7684\u6570\u636e\u7ed3\u6784\uff0c\u4ee5\u53ca UTF-8 \u3002\u6240\u6709\u8fd9\u4e9b\u8981\u7d20\u7ed3\u5408\u8d77\u6765\u5bf9\u4e8e\u6765\u81ea\u5176\u4ed6\u8bed\u8a00\u80cc\u666f\u7684\u7a0b\u5e8f\u5458\u5c31\u53ef\u80fd\u663e\u5f97\u5f88\u56f0\u96be\u4e86\u3002 \u5728\u96c6\u5408\u7ae0\u8282\u4e2d\u8ba8\u8bba\u5b57\u7b26\u4e32\u7684\u539f\u56e0\u662f\uff0c\u5b57\u7b26\u4e32\u5c31\u662f\u4f5c\u4e3a\u5b57\u8282\u7684\u96c6\u5408\u5916\u52a0\u4e00\u4e9b\u65b9\u6cd5\u5b9e\u73b0\u7684\uff0c\u5f53\u8fd9\u4e9b\u5b57\u8282\u88ab\u89e3\u91ca\u4e3a\u6587\u672c\u65f6\uff0c\u8fd9\u4e9b\u65b9\u6cd5\u63d0\u4f9b\u4e86\u5b9e\u7528\u7684\u529f\u80fd\u3002","title":"\u5b57\u7b26\u4e32\u548cUTF-8"},{"location":"common-collections/#_3","text":"\u5b57\u7b26\u4e32 \u3002Rust \u7684\u6838\u5fc3\u8bed\u8a00\u4e2d\u53ea\u6709\u4e00\u79cd\u5b57\u7b26\u4e32\u7c7b\u578b\uff1a \u5b57\u7b26\u4e32slice str \uff0c\u5b83\u901a\u5e38\u4ee5\u88ab \u501f\u7528 \u7684\u5f62\u5f0f\u51fa\u73b0\uff0c &str \u3002\u7b2c\u56db\u7ae0\u8bb2\u5230\u4e86 \u5b57\u7b26\u4e32 slices \uff1a \u5b83\u4eec\u662f\u4e00\u4e9b\u5bf9\u50a8\u5b58\u5728\u522b\u5904\u7684 UTF-8 \u7f16\u7801\u5b57\u7b26\u4e32\u6570\u636e\u7684\u5f15\u7528 \u3002 \u4e3e\u4f8b\u6765\u8bf4\uff0c\u7531\u4e8e\u5b57\u7b26\u4e32 \u5b57\u9762\u503c \u88ab\u50a8\u5b58\u5728\u7a0b\u5e8f\u7684\u4e8c\u8fdb\u5236\u8f93\u51fa\u4e2d\uff0c\u56e0\u6b64\u5b57\u7b26\u4e32\u5b57\u9762\u503c\u4e5f\u662f \u5b57\u7b26\u4e32slices \u3002 \u79f0\u4f5c String \u7684\u7c7b\u578b\u662f\u7531\u6807\u51c6\u5e93\u63d0\u4f9b\u7684\uff0c\u800c\u6ca1\u6709\u5199\u8fdb\u6838\u5fc3\u8bed\u8a00\u90e8\u5206\uff0c\u5b83\u662f \u53ef\u589e\u957f\u7684 \u3001 \u53ef\u53d8\u7684 \u3001 \u6709\u6240\u6709\u6743\u7684 \u3001 UTF-8 \u7f16\u7801\u7684\u5b57\u7b26\u4e32\u7c7b\u578b \u3002 \u5f53 Rustacean \u4eec\u8c08\u5230 Rust \u7684 \u201c \u5b57\u7b26\u4e32 \u201d\u65f6\uff0c\u5b83\u4eec\u901a\u5e38\u6307\u7684\u662f String \u6216 \u5b57\u7b26\u4e32slice &str \u7c7b\u578b \uff0c\u800c\u4e0d\u7279\u6307\u5176\u4e2d\u67d0\u4e00\u4e2a\u3002 \u867d\u7136\u672c\u90e8\u5206\u5185\u5bb9\u5927\u591a\u662f\u5173\u4e8e String \u7684\uff0c\u4e0d\u8fc7\u8fd9\u4e24\u4e2a\u7c7b\u578b\u5728 Rust \u6807\u51c6\u5e93\u4e2d\u90fd\u88ab\u5e7f\u6cdb\u4f7f\u7528\uff0c String \u548c \u5b57\u7b26\u4e32 slices \u90fd\u662f UTF-8 \u7f16\u7801\u7684\u3002","title":"\u4ec0\u4e48\u662f\u5b57\u7b26\u4e32\uff1f"},{"location":"common-collections/#_4","text":"// \u4ee5 new \u51fd\u6570\u521b\u5efa\u5b57\u7b26\u4e32\u5f00\u59cb // \u65b0\u5efa\u4e00\u4e2a\u7a7a\u7684 String let mut s = String :: new (); \u901a\u5e38\u5b57\u7b26\u4e32\u4f1a\u6709\u521d\u59cb\u6570\u636e\uff0c\u56e0\u4e3a\u5e0c\u671b\u4e00\u5f00\u59cb\u5c31\u6709\u8fd9\u4e2a\u5b57\u7b26\u4e32\u3002\u4e3a\u6b64\uff0c\u53ef\u4ee5\u4f7f\u7528 to_string \u65b9\u6cd5\uff0c\u5b83\u80fd\u7528\u4e8e\u4efb\u4f55\u5b9e\u73b0\u4e86 Display trait \u7684\u7c7b\u578b\uff0c\u5b57\u7b26\u4e32\u5b57\u9762\u503c\u4e5f\u5b9e\u73b0\u4e86\u5b83\u3002 let data = \"initial contents\" ; let s = data . to_string (); // \u8be5\u65b9\u6cd5\u4e5f\u53ef\u76f4\u63a5\u7528\u4e8e\u5b57\u7b26\u4e32\u5b57\u9762\u503c\uff1a // \u4f1a\u521b\u5efa\u5305\u542b initial contents \u7684\u5b57\u7b26\u4e32\u3002 let s = \"initial contents\" . to_string (); // \u4e5f\u53ef\u4ee5\u4f7f\u7528 String::from \u51fd\u6570\u6765\u4ece\u5b57\u7b26\u4e32\u5b57\u9762\u503c\u521b\u5efa String let s = String :: from ( \"initial contents\" ); \u56e0\u4e3a\u5b57\u7b26\u4e32\u5e94\u7528\u5e7f\u6cdb\uff0c\u8fd9\u91cc\u6709\u5f88\u591a\u4e0d\u540c\u7684\u7528\u4e8e\u5b57\u7b26\u4e32\u7684\u901a\u7528 API \u53ef\u4f9b\u9009\u62e9\u3002\u5176\u4e2d\u4e00\u4e9b\u53ef\u80fd\u770b\u8d77\u6765\u591a\u4f59\uff0c\u4e0d\u8fc7\u90fd\u6709\u5176\u7528\u6b66\u4e4b\u5730\uff01\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c String::from \u548c .to_string \u6700\u7ec8\u505a\u4e86\u5b8c\u5168\u76f8\u540c\u7684\u5de5\u4f5c\uff0c\u6240\u4ee5\u5982\u4f55\u9009\u62e9\u5c31\u662f \u4ee3\u7801\u98ce\u683c\u4e0e\u53ef\u8bfb\u6027 \u7684\u95ee\u9898\u4e86\u3002 // \u5b57\u7b26\u4e32\u662f UTF-8 \u7f16\u7801\u7684\uff0c\u6240\u4ee5\u53ef\u4ee5\u5305\u542b\u4efb\u4f55\u53ef\u4ee5\u6b63\u786e\u7f16\u7801\u7684\u6570\u636e let hello = String :: from ( \"\u0627\u0644\u0633\u0644\u0627\u0645 \u0639\u0644\u064a\u0643\u0645\" ); let hello = String :: from ( \"Dobr\u00fd den\" ); let hello = String :: from ( \"Hello\" ); let hello = String :: from ( \"\u05e9\u05b8\u05c1\u05dc\u05d5\u05b9\u05dd\" ); let hello = String :: from ( \"\u0928\u092e\u0938\u094d\u0924\u0947\" ); let hello = String :: from ( \"\u3053\u3093\u306b\u3061\u306f\" ); let hello = String :: from ( \"\uc548\ub155\ud558\uc138\uc694\" ); let hello = String :: from ( \"\u4f60\u597d\" ); let hello = String :: from ( \"Ol\u00e1\" ); let hello = String :: from ( \"\u0417\u0434\u0440\u0430\u0432\u0441\u0442\u0432\u0443\u0439\u0442\u0435\" ); let hello = String :: from ( \"Hola\" ); // \u6240\u6709\u8fd9\u4e9b\u90fd\u662f\u6709\u6548\u7684 String \u503c","title":"\u65b0\u5efa\u5b57\u7b26\u4e32"},{"location":"common-collections/#_5","text":"String \u7684\u5927\u5c0f\u53ef\u4ee5\u589e\u52a0\uff0c\u5176\u5185\u5bb9\u4e5f\u53ef\u4ee5\u6539\u53d8\uff0c\u5c31\u50cf\u53ef\u4ee5\u653e\u5165\u66f4\u591a\u6570\u636e\u6765\u6539\u53d8 Vec \u7684\u5185\u5bb9\u4e00\u6837\u3002 \u53e6\u5916\uff0c\u53ef\u4ee5\u65b9\u4fbf\u7684\u4f7f\u7528 + \u8fd0\u7b97\u7b26\u6216 format! \u5b8f\u6765\u62fc\u63a5 String \u503c\u3002","title":"\u66f4\u65b0\u5b57\u7b26\u4e32"},{"location":"common-collections/#push_str-push","text":"// \u901a\u8fc7 push_str \u65b9\u6cd5\u6765\u9644\u52a0\u5b57\u7b26\u4e32 slice\uff0c\u4ece\u800c\u4f7f String \u53d8\u957f let mut s = String :: from ( \"foo\" ); s . push_str ( \"bar\" ); // s \u5c06\u4f1a\u5305\u542b foobar\u3002push_str \u65b9\u6cd5\u91c7\u7528\u5b57\u7b26\u4e32 slice\uff0c\u56e0\u4e3a\u6211\u4eec\u5e76\u4e0d\u9700\u8981\u83b7\u53d6\u53c2\u6570\u7684\u6240\u6709\u6743\u3002 // \u5c06\u5b57\u7b26\u4e32 slice \u7684\u5185\u5bb9\u9644\u52a0\u5230 String \u540e\u4f7f\u7528\u5b83 let mut s1 = String :: from ( \"foo\" ); let s2 = \"bar\" ; s1 . push_str ( s2 ); // \u5982\u679c push_str \u65b9\u6cd5\u83b7\u53d6\u4e86 s2 \u7684\u6240\u6709\u6743\uff0c\u5c31\u4e0d\u80fd\u5728\u6700\u540e\u4e00\u884c\u6253\u5370\u51fa\u5176\u503c\u4e86 println! ( \"s2 is {}\" , s2 ); // push \u65b9\u6cd5\u88ab\u5b9a\u4e49\u4e3a\u83b7\u53d6\u4e00\u4e2a\u5355\u72ec\u7684\u5b57\u7b26\u4f5c\u4e3a\u53c2\u6570\uff0c\u5e76\u9644\u52a0\u5230 String \u4e2d // \u4f7f\u7528 push \u5c06\u4e00\u4e2a\u5b57\u7b26\u52a0\u5165 String \u503c\u4e2d let mut s = String :: from ( \"lo\" ); // \u6dfb\u52a0mut\u5173\u952e\u5b57\u4f7f\u5176\u53ef\u53d8\u3002 s . push ( 'l' );","title":"push_str \u548c push"},{"location":"common-collections/#format","text":"\u901a\u5e38\u4f1a\u5e0c\u671b\u5c06\u4e24\u4e2a\u5df2\u77e5\u7684\u5b57\u7b26\u4e32\u5408\u5e76\u5728\u4e00\u8d77\u3002\u4e00\u79cd\u529e\u6cd5\u662f\u50cf\u8fd9\u6837\u4f7f\u7528 + \u8fd0\u7b97\u7b26 // \u4f7f\u7528 + \u8fd0\u7b97\u7b26\u5c06\u4e24\u4e2a String \u503c\u5408\u5e76\u5230\u4e00\u4e2a\u65b0\u7684 String \u503c\u4e2d fn main () { let s1 = String :: from ( \"Hello, \" ); let s2 = String :: from ( \"world!\" ); let s3 = s1 + & s2 ; // \u6ce8\u610f s1 \u88ab\u79fb\u52a8\u4e86\uff0c\u4e0d\u80fd\u7ee7\u7eed\u4f7f\u7528 // \u4f7f\u7528\u4e86 &\uff0c\u610f\u5473\u7740\u6211\u4eec\u4f7f\u7528\u7b2c\u4e8c\u4e2a\u5b57\u7b26\u4e32\u7684 \u5f15\u7528 \u4e0e\u7b2c\u4e00\u4e2a\u5b57\u7b26\u4e32\u76f8\u52a0\u3002 // \u56e0\u4e3a add \u51fd\u6570\u7684 s \u53c2\u6570\uff1a\u53ea\u80fd\u5c06 &str \u548c String \u76f8\u52a0\uff0c\u4e0d\u80fd\u5c06\u4e24\u4e2a String \u503c\u76f8\u52a0\u3002 // println!(\"a is {s1}\"); // \u53d6\u6d88\u6ce8\u91ca\uff0c\u4f1a\u7f16\u8bd1\u4e0d\u901a\u8fc7\uff0cs1\u5df2\u7ecf\u79fb\u52a8\u4e86\uff0c\u4e0d\u53ef\u4f7f\u7528 println! ( \"c is {s3}\" ); // s3 \u5219\u6ca1\u95ee\u9898 } s1 \u5728\u76f8\u52a0\u540e\u4e0d\u518d\u6709\u6548\u7684\u539f\u56e0\uff0c\u548c\u4f7f\u7528 s2 \u7684\u5f15\u7528\u7684\u539f\u56e0\uff0c\u4e0e\u4f7f\u7528 + \u8fd0\u7b97\u7b26\u65f6\u8c03\u7528\u7684\u51fd\u6570\u7b7e\u540d\u6709\u5173\u3002 + \u8fd0\u7b97\u7b26\u4f7f\u7528\u4e86 add \u51fd\u6570\uff0c\u8fd9\u4e2a\u51fd\u6570\u7b7e\u540d\u770b\u8d77\u6765\u50cf\u8fd9\u6837\uff1a fn add ( self , s : & str ) -> String { // \u8fd9\u5e76\u4e0d\u662f\u6807\u51c6\u5e93\u4e2d\u5b9e\u9645\u7684\u7b7e\u540d\uff1b\u6807\u51c6\u5e93\u4e2d\u7684 add \u4f7f\u7528\u6cdb\u578b\u5b9a\u4e49\u3002 \u8fd9\u91cc\u6211\u4eec\u770b\u5230\u7684 add \u7684\u7b7e\u540d\u4f7f\u7528\u5177\u4f53\u7c7b\u578b\u4ee3\u66ff\u4e86\u6cdb\u578b\uff0c\u8fd9\u4e5f\u6b63\u662f\u5f53\u4f7f\u7528 String \u503c\u8c03\u7528\u8fd9\u4e2a\u65b9\u6cd5\u4f1a\u53d1\u751f\u7684\u3002\u7b2c\u5341\u7ae0\u4f1a\u8ba8\u8bba\u6cdb\u578b\u3002 \u6b63\u5982 add \u7684\u7b2c\u4e8c\u4e2a\u53c2\u6570\u6240\u6307\u5b9a\u7684\uff0c &s2 \u7684\u7c7b\u578b\u662f &String \u800c\u4e0d\u662f &str \u3002\u90a3\u4e48\u4e3a\u4ec0\u4e48\u793a\u4f8b\u8fd8\u80fd\u7f16\u8bd1\u5462\uff1f \u4e4b\u6240\u4ee5\u80fd\u591f\u5728 add \u8c03\u7528\u4e2d\u4f7f\u7528 &s2 \u662f\u56e0\u4e3a &String \u53ef\u4ee5\u88ab \u5f3a\u8f6c \uff08coerced\uff09\u6210 &str \u3002\u5f53 add \u51fd\u6570\u88ab\u8c03\u7528\u65f6\uff0cRust \u4f7f\u7528\u4e86\u4e00\u4e2a\u88ab\u79f0\u4e3a Deref \u5f3a\u5236\u8f6c\u6362 \uff08deref coercion\uff09\u7684\u6280\u672f\uff0c \u53ef\u4ee5\u5c06\u5176\u7406\u89e3\u4e3a\u5b83\u628a &s2 \u53d8\u6210\u4e86 &s2[..] \u3002 \u7b2c\u5341\u4e94\u7ae0 \u4f1a\u66f4\u6df1\u5165\u7684\u8ba8\u8bba Deref \u5f3a\u5236\u8f6c\u6362\u3002 \u56e0\u4e3a add \u6ca1\u6709\u83b7\u53d6\u53c2\u6570\u7684\u6240\u6709\u6743\uff0c\u6240\u4ee5 s2 \u5728\u8fd9\u4e2a\u64cd\u4f5c\u540e\u4ecd\u7136\u662f\u6709\u6548\u7684 String \u3002 \u5176\u6b21\uff0c\u53ef\u4ee5\u53d1\u73b0\u7b7e\u540d\u4e2d add \u83b7\u53d6\u4e86 self \u7684\u6240\u6709\u6743\uff0c\u56e0\u4e3a self \u6ca1\u6709 \u4f7f\u7528 & \u3002\u8fd9\u610f\u5473\u7740\u793a\u4f8b\u4e2d\u7684 s1 \u7684\u6240\u6709\u6743\u5c06\u88ab\u79fb\u52a8\u5230 add \u8c03\u7528\u4e2d\uff0c\u4e4b\u540e\u5c31\u4e0d\u518d\u6709\u6548\u3002 \u6240\u4ee5\u867d\u7136 let s3 = s1 + &s2; \u770b\u8d77\u6765\u5c31\u50cf\u5b83\u4f1a\u590d\u5236\u4e24\u4e2a\u5b57\u7b26\u4e32\u5e76\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u5b57\u7b26\u4e32\uff0c\u800c\u5b9e\u9645\u4e0a\u8fd9\u4e2a\u8bed\u53e5\u4f1a\u83b7\u53d6 s1 \u7684\u6240\u6709\u6743\uff0c\u9644\u52a0\u4e0a\u4ece s2 \u4e2d\u62f7\u8d1d\u7684\u5185\u5bb9\uff0c \u5e76\u8fd4\u56de\u7ed3\u679c\u7684\u6240\u6709\u6743 \u3002 \u6362\u53e5\u8bdd\u8bf4\uff0c\u5b83\u770b\u8d77\u6765\u597d\u50cf\u751f\u6210\u4e86\u5f88\u591a\u62f7\u8d1d\uff0c\u4e0d\u8fc7\u5b9e\u9645\u4e0a\u5e76\u6ca1\u6709\uff1a \u8fd9\u4e2a\u5b9e\u73b0\u6bd4\u62f7\u8d1d\u8981\u66f4\u9ad8\u6548 \u3002 // \u7ea7\u8054\u591a\u4e2a\u5b57\u7b26\u4e32\uff0c+ \u7684\u884c\u4e3a\u5c31\u663e\u5f97\u7b28\u91cd\u4e86 let s1 = String :: from ( \"tic\" ); let s2 = String :: from ( \"tac\" ); let s3 = String :: from ( \"toe\" ); let s = s1 + \"-\" + & s2 + \"-\" + & s3 ; // \u8fd9\u65f6 s \u7684\u5185\u5bb9\u4f1a\u662f \u201ctic-tac-toe\u201d // \u5bf9\u4e8e\u66f4\u4e3a\u590d\u6742\u7684\u5b57\u7b26\u4e32\u94fe\u63a5\uff0c\u53ef\u4ee5\u4f7f\u7528 format! \u5b8f let s = format! ( \"{}-{}-{}\" , s1 , s2 , s3 ); format! \u4e0e println! \u7684\u5de5\u4f5c\u539f\u7406\u76f8\u540c\uff0c\u4e0d\u8fc7\u4e0d\u540c\u4e8e\u5c06\u8f93\u51fa\u6253\u5370\u5230\u5c4f\u5e55\u4e0a\uff0c\u5b83\u8fd4\u56de\u4e00\u4e2a\u5e26\u6709\u7ed3\u679c\u5185\u5bb9\u7684 String \u3002\u8fd9\u4e2a\u7248\u672c\u5c31\u597d\u7406\u89e3\u7684\u591a\uff0c\u5b8f format! \u751f\u6210\u7684\u4ee3\u7801\u4f7f\u7528\u5f15\u7528\u6240\u4ee5\u4e0d\u4f1a\u83b7\u53d6\u4efb\u4f55\u53c2\u6570\u7684\u6240\u6709\u6743\u3002","title":"+ \u8fd0\u7b97\u7b26\u6216 format! \u5b8f"},{"location":"common-collections/#_6","text":"Rust \u7684\u5b57\u7b26\u4e32\u4e0d\u652f\u6301\u7d22\u5f15\u3002 \u5982\u4e0b\u4f7f\u7528\u7d22\u5f15\u8bbf\u95ee\u5b57\u7b26\u4e32\u4f1a\u62a5\u7f16\u8bd1\u9519\u8bef\uff1a let s1 = String :: from ( \"hello\" ); let h = s1 [ 0 ]; // \u5c1d\u8bd5\u5bf9\u5b57\u7b26\u4e32\u4f7f\u7528\u7d22\u5f15\u8bed\u6cd5 \u4f1a\u5bfc\u81f4\u5982\u4e0b\u9519\u8bef\uff1a $ cargo run Compiling collections v0 . 1.0 ( file : ///projects/collections) error [ E0277 ] : the type ` String ` cannot be indexed by ` { integer } ` - -> src / main . rs : 3 : 13 | 3 | let h = s1 [ 0 ]; | ^^^^^ ` String ` cannot be indexed by ` { integer } ` | = help : the trait ` Index < { integer } > ` is not implemented for ` String ` For more information about this error , try ` rustc -- explain E0277 ` . error : could not compile ` collections ` due to previous error \u4e3a\u4ec0\u4e48\u4e0d\u652f\u6301\u5462\uff1f\u90a3\u4e48\u5c31\u8981\u56de\u7b54 Rust\u662f\u5982\u4f55\u5728\u5185\u5b58\u4e2d\u50a8\u5b58\u5b57\u7b26\u4e32\u7684 \u3002\u770b\u4e0b\u9762\ud83d\udc47\ud83c\udffb","title":"\u7d22\u5f15\u5b57\u7b26\u4e32"},{"location":"common-collections/#_7","text":"String \u662f\u4e00\u4e2a Vec<u8> \u7684\u5c01\u88c5\u3002 let hello = String :: from ( \"Hola\" ); // \u5728\u8fd9\u91cc\uff0clen \u7684\u503c\u662f 4 \uff0c // \u8fd9\u610f\u5473\u7740\u50a8\u5b58\u5b57\u7b26\u4e32 \u201cHola\u201d \u7684 Vec \u7684\u957f\u5ea6\u662f\u56db\u4e2a\u5b57\u8282\uff1a // \u8fd9\u91cc\u6bcf\u4e00\u4e2a\u5b57\u6bcd\u7684 UTF-8 \u7f16\u7801\u90fd\u5360\u7528\u4e00\u4e2a\u5b57\u8282\u3002 \u8fd9\u4e2a\u5462? // \u5b57\u7b26\u4e32\u4e2d\u7684\u9996\u5b57\u6bcd\u662f\u897f\u91cc\u5c14\u5b57\u6bcd\u7684 Ze \u800c\u4e0d\u662f\u963f\u62c9\u4f2f\u6570\u5b57 3 let hello = String :: from ( \"\u0417\u0434\u0440\u0430\u0432\u0441\u0442\u0432\u0443\u0439\u0442\u0435\" ); // \u5f53\u95ee\u53ca\u8fd9\u4e2a\u5b57\u7b26\u662f\u591a\u957f\u7684\u65f6\u5019\u6709\u4eba\u53ef\u80fd\u4f1a\u8bf4\u662f 12\u3002 // \u7136\u800c\uff0cRust \u7684\u56de\u7b54\u662f 24\u3002 \u8fd9\u662f\u4f7f\u7528 UTF-8 \u7f16\u7801 \u201c\u0417\u0434\u0440\u0430\u0432\u0441\u0442\u0432\u0443\u0439\u0442\u0435\u201d \u6240\u9700\u8981\u7684\u5b57\u8282\u6570\uff0c\u8fd9\u662f\u56e0\u4e3a\u6bcf\u4e2a Unicode \u6807\u91cf\u503c\u9700\u8981 \u4e24\u4e2a\u5b57\u8282 \u5b58\u50a8\u3002 \u56e0\u6b64\u4e00\u4e2a\u5b57\u7b26\u4e32\u5b57\u8282\u503c\u7684\u7d22\u5f15\u5e76\u4e0d\u603b\u662f\u5bf9\u5e94\u4e00\u4e2a\u6709\u6548\u7684 Unicode \u6807\u91cf\u503c\u3002 \u4f5c\u4e3a\u6f14\u793a\uff0c\u8003\u8651\u5982\u4e0b\u65e0\u6548\u7684 Rust \u4ee3\u7801\uff1a let hello = \"\u0417\u0434\u0440\u0430\u0432\u0441\u0442\u0432\u0443\u0439\u0442\u0435\" ; let answer = & hello [ 0 ]; // \u5df2\u7ecf\u77e5\u9053 answer \u4e0d\u662f\u7b2c\u4e00\u4e2a\u5b57\u7b26 \u0417\u3002 \u5f53\u4f7f\u7528 UTF-8 \u7f16\u7801\u65f6\uff0c \u0417 \u7684\u7b2c\u4e00\u4e2a\u5b57\u8282 208 \uff0c\u7b2c\u4e8c\u4e2a\u662f 151 \uff0c\u6240\u4ee5 answer \u5b9e\u9645\u4e0a\u5e94\u8be5\u662f 208 \uff0c\u4e0d\u8fc7 208 \u81ea\u8eab\u5e76\u4e0d\u662f\u4e00\u4e2a\u6709\u6548\u7684\u5b57\u6bcd\u3002 \u8fd4\u56de 208 \u53ef\u4e0d\u662f\u4e00\u4e2a\u8bf7\u6c42\u5b57\u7b26\u4e32\u7b2c\u4e00\u4e2a\u5b57\u6bcd\u7684\u4eba\u6240\u5e0c\u671b\u770b\u5230\u7684\uff0c\u4e0d\u8fc7\u5b83\u662f Rust \u5728\u5b57\u8282\u7d22\u5f15 0 \u4f4d\u7f6e\u6240\u80fd\u63d0\u4f9b\u7684\u552f\u4e00\u6570\u636e\u3002 \u7528\u6237\u901a\u5e38\u4e0d\u4f1a\u60f3\u8981\u4e00\u4e2a\u5b57\u8282\u503c\u88ab\u8fd4\u56de\uff0c\u5373\u4fbf\u8fd9\u4e2a\u5b57\u7b26\u4e32\u53ea\u6709\u62c9\u4e01\u5b57\u6bcd\uff1a \u5373\u4fbf &\"hello\"[0] \u662f\u8fd4\u56de\u5b57\u8282\u503c\u7684\u6709\u6548\u4ee3\u7801\uff0c\u5b83\u4e5f\u5e94\u5f53\u8fd4\u56de 104 \u800c\u4e0d\u662f h \u3002 \u4e3a\u4e86\u907f\u514d\u8fd4\u56de\u610f\u5916\u7684\u503c\u5e76\u9020\u6210\u4e0d\u80fd\u7acb\u523b\u53d1\u73b0\u7684 bug\uff0cRust \u6839\u672c\u4e0d\u4f1a\u7f16\u8bd1\u8fd9\u4e9b\u4ee3\u7801\uff0c\u5e76\u5728\u5f00\u53d1\u8fc7\u7a0b\u4e2d\u53ca\u65e9\u675c\u7edd\u4e86\u8bef\u4f1a\u7684\u53d1\u751f\u3002","title":"\u5185\u90e8\u8868\u73b0"},{"location":"common-collections/#_8","text":"\u4ece Rust \u7684\u89d2\u5ea6\u6765\u8bb2\uff0c\u4e8b\u5b9e\u4e0a\u6709\u4e09\u79cd\u76f8\u5173\u65b9\u5f0f\u53ef\u4ee5\u7406\u89e3\u5b57\u7b26\u4e32\uff1a \u5b57\u8282 \u3001 \u6807\u91cf\u503c \u548c \u5b57\u5f62\u7c07 \uff08\u6700\u63a5\u8fd1\u4eba\u4eec\u773c\u4e2d \u5b57\u6bcd \u7684\u6982\u5ff5\uff09\u3002 \u6bd4\u5982\u8fd9\u4e2a\u7528\u68b5\u6587\u4e66\u5199\u7684\u5370\u5ea6\u8bed\u5355\u8bcd \u201c\u0928\u092e\u0938\u094d\u0924\u0947\u201d \uff0c\u6700\u7ec8\u5b83\u50a8\u5b58\u5728 vector \u4e2d\u7684 u8 \u503c\u770b\u8d77\u6765\u50cf\u8fd9\u6837\uff1a [ 224 , 164 , 168 , 224 , 164 , 174 , 224 , 164 , 184 , 224 , 165 , 141 , 224 , 164 , 164 , 224 , 165 , 135 ] \u8fd9\u91cc\u6709 18 \u4e2a\u5b57\u8282\uff0c\u4e5f\u5c31\u662f\u8ba1\u7b97\u673a\u6700\u7ec8\u4f1a\u50a8\u5b58\u7684\u6570\u636e\u3002\u5982\u679c\u4ece Unicode \u6807\u91cf\u503c\u7684\u89d2\u5ea6\u7406\u89e3\u5b83\u4eec\uff0c\u4e5f\u5c31\u50cf Rust \u7684 char \u7c7b\u578b\u90a3\u6837\uff0c\u8fd9\u4e9b\u5b57\u8282\u770b\u8d77\u6765\u50cf\u8fd9\u6837\uff1a [ '\u0928' , '\u092e' , '\u0938' , '\u094d' , '\u0924' , '\u0947' ] // \u8fd9\u91cc\u6709\u516d\u4e2a char\uff0c\u4e0d\u8fc7\u7b2c\u56db\u4e2a\u548c\u7b2c\u516d\u4e2a\u90fd\u4e0d\u662f\u5b57\u6bcd\uff0c\u5b83\u4eec\u662f\u53d1\u97f3\u7b26\u53f7\u672c\u8eab\u5e76\u6ca1\u6709\u4efb\u4f55\u610f\u4e49\u3002 // \u6700\u540e\uff0c\u5982\u679c\u4ee5\u5b57\u5f62\u7c07\u7684\u89d2\u5ea6\u7406\u89e3\uff0c\u5c31\u4f1a\u5f97\u5230\u4eba\u4eec\u6240\u8bf4\u7684\u6784\u6210\u8fd9\u4e2a\u5355\u8bcd\u7684\u56db\u4e2a\u5b57\u6bcd\uff1a [ \"\u0928\" , \"\u092e\" , \"\u0938\u094d\" , \"\u0924\u0947\" ] Rust \u63d0\u4f9b\u4e86\u591a\u79cd\u4e0d\u540c\u7684\u65b9\u5f0f\u6765\u89e3\u91ca\u8ba1\u7b97\u673a\u50a8\u5b58\u7684\u539f\u59cb\u5b57\u7b26\u4e32\u6570\u636e\uff0c\u8fd9\u6837\u7a0b\u5e8f\u5c31\u53ef\u4ee5\u9009\u62e9\u5b83\u9700\u8981\u7684\u8868\u73b0\u65b9\u5f0f\uff0c\u800c\u65e0\u6240\u8c13\u662f\u4f55\u79cd\u4eba\u7c7b\u8bed\u8a00\u3002 \u6700\u540e\u4e00\u4e2a Rust \u4e0d\u5141\u8bb8\u4f7f\u7528\u7d22\u5f15\u83b7\u53d6 String \u5b57\u7b26\u7684\u539f\u56e0\u662f\uff0c \u7d22\u5f15\u64cd\u4f5c\u9884\u671f\u603b\u662f\u9700\u8981\u5e38\u6570\u65f6\u95f4 (O(1)) \u3002\u4f46\u662f\u5bf9\u4e8e String \u4e0d\u53ef\u80fd\u4fdd\u8bc1\u8fd9\u6837\u7684\u6027\u80fd\uff0c \u56e0\u4e3a Rust \u5fc5\u987b\u4ece\u5f00\u5934\u5230\u7d22\u5f15\u4f4d\u7f6e\u904d\u5386\u6765\u786e\u5b9a\u6709\u591a\u5c11\u6709\u6548\u7684\u5b57\u7b26\u3002","title":"\u5b57\u8282\u3001\u6807\u91cf\u503c\u548c\u5b57\u5f62\u7c07"},{"location":"common-collections/#slice","text":"\u7d22\u5f15\u5b57\u7b26\u4e32\u901a\u5e38\u662f\u4e00\u4e2a\u574f\u70b9\u5b50\uff0c \u56e0\u4e3a\u5b57\u7b26\u4e32\u7d22\u5f15\u5e94\u8be5\u8fd4\u56de\u7684\u7c7b\u578b\u662f\u4e0d\u660e\u786e\u7684\uff1a\u5b57\u8282\u503c\u3001\u5b57\u7b26\u3001\u5b57\u5f62\u7c07\u6216\u8005\u5b57\u7b26\u4e32 slice\u3002 \u4e3a\u4e86\u66f4\u660e\u786e\u7d22\u5f15\u5e76\u8868\u660e\u4f60\u9700\u8981\u4e00\u4e2a\u5b57\u7b26\u4e32 slice \uff0c\u76f8\u6bd4\u4f7f\u7528 [] \u548c \u5355\u4e2a\u503c \u7684\u7d22\u5f15\uff0c\u53ef\u4ee5\u4f7f\u7528 [] \u548c\u4e00\u4e2a range \u6765\u521b\u5efa\u542b\u7279\u5b9a\u5b57\u8282\u7684\u5b57\u7b26\u4e32 slice \uff1a let hello = \"\u0417\u0434\u0440\u0430\u0432\u0441\u0442\u0432\u0443\u0439\u0442\u0435\" ; let s = & hello [ 0 .. 4 ]; // s \u4f1a\u662f\u4e00\u4e2a &str\uff0c\u5b83\u5305\u542b\u5b57\u7b26\u4e32\u7684\u5934\u56db\u4e2a\u5b57\u8282\u3002 // \u65e9\u4e9b\u65f6\u5019\uff0c\u63d0\u5230\u4e86\u8fd9\u4e9b\u5b57\u6bcd\u90fd\u662f\u4e24\u4e2a\u5b57\u8282\u957f\u7684\uff0c // \u6240\u4ee5\u8fd9\u610f\u5473\u7740 s \u5c06\u4f1a\u662f \u201c\u0417\u0434\u201d\u3002 \u5982\u679c\u83b7\u53d6 &hello[0..1] \u4f1a\u53d1\u751f\u4ec0\u4e48\u5462\uff1f \u7b54\u6848\u662f\uff1aRust \u5728\u8fd0\u884c\u65f6\u4f1a panic \uff0c\u5c31\u8ddf\u8bbf\u95ee vector \u4e2d\u7684\u65e0\u6548\u7d22\u5f15\u65f6\u4e00\u6837\uff1a $ cargo run Compiling collections v0 . 1.0 ( file : ///projects/collections) Finished dev [ unoptimized + debuginfo ] target ( s ) in 0.43 s Running ` target / debug / collections ` thread ' main ' panicked at ' byte index 1 is not a char boundary ; it is inside '\u0417' ( bytes 0 .. 2 ) of `\u0417\u0434\u0440\u0430\u0432\u0441\u0442\u0432\u0443\u0439\u0442\u0435` ' , src / main . rs : 4 : 14 note : run with ` RUST_BACKTRACE = 1 ` environment variable to display a backtrace \u5e94\u8be5\u5c0f\u5fc3\u8c28\u614e\u7684\u4f7f\u7528\u8fd9\u4e2a\u64cd\u4f5c\uff0c\u56e0\u4e3a\u8fd9\u4e48\u505a\u53ef\u80fd\u4f1a\u4f7f\u4f60\u7684\u7a0b\u5e8f\u5d29\u6e83\u3002","title":"\u5b57\u7b26\u4e32 slice"},{"location":"common-collections/#_9","text":"\u64cd\u4f5c\u5b57\u7b26\u4e32\u6bcf\u4e00\u90e8\u5206\u7684\u6700\u597d\u7684\u65b9\u6cd5\u662f\u660e\u786e\u8868\u793a\u9700\u8981 \u5b57\u7b26 \u8fd8\u662f \u5b57\u8282 \u3002\u5bf9\u4e8e\u5355\u72ec\u7684 Unicode \u6807\u91cf\u503c\u4f7f\u7528 chars \u65b9\u6cd5\u3002 \u5bf9 \u201c\u0928\u092e\u0938\u094d\u0924\u0947\u201d \u8c03\u7528 chars \u65b9\u6cd5\u4f1a\u5c06\u5176\u5206\u5f00\u5e76\u8fd4\u56de\u516d\u4e2a char \u7c7b\u578b\u7684\u503c\uff0c\u63a5\u7740\u5c31\u53ef\u4ee5\u904d\u5386\u5176\u7ed3\u679c\u6765\u8bbf\u95ee\u6bcf\u4e00\u4e2a\u5143\u7d20\u4e86\uff1a for c in \"\u0928\u092e\u0938\u094d\u0924\u0947\" . chars () { println! ( \"{}\" , c ); } \u4f1a\u6253\u5370\u51fa\u5982\u4e0b\u5185\u5bb9\uff1a \u0928 \u092e \u0938 \u094d \u0924 \u0947 \u53e6\u5916 bytes \u65b9\u6cd5\u8fd4\u56de\u6bcf\u4e00\u4e2a \u539f\u59cb\u5b57\u8282 \uff0c\u8fd9\u53ef\u80fd\u4f1a\u9002\u5408\u4f60\u7684\u4f7f\u7528\u573a\u666f\uff1a for b in \"\u0928\u092e\u0938\u094d\u0924\u0947\" . bytes () { println! ( \"{}\" , b ); } \u4f1a\u6253\u5370\u51fa\u7ec4\u6210 String \u7684 18 \u4e2a\u5b57\u8282\uff1a 224 164 // --snip-- 165 135 \u8bf7\u8bb0\u4f4f\u6709\u6548\u7684 Unicode \u6807\u91cf\u503c\u53ef\u80fd\u4f1a\u7531\u4e0d\u6b62\u4e00\u4e2a\u5b57\u8282\u7ec4\u6210\u3002 \u4ece\u5b57\u7b26\u4e32\u4e2d\u83b7\u53d6\u5b57\u5f62\u7c07\u662f\u5f88\u590d\u6742\u7684\uff0c\u6240\u4ee5\u6807\u51c6\u5e93\u5e76\u6ca1\u6709\u63d0\u4f9b\u8fd9\u4e2a\u529f\u80fd\u3002 crates.io \u4e0a\u6709\u4e9b\u63d0\u4f9b\u8fd9\u6837\u529f\u80fd\u7684 crate \u3002","title":"\u904d\u5386\u5b57\u7b26\u4e32"},{"location":"common-collections/#_10","text":"\u603b\u800c\u8a00\u4e4b\uff0c\u5b57\u7b26\u4e32\u8fd8\u662f\u5f88\u590d\u6742\u7684\u3002 \u4e0d\u540c\u7684\u8bed\u8a00\u9009\u62e9\u4e86\u4e0d\u540c\u7684\u5411\u7a0b\u5e8f\u5458\u5c55\u793a\u5176\u590d\u6742\u6027\u7684\u65b9\u5f0f \u3002 Rust \u9009\u62e9\u4e86\u4ee5\u51c6\u786e\u7684\u65b9\u5f0f\u5904\u7406 String \u6570\u636e\u4f5c\u4e3a\u6240\u6709 Rust \u7a0b\u5e8f\u7684\u9ed8\u8ba4\u884c\u4e3a\uff0c\u8fd9\u610f\u5473\u7740\u7a0b\u5e8f\u5458\u4eec\u5fc5\u987b\u66f4\u591a\u7684\u601d\u8003\u5982\u4f55\u9884\u5148\u5904\u7406 UTF-8 \u6570\u636e\u3002 \u8fd9\u79cd\u6743\u8861\u53d6\u820d\u76f8\u6bd4\u5176\u4ed6\u8bed\u8a00\u66f4\u591a\u7684\u66b4\u9732\u51fa\u4e86\u5b57\u7b26\u4e32\u7684\u590d\u6742\u6027\uff0c\u4e0d\u8fc7\u4e5f\u4f7f\u4f60\u5728\u5f00\u53d1\u751f\u547d\u5468\u671f\u540e\u671f\u514d\u4e8e\u5904\u7406\u6d89\u53ca\u975e ASCII \u5b57\u7b26\u7684\u9519\u8bef\u3002","title":"\u5b57\u7b26\u4e32\u5e76\u4e0d\u7b80\u5355"},{"location":"common-collections/#hashmap","text":"\u96c6\u5408\u7c7b\u578b \u54c8\u5e0c map \uff08hash map\uff09\u3002 HashMap<K, V> \u7c7b\u578b\u50a8\u5b58\u4e86\u4e00\u4e2a\u952e\u7c7b\u578b K \u5bf9\u5e94\u4e00\u4e2a\u503c\u7c7b\u578b V \u7684\u6620\u5c04\u3002 \u5b83\u901a\u8fc7\u4e00\u4e2a \u54c8\u5e0c\u51fd\u6570 \uff08hashing function\uff09\u6765\u5b9e\u73b0\u6620\u5c04\uff0c\u51b3\u5b9a\u5982\u4f55\u5c06\u952e\u548c\u503c\u653e\u5165\u5185\u5b58\u4e2d\u3002 \u5f88\u591a\u7f16\u7a0b\u8bed\u8a00\u652f\u6301\u8fd9\u79cd\u6570\u636e\u7ed3\u6784\uff0c\u4e0d\u8fc7\u901a\u5e38\u6709\u4e0d\u540c\u7684\u540d\u5b57\uff1a \u54c8\u5e0c \u3001 map \u3001 \u5bf9\u8c61 \u3001 \u54c8\u5e0c\u8868 \u6216\u8005 \u5173\u8054\u6570\u7ec4 \uff0c \u54c8\u5e0c map \u53ef\u4ee5\u7528\u4e8e\u9700\u8981\u4efb\u4f55\u7c7b\u578b\u4f5c\u4e3a\u952e\u6765\u5bfb\u627e\u6570\u636e\u7684\u60c5\u51b5\uff0c\u800c\u4e0d\u662f\u50cf vector \u90a3\u6837\u901a\u8fc7\u7d22\u5f15\u3002","title":"HashMap \u952e\u503c\u5bf9"},{"location":"common-collections/#map","text":"// \u7528 new \u521b\u5efa\u4e00\u4e2a\u7a7a\u7684 HashMap\uff0c\u5e76\u4f7f\u7528 insert \u589e\u52a0\u5143\u7d20\u3002 use std :: collections :: HashMap ; // \u5fc5\u987b\u9996\u5148 use \u6807\u51c6\u5e93\u4e2d\u96c6\u5408\u90e8\u5206\u7684 HashMap // HashMap \u662f\u6700\u4e0d\u5e38\u7528\u7684\uff0c\u6240\u4ee5\u5e76\u6ca1\u6709\u88ab prelude \u81ea\u52a8\u5f15\u7528\u3002 // \u6807\u51c6\u5e93\u4e2d\u5bf9 HashMap \u7684\u652f\u6301\u4e5f\u76f8\u5bf9\u8f83\u5c11\uff0c\u4f8b\u5982\uff0c\u5e76\u6ca1\u6709\u5185\u5efa\u7684\u6784\u5efa\u5b8f\u3002 let mut scores = HashMap :: new (); scores . insert ( String :: from ( \"Blue\" ), 10 ); scores . insert ( String :: from ( \"Yellow\" ), 50 ); \u50cf vector \u4e00\u6837\uff0c\u54c8\u5e0c map \u5c06\u5b83\u4eec\u7684\u6570\u636e\u50a8\u5b58\u5728\u5806\u4e0a\uff0c\u8fd9\u4e2a HashMap \u7684\u952e\u7c7b\u578b\u662f String \u800c\u503c\u7c7b\u578b\u662f i32 \u3002 \u7c7b\u4f3c\u4e8e vector \uff0c \u54c8\u5e0c map \u662f\u540c\u8d28\u7684\uff1a \u6240\u6709\u7684\u952e\u5fc5\u987b\u662f\u76f8\u540c\u7c7b\u578b\uff0c\u503c\u4e5f\u5fc5\u987b\u90fd\u662f\u76f8\u540c\u7c7b\u578b\u3002 \u53e6\u4e00\u4e2a\u6784\u5efa\u54c8\u5e0c map \u7684\u65b9\u6cd5\u662f\u5728\u4e00\u4e2a\u5143\u7ec4\u7684 vector \u4e0a\u4f7f\u7528 \u8fed\u4ee3\u5668 \uff08iterator\uff09\u548c collect \u65b9\u6cd5\uff0c\u5176\u4e2d\u6bcf\u4e2a\u5143\u7ec4\u5305\u542b\u4e00\u4e2a\u952e\u503c\u5bf9\u3002 \u4f1a\u5728\u7b2c\u5341\u4e09\u7ae0\u7684 \u201c \u4f7f\u7528\u8fed\u4ee3\u5668\u5904\u7406\u4e00\u7cfb\u5217\u5143\u7d20 \u201d \u90e8\u5206 \u4ecb\u7ecd\u8fed\u4ee3\u5668\u53ca\u5176\u5173\u8054\u65b9\u6cd5 \u3002 collect \u65b9\u6cd5\u53ef\u4ee5\u5c06\u6570\u636e\u6536\u96c6\u8fdb\u4e00\u7cfb\u5217\u7684\u96c6\u5408\u7c7b\u578b\uff0c\u5305\u62ec HashMap \u3002 use std :: collections :: HashMap ; let teams = vec! [ String :: from ( \"Blue\" ), String :: from ( \"Yellow\" )]; let initial_scores = vec! [ 10 , 50 ]; // \u8fd9\u91cc HashMap<_, _> \u7c7b\u578b\u6ce8\u89e3\u662f\u5fc5\u8981\u7684\uff0c\u56e0\u4e3a\u53ef\u80fd collect \u4e3a\u5f88\u591a\u4e0d\u540c\u7684\u6570\u636e\u7ed3\u6784\uff0c\u800c\u9664\u975e\u663e\u5f0f\u6307\u5b9a\u5426\u5219 Rust \u65e0\u4ece\u5f97\u77e5\u4f60\u9700\u8981\u7684\u7c7b\u578b\u3002 // \u4f46\u662f\u5bf9\u4e8e\u952e\u548c\u503c\u7684\u7c7b\u578b\u53c2\u6570\u6765\u8bf4\uff0c\u53ef\u4ee5\u4f7f\u7528\u4e0b\u5212\u7ebf\u5360\u4f4d\uff0c\u800c Rust \u80fd\u591f\u6839\u636e vector \u4e2d\u6570\u636e\u7684\u7c7b\u578b\u63a8\u65ad\u51fa HashMap \u6240\u5305\u542b\u7684\u7c7b\u578b\u3002 // \u952e\uff08key\uff09\u7c7b\u578b\u662f String\uff0c // \u503c\uff08value\uff09\u7c7b\u578b\u662f i32\uff0c let mut scores : HashMap < _ , _ > = teams . into_iter (). zip ( initial_scores . into_iter ()). collect ();","title":"\u65b0\u5efa\u54c8\u5e0c map"},{"location":"common-collections/#map_1","text":"\u5bf9\u4e8e\u50cf i32 \u8fd9\u6837\u7684\u5b9e\u73b0\u4e86 Copy trait \u7684\u7c7b\u578b\uff0c\u5176\u503c\u53ef\u4ee5\u62f7\u8d1d\u8fdb \u54c8\u5e0c map \u3002\u5bf9\u4e8e\u50cf String \u8fd9\u6837\u62e5\u6709\u6240\u6709\u6743\u7684\u503c\uff0c\u5176\u503c\u5c06\u88ab \u79fb\u52a8 \u800c \u54c8\u5e0c map \u4f1a\u6210\u4e3a\u8fd9\u4e9b\u503c\u7684\u6240\u6709\u8005\uff0c use std :: collections :: HashMap ; let field_name = String :: from ( \"Favorite color\" ); let field_value = String :: from ( \"Blue\" ); let mut map = HashMap :: new (); map . insert ( field_name , field_value ); // \u8fd9\u91cc field_name \u548c field_value \u4e0d\u518d\u6709\u6548\uff0c // \u5c1d\u8bd5\u4f7f\u7528\u5b83\u4eec\u770b\u770b\u4f1a\u51fa\u73b0\u4ec0\u4e48\u7f16\u8bd1\u9519\u8bef\uff01 // \u5f53 insert \u8c03\u7528\u5c06 field_name \u548c field_value \u79fb\u52a8\u5230\u54c8\u5e0c map \u4e2d\u540e\uff0c\u5c06\u4e0d\u80fd\u4f7f\u7528\u8fd9\u4e24\u4e2a\u7ed1\u5b9a\u3002 \u5982\u679c\u5c06\u503c\u7684\u5f15\u7528\u63d2\u5165\u54c8\u5e0c map\uff0c\u8fd9\u4e9b\u503c\u672c\u8eab\u5c06\u4e0d\u4f1a\u88ab\u79fb\u52a8\u8fdb\u54c8\u5e0c map\u3002\u4f46\u662f\u8fd9\u4e9b\u5f15\u7528\u6307\u5411\u7684\u503c\u5fc5\u987b\u81f3\u5c11\u5728\u54c8\u5e0c map \u6709\u6548\u65f6\u4e5f\u662f\u6709\u6548\u7684\u3002 \u7b2c\u5341\u7ae0 \u201c \u751f\u547d\u5468\u671f\u4e0e\u5f15\u7528\u6709\u6548\u6027 \u201d \u90e8\u5206\u5c06\u4f1a\u66f4\u591a\u7684\u8ba8\u8bba\u8fd9\u4e2a\u95ee\u9898\u3002","title":"\u54c8\u5e0c map \u548c\u6240\u6709\u6743"},{"location":"common-collections/#map_2","text":"\u53ef\u4ee5\u901a\u8fc7 get \u65b9\u6cd5\u5e76\u63d0\u4f9b\u5bf9\u5e94\u7684\u952e\u6765\u4ece\u54c8\u5e0c map \u4e2d\u83b7\u53d6\u503c use std :: collections :: HashMap ; let mut scores = HashMap :: new (); scores . insert ( String :: from ( \"Blue\" ), 10 ); scores . insert ( String :: from ( \"Yellow\" ), 50 ); let team_name = String :: from ( \"Blue\" ); let score = scores . get ( & team_name ); // score \u662f\u4e0e\u84dd\u961f\u5206\u6570\u76f8\u5173\u7684\u503c\uff0c\u5e94\u4e3a Some(10)\u3002 // \u56e0\u4e3a get \u8fd4\u56de Option<V>\uff0c\u6240\u4ee5\u7ed3\u679c\u88ab\u88c5\u8fdb Some\uff1b // \u5982\u679c\u67d0\u4e2a\u952e\u5728\u54c8\u5e0c map \u4e2d\u6ca1\u6709\u5bf9\u5e94\u7684\u503c\uff0cget \u4f1a\u8fd4\u56de None\u3002 // \u8fd9\u65f6\u5c31\u8981\u7528\u67d0\u79cd\u7b2c\u516d\u7ae0\u63d0\u5230\u7684\u65b9\u6cd5\u4e4b\u4e00\u6765\u5904\u7406 Option\u3002 // if let \u65b9\u5f0f\ud83d\udc47\ud83c\udffb if let Some ( value ) = score { println! ( \"value is {value}\" ) } else { println! ( \"not value\" ) } // match \u65b9\u5f0f\ud83d\udc47\ud83c\udffb match score { Some ( value ) => { println! ( \"value is {value}\" ) } // None => { // println!(\"not value\") // } _ => println! ( \"not value\" ), } \u53ef\u4ee5\u4f7f\u7528\u4e0e vector \u7c7b\u4f3c\u7684\u65b9\u5f0f\u6765\u904d\u5386\u54c8\u5e0c map \u4e2d\u7684\u6bcf\u4e00\u4e2a\u952e\u503c\u5bf9\uff0c\u4e5f\u5c31\u662f for \u5faa\u73af\uff1a use std :: collections :: HashMap ; let mut scores = HashMap :: new (); scores . insert ( String :: from ( \"Blue\" ), 10 ); scores . insert ( String :: from ( \"Yellow\" ), 50 ); for ( key , value ) in & scores { println! ( \"{}: {}\" , key , value ); } // \u8fd9\u4f1a\u4ee5\u4efb\u610f\u987a\u5e8f\u6253\u5370\u51fa\u6bcf\u4e00\u4e2a\u952e\u503c\u5bf9\uff1a // Blue:10 // Yellow:50","title":"\u8bbf\u95ee\u54c8\u5e0c map"},{"location":"common-collections/#map_3","text":"\u5c3d\u7ba1\u952e\u503c\u5bf9\u7684\u6570\u91cf\u662f\u53ef\u4ee5\u589e\u957f\u7684\uff0c\u4e0d\u8fc7\u4efb\u4f55\u65f6\u5019\uff0c\u6bcf\u4e2a\u952e\u53ea\u80fd\u5173\u8054\u4e00\u4e2a\u503c\u3002 \u5f53\u6211\u4eec\u60f3\u8981\u6539\u53d8\u54c8\u5e0c map \u4e2d\u7684\u6570\u636e\u65f6\uff0c\u5fc5\u987b\u51b3\u5b9a\u5982\u4f55\u5904\u7406\u4e00\u4e2a\u952e\u5df2\u7ecf\u6709\u503c\u4e86\u7684\u60c5\u51b5\u3002 \u53ef\u4ee5\u9009\u62e9\u5b8c\u5168\u65e0\u89c6\u65e7\u503c\u5e76\u7528\u65b0\u503c\u4ee3\u66ff\u65e7\u503c\u3002 \u53ef\u4ee5\u9009\u62e9\u4fdd\u7559\u65e7\u503c\u800c\u5ffd\u7565\u65b0\u503c\uff0c\u5e76\u53ea\u5728\u952e \u6ca1\u6709 \u5bf9\u5e94\u503c\u65f6\u589e\u52a0\u65b0\u503c\u3002 \u6216\u8005\u53ef\u4ee5\u7ed3\u5408\u65b0\u65e7\u4e24\u503c\u3002","title":"\u66f4\u65b0\u54c8\u5e0c map"},{"location":"common-collections/#_11","text":"\u5982\u679c\u63d2\u5165\u4e86\u4e00\u4e2a\u952e\u503c\u5bf9\uff0c\u63a5\u7740\u7528\u76f8\u540c\u7684\u952e\u63d2\u5165\u4e00\u4e2a\u4e0d\u540c\u7684\u503c\uff0c\u4e0e\u8fd9\u4e2a\u952e\u76f8\u5173\u8054\u7684\u65e7\u503c\u5c06\u88ab\u66ff\u6362\u3002 use std :: collections :: HashMap ; let mut scores = HashMap :: new (); scores . insert ( String :: from ( \"Blue\" ), 10 ); scores . insert ( String :: from ( \"Blue\" ), 25 ); println! ( \"{:?}\" , scores ); // \u8fd9\u4f1a\u6253\u5370\u51fa {\"Blue\": 25}\u3002\u539f\u59cb\u7684\u503c 10 \u5219\u88ab\u8986\u76d6\u4e86\u3002","title":"\u8986\u76d6\u4e00\u4e2a\u503c"},{"location":"common-collections/#_12","text":"\u7ecf\u5e38\u4f1a\u68c0\u67e5\u67d0\u4e2a\u7279\u5b9a\u7684\u952e\u662f\u5426\u6709\u503c\uff0c\u5982\u679c\u6ca1\u6709\u5c31\u63d2\u5165\u4e00\u4e2a\u503c\u3002 \u4e3a\u6b64 \u54c8\u5e0c map \u6709\u4e00\u4e2a\u7279\u6709\u7684 API\uff0c\u53eb\u505a entry \uff0c\u5b83\u83b7\u53d6\u6211\u4eec\u60f3\u8981\u68c0\u67e5\u7684\u952e\u4f5c\u4e3a\u53c2\u6570\u3002 entry \u51fd\u6570\u7684\u8fd4\u56de\u503c\u662f\u4e00\u4e2a\u679a\u4e3e\uff0c Entry \uff0c\u5b83\u4ee3\u8868\u4e86\u53ef\u80fd\u5b58\u5728\u4e5f\u53ef\u80fd\u4e0d\u5b58\u5728\u7684\u503c\u3002 use std :: collections :: HashMap ; let mut scores = HashMap :: new (); scores . insert ( String :: from ( \"Blue\" ), 10 ); scores . entry ( String :: from ( \"Yellow\" )). or_insert ( 50 ); scores . entry ( String :: from ( \"Blue\" )). or_insert ( 50 ); println! ( \"{:?}\" , scores ); // \u4f1a\u6253\u5370\u51fa {\"Yellow\": 50, \"Blue\": 10}\u3002 Entry \u7684 or_insert \u65b9\u6cd5\u5728\u952e\u5bf9\u5e94\u7684\u503c\u5b58\u5728\u65f6\u5c31\u8fd4\u56de\u8fd9\u4e2a\u503c\u7684\u53ef\u53d8\u5f15\u7528\uff0c\u5982\u679c\u4e0d\u5b58\u5728\u5219\u5c06\u53c2\u6570\u4f5c\u4e3a\u65b0\u503c\u63d2\u5165\u5e76\u8fd4\u56de\u65b0\u503c\u7684\u53ef\u53d8\u5f15\u7528\u3002 \u8fd9\u6bd4\u7f16\u5199\u81ea\u5df1\u7684\u903b\u8f91\u8981\u7b80\u660e\u7684\u591a\uff0c\u53e6\u5916\u4e5f\u4e0e\u501f\u7528\u68c0\u67e5\u5668\u7ed3\u5408\u5f97\u66f4\u597d\u3002","title":"\u53ea\u5728\u952e\u6ca1\u6709\u5bf9\u5e94\u503c\u65f6\u63d2\u5165"},{"location":"common-collections/#_13","text":"\u53e6\u4e00\u4e2a\u5e38\u89c1\u7684\u54c8\u5e0c map \u7684\u5e94\u7528\u573a\u666f\u662f\u627e\u5230\u4e00\u4e2a\u952e\u5bf9\u5e94\u7684\u503c\u5e76\u6839\u636e\u65e7\u7684\u503c\u66f4\u65b0\u5b83\u3002 \u793a\u4f8b\u4e2d\u7684\u4ee3\u7801\u8ba1\u6570\u4e00\u4e9b\u6587\u672c\u4e2d\u6bcf\u4e00\u4e2a\u5355\u8bcd\u5206\u522b\u51fa\u73b0\u4e86\u591a\u5c11\u6b21\u3002 use std :: collections :: HashMap ; let text = \"hello world wonderful world\" ; let mut map = HashMap :: new (); // split_whitespace \u65b9\u6cd5\u4f1a\u8fed\u4ee3 text \u7684\u503c\u7531\u7a7a\u683c\u5206\u9694\u7684\u5b50 slice. for word in text . split_whitespace () { // or_insert \u65b9\u6cd5\u8fd4\u56de\u8fd9\u4e2a\u952e\u7684\u503c\u7684\u4e00\u4e2a\u53ef\u53d8\u5f15\u7528\uff08&mut V\uff09\u3002 let count = map . entry ( word ). or_insert ( 0 ); // \u8fd9\u91cc\u5c06\u8fd9\u4e2a\u53ef\u53d8\u5f15\u7528\u50a8\u5b58\u5728 count \u53d8\u91cf\u4e2d\uff0c\u6240\u4ee5\u4e3a\u4e86\u8d4b\u503c\u5fc5\u987b\u9996\u5148\u4f7f\u7528\u661f\u53f7\uff08*\uff09\u89e3\u5f15\u7528 count\u3002 * count += 1 ; // \u8fd9\u4e2a\u53ef\u53d8\u5f15\u7528\u5728 for \u5faa\u73af\u7684\u7ed3\u5c3e\u79bb\u5f00\u4f5c\u7528\u57df\uff0c\u8fd9\u6837\u6240\u6709\u8fd9\u4e9b\u6539\u53d8\u90fd\u662f\u5b89\u5168\u7684\u5e76\u7b26\u5408\u501f\u7528\u89c4\u5219\u3002 } println! ( \"{:?}\" , map ); // \u4f1a\u6253\u5370\u51fa {\"world\": 2, \"hello\": 1, \"wonderful\": 1}\u3002","title":"\u6839\u636e\u65e7\u503c\u66f4\u65b0\u4e00\u4e2a\u503c"},{"location":"common-collections/#_14","text":"HashMap \u9ed8\u8ba4\u4f7f\u7528\u4e00\u79cd\u53eb\u505a SipHash \u7684\u54c8\u5e0c\u51fd\u6570\uff0c\u5b83\u53ef\u4ee5\u62b5\u5fa1\u6d89\u53ca \u54c8\u5e0c\u8868 \uff08hash table\uff091 \u7684\u62d2\u7edd\u670d\u52a1\uff08Denial of Service, DoS\uff09\u653b\u51fb\u3002 \u7136\u800c\u8fd9\u5e76\u4e0d\u662f\u53ef\u7528\u7684\u6700\u5feb\u7684\u7b97\u6cd5\uff0c\u4e0d\u8fc7\u4e3a\u4e86\u66f4\u9ad8\u7684\u5b89\u5168\u6027\u503c\u5f97\u4ed8\u51fa\u4e00\u4e9b\u6027\u80fd\u7684\u4ee3\u4ef7\u3002 \u5982\u679c\u6027\u80fd\u76d1\u6d4b\u663e\u793a\u6b64\u54c8\u5e0c\u51fd\u6570\u975e\u5e38\u6162\uff0c\u4ee5\u81f4\u4e8e\u4f60\u65e0\u6cd5\u63a5\u53d7\uff0c\u53ef\u4ee5\u6307\u5b9a\u4e00\u4e2a\u4e0d\u540c\u7684 hasher \u6765\u5207\u6362\u4e3a\u5176\u5b83\u51fd\u6570\u3002 hasher \u662f\u4e00\u4e2a\u5b9e\u73b0\u4e86 BuildHasher trait \u7684\u7c7b\u578b\u3002 \u7b2c\u5341\u7ae0\u4f1a\u8ba8\u8bba trait \u548c\u5982\u4f55\u5b9e\u73b0\u5b83\u4eec\u3002\u5e76\u4e0d\u9700\u8981\u4ece\u5934\u5f00\u59cb\u5b9e\u73b0\u4f60\u81ea\u5df1\u7684 hasher \uff1b crates.io \u6709\u5176\u4ed6\u4eba\u5206\u4eab\u7684\u5b9e\u73b0\u4e86\u8bb8\u591a\u5e38\u7528\u54c8\u5e0c\u7b97\u6cd5\u7684 hasher \u7684\u5e93\u3002 \u53c2\u8003: https://en.wikipedia.org/wiki/SipHash","title":"\u54c8\u5e0c\u51fd\u6570"},{"location":"common-collections/#_15","text":"vector \u3001 \u5b57\u7b26\u4e32 \u548c \u54c8\u5e0c map \u4f1a\u5728\u4f60\u7684\u7a0b\u5e8f\u9700\u8981 \u50a8\u5b58 \u3001 \u8bbf\u95ee \u548c \u4fee\u6539\u6570\u636e \u65f6\u5e2e\u52a9\u4f60\u3002\u8fd9\u91cc\u6709\u4e00\u4e9b\u4f60\u5e94\u8be5\u80fd\u591f\u89e3\u51b3\u7684\u7ec3\u4e60\u95ee\u9898\uff1a \u7ed9\u5b9a\u4e00\u7cfb\u5217\u6570\u5b57\uff0c\u4f7f\u7528 vector \u5e76\u8fd4\u56de\u8fd9\u4e2a\u5217\u8868\u7684\u4e2d\u4f4d\u6570\uff08\u6392\u5217\u6570\u7ec4\u540e\u4f4d\u4e8e\u4e2d\u95f4\u7684\u503c\uff09\u548c\u4f17\u6570\uff08mode\uff0c\u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684\u503c\uff1b\u8fd9\u91cc\u54c8\u5e0c map \u4f1a\u5f88\u6709\u5e2e\u52a9\uff09\u3002 \u5c06\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a Pig Latin \uff0c\u4e5f\u5c31\u662f\u6bcf\u4e00\u4e2a\u5355\u8bcd\u7684\u7b2c\u4e00\u4e2a\u8f85\u97f3\u5b57\u6bcd\u88ab\u79fb\u52a8\u5230\u5355\u8bcd\u7684\u7ed3\u5c3e\u5e76\u589e\u52a0 \u201cay\u201d\uff0c\u6240\u4ee5 \u201cfirst\u201d \u4f1a\u53d8\u6210 \u201cirst-fay\u201d\u3002\u5143\u97f3\u5b57\u6bcd\u5f00\u5934\u7684\u5355\u8bcd\u5219\u5728\u7ed3\u5c3e\u589e\u52a0 \u201chay\u201d\uff08\u201capple\u201d \u4f1a\u53d8\u6210 \u201capple-hay\u201d\uff09\u3002\u7262\u8bb0 UTF-8 \u7f16\u7801\uff01 \u4f7f\u7528 \u54c8\u5e0c map \u548c vector \uff0c\u521b\u5efa\u4e00\u4e2a\u6587\u672c\u63a5\u53e3\u6765\u5141\u8bb8\u7528\u6237\u5411\u516c\u53f8\u7684\u90e8\u95e8\u4e2d\u589e\u52a0\u5458\u5de5\u7684\u540d\u5b57\u3002\u4f8b\u5982\uff0c\u201cAdd Sally to Engineering\u201d \u6216 \u201cAdd Amir to Sales\u201d\u3002\u63a5\u7740\u8ba9\u7528\u6237\u83b7\u53d6\u4e00\u4e2a\u90e8\u95e8\u7684\u6240\u6709\u5458\u5de5\u7684\u5217\u8868\uff0c\u6216\u8005\u516c\u53f8\u6bcf\u4e2a\u90e8\u95e8\u7684\u6240\u6709\u5458\u5de5\u6309\u7167\u5b57\u5178\u5e8f\u6392\u5217\u7684\u5217\u8868\u3002 \u6807\u51c6\u5e93 API \u6587\u6863\u4e2d\u63cf\u8ff0\u7684\u8fd9\u4e9b\u7c7b\u578b\u7684\u65b9\u6cd5\u5c06\u6709\u52a9\u4e8e\u4f60\u8fdb\u884c\u8fd9\u4e9b\u7ec3\u4e60\uff01","title":"\u603b\u7ed3"},{"location":"common-collections/#-","text":"","title":"\u7ec3\u4e60-\u6211\u7684\u7b54\u6848"},{"location":"common-collections/#_16","text":"fn main () { let mut numbers = vec! []; // \u751f\u6210100\u4e2a\u968f\u673a\u6570 for _ in 0 .. 100 { let rand_number = thread_rng (). gen_range ( 0 .. 100 ); // \u968f\u673a\u6570\u4ece0-100\u4e2d\u53d6\u5f97\u3002 numbers . push ( rand_number ); } numbers . sort (); // \u4ece\u5c0f\u5230\u5927\u6392\u5e8f numbers . reverse (); // \u9006\u5e8f println! ( \"\u751f\u6210\u7684\u968f\u673a\u6570\u5217\u662f: {:?}\" , & numbers ); let mid_idx = numbers . len () / 2 ; // \u627e\u5230\u4e2d\u4f4d\u6570\u5750\u6807 println! ( \"\u4e2d\u4f4d\u6570\u662f: {}\" , numbers [ mid_idx ]); // \u6253\u5370\u4e2d\u4f4d\u6570 let max_word = max_count_word ( & numbers ); // \u83b7\u53d6\u51fa\u73b0\u6700\u591a\u6b21\u6570\u7684\u968f\u673a\u6570 // \u4f7f\u7528if let \u5224\u65ad\u5e76\u6253\u5370\u51fa\u73b0\u6700\u591a\u6b21\u6570\u7684\u968f\u673a\u6570 if let Some ( value ) = max_word { println! ( \"\u4f17\u6570\u662f: {}\" , value ); } else { println! ( \"\u672a\u53d1\u73b0\u4f17\u6570!\" ); } } fn max_count_word ( vec : & Vec < i32 > ) -> Option <& i32 > { let mut word_count = HashMap :: new (); // \u7edf\u8ba1\u6bcf\u4e2a\u968f\u673a\u6570\u51fa\u73b0\u7684\u6b21\u6570 for word in vec { let count = word_count . entry ( word ). or_insert ( 0 ); * count += 1 ; } let mut max_count = 0 ; let mut max_count_key = None ; // \u627e\u5230\u51fa\u73b0\u6700\u591a\u6b21\u7684\u968f\u673a\u6570; for ( k , v ) in word_count { if v > max_count { max_count = v ; max_count_key = Some ( k ); } } // \u8fd4\u56de\u51fa\u73b0\u6700\u591a\u6b21\u7684\u968f\u673a\u6570 max_count_key }","title":"\u8fd4\u56de\u5217\u8868\u7684\u4e2d\u4f4d\u6570"},{"location":"common-collections/#_17","text":"fn main () { let vowel_chars = [ 'a' , 'e' , 'i' , 'o' , 'u' ]; // \u4ece\u63a7\u5236\u53f0\u83b7\u53d6\u5355\u8bcd let word = get_word_from_line (); println! ( \"\u83b7\u53d6\u7684\u5355\u8bcd\u662f: {}\" , & word ); let mut fixed_word = String :: from ( \"\" ); // \u975e\u5143\u97f3\u5f00\u5934\u5355\u8bcd\u7684\u7b2c\u4e00\u4e2a\u5b57\u6bcd let mut not_vowel_char : Option < char > = None ; let mut other_chars = String :: from ( \"\" ); for ( idx , c ) in word . chars (). enumerate () { // \u83b7\u53d6\u7b2c\u4e00\u4e2a\u5b57\u7b26\u5e76\u4e14\u4e0d\u662f\u5143\u97f3\u5b57\u6bcd\u5f00\u5934\u7684\u5355\u8bcd\u7684\u7b2c\u4e00\u4e2a\u5b57\u6bcd if idx == 0 && ! vowel_chars . contains ( & c ) { not_vowel_char = Some ( c ); continue ; } else { other_chars . push ( c ); }; } // \u975e\u5143\u97f3\u5b57\u6bcd\u5f00\u5934\u7684\u60c5\u51b5 if let Some ( not_vowel_c ) = not_vowel_char { fixed_word = format! ( \"{}-{}ay\" , other_chars , not_vowel_c ); // \u4f7f\u7528format!\u5b8f\u683c\u5f0f\u5316\u5b57\u7b26 // \u5143\u97f3\u5b57\u6bcd\u5f00\u5934\u7684\u60c5\u51b5 } else { fixed_word = format! ( \"{}-hay\" , other_chars ); // \u4f7f\u7528format!\u5b8f\u683c\u5f0f\u5316\u5b57\u7b26 } println! ( \"\u4fee\u6539\u540e\u7684\u5b57\u7b26\u4e3a: {}\" , fixed_word ); } fn get_word_from_line () -> String { let mut word = String :: new (); println! ( \"\u8bf7\u8f93\u5165\u4e00\u4e2a\u5355\u8bcd:\" ); loop { match io :: stdin (). read_line ( & mut word ) { Ok ( _ ) => break , Err ( _ ) => continue , } } word = match word . trim (). parse () { Ok ( w ) => w , Err ( _ ) => String :: from ( \"\" ), }; word }","title":"\u5b57\u7b26\u4e32\u8f6c\u6362"},{"location":"common-collections/#_18","text":"// \u6700\u540e\u4e00\u9898\u4e0d\u7b80\u5355 // \u77e5\u8bc6\u70b9\uff1a // 1. \u4ece\u547d\u4ee4\u884c\u89e3\u6790\u5b57\u7b26\u4e32\u8f93\u5165 // 2. \u5224\u65ad\u5b57\u7b26\u4e32\u76f8\u7b49 // 3. \u751f\u547d\u5468\u671f\u63a7\u5236 fn main () { let mut dep_map = HashMap :: new (); let mut continue_add = true ; // \u5faa\u73af\u6dfb\u52a0\u4eba\u5458\u5230\u90e8\u95e8 while continue_add { println! ( \"\u8bf7\u8f93\u5165\u8981\u6dfb\u52a0\u7684\u4eba\u5458\u548c\u90e8\u95e8(add who to where):\" ); let add_text = get_input_text (); // Add Sally to Engineering let mut name : Option < String > = None ; let mut department : Option < String > = None ; for ( idx , word ) in add_text . split_whitespace (). enumerate () { let text : String = match word . parse () { Ok ( name ) => { println! ( \"\u89e3\u6790\u7684\u5355\u8bcd\u4e3a: {name}\" ); name } Err ( _ ) => { println! ( \"\u89e3\u6790\u8f93\u5165\u5931\u8d25\" ); break ; } }; match idx { 1 => name = Some ( String :: from ( text )), // \u7d22\u5f15\u4e3a1\u4e3a\u540d\u79f0\uff1b 3 => department = Some ( String :: from ( text )), // \u7d22\u5f15\u4e3a3\u4e3a\u90e8\u95e8\uff1b _ => (), } } // \u589e\u52a0\u90e8\u95e8\u5230\u516c\u53f8 if let Some ( name ) = name { if let Some ( department ) = department { let persons = dep_map . entry ( department ). or_insert ( Vec :: from ([])); persons . push ( name ); } } println! ( \"\u662f\u5426\u7ee7\u7eed\u589e\u52a0(y/n):\" ); continue_add = get_answer (); } println! ( \"\u8bf7\u8f93\u5165\u8981\u83b7\u53d6\u7684\u5458\u5de5\u5217\u8868\u7684\u90e8\u95e8(where):\" ); let dep_name = get_input_text (); let mut persons = dep_map . get_mut ( & dep_name ); // \u83b7\u53d6\u53ef\u4ee5\u6539\u53d8\u7684vec\u96c6\u5408 if let Some ( persons ) = persons { println! ( \"{} \u90e8\u95e8\u7684\u5458\u5de5\u6709:\" , & dep_name ); persons . sort (); // \u6839\u636e\u5b57\u6bcd\u8868\u6392\u5e8f for person in persons { println! ( \" \\t {}\" , person ); } } else { println! ( \"{}\u90e8\u95e8\u6ca1\u6709\u5458\u5de5\u5b58\u5728!\" , & dep_name ) } dbg! ( dep_map ); } fn get_answer () -> bool { let mut word = String :: new (); loop { match io :: stdin (). read_line ( & mut word ) { Ok ( _ ) => { let chars_count = word . trim (). chars (). count (); dbg! ( chars_count ); dbg! ( word . trim (). chars ()); if chars_count == 1 && word . trim (). chars (). eq ( \"y\" . chars ()) { return true ; } return false ; } Err ( _ ) => { println! ( \"\u8bf7\u8f93\u5165y\u6216\u8005n!\" ); continue ; } } } } fn get_input_text () -> String { let mut word = String :: new (); loop { match io :: stdin (). read_line ( & mut word ) { Ok ( _ ) => break , Err ( _ ) => continue , } } word = match word . trim (). parse () { Ok ( w ) => w , Err ( _ ) => String :: from ( \"\" ), }; word }","title":"\u589e\u52a0\u5458\u5de5\u540d\u5b57"},{"location":"common-programing-concepts/","text":"\u5e38\u89c1\u7f16\u7a0b\u6982\u5ff5 \u53d8\u91cf\u548c\u53ef\u53d8\u6027 \u53d8\u91cf\u9ed8\u8ba4\u662f\u4e0d\u53ef\u6539\u53d8\u7684\uff08immutable\uff09\u3002 \u5f53\u53d8\u91cf\u4e0d\u53ef\u53d8\u65f6\uff0c\u4e00\u65e6\u503c\u88ab\u7ed1\u5b9a\u4e00\u4e2a\u540d\u79f0\u4e0a\uff0c\u4f60\u5c31\u4e0d\u80fd\u6539\u53d8\u8fd9\u4e2a\u503c\u3002 \u6587\u4ef6\u540d: src/main.rs fn main () { let x = 5 ; println! ( \"The value of x is: {x}\" ); x = 6 ; // \u9519\u8bef, \u4e0d\u80fd\u5bf9\u4e0d\u53ef\u53d8\u53d8\u91cf x \u4e8c\u6b21\u8d4b\u503c\uff08cannot assign twice to immutable variable `x` \uff09 println! ( \"The value of x is: {x}\" ); } \u4e0d\u8fc7\u53ef\u53d8\u6027\u4e5f\u662f\u975e\u5e38\u6709\u7528\u7684\uff0c\u53ef\u4ee5\u7528\u6765\u66f4\u65b9\u4fbf\u5730\u7f16\u5199\u4ee3\u7801\u3002\u5c3d\u7ba1\u53d8\u91cf\u9ed8\u8ba4\u662f\u4e0d\u53ef\u53d8\u7684\uff0c\u4f60\u4ecd\u7136\u53ef\u4ee5\u5728\u53d8\u91cf\u540d\u524d\u6dfb\u52a0 mut \u6765\u4f7f\u5176\u53ef\u53d8: fn main () { let mut x = 5 ; // \u6dfb\u52a0mut\uff0c\u4f7f\u5176\u53ef\u53d8\u3002\uff08\u8fdb\u884c\u591a\u6b21\u8d4b\u503c\uff09 println! ( \"The value of x is: {x}\" ); x = 6 ; println! ( \"The value of x is: {x}\" ); } \u5e38\u91cf \u7c7b\u4f3c\u4e8e\u4e0d\u53ef\u53d8\u53d8\u91cf\uff0c\u5e38\u91cf(constants) \u662f\u7ed1\u5b9a\u5230\u4e00\u4e2a\u540d\u79f0\u7684\u4e0d\u5141\u8bb8\u6539\u53d8\u7684\u503c\uff0c\u4e0d\u8fc7\u5e38\u91cf\u4e0e\u53d8\u91cf\u8fd8\u662f\u6709\u4e00\u4e9b\u533a\u522b\u3002 \u4e0d\u5141\u8bb8\u5bf9\u5e38\u91cf\u4f7f\u7528 mut\u3002\u5e38\u91cf\u4e0d\u5149\u9ed8\u8ba4\u4e0d\u80fd\u53d8\uff0c\u5b83\u603b\u662f\u4e0d\u80fd\u53d8\u3002 \u5e38\u91cf\u4f7f\u7528 const \u5173\u952e\u5b57\u800c\u4e0d\u662f let \uff0c\u5e76\u4e14 \u5fc5\u987b \u6ce8\u660e\u503c\u7684\u7c7b\u578b\u3002 \u5e38\u91cf\u53ef\u4ee5\u5728\u4efb\u4f55\u4f5c\u7528\u57df\u4e2d\u58f0\u660e\uff0c\u5305\u62ec\u5168\u5c40\u4f5c\u7528\u57df\uff0c\u8fd9\u5728\u4e00\u4e2a\u503c\u9700\u8981\u88ab\u5f88\u591a\u90e8\u5206\u7684\u4ee3\u7801\u7528\u5230\u65f6\u5f88\u6709\u7528\u3002 \u5e38\u91cf\u53ea\u80fd\u88ab\u8bbe\u7f6e\u4e3a\u5e38\u91cf\u8868\u8fbe\u5f0f\uff0c\u800c\u4e0d\u53ef\u4ee5\u662f\u5176\u4ed6\u4efb\u4f55\u53ea\u80fd\u5728\u8fd0\u884c\u65f6\u8ba1\u7b97\u51fa\u7684\u503c\u3002 \u4f8b\u5982\uff1a const THREE_HOURS_IN_SECONDS : u32 = 60 * 60 * 3 ; Rust \u5bf9\u5e38\u91cf\u7684\u547d\u540d\u7ea6\u5b9a\u662f\u5728\u5355\u8bcd\u4e4b\u95f4\u4f7f\u7528\u5168\u5927\u5199\u52a0\u4e0b\u5212\u7ebf \u6709\u5173\u58f0\u660e\u5e38\u91cf\u65f6\u53ef\u4ee5\u4f7f\u7528\u54ea\u4e9b\u64cd\u4f5c\u7684\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605 Rust Reference \u7684\u5e38\u91cf\u6c42\u503c\u90e8\u5206 \u3002 \u9690\u85cf \u53ef\u4ee5\u5b9a\u4e49\u4e00\u4e2a\u4e0e\u4e4b\u524d\u53d8\u91cf\u540c\u540d\u7684\u65b0\u53d8\u91cf\u3002\u79f0\u4e4b\u4e3a\u7b2c\u4e00\u4e2a\u53d8\u91cf\u88ab\u7b2c\u4e8c\u4e2a \u9690\u85cf \uff08Shadowing\uff09\u4e86, \u8fd9\u610f\u5473\u7740\u5728\u4f7f\u7528\u53d8\u91cf\u7684\u540d\u79f0\u65f6\uff0c\u7f16\u8bd1\u5668\u5c06\u770b\u5230\u7b2c\u4e8c\u4e2a\u53d8\u91cf\u3002 \u5b9e\u9645\u4e0a\uff0c\u7b2c\u4e8c\u4e2a\u53d8\u91cf\u201c\u906e\u853d\u201d\u4e86\u7b2c\u4e00\u4e2a\u53d8\u91cf\uff0c\u6b64\u65f6\u4efb\u4f55\u4f7f\u7528\u8be5\u53d8\u91cf\u540d\u7684\u884c\u4e3a\u4e2d\u90fd\u4f1a\u89c6\u4e3a\u662f\u5728\u4f7f\u7528\u7b2c\u4e8c\u4e2a\u53d8\u91cf\uff0c\u76f4\u5230\u7b2c\u4e8c\u4e2a\u53d8\u91cf\u81ea\u5df1\u4e5f\u88ab\u9690\u85cf\u6216\u7b2c\u4e8c\u4e2a\u53d8\u91cf\u7684\u4f5c\u7528\u57df\u7ed3\u675f\u3002 \u53ef\u4ee5\u7528\u76f8\u540c\u53d8\u91cf\u540d\u79f0\u6765\u9690\u85cf\u4e00\u4e2a\u53d8\u91cf\uff0c\u4ee5\u53ca\u91cd\u590d\u4f7f\u7528 let \u5173\u952e\u5b57\u6765\u591a\u6b21\u9690\u85cf\uff0c\u5982\u4e0b\u6240\u793a\uff1a fn main () { let x = 5 ; // \u9996\u5148\u5c06 x \u7ed1\u5b9a\u5230\u503c 5 \u4e0a let x = x + 1 ; // \u63a5\u7740\u901a\u8fc7 let x = \u521b\u5efa\u4e86\u4e00\u4e2a\u65b0\u53d8\u91cf x\uff0c\u83b7\u53d6\u521d\u59cb\u503c\u5e76\u52a0 1\uff0c\u8fd9\u6837 x \u7684\u503c\u5c31\u53d8\u6210 6 \u4e86 { // \u7136\u540e\uff0c\u5728\u4f7f\u7528\u82b1\u62ec\u53f7\u521b\u5efa\u7684\u5185\u90e8\u4f5c\u7528\u57df\u5185 let x = x * 2 ; // \u7b2c\u4e09\u4e2a let \u8bed\u53e5\u4e5f\u9690\u85cf\u4e86 x \u5e76\u521b\u5efa\u4e86\u4e00\u4e2a\u65b0\u7684\u53d8\u91cf\uff0c\u5c06\u4e4b\u524d\u7684\u503c\u4e58\u4ee5 2\uff0cx \u5f97\u5230\u7684\u503c\u662f 12 println! ( \"The value of x in the inner scope is: {x}\" ); } // \u5f53\u8be5\u4f5c\u7528\u57df\u7ed3\u675f\u65f6\uff0c\u5185\u90e8 shadowing \u7684\u4f5c\u7528\u57df\u4e5f\u7ed3\u675f\u4e86\uff0cx \u53c8\u8fd4\u56de\u5230 6 println! ( \"The value of x is: {x}\" ); } \u9690\u85cf\u4e0e\u5c06\u53d8\u91cf\u6807\u8bb0\u4e3a mut \u662f\u6709\u533a\u522b\u7684\u3002\u5f53\u4e0d\u5c0f\u5fc3\u5c1d\u8bd5\u5bf9\u53d8\u91cf\u91cd\u65b0\u8d4b\u503c\u65f6\uff0c\u5982\u679c\u6ca1\u6709\u4f7f\u7528 let \u5173\u952e\u5b57\uff0c\u5c31\u4f1a\u5bfc\u81f4\u7f16\u8bd1\u65f6\u9519\u8bef\u3002 \u901a\u8fc7\u4f7f\u7528 let\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u8fd9\u4e2a\u503c\u8fdb\u884c\u4e00\u4e9b\u8ba1\u7b97\uff0c\u4e0d\u8fc7\u8ba1\u7b97\u5b8c\u4e4b\u540e\u53d8\u91cf\u4ecd\u7136\u662f\u4e0d\u53ef\u53d8\u7684\u3002 mut \u4e0e\u9690\u85cf\u7684\u53e6\u4e00\u4e2a\u533a\u522b\u662f\uff0c\u5f53\u518d\u6b21\u4f7f\u7528 let \u65f6\uff0c\u5b9e\u9645\u4e0a\u521b\u5efa\u4e86\u4e00\u4e2a\u65b0\u53d8\u91cf\uff0c\u6211\u4eec\u53ef\u4ee5\u6539\u53d8\u503c\u7684\u7c7b\u578b\uff0c\u5e76\u4e14\u590d\u7528\u8fd9\u4e2a\u540d\u5b57\u3002 \u4f8b\u5982\uff0c\u5047\u8bbe\u7a0b\u5e8f\u8bf7\u6c42\u7528\u6237\u8f93\u5165\u7a7a\u683c\u5b57\u7b26\u6765\u8bf4\u660e\u5e0c\u671b\u5728\u6587\u672c\u4e4b\u95f4\u663e\u793a\u591a\u5c11\u4e2a\u7a7a\u683c\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u60f3\u5c06\u8f93\u5165\u5b58\u50a8\u6210\u6570\u5b57\uff08\u591a\u5c11\u4e2a\u7a7a\u683c\uff09\uff1a let spaces = \" \" ; // \u7b2c\u4e00\u4e2a spaces \u53d8\u91cf\u662f\u5b57\u7b26\u4e32\u7c7b\u578b let spaces = spaces . len (); // \u7b2c\u4e8c\u4e2a spaces \u53d8\u91cf\u662f\u6570\u5b57\u7c7b\u578b \u9690\u85cf\u4f7f\u6211\u4eec\u4e0d\u5fc5\u4f7f\u7528\u4e0d\u540c\u7684\u540d\u5b57\uff0c\u5982 spaces_str \u548c spaces_num\uff1b \u76f8\u53cd\uff0c\u6211\u4eec\u53ef\u4ee5\u590d\u7528 spaces \u8fd9\u4e2a\u66f4\u7b80\u5355\u7684\u540d\u5b57\u3002\u7136\u800c\uff0c\u5982\u679c\u5c1d\u8bd5\u4f7f\u7528 mut \uff0c\u5c06\u4f1a\u5f97\u5230\u4e00\u4e2a\u7f16\u8bd1\u65f6\u9519\u8bef\uff0c\u5982\u4e0b\u6240\u793a\uff1a let mut spaces = \" \" ; // string\u7c7b\u578b spaces = spaces . len (); // int \u7c7b\u578b \u9519\u8bef\u63d0\u793a: $ cargo run Compiling variables v0 . 1.0 ( file : ///projects/variables) error [ E0308 ] : mismatched types - -> src / main . rs : 3 : 14 | 2 | let mut spaces = \" \" ; | ----- expected due to this value 3 | spaces = spaces . len (); | ^^^^^^^^^^^^ expected ` & str ` , found ` usize ` For more information about this error , try ` rustc -- explain E0308 ` . error : could not compile ` variables ` due to previous error \u4e0d\u80fd\u6539\u53d8\u53d8\u91cf\u7684\u7c7b\u578b \u6570\u636e\u7c7b\u578b \u5728 Rust \u4e2d\uff0c\u6bcf\u4e00\u4e2a\u503c\u90fd\u5c5e\u4e8e\u67d0\u4e00\u4e2a \u6570\u636e\u7c7b\u578b\uff08data type\uff09\uff0c\u8fd9\u544a\u8bc9 Rust \u5b83\u88ab\u6307\u5b9a\u4e3a\u4f55\u79cd\u6570\u636e\uff0c\u4ee5\u4fbf\u660e\u786e\u6570\u636e\u5904\u7406\u65b9\u5f0f\u3002 \u6211\u4eec\u5c06\u770b\u5230\u4e24\u7c7b\u6570\u636e\u7c7b\u578b\u5b50\u96c6\uff1a \u6807\u91cf \uff08scalar\uff09\u548c \u590d\u5408 \uff08compound\uff09\u3002 Rust \u662f \u9759\u6001\u7c7b\u578b\uff08statically typed\uff09\u8bed\u8a00\uff0c\u4e5f\u5c31\u662f\u8bf4\u5728\u7f16\u8bd1\u65f6\u5c31\u5fc5\u987b\u77e5\u9053\u6240\u6709\u53d8\u91cf\u7684\u7c7b\u578b\u3002 \u4f7f\u7528 parse \u5c06 String \u8f6c\u6362\u4e3a\u6570\u5b57\u65f6\uff0c\u5fc5\u987b\u589e\u52a0\u7c7b\u578b\u6ce8\u89e3\uff0c\u50cf\u8fd9\u6837\uff1a let guess : u32 = \"42\" . parse (). expect ( \"Not a number!\" ); \u5982\u679c\u4e0d\u50cf\u4e0a\u9762\u8fd9\u6837\u6dfb\u52a0\u7c7b\u578b\u6ce8\u89e3 : u32\uff0cRust \u4f1a\u663e\u793a\u5982\u4e0b\u9519\u8bef\uff0c\u8fd9\u8bf4\u660e\u7f16\u8bd1\u5668\u9700\u8981\u6211\u4eec\u63d0\u4f9b\u66f4\u591a\u4fe1\u606f\uff0c\u6765\u4e86\u89e3\u6211\u4eec\u60f3\u8981\u7684\u7c7b\u578b\uff1a $ cargo build Compiling no_type_annotations v0.1.0 ( file:///projects/no_type_annotations ) error [ E0282 ] : type annotations needed --> src/main.rs:2:9 | 2 | let guess = \"42\" .parse () .expect ( \"Not a number!\" ) ; | ^^^^^ consider giving ` guess ` a type For more information about this error, try ` rustc --explain E0282 ` . error: could not compile ` no_type_annotations ` due to previous error \u6807\u91cf\u7c7b\u578b \u6807\u91cf \uff08scalar\uff09\u7c7b\u578b\u4ee3\u8868\u4e00\u4e2a\u5355\u72ec\u7684\u503c\u3002Rust \u6709\u56db\u79cd\u57fa\u672c\u7684\u6807\u91cf\u7c7b\u578b\uff1a \u6574\u578b \u3001 \u6d6e\u70b9\u578b \u3001 \u5e03\u5c14\u7c7b\u578b \u548c \u5b57\u7b26\u7c7b\u578b \u3002 \u6574\u578b \u6574\u6570 \u662f\u4e00\u4e2a\u6ca1\u6709\u5c0f\u6570\u90e8\u5206\u7684\u6570\u5b57\u3002 \u957f\u5ea6 \u6709\u7b26\u53f7 \u65e0\u7b26\u53f7 8-bit i8 u8 16-bit i16 u16 32-bit i32 u32 64-bit i64 u64 128-bit i128 u128 arch isize usize isize \u548c usize \u7c7b\u578b\u4f9d\u8d56\u8fd0\u884c\u7a0b\u5e8f\u7684\u8ba1\u7b97\u673a\u67b6\u6784\uff1a64 \u4f4d\u67b6\u6784\u4e0a\u5b83\u4eec\u662f 64 \u4f4d\u7684\uff0c 32 \u4f4d\u67b6\u6784\u4e0a\u5b83\u4eec\u662f 32 \u4f4d\u7684\u3002 \u53ef\u4ee5\u4f7f\u7528\u4e0b\u9762\u8868\u683c\u4e2d\u7684\u4efb\u4f55\u4e00\u79cd\u5f62\u5f0f\u7f16\u5199\u6570\u5b57\u5b57\u9762\u503c\u3002 \u8bf7\u6ce8\u610f\u53ef\u4ee5\u662f\u591a\u79cd\u6570\u5b57\u7c7b\u578b\u7684\u6570\u5b57\u5b57\u9762\u503c\u5141\u8bb8\u4f7f\u7528\u7c7b\u578b\u540e\u7f00\uff0c\u4f8b\u5982 57u8 \u6765\u6307\u5b9a\u7c7b\u578b\uff0c\u540c\u65f6\u4e5f\u5141\u8bb8\u4f7f\u7528 _ \u505a\u4e3a\u5206\u9694\u7b26\u4ee5\u65b9\u4fbf\u8bfb\u6570\uff0c\u4f8b\u5982 1_000 \uff0c\u5b83\u7684\u503c\u4e0e\u4f60\u6307\u5b9a\u7684 1000 \u76f8\u540c\u3002 \u6570\u5b57\u5b57\u9762\u503c \u4f8b\u5b50 Decimal (\u5341\u8fdb\u5236) 98_222 Hex (\u5341\u516d\u8fdb\u5236) 0xff Octal (\u516b\u8fdb\u5236) 0o77 Binary (\u4e8c\u8fdb\u5236) 0b1111_0000 Byte (\u5355\u5b57\u8282\u5b57\u7b26)(\u4ec5\u9650\u4e8eu8) b'A' Rust \u7684\u9ed8\u8ba4\u7c7b\u578b\u901a\u5e38\u662f\u4e2a\u4e0d\u9519\u7684\u8d77\u70b9\uff0c\u6570\u5b57\u7c7b\u578b\u9ed8\u8ba4\u662f i32 \u3002 isize \u6216 usize \u4e3b\u8981\u4f5c\u4e3a\u67d0\u4e9b\u96c6\u5408\u7684\u7d22\u5f15\u3002 \u5176\u4ed6 \u53c2\u8003: \u6574\u5f62\u6ea2\u51fa \u6d6e\u70b9\u578b Rust \u4e5f\u6709\u4e24\u4e2a\u539f\u751f\u7684 \u6d6e\u70b9\u6570\uff08floating-point numbers\uff09\u7c7b\u578b\uff0c\u5b83\u4eec\u662f\u5e26\u5c0f\u6570\u70b9\u7684\u6570\u5b57\u3002Rust \u7684\u6d6e\u70b9\u6570\u7c7b\u578b\u662f f32 \u548c f64\uff0c\u5206\u522b\u5360 32 \u4f4d\u548c 64 \u4f4d\u3002\u9ed8\u8ba4\u7c7b\u578b\u662f f64\uff0c\u56e0\u4e3a\u5728\u73b0\u4ee3 CPU \u4e2d\uff0c\u5b83\u4e0e f32 \u901f\u5ea6\u51e0\u4e4e\u4e00\u6837\uff0c\u4e0d\u8fc7\u7cbe\u5ea6\u66f4\u9ad8\u3002\u6240\u6709\u7684\u6d6e\u70b9\u578b\u90fd\u662f\u6709\u7b26\u53f7\u7684\u3002 \u8fd9\u662f\u4e00\u4e2a\u5c55\u793a\u6d6e\u70b9\u6570\u7684\u5b9e\u4f8b\uff1a \u6587\u4ef6\u540d: src/main.rs fn main () { let x = 2.0 ; // f64 let y : f32 = 3.0 ; // f32 } \u6d6e\u70b9\u6570\u91c7\u7528 IEEE-754 \u6807\u51c6\u8868\u793a\u3002f32 \u662f\u5355\u7cbe\u5ea6\u6d6e\u70b9\u6570\uff0cf64 \u662f\u53cc\u7cbe\u5ea6\u6d6e\u70b9\u6570\u3002 \u6570\u503c\u8fd0\u7b97 Rust \u4e2d\u7684\u6240\u6709\u6570\u5b57\u7c7b\u578b\u90fd\u652f\u6301\u57fa\u672c\u6570\u5b66\u8fd0\u7b97\uff1a\u52a0\u6cd5\u3001\u51cf\u6cd5\u3001\u4e58\u6cd5\u3001\u9664\u6cd5\u548c\u53d6\u4f59\u3002\u6574\u6570\u9664\u6cd5\u4f1a\u5411\u4e0b\u820d\u5165\u5230\u6700\u63a5\u8fd1\u7684\u6574\u6570\u3002\u4e0b\u9762\u7684\u4ee3\u7801\u5c55\u793a\u4e86\u5982\u4f55\u5728 let \u8bed\u53e5\u4e2d\u4f7f\u7528\u5b83\u4eec\uff1a \u6587\u4ef6\u540d: src/main.rs fn main () { // \u52a0\u6cd5 let sum = 5 + 10 ; // \u51cf\u6cd5 let difference = 95.5 - 4.3 ; // \u4e58\u6cd5 let product = 4 * 30 ; // \u9664\u6cd5 let quotient = 56.7 / 32.2 ; let floored = 2 / 3 ; // \u7ed3\u679c\u4e3a0 // \u53d6\u4f59 let remainder = 43 % 5 ; } \u8fd9\u4e9b\u8bed\u53e5\u4e2d\u7684\u6bcf\u4e2a\u8868\u8fbe\u5f0f\u4f7f\u7528\u4e86\u4e00\u4e2a\u6570\u5b66\u8fd0\u7b97\u7b26\u5e76\u8ba1\u7b97\u51fa\u4e86\u4e00\u4e2a\u503c\uff0c\u7136\u540e\u7ed1\u5b9a\u7ed9\u4e00\u4e2a\u53d8\u91cf\u3002 \u9644\u5f55 B \u5305\u542b Rust \u63d0\u4f9b\u7684\u6240\u6709\u8fd0\u7b97\u7b26\u7684\u5217\u8868\u3002 \u5e03\u5c14\u578b \u6b63\u5982\u5176\u4ed6\u5927\u90e8\u5206\u7f16\u7a0b\u8bed\u8a00\u4e00\u6837\uff0cRust \u4e2d\u7684\u5e03\u5c14\u7c7b\u578b\u6709\u4e24\u4e2a\u53ef\u80fd\u7684\u503c\uff1atrue \u548c false\u3002Rust \u4e2d\u7684\u5e03\u5c14\u7c7b\u578b\u4f7f\u7528 bool \u8868\u793a\u3002\u4f8b\u5982\uff1a fn main () { let t = true ; let f : bool = false ; // with explicit type annotation } \u5b57\u7b26\u7c7b\u578b Rust\u7684 char \u7c7b\u578b\u662f\u8bed\u8a00\u4e2d\u6700\u539f\u751f\u7684\u5b57\u6bcd\u7c7b\u578b\u3002\u4e0b\u9762\u662f\u4e00\u4e9b\u58f0\u660e char \u503c\u7684\u4f8b\u5b50\uff1a \u6587\u4ef6\u540d: src/main.rs fn main () { let c = 'z' ; let z : char = '\u2124' ; // with explicit type annotation let heart_eyed_cat = '\ud83d\ude3b' ; } \u6ce8\u610f\uff0c\u8fd9\u91cc\u7528\u5355\u5f15\u53f7\u58f0\u660e char \u5b57\u9762\u91cf\uff0c\u800c\u4e0e\u4e4b\u76f8\u53cd\u7684\u662f\uff0c\u4f7f\u7528 \u53cc\u5f15\u53f7 \u58f0\u660e\u5b57\u7b26\u4e32\u5b57\u9762\u91cf\u3002Rust \u7684 char \u7c7b\u578b\u7684\u5927\u5c0f\u4e3a\u56db\u4e2a\u5b57\u8282(four bytes)\uff0c\u5e76\u4ee3\u8868\u4e86\u4e00\u4e2a Unicode \u6807\u91cf\u503c\uff08Unicode Scalar Value\uff09\uff0c\u8fd9\u610f\u5473\u7740\u5b83\u53ef\u4ee5\u6bd4 ASCII \u8868\u793a\u66f4\u591a\u5185\u5bb9\u3002 \u5728 Rust \u4e2d\uff0c\u5e26\u53d8\u97f3\u7b26\u53f7\u7684\u5b57\u6bcd\uff08Accented letters\uff09\uff0c\u4e2d\u6587\u3001\u65e5\u6587\u3001\u97e9\u6587\u7b49\u5b57\u7b26\uff0cemoji\uff08\u7ed8\u6587\u5b57\uff09\u4ee5\u53ca\u96f6\u957f\u5ea6\u7684\u7a7a\u767d\u5b57\u7b26\u90fd\u662f\u6709\u6548\u7684 char \u503c\u3002 Unicode \u6807\u91cf\u503c\u5305\u542b\u4ece U+0000 \u5230 U+D7FF \u548c U+E000 \u5230 U+10FFFF \u5728\u5185\u7684\u503c \u3002 \u4e0d\u8fc7\uff0c\u201c\u5b57\u7b26\u201d \u5e76\u4e0d\u662f\u4e00\u4e2a Unicode \u4e2d\u7684\u6982\u5ff5\uff0c\u6240\u4ee5\u4eba\u76f4\u89c9\u4e0a\u7684 \u201c\u5b57\u7b26\u201d \u53ef\u80fd\u4e0e Rust \u4e2d\u7684 char \u5e76\u4e0d\u7b26\u5408\u3002 \u7b2c\u516b\u7ae0\u7684 \u201c \u4f7f\u7528\u5b57\u7b26\u4e32\u5b58\u50a8 UTF-8 \u7f16\u7801\u7684\u6587\u672c \u201d \u4e2d\u5c06\u8be6\u7ec6\u8ba8\u8bba\u8fd9\u4e2a\u4e3b\u9898\u3002 \u590d\u5408\u7c7b\u578b \u590d\u5408\u7c7b\u578b \uff08Compound types\uff09\u53ef\u4ee5\u5c06\u591a\u4e2a\u503c\u7ec4\u5408\u6210\u4e00\u4e2a\u7c7b\u578b\u3002Rust \u6709\u4e24\u4e2a\u539f\u751f\u7684\u590d\u5408\u7c7b\u578b\uff1a \u5143\u7ec4 \uff08tuple\uff09\u548c \u6570\u7ec4 \uff08array\uff09\u3002 \u5143\u7ec4\u7c7b\u578b \u5143\u7ec4\u662f\u4e00\u4e2a\u5c06\u591a\u4e2a\u5176\u4ed6\u7c7b\u578b\u7684\u503c\u7ec4\u5408\u8fdb\u4e00\u4e2a\u590d\u5408\u7c7b\u578b\u7684\u4e3b\u8981\u65b9\u5f0f\u3002 \u5143\u7ec4\u957f\u5ea6\u56fa\u5b9a\uff1a\u4e00\u65e6\u58f0\u660e\uff0c\u5176\u957f\u5ea6\u4e0d\u4f1a\u589e\u5927\u6216\u7f29\u5c0f\u3002 \u4f7f\u7528\u5305\u542b\u5728\u5706\u62ec\u53f7\u4e2d\u7684\u9017\u53f7\u5206\u9694\u7684\u503c\u5217\u8868\u6765\u521b\u5efa\u4e00\u4e2a\u5143\u7ec4\u3002 \u5143\u7ec4\u4e2d\u7684\u6bcf\u4e00\u4e2a\u4f4d\u7f6e\u90fd\u6709\u4e00\u4e2a\u7c7b\u578b\uff0c\u800c\u4e14\u8fd9\u4e9b\u4e0d\u540c\u503c\u7684\u7c7b\u578b\u4e5f\u4e0d\u5fc5\u662f\u76f8\u540c\u7684\u3002\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\u4f7f\u7528\u4e86\u53ef\u9009\u7684\u7c7b\u578b\u6ce8\u89e3\uff1a fn main () { let tup : ( i32 , f64 , u8 ) = ( 500 , 6.4 , 1 ); } tup \u53d8\u91cf\u7ed1\u5b9a\u5230\u6574\u4e2a\u5143\u7ec4\u4e0a\uff0c\u56e0\u4e3a\u5143\u7ec4\u662f\u4e00\u4e2a\u5355\u72ec\u7684\u590d\u5408\u5143\u7d20\u3002 \u4e3a\u4e86\u4ece\u5143\u7ec4\u4e2d\u83b7\u53d6\u5355\u4e2a\u503c\uff0c\u53ef\u4ee5\u4f7f\u7528 \u6a21\u5f0f\u5339\u914d \uff08pattern matching\uff09\u6765 \u89e3\u6784 \uff08destructure\uff09\u5143\u7ec4\u503c\uff0c\u50cf\u8fd9\u6837\uff1a fn main () { let tup = ( 500 , 6.4 , 1 ); // \u7a0b\u5e8f\u9996\u5148\u521b\u5efa\u4e86\u4e00\u4e2a\u5143\u7ec4\u5e76\u7ed1\u5b9a\u5230 tup \u53d8\u91cf\u4e0a let ( x , y , z ) = tup ; // \u63a5\u7740\u4f7f\u7528\u4e86 let \u548c\u4e00\u4e2a\u6a21\u5f0f\u5c06 tup \u5206\u6210\u4e86\u4e09\u4e2a\u4e0d\u540c\u7684\u53d8\u91cf\uff0cx\u3001y \u548c z\u3002 // \u8fd9\u53eb\u505a \u89e3\u6784\uff08destructuring\uff09\u56e0\u4e3a\u5b83\u5c06\u4e00\u4e2a\u5143\u7ec4\u62c6\u6210\u4e86\u4e09\u4e2a\u90e8\u5206\u3002 println! ( \"The value of y is: {y}\" ); // \u6700\u540e\uff0c\u7a0b\u5e8f\u6253\u5370\u51fa\u4e86 y \u7684\u503c\uff0c\u4e5f\u5c31\u662f 6.4\u3002 } \u4e5f\u53ef\u4ee5\u4f7f\u7528\u70b9\u53f7\uff08.\uff09\u540e\u8ddf\u503c\u7684\u7d22\u5f15\u6765\u76f4\u63a5\u8bbf\u95ee\u5b83\u4eec\u3002\u4f8b\u5982\uff1a \u6587\u4ef6\u540d: src/main.rs fn main () { let x : ( i32 , f64 , u8 ) = ( 500 , 6.4 , 1 ); let five_hundred = x . 0 ; let six_point_four = x . 1 ; let one = x . 2 ; } \u4e0d\u5e26\u4efb\u4f55\u503c\u7684\u5143\u7ec4\u6709\u4e2a\u7279\u6b8a\u7684\u540d\u79f0\uff0c\u53eb\u505a \u5355\u5143 \uff08unit\uff09 \u5143\u7ec4\u3002\u8fd9\u79cd\u503c\u4ee5\u53ca\u5bf9\u5e94\u7684\u7c7b\u578b\u90fd\u5199\u4f5c () \uff0c \u8868\u793a\u7a7a\u503c\u6216\u7a7a\u7684\u8fd4\u56de\u7c7b\u578b \u3002\u5982\u679c\u8868\u8fbe\u5f0f\u4e0d\u8fd4\u56de\u4efb\u4f55\u5176\u4ed6\u503c\uff0c\u5219\u4f1a\u9690\u5f0f\u8fd4\u56de\u5355\u5143\u503c\u3002 \u6570\u7ec4\u7c7b\u578b \u53e6\u4e00\u4e2a\u5305\u542b\u591a\u4e2a\u503c\u7684\u65b9\u5f0f\u662f \u6570\u7ec4 \uff08array\uff09\u3002\u4e0e\u5143\u7ec4\u4e0d\u540c\uff0c \u6570\u7ec4\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u7684\u7c7b\u578b\u5fc5\u987b\u76f8\u540c \u3002Rust \u4e2d\u7684\u6570\u7ec4\u4e0e\u4e00\u4e9b\u5176\u4ed6\u8bed\u8a00\u4e2d\u7684\u6570\u7ec4\u4e0d\u540c\uff0c Rust\u4e2d\u7684\u6570\u7ec4\u957f\u5ea6\u662f\u56fa\u5b9a\u7684 \u3002 \u5c06\u6570\u7ec4\u7684\u503c\u5199\u6210\u5728\u65b9\u62ec\u53f7\u5185\uff0c\u7528\u9017\u53f7\u5206\u9694\uff1a fn main () { let a = [ 1 , 2 , 3 , 4 , 5 ]; } \u5f53\u4f60\u60f3\u8981\u5728 \u6808 \uff08stack\uff09\u800c\u4e0d\u662f\u5728 \u5806 \uff08heap\uff09\u4e0a\u4e3a\u6570\u636e\u5206\u914d\u7a7a\u95f4\uff0c\u6216\u8005\u662f\u60f3\u8981\u786e\u4fdd\u603b\u662f\u6709\u56fa\u5b9a\u6570\u91cf\u7684\u5143\u7d20\u65f6\uff0c\u6570\u7ec4\u975e\u5e38\u6709\u7528\u3002 \u4f46\u662f\u6570\u7ec4\u5e76\u4e0d\u5982 vector \u7c7b\u578b\u7075\u6d3b\u3002 vector \u7c7b\u578b\u662f\u6807\u51c6\u5e93\u63d0\u4f9b\u7684\u4e00\u4e2a \u5141\u8bb8 \u589e\u957f\u548c\u7f29\u5c0f\u957f\u5ea6\u7684\u7c7b\u4f3c\u6570\u7ec4\u7684\u96c6\u5408\u7c7b\u578b\u3002 \u5f53\u4e0d\u786e\u5b9a\u662f\u5e94\u8be5\u4f7f\u7528\u6570\u7ec4\u8fd8\u662f vector \u7684\u65f6\u5019\uff0c\u90a3\u4e48\u5f88\u53ef\u80fd\u5e94\u8be5\u4f7f\u7528 vector \u3002 \u7b2c\u516b\u7ae0 \u4f1a\u8be6\u7ec6\u8ba8\u8bba vector \u3002 \u7136\u800c\uff0c\u5f53\u4f60\u786e\u5b9a\u5143\u7d20\u4e2a\u6570\u4e0d\u4f1a\u6539\u53d8\u65f6\uff0c\u6570\u7ec4\u4f1a\u66f4\u6709\u7528\u3002\u4f8b\u5982\uff0c\u5f53\u4f60\u5728\u4e00\u4e2a\u7a0b\u5e8f\u4e2d\u4f7f\u7528\u6708\u4efd\u540d\u5b57\u65f6\uff0c\u4f60\u66f4\u5e94\u8d8b\u5411\u4e8e\u4f7f\u7528\u6570\u7ec4\u800c\u4e0d\u662f vector\uff0c\u56e0\u4e3a\u4f60\u786e\u5b9a\u53ea\u4f1a\u670912\u4e2a\u5143\u7d20\u3002 let months = [ \"January\" , \"February\" , \"March\" , \"April\" , \"May\" , \"June\" , \"July\" , \"August\" , \"September\" , \"October\" , \"November\" , \"December\" ]; \u53ef\u4ee5\u50cf\u8fd9\u6837\u7f16\u5199\u6570\u7ec4\u7684\u7c7b\u578b\uff1a\u5728\u65b9\u62ec\u53f7\u4e2d\u5305\u542b\u6bcf\u4e2a\u5143\u7d20\u7684\u7c7b\u578b\uff0c\u540e\u8ddf\u5206\u53f7\uff0c\u518d\u540e\u8ddf\u6570\u7ec4\u5143\u7d20\u7684\u6570\u91cf\u3002 let a : [ i32 ; 5 ] = [ 1 , 2 , 3 , 4 , 5 ]; // i32 \u662f\u6bcf\u4e2a\u5143\u7d20\u7684\u7c7b\u578b\u3002\u5206\u53f7\u4e4b\u540e\uff0c\u6570\u5b57 5 \u8868\u660e\u8be5\u6570\u7ec4\u5305\u542b\u4e94\u4e2a\u5143\u7d20\u3002 let a = [ 3 ; 5 ]; // \u901a\u8fc7\u5728\u65b9\u62ec\u53f7\u4e2d\u6307\u5b9a\u521d\u59cb\u503c\u52a0\u5206\u53f7\u518d\u52a0\u5143\u7d20\u4e2a\u6570\u7684\u65b9\u5f0f\u6765\u521b\u5efa\u4e00\u4e2a\u6bcf\u4e2a\u5143\u7d20\u90fd\u4e3a\u76f8\u540c\u503c\u7684\u6570\u7ec4\uff1a // \u53d8\u91cf\u540d\u4e3a a \u7684\u6570\u7ec4\u5c06\u5305\u542b 5 \u4e2a\u5143\u7d20\uff0c\u8fd9\u4e9b\u5143\u7d20\u7684\u503c\u6700\u521d\u90fd\u5c06\u88ab\u8bbe\u7f6e\u4e3a 3\u3002 // \u8fd9\u79cd\u5199\u6cd5\u4e0e let a = [3, 3, 3, 3, 3]; \u6548\u679c\u76f8\u540c\uff0c\u4f46\u66f4\u7b80\u6d01\u3002 \u8bbf\u95ee\u6570\u7ec4\u5143\u7d20 \u6570\u7ec4\u662f\u53ef\u4ee5\u5728\u6808(stack)\u4e0a\u5206\u914d\u7684\u5df2\u77e5\u56fa\u5b9a\u5927\u5c0f\u7684\u5355\u4e2a\u5185\u5b58\u5757\u3002\u53ef\u4ee5\u4f7f\u7528\u7d22\u5f15\u6765\u8bbf\u95ee\u6570\u7ec4\u7684\u5143\u7d20\uff0c\u50cf\u8fd9\u6837\uff1a fn main () { let a = [ 1 , 2 , 3 , 4 , 5 ]; let first = a [ 0 ]; let second = a [ 1 ]; } \u6570\u7ec4\u8d8a\u754c\u8bbf\u95ee \u8ba9\u6211\u4eec\u770b\u770b\u5982\u679c\u6211\u4eec\u8bbf\u95ee\u6570\u7ec4\u7ed3\u5c3e\u4e4b\u540e\u7684\u5143\u7d20\u4f1a\u53d1\u751f\u4ec0\u4e48\u5462\uff1f\u6bd4\u5982\u4f60\u6267\u884c\u4ee5\u4e0b\u4ee3\u7801\uff0c\u5b83\u4f7f\u7528\u7c7b\u4f3c\u4e8e\u7b2c 2 \u7ae0\u4e2d\u7684\u731c\u6570\u5b57\u6e38\u620f\u7684\u4ee3\u7801\u4ece\u7528\u6237\u90a3\u91cc\u83b7\u53d6\u6570\u7ec4\u7d22\u5f15\uff1a use std :: io ; fn main () { let a = [ 1 , 2 , 3 , 4 , 5 ]; println! ( \"\u8bf7\u8f93\u5165\u6570\u7ec4\u7d22\u5f15\" ); let mut index = String :: new (); io :: stdin () . read_line ( & mut index ) . expect ( \"\u8bfb\u53d6\u6570\u636e\u5931\u8d25\" ); let index : usize = index . trim () . parse () . expect ( \"\u8bf7\u8f93\u5165\u6570\u5b57\" ); let element = a [ index ]; println! ( \"\u6570\u7ec4\u4e2d\u7d22\u5f15\u4e3a {index} \u7684\u503c\u65f6: {element}\" ); } \u6b64\u4ee3\u7801\u7f16\u8bd1\u6210\u529f\u3002\u5982\u679c\u60a8\u4f7f\u7528 cargo run \u8fd0\u884c\u6b64\u4ee3\u7801\u5e76\u8f93\u5165 0\u30011\u30012\u30013 \u6216 4\uff0c\u7a0b\u5e8f\u5c06\u5728\u6570\u7ec4\u4e2d\u7684\u7d22\u5f15\u5904\u6253\u5370\u51fa\u76f8\u5e94\u7684\u503c\u3002\u5982\u679c\u4f60\u8f93\u5165\u4e00\u4e2a\u8d85\u8fc7\u6570\u7ec4\u672b\u7aef\u7684\u6570\u5b57\uff0c\u5982 10\uff0c\u4f60\u4f1a\u770b\u5230\u8fd9\u6837\u7684\u8f93\u51fa\uff1a thread 'main' panicked at 'index out of bounds: the len is 5 but the index is 10' , src/main.rs:19:19 note: run with ` RUST_BACKTRACE = 1 ` environment variable to display a backtrace \u7a0b\u5e8f\u5728\u7d22\u5f15\u64cd\u4f5c\u4e2d\u4f7f\u7528\u4e00\u4e2a\u65e0\u6548\u7684\u503c\u65f6\u5bfc\u81f4 \u8fd0\u884c\u65f6 \u9519\u8bef\u3002 \u7a0b\u5e8f\u5e26\u7740\u9519\u8bef\u4fe1\u606f\u9000\u51fa\uff0c\u5e76\u4e14\u6ca1\u6709\u6267\u884c\u6700\u540e\u7684 println! \u8bed\u53e5\u3002 \u5f53\u5c1d\u8bd5\u7528\u7d22\u5f15\u8bbf\u95ee\u4e00\u4e2a\u5143\u7d20\u65f6\uff0cRust \u4f1a\u68c0\u67e5\u6307\u5b9a\u7684\u7d22\u5f15\u662f\u5426\u5c0f\u4e8e\u6570\u7ec4\u7684\u957f\u5ea6\u3002 \u5982\u679c\u7d22\u5f15\u8d85\u51fa\u4e86\u6570\u7ec4\u957f\u5ea6\uff0cRust \u4f1a panic\uff0c\u8fd9\u662f Rust \u672f\u8bed\uff0c \u5b83\u7528\u4e8e\u7a0b\u5e8f\u56e0\u4e3a\u9519\u8bef\u800c\u9000\u51fa\u7684\u60c5\u51b5 \u3002 \u8fd9\u79cd\u68c0\u67e5\u5fc5\u987b\u5728\u8fd0\u884c\u65f6\u8fdb\u884c\uff0c\u7279\u522b\u662f\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u56e0\u4e3a\u7f16\u8bd1\u5668\u4e0d\u53ef\u80fd\u77e5\u9053\u7528\u6237\u5728\u4ee5\u540e\u8fd0\u884c\u4ee3\u7801\u65f6\u5c06\u8f93\u5165\u4ec0\u4e48\u503c\u3002 \u8fd9\u662f\u7b2c\u4e00\u4e2a\u5728\u5b9e\u6218\u4e2d\u9047\u5230\u7684 Rust \u5b89\u5168\u539f\u5219\u7684\u4f8b\u5b50\u3002 \u5728\u5f88\u591a\u5e95\u5c42\u8bed\u8a00\u4e2d\uff0c\u5e76\u6ca1\u6709\u8fdb\u884c\u8fd9\u7c7b\u68c0\u67e5\uff0c\u8fd9\u6837\u5f53\u63d0\u4f9b\u4e86\u4e00\u4e2a\u4e0d\u6b63\u786e\u7684\u7d22\u5f15\u65f6\uff0c\u5c31\u4f1a\u8bbf\u95ee\u65e0\u6548\u7684\u5185\u5b58\u3002 \u901a\u8fc7\u7acb\u5373\u9000\u51fa\u800c\u4e0d\u662f\u5141\u8bb8\u5185\u5b58\u8bbf\u95ee\u5e76\u7ee7\u7eed\u6267\u884c\uff0cRust \u8ba9\u4f60\u907f\u5f00\u6b64\u7c7b\u9519\u8bef\u3002 \u7b2c\u4e5d\u7ae0 \u4f1a\u66f4\u8be6\u7ec6\u5730\u8ba8\u8bba Rust \u7684\u9519\u8bef\u5904\u7406\u673a\u5236\uff0c\u4ee5\u53ca\u5982\u4f55\u7f16\u5199\u53ef\u8bfb\u6027\u5f3a\u800c\u53c8\u5b89\u5168\u7684\u4ee3\u7801\uff0c\u4f7f\u7a0b\u5e8f\u65e2\u4e0d\u4f1a panic \u4e5f\u4e0d\u4f1a\u5bfc\u81f4\u975e\u6cd5\u5185\u5b58\u8bbf\u95ee\u3002 \u51fd\u6570 \u51fd\u6570\u5728 Rust \u4ee3\u7801\u4e2d\u975e\u5e38\u666e\u904d\u3002\u4f60\u5df2\u7ecf\u89c1\u8fc7\u8bed\u8a00\u4e2d\u6700\u91cd\u8981\u7684\u51fd\u6570\u4e4b\u4e00\uff1a main \u51fd\u6570\uff0c\u5b83\u662f\u5f88\u591a\u7a0b\u5e8f\u7684\u5165\u53e3\u70b9\u3002\u4f60\u4e5f\u89c1\u8fc7 fn \u5173\u952e\u5b57\uff0c\u5b83\u7528\u6765\u58f0\u660e\u65b0\u51fd\u6570\u3002 Rust \u4ee3\u7801\u4e2d\u7684\u51fd\u6570\u548c\u53d8\u91cf\u540d\u4f7f\u7528 snake case \u89c4\u8303\u98ce\u683c\u3002\u5728 snake case \u4e2d\uff0c \u6240\u6709\u5b57\u6bcd\u90fd\u662f\u5c0f\u5199\u5e76\u4f7f\u7528\u4e0b\u5212\u7ebf\u5206\u9694\u5355\u8bcd \u3002\u8fd9\u662f\u4e00\u4e2a\u5305\u542b\u51fd\u6570\u5b9a\u4e49\u793a\u4f8b\u7684\u7a0b\u5e8f\uff1a \u6587\u4ef6\u540d: src/main.rs fn main () { println! ( \"Hello, world!\" ); another_function (); } // \u901a\u8fc7\u8f93\u5165 fn \u540e\u9762\u8ddf\u7740\u51fd\u6570\u540d\u548c\u4e00\u5bf9\u5706\u62ec\u53f7\u6765\u5b9a\u4e49\u51fd\u6570\u3002\u5927\u62ec\u53f7\u544a\u8bc9\u7f16\u8bd1\u5668\u54ea\u91cc\u662f\u51fd\u6570\u4f53\u7684\u5f00\u59cb\u548c\u7ed3\u5c3e\u3002 fn another_function () { println! ( \"Another function.\" ); } // main \u51fd\u6570\u4e2d\u7684\u4ee3\u7801\u4f1a\u6309\u987a\u5e8f\u6267\u884c\u3002\u9996\u5148\uff0c\u6253\u5370 \u201cHello, world!\u201d \u4fe1\u606f\uff0c\u7136\u540e\u8c03\u7528 another_function \u51fd\u6570\u5e76\u6253\u5370\u5b83\u7684\u4fe1\u606f\u3002 \u53ef\u4ee5\u4f7f\u7528\u51fd\u6570\u540d\u540e\u8ddf\u5706\u62ec\u53f7\u6765\u8c03\u7528\u6211\u4eec\u5b9a\u4e49\u8fc7\u7684\u4efb\u610f\u51fd\u6570\u3002 \u56e0\u4e3a\u7a0b\u5e8f\u4e2d\u5df2\u5b9a\u4e49 another_function \u51fd\u6570\uff0c\u6240\u4ee5\u53ef\u4ee5\u5728 main \u51fd\u6570\u4e2d\u8c03\u7528\u5b83\u3002\u6ce8\u610f\uff0c \u6e90\u7801\u4e2d another_function \u5b9a\u4e49\u5728 main \u51fd\u6570 \u4e4b\u540e\uff1b\u4e5f\u53ef\u4ee5\u5b9a\u4e49\u5728\u4e4b\u524d \u3002 Rust \u4e0d\u5173\u5fc3\u51fd\u6570\u5b9a\u4e49\u6240\u5728\u7684\u4f4d\u7f6e\uff0c\u53ea\u8981\u51fd\u6570\u88ab\u8c03\u7528\u65f6\u51fa\u73b0\u5728\u8c03\u7528\u4e4b\u5904\u53ef\u89c1\u7684\u4f5c\u7528\u57df\u5185\u5c31\u884c\u3002 \u53c2\u6570 \u6211\u4eec\u53ef\u4ee5\u5b9a\u4e49\u4e3a\u62e5\u6709 \u53c2\u6570 \uff08parameters\uff09\u7684\u51fd\u6570\uff0c\u53c2\u6570\u662f\u7279\u6b8a\u53d8\u91cf\uff0c\u662f\u51fd\u6570\u7b7e\u540d\u7684\u4e00\u90e8\u5206\u3002\u5f53\u51fd\u6570\u62e5\u6709\u53c2\u6570\uff08\u5f62\u53c2\uff09\u65f6\uff0c\u53ef\u4ee5\u4e3a\u8fd9\u4e9b\u53c2\u6570\u63d0\u4f9b\u5177\u4f53\u7684\u503c\uff08\u5b9e\u53c2\uff09\u3002 \u6280\u672f\u4e0a\u8bb2\uff0c\u8fd9\u4e9b\u5177\u4f53\u503c\u88ab\u79f0\u4e3a\u53c2\u6570\uff08arguments\uff09\uff0c\u4f46\u662f\u5728\u65e5\u5e38\u4ea4\u6d41\u4e2d\uff0c\u4eba\u4eec\u503e\u5411\u4e8e\u4e0d\u533a\u5206\u4f7f\u7528 parameter \u548c argument \u6765\u8868\u793a\u51fd\u6570\u5b9a\u4e49\u4e2d\u7684\u53d8\u91cf\u6216\u8c03\u7528\u51fd\u6570\u65f6\u4f20\u5165\u7684\u5177\u4f53\u503c\u3002 \u5728\u8fd9\u7248 another_function \u4e2d\uff0c\u6211\u4eec\u589e\u52a0\u4e86\u4e00\u4e2a\u53c2\u6570\uff1a fn main () { another_function ( 5 ); // \u6211\u4eec\u5c06 5 \u4f20\u7ed9 another_function \u65f6\uff0c // println! \u5b8f\u4f1a\u628a 5 \u653e\u5728\u683c\u5f0f\u5b57\u7b26\u4e32\u4e2d\u5305\u542b x \u7684\u90a3\u5bf9\u82b1\u62ec\u53f7\u7684\u4f4d\u7f6e\u3002 } // another_function \u7684\u58f0\u660e\u4e2d\u6709\u4e00\u4e2a\u547d\u540d\u4e3a x \u7684\u53c2\u6570\u3002 // x \u7684\u7c7b\u578b\u88ab\u6307\u5b9a\u4e3a i32\u3002 fn another_function ( x : i32 ) { println! ( \"The value of x is: {x}\" ); } \u5728\u51fd\u6570\u7b7e\u540d\u4e2d\uff0c \u5fc5\u987b \u58f0\u660e\u6bcf\u4e2a\u53c2\u6570\u7684\u7c7b\u578b\u3002 \u8fd9\u662f Rust \u8bbe\u8ba1\u4e2d\u4e00\u4e2a\u7ecf\u8fc7\u614e\u91cd\u8003\u8651\u7684\u51b3\u5b9a\uff1a \u8981\u6c42\u5728\u51fd\u6570\u5b9a\u4e49\u4e2d\u63d0\u4f9b\u7c7b\u578b\u6ce8\u89e3 \uff0c\u610f\u5473\u7740\u7f16\u8bd1\u5668\u518d\u4e5f\u4e0d\u9700\u8981\u4f60\u5728\u4ee3\u7801\u7684\u5176\u4ed6\u5730\u65b9\u6ce8\u660e\u7c7b\u578b\u6765\u6307\u51fa\u4f60\u7684\u610f\u56fe\u3002 \u800c\u4e14\uff0c\u5728\u77e5\u9053\u51fd\u6570\u9700\u8981\u4ec0\u4e48\u7c7b\u578b\u540e\uff0c\u7f16\u8bd1\u5668\u5c31\u80fd\u591f\u7ed9\u51fa\u66f4\u6709\u7528\u7684\u9519\u8bef\u6d88\u606f\u3002 \u5f53\u5b9a\u4e49\u591a\u4e2a\u53c2\u6570\u65f6\uff0c\u4f7f\u7528\u9017\u53f7\u5206\u9694\uff0c\u50cf\u8fd9\u6837\uff1a fn main () { print_labeled_measurement ( 5 , 'h' ); } // \u5b83\u6709\u4e24\u4e2a\u53c2\u6570\u3002\u7b2c\u4e00\u4e2a\u53c2\u6570\u540d\u4e3a value\uff0c \u7c7b\u578b\u662f i32\u3002 // \u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f unit_label \uff0c\u7c7b\u578b\u662f char\u3002 fn print_labeled_measurement ( value : i32 , unit_label : char ) { println! ( \"The measurement is: {value}{unit_label}\" ); } \u8bed\u53e5\u548c\u8868\u8fbe\u5f0f \u51fd\u6570\u4f53\u7531\u4e00\u7cfb\u5217\u7684 \u8bed\u53e5 \u548c\u4e00\u4e2a\u53ef\u9009\u7684 \u7ed3\u5c3e\u8868\u8fbe\u5f0f \u6784\u6210\u3002 \u76ee\u524d\u4e3a\u6b62\uff0c\u6211\u4eec\u63d0\u5230\u7684\u51fd\u6570\u8fd8\u4e0d\u5305\u542b\u7ed3\u5c3e\u8868\u8fbe\u5f0f\uff0c\u4e0d\u8fc7\u4f60\u5df2\u7ecf\u89c1\u8fc7\u4f5c\u4e3a\u8bed\u53e5\u4e00\u90e8\u5206\u7684\u8868\u8fbe\u5f0f\u3002 \u56e0\u4e3a Rust \u662f\u4e00\u95e8\u57fa\u4e8e \u8868\u8fbe\u5f0f \uff08expression-based\uff09\u7684\u8bed\u8a00\uff0c\u8fd9\u662f\u4e00\u4e2a\u9700\u8981\u7406\u89e3\u7684\uff08\u4e0d\u540c\u4e8e\u5176\u4ed6\u8bed\u8a00\uff09\u91cd\u8981\u533a\u522b\u3002 \u5176\u4ed6\u8bed\u8a00\u5e76\u6ca1\u6709\u8fd9\u6837\u7684\u533a\u522b\uff0c\u6240\u4ee5\u8ba9\u6211\u4eec\u770b\u770b\u8bed\u53e5\u4e0e\u8868\u8fbe\u5f0f\u6709\u4ec0\u4e48\u533a\u522b\u4ee5\u53ca\u8fd9\u4e9b\u533a\u522b\u662f\u5982\u4f55\u5f71\u54cd\u51fd\u6570\u4f53\u7684\u3002 \u8bed\u53e5 \uff08Statements\uff09\u662f\u6267\u884c\u4e00\u4e9b\u64cd\u4f5c\u4f46\u4e0d\u8fd4\u56de\u503c\u7684\u6307\u4ee4 \u3002 \u8868\u8fbe\u5f0f \uff08Expressions\uff09\u8ba1\u7b97\u5e76\u4ea7\u751f\u4e00\u4e2a\u503c\u3002 \u8ba9\u6211\u4eec\u770b\u4e00\u4e9b\u4f8b\u5b50\u3002 \u5b9e\u9645\u4e0a\uff0c\u6211\u4eec\u5df2\u7ecf\u4f7f\u7528\u8fc7\u8bed\u53e5\u548c\u8868\u8fbe\u5f0f\u3002\u4f7f\u7528 let \u5173\u952e\u5b57\u521b\u5efa\u53d8\u91cf\u5e76\u7ed1\u5b9a\u4e00\u4e2a\u503c\u662f\u4e00\u4e2a\u8bed\u53e5\u3002\u5728\u4e0b\u9762\u793a\u4f8b \u4e2d\uff0c let y = 6; \u662f\u4e00\u4e2a\u8bed\u53e5\u3002 fn main () { let y = 6 ; } // \u51fd\u6570\u5b9a\u4e49\u4e5f\u662f\u8bed\u53e5\uff0c\u4e0a\u9762\u6574\u4e2a\u4f8b\u5b50\u672c\u8eab\u5c31\u662f\u4e00\u4e2a\u8bed\u53e5\u3002 \u8bed\u53e5\u4e0d\u8fd4\u56de\u503c\u3002\u56e0\u6b64\uff0c\u4e0d\u80fd\u628a let \u8bed\u53e5\u8d4b\u503c\u7ed9\u53e6\u4e00\u4e2a\u53d8\u91cf\uff0c\u6bd4\u5982\u4e0b\u9762\u7684\u4f8b\u5b50\u5c1d\u8bd5\u505a\u7684\uff0c\u4f1a\u4ea7\u751f\u4e00\u4e2a\u9519\u8bef\uff1a fn main () { let x = ( let y = 6 ); } \u5f53\u8fd0\u884c\u8fd9\u4e2a\u7a0b\u5e8f\u65f6\uff0c\u4f1a\u5f97\u5230\u5982\u4e0b\u9519\u8bef\uff1a $ cargo run Compiling functions v0.1.0 ( file:///projects/functions ) error: expected expression, found statement ( ` let ` ) --> src/main.rs:2:14 | 2 | let x = ( let y = 6 ) ; | ^^^^^^^^^ | = note: variable declaration using ` let ` is a statement error [ E0658 ] : ` let ` expressions in this position are unstable --> src/main.rs:2:14 | 2 | let x = ( let y = 6 ) ; | ^^^^^^^^^ | = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information warning: unnecessary parentheses around assigned value --> src/main.rs:2:13 | 2 | let x = ( let y = 6 ) ; | ^ ^ | = note: ` #[warn(unused_parens)]` on by default help: remove these parentheses | 2 - let x = ( let y = 6 ) ; 2 + let x = let y = 6 ; | For more information about this error, try ` rustc --explain E0658 ` . warning: ` functions ` ( bin \"functions\" ) generated 1 warning error: could not compile ` functions ` due to 2 previous errors ; 1 warning emitted let y = 6 \u8bed\u53e5\u5e76\u4e0d\u8fd4\u56de\u503c\uff0c\u6240\u4ee5\u6ca1\u6709\u53ef\u4ee5\u7ed1\u5b9a\u5230 x \u4e0a\u7684\u503c\u3002 \u8fd9\u4e0e\u5176\u4ed6\u8bed\u8a00\u4e0d\u540c\uff0c\u4f8b\u5982 C \u548c Ruby\uff0c\u5b83\u4eec\u7684\u8d4b\u503c\u8bed\u53e5\u4f1a\u8fd4\u56de\u6240\u8d4b\u7684\u503c\u3002 \u5728\u8fd9\u4e9b\u8bed\u8a00\u4e2d\uff0c\u53ef\u4ee5\u8fd9\u4e48\u5199 x = y = 6\uff0c\u8fd9\u6837 x \u548c y \u7684\u503c\u90fd\u662f 6\uff1bRust \u4e2d\u4e0d\u80fd\u8fd9\u6837\u5199\u3002 \u8868\u8fbe\u5f0f\u4f1a\u8ba1\u7b97\u51fa\u4e00\u4e2a\u503c\uff0c\u5e76\u4e14\u4f60\u5c06\u7f16\u5199\u7684\u5927\u90e8\u5206 Rust \u4ee3\u7801\u662f\u7531\u8868\u8fbe\u5f0f\u7ec4\u6210\u7684\u3002 \u8003\u8651\u4e00\u4e2a\u6570\u5b66\u8fd0\u7b97\uff0c\u6bd4\u5982 5 + 6\uff0c\u8fd9\u662f\u4e00\u4e2a\u8868\u8fbe\u5f0f\u5e76\u8ba1\u7b97\u51fa\u503c 11\u3002 \u8868\u8fbe\u5f0f\u53ef\u4ee5\u662f\u8bed\u53e5\u7684\u4e00\u90e8\u5206\uff1a\u5728\u4e0a\u9762\u4e2d\uff0c\u8bed\u53e5 let y = 6; \u4e2d\u7684 6 \u662f\u4e00\u4e2a\u8868\u8fbe\u5f0f\uff0c\u5b83\u8ba1\u7b97\u51fa\u7684\u503c\u662f 6\u3002 \u51fd\u6570\u8c03\u7528\u662f\u4e00\u4e2a\u8868\u8fbe\u5f0f \u3002 \u5b8f\u8c03\u7528\u662f\u4e00\u4e2a\u8868\u8fbe\u5f0f \u3002 \u7528\u5927\u62ec\u53f7\u521b\u5efa\u7684\u4e00\u4e2a\u65b0\u7684\u5757\u4f5c\u7528\u57df\u4e5f\u662f\u4e00\u4e2a\u8868\u8fbe\u5f0f \uff0c\u4f8b\u5982\uff1a fn main () { let y = { let x = 3 ; x + 1 }; // \u662f\u4e00\u4e2a\u4ee3\u7801\u5757\uff0c\u5b83\u7684\u503c\u662f 4 // \u8fd9\u4e2a\u503c\u4f5c\u4e3a let \u8bed\u53e5\u7684\u4e00\u90e8\u5206\u88ab\u7ed1\u5b9a\u5230 y \u4e0a\u3002 // \u6ce8\u610f x+1 \u8fd9\u4e00\u884c\u5728\u7ed3\u5c3e\u6ca1\u6709\u5206\u53f7\uff0c\u4e0e\u4f60\u89c1\u8fc7\u7684\u5927\u90e8\u5206\u4ee3\u7801\u884c\u4e0d\u540c\u3002 // \u8868\u8fbe\u5f0f\u7684\u7ed3\u5c3e\u6ca1\u6709\u5206\u53f7\u3002 // \u5982\u679c\u5728\u8868\u8fbe\u5f0f\u7684\u7ed3\u5c3e\u52a0\u4e0a\u5206\u53f7\uff0c\u5b83\u5c31\u53d8\u6210\u4e86\u8bed\u53e5\uff0c\u800c\u8bed\u53e5\u4e0d\u4f1a\u8fd4\u56de\u503c\u3002 // \u5728\u63a5\u4e0b\u6765\u63a2\u7d22\u5177\u6709\u8fd4\u56de\u503c\u7684\u51fd\u6570\u548c\u8868\u8fbe\u5f0f\u65f6\u8981\u8c28\u8bb0\u8fd9\u4e00\u70b9\u3002 println! ( \"The value of y is: {y}\" ); } \u5177\u6709\u8fd4\u56de\u503c\u7684\u51fd\u6570 \u51fd\u6570\u53ef\u4ee5\u5411\u8c03\u7528\u5b83\u7684\u4ee3\u7801\u8fd4\u56de\u503c\u3002\u6211\u4eec \u5e76\u4e0d\u5bf9\u8fd4\u56de\u503c\u547d\u540d\uff0c\u4f46\u8981\u5728\u7bad\u5934\uff08->\uff09\u540e\u58f0\u660e\u5b83\u7684\u7c7b\u578b \u3002 \u5728 Rust \u4e2d\uff0c \u51fd\u6570\u7684\u8fd4\u56de\u503c\u7b49\u540c\u4e8e\u51fd\u6570\u4f53\u6700\u540e\u4e00\u4e2a\u8868\u8fbe\u5f0f\u7684\u503c \u3002 \u4f7f\u7528 return \u5173\u952e\u5b57\u548c\u6307\u5b9a\u503c\uff0c\u53ef\u4ece\u51fd\u6570\u4e2d\u63d0\u524d\u8fd4\u56de\uff1b \u4f46\u5927\u90e8\u5206\u51fd\u6570\u9690\u5f0f\u7684\u8fd4\u56de\u6700\u540e\u7684\u8868\u8fbe\u5f0f\u3002 \u8fd9\u662f\u4e00\u4e2a\u6709\u8fd4\u56de\u503c\u7684\u51fd\u6570\u7684\u4f8b\u5b50\uff1a // \u5728 five \u51fd\u6570\u4e2d\u6ca1\u6709\u51fd\u6570\u8c03\u7528\u3001\u5b8f\u3001\u751a\u81f3\u6ca1\u6709 let \u8bed\u53e5 \u2014\u2014 \u53ea\u6709\u6570\u5b57 5\u3002 // \u8fd9\u5728 Rust \u4e2d\u662f\u4e00\u4e2a\u5b8c\u5168\u6709\u6548\u7684\u51fd\u6570\u3002 // \u6ce8\u610f\uff0c\u4e5f\u6307\u5b9a\u4e86\u51fd\u6570\u8fd4\u56de\u503c\u7684\u7c7b\u578b\uff0c\u5c31\u662f -> i32\u3002 fn five () -> i32 { 5 // five \u51fd\u6570\u6ca1\u6709\u53c2\u6570\u5e76\u5b9a\u4e49\u4e86\u8fd4\u56de\u503c\u7c7b\u578b\uff0c\u4e0d\u8fc7\u51fd\u6570\u4f53\u53ea\u6709\u5355\u5355\u4e00\u4e2a 5 \u4e5f\u6ca1\u6709\u5206\u53f7\uff0c\u56e0\u4e3a\u8fd9\u662f\u4e00\u4e2a\u8868\u8fbe\u5f0f\uff0c\u6211\u4eec\u60f3\u8981\u8fd4\u56de\u5b83\u7684\u503c\u3002 } fn main () { // \u8fd9\u4e00\u884c\u8868\u660e\u6211\u4eec\u4f7f\u7528\u51fd\u6570\u7684\u8fd4\u56de\u503c\u521d\u59cb\u5316\u4e00\u4e2a\u53d8\u91cf\u3002 // \u56e0\u4e3a five \u51fd\u6570\u8fd4\u56de 5\uff0c\u8fd9\u4e00\u884c\u4e0e\u4ee3\u7801 let x = 5; \u76f8\u540c let x = five (); println! ( \"The value of x is: {x}\" ); } \u8ba9\u6211\u4eec\u770b\u770b\u53e6\u4e00\u4e2a\u4f8b\u5b50\uff1a fn main () { let x = plus_one ( 5 ); println! ( \"The value of x is: {x}\" ); } fn plus_one ( x : i32 ) -> i32 { x + 1 // \u5982\u679c\u5728\u5305\u542b x + 1 \u7684\u884c\u5c3e\u52a0\u4e0a\u4e00\u4e2a\u5206\u53f7\uff0c\u628a\u5b83\u4ece\u8868\u8fbe\u5f0f\u53d8\u6210\u8bed\u53e5\uff0c\u6211\u4eec\u5c06\u770b\u5230\u4e00\u4e2a\u9519\u8bef\u3002 } \u6ce8\u91ca \u7a0b\u5e8f\u5458\u5728\u6e90\u7801\u4e2d\u7559\u4e0b \u6ce8\u91ca \uff08comments\uff09\uff0c\u7f16\u8bd1\u5668\u4f1a\u5ffd\u7565\u5b83\u4eec\uff0c\u4e0d\u8fc7\u9605\u8bfb\u4ee3\u7801\u7684\u4eba\u53ef\u80fd\u89c9\u5f97\u6709\u7528\u3002 \u5355\u884c\u6ce8\u91ca \u60ef\u7528\u7684\u6ce8\u91ca\u6837\u5f0f\u662f\u4ee5\u4e24\u4e2a\u659c\u6760\u5f00\u59cb\u6ce8\u91ca\uff0c\u5e76\u6301\u7eed\u5230\u672c\u884c\u7684\u7ed3\u5c3e\u3002\u5bf9\u4e8e\u8d85\u8fc7\u4e00\u884c\u7684\u6ce8\u91ca\uff0c\u9700\u8981\u5728\u6bcf\u4e00\u884c\u524d\u90fd\u52a0\u4e0a // // So we\u2019re doing something complicated here, long enough that we need // multiple lines of comments to do it! Whew! Hopefully, this comment will // explain what\u2019s going on. \u6ce8\u91ca\u4e5f\u53ef\u4ee5\u653e\u5728\u5305\u542b\u4ee3\u7801\u7684\u884c\u7684\u672b\u5c3e\uff1a fn main () { let lucky_number = 7 ; // I\u2019m feeling lucky today } \u6587\u6863\u6ce8\u91ca \u63a7\u5236\u6d41 \u6839\u636e\u6761\u4ef6\u662f\u5426\u4e3a\u771f\u6765\u51b3\u5b9a\u662f\u5426\u6267\u884c\u67d0\u4e9b\u4ee3\u7801\uff0c\u4ee5\u53ca\u6839\u636e\u6761\u4ef6\u662f\u5426\u4e3a\u771f\u6765\u91cd\u590d\u8fd0\u884c\u4e00\u6bb5\u4ee3\u7801\u7684\u80fd\u529b\u662f\u5927\u90e8\u5206\u7f16\u7a0b\u8bed\u8a00\u7684\u57fa\u672c\u7ec4\u6210\u90e8\u5206\u3002 if\u8868\u8fbe\u5f0f if \u8868\u8fbe\u5f0f\u5141\u8bb8\u6839\u636e\u6761\u4ef6\u6267\u884c\u4e0d\u540c\u7684\u4ee3\u7801\u5206\u652f\u3002 fn main () { let number = 3 ; // \u6240\u6709\u7684 if \u8868\u8fbe\u5f0f\u90fd\u4ee5 if \u5173\u952e\u5b57\u5f00\u5934\uff0c\u5176\u540e\u8ddf\u4e00\u4e2a\u6761\u4ef6\u3002 if number < 5 { // \u5728\u6761\u4ef6\u4e3a\u771f\u65f6\u5e0c\u671b\u6267\u884c\u7684\u4ee3\u7801\u5757\u4f4d\u4e8e\u7d27\u8ddf\u6761\u4ef6\u4e4b\u540e\u7684\u5927\u62ec\u53f7\u4e2d\u3002 println! ( \"condition was true\" ); } else { // \u4e00\u4e2a\u53ef\u9009\u7684 else \u8868\u8fbe\u5f0f\u6765\u63d0\u4f9b\u4e00\u4e2a\u5728\u6761\u4ef6\u4e3a\u5047\u65f6\u5e94\u5f53\u6267\u884c\u7684\u4ee3\u7801\u5757 println! ( \"condition was false\" ); } } \u503c\u5f97\u6ce8\u610f\u7684\u662f\u4ee3\u7801\u4e2d\u7684\u6761\u4ef6 \u5fc5\u987b \u662f bool \u503c\u3002\u5982\u679c\u6761\u4ef6\u4e0d\u662f bool \u503c\uff0c\u6211\u4eec\u5c06\u5f97\u5230\u4e00\u4e2a\u9519\u8bef\u3002 fn main () { let number = 3 ; // \u4f1a\u62a5\uff0cexpected `bool`, found integer \u9519\u8bef\u3002 // Rust \u5e76\u4e0d\u4f1a\u5c1d\u8bd5\u81ea\u52a8\u5730\u5c06\u975e\u5e03\u5c14\u503c\u8f6c\u6362\u4e3a\u5e03\u5c14\u503c\u3002 // \u5fc5\u987b\u603b\u662f\u663e\u5f0f\u5730\u4f7f\u7528\u5e03\u5c14\u503c\u4f5c\u4e3a if \u7684\u6761\u4ef6\u3002 if number { println! ( \"number was three\" ); } } else if \u8868\u8fbe\u5f0f \u53ef\u4ee5\u5c06 else if \u8868\u8fbe\u5f0f\u4e0e if \u548c else \u7ec4\u5408\u6765\u5b9e\u73b0\u591a\u91cd\u6761\u4ef6\u3002 fn main () { let number = 6 ; // \u6309\u987a\u5e8f\u68c0\u67e5\u6bcf\u4e2a if \u8868\u8fbe\u5f0f\u5e76\u6267\u884c\u7b2c\u4e00\u4e2a\u6761\u4ef6\u4e3a\u771f\u7684\u4ee3\u7801\u5757\u3002 if number % 4 == 0 { println! ( \"number is divisible by 4\" ); } else if number % 3 == 0 { println! ( \"number is divisible by 3\" ); } else if number % 2 == 0 { println! ( \"number is divisible by 2\" ); } else { println! ( \"number is not divisible by 4, 3, or 2\" ); } // Rust \u53ea\u4f1a\u6267\u884c\u7b2c\u4e00\u4e2a\u6761\u4ef6\u4e3a\u771f\u7684\u4ee3\u7801\u5757\uff0c\u5e76\u4e14\u4e00\u65e6\u5b83\u627e\u5230\u4e00\u4e2a\u4ee5\u540e\uff0c\u751a\u81f3\u90fd\u4e0d\u4f1a\u68c0\u67e5\u5269\u4e0b\u7684\u6761\u4ef6\u4e86\u3002 } \u4f7f\u7528\u8fc7\u591a\u7684 else if \u8868\u8fbe\u5f0f\u4f1a\u4f7f\u4ee3\u7801\u663e\u5f97\u6742\u4e71\u65e0\u7ae0\uff0c\u6240\u4ee5\u5982\u679c\u6709\u591a\u4e8e\u4e00\u4e2a else if \u8868\u8fbe\u5f0f\uff0c\u6700\u597d\u91cd\u6784\u4ee3\u7801\u3002 \u4e3a\u6b64\uff0c\u7b2c\u516d\u7ae0\u4f1a\u4ecb\u7ecd\u4e00\u4e2a\u5f3a\u5927\u7684 Rust \u5206\u652f\u7ed3\u6784\uff08branching construct\uff09\uff0c\u53eb\u505a match \u3002 let\u4e2d\u7684if \u56e0\u4e3a if \u662f\u4e00\u4e2a\u8868\u8fbe\u5f0f\uff0c\u53ef\u4ee5\u5728 let \u8bed\u53e5\u7684\u53f3\u4fa7\u4f7f\u7528\u5b83\uff0c fn main () { let condition = true ; let number = if condition { 5 } else { 6 }; // \u5c06 if \u8868\u8fbe\u5f0f\u7684\u8fd4\u56de\u503c\u8d4b\u7ed9\u4e00\u4e2a\u53d8\u91cf // \u4ee3\u7801\u5757\u7684\u503c\u662f\u5176\u6700\u540e\u4e00\u4e2a\u8868\u8fbe\u5f0f\u7684\u503c\uff0c\u800c\u6570\u5b57\u672c\u8eab\u5c31\u662f\u4e00\u4e2a\u8868\u8fbe\u5f0f\u3002 println! ( \"The value of number is: {number}\" ); } \u7c7b\u578b\u9700\u7edf\u4e00 fn main () { let condition = true ; let number = if condition { 5 } else { \"six\" }; // \u7c7b\u578b\u4e0d\u7edf\u4e00\uff0c\u4f1a\u62a5\u9519\uff0cexpected integer, found `&str` println! ( \"The value of number is: {number}\" ); } \u5faa\u73af\u8868\u8fbe\u5f0f \u591a\u6b21\u6267\u884c\u540c\u4e00\u6bb5\u4ee3\u7801\u662f\u5f88\u5e38\u7528\u7684\uff0cRust \u4e3a\u6b64\u63d0\u4f9b\u4e86\u591a\u79cd \u5faa\u73af\uff08loops\uff09\u3002 loop \u5faa\u73af loop \u5173\u952e\u5b57\u544a\u8bc9 Rust \u4e00\u904d\u53c8\u4e00\u904d\u5730\u6267\u884c\u4e00\u6bb5\u4ee3\u7801\u76f4\u5230\u4f60\u660e\u786e\u8981\u6c42\u505c\u6b62\u3002 fn main () { loop { // \u4f1a\u770b\u5230\u8fde\u7eed\u7684\u53cd\u590d\u6253\u5370 again!\uff0c\u76f4\u5230\u6211\u4eec\u624b\u52a8\u505c\u6b62\u7a0b\u5e8f\u3002 // \u5927\u90e8\u5206\u7ec8\u7aef\u90fd\u652f\u6301\u4e00\u4e2a\u5feb\u6377\u952e\uff0cctrl-c\uff0c\u6765\u7ec8\u6b62\u4e00\u4e2a\u9677\u5165\u65e0\u9650\u5faa\u73af\u7684\u7a0b\u5e8f\u3002 println! ( \"again!\" ); } } break \u5173\u952e\u5b57\u6765\u544a\u8bc9\u7a0b\u5e8f\u4f55\u65f6\u505c\u6b62\u5faa\u73af\u3002 continue \u5173\u952e\u5b57\u544a\u8bc9\u7a0b\u5e8f\u8df3\u8fc7\u8fd9\u4e2a\u5faa\u73af\u8fed\u4ee3\u4e2d\u7684\u4efb\u4f55\u5269\u4f59\u4ee3\u7801\uff0c\u5e76\u8f6c\u5230\u4e0b\u4e00\u4e2a\u8fed\u4ee3\u3002 \u4ece\u5faa\u73af\u8fd4\u56de\u503c loop \u7684\u4e00\u4e2a\u7528\u4f8b\u662f\u91cd\u8bd5\u53ef\u80fd\u4f1a\u5931\u8d25\u7684\u64cd\u4f5c\uff0c\u6bd4\u5982\u68c0\u67e5\u7ebf\u7a0b\u662f\u5426\u5b8c\u6210\u4e86\u4efb\u52a1\u3002\u7136\u800c\u4f60\u53ef\u80fd\u4f1a\u9700\u8981\u5c06\u64cd\u4f5c\u7684\u7ed3\u679c\u4f20\u9012\u7ed9\u5176\u5b83\u7684\u4ee3\u7801\u3002\u5982\u679c\u5c06\u8fd4\u56de\u503c\u52a0\u5165\u4f60\u7528\u6765\u505c\u6b62\u5faa\u73af\u7684 break \u8868\u8fbe\u5f0f\uff0c\u5b83\u4f1a\u88ab\u505c\u6b62\u7684\u5faa\u73af\u8fd4\u56de\uff1a fn main () { // \u4e00\u4e2a\u540d\u4e3a counter \u7684\u53d8\u91cf\u5e76\u521d\u59cb\u5316\u4e3a 0 let mut counter = 0 ; // \u63a5\u7740\u58f0\u660e\u4e86\u4e00\u4e2a\u540d\u4e3a result \u6765\u5b58\u653e\u5faa\u73af\u7684\u8fd4\u56de\u503c\u3002 let result = loop { // \u5728\u5faa\u73af\u7684\u6bcf\u4e00\u6b21\u8fed\u4ee3\u4e2d\uff0c\u6211\u4eec\u5c06 counter \u53d8\u91cf\u52a0 1 counter += 1 ; // \u63a5\u7740\u68c0\u67e5\u8ba1\u6570\u662f\u5426\u7b49\u4e8e 10\u3002 if counter == 10 { // \u4f7f\u7528 break \u5173\u952e\u5b57\u8fd4\u56de\u503c counter * 2 break counter * 2 ; // \u901a\u8fc7\u5206\u53f7\u7ed3\u675f\u8d4b\u503c\u7ed9 result \u7684\u8bed\u53e5\u3002 } }; // \u6700\u540e\u6253\u5370\u51fa result \u7684\u503c\uff0c\u4e5f\u5c31\u662f 20\u3002 println! ( \"The result is {result}\" ); } \u5faa\u73af\u6807\u7b7e \u5982\u679c\u5b58\u5728\u5d4c\u5957\u5faa\u73af\uff0c break \u548c continue \u5e94\u7528\u4e8e\u6b64\u65f6\u6700\u5185\u5c42\u7684\u5faa\u73af\u3002\u4f60\u53ef\u4ee5\u9009\u62e9\u5728\u4e00\u4e2a\u5faa\u73af\u4e0a\u6307\u5b9a\u4e00\u4e2a \u5faa\u73af\u6807\u7b7e \uff08loop label\uff09\uff0c\u7136\u540e\u5c06\u6807\u7b7e\u4e0e break \u6216 continue \u4e00\u8d77\u4f7f\u7528\uff0c\u4f7f\u8fd9\u4e9b\u5173\u952e\u5b57\u5e94\u7528\u4e8e\u5df2\u6807\u8bb0\u7684\u5faa\u73af\u800c\u4e0d\u662f\u6700\u5185\u5c42\u7684\u5faa\u73af\u3002 fn main () { let mut count = 0 ; // \u5916\u5c42\u5faa\u73af\u6709\u4e00\u4e2a\u6807\u7b7e counting_up ' counting_up : loop { println! ( \"count = {count}\" ); let mut remaining = 10 ; // \u6ca1\u6709\u6807\u7b7e\u7684\u5185\u90e8\u5faa\u73af\u4ece 10 \u5411\u4e0b\u6570\u5230 9\u3002 loop { println! ( \"remaining = {remaining}\" ); if remaining == 9 { // \u6ca1\u6709\u6307\u5b9a\u6807\u7b7e\u7684 break \u5c06\u53ea\u9000\u51fa\u5185\u5c42\u5faa\u73af\u3002 break ; } if count == 2 { // break 'counting_up; \u8bed\u53e5\u5c06\u9000\u51fa\u5916\u5c42\u5faa\u73af\u3002 break 'counting_up ; } remaining -= 1 ; } count += 1 ; } println! ( \"End count = {count}\" ); } while \u5faa\u73af \u5f53\u6761\u4ef6\u4e3a\u771f\uff0c\u6267\u884c\u5faa\u73af\u3002\u5f53\u6761\u4ef6\u4e0d\u518d\u4e3a\u771f\uff0c\u8c03\u7528 break \u505c\u6b62\u5faa\u73af\u3002 \u6bd4\u5982\uff1a fn main () { let mut number = 3 ; // \u5f53\u6761\u4ef6\u4e3a\u771f\u65f6\uff0c\u4f7f\u7528 while \u5faa\u73af\u8fd0\u884c\u4ee3\u7801 // \u8fd9\u79cd\u7ed3\u6784\u6d88\u9664\u4e86\u5f88\u591a\u4f7f\u7528 loop\u3001if\u3001else \u548c break \u65f6\u6240\u5fc5\u987b\u7684\u5d4c\u5957\uff0c\u8fd9\u6837\u66f4\u52a0\u6e05\u6670\u3002 while number != 0 { println! ( \"{number}!\" ); number -= 1 ; } println! ( \"LIFTOFF!!!\" ); } for \u5faa\u73af \u53ef\u4ee5\u4f7f\u7528 for \u5faa\u73af\u6765\u5bf9\u4e00\u4e2a\u96c6\u5408\u7684\u6bcf\u4e2a\u5143\u7d20\u6267\u884c\u4e00\u4e9b\u4ee3\u7801\u3002 fn main () { let a = [ 10 , 20 , 30 , 40 , 50 ]; for element in a { println! ( \"the value is: {element}\" ); } } for \u5faa\u73af\u7684\u5b89\u5168\u6027\u548c\u7b80\u6d01\u6027\u4f7f\u5f97\u5b83\u6210\u4e3a Rust \u4e2d\u5728\u7528\u4e8e\u904d\u5386\u6570\u7ec4\u65f6\u662f\u4f7f\u7528\u6700\u591a\u7684\u5faa\u73af\u7ed3\u6784\u3002 \u53e6\u4e00\u4e2a\u4f8b\u5b50\uff1a fn main () { // \u904d\u5386\u6807\u51c6\u5e93\u63d0\u4f9b\u7684\u7c7b\u578bRange\u7c7b\u578b // \u7528\u6765\u751f\u6210\u4ece\u4e00\u4e2a\u6570\u5b57\u5f00\u59cb\u5230\u53e6\u4e00\u4e2a\u6570\u5b57\u4e4b\u524d\u7ed3\u675f\u7684\u6240\u6709\u6570\u5b57\u7684\u5e8f\u5217\u3002 // rev\uff0c\u7528\u6765\u53cd\u8f6c range for number in ( 1 .. 4 ). rev () { println! ( \"{number}!\" ); } println! ( \"LIFTOFF!!!\" ); }","title":"\u5e38\u89c1\u7f16\u7a0b\u6982\u5ff5"},{"location":"common-programing-concepts/#_1","text":"","title":"\u5e38\u89c1\u7f16\u7a0b\u6982\u5ff5"},{"location":"common-programing-concepts/#_2","text":"\u53d8\u91cf\u9ed8\u8ba4\u662f\u4e0d\u53ef\u6539\u53d8\u7684\uff08immutable\uff09\u3002 \u5f53\u53d8\u91cf\u4e0d\u53ef\u53d8\u65f6\uff0c\u4e00\u65e6\u503c\u88ab\u7ed1\u5b9a\u4e00\u4e2a\u540d\u79f0\u4e0a\uff0c\u4f60\u5c31\u4e0d\u80fd\u6539\u53d8\u8fd9\u4e2a\u503c\u3002 \u6587\u4ef6\u540d: src/main.rs fn main () { let x = 5 ; println! ( \"The value of x is: {x}\" ); x = 6 ; // \u9519\u8bef, \u4e0d\u80fd\u5bf9\u4e0d\u53ef\u53d8\u53d8\u91cf x \u4e8c\u6b21\u8d4b\u503c\uff08cannot assign twice to immutable variable `x` \uff09 println! ( \"The value of x is: {x}\" ); } \u4e0d\u8fc7\u53ef\u53d8\u6027\u4e5f\u662f\u975e\u5e38\u6709\u7528\u7684\uff0c\u53ef\u4ee5\u7528\u6765\u66f4\u65b9\u4fbf\u5730\u7f16\u5199\u4ee3\u7801\u3002\u5c3d\u7ba1\u53d8\u91cf\u9ed8\u8ba4\u662f\u4e0d\u53ef\u53d8\u7684\uff0c\u4f60\u4ecd\u7136\u53ef\u4ee5\u5728\u53d8\u91cf\u540d\u524d\u6dfb\u52a0 mut \u6765\u4f7f\u5176\u53ef\u53d8: fn main () { let mut x = 5 ; // \u6dfb\u52a0mut\uff0c\u4f7f\u5176\u53ef\u53d8\u3002\uff08\u8fdb\u884c\u591a\u6b21\u8d4b\u503c\uff09 println! ( \"The value of x is: {x}\" ); x = 6 ; println! ( \"The value of x is: {x}\" ); }","title":"\u53d8\u91cf\u548c\u53ef\u53d8\u6027"},{"location":"common-programing-concepts/#_3","text":"\u7c7b\u4f3c\u4e8e\u4e0d\u53ef\u53d8\u53d8\u91cf\uff0c\u5e38\u91cf(constants) \u662f\u7ed1\u5b9a\u5230\u4e00\u4e2a\u540d\u79f0\u7684\u4e0d\u5141\u8bb8\u6539\u53d8\u7684\u503c\uff0c\u4e0d\u8fc7\u5e38\u91cf\u4e0e\u53d8\u91cf\u8fd8\u662f\u6709\u4e00\u4e9b\u533a\u522b\u3002 \u4e0d\u5141\u8bb8\u5bf9\u5e38\u91cf\u4f7f\u7528 mut\u3002\u5e38\u91cf\u4e0d\u5149\u9ed8\u8ba4\u4e0d\u80fd\u53d8\uff0c\u5b83\u603b\u662f\u4e0d\u80fd\u53d8\u3002 \u5e38\u91cf\u4f7f\u7528 const \u5173\u952e\u5b57\u800c\u4e0d\u662f let \uff0c\u5e76\u4e14 \u5fc5\u987b \u6ce8\u660e\u503c\u7684\u7c7b\u578b\u3002 \u5e38\u91cf\u53ef\u4ee5\u5728\u4efb\u4f55\u4f5c\u7528\u57df\u4e2d\u58f0\u660e\uff0c\u5305\u62ec\u5168\u5c40\u4f5c\u7528\u57df\uff0c\u8fd9\u5728\u4e00\u4e2a\u503c\u9700\u8981\u88ab\u5f88\u591a\u90e8\u5206\u7684\u4ee3\u7801\u7528\u5230\u65f6\u5f88\u6709\u7528\u3002 \u5e38\u91cf\u53ea\u80fd\u88ab\u8bbe\u7f6e\u4e3a\u5e38\u91cf\u8868\u8fbe\u5f0f\uff0c\u800c\u4e0d\u53ef\u4ee5\u662f\u5176\u4ed6\u4efb\u4f55\u53ea\u80fd\u5728\u8fd0\u884c\u65f6\u8ba1\u7b97\u51fa\u7684\u503c\u3002 \u4f8b\u5982\uff1a const THREE_HOURS_IN_SECONDS : u32 = 60 * 60 * 3 ; Rust \u5bf9\u5e38\u91cf\u7684\u547d\u540d\u7ea6\u5b9a\u662f\u5728\u5355\u8bcd\u4e4b\u95f4\u4f7f\u7528\u5168\u5927\u5199\u52a0\u4e0b\u5212\u7ebf \u6709\u5173\u58f0\u660e\u5e38\u91cf\u65f6\u53ef\u4ee5\u4f7f\u7528\u54ea\u4e9b\u64cd\u4f5c\u7684\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605 Rust Reference \u7684\u5e38\u91cf\u6c42\u503c\u90e8\u5206 \u3002","title":"\u5e38\u91cf"},{"location":"common-programing-concepts/#_4","text":"\u53ef\u4ee5\u5b9a\u4e49\u4e00\u4e2a\u4e0e\u4e4b\u524d\u53d8\u91cf\u540c\u540d\u7684\u65b0\u53d8\u91cf\u3002\u79f0\u4e4b\u4e3a\u7b2c\u4e00\u4e2a\u53d8\u91cf\u88ab\u7b2c\u4e8c\u4e2a \u9690\u85cf \uff08Shadowing\uff09\u4e86, \u8fd9\u610f\u5473\u7740\u5728\u4f7f\u7528\u53d8\u91cf\u7684\u540d\u79f0\u65f6\uff0c\u7f16\u8bd1\u5668\u5c06\u770b\u5230\u7b2c\u4e8c\u4e2a\u53d8\u91cf\u3002 \u5b9e\u9645\u4e0a\uff0c\u7b2c\u4e8c\u4e2a\u53d8\u91cf\u201c\u906e\u853d\u201d\u4e86\u7b2c\u4e00\u4e2a\u53d8\u91cf\uff0c\u6b64\u65f6\u4efb\u4f55\u4f7f\u7528\u8be5\u53d8\u91cf\u540d\u7684\u884c\u4e3a\u4e2d\u90fd\u4f1a\u89c6\u4e3a\u662f\u5728\u4f7f\u7528\u7b2c\u4e8c\u4e2a\u53d8\u91cf\uff0c\u76f4\u5230\u7b2c\u4e8c\u4e2a\u53d8\u91cf\u81ea\u5df1\u4e5f\u88ab\u9690\u85cf\u6216\u7b2c\u4e8c\u4e2a\u53d8\u91cf\u7684\u4f5c\u7528\u57df\u7ed3\u675f\u3002 \u53ef\u4ee5\u7528\u76f8\u540c\u53d8\u91cf\u540d\u79f0\u6765\u9690\u85cf\u4e00\u4e2a\u53d8\u91cf\uff0c\u4ee5\u53ca\u91cd\u590d\u4f7f\u7528 let \u5173\u952e\u5b57\u6765\u591a\u6b21\u9690\u85cf\uff0c\u5982\u4e0b\u6240\u793a\uff1a fn main () { let x = 5 ; // \u9996\u5148\u5c06 x \u7ed1\u5b9a\u5230\u503c 5 \u4e0a let x = x + 1 ; // \u63a5\u7740\u901a\u8fc7 let x = \u521b\u5efa\u4e86\u4e00\u4e2a\u65b0\u53d8\u91cf x\uff0c\u83b7\u53d6\u521d\u59cb\u503c\u5e76\u52a0 1\uff0c\u8fd9\u6837 x \u7684\u503c\u5c31\u53d8\u6210 6 \u4e86 { // \u7136\u540e\uff0c\u5728\u4f7f\u7528\u82b1\u62ec\u53f7\u521b\u5efa\u7684\u5185\u90e8\u4f5c\u7528\u57df\u5185 let x = x * 2 ; // \u7b2c\u4e09\u4e2a let \u8bed\u53e5\u4e5f\u9690\u85cf\u4e86 x \u5e76\u521b\u5efa\u4e86\u4e00\u4e2a\u65b0\u7684\u53d8\u91cf\uff0c\u5c06\u4e4b\u524d\u7684\u503c\u4e58\u4ee5 2\uff0cx \u5f97\u5230\u7684\u503c\u662f 12 println! ( \"The value of x in the inner scope is: {x}\" ); } // \u5f53\u8be5\u4f5c\u7528\u57df\u7ed3\u675f\u65f6\uff0c\u5185\u90e8 shadowing \u7684\u4f5c\u7528\u57df\u4e5f\u7ed3\u675f\u4e86\uff0cx \u53c8\u8fd4\u56de\u5230 6 println! ( \"The value of x is: {x}\" ); } \u9690\u85cf\u4e0e\u5c06\u53d8\u91cf\u6807\u8bb0\u4e3a mut \u662f\u6709\u533a\u522b\u7684\u3002\u5f53\u4e0d\u5c0f\u5fc3\u5c1d\u8bd5\u5bf9\u53d8\u91cf\u91cd\u65b0\u8d4b\u503c\u65f6\uff0c\u5982\u679c\u6ca1\u6709\u4f7f\u7528 let \u5173\u952e\u5b57\uff0c\u5c31\u4f1a\u5bfc\u81f4\u7f16\u8bd1\u65f6\u9519\u8bef\u3002 \u901a\u8fc7\u4f7f\u7528 let\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u8fd9\u4e2a\u503c\u8fdb\u884c\u4e00\u4e9b\u8ba1\u7b97\uff0c\u4e0d\u8fc7\u8ba1\u7b97\u5b8c\u4e4b\u540e\u53d8\u91cf\u4ecd\u7136\u662f\u4e0d\u53ef\u53d8\u7684\u3002 mut \u4e0e\u9690\u85cf\u7684\u53e6\u4e00\u4e2a\u533a\u522b\u662f\uff0c\u5f53\u518d\u6b21\u4f7f\u7528 let \u65f6\uff0c\u5b9e\u9645\u4e0a\u521b\u5efa\u4e86\u4e00\u4e2a\u65b0\u53d8\u91cf\uff0c\u6211\u4eec\u53ef\u4ee5\u6539\u53d8\u503c\u7684\u7c7b\u578b\uff0c\u5e76\u4e14\u590d\u7528\u8fd9\u4e2a\u540d\u5b57\u3002 \u4f8b\u5982\uff0c\u5047\u8bbe\u7a0b\u5e8f\u8bf7\u6c42\u7528\u6237\u8f93\u5165\u7a7a\u683c\u5b57\u7b26\u6765\u8bf4\u660e\u5e0c\u671b\u5728\u6587\u672c\u4e4b\u95f4\u663e\u793a\u591a\u5c11\u4e2a\u7a7a\u683c\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u60f3\u5c06\u8f93\u5165\u5b58\u50a8\u6210\u6570\u5b57\uff08\u591a\u5c11\u4e2a\u7a7a\u683c\uff09\uff1a let spaces = \" \" ; // \u7b2c\u4e00\u4e2a spaces \u53d8\u91cf\u662f\u5b57\u7b26\u4e32\u7c7b\u578b let spaces = spaces . len (); // \u7b2c\u4e8c\u4e2a spaces \u53d8\u91cf\u662f\u6570\u5b57\u7c7b\u578b \u9690\u85cf\u4f7f\u6211\u4eec\u4e0d\u5fc5\u4f7f\u7528\u4e0d\u540c\u7684\u540d\u5b57\uff0c\u5982 spaces_str \u548c spaces_num\uff1b \u76f8\u53cd\uff0c\u6211\u4eec\u53ef\u4ee5\u590d\u7528 spaces \u8fd9\u4e2a\u66f4\u7b80\u5355\u7684\u540d\u5b57\u3002\u7136\u800c\uff0c\u5982\u679c\u5c1d\u8bd5\u4f7f\u7528 mut \uff0c\u5c06\u4f1a\u5f97\u5230\u4e00\u4e2a\u7f16\u8bd1\u65f6\u9519\u8bef\uff0c\u5982\u4e0b\u6240\u793a\uff1a let mut spaces = \" \" ; // string\u7c7b\u578b spaces = spaces . len (); // int \u7c7b\u578b \u9519\u8bef\u63d0\u793a: $ cargo run Compiling variables v0 . 1.0 ( file : ///projects/variables) error [ E0308 ] : mismatched types - -> src / main . rs : 3 : 14 | 2 | let mut spaces = \" \" ; | ----- expected due to this value 3 | spaces = spaces . len (); | ^^^^^^^^^^^^ expected ` & str ` , found ` usize ` For more information about this error , try ` rustc -- explain E0308 ` . error : could not compile ` variables ` due to previous error \u4e0d\u80fd\u6539\u53d8\u53d8\u91cf\u7684\u7c7b\u578b","title":"\u9690\u85cf"},{"location":"common-programing-concepts/#_5","text":"\u5728 Rust \u4e2d\uff0c\u6bcf\u4e00\u4e2a\u503c\u90fd\u5c5e\u4e8e\u67d0\u4e00\u4e2a \u6570\u636e\u7c7b\u578b\uff08data type\uff09\uff0c\u8fd9\u544a\u8bc9 Rust \u5b83\u88ab\u6307\u5b9a\u4e3a\u4f55\u79cd\u6570\u636e\uff0c\u4ee5\u4fbf\u660e\u786e\u6570\u636e\u5904\u7406\u65b9\u5f0f\u3002 \u6211\u4eec\u5c06\u770b\u5230\u4e24\u7c7b\u6570\u636e\u7c7b\u578b\u5b50\u96c6\uff1a \u6807\u91cf \uff08scalar\uff09\u548c \u590d\u5408 \uff08compound\uff09\u3002 Rust \u662f \u9759\u6001\u7c7b\u578b\uff08statically typed\uff09\u8bed\u8a00\uff0c\u4e5f\u5c31\u662f\u8bf4\u5728\u7f16\u8bd1\u65f6\u5c31\u5fc5\u987b\u77e5\u9053\u6240\u6709\u53d8\u91cf\u7684\u7c7b\u578b\u3002 \u4f7f\u7528 parse \u5c06 String \u8f6c\u6362\u4e3a\u6570\u5b57\u65f6\uff0c\u5fc5\u987b\u589e\u52a0\u7c7b\u578b\u6ce8\u89e3\uff0c\u50cf\u8fd9\u6837\uff1a let guess : u32 = \"42\" . parse (). expect ( \"Not a number!\" ); \u5982\u679c\u4e0d\u50cf\u4e0a\u9762\u8fd9\u6837\u6dfb\u52a0\u7c7b\u578b\u6ce8\u89e3 : u32\uff0cRust \u4f1a\u663e\u793a\u5982\u4e0b\u9519\u8bef\uff0c\u8fd9\u8bf4\u660e\u7f16\u8bd1\u5668\u9700\u8981\u6211\u4eec\u63d0\u4f9b\u66f4\u591a\u4fe1\u606f\uff0c\u6765\u4e86\u89e3\u6211\u4eec\u60f3\u8981\u7684\u7c7b\u578b\uff1a $ cargo build Compiling no_type_annotations v0.1.0 ( file:///projects/no_type_annotations ) error [ E0282 ] : type annotations needed --> src/main.rs:2:9 | 2 | let guess = \"42\" .parse () .expect ( \"Not a number!\" ) ; | ^^^^^ consider giving ` guess ` a type For more information about this error, try ` rustc --explain E0282 ` . error: could not compile ` no_type_annotations ` due to previous error","title":"\u6570\u636e\u7c7b\u578b"},{"location":"common-programing-concepts/#_6","text":"\u6807\u91cf \uff08scalar\uff09\u7c7b\u578b\u4ee3\u8868\u4e00\u4e2a\u5355\u72ec\u7684\u503c\u3002Rust \u6709\u56db\u79cd\u57fa\u672c\u7684\u6807\u91cf\u7c7b\u578b\uff1a \u6574\u578b \u3001 \u6d6e\u70b9\u578b \u3001 \u5e03\u5c14\u7c7b\u578b \u548c \u5b57\u7b26\u7c7b\u578b \u3002","title":"\u6807\u91cf\u7c7b\u578b"},{"location":"common-programing-concepts/#_7","text":"\u6574\u6570 \u662f\u4e00\u4e2a\u6ca1\u6709\u5c0f\u6570\u90e8\u5206\u7684\u6570\u5b57\u3002 \u957f\u5ea6 \u6709\u7b26\u53f7 \u65e0\u7b26\u53f7 8-bit i8 u8 16-bit i16 u16 32-bit i32 u32 64-bit i64 u64 128-bit i128 u128 arch isize usize isize \u548c usize \u7c7b\u578b\u4f9d\u8d56\u8fd0\u884c\u7a0b\u5e8f\u7684\u8ba1\u7b97\u673a\u67b6\u6784\uff1a64 \u4f4d\u67b6\u6784\u4e0a\u5b83\u4eec\u662f 64 \u4f4d\u7684\uff0c 32 \u4f4d\u67b6\u6784\u4e0a\u5b83\u4eec\u662f 32 \u4f4d\u7684\u3002 \u53ef\u4ee5\u4f7f\u7528\u4e0b\u9762\u8868\u683c\u4e2d\u7684\u4efb\u4f55\u4e00\u79cd\u5f62\u5f0f\u7f16\u5199\u6570\u5b57\u5b57\u9762\u503c\u3002 \u8bf7\u6ce8\u610f\u53ef\u4ee5\u662f\u591a\u79cd\u6570\u5b57\u7c7b\u578b\u7684\u6570\u5b57\u5b57\u9762\u503c\u5141\u8bb8\u4f7f\u7528\u7c7b\u578b\u540e\u7f00\uff0c\u4f8b\u5982 57u8 \u6765\u6307\u5b9a\u7c7b\u578b\uff0c\u540c\u65f6\u4e5f\u5141\u8bb8\u4f7f\u7528 _ \u505a\u4e3a\u5206\u9694\u7b26\u4ee5\u65b9\u4fbf\u8bfb\u6570\uff0c\u4f8b\u5982 1_000 \uff0c\u5b83\u7684\u503c\u4e0e\u4f60\u6307\u5b9a\u7684 1000 \u76f8\u540c\u3002 \u6570\u5b57\u5b57\u9762\u503c \u4f8b\u5b50 Decimal (\u5341\u8fdb\u5236) 98_222 Hex (\u5341\u516d\u8fdb\u5236) 0xff Octal (\u516b\u8fdb\u5236) 0o77 Binary (\u4e8c\u8fdb\u5236) 0b1111_0000 Byte (\u5355\u5b57\u8282\u5b57\u7b26)(\u4ec5\u9650\u4e8eu8) b'A' Rust \u7684\u9ed8\u8ba4\u7c7b\u578b\u901a\u5e38\u662f\u4e2a\u4e0d\u9519\u7684\u8d77\u70b9\uff0c\u6570\u5b57\u7c7b\u578b\u9ed8\u8ba4\u662f i32 \u3002 isize \u6216 usize \u4e3b\u8981\u4f5c\u4e3a\u67d0\u4e9b\u96c6\u5408\u7684\u7d22\u5f15\u3002 \u5176\u4ed6 \u53c2\u8003: \u6574\u5f62\u6ea2\u51fa","title":"\u6574\u578b"},{"location":"common-programing-concepts/#_8","text":"Rust \u4e5f\u6709\u4e24\u4e2a\u539f\u751f\u7684 \u6d6e\u70b9\u6570\uff08floating-point numbers\uff09\u7c7b\u578b\uff0c\u5b83\u4eec\u662f\u5e26\u5c0f\u6570\u70b9\u7684\u6570\u5b57\u3002Rust \u7684\u6d6e\u70b9\u6570\u7c7b\u578b\u662f f32 \u548c f64\uff0c\u5206\u522b\u5360 32 \u4f4d\u548c 64 \u4f4d\u3002\u9ed8\u8ba4\u7c7b\u578b\u662f f64\uff0c\u56e0\u4e3a\u5728\u73b0\u4ee3 CPU \u4e2d\uff0c\u5b83\u4e0e f32 \u901f\u5ea6\u51e0\u4e4e\u4e00\u6837\uff0c\u4e0d\u8fc7\u7cbe\u5ea6\u66f4\u9ad8\u3002\u6240\u6709\u7684\u6d6e\u70b9\u578b\u90fd\u662f\u6709\u7b26\u53f7\u7684\u3002 \u8fd9\u662f\u4e00\u4e2a\u5c55\u793a\u6d6e\u70b9\u6570\u7684\u5b9e\u4f8b\uff1a \u6587\u4ef6\u540d: src/main.rs fn main () { let x = 2.0 ; // f64 let y : f32 = 3.0 ; // f32 } \u6d6e\u70b9\u6570\u91c7\u7528 IEEE-754 \u6807\u51c6\u8868\u793a\u3002f32 \u662f\u5355\u7cbe\u5ea6\u6d6e\u70b9\u6570\uff0cf64 \u662f\u53cc\u7cbe\u5ea6\u6d6e\u70b9\u6570\u3002","title":"\u6d6e\u70b9\u578b"},{"location":"common-programing-concepts/#_9","text":"Rust \u4e2d\u7684\u6240\u6709\u6570\u5b57\u7c7b\u578b\u90fd\u652f\u6301\u57fa\u672c\u6570\u5b66\u8fd0\u7b97\uff1a\u52a0\u6cd5\u3001\u51cf\u6cd5\u3001\u4e58\u6cd5\u3001\u9664\u6cd5\u548c\u53d6\u4f59\u3002\u6574\u6570\u9664\u6cd5\u4f1a\u5411\u4e0b\u820d\u5165\u5230\u6700\u63a5\u8fd1\u7684\u6574\u6570\u3002\u4e0b\u9762\u7684\u4ee3\u7801\u5c55\u793a\u4e86\u5982\u4f55\u5728 let \u8bed\u53e5\u4e2d\u4f7f\u7528\u5b83\u4eec\uff1a \u6587\u4ef6\u540d: src/main.rs fn main () { // \u52a0\u6cd5 let sum = 5 + 10 ; // \u51cf\u6cd5 let difference = 95.5 - 4.3 ; // \u4e58\u6cd5 let product = 4 * 30 ; // \u9664\u6cd5 let quotient = 56.7 / 32.2 ; let floored = 2 / 3 ; // \u7ed3\u679c\u4e3a0 // \u53d6\u4f59 let remainder = 43 % 5 ; } \u8fd9\u4e9b\u8bed\u53e5\u4e2d\u7684\u6bcf\u4e2a\u8868\u8fbe\u5f0f\u4f7f\u7528\u4e86\u4e00\u4e2a\u6570\u5b66\u8fd0\u7b97\u7b26\u5e76\u8ba1\u7b97\u51fa\u4e86\u4e00\u4e2a\u503c\uff0c\u7136\u540e\u7ed1\u5b9a\u7ed9\u4e00\u4e2a\u53d8\u91cf\u3002 \u9644\u5f55 B \u5305\u542b Rust \u63d0\u4f9b\u7684\u6240\u6709\u8fd0\u7b97\u7b26\u7684\u5217\u8868\u3002","title":"\u6570\u503c\u8fd0\u7b97"},{"location":"common-programing-concepts/#_10","text":"\u6b63\u5982\u5176\u4ed6\u5927\u90e8\u5206\u7f16\u7a0b\u8bed\u8a00\u4e00\u6837\uff0cRust \u4e2d\u7684\u5e03\u5c14\u7c7b\u578b\u6709\u4e24\u4e2a\u53ef\u80fd\u7684\u503c\uff1atrue \u548c false\u3002Rust \u4e2d\u7684\u5e03\u5c14\u7c7b\u578b\u4f7f\u7528 bool \u8868\u793a\u3002\u4f8b\u5982\uff1a fn main () { let t = true ; let f : bool = false ; // with explicit type annotation }","title":"\u5e03\u5c14\u578b"},{"location":"common-programing-concepts/#_11","text":"Rust\u7684 char \u7c7b\u578b\u662f\u8bed\u8a00\u4e2d\u6700\u539f\u751f\u7684\u5b57\u6bcd\u7c7b\u578b\u3002\u4e0b\u9762\u662f\u4e00\u4e9b\u58f0\u660e char \u503c\u7684\u4f8b\u5b50\uff1a \u6587\u4ef6\u540d: src/main.rs fn main () { let c = 'z' ; let z : char = '\u2124' ; // with explicit type annotation let heart_eyed_cat = '\ud83d\ude3b' ; } \u6ce8\u610f\uff0c\u8fd9\u91cc\u7528\u5355\u5f15\u53f7\u58f0\u660e char \u5b57\u9762\u91cf\uff0c\u800c\u4e0e\u4e4b\u76f8\u53cd\u7684\u662f\uff0c\u4f7f\u7528 \u53cc\u5f15\u53f7 \u58f0\u660e\u5b57\u7b26\u4e32\u5b57\u9762\u91cf\u3002Rust \u7684 char \u7c7b\u578b\u7684\u5927\u5c0f\u4e3a\u56db\u4e2a\u5b57\u8282(four bytes)\uff0c\u5e76\u4ee3\u8868\u4e86\u4e00\u4e2a Unicode \u6807\u91cf\u503c\uff08Unicode Scalar Value\uff09\uff0c\u8fd9\u610f\u5473\u7740\u5b83\u53ef\u4ee5\u6bd4 ASCII \u8868\u793a\u66f4\u591a\u5185\u5bb9\u3002 \u5728 Rust \u4e2d\uff0c\u5e26\u53d8\u97f3\u7b26\u53f7\u7684\u5b57\u6bcd\uff08Accented letters\uff09\uff0c\u4e2d\u6587\u3001\u65e5\u6587\u3001\u97e9\u6587\u7b49\u5b57\u7b26\uff0cemoji\uff08\u7ed8\u6587\u5b57\uff09\u4ee5\u53ca\u96f6\u957f\u5ea6\u7684\u7a7a\u767d\u5b57\u7b26\u90fd\u662f\u6709\u6548\u7684 char \u503c\u3002 Unicode \u6807\u91cf\u503c\u5305\u542b\u4ece U+0000 \u5230 U+D7FF \u548c U+E000 \u5230 U+10FFFF \u5728\u5185\u7684\u503c \u3002 \u4e0d\u8fc7\uff0c\u201c\u5b57\u7b26\u201d \u5e76\u4e0d\u662f\u4e00\u4e2a Unicode \u4e2d\u7684\u6982\u5ff5\uff0c\u6240\u4ee5\u4eba\u76f4\u89c9\u4e0a\u7684 \u201c\u5b57\u7b26\u201d \u53ef\u80fd\u4e0e Rust \u4e2d\u7684 char \u5e76\u4e0d\u7b26\u5408\u3002 \u7b2c\u516b\u7ae0\u7684 \u201c \u4f7f\u7528\u5b57\u7b26\u4e32\u5b58\u50a8 UTF-8 \u7f16\u7801\u7684\u6587\u672c \u201d \u4e2d\u5c06\u8be6\u7ec6\u8ba8\u8bba\u8fd9\u4e2a\u4e3b\u9898\u3002","title":"\u5b57\u7b26\u7c7b\u578b"},{"location":"common-programing-concepts/#_12","text":"\u590d\u5408\u7c7b\u578b \uff08Compound types\uff09\u53ef\u4ee5\u5c06\u591a\u4e2a\u503c\u7ec4\u5408\u6210\u4e00\u4e2a\u7c7b\u578b\u3002Rust \u6709\u4e24\u4e2a\u539f\u751f\u7684\u590d\u5408\u7c7b\u578b\uff1a \u5143\u7ec4 \uff08tuple\uff09\u548c \u6570\u7ec4 \uff08array\uff09\u3002","title":"\u590d\u5408\u7c7b\u578b"},{"location":"common-programing-concepts/#_13","text":"\u5143\u7ec4\u662f\u4e00\u4e2a\u5c06\u591a\u4e2a\u5176\u4ed6\u7c7b\u578b\u7684\u503c\u7ec4\u5408\u8fdb\u4e00\u4e2a\u590d\u5408\u7c7b\u578b\u7684\u4e3b\u8981\u65b9\u5f0f\u3002 \u5143\u7ec4\u957f\u5ea6\u56fa\u5b9a\uff1a\u4e00\u65e6\u58f0\u660e\uff0c\u5176\u957f\u5ea6\u4e0d\u4f1a\u589e\u5927\u6216\u7f29\u5c0f\u3002 \u4f7f\u7528\u5305\u542b\u5728\u5706\u62ec\u53f7\u4e2d\u7684\u9017\u53f7\u5206\u9694\u7684\u503c\u5217\u8868\u6765\u521b\u5efa\u4e00\u4e2a\u5143\u7ec4\u3002 \u5143\u7ec4\u4e2d\u7684\u6bcf\u4e00\u4e2a\u4f4d\u7f6e\u90fd\u6709\u4e00\u4e2a\u7c7b\u578b\uff0c\u800c\u4e14\u8fd9\u4e9b\u4e0d\u540c\u503c\u7684\u7c7b\u578b\u4e5f\u4e0d\u5fc5\u662f\u76f8\u540c\u7684\u3002\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\u4f7f\u7528\u4e86\u53ef\u9009\u7684\u7c7b\u578b\u6ce8\u89e3\uff1a fn main () { let tup : ( i32 , f64 , u8 ) = ( 500 , 6.4 , 1 ); } tup \u53d8\u91cf\u7ed1\u5b9a\u5230\u6574\u4e2a\u5143\u7ec4\u4e0a\uff0c\u56e0\u4e3a\u5143\u7ec4\u662f\u4e00\u4e2a\u5355\u72ec\u7684\u590d\u5408\u5143\u7d20\u3002 \u4e3a\u4e86\u4ece\u5143\u7ec4\u4e2d\u83b7\u53d6\u5355\u4e2a\u503c\uff0c\u53ef\u4ee5\u4f7f\u7528 \u6a21\u5f0f\u5339\u914d \uff08pattern matching\uff09\u6765 \u89e3\u6784 \uff08destructure\uff09\u5143\u7ec4\u503c\uff0c\u50cf\u8fd9\u6837\uff1a fn main () { let tup = ( 500 , 6.4 , 1 ); // \u7a0b\u5e8f\u9996\u5148\u521b\u5efa\u4e86\u4e00\u4e2a\u5143\u7ec4\u5e76\u7ed1\u5b9a\u5230 tup \u53d8\u91cf\u4e0a let ( x , y , z ) = tup ; // \u63a5\u7740\u4f7f\u7528\u4e86 let \u548c\u4e00\u4e2a\u6a21\u5f0f\u5c06 tup \u5206\u6210\u4e86\u4e09\u4e2a\u4e0d\u540c\u7684\u53d8\u91cf\uff0cx\u3001y \u548c z\u3002 // \u8fd9\u53eb\u505a \u89e3\u6784\uff08destructuring\uff09\u56e0\u4e3a\u5b83\u5c06\u4e00\u4e2a\u5143\u7ec4\u62c6\u6210\u4e86\u4e09\u4e2a\u90e8\u5206\u3002 println! ( \"The value of y is: {y}\" ); // \u6700\u540e\uff0c\u7a0b\u5e8f\u6253\u5370\u51fa\u4e86 y \u7684\u503c\uff0c\u4e5f\u5c31\u662f 6.4\u3002 } \u4e5f\u53ef\u4ee5\u4f7f\u7528\u70b9\u53f7\uff08.\uff09\u540e\u8ddf\u503c\u7684\u7d22\u5f15\u6765\u76f4\u63a5\u8bbf\u95ee\u5b83\u4eec\u3002\u4f8b\u5982\uff1a \u6587\u4ef6\u540d: src/main.rs fn main () { let x : ( i32 , f64 , u8 ) = ( 500 , 6.4 , 1 ); let five_hundred = x . 0 ; let six_point_four = x . 1 ; let one = x . 2 ; } \u4e0d\u5e26\u4efb\u4f55\u503c\u7684\u5143\u7ec4\u6709\u4e2a\u7279\u6b8a\u7684\u540d\u79f0\uff0c\u53eb\u505a \u5355\u5143 \uff08unit\uff09 \u5143\u7ec4\u3002\u8fd9\u79cd\u503c\u4ee5\u53ca\u5bf9\u5e94\u7684\u7c7b\u578b\u90fd\u5199\u4f5c () \uff0c \u8868\u793a\u7a7a\u503c\u6216\u7a7a\u7684\u8fd4\u56de\u7c7b\u578b \u3002\u5982\u679c\u8868\u8fbe\u5f0f\u4e0d\u8fd4\u56de\u4efb\u4f55\u5176\u4ed6\u503c\uff0c\u5219\u4f1a\u9690\u5f0f\u8fd4\u56de\u5355\u5143\u503c\u3002","title":"\u5143\u7ec4\u7c7b\u578b"},{"location":"common-programing-concepts/#_14","text":"\u53e6\u4e00\u4e2a\u5305\u542b\u591a\u4e2a\u503c\u7684\u65b9\u5f0f\u662f \u6570\u7ec4 \uff08array\uff09\u3002\u4e0e\u5143\u7ec4\u4e0d\u540c\uff0c \u6570\u7ec4\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u7684\u7c7b\u578b\u5fc5\u987b\u76f8\u540c \u3002Rust \u4e2d\u7684\u6570\u7ec4\u4e0e\u4e00\u4e9b\u5176\u4ed6\u8bed\u8a00\u4e2d\u7684\u6570\u7ec4\u4e0d\u540c\uff0c Rust\u4e2d\u7684\u6570\u7ec4\u957f\u5ea6\u662f\u56fa\u5b9a\u7684 \u3002 \u5c06\u6570\u7ec4\u7684\u503c\u5199\u6210\u5728\u65b9\u62ec\u53f7\u5185\uff0c\u7528\u9017\u53f7\u5206\u9694\uff1a fn main () { let a = [ 1 , 2 , 3 , 4 , 5 ]; } \u5f53\u4f60\u60f3\u8981\u5728 \u6808 \uff08stack\uff09\u800c\u4e0d\u662f\u5728 \u5806 \uff08heap\uff09\u4e0a\u4e3a\u6570\u636e\u5206\u914d\u7a7a\u95f4\uff0c\u6216\u8005\u662f\u60f3\u8981\u786e\u4fdd\u603b\u662f\u6709\u56fa\u5b9a\u6570\u91cf\u7684\u5143\u7d20\u65f6\uff0c\u6570\u7ec4\u975e\u5e38\u6709\u7528\u3002 \u4f46\u662f\u6570\u7ec4\u5e76\u4e0d\u5982 vector \u7c7b\u578b\u7075\u6d3b\u3002 vector \u7c7b\u578b\u662f\u6807\u51c6\u5e93\u63d0\u4f9b\u7684\u4e00\u4e2a \u5141\u8bb8 \u589e\u957f\u548c\u7f29\u5c0f\u957f\u5ea6\u7684\u7c7b\u4f3c\u6570\u7ec4\u7684\u96c6\u5408\u7c7b\u578b\u3002 \u5f53\u4e0d\u786e\u5b9a\u662f\u5e94\u8be5\u4f7f\u7528\u6570\u7ec4\u8fd8\u662f vector \u7684\u65f6\u5019\uff0c\u90a3\u4e48\u5f88\u53ef\u80fd\u5e94\u8be5\u4f7f\u7528 vector \u3002 \u7b2c\u516b\u7ae0 \u4f1a\u8be6\u7ec6\u8ba8\u8bba vector \u3002 \u7136\u800c\uff0c\u5f53\u4f60\u786e\u5b9a\u5143\u7d20\u4e2a\u6570\u4e0d\u4f1a\u6539\u53d8\u65f6\uff0c\u6570\u7ec4\u4f1a\u66f4\u6709\u7528\u3002\u4f8b\u5982\uff0c\u5f53\u4f60\u5728\u4e00\u4e2a\u7a0b\u5e8f\u4e2d\u4f7f\u7528\u6708\u4efd\u540d\u5b57\u65f6\uff0c\u4f60\u66f4\u5e94\u8d8b\u5411\u4e8e\u4f7f\u7528\u6570\u7ec4\u800c\u4e0d\u662f vector\uff0c\u56e0\u4e3a\u4f60\u786e\u5b9a\u53ea\u4f1a\u670912\u4e2a\u5143\u7d20\u3002 let months = [ \"January\" , \"February\" , \"March\" , \"April\" , \"May\" , \"June\" , \"July\" , \"August\" , \"September\" , \"October\" , \"November\" , \"December\" ]; \u53ef\u4ee5\u50cf\u8fd9\u6837\u7f16\u5199\u6570\u7ec4\u7684\u7c7b\u578b\uff1a\u5728\u65b9\u62ec\u53f7\u4e2d\u5305\u542b\u6bcf\u4e2a\u5143\u7d20\u7684\u7c7b\u578b\uff0c\u540e\u8ddf\u5206\u53f7\uff0c\u518d\u540e\u8ddf\u6570\u7ec4\u5143\u7d20\u7684\u6570\u91cf\u3002 let a : [ i32 ; 5 ] = [ 1 , 2 , 3 , 4 , 5 ]; // i32 \u662f\u6bcf\u4e2a\u5143\u7d20\u7684\u7c7b\u578b\u3002\u5206\u53f7\u4e4b\u540e\uff0c\u6570\u5b57 5 \u8868\u660e\u8be5\u6570\u7ec4\u5305\u542b\u4e94\u4e2a\u5143\u7d20\u3002 let a = [ 3 ; 5 ]; // \u901a\u8fc7\u5728\u65b9\u62ec\u53f7\u4e2d\u6307\u5b9a\u521d\u59cb\u503c\u52a0\u5206\u53f7\u518d\u52a0\u5143\u7d20\u4e2a\u6570\u7684\u65b9\u5f0f\u6765\u521b\u5efa\u4e00\u4e2a\u6bcf\u4e2a\u5143\u7d20\u90fd\u4e3a\u76f8\u540c\u503c\u7684\u6570\u7ec4\uff1a // \u53d8\u91cf\u540d\u4e3a a \u7684\u6570\u7ec4\u5c06\u5305\u542b 5 \u4e2a\u5143\u7d20\uff0c\u8fd9\u4e9b\u5143\u7d20\u7684\u503c\u6700\u521d\u90fd\u5c06\u88ab\u8bbe\u7f6e\u4e3a 3\u3002 // \u8fd9\u79cd\u5199\u6cd5\u4e0e let a = [3, 3, 3, 3, 3]; \u6548\u679c\u76f8\u540c\uff0c\u4f46\u66f4\u7b80\u6d01\u3002","title":"\u6570\u7ec4\u7c7b\u578b"},{"location":"common-programing-concepts/#_15","text":"\u6570\u7ec4\u662f\u53ef\u4ee5\u5728\u6808(stack)\u4e0a\u5206\u914d\u7684\u5df2\u77e5\u56fa\u5b9a\u5927\u5c0f\u7684\u5355\u4e2a\u5185\u5b58\u5757\u3002\u53ef\u4ee5\u4f7f\u7528\u7d22\u5f15\u6765\u8bbf\u95ee\u6570\u7ec4\u7684\u5143\u7d20\uff0c\u50cf\u8fd9\u6837\uff1a fn main () { let a = [ 1 , 2 , 3 , 4 , 5 ]; let first = a [ 0 ]; let second = a [ 1 ]; }","title":"\u8bbf\u95ee\u6570\u7ec4\u5143\u7d20"},{"location":"common-programing-concepts/#_16","text":"\u8ba9\u6211\u4eec\u770b\u770b\u5982\u679c\u6211\u4eec\u8bbf\u95ee\u6570\u7ec4\u7ed3\u5c3e\u4e4b\u540e\u7684\u5143\u7d20\u4f1a\u53d1\u751f\u4ec0\u4e48\u5462\uff1f\u6bd4\u5982\u4f60\u6267\u884c\u4ee5\u4e0b\u4ee3\u7801\uff0c\u5b83\u4f7f\u7528\u7c7b\u4f3c\u4e8e\u7b2c 2 \u7ae0\u4e2d\u7684\u731c\u6570\u5b57\u6e38\u620f\u7684\u4ee3\u7801\u4ece\u7528\u6237\u90a3\u91cc\u83b7\u53d6\u6570\u7ec4\u7d22\u5f15\uff1a use std :: io ; fn main () { let a = [ 1 , 2 , 3 , 4 , 5 ]; println! ( \"\u8bf7\u8f93\u5165\u6570\u7ec4\u7d22\u5f15\" ); let mut index = String :: new (); io :: stdin () . read_line ( & mut index ) . expect ( \"\u8bfb\u53d6\u6570\u636e\u5931\u8d25\" ); let index : usize = index . trim () . parse () . expect ( \"\u8bf7\u8f93\u5165\u6570\u5b57\" ); let element = a [ index ]; println! ( \"\u6570\u7ec4\u4e2d\u7d22\u5f15\u4e3a {index} \u7684\u503c\u65f6: {element}\" ); } \u6b64\u4ee3\u7801\u7f16\u8bd1\u6210\u529f\u3002\u5982\u679c\u60a8\u4f7f\u7528 cargo run \u8fd0\u884c\u6b64\u4ee3\u7801\u5e76\u8f93\u5165 0\u30011\u30012\u30013 \u6216 4\uff0c\u7a0b\u5e8f\u5c06\u5728\u6570\u7ec4\u4e2d\u7684\u7d22\u5f15\u5904\u6253\u5370\u51fa\u76f8\u5e94\u7684\u503c\u3002\u5982\u679c\u4f60\u8f93\u5165\u4e00\u4e2a\u8d85\u8fc7\u6570\u7ec4\u672b\u7aef\u7684\u6570\u5b57\uff0c\u5982 10\uff0c\u4f60\u4f1a\u770b\u5230\u8fd9\u6837\u7684\u8f93\u51fa\uff1a thread 'main' panicked at 'index out of bounds: the len is 5 but the index is 10' , src/main.rs:19:19 note: run with ` RUST_BACKTRACE = 1 ` environment variable to display a backtrace \u7a0b\u5e8f\u5728\u7d22\u5f15\u64cd\u4f5c\u4e2d\u4f7f\u7528\u4e00\u4e2a\u65e0\u6548\u7684\u503c\u65f6\u5bfc\u81f4 \u8fd0\u884c\u65f6 \u9519\u8bef\u3002 \u7a0b\u5e8f\u5e26\u7740\u9519\u8bef\u4fe1\u606f\u9000\u51fa\uff0c\u5e76\u4e14\u6ca1\u6709\u6267\u884c\u6700\u540e\u7684 println! \u8bed\u53e5\u3002 \u5f53\u5c1d\u8bd5\u7528\u7d22\u5f15\u8bbf\u95ee\u4e00\u4e2a\u5143\u7d20\u65f6\uff0cRust \u4f1a\u68c0\u67e5\u6307\u5b9a\u7684\u7d22\u5f15\u662f\u5426\u5c0f\u4e8e\u6570\u7ec4\u7684\u957f\u5ea6\u3002 \u5982\u679c\u7d22\u5f15\u8d85\u51fa\u4e86\u6570\u7ec4\u957f\u5ea6\uff0cRust \u4f1a panic\uff0c\u8fd9\u662f Rust \u672f\u8bed\uff0c \u5b83\u7528\u4e8e\u7a0b\u5e8f\u56e0\u4e3a\u9519\u8bef\u800c\u9000\u51fa\u7684\u60c5\u51b5 \u3002 \u8fd9\u79cd\u68c0\u67e5\u5fc5\u987b\u5728\u8fd0\u884c\u65f6\u8fdb\u884c\uff0c\u7279\u522b\u662f\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u56e0\u4e3a\u7f16\u8bd1\u5668\u4e0d\u53ef\u80fd\u77e5\u9053\u7528\u6237\u5728\u4ee5\u540e\u8fd0\u884c\u4ee3\u7801\u65f6\u5c06\u8f93\u5165\u4ec0\u4e48\u503c\u3002 \u8fd9\u662f\u7b2c\u4e00\u4e2a\u5728\u5b9e\u6218\u4e2d\u9047\u5230\u7684 Rust \u5b89\u5168\u539f\u5219\u7684\u4f8b\u5b50\u3002 \u5728\u5f88\u591a\u5e95\u5c42\u8bed\u8a00\u4e2d\uff0c\u5e76\u6ca1\u6709\u8fdb\u884c\u8fd9\u7c7b\u68c0\u67e5\uff0c\u8fd9\u6837\u5f53\u63d0\u4f9b\u4e86\u4e00\u4e2a\u4e0d\u6b63\u786e\u7684\u7d22\u5f15\u65f6\uff0c\u5c31\u4f1a\u8bbf\u95ee\u65e0\u6548\u7684\u5185\u5b58\u3002 \u901a\u8fc7\u7acb\u5373\u9000\u51fa\u800c\u4e0d\u662f\u5141\u8bb8\u5185\u5b58\u8bbf\u95ee\u5e76\u7ee7\u7eed\u6267\u884c\uff0cRust \u8ba9\u4f60\u907f\u5f00\u6b64\u7c7b\u9519\u8bef\u3002 \u7b2c\u4e5d\u7ae0 \u4f1a\u66f4\u8be6\u7ec6\u5730\u8ba8\u8bba Rust \u7684\u9519\u8bef\u5904\u7406\u673a\u5236\uff0c\u4ee5\u53ca\u5982\u4f55\u7f16\u5199\u53ef\u8bfb\u6027\u5f3a\u800c\u53c8\u5b89\u5168\u7684\u4ee3\u7801\uff0c\u4f7f\u7a0b\u5e8f\u65e2\u4e0d\u4f1a panic \u4e5f\u4e0d\u4f1a\u5bfc\u81f4\u975e\u6cd5\u5185\u5b58\u8bbf\u95ee\u3002","title":"\u6570\u7ec4\u8d8a\u754c\u8bbf\u95ee"},{"location":"common-programing-concepts/#_17","text":"\u51fd\u6570\u5728 Rust \u4ee3\u7801\u4e2d\u975e\u5e38\u666e\u904d\u3002\u4f60\u5df2\u7ecf\u89c1\u8fc7\u8bed\u8a00\u4e2d\u6700\u91cd\u8981\u7684\u51fd\u6570\u4e4b\u4e00\uff1a main \u51fd\u6570\uff0c\u5b83\u662f\u5f88\u591a\u7a0b\u5e8f\u7684\u5165\u53e3\u70b9\u3002\u4f60\u4e5f\u89c1\u8fc7 fn \u5173\u952e\u5b57\uff0c\u5b83\u7528\u6765\u58f0\u660e\u65b0\u51fd\u6570\u3002 Rust \u4ee3\u7801\u4e2d\u7684\u51fd\u6570\u548c\u53d8\u91cf\u540d\u4f7f\u7528 snake case \u89c4\u8303\u98ce\u683c\u3002\u5728 snake case \u4e2d\uff0c \u6240\u6709\u5b57\u6bcd\u90fd\u662f\u5c0f\u5199\u5e76\u4f7f\u7528\u4e0b\u5212\u7ebf\u5206\u9694\u5355\u8bcd \u3002\u8fd9\u662f\u4e00\u4e2a\u5305\u542b\u51fd\u6570\u5b9a\u4e49\u793a\u4f8b\u7684\u7a0b\u5e8f\uff1a \u6587\u4ef6\u540d: src/main.rs fn main () { println! ( \"Hello, world!\" ); another_function (); } // \u901a\u8fc7\u8f93\u5165 fn \u540e\u9762\u8ddf\u7740\u51fd\u6570\u540d\u548c\u4e00\u5bf9\u5706\u62ec\u53f7\u6765\u5b9a\u4e49\u51fd\u6570\u3002\u5927\u62ec\u53f7\u544a\u8bc9\u7f16\u8bd1\u5668\u54ea\u91cc\u662f\u51fd\u6570\u4f53\u7684\u5f00\u59cb\u548c\u7ed3\u5c3e\u3002 fn another_function () { println! ( \"Another function.\" ); } // main \u51fd\u6570\u4e2d\u7684\u4ee3\u7801\u4f1a\u6309\u987a\u5e8f\u6267\u884c\u3002\u9996\u5148\uff0c\u6253\u5370 \u201cHello, world!\u201d \u4fe1\u606f\uff0c\u7136\u540e\u8c03\u7528 another_function \u51fd\u6570\u5e76\u6253\u5370\u5b83\u7684\u4fe1\u606f\u3002 \u53ef\u4ee5\u4f7f\u7528\u51fd\u6570\u540d\u540e\u8ddf\u5706\u62ec\u53f7\u6765\u8c03\u7528\u6211\u4eec\u5b9a\u4e49\u8fc7\u7684\u4efb\u610f\u51fd\u6570\u3002 \u56e0\u4e3a\u7a0b\u5e8f\u4e2d\u5df2\u5b9a\u4e49 another_function \u51fd\u6570\uff0c\u6240\u4ee5\u53ef\u4ee5\u5728 main \u51fd\u6570\u4e2d\u8c03\u7528\u5b83\u3002\u6ce8\u610f\uff0c \u6e90\u7801\u4e2d another_function \u5b9a\u4e49\u5728 main \u51fd\u6570 \u4e4b\u540e\uff1b\u4e5f\u53ef\u4ee5\u5b9a\u4e49\u5728\u4e4b\u524d \u3002 Rust \u4e0d\u5173\u5fc3\u51fd\u6570\u5b9a\u4e49\u6240\u5728\u7684\u4f4d\u7f6e\uff0c\u53ea\u8981\u51fd\u6570\u88ab\u8c03\u7528\u65f6\u51fa\u73b0\u5728\u8c03\u7528\u4e4b\u5904\u53ef\u89c1\u7684\u4f5c\u7528\u57df\u5185\u5c31\u884c\u3002","title":"\u51fd\u6570"},{"location":"common-programing-concepts/#_18","text":"\u6211\u4eec\u53ef\u4ee5\u5b9a\u4e49\u4e3a\u62e5\u6709 \u53c2\u6570 \uff08parameters\uff09\u7684\u51fd\u6570\uff0c\u53c2\u6570\u662f\u7279\u6b8a\u53d8\u91cf\uff0c\u662f\u51fd\u6570\u7b7e\u540d\u7684\u4e00\u90e8\u5206\u3002\u5f53\u51fd\u6570\u62e5\u6709\u53c2\u6570\uff08\u5f62\u53c2\uff09\u65f6\uff0c\u53ef\u4ee5\u4e3a\u8fd9\u4e9b\u53c2\u6570\u63d0\u4f9b\u5177\u4f53\u7684\u503c\uff08\u5b9e\u53c2\uff09\u3002 \u6280\u672f\u4e0a\u8bb2\uff0c\u8fd9\u4e9b\u5177\u4f53\u503c\u88ab\u79f0\u4e3a\u53c2\u6570\uff08arguments\uff09\uff0c\u4f46\u662f\u5728\u65e5\u5e38\u4ea4\u6d41\u4e2d\uff0c\u4eba\u4eec\u503e\u5411\u4e8e\u4e0d\u533a\u5206\u4f7f\u7528 parameter \u548c argument \u6765\u8868\u793a\u51fd\u6570\u5b9a\u4e49\u4e2d\u7684\u53d8\u91cf\u6216\u8c03\u7528\u51fd\u6570\u65f6\u4f20\u5165\u7684\u5177\u4f53\u503c\u3002 \u5728\u8fd9\u7248 another_function \u4e2d\uff0c\u6211\u4eec\u589e\u52a0\u4e86\u4e00\u4e2a\u53c2\u6570\uff1a fn main () { another_function ( 5 ); // \u6211\u4eec\u5c06 5 \u4f20\u7ed9 another_function \u65f6\uff0c // println! \u5b8f\u4f1a\u628a 5 \u653e\u5728\u683c\u5f0f\u5b57\u7b26\u4e32\u4e2d\u5305\u542b x \u7684\u90a3\u5bf9\u82b1\u62ec\u53f7\u7684\u4f4d\u7f6e\u3002 } // another_function \u7684\u58f0\u660e\u4e2d\u6709\u4e00\u4e2a\u547d\u540d\u4e3a x \u7684\u53c2\u6570\u3002 // x \u7684\u7c7b\u578b\u88ab\u6307\u5b9a\u4e3a i32\u3002 fn another_function ( x : i32 ) { println! ( \"The value of x is: {x}\" ); } \u5728\u51fd\u6570\u7b7e\u540d\u4e2d\uff0c \u5fc5\u987b \u58f0\u660e\u6bcf\u4e2a\u53c2\u6570\u7684\u7c7b\u578b\u3002 \u8fd9\u662f Rust \u8bbe\u8ba1\u4e2d\u4e00\u4e2a\u7ecf\u8fc7\u614e\u91cd\u8003\u8651\u7684\u51b3\u5b9a\uff1a \u8981\u6c42\u5728\u51fd\u6570\u5b9a\u4e49\u4e2d\u63d0\u4f9b\u7c7b\u578b\u6ce8\u89e3 \uff0c\u610f\u5473\u7740\u7f16\u8bd1\u5668\u518d\u4e5f\u4e0d\u9700\u8981\u4f60\u5728\u4ee3\u7801\u7684\u5176\u4ed6\u5730\u65b9\u6ce8\u660e\u7c7b\u578b\u6765\u6307\u51fa\u4f60\u7684\u610f\u56fe\u3002 \u800c\u4e14\uff0c\u5728\u77e5\u9053\u51fd\u6570\u9700\u8981\u4ec0\u4e48\u7c7b\u578b\u540e\uff0c\u7f16\u8bd1\u5668\u5c31\u80fd\u591f\u7ed9\u51fa\u66f4\u6709\u7528\u7684\u9519\u8bef\u6d88\u606f\u3002 \u5f53\u5b9a\u4e49\u591a\u4e2a\u53c2\u6570\u65f6\uff0c\u4f7f\u7528\u9017\u53f7\u5206\u9694\uff0c\u50cf\u8fd9\u6837\uff1a fn main () { print_labeled_measurement ( 5 , 'h' ); } // \u5b83\u6709\u4e24\u4e2a\u53c2\u6570\u3002\u7b2c\u4e00\u4e2a\u53c2\u6570\u540d\u4e3a value\uff0c \u7c7b\u578b\u662f i32\u3002 // \u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f unit_label \uff0c\u7c7b\u578b\u662f char\u3002 fn print_labeled_measurement ( value : i32 , unit_label : char ) { println! ( \"The measurement is: {value}{unit_label}\" ); }","title":"\u53c2\u6570"},{"location":"common-programing-concepts/#_19","text":"\u51fd\u6570\u4f53\u7531\u4e00\u7cfb\u5217\u7684 \u8bed\u53e5 \u548c\u4e00\u4e2a\u53ef\u9009\u7684 \u7ed3\u5c3e\u8868\u8fbe\u5f0f \u6784\u6210\u3002 \u76ee\u524d\u4e3a\u6b62\uff0c\u6211\u4eec\u63d0\u5230\u7684\u51fd\u6570\u8fd8\u4e0d\u5305\u542b\u7ed3\u5c3e\u8868\u8fbe\u5f0f\uff0c\u4e0d\u8fc7\u4f60\u5df2\u7ecf\u89c1\u8fc7\u4f5c\u4e3a\u8bed\u53e5\u4e00\u90e8\u5206\u7684\u8868\u8fbe\u5f0f\u3002 \u56e0\u4e3a Rust \u662f\u4e00\u95e8\u57fa\u4e8e \u8868\u8fbe\u5f0f \uff08expression-based\uff09\u7684\u8bed\u8a00\uff0c\u8fd9\u662f\u4e00\u4e2a\u9700\u8981\u7406\u89e3\u7684\uff08\u4e0d\u540c\u4e8e\u5176\u4ed6\u8bed\u8a00\uff09\u91cd\u8981\u533a\u522b\u3002 \u5176\u4ed6\u8bed\u8a00\u5e76\u6ca1\u6709\u8fd9\u6837\u7684\u533a\u522b\uff0c\u6240\u4ee5\u8ba9\u6211\u4eec\u770b\u770b\u8bed\u53e5\u4e0e\u8868\u8fbe\u5f0f\u6709\u4ec0\u4e48\u533a\u522b\u4ee5\u53ca\u8fd9\u4e9b\u533a\u522b\u662f\u5982\u4f55\u5f71\u54cd\u51fd\u6570\u4f53\u7684\u3002 \u8bed\u53e5 \uff08Statements\uff09\u662f\u6267\u884c\u4e00\u4e9b\u64cd\u4f5c\u4f46\u4e0d\u8fd4\u56de\u503c\u7684\u6307\u4ee4 \u3002 \u8868\u8fbe\u5f0f \uff08Expressions\uff09\u8ba1\u7b97\u5e76\u4ea7\u751f\u4e00\u4e2a\u503c\u3002 \u8ba9\u6211\u4eec\u770b\u4e00\u4e9b\u4f8b\u5b50\u3002 \u5b9e\u9645\u4e0a\uff0c\u6211\u4eec\u5df2\u7ecf\u4f7f\u7528\u8fc7\u8bed\u53e5\u548c\u8868\u8fbe\u5f0f\u3002\u4f7f\u7528 let \u5173\u952e\u5b57\u521b\u5efa\u53d8\u91cf\u5e76\u7ed1\u5b9a\u4e00\u4e2a\u503c\u662f\u4e00\u4e2a\u8bed\u53e5\u3002\u5728\u4e0b\u9762\u793a\u4f8b \u4e2d\uff0c let y = 6; \u662f\u4e00\u4e2a\u8bed\u53e5\u3002 fn main () { let y = 6 ; } // \u51fd\u6570\u5b9a\u4e49\u4e5f\u662f\u8bed\u53e5\uff0c\u4e0a\u9762\u6574\u4e2a\u4f8b\u5b50\u672c\u8eab\u5c31\u662f\u4e00\u4e2a\u8bed\u53e5\u3002 \u8bed\u53e5\u4e0d\u8fd4\u56de\u503c\u3002\u56e0\u6b64\uff0c\u4e0d\u80fd\u628a let \u8bed\u53e5\u8d4b\u503c\u7ed9\u53e6\u4e00\u4e2a\u53d8\u91cf\uff0c\u6bd4\u5982\u4e0b\u9762\u7684\u4f8b\u5b50\u5c1d\u8bd5\u505a\u7684\uff0c\u4f1a\u4ea7\u751f\u4e00\u4e2a\u9519\u8bef\uff1a fn main () { let x = ( let y = 6 ); } \u5f53\u8fd0\u884c\u8fd9\u4e2a\u7a0b\u5e8f\u65f6\uff0c\u4f1a\u5f97\u5230\u5982\u4e0b\u9519\u8bef\uff1a $ cargo run Compiling functions v0.1.0 ( file:///projects/functions ) error: expected expression, found statement ( ` let ` ) --> src/main.rs:2:14 | 2 | let x = ( let y = 6 ) ; | ^^^^^^^^^ | = note: variable declaration using ` let ` is a statement error [ E0658 ] : ` let ` expressions in this position are unstable --> src/main.rs:2:14 | 2 | let x = ( let y = 6 ) ; | ^^^^^^^^^ | = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information warning: unnecessary parentheses around assigned value --> src/main.rs:2:13 | 2 | let x = ( let y = 6 ) ; | ^ ^ | = note: ` #[warn(unused_parens)]` on by default help: remove these parentheses | 2 - let x = ( let y = 6 ) ; 2 + let x = let y = 6 ; | For more information about this error, try ` rustc --explain E0658 ` . warning: ` functions ` ( bin \"functions\" ) generated 1 warning error: could not compile ` functions ` due to 2 previous errors ; 1 warning emitted let y = 6 \u8bed\u53e5\u5e76\u4e0d\u8fd4\u56de\u503c\uff0c\u6240\u4ee5\u6ca1\u6709\u53ef\u4ee5\u7ed1\u5b9a\u5230 x \u4e0a\u7684\u503c\u3002 \u8fd9\u4e0e\u5176\u4ed6\u8bed\u8a00\u4e0d\u540c\uff0c\u4f8b\u5982 C \u548c Ruby\uff0c\u5b83\u4eec\u7684\u8d4b\u503c\u8bed\u53e5\u4f1a\u8fd4\u56de\u6240\u8d4b\u7684\u503c\u3002 \u5728\u8fd9\u4e9b\u8bed\u8a00\u4e2d\uff0c\u53ef\u4ee5\u8fd9\u4e48\u5199 x = y = 6\uff0c\u8fd9\u6837 x \u548c y \u7684\u503c\u90fd\u662f 6\uff1bRust \u4e2d\u4e0d\u80fd\u8fd9\u6837\u5199\u3002 \u8868\u8fbe\u5f0f\u4f1a\u8ba1\u7b97\u51fa\u4e00\u4e2a\u503c\uff0c\u5e76\u4e14\u4f60\u5c06\u7f16\u5199\u7684\u5927\u90e8\u5206 Rust \u4ee3\u7801\u662f\u7531\u8868\u8fbe\u5f0f\u7ec4\u6210\u7684\u3002 \u8003\u8651\u4e00\u4e2a\u6570\u5b66\u8fd0\u7b97\uff0c\u6bd4\u5982 5 + 6\uff0c\u8fd9\u662f\u4e00\u4e2a\u8868\u8fbe\u5f0f\u5e76\u8ba1\u7b97\u51fa\u503c 11\u3002 \u8868\u8fbe\u5f0f\u53ef\u4ee5\u662f\u8bed\u53e5\u7684\u4e00\u90e8\u5206\uff1a\u5728\u4e0a\u9762\u4e2d\uff0c\u8bed\u53e5 let y = 6; \u4e2d\u7684 6 \u662f\u4e00\u4e2a\u8868\u8fbe\u5f0f\uff0c\u5b83\u8ba1\u7b97\u51fa\u7684\u503c\u662f 6\u3002 \u51fd\u6570\u8c03\u7528\u662f\u4e00\u4e2a\u8868\u8fbe\u5f0f \u3002 \u5b8f\u8c03\u7528\u662f\u4e00\u4e2a\u8868\u8fbe\u5f0f \u3002 \u7528\u5927\u62ec\u53f7\u521b\u5efa\u7684\u4e00\u4e2a\u65b0\u7684\u5757\u4f5c\u7528\u57df\u4e5f\u662f\u4e00\u4e2a\u8868\u8fbe\u5f0f \uff0c\u4f8b\u5982\uff1a fn main () { let y = { let x = 3 ; x + 1 }; // \u662f\u4e00\u4e2a\u4ee3\u7801\u5757\uff0c\u5b83\u7684\u503c\u662f 4 // \u8fd9\u4e2a\u503c\u4f5c\u4e3a let \u8bed\u53e5\u7684\u4e00\u90e8\u5206\u88ab\u7ed1\u5b9a\u5230 y \u4e0a\u3002 // \u6ce8\u610f x+1 \u8fd9\u4e00\u884c\u5728\u7ed3\u5c3e\u6ca1\u6709\u5206\u53f7\uff0c\u4e0e\u4f60\u89c1\u8fc7\u7684\u5927\u90e8\u5206\u4ee3\u7801\u884c\u4e0d\u540c\u3002 // \u8868\u8fbe\u5f0f\u7684\u7ed3\u5c3e\u6ca1\u6709\u5206\u53f7\u3002 // \u5982\u679c\u5728\u8868\u8fbe\u5f0f\u7684\u7ed3\u5c3e\u52a0\u4e0a\u5206\u53f7\uff0c\u5b83\u5c31\u53d8\u6210\u4e86\u8bed\u53e5\uff0c\u800c\u8bed\u53e5\u4e0d\u4f1a\u8fd4\u56de\u503c\u3002 // \u5728\u63a5\u4e0b\u6765\u63a2\u7d22\u5177\u6709\u8fd4\u56de\u503c\u7684\u51fd\u6570\u548c\u8868\u8fbe\u5f0f\u65f6\u8981\u8c28\u8bb0\u8fd9\u4e00\u70b9\u3002 println! ( \"The value of y is: {y}\" ); }","title":"\u8bed\u53e5\u548c\u8868\u8fbe\u5f0f"},{"location":"common-programing-concepts/#_20","text":"\u51fd\u6570\u53ef\u4ee5\u5411\u8c03\u7528\u5b83\u7684\u4ee3\u7801\u8fd4\u56de\u503c\u3002\u6211\u4eec \u5e76\u4e0d\u5bf9\u8fd4\u56de\u503c\u547d\u540d\uff0c\u4f46\u8981\u5728\u7bad\u5934\uff08->\uff09\u540e\u58f0\u660e\u5b83\u7684\u7c7b\u578b \u3002 \u5728 Rust \u4e2d\uff0c \u51fd\u6570\u7684\u8fd4\u56de\u503c\u7b49\u540c\u4e8e\u51fd\u6570\u4f53\u6700\u540e\u4e00\u4e2a\u8868\u8fbe\u5f0f\u7684\u503c \u3002 \u4f7f\u7528 return \u5173\u952e\u5b57\u548c\u6307\u5b9a\u503c\uff0c\u53ef\u4ece\u51fd\u6570\u4e2d\u63d0\u524d\u8fd4\u56de\uff1b \u4f46\u5927\u90e8\u5206\u51fd\u6570\u9690\u5f0f\u7684\u8fd4\u56de\u6700\u540e\u7684\u8868\u8fbe\u5f0f\u3002 \u8fd9\u662f\u4e00\u4e2a\u6709\u8fd4\u56de\u503c\u7684\u51fd\u6570\u7684\u4f8b\u5b50\uff1a // \u5728 five \u51fd\u6570\u4e2d\u6ca1\u6709\u51fd\u6570\u8c03\u7528\u3001\u5b8f\u3001\u751a\u81f3\u6ca1\u6709 let \u8bed\u53e5 \u2014\u2014 \u53ea\u6709\u6570\u5b57 5\u3002 // \u8fd9\u5728 Rust \u4e2d\u662f\u4e00\u4e2a\u5b8c\u5168\u6709\u6548\u7684\u51fd\u6570\u3002 // \u6ce8\u610f\uff0c\u4e5f\u6307\u5b9a\u4e86\u51fd\u6570\u8fd4\u56de\u503c\u7684\u7c7b\u578b\uff0c\u5c31\u662f -> i32\u3002 fn five () -> i32 { 5 // five \u51fd\u6570\u6ca1\u6709\u53c2\u6570\u5e76\u5b9a\u4e49\u4e86\u8fd4\u56de\u503c\u7c7b\u578b\uff0c\u4e0d\u8fc7\u51fd\u6570\u4f53\u53ea\u6709\u5355\u5355\u4e00\u4e2a 5 \u4e5f\u6ca1\u6709\u5206\u53f7\uff0c\u56e0\u4e3a\u8fd9\u662f\u4e00\u4e2a\u8868\u8fbe\u5f0f\uff0c\u6211\u4eec\u60f3\u8981\u8fd4\u56de\u5b83\u7684\u503c\u3002 } fn main () { // \u8fd9\u4e00\u884c\u8868\u660e\u6211\u4eec\u4f7f\u7528\u51fd\u6570\u7684\u8fd4\u56de\u503c\u521d\u59cb\u5316\u4e00\u4e2a\u53d8\u91cf\u3002 // \u56e0\u4e3a five \u51fd\u6570\u8fd4\u56de 5\uff0c\u8fd9\u4e00\u884c\u4e0e\u4ee3\u7801 let x = 5; \u76f8\u540c let x = five (); println! ( \"The value of x is: {x}\" ); } \u8ba9\u6211\u4eec\u770b\u770b\u53e6\u4e00\u4e2a\u4f8b\u5b50\uff1a fn main () { let x = plus_one ( 5 ); println! ( \"The value of x is: {x}\" ); } fn plus_one ( x : i32 ) -> i32 { x + 1 // \u5982\u679c\u5728\u5305\u542b x + 1 \u7684\u884c\u5c3e\u52a0\u4e0a\u4e00\u4e2a\u5206\u53f7\uff0c\u628a\u5b83\u4ece\u8868\u8fbe\u5f0f\u53d8\u6210\u8bed\u53e5\uff0c\u6211\u4eec\u5c06\u770b\u5230\u4e00\u4e2a\u9519\u8bef\u3002 }","title":"\u5177\u6709\u8fd4\u56de\u503c\u7684\u51fd\u6570"},{"location":"common-programing-concepts/#_21","text":"\u7a0b\u5e8f\u5458\u5728\u6e90\u7801\u4e2d\u7559\u4e0b \u6ce8\u91ca \uff08comments\uff09\uff0c\u7f16\u8bd1\u5668\u4f1a\u5ffd\u7565\u5b83\u4eec\uff0c\u4e0d\u8fc7\u9605\u8bfb\u4ee3\u7801\u7684\u4eba\u53ef\u80fd\u89c9\u5f97\u6709\u7528\u3002","title":"\u6ce8\u91ca"},{"location":"common-programing-concepts/#_22","text":"\u60ef\u7528\u7684\u6ce8\u91ca\u6837\u5f0f\u662f\u4ee5\u4e24\u4e2a\u659c\u6760\u5f00\u59cb\u6ce8\u91ca\uff0c\u5e76\u6301\u7eed\u5230\u672c\u884c\u7684\u7ed3\u5c3e\u3002\u5bf9\u4e8e\u8d85\u8fc7\u4e00\u884c\u7684\u6ce8\u91ca\uff0c\u9700\u8981\u5728\u6bcf\u4e00\u884c\u524d\u90fd\u52a0\u4e0a // // So we\u2019re doing something complicated here, long enough that we need // multiple lines of comments to do it! Whew! Hopefully, this comment will // explain what\u2019s going on. \u6ce8\u91ca\u4e5f\u53ef\u4ee5\u653e\u5728\u5305\u542b\u4ee3\u7801\u7684\u884c\u7684\u672b\u5c3e\uff1a fn main () { let lucky_number = 7 ; // I\u2019m feeling lucky today }","title":"\u5355\u884c\u6ce8\u91ca"},{"location":"common-programing-concepts/#_23","text":"","title":"\u6587\u6863\u6ce8\u91ca"},{"location":"common-programing-concepts/#_24","text":"\u6839\u636e\u6761\u4ef6\u662f\u5426\u4e3a\u771f\u6765\u51b3\u5b9a\u662f\u5426\u6267\u884c\u67d0\u4e9b\u4ee3\u7801\uff0c\u4ee5\u53ca\u6839\u636e\u6761\u4ef6\u662f\u5426\u4e3a\u771f\u6765\u91cd\u590d\u8fd0\u884c\u4e00\u6bb5\u4ee3\u7801\u7684\u80fd\u529b\u662f\u5927\u90e8\u5206\u7f16\u7a0b\u8bed\u8a00\u7684\u57fa\u672c\u7ec4\u6210\u90e8\u5206\u3002","title":"\u63a7\u5236\u6d41"},{"location":"common-programing-concepts/#if","text":"if \u8868\u8fbe\u5f0f\u5141\u8bb8\u6839\u636e\u6761\u4ef6\u6267\u884c\u4e0d\u540c\u7684\u4ee3\u7801\u5206\u652f\u3002 fn main () { let number = 3 ; // \u6240\u6709\u7684 if \u8868\u8fbe\u5f0f\u90fd\u4ee5 if \u5173\u952e\u5b57\u5f00\u5934\uff0c\u5176\u540e\u8ddf\u4e00\u4e2a\u6761\u4ef6\u3002 if number < 5 { // \u5728\u6761\u4ef6\u4e3a\u771f\u65f6\u5e0c\u671b\u6267\u884c\u7684\u4ee3\u7801\u5757\u4f4d\u4e8e\u7d27\u8ddf\u6761\u4ef6\u4e4b\u540e\u7684\u5927\u62ec\u53f7\u4e2d\u3002 println! ( \"condition was true\" ); } else { // \u4e00\u4e2a\u53ef\u9009\u7684 else \u8868\u8fbe\u5f0f\u6765\u63d0\u4f9b\u4e00\u4e2a\u5728\u6761\u4ef6\u4e3a\u5047\u65f6\u5e94\u5f53\u6267\u884c\u7684\u4ee3\u7801\u5757 println! ( \"condition was false\" ); } } \u503c\u5f97\u6ce8\u610f\u7684\u662f\u4ee3\u7801\u4e2d\u7684\u6761\u4ef6 \u5fc5\u987b \u662f bool \u503c\u3002\u5982\u679c\u6761\u4ef6\u4e0d\u662f bool \u503c\uff0c\u6211\u4eec\u5c06\u5f97\u5230\u4e00\u4e2a\u9519\u8bef\u3002 fn main () { let number = 3 ; // \u4f1a\u62a5\uff0cexpected `bool`, found integer \u9519\u8bef\u3002 // Rust \u5e76\u4e0d\u4f1a\u5c1d\u8bd5\u81ea\u52a8\u5730\u5c06\u975e\u5e03\u5c14\u503c\u8f6c\u6362\u4e3a\u5e03\u5c14\u503c\u3002 // \u5fc5\u987b\u603b\u662f\u663e\u5f0f\u5730\u4f7f\u7528\u5e03\u5c14\u503c\u4f5c\u4e3a if \u7684\u6761\u4ef6\u3002 if number { println! ( \"number was three\" ); } }","title":"if\u8868\u8fbe\u5f0f"},{"location":"common-programing-concepts/#else-if","text":"\u53ef\u4ee5\u5c06 else if \u8868\u8fbe\u5f0f\u4e0e if \u548c else \u7ec4\u5408\u6765\u5b9e\u73b0\u591a\u91cd\u6761\u4ef6\u3002 fn main () { let number = 6 ; // \u6309\u987a\u5e8f\u68c0\u67e5\u6bcf\u4e2a if \u8868\u8fbe\u5f0f\u5e76\u6267\u884c\u7b2c\u4e00\u4e2a\u6761\u4ef6\u4e3a\u771f\u7684\u4ee3\u7801\u5757\u3002 if number % 4 == 0 { println! ( \"number is divisible by 4\" ); } else if number % 3 == 0 { println! ( \"number is divisible by 3\" ); } else if number % 2 == 0 { println! ( \"number is divisible by 2\" ); } else { println! ( \"number is not divisible by 4, 3, or 2\" ); } // Rust \u53ea\u4f1a\u6267\u884c\u7b2c\u4e00\u4e2a\u6761\u4ef6\u4e3a\u771f\u7684\u4ee3\u7801\u5757\uff0c\u5e76\u4e14\u4e00\u65e6\u5b83\u627e\u5230\u4e00\u4e2a\u4ee5\u540e\uff0c\u751a\u81f3\u90fd\u4e0d\u4f1a\u68c0\u67e5\u5269\u4e0b\u7684\u6761\u4ef6\u4e86\u3002 } \u4f7f\u7528\u8fc7\u591a\u7684 else if \u8868\u8fbe\u5f0f\u4f1a\u4f7f\u4ee3\u7801\u663e\u5f97\u6742\u4e71\u65e0\u7ae0\uff0c\u6240\u4ee5\u5982\u679c\u6709\u591a\u4e8e\u4e00\u4e2a else if \u8868\u8fbe\u5f0f\uff0c\u6700\u597d\u91cd\u6784\u4ee3\u7801\u3002 \u4e3a\u6b64\uff0c\u7b2c\u516d\u7ae0\u4f1a\u4ecb\u7ecd\u4e00\u4e2a\u5f3a\u5927\u7684 Rust \u5206\u652f\u7ed3\u6784\uff08branching construct\uff09\uff0c\u53eb\u505a match \u3002","title":"else if \u8868\u8fbe\u5f0f"},{"location":"common-programing-concepts/#letif","text":"\u56e0\u4e3a if \u662f\u4e00\u4e2a\u8868\u8fbe\u5f0f\uff0c\u53ef\u4ee5\u5728 let \u8bed\u53e5\u7684\u53f3\u4fa7\u4f7f\u7528\u5b83\uff0c fn main () { let condition = true ; let number = if condition { 5 } else { 6 }; // \u5c06 if \u8868\u8fbe\u5f0f\u7684\u8fd4\u56de\u503c\u8d4b\u7ed9\u4e00\u4e2a\u53d8\u91cf // \u4ee3\u7801\u5757\u7684\u503c\u662f\u5176\u6700\u540e\u4e00\u4e2a\u8868\u8fbe\u5f0f\u7684\u503c\uff0c\u800c\u6570\u5b57\u672c\u8eab\u5c31\u662f\u4e00\u4e2a\u8868\u8fbe\u5f0f\u3002 println! ( \"The value of number is: {number}\" ); } \u7c7b\u578b\u9700\u7edf\u4e00 fn main () { let condition = true ; let number = if condition { 5 } else { \"six\" }; // \u7c7b\u578b\u4e0d\u7edf\u4e00\uff0c\u4f1a\u62a5\u9519\uff0cexpected integer, found `&str` println! ( \"The value of number is: {number}\" ); }","title":"let\u4e2d\u7684if"},{"location":"common-programing-concepts/#_25","text":"\u591a\u6b21\u6267\u884c\u540c\u4e00\u6bb5\u4ee3\u7801\u662f\u5f88\u5e38\u7528\u7684\uff0cRust \u4e3a\u6b64\u63d0\u4f9b\u4e86\u591a\u79cd \u5faa\u73af\uff08loops\uff09\u3002","title":"\u5faa\u73af\u8868\u8fbe\u5f0f"},{"location":"common-programing-concepts/#loop","text":"loop \u5173\u952e\u5b57\u544a\u8bc9 Rust \u4e00\u904d\u53c8\u4e00\u904d\u5730\u6267\u884c\u4e00\u6bb5\u4ee3\u7801\u76f4\u5230\u4f60\u660e\u786e\u8981\u6c42\u505c\u6b62\u3002 fn main () { loop { // \u4f1a\u770b\u5230\u8fde\u7eed\u7684\u53cd\u590d\u6253\u5370 again!\uff0c\u76f4\u5230\u6211\u4eec\u624b\u52a8\u505c\u6b62\u7a0b\u5e8f\u3002 // \u5927\u90e8\u5206\u7ec8\u7aef\u90fd\u652f\u6301\u4e00\u4e2a\u5feb\u6377\u952e\uff0cctrl-c\uff0c\u6765\u7ec8\u6b62\u4e00\u4e2a\u9677\u5165\u65e0\u9650\u5faa\u73af\u7684\u7a0b\u5e8f\u3002 println! ( \"again!\" ); } } break \u5173\u952e\u5b57\u6765\u544a\u8bc9\u7a0b\u5e8f\u4f55\u65f6\u505c\u6b62\u5faa\u73af\u3002 continue \u5173\u952e\u5b57\u544a\u8bc9\u7a0b\u5e8f\u8df3\u8fc7\u8fd9\u4e2a\u5faa\u73af\u8fed\u4ee3\u4e2d\u7684\u4efb\u4f55\u5269\u4f59\u4ee3\u7801\uff0c\u5e76\u8f6c\u5230\u4e0b\u4e00\u4e2a\u8fed\u4ee3\u3002","title":"loop \u5faa\u73af"},{"location":"common-programing-concepts/#_26","text":"loop \u7684\u4e00\u4e2a\u7528\u4f8b\u662f\u91cd\u8bd5\u53ef\u80fd\u4f1a\u5931\u8d25\u7684\u64cd\u4f5c\uff0c\u6bd4\u5982\u68c0\u67e5\u7ebf\u7a0b\u662f\u5426\u5b8c\u6210\u4e86\u4efb\u52a1\u3002\u7136\u800c\u4f60\u53ef\u80fd\u4f1a\u9700\u8981\u5c06\u64cd\u4f5c\u7684\u7ed3\u679c\u4f20\u9012\u7ed9\u5176\u5b83\u7684\u4ee3\u7801\u3002\u5982\u679c\u5c06\u8fd4\u56de\u503c\u52a0\u5165\u4f60\u7528\u6765\u505c\u6b62\u5faa\u73af\u7684 break \u8868\u8fbe\u5f0f\uff0c\u5b83\u4f1a\u88ab\u505c\u6b62\u7684\u5faa\u73af\u8fd4\u56de\uff1a fn main () { // \u4e00\u4e2a\u540d\u4e3a counter \u7684\u53d8\u91cf\u5e76\u521d\u59cb\u5316\u4e3a 0 let mut counter = 0 ; // \u63a5\u7740\u58f0\u660e\u4e86\u4e00\u4e2a\u540d\u4e3a result \u6765\u5b58\u653e\u5faa\u73af\u7684\u8fd4\u56de\u503c\u3002 let result = loop { // \u5728\u5faa\u73af\u7684\u6bcf\u4e00\u6b21\u8fed\u4ee3\u4e2d\uff0c\u6211\u4eec\u5c06 counter \u53d8\u91cf\u52a0 1 counter += 1 ; // \u63a5\u7740\u68c0\u67e5\u8ba1\u6570\u662f\u5426\u7b49\u4e8e 10\u3002 if counter == 10 { // \u4f7f\u7528 break \u5173\u952e\u5b57\u8fd4\u56de\u503c counter * 2 break counter * 2 ; // \u901a\u8fc7\u5206\u53f7\u7ed3\u675f\u8d4b\u503c\u7ed9 result \u7684\u8bed\u53e5\u3002 } }; // \u6700\u540e\u6253\u5370\u51fa result \u7684\u503c\uff0c\u4e5f\u5c31\u662f 20\u3002 println! ( \"The result is {result}\" ); }","title":"\u4ece\u5faa\u73af\u8fd4\u56de\u503c"},{"location":"common-programing-concepts/#_27","text":"\u5982\u679c\u5b58\u5728\u5d4c\u5957\u5faa\u73af\uff0c break \u548c continue \u5e94\u7528\u4e8e\u6b64\u65f6\u6700\u5185\u5c42\u7684\u5faa\u73af\u3002\u4f60\u53ef\u4ee5\u9009\u62e9\u5728\u4e00\u4e2a\u5faa\u73af\u4e0a\u6307\u5b9a\u4e00\u4e2a \u5faa\u73af\u6807\u7b7e \uff08loop label\uff09\uff0c\u7136\u540e\u5c06\u6807\u7b7e\u4e0e break \u6216 continue \u4e00\u8d77\u4f7f\u7528\uff0c\u4f7f\u8fd9\u4e9b\u5173\u952e\u5b57\u5e94\u7528\u4e8e\u5df2\u6807\u8bb0\u7684\u5faa\u73af\u800c\u4e0d\u662f\u6700\u5185\u5c42\u7684\u5faa\u73af\u3002 fn main () { let mut count = 0 ; // \u5916\u5c42\u5faa\u73af\u6709\u4e00\u4e2a\u6807\u7b7e counting_up ' counting_up : loop { println! ( \"count = {count}\" ); let mut remaining = 10 ; // \u6ca1\u6709\u6807\u7b7e\u7684\u5185\u90e8\u5faa\u73af\u4ece 10 \u5411\u4e0b\u6570\u5230 9\u3002 loop { println! ( \"remaining = {remaining}\" ); if remaining == 9 { // \u6ca1\u6709\u6307\u5b9a\u6807\u7b7e\u7684 break \u5c06\u53ea\u9000\u51fa\u5185\u5c42\u5faa\u73af\u3002 break ; } if count == 2 { // break 'counting_up; \u8bed\u53e5\u5c06\u9000\u51fa\u5916\u5c42\u5faa\u73af\u3002 break 'counting_up ; } remaining -= 1 ; } count += 1 ; } println! ( \"End count = {count}\" ); }","title":"\u5faa\u73af\u6807\u7b7e"},{"location":"common-programing-concepts/#while","text":"\u5f53\u6761\u4ef6\u4e3a\u771f\uff0c\u6267\u884c\u5faa\u73af\u3002\u5f53\u6761\u4ef6\u4e0d\u518d\u4e3a\u771f\uff0c\u8c03\u7528 break \u505c\u6b62\u5faa\u73af\u3002 \u6bd4\u5982\uff1a fn main () { let mut number = 3 ; // \u5f53\u6761\u4ef6\u4e3a\u771f\u65f6\uff0c\u4f7f\u7528 while \u5faa\u73af\u8fd0\u884c\u4ee3\u7801 // \u8fd9\u79cd\u7ed3\u6784\u6d88\u9664\u4e86\u5f88\u591a\u4f7f\u7528 loop\u3001if\u3001else \u548c break \u65f6\u6240\u5fc5\u987b\u7684\u5d4c\u5957\uff0c\u8fd9\u6837\u66f4\u52a0\u6e05\u6670\u3002 while number != 0 { println! ( \"{number}!\" ); number -= 1 ; } println! ( \"LIFTOFF!!!\" ); }","title":"while \u5faa\u73af"},{"location":"common-programing-concepts/#for","text":"\u53ef\u4ee5\u4f7f\u7528 for \u5faa\u73af\u6765\u5bf9\u4e00\u4e2a\u96c6\u5408\u7684\u6bcf\u4e2a\u5143\u7d20\u6267\u884c\u4e00\u4e9b\u4ee3\u7801\u3002 fn main () { let a = [ 10 , 20 , 30 , 40 , 50 ]; for element in a { println! ( \"the value is: {element}\" ); } } for \u5faa\u73af\u7684\u5b89\u5168\u6027\u548c\u7b80\u6d01\u6027\u4f7f\u5f97\u5b83\u6210\u4e3a Rust \u4e2d\u5728\u7528\u4e8e\u904d\u5386\u6570\u7ec4\u65f6\u662f\u4f7f\u7528\u6700\u591a\u7684\u5faa\u73af\u7ed3\u6784\u3002 \u53e6\u4e00\u4e2a\u4f8b\u5b50\uff1a fn main () { // \u904d\u5386\u6807\u51c6\u5e93\u63d0\u4f9b\u7684\u7c7b\u578bRange\u7c7b\u578b // \u7528\u6765\u751f\u6210\u4ece\u4e00\u4e2a\u6570\u5b57\u5f00\u59cb\u5230\u53e6\u4e00\u4e2a\u6570\u5b57\u4e4b\u524d\u7ed3\u675f\u7684\u6240\u6709\u6570\u5b57\u7684\u5e8f\u5217\u3002 // rev\uff0c\u7528\u6765\u53cd\u8f6c range for number in ( 1 .. 4 ). rev () { println! ( \"{number}!\" ); } println! ( \"LIFTOFF!!!\" ); }","title":"for \u5faa\u73af"},{"location":"enumerations/","text":"\u679a\u4e3e \u679a\u4e3e \uff08enumerations\uff09\uff0c\u4e5f\u88ab\u79f0\u4f5c enums \u3002 \u679a\u4e3e\u5141\u8bb8\u4f60\u901a\u8fc7\u5217\u4e3e\u53ef\u80fd\u7684 \u6210\u5458 \uff08variants\uff09 \u6765\u5b9a\u4e49\u4e00\u4e2a\u7c7b\u578b\u3002 \u9996\u5148\uff0c\u6211\u4eec\u4f1a\u5b9a\u4e49\u5e76\u4f7f\u7528\u4e00\u4e2a\u679a\u4e3e\u6765\u5c55\u793a\u5b83\u662f\u5982\u4f55\u8fde\u540c\u6570\u636e\u4e00\u8d77\u7f16\u7801\u4fe1\u606f\u7684\u3002 \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u4f1a\u63a2\u7d22\u4e00\u4e2a\u7279\u522b\u6709\u7528\u7684\u679a\u4e3e\uff0c\u53eb\u505a Option\uff0c\u5b83\u4ee3\u8868\u4e00\u4e2a\u503c\u8981\u4e48\u662f\u67d0\u4e2a\u503c\u8981\u4e48\u4ec0\u4e48\u90fd\u4e0d\u662f\u3002 \u7136\u540e\u4f1a\u8bb2\u5230\u5728 match \u8868\u8fbe\u5f0f\u4e2d\u7528\u6a21\u5f0f\u5339\u914d\uff0c\u9488\u5bf9\u4e0d\u540c\u7684\u679a\u4e3e\u503c\u7f16\u5199\u76f8\u5e94\u8981\u6267\u884c\u7684\u4ee3\u7801\u3002 \u6700\u540e\u4f1a\u4ecb\u7ecd if let\uff0c\u53e6\u4e00\u4e2a\u7b80\u6d01\u65b9\u4fbf\u5904\u7406\u4ee3\u7801\u4e2d\u679a\u4e3e\u7684\u7ed3\u6784\u3002 \u5b9a\u4e49 \u7ed3\u6784\u4f53\u7ed9\u4e88\u4f60\u5c06\u5b57\u6bb5\u548c\u6570\u636e\u805a\u5408\u5728\u4e00\u8d77\u7684\u65b9\u6cd5 \uff0c\u50cf Rectangle \u7ed3\u6784\u4f53\u6709 width \u548c height \u4e24\u4e2a\u5b57\u6bb5\u3002 \u800c\u679a\u4e3e\u7ed9\u4e88\u4f60\u5c06\u4e00\u4e2a\u503c\u6210\u4e3a\u4e00\u4e2a\u96c6\u5408\u4e4b\u4e00\u7684\u65b9\u6cd5 \u3002\u6bd4\u5982\uff0c\u6211\u4eec\u60f3\u8ba9 Rectangle \u662f\u4e00\u4e9b\u5f62\u72b6\u7684\u96c6\u5408\uff0c\u5305\u542b Circle \u548c Triangle \u3002 \u4e3a\u4e86\u505a\u5230\u8fd9\u4e2a\uff0cRust\u63d0\u4f9b\u4e86\u679a\u4e3e\u7c7b\u578b\u3002 \u5047\u8bbe\u6211\u4eec\u8981\u5904\u7406 IP \u5730\u5740\u3002\u76ee\u524d\u88ab\u5e7f\u6cdb\u4f7f\u7528\u7684\u4e24\u4e2a\u4e3b\u8981 IP \u6807\u51c6\uff1a IPv4 \uff08version four\uff09\u548c IPv6 \uff08version six\uff09\u3002\u6240\u4ee5\u53ef\u4ee5 \u679a\u4e3e \u51fa\u6240\u6709\u53ef\u80fd\u7684\u503c\uff0c\u8fd9\u4e5f\u6b63\u662f\u6b64\u679a\u4e3e\u540d\u5b57\u7684\u7531\u6765\u3002 \u4efb\u4f55\u4e00\u4e2a IP \u5730\u5740\u8981\u4e48\u662f IPv4 \u7684\u8981\u4e48\u662f IPv6 \u7684\uff0c\u800c\u4e14\u4e0d\u80fd\u4e24\u8005\u90fd\u662f\u3002 IP \u5730\u5740\u7684\u8fd9\u4e2a\u7279\u6027\u4f7f\u5f97\u679a\u4e3e\u6570\u636e\u7ed3\u6784\u975e\u5e38\u9002\u5408\u8fd9\u4e2a\u573a\u666f\uff0c\u56e0\u4e3a\u679a\u4e3e\u503c\u53ea\u53ef\u80fd\u662f\u5176\u4e2d\u4e00\u4e2a\u6210\u5458\u3002 IPv4 \u548c IPv6 \u4ece\u6839\u672c\u4e0a\u8bb2\u4ecd\u662f IP \u5730\u5740\uff0c\u6240\u4ee5\u5f53\u4ee3\u7801\u5728\u5904\u7406\u9002\u7528\u4e8e\u4efb\u4f55\u7c7b\u578b\u7684 IP \u5730\u5740\u7684\u573a\u666f\u65f6\u5e94\u8be5\u628a\u5b83\u4eec\u5f53\u4f5c\u76f8\u540c\u7684\u7c7b\u578b\u3002 \u901a\u8fc7\u5728\u4ee3\u7801\u4e2d\u5b9a\u4e49\u4e00\u4e2a IpAddrKind \u679a\u4e3e\u6765\u8868\u73b0\u8fd9\u4e2a\u6982\u5ff5\u5e76\u5217\u51fa\u53ef\u80fd\u7684 IP \u5730\u5740\u7c7b\u578b\uff0c V4 \u548c V6 \u3002\u8fd9\u88ab\u79f0\u4e3a\u679a\u4e3e\u7684 \u6210\u5458 \uff08variants\uff09\uff1a enum IpAddrKind { V4 , V6 , } // \u73b0\u5728 IpAddrKind \u5c31\u662f\u4e00\u4e2a\u53ef\u4ee5\u5728\u4ee3\u7801\u4e2d\u4f7f\u7528\u7684\u81ea\u5b9a\u4e49\u6570\u636e\u7c7b\u578b\u4e86\u3002 \u679a\u4e3e\u503c \u53ef\u4ee5\u50cf\u8fd9\u6837\u521b\u5efa IpAddrKind \u4e24\u4e2a\u4e0d\u540c\u6210\u5458\u7684\u5b9e\u4f8b\uff1a let four = IpAddrKind :: V4 ; let six = IpAddrKind :: V6 ; \u6ce8\u610f\u679a\u4e3e\u7684\u6210\u5458\u4f4d\u4e8e\u5176\u6807\u8bc6\u7b26\u7684\u547d\u540d\u7a7a\u95f4\u4e2d\uff0c\u5e76\u4f7f\u7528 \u4e24\u4e2a\u5192\u53f7 \u5206\u5f00\u3002 \u63a5\u7740\u53ef\u4ee5\u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570\u6765\u83b7\u53d6\u4efb\u4f55 IpAddrKind \uff1a fn route ( ip_kind : IpAddrKind ) {} \u73b0\u5728\u53ef\u4ee5\u4f7f\u7528\u4efb\u4e00\u6210\u5458\u6765\u8c03\u7528\u8fd9\u4e2a\u51fd\u6570\uff1a route ( IpAddrKind :: V4 ); route ( IpAddrKind :: V6 ); \u4f7f\u7528\u679a\u4e3e\u751a\u81f3\u8fd8\u6709\u66f4\u591a\u4f18\u52bf\u3002\u8fdb\u4e00\u6b65\u8003\u8651\u4e00\u4e0b IP \u5730\u5740\u7c7b\u578b\uff0c\u76ee\u524d\u6ca1\u6709\u4e00\u4e2a\u5b58\u50a8\u5b9e\u9645 IP \u5730\u5740 \u6570\u636e \u7684\u65b9\u6cd5\uff1b\u53ea\u77e5\u9053\u5b83\u662f\u4ec0\u4e48 \u7c7b\u578b \u7684\u3002 \u8003\u8651\u5230\u5df2\u7ecf\u5b66\u4e60\u8fc7\u7ed3\u6784\u4f53\u4e86\uff0c\u4f60\u53ef\u80fd\u4f1a\u5982\u4e0b\u793a\u4f8b\u90a3\u6837\u5904\u7406\u8fd9\u4e2a\u95ee\u9898\uff1a enum IpAddrKind { V4 , V6 , } struct IpAddr { kind : IpAddrKind , address : String , } let home = IpAddr { kind : IpAddrKind :: V4 , address : String :: from ( \"127.0.0.1\" ), }; let loopback = IpAddr { kind : IpAddrKind :: V6 , address : String :: from ( \"::1\" ), }; \u53ef\u4ee5\u4f7f\u7528\u4e00\u79cd\u66f4\u7b80\u6d01\u7684\u65b9\u5f0f\u6765\u8868\u8fbe\u76f8\u540c\u7684\u6982\u5ff5 \uff0c\u4ec5\u4ec5\u4f7f\u7528\u679a\u4e3e\u5e76\u5c06\u6570\u636e\u76f4\u63a5\u653e\u8fdb\u6bcf\u4e00\u4e2a\u679a\u4e3e\u6210\u5458\uff0c\u800c\u4e0d\u662f\u5c06\u679a\u4e3e\u4f5c\u4e3a\u7ed3\u6784\u4f53\u7684\u4e00\u90e8\u5206\u3002 IpAddr \u679a\u4e3e\u7684\u65b0\u5b9a\u4e49\u8868\u660e\u4e86 V4 \u548c V6 \u6210\u5458\u90fd\u5173\u8054\u4e86 String \u503c\uff1a enum IpAddr { V4 ( String ), V6 ( String ), } let home = IpAddr :: V4 ( String :: from ( \"127.0.0.1\" )); let loopback = IpAddr :: V6 ( String :: from ( \"::1\" )); \u8fd9\u6837\u76f4\u63a5\u5c06\u6570\u636e\u9644\u52a0\u5230\u679a\u4e3e\u7684\u6bcf\u4e2a\u6210\u5458\u4e0a\uff0c\u8fd9\u6837\u5c31\u4e0d\u9700\u8981\u4e00\u4e2a\u989d\u5916\u7684\u7ed3\u6784\u4f53\u4e86\u3002 \u53e6\u4e00\u4e2a\u7ec6\u8282\uff1a \u6bcf\u4e00\u4e2a\u6211\u4eec\u5b9a\u4e49\u7684\u679a\u4e3e\u6210\u5458\u7684\u540d\u5b57\u4e5f\u53d8\u6210\u4e86\u4e00\u4e2a\u6784\u5efa\u679a\u4e3e\u7684\u5b9e\u4f8b\u7684\u51fd\u6570 \u3002\u4e5f\u5c31\u662f\u8bf4\uff0c IpAddr::V4() \u662f\u4e00\u4e2a\u83b7\u53d6 String \u53c2\u6570\u5e76\u8fd4\u56de IpAddr \u7c7b\u578b\u5b9e\u4f8b\u7684\u51fd\u6570\u8c03\u7528\u3002 \u4f5c\u4e3a\u5b9a\u4e49\u679a\u4e3e\u7684\u7ed3\u679c\uff0c\u8fd9\u4e9b \u6784\u9020\u51fd\u6570\u4f1a\u81ea\u52a8\u88ab\u5b9a\u4e49 \u3002 \u7528\u679a\u4e3e\u66ff\u4ee3\u7ed3\u6784\u4f53\u8fd8\u6709\u53e6\u4e00\u4e2a\u4f18\u52bf\uff1a \u6bcf\u4e2a\u6210\u5458\u53ef\u4ee5\u5904\u7406\u4e0d\u540c\u7c7b\u578b\u548c\u6570\u91cf\u7684\u6570\u636e \u3002 \u5982\u4e0b: enum IpAddr { V4 ( u8 , u8 , u8 , u8 ), V6 ( String ), } let home = IpAddr :: V4 ( 127 , 0 , 0 , 1 ); let loopback = IpAddr :: V6 ( String :: from ( \"::1\" )); \u4e8b\u5b9e\u8bc1\u660e\u5b58\u50a8\u548c\u7f16\u7801 IP \u5730\u5740\u5b9e\u5728\u662f\u592a\u5e38\u89c1\u4e86 \u4ee5\u81f4\u6807\u51c6\u5e93\u63d0\u4f9b\u4e86\u4e00\u4e2a\u5f00\u7bb1\u5373\u7528\u7684\u5b9a\u4e49\uff01 \u6807\u51c6\u5e93\u662f\u5982\u4f55\u5b9a\u4e49 IpAddr \u7684\uff1a\u5b83\u6b63\u6709\u7740\u8ddf\u6211\u4eec\u5b9a\u4e49\u548c\u4f7f\u7528\u7684\u4e00\u6837\u7684\u679a\u4e3e\u548c\u6210\u5458\uff0c\u4e0d\u8fc7\u5b83\u5c06\u6210\u5458\u4e2d\u7684\u5730\u5740\u6570\u636e\u5d4c\u5165\u5230\u4e86\u4e24\u4e2a\u4e0d\u540c\u5f62\u5f0f\u7684\u7ed3\u6784\u4f53\u4e2d\uff0c\u5b83\u4eec\u5bf9\u4e0d\u540c\u7684\u6210\u5458\u7684\u5b9a\u4e49\u662f\u4e0d\u540c\u7684\uff1a struct Ipv4Addr { // --snip-- } struct Ipv6Addr { // --snip-- } enum IpAddr { V4 ( Ipv4Addr ), V6 ( Ipv6Addr ), } \u8fd9\u4e9b\u4ee3\u7801\u5c55\u793a\u4e86\u53ef\u4ee5\u5c06\u4efb\u610f\u7c7b\u578b\u7684\u6570\u636e\u653e\u5165\u679a\u4e3e\u6210\u5458\u4e2d\uff1a\u4f8b\u5982 \u5b57\u7b26\u4e32 \u3001 \u6570\u5b57\u7c7b\u578b \u6216\u8005 \u7ed3\u6784\u4f53 \u3002\u751a\u81f3\u53ef\u4ee5\u5305\u542b\u53e6\u4e00\u4e2a \u679a\u4e3e \uff01 \u867d\u7136\u6807\u51c6\u5e93\u4e2d\u5305\u542b\u4e00\u4e2a IpAddr \u7684\u5b9a\u4e49\uff0c\u4ecd\u7136\u53ef\u4ee5\u521b\u5efa\u548c\u4f7f\u7528\u6211\u4eec\u81ea\u5df1\u7684\u5b9a\u4e49\u800c\u4e0d\u4f1a\u6709\u51b2\u7a81\uff0c\u56e0\u4e3a\u6211\u4eec\u5e76\u6ca1\u6709\u5c06\u6807\u51c6\u5e93\u4e2d\u7684\u5b9a\u4e49\u5f15\u5165\u4f5c\u7528\u57df\u3002 enum Message { Quit , // Quit \u6ca1\u6709\u5173\u8054\u4efb\u4f55\u6570\u636e\u3002 Move { x : i32 , y : i32 }, // Move \u7c7b\u4f3c\u7ed3\u6784\u4f53\u5305\u542b\u547d\u540d\u5b57\u6bb5\u3002 Write ( String ), // Write \u5305\u542b\u5355\u72ec\u4e00\u4e2a String\u3002 ChangeColor ( i32 , i32 , i32 ), // ChangeColor \u5305\u542b\u4e09\u4e2a i32\u3002 } \u5b9a\u4e49\u4e00\u4e2a\u6709\u5173\u8054\u503c\u7684\u679a\u4e3e\u7684\u65b9\u5f0f\u548c\u5b9a\u4e49\u591a\u4e2a\u4e0d\u540c\u7c7b\u578b\u7684\u7ed3\u6784\u4f53\u7684\u65b9\u5f0f\u5f88\u76f8\u50cf\uff0c\u9664\u4e86\u679a\u4e3e\u4e0d\u4f7f\u7528 struct \u5173\u952e\u5b57\u4ee5\u53ca\u5176\u6240\u6709\u6210\u5458\u90fd\u88ab\u7ec4\u5408\u5728\u4e00\u8d77\u4f4d\u4e8e Message \u7c7b\u578b\u4e0b\u3002 \u5982\u4e0b\u8fd9\u4e9b\u7ed3\u6784\u4f53\u53ef\u4ee5\u5305\u542b\u4e0e\u4e4b\u524d\u679a\u4e3e\u6210\u5458\u4e2d\u76f8\u540c\u7684\u6570\u636e\uff1a struct QuitMessage ; // \u7c7b\u5355\u5143\u7ed3\u6784\u4f53 struct MoveMessage { x : i32 , y : i32 , } struct WriteMessage ( String ); // \u5143\u7ec4\u7ed3\u6784\u4f53 struct ChangeColorMessage ( i32 , i32 , i32 ); // \u5143\u7ec4\u7ed3\u6784\u4f53 \u4e0d\u8fc7\uff0c\u5982\u679c\u6211\u4eec\u4f7f\u7528\u4e0d\u540c\u7684\u7ed3\u6784\u4f53\uff0c\u7531\u4e8e\u5b83\u4eec\u90fd\u6709\u4e0d\u540c\u7684\u7c7b\u578b\uff0c\u6211\u4eec\u5c06\u4e0d\u80fd\u50cf\u4f7f\u7528 Message \u679a\u4e3e\u90a3\u6837\uff0c\u8f7b\u6613\u7684\u5b9a\u4e49\u4e00\u4e2a\u80fd\u591f\u5904\u7406\u8fd9\u4e9b\u4e0d\u540c\u7c7b\u578b\u7684\u7ed3\u6784\u4f53\u7684\u51fd\u6570\uff0c\u56e0\u4e3a \u679a\u4e3e\u662f\u5355\u72ec\u4e00\u4e2a\u7c7b\u578b \u3002 \u7ed3\u6784\u4f53\u548c\u679a\u4e3e\u8fd8\u6709\u53e6\u4e00\u4e2a\u76f8\u4f3c\u70b9\uff1a \u5c31\u50cf\u53ef\u4ee5\u4f7f\u7528 impl \u6765\u4e3a\u7ed3\u6784\u4f53\u5b9a\u4e49\u65b9\u6cd5\u90a3\u6837\uff0c\u4e5f\u53ef\u4ee5\u5728\u679a\u4e3e\u4e0a\u5b9a\u4e49\u65b9\u6cd5 \u3002\u8fd9\u662f\u4e00\u4e2a\u5b9a\u4e49\u4e8e\u6211\u4eec Message \u679a\u4e3e\u4e0a\u7684\u53eb\u505a call \u7684\u65b9\u6cd5\uff1a impl Message { // \u65b9\u6cd5\u4f53\u4f7f\u7528\u4e86 self \u6765\u83b7\u53d6\u8c03\u7528\u65b9\u6cd5\u7684\u503c\u3002 fn call ( & self ) { // \u5728\u8fd9\u91cc\u5b9a\u4e49\u65b9\u6cd5\u4f53 } } let m = Message :: Write ( String :: from ( \"hello\" )); m . call (); // \u53d8\u91cf m\uff0c\u5c31\u662f\u5f53 m.call() \u8fd0\u884c\u65f6 call \u65b9\u6cd5\u4e2d\u7684 self \u7684\u503c\u3002 Option \u679a\u4e3e Option \u662f\u6807\u51c6\u5e93\u5b9a\u4e49\u7684\u53e6\u4e00\u4e2a\u679a\u4e3e\u3002 Option \u7c7b\u578b\u5e94\u7528\u5e7f\u6cdb\u56e0\u4e3a\u5b83\u7f16\u7801\u4e86\u4e00\u4e2a\u975e\u5e38\u666e\u904d\u7684\u573a\u666f\uff0c\u5373\u4e00\u4e2a\u503c\u8981\u4e48\u6709\u503c\u8981\u4e48\u6ca1\u503c\u3002 \u4f8b\u5982\uff0c\u5982\u679c\u8bf7\u6c42\u4e00\u4e2a\u5305\u542b\u9879\u7684\u5217\u8868\u7684\u7b2c\u4e00\u4e2a\u503c\uff0c\u4f1a\u5f97\u5230\u4e00\u4e2a\u503c\uff0c\u5982\u679c\u8bf7\u6c42\u4e00\u4e2a\u7a7a\u7684\u5217\u8868\uff0c\u5c31\u4ec0\u4e48\u4e5f\u4e0d\u4f1a\u5f97\u5230\u3002\u4ece\u7c7b\u578b\u7cfb\u7edf\u7684\u89d2\u5ea6\u6765\u8868\u8fbe\u8fd9\u4e2a\u6982\u5ff5\u5c31\u610f\u5473\u7740\u7f16\u8bd1\u5668\u9700\u8981\u68c0\u67e5\u662f\u5426\u5904\u7406\u4e86\u6240\u6709\u5e94\u8be5\u5904\u7406\u7684\u60c5\u51b5\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u907f\u514d\u5728\u5176\u4ed6\u7f16\u7a0b\u8bed\u8a00\u4e2d\u975e\u5e38\u5e38\u89c1\u7684 bug\u3002 \u7f16\u7a0b\u8bed\u8a00\u7684\u8bbe\u8ba1\u7ecf\u5e38\u8981\u8003\u8651\u5305\u542b\u54ea\u4e9b\u529f\u80fd\uff0c\u4f46\u8003\u8651\u6392\u9664\u54ea\u4e9b\u529f\u80fd\u4e5f\u5f88\u91cd\u8981\u3002Rust \u5e76\u6ca1\u6709\u5f88\u591a\u5176\u4ed6\u8bed\u8a00\u4e2d\u6709\u7684\u7a7a\u503c\u529f\u80fd\u3002 \u7a7a\u503c \uff08Null \uff09\u662f\u4e00\u4e2a\u503c\uff0c\u5b83\u4ee3\u8868\u6ca1\u6709\u503c\u3002\u5728\u6709\u7a7a\u503c\u7684\u8bed\u8a00\u4e2d\uff0c\u53d8\u91cf\u603b\u662f\u8fd9\u4e24\u79cd\u72b6\u6001\u4e4b\u4e00\uff1a\u7a7a\u503c\u548c\u975e\u7a7a\u503c\u3002 \u7a7a\u503c\u7684\u95ee\u9898\u5728\u4e8e\u5f53\u4f60\u5c1d\u8bd5\u50cf\u4e00\u4e2a\u975e\u7a7a\u503c\u90a3\u6837\u4f7f\u7528\u4e00\u4e2a\u7a7a\u503c\uff0c\u4f1a\u51fa\u73b0\u67d0\u79cd\u5f62\u5f0f\u7684\u9519\u8bef\u3002\u56e0\u4e3a\u7a7a\u548c\u975e\u7a7a\u7684\u5c5e\u6027\u65e0\u5904\u4e0d\u5728\uff0c\u975e\u5e38\u5bb9\u6613\u51fa\u73b0\u8fd9\u7c7b\u9519\u8bef\u3002 \u7136\u800c\uff0c\u7a7a\u503c\u5c1d\u8bd5\u8868\u8fbe\u7684\u6982\u5ff5\u4ecd\u7136\u662f\u6709\u610f\u4e49\u7684\uff1a \u7a7a\u503c\u662f\u4e00\u4e2a\u56e0\u4e3a\u67d0\u79cd\u539f\u56e0\u76ee\u524d\u65e0\u6548\u6216\u7f3a\u5931\u7684\u503c \u3002 \u95ee\u9898\u4e0d\u5728\u4e8e\u6982\u5ff5\u800c\u5728\u4e8e\u5177\u4f53\u7684\u5b9e\u73b0\u3002\u4e3a\u6b64\uff0cRust \u5e76\u6ca1\u6709\u7a7a\u503c\uff0c\u4e0d\u8fc7\u5b83\u786e\u5b9e\u62e5\u6709\u4e00\u4e2a\u53ef\u4ee5\u7f16\u7801\u5b58\u5728\u6216\u4e0d\u5b58\u5728\u6982\u5ff5\u7684\u679a\u4e3e\u3002\u8fd9\u4e2a\u679a\u4e3e\u662f Option<T> \uff0c\u800c\u4e14\u5b83 \u5b9a\u4e49\u4e8e\u6807\u51c6\u5e93\u4e2d \uff0c\u5982\u4e0b: enum Option < T > { None , Some ( T ), } Option<T> \u679a\u4e3e\u662f\u5982\u6b64\u6709\u7528\u4ee5\u81f3\u4e8e\u5b83\u751a\u81f3\u88ab\u5305\u542b\u5728\u4e86 prelude \u4e4b\u4e2d\uff0c\u4f60\u4e0d\u9700\u8981\u5c06\u5176\u663e\u5f0f\u5f15\u5165\u4f5c\u7528\u57df\u3002 \u53e6\u5916\uff0c\u5b83\u7684\u6210\u5458\u4e5f\u662f\u5982\u6b64\uff0c\u53ef\u4ee5\u4e0d\u9700\u8981 Option:: \u524d\u7f00\u6765\u76f4\u63a5\u4f7f\u7528 Some \u548c None \u3002 \u5373\u4fbf\u5982\u6b64 Option<T> \u4e5f\u4ecd\u662f\u5e38\u89c4\u7684\u679a\u4e3e\uff0c Some(T) \u548c None \u4ecd\u662f Option<T> \u7684\u6210\u5458\u3002 <T> \u8bed\u6cd5\u662f\u4e00\u4e2a\u6211\u4eec\u8fd8\u672a\u8bb2\u5230\u7684 Rust \u529f\u80fd\u3002\u5b83\u662f\u4e00\u4e2a\u6cdb\u578b\u7c7b\u578b\u53c2\u6570\uff0c\u7b2c\u5341\u7ae0\u4f1a\u66f4\u8be6\u7ec6\u7684\u8bb2\u89e3\u6cdb\u578b\u3002 let some_number = Some ( 5 ); // \u7c7b\u578b\u662f Option<i32> let some_char = Some ( 'e' ); // \u7c7b\u578b\u662f Option<char> let absent_number : Option < i32 > = None ; // \u5bf9\u4e8e absent_number\uff0c Rust \u9700\u8981\u6211\u4eec\u6307\u5b9a Option \u6574\u4f53\u7684\u7c7b\u578b // \u56e0\u4e3a\u7f16\u8bd1\u5668\u53ea\u901a\u8fc7 None \u503c\u65e0\u6cd5\u63a8\u65ad\u51fa Some \u6210\u5458\u4fdd\u5b58\u7684\u503c\u7684\u7c7b\u578b\u3002 // \u8fd9\u91cc\u6211\u4eec\u544a\u8bc9 Rust \u5e0c\u671b absent_number \u662f Option<i32> \u7c7b\u578b\u7684\u3002 \u5f53\u6709\u4e00\u4e2a Some \u503c\u65f6\uff0c\u6211\u4eec\u5c31\u77e5\u9053\u5b58\u5728\u4e00\u4e2a\u503c\uff0c\u800c\u8fd9\u4e2a\u503c\u4fdd\u5b58\u5728 Some \u4e2d\u3002\u5f53\u6709\u4e2a None \u503c\u65f6\uff0c\u5728\u67d0\u79cd\u610f\u4e49\u4e0a\uff0c\u5b83\u8ddf\u7a7a\u503c\u5177\u6709\u76f8\u540c\u7684\u610f\u4e49\uff1a \u5e76\u6ca1\u6709\u4e00\u4e2a\u6709\u6548\u7684\u503c \u3002\u90a3\u4e48\uff0c Option<T> \u4e3a\u4ec0\u4e48\u5c31\u6bd4\u7a7a\u503c\u8981\u597d\u5462\uff1f \u7b80\u800c\u8a00\u4e4b\uff0c\u56e0\u4e3a Option<T> \u548c T \uff08\u8fd9\u91cc T \u53ef\u4ee5\u662f\u4efb\u4f55\u7c7b\u578b\uff09\u662f\u4e0d\u540c\u7684\u7c7b\u578b\uff0c\u7f16\u8bd1\u5668\u4e0d\u5141\u8bb8\u50cf\u4e00\u4e2a\u80af\u5b9a\u6709\u6548\u7684\u503c\u90a3\u6837\u4f7f\u7528 Option<T> \u3002\u4f8b\u5982\uff0c\u8fd9\u6bb5\u4ee3\u7801\u4e0d\u80fd\u7f16\u8bd1\uff0c\u56e0\u4e3a\u5b83\u5c1d\u8bd5\u5c06 Option<i8> \u4e0e i8 \u76f8\u52a0\uff1a let x : i8 = 5 ; let y : Option < i8 > = Some ( 5 ); let sum = x + y ; \u5982\u679c\u8fd0\u884c\u8fd9\u4e9b\u4ee3\u7801\uff0c\u5c06\u5f97\u5230\u7c7b\u4f3c\u8fd9\u6837\u7684\u9519\u8bef\u4fe1\u606f\uff1a $ cargo run Compiling enums v0.1.0 ( file:///projects/enums ) error [ E0277 ] : cannot add ` Option<i8> ` to ` i8 ` --> src/main.rs:5:17 | 5 | let sum = x + y ; | ^ no implementation for ` i8 + Option<i8> ` | = help: the trait ` Add<Option<i8>> ` is not implemented for ` i8 ` For more information about this error, try ` rustc --explain E0277 ` . error: could not compile ` enums ` due to previous error \u9519\u8bef\u4fe1\u606f\u610f\u5473\u7740 Rust \u4e0d\u77e5\u9053\u8be5\u5982\u4f55\u5c06 Option<i8> \u4e0e i8 \u76f8\u52a0\uff0c\u56e0\u4e3a\u5b83\u4eec\u7684\u7c7b\u578b\u4e0d\u540c\u3002 \u5f53\u5728 Rust \u4e2d\u62e5\u6709\u4e00\u4e2a\u50cf i8 \u8fd9\u6837\u7c7b\u578b\u7684\u503c\u65f6\uff0c\u7f16\u8bd1\u5668\u786e\u4fdd\u5b83\u603b\u662f\u6709\u4e00\u4e2a\u6709\u6548\u7684\u503c\u3002\u6211\u4eec\u53ef\u4ee5\u81ea\u4fe1\u4f7f\u7528\u800c\u65e0\u9700\u505a\u7a7a\u503c\u68c0\u67e5\u3002 \u53ea\u6709\u5f53\u4f7f\u7528 Option<i8> \uff08\u6216\u8005\u4efb\u4f55\u7528\u5230\u7684\u7c7b\u578b\uff09\u7684\u65f6\u5019\u9700\u8981\u62c5\u5fc3\u53ef\u80fd\u6ca1\u6709\u503c\uff0c\u800c \u7f16\u8bd1\u5668\u4f1a\u786e\u4fdd\u6211\u4eec\u5728\u4f7f\u7528\u503c\u4e4b\u524d\u5904\u7406\u4e86\u4e3a\u7a7a\u7684\u60c5\u51b5\u3002 \u6362\u53e5\u8bdd\u8bf4\uff0c\u5728\u5bf9 Option<T> \u8fdb\u884c T \u7684\u8fd0\u7b97\u4e4b\u524d\u5fc5\u987b\u5c06\u5176\u8f6c\u6362\u4e3a T \u3002\u901a\u5e38\u8fd9\u80fd\u5e2e\u52a9\u6211\u4eec\u6355\u83b7\u5230\u7a7a\u503c\u6700\u5e38\u89c1\u7684\u95ee\u9898\u4e4b\u4e00\uff1a \u5047\u8bbe\u67d0\u503c\u4e0d\u4e3a\u7a7a\u4f46\u5b9e\u9645\u4e0a\u4e3a\u7a7a\u7684\u60c5\u51b5\u3002 \u6d88\u9664\u4e86\u9519\u8bef\u5730\u5047\u8bbe\u4e00\u4e2a\u975e\u7a7a\u503c\u7684\u98ce\u9669\uff0c\u4f1a\u8ba9\u4f60\u5bf9\u4ee3\u7801\u66f4\u52a0\u6709\u4fe1\u5fc3\u3002 \u4e3a\u4e86\u62e5\u6709\u4e00\u4e2a\u53ef\u80fd\u4e3a\u7a7a\u7684\u503c\uff0c\u4f60\u5fc5\u987b\u8981\u663e\u5f0f\u7684\u5c06\u5176\u653e\u5165\u5bf9\u5e94\u7c7b\u578b\u7684 Option<T> \u4e2d\u3002 \u63a5\u7740\uff0c\u5f53\u4f7f\u7528\u8fd9\u4e2a\u503c\u65f6\uff0c\u5fc5\u987b\u660e\u786e\u7684\u5904\u7406\u503c\u4e3a\u7a7a\u7684\u60c5\u51b5\u3002\u53ea\u8981\u4e00\u4e2a\u503c\u4e0d\u662f Option<T> \u7c7b\u578b\uff0c\u4f60\u5c31 \u53ef\u4ee5 \u5b89\u5168\u7684\u8ba4\u5b9a\u5b83\u7684\u503c\u4e0d\u4e3a\u7a7a\u3002 \u8fd9\u662f Rust \u7684\u4e00\u4e2a\u7ecf\u8fc7\u6df1\u601d\u719f\u8651\u7684\u8bbe\u8ba1\u51b3\u7b56\uff0c\u6765\u9650\u5236\u7a7a\u503c\u7684\u6cdb\u6ee5\u4ee5\u589e\u52a0 Rust \u4ee3\u7801\u7684\u5b89\u5168\u6027\u3002 \u90a3\u4e48\u5f53\u6709\u4e00\u4e2a Option<T> \u7684\u503c\u65f6\uff0c\u5982\u4f55\u4ece Some \u6210\u5458\u4e2d\u53d6\u51fa T \u7684\u503c\u6765\u4f7f\u7528\u5b83\u5462\uff1f Option<T> \u679a\u4e3e\u62e5\u6709\u5927\u91cf\u7528\u4e8e\u5404\u79cd\u60c5\u51b5\u7684\u65b9\u6cd5\uff1a\u4f60\u53ef\u4ee5\u67e5\u770b \u5b83\u7684\u6587\u6863 \u3002 \u719f\u6089 Option<T> \u7684\u65b9\u6cd5\u5c06\u5bf9\u4f60\u7684 Rust \u4e4b\u65c5\u975e\u5e38\u6709\u7528\u3002 \u603b\u7684\u6765\u8bf4\uff0c\u4e3a\u4e86\u4f7f\u7528 Option<T> \u503c\uff0c \u9700\u8981\u7f16\u5199\u5904\u7406\u6bcf\u4e2a\u6210\u5458\u7684\u4ee3\u7801\u3002 \u4f60\u60f3\u8981\u4e00\u4e9b\u4ee3\u7801\u53ea\u5f53\u62e5\u6709 Some(T) \u503c\u65f6\u8fd0\u884c\uff0c\u5141\u8bb8\u8fd9\u4e9b\u4ee3\u7801\u4f7f\u7528\u5176\u4e2d\u7684 T \u3002 \u4e5f\u5e0c\u671b\u4e00\u4e9b\u4ee3\u7801\u5728\u503c\u4e3a None \u65f6\u8fd0\u884c\uff0c\u8fd9\u4e9b\u4ee3\u7801\u5e76\u6ca1\u6709\u4e00\u4e2a\u53ef\u7528\u7684 T \u503c\u3002 match \u8868\u8fbe\u5f0f\u5c31\u662f\u8fd9\u4e48\u4e00\u4e2a\u5904\u7406\u679a\u4e3e\u7684\u63a7\u5236\u6d41\u7ed3\u6784\uff1a \u5b83\u4f1a\u6839\u636e\u679a\u4e3e\u7684\u6210\u5458\u8fd0\u884c\u4e0d\u540c\u7684\u4ee3\u7801\uff0c\u8fd9\u4e9b\u4ee3\u7801\u53ef\u4ee5\u4f7f\u7528\u5339\u914d\u5230\u7684\u503c\u4e2d\u7684\u6570\u636e \u3002 match\u63a7\u5236\u6d41 Rust \u6709\u4e00\u4e2a\u53eb\u505a match \u7684\u6781\u4e3a\u5f3a\u5927\u7684\u63a7\u5236\u6d41\u8fd0\u7b97\u7b26\uff0c\u5b83\u5141\u8bb8\u6211\u4eec \u5c06\u4e00\u4e2a\u503c\u4e0e\u4e00\u7cfb\u5217\u7684\u6a21\u5f0f\u76f8\u6bd4\u8f83\uff0c\u5e76\u6839\u636e\u76f8\u5339\u914d\u7684\u6a21\u5f0f\u6267\u884c\u76f8\u5e94\u4ee3\u7801 \u3002\u6a21\u5f0f\u53ef\u7531 \u5b57\u9762\u503c \u3001 \u53d8\u91cf \u3001 \u901a\u914d\u7b26 \u548c\u8bb8\u591a \u5176\u4ed6\u5185\u5bb9 \u6784\u6210\uff1b match \u7684\u529b\u91cf\u6765\u6e90\u4e8e\u6a21\u5f0f\u7684\u8868\u73b0\u529b\u4ee5\u53ca\u7f16\u8bd1\u5668\u68c0\u67e5\uff0c\u5b83\u786e\u4fdd\u4e86\u6240\u6709\u53ef\u80fd\u7684\u60c5\u51b5\u90fd\u5f97\u5230\u5904\u7406\u3002 \u7f16\u5199\u4e00\u4e2a\u51fd\u6570\u6765\u83b7\u53d6\u4e00\u4e2a\u672a\u77e5\u7684\u786c\u5e01\uff0c\u5e76\u4ee5\u4e00\u79cd\u7c7b\u4f3c\u9a8c\u949e\u673a\u7684\u65b9\u5f0f\uff0c\u786e\u5b9a\u5b83\u662f\u4f55\u79cd\u786c\u5e01\u5e76\u8fd4\u56de\u5b83\u7684\u7f8e\u5206\u503c: // \u4e00\u4e2a\u679a\u4e3e\u548c\u4e00\u4e2a\u4ee5\u679a\u4e3e\u6210\u5458\u4f5c\u4e3a\u6a21\u5f0f\u7684 match \u8868\u8fbe\u5f0f enum Coin { Penny , Nickel , Dime , Quarter , } fn value_in_cents ( coin : Coin ) -> u8 { // \u5217\u51fa match \u5173\u952e\u5b57\u540e\u8ddf\u4e00\u4e2a\u8868\u8fbe\u5f0f // \u770b\u8d77\u6765\u975e\u5e38\u50cf if \u4f7f\u7528\u7684\u8868\u8fbe\u5f0f\uff0c\u4e0d\u8fc7\u8fd9\u91cc\u6709\u4e00\u4e2a\u975e\u5e38\u5927\u7684\u533a\u522b\uff1a\u5bf9\u4e8e if\uff0c\u8868\u8fbe\u5f0f\u5fc5\u987b\u8fd4\u56de\u4e00\u4e2a\u5e03\u5c14\u503c\uff0c\u800c\u8fd9\u91cc\u5b83\u53ef\u4ee5\u662f\u4efb\u4f55\u7c7b\u578b // coin \u7684\u7c7b\u578b\u662f\u5b9a\u4e49\u7684 Coin \u679a\u4e3e\u3002 match coin { // \u63a5\u4e0b\u6765\u662f match \u7684\u5206\u652f // \u4e00\u4e2a\u5206\u652f\u6709\u4e24\u4e2a\u90e8\u5206\uff1a\u4e00\u4e2a\u6a21\u5f0f\u548c\u4e00\u4e9b\u4ee3\u7801\u3002 // => \u8fd0\u7b97\u7b26\u5c06\u6a21\u5f0f\u548c\u5c06\u8981\u8fd0\u884c\u7684\u4ee3\u7801\u5206\u5f00 // \u6bcf\u4e00\u4e2a\u5206\u652f\u4e4b\u95f4\u4f7f\u7528\u9017\u53f7\u5206\u9694\u3002 Coin :: Penny => 1 , // 1\u7f8e\u5206 Coin :: Nickel => 5 , // 5\u7f8e\u5206 Coin :: Dime => 10 , // 10\u7f8e\u5206 Coin :: Quarter => 25 , // 25\u7f8e\u5206 // \u5982\u679c\u6a21\u5f0f\u5339\u914d\u4e86\u8fd9\u4e2a\u503c\uff0c\u8fd9\u4e2a\u6a21\u5f0f\u76f8\u5173\u8054\u7684\u4ee3\u7801\u5c06\u88ab\u6267\u884c\u3002\u5982\u679c\u6a21\u5f0f\u5e76\u4e0d\u5339\u914d\u8fd9\u4e2a\u503c\uff0c\u5c06\u7ee7\u7eed\u6267\u884c\u4e0b\u4e00\u4e2a\u5206\u652f // \u53ef\u4ee5\u62e5\u6709\u4efb\u610f\u591a\u7684\u5206\u652f, \u8fd9\u91cc\u67094\u4e2a\u5206\u652f // \u6bcf\u4e2a\u5206\u652f\u76f8\u5173\u8054\u7684\u4ee3\u7801\u662f\u4e00\u4e2a\u8868\u8fbe\u5f0f\uff0c\u800c\u8868\u8fbe\u5f0f\u7684\u7ed3\u679c\u503c\u5c06\u4f5c\u4e3a\u6574\u4e2a match \u8868\u8fbe\u5f0f\u7684\u8fd4\u56de\u503c\u3002 } } \u5982\u679c\u5206\u652f\u4ee3\u7801\u8f83\u77ed\u7684\u8bdd\u901a\u5e38\u4e0d\u4f7f\u7528\u5927\u62ec\u53f7 \uff0c\u4e0a\u9762\u7684\u793a\u4f8b\u6bcf\u4e2a\u5206\u652f\u90fd\u53ea\u662f\u8fd4\u56de\u4e00\u4e2a\u503c\u3002 \u5982\u679c\u60f3\u8981\u5728\u5206\u652f\u4e2d\u8fd0\u884c\u591a\u884c\u4ee3\u7801\uff0c \u53ef\u4ee5\u4f7f\u7528\u5927\u62ec\u53f7\uff0c\u800c\u5206\u652f\u540e\u7684\u9017\u53f7\u662f\u53ef\u9009\u7684 \u3002 \u4f8b\u5982\uff0c\u5982\u4e0b\u4ee3\u7801\u5728\u6bcf\u6b21\u4f7f\u7528 Coin::Penny \u8c03\u7528\u65f6\u90fd\u4f1a\u6253\u5370\u51fa \u201cLucky penny!\u201d \uff0c\u540c\u65f6\u4ecd\u7136\u8fd4\u56de\u4ee3\u7801\u5757\u6700\u540e\u7684\u503c\uff0c1\uff1a fn value_in_cents ( coin : Coin ) -> u8 { match coin { Coin :: Penny => { println! ( \"Lucky penny!\" ); 1 } Coin :: Nickel => 5 , Coin :: Dime => 10 , Coin :: Quarter => 25 , } } \u7ed1\u5b9a\u503c\u7684\u6a21\u5f0f \u5339\u914d\u5206\u652f\u7684\u53e6\u4e00\u4e2a\u6709\u7528\u7684\u529f\u80fd\u662f\u53ef\u4ee5 \u7ed1\u5b9a\u5339\u914d\u7684\u6a21\u5f0f\u7684\u90e8\u5206\u503c \u3002\u8fd9\u4e5f\u5c31\u662f\u5982\u4f55\u4ece\u679a\u4e3e\u6210\u5458\u4e2d\u63d0\u53d6\u503c\u7684\u3002 \u4f5c\u4e3a\u4e00\u4e2a\u4f8b\u5b50\uff0c\u8ba9\u6211\u4eec\u4fee\u6539\u679a\u4e3e\u7684\u4e00\u4e2a\u6210\u5458\u6765\u5b58\u653e\u6570\u636e\u3002 1999 \u5e74\u5230 2008 \u5e74\u95f4\uff0c\u7f8e\u56fd\u5728 25 \u7f8e\u5206\u7684\u786c\u5e01\u7684\u4e00\u4fa7\u4e3a 50 \u4e2a\u5dde\u7684\u6bcf\u4e00\u4e2a\u90fd\u5370\u5237\u4e86\u4e0d\u540c\u7684\u8bbe\u8ba1\u3002 \u5176\u4ed6\u7684\u786c\u5e01\u90fd\u6ca1\u6709\u8fd9\u79cd\u533a\u5206\u5dde\u7684\u8bbe\u8ba1\uff0c\u6240\u4ee5\u53ea\u6709\u8fd9\u4e9b 25 \u7f8e\u5206\u786c\u5e01\u6709\u7279\u6b8a\u7684\u4ef7\u503c\u3002 \u53ef\u4ee5\u5c06\u8fd9\u4e9b\u4fe1\u606f\u52a0\u5165\u6211\u4eec\u7684 enum \uff0c\u901a\u8fc7\u6539\u53d8 Quarter \u6210\u5458\u6765\u5305\u542b\u4e00\u4e2a State \u503c\uff0c\u793a\u4f8b\u5b8c\u6210\u4e86\u8fd9\u4e9b\u4fee\u6539\uff1a #[derive(Debug)] // \u8fd9\u6837\u53ef\u4ee5\u7acb\u523b\u770b\u5230\u5dde\u7684\u540d\u79f0 enum UsState { Alabama , Alaska , // --snip-- } enum Coin { Penny , Nickel , Dime , Quarter ( UsState ), } fn main () {} \u60f3\u8c61\u4e00\u4e0b\u6211\u4eec\u7684\u4e00\u4e2a\u670b\u53cb\u5c1d\u8bd5\u6536\u96c6\u6240\u6709 50 \u4e2a\u5dde\u7684 25 \u7f8e\u5206\u786c\u5e01\u3002\u5728\u6839\u636e\u786c\u5e01\u7c7b\u578b\u5206\u7c7b\u96f6\u94b1\u7684\u540c\u65f6\uff0c\u4e5f\u53ef\u4ee5\u62a5\u544a\u51fa\u6bcf\u4e2a 25 \u7f8e\u5206\u786c\u5e01\u6240\u5bf9\u5e94\u7684\u5dde\u540d\u79f0\uff0c\u8fd9\u6837\u5982\u679c\u6211\u4eec\u7684\u670b\u53cb\u6ca1\u6709\u7684\u8bdd\uff0c\u4ed6\u53ef\u4ee5\u5c06\u5176\u52a0\u5165\u6536\u85cf\u3002 \u5728\u8fd9\u4e9b\u4ee3\u7801\u7684\u5339\u914d\u8868\u8fbe\u5f0f\u4e2d\uff0c\u6211\u4eec\u5728\u5339\u914d Coin::Quarter \u6210\u5458\u7684\u5206\u652f\u7684\u6a21\u5f0f\u4e2d\u589e\u52a0\u4e86\u4e00\u4e2a\u53eb\u505a state \u7684\u53d8\u91cf\u3002\u5f53\u5339\u914d\u5230 Coin::Quarter \u65f6\uff0c\u53d8\u91cf state \u5c06\u4f1a\u7ed1\u5b9a 25 \u7f8e\u5206\u786c\u5e01\u6240\u5bf9\u5e94\u5dde\u7684\u503c\u3002 \u63a5\u7740\u5728\u90a3\u4e2a\u5206\u652f\u7684\u4ee3\u7801\u4e2d\u4f7f\u7528 state \uff0c\u5982\u4e0b\uff1a fn value_in_cents ( coin : Coin ) -> u8 { match coin { Coin :: Penny => 1 , Coin :: Nickel => 5 , Coin :: Dime => 10 , Coin :: Quarter ( state ) => { println! ( \"State quarter from {:?}!\" , state ); 25 } } } value_in_cents ( Coin :: Quarter ( UsState :: Alaska )) // state \u7ed1\u5b9a\u7684\u5c06\u4f1a\u662f\u503c UsState::Alaska \u5339\u914d Option\\<T> \u5728\u4e4b\u524d\u7684\u90e8\u5206\u4e2d\u4f7f\u7528 Option<T> \u65f6\uff0c\u662f\u4e3a\u4e86\u4ece Some \u4e2d\u53d6\u51fa\u5176\u5185\u90e8\u7684 T \u503c\uff1b\u6211\u4eec\u8fd8\u53ef\u4ee5\u50cf\u5904\u7406 Coin \u679a\u4e3e\u90a3\u6837\u4f7f\u7528 match \u5904\u7406 Option<T> \uff01\u53ea\u4e0d\u8fc7\u8fd9\u56de\u6bd4\u8f83\u7684\u4e0d\u518d\u662f\u786c\u5e01\uff0c\u800c\u662f Option<T> \u7684\u6210\u5458\uff0c\u4f46 match \u8868\u8fbe\u5f0f\u7684\u5de5\u4f5c\u65b9\u5f0f\u4fdd\u6301\u4e0d\u53d8\u3002 \u6bd4\u5982\u6211\u4eec\u60f3\u8981\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\uff0c\u5b83\u83b7\u53d6\u4e00\u4e2a Option<i32> \uff0c\u5982\u679c\u5176\u4e2d\u542b\u6709\u4e00\u4e2a\u503c\uff0c\u5c06\u5176\u52a0\u4e00\u3002\u5982\u679c\u5176\u4e2d\u6ca1\u6709\u503c\uff0c\u51fd\u6570\u5e94\u8be5\u8fd4\u56de None \u503c\uff0c\u800c\u4e0d\u5c1d\u8bd5\u6267\u884c\u4efb\u4f55\u64cd\u4f5c\u3002 // \u4e00\u4e2a\u5728 Option<i32> \u4e0a\u4f7f\u7528 match \u8868\u8fbe\u5f0f\u7684\u51fd\u6570 fn plus_one ( x : Option < i32 > ) -> Option < i32 > { match x { None => None , Some ( i ) => Some ( i + 1 ), } } let five = Some ( 5 ); let six = plus_one ( five ); let none = plus_one ( None ); \u5339\u914d Some(T) \u66f4\u4ed4\u7ec6\u5730\u68c0\u67e5 plus_one \u7684\u7b2c\u4e00\u884c\u64cd\u4f5c\u3002\u5f53\u8c03\u7528 plus_one(five) \u65f6\uff0c plus_one \u51fd\u6570\u4f53\u4e2d\u7684 x \u5c06\u4f1a\u662f\u503c Some(5) \u3002\u63a5\u7740\u5c06\u5176\u4e0e\u6bcf\u4e2a\u5206\u652f\u6bd4\u8f83\u3002 \u503c Some(5) \u5e76\u4e0d\u5339\u914d\u6a21\u5f0f None \uff0c\u6240\u4ee5\u7ee7\u7eed\u8fdb\u884c\u4e0b\u4e00\u4e2a\u5206\u652f\u3002 Some ( i ) => Some ( i + 1 ), Some(5) \u4e0e Some(i) \u5339\u914d\u5417\uff1f\u5f53\u7136\u5339\u914d\uff01\u5b83\u4eec\u662f\u76f8\u540c\u7684\u6210\u5458\u3002 i \u7ed1\u5b9a\u4e86 Some \u4e2d\u5305\u542b\u7684\u503c\uff0c\u6240\u4ee5 i \u7684\u503c\u662f 5 \u3002 \u63a5\u7740\u5339\u914d\u5206\u652f\u7684\u4ee3\u7801\u88ab\u6267\u884c\uff0c\u6240\u4ee5\u6211\u4eec\u5c06 i \u7684\u503c\u52a0\u4e00\u5e76\u8fd4\u56de\u4e00\u4e2a\u542b\u6709\u503c 6 \u7684\u65b0 Some \u3002 \u63a5\u7740\u8003\u8651\u4e0b\u793a\u4f8b\u4e2d plus_one \u7684\u7b2c\u4e8c\u4e2a\u8c03\u7528\uff0c\u8fd9\u91cc x \u662f None \u3002\u6211\u4eec\u8fdb\u5165 match \u5e76\u4e0e\u7b2c\u4e00\u4e2a\u5206\u652f\u76f8\u6bd4\u8f83\u3002 None => None , \u5339\u914d\u4e0a\u4e86\uff01\u8fd9\u91cc\u6ca1\u6709\u503c\u6765\u52a0\u4e00\uff0c\u6240\u4ee5\u7a0b\u5e8f\u7ed3\u675f\u5e76\u8fd4\u56de => \u53f3\u4fa7\u7684\u503c None \uff0c\u56e0\u4e3a\u7b2c\u4e00\u4e2a\u5206\u652f\u5c31\u5339\u914d\u5230\u4e86\uff0c \u5176\u4ed6\u7684\u5206\u652f\u5c06\u4e0d\u518d\u6bd4\u8f83 \u3002 \u5c06 match \u4e0e\u679a\u4e3e\u76f8\u7ed3\u5408\u5728\u5f88\u591a\u573a\u666f\u4e2d\u90fd\u662f\u6709\u7528\u7684\u3002\u4f60\u4f1a\u5728 Rust \u4ee3\u7801\u4e2d\u770b\u5230\u5f88\u591a\u8fd9\u6837\u7684\u6a21\u5f0f\uff1a match \u4e00\u4e2a\u679a\u4e3e\uff0c\u7ed1\u5b9a\u5176\u4e2d\u7684\u503c\u5230\u4e00\u4e2a\u53d8\u91cf\uff0c\u63a5\u7740\u6839\u636e\u5176\u503c\u6267\u884c\u4ee3\u7801 \u3002 \u8fd9\u5728\u4e00\u5f00\u59cb\u6709\u70b9\u590d\u6742\uff0c\u4e0d\u8fc7\u4e00\u65e6\u4e60\u60ef\u4e86\uff0c\u4f60\u4f1a\u5e0c\u671b\u6240\u6709\u8bed\u8a00\u90fd\u62e5\u6709\u5b83\uff01 \u5339\u914d\u662f\u7a77\u5c3d\u7684 match \u8fd8\u6709\u53e6\u4e00\u65b9\u9762\u9700\u8981\u8ba8\u8bba\uff1a \u8fd9\u4e9b\u5206\u652f\u5fc5\u987b\u8986\u76d6\u4e86\u6240\u6709\u7684\u53ef\u80fd\u6027 \u3002\u8003\u8651\u4e00\u4e0b plus_one \u51fd\u6570\u7684\u8fd9\u4e2a\u7248\u672c\uff0c\u5b83\u6709\u4e00\u4e2a bug \u5e76\u4e0d\u80fd\u7f16\u8bd1\uff1a fn plus_one ( x : Option < i32 > ) -> Option < i32 > { match x { Some ( i ) => Some ( i + 1 ), } } \u6211\u4eec\u6ca1\u6709\u5904\u7406 None \u7684\u60c5\u51b5\uff0c\u6240\u4ee5\u8fd9\u4e9b\u4ee3\u7801\u4f1a\u9020\u6210\u4e00\u4e2a bug \u3002\u5e78\u8fd0\u7684\u662f\uff0c\u8fd9\u662f\u4e00\u4e2a Rust \u77e5\u9053\u5982\u4f55\u5904\u7406\u7684 bug\u3002\u5982\u679c\u5c1d\u8bd5\u7f16\u8bd1\u8fd9\u6bb5\u4ee3\u7801\uff0c\u4f1a\u5f97\u5230\u8fd9\u4e2a\u9519\u8bef\uff1a $ cargo run Compiling enums v0.1.0 ( file:///projects/enums ) error [ E0004 ] : non-exhaustive patterns: ` None ` not covered --> src/main.rs:3:15 | 3 | match x { | ^ pattern ` None ` not covered | = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms = note: the matched value is of type ` Option<i32> ` For more information about this error, try ` rustc --explain E0004 ` . error: could not compile ` enums ` due to previous error Rust \u77e5\u9053\u6211\u4eec\u6ca1\u6709\u8986\u76d6\u6240\u6709\u53ef\u80fd\u7684\u60c5\u51b5\u751a\u81f3\u77e5\u9053\u54ea\u4e9b\u6a21\u5f0f\u88ab\u5fd8\u8bb0\u4e86\uff01 Rust \u4e2d\u7684\u5339\u914d\u662f \u7a77\u5c3d\u7684 \uff08exhaustive\uff09\uff1a \u5fc5\u987b\u7a77\u4e3e\u5230\u6700\u540e\u7684\u53ef\u80fd\u6027\u6765\u4f7f\u4ee3\u7801\u6709\u6548 \u3002 \u7279\u522b\u7684\u5728\u8fd9\u4e2a Option<T> \u7684\u4f8b\u5b50\u4e2d\uff0cRust \u9632\u6b62\u6211\u4eec\u5fd8\u8bb0\u660e\u786e\u7684\u5904\u7406 None \u7684\u60c5\u51b5\uff0c\u8fd9\u8ba9\u6211\u4eec\u514d\u4e8e\u5047\u8bbe\u62e5\u6709\u4e00\u4e2a\u5b9e\u9645\u4e0a\u4e3a\u7a7a\u7684\u503c\uff0c\u4ece\u800c\u4f7f\u4e4b\u524d\u63d0\u5230\u7684\u4ef7\u503c\u4ebf\u4e07\u7684\u9519\u8bef\u4e0d\u53ef\u80fd\u53d1\u751f\u3002 \u901a\u914d\u6a21\u5f0f\u548c _ \u5360\u4f4d\u7b26 let dice_roll = 9 ; match dice_roll { // \u5bf9\u4e8e\u524d\u4e24\u4e2a\u5206\u652f\uff0c\u5339\u914d\u6a21\u5f0f\u662f\u5b57\u9762\u503c 3 \u548c 7 3 => add_fancy_hat (), 7 => remove_fancy_hat (), // \u6700\u540e\u4e00\u4e2a\u5206\u652f\u5219\u6db5\u76d6\u4e86\u6240\u6709\u5176\u4ed6\u53ef\u80fd\u7684\u503c other => move_player ( other ), } fn add_fancy_hat () {} fn remove_fancy_hat () {} fn move_player ( num_spaces : u8 ) {} \u6a21\u5f0f\u662f\u6211\u4eec\u547d\u540d\u4e3a other \u7684\u4e00\u4e2a\u53d8\u91cf\u3002 other \u5206\u652f\u7684\u4ee3\u7801\u901a\u8fc7\u5c06\u5176\u4f20\u9012\u7ed9 move_player \u51fd\u6570\u6765\u4f7f\u7528\u8fd9\u4e2a\u53d8\u91cf\u3002 \u5373\u4f7f\u6211\u4eec\u6ca1\u6709\u5217\u51fa u8 \u6240\u6709\u53ef\u80fd\u7684\u503c\uff0c\u8fd9\u6bb5\u4ee3\u7801\u4f9d\u7136\u80fd\u591f\u7f16\u8bd1\uff0c\u56e0\u4e3a\u6700\u540e\u4e00\u4e2a\u6a21\u5f0f\u5c06\u5339\u914d\u6240\u6709\u672a\u88ab\u7279\u6b8a\u5217\u51fa\u7684\u503c\u3002 \u8fd9\u79cd\u901a\u914d\u6a21\u5f0f\u6ee1\u8db3\u4e86 match \u5fc5\u987b\u88ab\u7a77\u5c3d\u7684\u8981\u6c42\u3002 \u8bf7\u6ce8\u610f\uff0c\u6211\u4eec \u5fc5\u987b\u5c06\u901a\u914d\u5206\u652f\u653e\u5728\u6700\u540e\uff0c\u56e0\u4e3a\u6a21\u5f0f\u662f\u6309\u987a\u5e8f\u5339\u914d\u7684 \u3002 \u5982\u679c\u6211\u4eec\u5728\u901a\u914d\u5206\u652f\u540e\u6dfb\u52a0\u5176\u4ed6\u5206\u652f\uff0cRust \u5c06\u4f1a\u8b66\u544a\u6211\u4eec\uff0c\u56e0\u4e3a\u6b64\u540e\u7684\u5206\u652f\u6c38\u8fdc\u4e0d\u4f1a\u88ab\u5339\u914d\u5230\u3002 Rust \u8fd8\u63d0\u4f9b\u4e86\u4e00\u4e2a\u6a21\u5f0f\uff0c\u5f53\u6211\u4eec\u4e0d\u60f3\u4f7f\u7528\u901a\u914d\u6a21\u5f0f\u83b7\u53d6\u7684\u503c\u65f6\uff0c\u8bf7\u4f7f\u7528 _ \uff0c\u8fd9\u662f\u4e00\u4e2a\u7279\u6b8a\u7684\u6a21\u5f0f\uff0c\u53ef\u4ee5\u5339\u914d\u4efb\u610f\u503c\u800c\u4e0d\u7ed1\u5b9a\u5230\u8be5\u503c\u3002 \u8fd9\u544a\u8bc9 Rust \u6211\u4eec\u4e0d\u4f1a\u4f7f\u7528\u8fd9\u4e2a\u503c\uff0c\u6240\u4ee5 Rust \u4e5f\u4e0d\u4f1a\u8b66\u544a\u6211\u4eec\u5b58\u5728\u672a\u4f7f\u7528\u7684\u53d8\u91cf\u3002 let dice_roll = 9 ; match dice_roll { 3 => add_fancy_hat (), 7 => remove_fancy_hat (), _ => reroll (), // \u4f7f\u7528 _ \u4e22\u5f03\u503c\u3002 } fn add_fancy_hat () {} fn remove_fancy_hat () {} fn reroll () {} \u6700\u540e\uff0c\u5982\u679c\u5c06\u65e0\u4e8b\u53d1\u751f\u3002\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 \u5355\u5143\u503c \uff08\u5728\u201c \u5143\u7ec4\u7c7b\u578b \u201d\u4e00\u8282\u4e2d\u63d0\u5230\u7684\u7a7a\u5143\u7ec4\uff09\u4f5c\u4e3a _ \u5206\u652f\u7684\u4ee3\u7801\uff1a let dice_roll = 9 ; match dice_roll { 3 => add_fancy_hat (), 7 => remove_fancy_hat (), _ => (), // \u5355\u5143\u503c\uff0c\u65e0\u4e8b\u53d1\u751f\u3002 } fn add_fancy_hat () {} fn remove_fancy_hat () {} \u5728\u8fd9\u91cc\uff0c\u660e\u786e\u544a\u8bc9 Rust \u6211\u4eec \u4e0d\u4f1a\u4f7f\u7528\u4e0e\u524d\u9762\u6a21\u5f0f\u4e0d\u5339\u914d\u7684\u503c\uff0c\u5e76\u4e14\u8fd9\u79cd\u60c5\u51b5\u4e0b\u6211\u4eec\u4e0d\u60f3\u8fd0\u884c\u4efb\u4f55\u4ee3\u7801 \u3002 if let\u63a7\u5236\u6d41 if let \u8bed\u6cd5\u8ba9\u6211\u4eec\u4ee5\u4e00\u79cd\u4e0d\u90a3\u4e48\u5197\u957f\u7684\u65b9\u5f0f\u7ed3\u5408 if \u548c let \uff0c\u6765\u5904\u7406\u53ea\u5339\u914d\u4e00\u4e2a\u6a21\u5f0f\u7684\u503c\u800c\u5ffd\u7565\u5176\u4ed6\u6a21\u5f0f\u7684\u60c5\u51b5\u3002 let config_max = Some ( 3 u8 ); // \u5339\u914d\u4e00\u4e2a config_max \u53d8\u91cf\u4e2d\u7684 Option<u8> \u503c\u5e76\u53ea\u5e0c\u671b\u5f53\u503c\u4e3a Some \u6210\u5458\u65f6\u6267\u884c\u4ee3\u7801 match config_max { // \u8fd9\u4e2a\u503c\u88ab\u7ed1\u5b9a\u5230\u6a21\u5f0f\u4e2d\u7684 max \u53d8\u91cf\u91cc\u3002 Some ( max ) => println! ( \"The maximum is configured to be {}\" , max ), // \u5bf9\u4e8e None \u503c\u6211\u4eec\u4e0d\u5e0c\u671b\u505a\u4efb\u4f55\u64cd\u4f5c _ => (), } \u4e0d\u8fc7\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 if let \u8fd9\u79cd\u66f4\u77ed\u7684\u65b9\u5f0f\u7f16\u5199: let config_max = Some ( 3 u8 ); // if let \u8bed\u6cd5\u83b7\u53d6\u901a\u8fc7\u7b49\u53f7\u5206\u9694\u7684\u4e00\u4e2a\u6a21\u5f0f\u548c\u4e00\u4e2a\u8868\u8fbe\u5f0f\u3002\u5b83\u7684\u5de5\u4f5c\u65b9\u5f0f\u4e0e match \u76f8\u540c\uff0c\u8fd9\u91cc\u7684\u8868\u8fbe\u5f0f\u5bf9\u5e94 match \u800c\u6a21\u5f0f\u5219\u5bf9\u5e94\u7b2c\u4e00\u4e2a\u5206\u652f\u3002 // \u6a21\u5f0f\u662f Some(max)\uff0cmax \u7ed1\u5b9a\u4e3a Some \u4e2d\u7684\u503c\u3002 // \u63a5\u7740\u53ef\u4ee5\u5728 if let \u4ee3\u7801\u5757\u4e2d\u4f7f\u7528 max \u4e86 if let Some ( max ) = config_max { println! ( \"The maximum is configured to be {}\" , max ); } // \u6a21\u5f0f\u4e0d\u5339\u914d\u65f6 if let \u5757\u4e2d\u7684\u4ee3\u7801\u4e0d\u4f1a\u6267\u884c\u3002 \u4f7f\u7528 if let \u610f\u5473\u7740\u7f16\u5199\u66f4\u5c11\u4ee3\u7801\uff0c\u66f4\u5c11\u7684\u7f29\u8fdb\u548c\u66f4\u5c11\u7684\u6837\u677f\u4ee3\u7801\u3002 \u7136\u800c\uff0c\u8fd9\u6837\u4f1a\u5931\u53bb match \u5f3a\u5236\u8981\u6c42\u7684\u7a77\u5c3d\u6027\u68c0\u67e5\u3002 match \u548c if let \u4e4b\u95f4\u7684\u9009\u62e9\u4f9d\u8d56\u7279\u5b9a\u7684\u73af\u5883\u4ee5\u53ca\u589e\u52a0\u7b80\u6d01\u5ea6\u548c\u5931\u53bb\u7a77\u5c3d\u6027\u68c0\u67e5\u7684\u6743\u8861\u53d6\u820d\u3002 \u53ef\u4ee5\u8ba4\u4e3a if let \u662f match \u7684\u4e00\u4e2a\u8bed\u6cd5\u7cd6\uff0c\u5b83\u5f53\u503c\u5339\u914d\u67d0\u4e00\u6a21\u5f0f\u65f6\u6267\u884c\u4ee3\u7801\u800c\u5ffd\u7565\u6240\u6709\u5176\u4ed6\u503c\u3002 // \u53ef\u4ee5\u5728 if let \u4e2d\u5305\u542b\u4e00\u4e2a else\u3002else \u5757\u4e2d\u7684\u4ee3\u7801\u4e0e match \u8868\u8fbe\u5f0f\u4e2d\u7684 _ \u5206\u652f\u5757\u4e2d\u7684\u4ee3\u7801\u76f8\u540c let mut count = 0 ; if let Coin :: Quarter ( state ) = coin { println! ( \"State quarter from {:?}!\" , state ); } else { count += 1 ; } // \u8fd9\u6837\u7684 match \u8868\u8fbe\u5f0f\u5c31\u7b49\u540c\u4e8e if let \u548c else\u3002 let mut count = 0 ; match coin { Coin :: Quarter ( state ) => println! ( \"State quarter from {:?}!\" , state ), _ => count += 1 , }","title":"\u679a\u4e3e"},{"location":"enumerations/#_1","text":"\u679a\u4e3e \uff08enumerations\uff09\uff0c\u4e5f\u88ab\u79f0\u4f5c enums \u3002 \u679a\u4e3e\u5141\u8bb8\u4f60\u901a\u8fc7\u5217\u4e3e\u53ef\u80fd\u7684 \u6210\u5458 \uff08variants\uff09 \u6765\u5b9a\u4e49\u4e00\u4e2a\u7c7b\u578b\u3002 \u9996\u5148\uff0c\u6211\u4eec\u4f1a\u5b9a\u4e49\u5e76\u4f7f\u7528\u4e00\u4e2a\u679a\u4e3e\u6765\u5c55\u793a\u5b83\u662f\u5982\u4f55\u8fde\u540c\u6570\u636e\u4e00\u8d77\u7f16\u7801\u4fe1\u606f\u7684\u3002 \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u4f1a\u63a2\u7d22\u4e00\u4e2a\u7279\u522b\u6709\u7528\u7684\u679a\u4e3e\uff0c\u53eb\u505a Option\uff0c\u5b83\u4ee3\u8868\u4e00\u4e2a\u503c\u8981\u4e48\u662f\u67d0\u4e2a\u503c\u8981\u4e48\u4ec0\u4e48\u90fd\u4e0d\u662f\u3002 \u7136\u540e\u4f1a\u8bb2\u5230\u5728 match \u8868\u8fbe\u5f0f\u4e2d\u7528\u6a21\u5f0f\u5339\u914d\uff0c\u9488\u5bf9\u4e0d\u540c\u7684\u679a\u4e3e\u503c\u7f16\u5199\u76f8\u5e94\u8981\u6267\u884c\u7684\u4ee3\u7801\u3002 \u6700\u540e\u4f1a\u4ecb\u7ecd if let\uff0c\u53e6\u4e00\u4e2a\u7b80\u6d01\u65b9\u4fbf\u5904\u7406\u4ee3\u7801\u4e2d\u679a\u4e3e\u7684\u7ed3\u6784\u3002","title":"\u679a\u4e3e"},{"location":"enumerations/#_2","text":"\u7ed3\u6784\u4f53\u7ed9\u4e88\u4f60\u5c06\u5b57\u6bb5\u548c\u6570\u636e\u805a\u5408\u5728\u4e00\u8d77\u7684\u65b9\u6cd5 \uff0c\u50cf Rectangle \u7ed3\u6784\u4f53\u6709 width \u548c height \u4e24\u4e2a\u5b57\u6bb5\u3002 \u800c\u679a\u4e3e\u7ed9\u4e88\u4f60\u5c06\u4e00\u4e2a\u503c\u6210\u4e3a\u4e00\u4e2a\u96c6\u5408\u4e4b\u4e00\u7684\u65b9\u6cd5 \u3002\u6bd4\u5982\uff0c\u6211\u4eec\u60f3\u8ba9 Rectangle \u662f\u4e00\u4e9b\u5f62\u72b6\u7684\u96c6\u5408\uff0c\u5305\u542b Circle \u548c Triangle \u3002 \u4e3a\u4e86\u505a\u5230\u8fd9\u4e2a\uff0cRust\u63d0\u4f9b\u4e86\u679a\u4e3e\u7c7b\u578b\u3002 \u5047\u8bbe\u6211\u4eec\u8981\u5904\u7406 IP \u5730\u5740\u3002\u76ee\u524d\u88ab\u5e7f\u6cdb\u4f7f\u7528\u7684\u4e24\u4e2a\u4e3b\u8981 IP \u6807\u51c6\uff1a IPv4 \uff08version four\uff09\u548c IPv6 \uff08version six\uff09\u3002\u6240\u4ee5\u53ef\u4ee5 \u679a\u4e3e \u51fa\u6240\u6709\u53ef\u80fd\u7684\u503c\uff0c\u8fd9\u4e5f\u6b63\u662f\u6b64\u679a\u4e3e\u540d\u5b57\u7684\u7531\u6765\u3002 \u4efb\u4f55\u4e00\u4e2a IP \u5730\u5740\u8981\u4e48\u662f IPv4 \u7684\u8981\u4e48\u662f IPv6 \u7684\uff0c\u800c\u4e14\u4e0d\u80fd\u4e24\u8005\u90fd\u662f\u3002 IP \u5730\u5740\u7684\u8fd9\u4e2a\u7279\u6027\u4f7f\u5f97\u679a\u4e3e\u6570\u636e\u7ed3\u6784\u975e\u5e38\u9002\u5408\u8fd9\u4e2a\u573a\u666f\uff0c\u56e0\u4e3a\u679a\u4e3e\u503c\u53ea\u53ef\u80fd\u662f\u5176\u4e2d\u4e00\u4e2a\u6210\u5458\u3002 IPv4 \u548c IPv6 \u4ece\u6839\u672c\u4e0a\u8bb2\u4ecd\u662f IP \u5730\u5740\uff0c\u6240\u4ee5\u5f53\u4ee3\u7801\u5728\u5904\u7406\u9002\u7528\u4e8e\u4efb\u4f55\u7c7b\u578b\u7684 IP \u5730\u5740\u7684\u573a\u666f\u65f6\u5e94\u8be5\u628a\u5b83\u4eec\u5f53\u4f5c\u76f8\u540c\u7684\u7c7b\u578b\u3002 \u901a\u8fc7\u5728\u4ee3\u7801\u4e2d\u5b9a\u4e49\u4e00\u4e2a IpAddrKind \u679a\u4e3e\u6765\u8868\u73b0\u8fd9\u4e2a\u6982\u5ff5\u5e76\u5217\u51fa\u53ef\u80fd\u7684 IP \u5730\u5740\u7c7b\u578b\uff0c V4 \u548c V6 \u3002\u8fd9\u88ab\u79f0\u4e3a\u679a\u4e3e\u7684 \u6210\u5458 \uff08variants\uff09\uff1a enum IpAddrKind { V4 , V6 , } // \u73b0\u5728 IpAddrKind \u5c31\u662f\u4e00\u4e2a\u53ef\u4ee5\u5728\u4ee3\u7801\u4e2d\u4f7f\u7528\u7684\u81ea\u5b9a\u4e49\u6570\u636e\u7c7b\u578b\u4e86\u3002","title":"\u5b9a\u4e49"},{"location":"enumerations/#_3","text":"\u53ef\u4ee5\u50cf\u8fd9\u6837\u521b\u5efa IpAddrKind \u4e24\u4e2a\u4e0d\u540c\u6210\u5458\u7684\u5b9e\u4f8b\uff1a let four = IpAddrKind :: V4 ; let six = IpAddrKind :: V6 ; \u6ce8\u610f\u679a\u4e3e\u7684\u6210\u5458\u4f4d\u4e8e\u5176\u6807\u8bc6\u7b26\u7684\u547d\u540d\u7a7a\u95f4\u4e2d\uff0c\u5e76\u4f7f\u7528 \u4e24\u4e2a\u5192\u53f7 \u5206\u5f00\u3002 \u63a5\u7740\u53ef\u4ee5\u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570\u6765\u83b7\u53d6\u4efb\u4f55 IpAddrKind \uff1a fn route ( ip_kind : IpAddrKind ) {} \u73b0\u5728\u53ef\u4ee5\u4f7f\u7528\u4efb\u4e00\u6210\u5458\u6765\u8c03\u7528\u8fd9\u4e2a\u51fd\u6570\uff1a route ( IpAddrKind :: V4 ); route ( IpAddrKind :: V6 ); \u4f7f\u7528\u679a\u4e3e\u751a\u81f3\u8fd8\u6709\u66f4\u591a\u4f18\u52bf\u3002\u8fdb\u4e00\u6b65\u8003\u8651\u4e00\u4e0b IP \u5730\u5740\u7c7b\u578b\uff0c\u76ee\u524d\u6ca1\u6709\u4e00\u4e2a\u5b58\u50a8\u5b9e\u9645 IP \u5730\u5740 \u6570\u636e \u7684\u65b9\u6cd5\uff1b\u53ea\u77e5\u9053\u5b83\u662f\u4ec0\u4e48 \u7c7b\u578b \u7684\u3002 \u8003\u8651\u5230\u5df2\u7ecf\u5b66\u4e60\u8fc7\u7ed3\u6784\u4f53\u4e86\uff0c\u4f60\u53ef\u80fd\u4f1a\u5982\u4e0b\u793a\u4f8b\u90a3\u6837\u5904\u7406\u8fd9\u4e2a\u95ee\u9898\uff1a enum IpAddrKind { V4 , V6 , } struct IpAddr { kind : IpAddrKind , address : String , } let home = IpAddr { kind : IpAddrKind :: V4 , address : String :: from ( \"127.0.0.1\" ), }; let loopback = IpAddr { kind : IpAddrKind :: V6 , address : String :: from ( \"::1\" ), }; \u53ef\u4ee5\u4f7f\u7528\u4e00\u79cd\u66f4\u7b80\u6d01\u7684\u65b9\u5f0f\u6765\u8868\u8fbe\u76f8\u540c\u7684\u6982\u5ff5 \uff0c\u4ec5\u4ec5\u4f7f\u7528\u679a\u4e3e\u5e76\u5c06\u6570\u636e\u76f4\u63a5\u653e\u8fdb\u6bcf\u4e00\u4e2a\u679a\u4e3e\u6210\u5458\uff0c\u800c\u4e0d\u662f\u5c06\u679a\u4e3e\u4f5c\u4e3a\u7ed3\u6784\u4f53\u7684\u4e00\u90e8\u5206\u3002 IpAddr \u679a\u4e3e\u7684\u65b0\u5b9a\u4e49\u8868\u660e\u4e86 V4 \u548c V6 \u6210\u5458\u90fd\u5173\u8054\u4e86 String \u503c\uff1a enum IpAddr { V4 ( String ), V6 ( String ), } let home = IpAddr :: V4 ( String :: from ( \"127.0.0.1\" )); let loopback = IpAddr :: V6 ( String :: from ( \"::1\" )); \u8fd9\u6837\u76f4\u63a5\u5c06\u6570\u636e\u9644\u52a0\u5230\u679a\u4e3e\u7684\u6bcf\u4e2a\u6210\u5458\u4e0a\uff0c\u8fd9\u6837\u5c31\u4e0d\u9700\u8981\u4e00\u4e2a\u989d\u5916\u7684\u7ed3\u6784\u4f53\u4e86\u3002 \u53e6\u4e00\u4e2a\u7ec6\u8282\uff1a \u6bcf\u4e00\u4e2a\u6211\u4eec\u5b9a\u4e49\u7684\u679a\u4e3e\u6210\u5458\u7684\u540d\u5b57\u4e5f\u53d8\u6210\u4e86\u4e00\u4e2a\u6784\u5efa\u679a\u4e3e\u7684\u5b9e\u4f8b\u7684\u51fd\u6570 \u3002\u4e5f\u5c31\u662f\u8bf4\uff0c IpAddr::V4() \u662f\u4e00\u4e2a\u83b7\u53d6 String \u53c2\u6570\u5e76\u8fd4\u56de IpAddr \u7c7b\u578b\u5b9e\u4f8b\u7684\u51fd\u6570\u8c03\u7528\u3002 \u4f5c\u4e3a\u5b9a\u4e49\u679a\u4e3e\u7684\u7ed3\u679c\uff0c\u8fd9\u4e9b \u6784\u9020\u51fd\u6570\u4f1a\u81ea\u52a8\u88ab\u5b9a\u4e49 \u3002 \u7528\u679a\u4e3e\u66ff\u4ee3\u7ed3\u6784\u4f53\u8fd8\u6709\u53e6\u4e00\u4e2a\u4f18\u52bf\uff1a \u6bcf\u4e2a\u6210\u5458\u53ef\u4ee5\u5904\u7406\u4e0d\u540c\u7c7b\u578b\u548c\u6570\u91cf\u7684\u6570\u636e \u3002 \u5982\u4e0b: enum IpAddr { V4 ( u8 , u8 , u8 , u8 ), V6 ( String ), } let home = IpAddr :: V4 ( 127 , 0 , 0 , 1 ); let loopback = IpAddr :: V6 ( String :: from ( \"::1\" )); \u4e8b\u5b9e\u8bc1\u660e\u5b58\u50a8\u548c\u7f16\u7801 IP \u5730\u5740\u5b9e\u5728\u662f\u592a\u5e38\u89c1\u4e86 \u4ee5\u81f4\u6807\u51c6\u5e93\u63d0\u4f9b\u4e86\u4e00\u4e2a\u5f00\u7bb1\u5373\u7528\u7684\u5b9a\u4e49\uff01 \u6807\u51c6\u5e93\u662f\u5982\u4f55\u5b9a\u4e49 IpAddr \u7684\uff1a\u5b83\u6b63\u6709\u7740\u8ddf\u6211\u4eec\u5b9a\u4e49\u548c\u4f7f\u7528\u7684\u4e00\u6837\u7684\u679a\u4e3e\u548c\u6210\u5458\uff0c\u4e0d\u8fc7\u5b83\u5c06\u6210\u5458\u4e2d\u7684\u5730\u5740\u6570\u636e\u5d4c\u5165\u5230\u4e86\u4e24\u4e2a\u4e0d\u540c\u5f62\u5f0f\u7684\u7ed3\u6784\u4f53\u4e2d\uff0c\u5b83\u4eec\u5bf9\u4e0d\u540c\u7684\u6210\u5458\u7684\u5b9a\u4e49\u662f\u4e0d\u540c\u7684\uff1a struct Ipv4Addr { // --snip-- } struct Ipv6Addr { // --snip-- } enum IpAddr { V4 ( Ipv4Addr ), V6 ( Ipv6Addr ), } \u8fd9\u4e9b\u4ee3\u7801\u5c55\u793a\u4e86\u53ef\u4ee5\u5c06\u4efb\u610f\u7c7b\u578b\u7684\u6570\u636e\u653e\u5165\u679a\u4e3e\u6210\u5458\u4e2d\uff1a\u4f8b\u5982 \u5b57\u7b26\u4e32 \u3001 \u6570\u5b57\u7c7b\u578b \u6216\u8005 \u7ed3\u6784\u4f53 \u3002\u751a\u81f3\u53ef\u4ee5\u5305\u542b\u53e6\u4e00\u4e2a \u679a\u4e3e \uff01 \u867d\u7136\u6807\u51c6\u5e93\u4e2d\u5305\u542b\u4e00\u4e2a IpAddr \u7684\u5b9a\u4e49\uff0c\u4ecd\u7136\u53ef\u4ee5\u521b\u5efa\u548c\u4f7f\u7528\u6211\u4eec\u81ea\u5df1\u7684\u5b9a\u4e49\u800c\u4e0d\u4f1a\u6709\u51b2\u7a81\uff0c\u56e0\u4e3a\u6211\u4eec\u5e76\u6ca1\u6709\u5c06\u6807\u51c6\u5e93\u4e2d\u7684\u5b9a\u4e49\u5f15\u5165\u4f5c\u7528\u57df\u3002 enum Message { Quit , // Quit \u6ca1\u6709\u5173\u8054\u4efb\u4f55\u6570\u636e\u3002 Move { x : i32 , y : i32 }, // Move \u7c7b\u4f3c\u7ed3\u6784\u4f53\u5305\u542b\u547d\u540d\u5b57\u6bb5\u3002 Write ( String ), // Write \u5305\u542b\u5355\u72ec\u4e00\u4e2a String\u3002 ChangeColor ( i32 , i32 , i32 ), // ChangeColor \u5305\u542b\u4e09\u4e2a i32\u3002 } \u5b9a\u4e49\u4e00\u4e2a\u6709\u5173\u8054\u503c\u7684\u679a\u4e3e\u7684\u65b9\u5f0f\u548c\u5b9a\u4e49\u591a\u4e2a\u4e0d\u540c\u7c7b\u578b\u7684\u7ed3\u6784\u4f53\u7684\u65b9\u5f0f\u5f88\u76f8\u50cf\uff0c\u9664\u4e86\u679a\u4e3e\u4e0d\u4f7f\u7528 struct \u5173\u952e\u5b57\u4ee5\u53ca\u5176\u6240\u6709\u6210\u5458\u90fd\u88ab\u7ec4\u5408\u5728\u4e00\u8d77\u4f4d\u4e8e Message \u7c7b\u578b\u4e0b\u3002 \u5982\u4e0b\u8fd9\u4e9b\u7ed3\u6784\u4f53\u53ef\u4ee5\u5305\u542b\u4e0e\u4e4b\u524d\u679a\u4e3e\u6210\u5458\u4e2d\u76f8\u540c\u7684\u6570\u636e\uff1a struct QuitMessage ; // \u7c7b\u5355\u5143\u7ed3\u6784\u4f53 struct MoveMessage { x : i32 , y : i32 , } struct WriteMessage ( String ); // \u5143\u7ec4\u7ed3\u6784\u4f53 struct ChangeColorMessage ( i32 , i32 , i32 ); // \u5143\u7ec4\u7ed3\u6784\u4f53 \u4e0d\u8fc7\uff0c\u5982\u679c\u6211\u4eec\u4f7f\u7528\u4e0d\u540c\u7684\u7ed3\u6784\u4f53\uff0c\u7531\u4e8e\u5b83\u4eec\u90fd\u6709\u4e0d\u540c\u7684\u7c7b\u578b\uff0c\u6211\u4eec\u5c06\u4e0d\u80fd\u50cf\u4f7f\u7528 Message \u679a\u4e3e\u90a3\u6837\uff0c\u8f7b\u6613\u7684\u5b9a\u4e49\u4e00\u4e2a\u80fd\u591f\u5904\u7406\u8fd9\u4e9b\u4e0d\u540c\u7c7b\u578b\u7684\u7ed3\u6784\u4f53\u7684\u51fd\u6570\uff0c\u56e0\u4e3a \u679a\u4e3e\u662f\u5355\u72ec\u4e00\u4e2a\u7c7b\u578b \u3002 \u7ed3\u6784\u4f53\u548c\u679a\u4e3e\u8fd8\u6709\u53e6\u4e00\u4e2a\u76f8\u4f3c\u70b9\uff1a \u5c31\u50cf\u53ef\u4ee5\u4f7f\u7528 impl \u6765\u4e3a\u7ed3\u6784\u4f53\u5b9a\u4e49\u65b9\u6cd5\u90a3\u6837\uff0c\u4e5f\u53ef\u4ee5\u5728\u679a\u4e3e\u4e0a\u5b9a\u4e49\u65b9\u6cd5 \u3002\u8fd9\u662f\u4e00\u4e2a\u5b9a\u4e49\u4e8e\u6211\u4eec Message \u679a\u4e3e\u4e0a\u7684\u53eb\u505a call \u7684\u65b9\u6cd5\uff1a impl Message { // \u65b9\u6cd5\u4f53\u4f7f\u7528\u4e86 self \u6765\u83b7\u53d6\u8c03\u7528\u65b9\u6cd5\u7684\u503c\u3002 fn call ( & self ) { // \u5728\u8fd9\u91cc\u5b9a\u4e49\u65b9\u6cd5\u4f53 } } let m = Message :: Write ( String :: from ( \"hello\" )); m . call (); // \u53d8\u91cf m\uff0c\u5c31\u662f\u5f53 m.call() \u8fd0\u884c\u65f6 call \u65b9\u6cd5\u4e2d\u7684 self \u7684\u503c\u3002","title":"\u679a\u4e3e\u503c"},{"location":"enumerations/#option","text":"Option \u662f\u6807\u51c6\u5e93\u5b9a\u4e49\u7684\u53e6\u4e00\u4e2a\u679a\u4e3e\u3002 Option \u7c7b\u578b\u5e94\u7528\u5e7f\u6cdb\u56e0\u4e3a\u5b83\u7f16\u7801\u4e86\u4e00\u4e2a\u975e\u5e38\u666e\u904d\u7684\u573a\u666f\uff0c\u5373\u4e00\u4e2a\u503c\u8981\u4e48\u6709\u503c\u8981\u4e48\u6ca1\u503c\u3002 \u4f8b\u5982\uff0c\u5982\u679c\u8bf7\u6c42\u4e00\u4e2a\u5305\u542b\u9879\u7684\u5217\u8868\u7684\u7b2c\u4e00\u4e2a\u503c\uff0c\u4f1a\u5f97\u5230\u4e00\u4e2a\u503c\uff0c\u5982\u679c\u8bf7\u6c42\u4e00\u4e2a\u7a7a\u7684\u5217\u8868\uff0c\u5c31\u4ec0\u4e48\u4e5f\u4e0d\u4f1a\u5f97\u5230\u3002\u4ece\u7c7b\u578b\u7cfb\u7edf\u7684\u89d2\u5ea6\u6765\u8868\u8fbe\u8fd9\u4e2a\u6982\u5ff5\u5c31\u610f\u5473\u7740\u7f16\u8bd1\u5668\u9700\u8981\u68c0\u67e5\u662f\u5426\u5904\u7406\u4e86\u6240\u6709\u5e94\u8be5\u5904\u7406\u7684\u60c5\u51b5\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u907f\u514d\u5728\u5176\u4ed6\u7f16\u7a0b\u8bed\u8a00\u4e2d\u975e\u5e38\u5e38\u89c1\u7684 bug\u3002 \u7f16\u7a0b\u8bed\u8a00\u7684\u8bbe\u8ba1\u7ecf\u5e38\u8981\u8003\u8651\u5305\u542b\u54ea\u4e9b\u529f\u80fd\uff0c\u4f46\u8003\u8651\u6392\u9664\u54ea\u4e9b\u529f\u80fd\u4e5f\u5f88\u91cd\u8981\u3002Rust \u5e76\u6ca1\u6709\u5f88\u591a\u5176\u4ed6\u8bed\u8a00\u4e2d\u6709\u7684\u7a7a\u503c\u529f\u80fd\u3002 \u7a7a\u503c \uff08Null \uff09\u662f\u4e00\u4e2a\u503c\uff0c\u5b83\u4ee3\u8868\u6ca1\u6709\u503c\u3002\u5728\u6709\u7a7a\u503c\u7684\u8bed\u8a00\u4e2d\uff0c\u53d8\u91cf\u603b\u662f\u8fd9\u4e24\u79cd\u72b6\u6001\u4e4b\u4e00\uff1a\u7a7a\u503c\u548c\u975e\u7a7a\u503c\u3002 \u7a7a\u503c\u7684\u95ee\u9898\u5728\u4e8e\u5f53\u4f60\u5c1d\u8bd5\u50cf\u4e00\u4e2a\u975e\u7a7a\u503c\u90a3\u6837\u4f7f\u7528\u4e00\u4e2a\u7a7a\u503c\uff0c\u4f1a\u51fa\u73b0\u67d0\u79cd\u5f62\u5f0f\u7684\u9519\u8bef\u3002\u56e0\u4e3a\u7a7a\u548c\u975e\u7a7a\u7684\u5c5e\u6027\u65e0\u5904\u4e0d\u5728\uff0c\u975e\u5e38\u5bb9\u6613\u51fa\u73b0\u8fd9\u7c7b\u9519\u8bef\u3002 \u7136\u800c\uff0c\u7a7a\u503c\u5c1d\u8bd5\u8868\u8fbe\u7684\u6982\u5ff5\u4ecd\u7136\u662f\u6709\u610f\u4e49\u7684\uff1a \u7a7a\u503c\u662f\u4e00\u4e2a\u56e0\u4e3a\u67d0\u79cd\u539f\u56e0\u76ee\u524d\u65e0\u6548\u6216\u7f3a\u5931\u7684\u503c \u3002 \u95ee\u9898\u4e0d\u5728\u4e8e\u6982\u5ff5\u800c\u5728\u4e8e\u5177\u4f53\u7684\u5b9e\u73b0\u3002\u4e3a\u6b64\uff0cRust \u5e76\u6ca1\u6709\u7a7a\u503c\uff0c\u4e0d\u8fc7\u5b83\u786e\u5b9e\u62e5\u6709\u4e00\u4e2a\u53ef\u4ee5\u7f16\u7801\u5b58\u5728\u6216\u4e0d\u5b58\u5728\u6982\u5ff5\u7684\u679a\u4e3e\u3002\u8fd9\u4e2a\u679a\u4e3e\u662f Option<T> \uff0c\u800c\u4e14\u5b83 \u5b9a\u4e49\u4e8e\u6807\u51c6\u5e93\u4e2d \uff0c\u5982\u4e0b: enum Option < T > { None , Some ( T ), } Option<T> \u679a\u4e3e\u662f\u5982\u6b64\u6709\u7528\u4ee5\u81f3\u4e8e\u5b83\u751a\u81f3\u88ab\u5305\u542b\u5728\u4e86 prelude \u4e4b\u4e2d\uff0c\u4f60\u4e0d\u9700\u8981\u5c06\u5176\u663e\u5f0f\u5f15\u5165\u4f5c\u7528\u57df\u3002 \u53e6\u5916\uff0c\u5b83\u7684\u6210\u5458\u4e5f\u662f\u5982\u6b64\uff0c\u53ef\u4ee5\u4e0d\u9700\u8981 Option:: \u524d\u7f00\u6765\u76f4\u63a5\u4f7f\u7528 Some \u548c None \u3002 \u5373\u4fbf\u5982\u6b64 Option<T> \u4e5f\u4ecd\u662f\u5e38\u89c4\u7684\u679a\u4e3e\uff0c Some(T) \u548c None \u4ecd\u662f Option<T> \u7684\u6210\u5458\u3002 <T> \u8bed\u6cd5\u662f\u4e00\u4e2a\u6211\u4eec\u8fd8\u672a\u8bb2\u5230\u7684 Rust \u529f\u80fd\u3002\u5b83\u662f\u4e00\u4e2a\u6cdb\u578b\u7c7b\u578b\u53c2\u6570\uff0c\u7b2c\u5341\u7ae0\u4f1a\u66f4\u8be6\u7ec6\u7684\u8bb2\u89e3\u6cdb\u578b\u3002 let some_number = Some ( 5 ); // \u7c7b\u578b\u662f Option<i32> let some_char = Some ( 'e' ); // \u7c7b\u578b\u662f Option<char> let absent_number : Option < i32 > = None ; // \u5bf9\u4e8e absent_number\uff0c Rust \u9700\u8981\u6211\u4eec\u6307\u5b9a Option \u6574\u4f53\u7684\u7c7b\u578b // \u56e0\u4e3a\u7f16\u8bd1\u5668\u53ea\u901a\u8fc7 None \u503c\u65e0\u6cd5\u63a8\u65ad\u51fa Some \u6210\u5458\u4fdd\u5b58\u7684\u503c\u7684\u7c7b\u578b\u3002 // \u8fd9\u91cc\u6211\u4eec\u544a\u8bc9 Rust \u5e0c\u671b absent_number \u662f Option<i32> \u7c7b\u578b\u7684\u3002 \u5f53\u6709\u4e00\u4e2a Some \u503c\u65f6\uff0c\u6211\u4eec\u5c31\u77e5\u9053\u5b58\u5728\u4e00\u4e2a\u503c\uff0c\u800c\u8fd9\u4e2a\u503c\u4fdd\u5b58\u5728 Some \u4e2d\u3002\u5f53\u6709\u4e2a None \u503c\u65f6\uff0c\u5728\u67d0\u79cd\u610f\u4e49\u4e0a\uff0c\u5b83\u8ddf\u7a7a\u503c\u5177\u6709\u76f8\u540c\u7684\u610f\u4e49\uff1a \u5e76\u6ca1\u6709\u4e00\u4e2a\u6709\u6548\u7684\u503c \u3002\u90a3\u4e48\uff0c Option<T> \u4e3a\u4ec0\u4e48\u5c31\u6bd4\u7a7a\u503c\u8981\u597d\u5462\uff1f \u7b80\u800c\u8a00\u4e4b\uff0c\u56e0\u4e3a Option<T> \u548c T \uff08\u8fd9\u91cc T \u53ef\u4ee5\u662f\u4efb\u4f55\u7c7b\u578b\uff09\u662f\u4e0d\u540c\u7684\u7c7b\u578b\uff0c\u7f16\u8bd1\u5668\u4e0d\u5141\u8bb8\u50cf\u4e00\u4e2a\u80af\u5b9a\u6709\u6548\u7684\u503c\u90a3\u6837\u4f7f\u7528 Option<T> \u3002\u4f8b\u5982\uff0c\u8fd9\u6bb5\u4ee3\u7801\u4e0d\u80fd\u7f16\u8bd1\uff0c\u56e0\u4e3a\u5b83\u5c1d\u8bd5\u5c06 Option<i8> \u4e0e i8 \u76f8\u52a0\uff1a let x : i8 = 5 ; let y : Option < i8 > = Some ( 5 ); let sum = x + y ; \u5982\u679c\u8fd0\u884c\u8fd9\u4e9b\u4ee3\u7801\uff0c\u5c06\u5f97\u5230\u7c7b\u4f3c\u8fd9\u6837\u7684\u9519\u8bef\u4fe1\u606f\uff1a $ cargo run Compiling enums v0.1.0 ( file:///projects/enums ) error [ E0277 ] : cannot add ` Option<i8> ` to ` i8 ` --> src/main.rs:5:17 | 5 | let sum = x + y ; | ^ no implementation for ` i8 + Option<i8> ` | = help: the trait ` Add<Option<i8>> ` is not implemented for ` i8 ` For more information about this error, try ` rustc --explain E0277 ` . error: could not compile ` enums ` due to previous error \u9519\u8bef\u4fe1\u606f\u610f\u5473\u7740 Rust \u4e0d\u77e5\u9053\u8be5\u5982\u4f55\u5c06 Option<i8> \u4e0e i8 \u76f8\u52a0\uff0c\u56e0\u4e3a\u5b83\u4eec\u7684\u7c7b\u578b\u4e0d\u540c\u3002 \u5f53\u5728 Rust \u4e2d\u62e5\u6709\u4e00\u4e2a\u50cf i8 \u8fd9\u6837\u7c7b\u578b\u7684\u503c\u65f6\uff0c\u7f16\u8bd1\u5668\u786e\u4fdd\u5b83\u603b\u662f\u6709\u4e00\u4e2a\u6709\u6548\u7684\u503c\u3002\u6211\u4eec\u53ef\u4ee5\u81ea\u4fe1\u4f7f\u7528\u800c\u65e0\u9700\u505a\u7a7a\u503c\u68c0\u67e5\u3002 \u53ea\u6709\u5f53\u4f7f\u7528 Option<i8> \uff08\u6216\u8005\u4efb\u4f55\u7528\u5230\u7684\u7c7b\u578b\uff09\u7684\u65f6\u5019\u9700\u8981\u62c5\u5fc3\u53ef\u80fd\u6ca1\u6709\u503c\uff0c\u800c \u7f16\u8bd1\u5668\u4f1a\u786e\u4fdd\u6211\u4eec\u5728\u4f7f\u7528\u503c\u4e4b\u524d\u5904\u7406\u4e86\u4e3a\u7a7a\u7684\u60c5\u51b5\u3002 \u6362\u53e5\u8bdd\u8bf4\uff0c\u5728\u5bf9 Option<T> \u8fdb\u884c T \u7684\u8fd0\u7b97\u4e4b\u524d\u5fc5\u987b\u5c06\u5176\u8f6c\u6362\u4e3a T \u3002\u901a\u5e38\u8fd9\u80fd\u5e2e\u52a9\u6211\u4eec\u6355\u83b7\u5230\u7a7a\u503c\u6700\u5e38\u89c1\u7684\u95ee\u9898\u4e4b\u4e00\uff1a \u5047\u8bbe\u67d0\u503c\u4e0d\u4e3a\u7a7a\u4f46\u5b9e\u9645\u4e0a\u4e3a\u7a7a\u7684\u60c5\u51b5\u3002 \u6d88\u9664\u4e86\u9519\u8bef\u5730\u5047\u8bbe\u4e00\u4e2a\u975e\u7a7a\u503c\u7684\u98ce\u9669\uff0c\u4f1a\u8ba9\u4f60\u5bf9\u4ee3\u7801\u66f4\u52a0\u6709\u4fe1\u5fc3\u3002 \u4e3a\u4e86\u62e5\u6709\u4e00\u4e2a\u53ef\u80fd\u4e3a\u7a7a\u7684\u503c\uff0c\u4f60\u5fc5\u987b\u8981\u663e\u5f0f\u7684\u5c06\u5176\u653e\u5165\u5bf9\u5e94\u7c7b\u578b\u7684 Option<T> \u4e2d\u3002 \u63a5\u7740\uff0c\u5f53\u4f7f\u7528\u8fd9\u4e2a\u503c\u65f6\uff0c\u5fc5\u987b\u660e\u786e\u7684\u5904\u7406\u503c\u4e3a\u7a7a\u7684\u60c5\u51b5\u3002\u53ea\u8981\u4e00\u4e2a\u503c\u4e0d\u662f Option<T> \u7c7b\u578b\uff0c\u4f60\u5c31 \u53ef\u4ee5 \u5b89\u5168\u7684\u8ba4\u5b9a\u5b83\u7684\u503c\u4e0d\u4e3a\u7a7a\u3002 \u8fd9\u662f Rust \u7684\u4e00\u4e2a\u7ecf\u8fc7\u6df1\u601d\u719f\u8651\u7684\u8bbe\u8ba1\u51b3\u7b56\uff0c\u6765\u9650\u5236\u7a7a\u503c\u7684\u6cdb\u6ee5\u4ee5\u589e\u52a0 Rust \u4ee3\u7801\u7684\u5b89\u5168\u6027\u3002 \u90a3\u4e48\u5f53\u6709\u4e00\u4e2a Option<T> \u7684\u503c\u65f6\uff0c\u5982\u4f55\u4ece Some \u6210\u5458\u4e2d\u53d6\u51fa T \u7684\u503c\u6765\u4f7f\u7528\u5b83\u5462\uff1f Option<T> \u679a\u4e3e\u62e5\u6709\u5927\u91cf\u7528\u4e8e\u5404\u79cd\u60c5\u51b5\u7684\u65b9\u6cd5\uff1a\u4f60\u53ef\u4ee5\u67e5\u770b \u5b83\u7684\u6587\u6863 \u3002 \u719f\u6089 Option<T> \u7684\u65b9\u6cd5\u5c06\u5bf9\u4f60\u7684 Rust \u4e4b\u65c5\u975e\u5e38\u6709\u7528\u3002 \u603b\u7684\u6765\u8bf4\uff0c\u4e3a\u4e86\u4f7f\u7528 Option<T> \u503c\uff0c \u9700\u8981\u7f16\u5199\u5904\u7406\u6bcf\u4e2a\u6210\u5458\u7684\u4ee3\u7801\u3002 \u4f60\u60f3\u8981\u4e00\u4e9b\u4ee3\u7801\u53ea\u5f53\u62e5\u6709 Some(T) \u503c\u65f6\u8fd0\u884c\uff0c\u5141\u8bb8\u8fd9\u4e9b\u4ee3\u7801\u4f7f\u7528\u5176\u4e2d\u7684 T \u3002 \u4e5f\u5e0c\u671b\u4e00\u4e9b\u4ee3\u7801\u5728\u503c\u4e3a None \u65f6\u8fd0\u884c\uff0c\u8fd9\u4e9b\u4ee3\u7801\u5e76\u6ca1\u6709\u4e00\u4e2a\u53ef\u7528\u7684 T \u503c\u3002 match \u8868\u8fbe\u5f0f\u5c31\u662f\u8fd9\u4e48\u4e00\u4e2a\u5904\u7406\u679a\u4e3e\u7684\u63a7\u5236\u6d41\u7ed3\u6784\uff1a \u5b83\u4f1a\u6839\u636e\u679a\u4e3e\u7684\u6210\u5458\u8fd0\u884c\u4e0d\u540c\u7684\u4ee3\u7801\uff0c\u8fd9\u4e9b\u4ee3\u7801\u53ef\u4ee5\u4f7f\u7528\u5339\u914d\u5230\u7684\u503c\u4e2d\u7684\u6570\u636e \u3002","title":"Option \u679a\u4e3e"},{"location":"enumerations/#match","text":"Rust \u6709\u4e00\u4e2a\u53eb\u505a match \u7684\u6781\u4e3a\u5f3a\u5927\u7684\u63a7\u5236\u6d41\u8fd0\u7b97\u7b26\uff0c\u5b83\u5141\u8bb8\u6211\u4eec \u5c06\u4e00\u4e2a\u503c\u4e0e\u4e00\u7cfb\u5217\u7684\u6a21\u5f0f\u76f8\u6bd4\u8f83\uff0c\u5e76\u6839\u636e\u76f8\u5339\u914d\u7684\u6a21\u5f0f\u6267\u884c\u76f8\u5e94\u4ee3\u7801 \u3002\u6a21\u5f0f\u53ef\u7531 \u5b57\u9762\u503c \u3001 \u53d8\u91cf \u3001 \u901a\u914d\u7b26 \u548c\u8bb8\u591a \u5176\u4ed6\u5185\u5bb9 \u6784\u6210\uff1b match \u7684\u529b\u91cf\u6765\u6e90\u4e8e\u6a21\u5f0f\u7684\u8868\u73b0\u529b\u4ee5\u53ca\u7f16\u8bd1\u5668\u68c0\u67e5\uff0c\u5b83\u786e\u4fdd\u4e86\u6240\u6709\u53ef\u80fd\u7684\u60c5\u51b5\u90fd\u5f97\u5230\u5904\u7406\u3002 \u7f16\u5199\u4e00\u4e2a\u51fd\u6570\u6765\u83b7\u53d6\u4e00\u4e2a\u672a\u77e5\u7684\u786c\u5e01\uff0c\u5e76\u4ee5\u4e00\u79cd\u7c7b\u4f3c\u9a8c\u949e\u673a\u7684\u65b9\u5f0f\uff0c\u786e\u5b9a\u5b83\u662f\u4f55\u79cd\u786c\u5e01\u5e76\u8fd4\u56de\u5b83\u7684\u7f8e\u5206\u503c: // \u4e00\u4e2a\u679a\u4e3e\u548c\u4e00\u4e2a\u4ee5\u679a\u4e3e\u6210\u5458\u4f5c\u4e3a\u6a21\u5f0f\u7684 match \u8868\u8fbe\u5f0f enum Coin { Penny , Nickel , Dime , Quarter , } fn value_in_cents ( coin : Coin ) -> u8 { // \u5217\u51fa match \u5173\u952e\u5b57\u540e\u8ddf\u4e00\u4e2a\u8868\u8fbe\u5f0f // \u770b\u8d77\u6765\u975e\u5e38\u50cf if \u4f7f\u7528\u7684\u8868\u8fbe\u5f0f\uff0c\u4e0d\u8fc7\u8fd9\u91cc\u6709\u4e00\u4e2a\u975e\u5e38\u5927\u7684\u533a\u522b\uff1a\u5bf9\u4e8e if\uff0c\u8868\u8fbe\u5f0f\u5fc5\u987b\u8fd4\u56de\u4e00\u4e2a\u5e03\u5c14\u503c\uff0c\u800c\u8fd9\u91cc\u5b83\u53ef\u4ee5\u662f\u4efb\u4f55\u7c7b\u578b // coin \u7684\u7c7b\u578b\u662f\u5b9a\u4e49\u7684 Coin \u679a\u4e3e\u3002 match coin { // \u63a5\u4e0b\u6765\u662f match \u7684\u5206\u652f // \u4e00\u4e2a\u5206\u652f\u6709\u4e24\u4e2a\u90e8\u5206\uff1a\u4e00\u4e2a\u6a21\u5f0f\u548c\u4e00\u4e9b\u4ee3\u7801\u3002 // => \u8fd0\u7b97\u7b26\u5c06\u6a21\u5f0f\u548c\u5c06\u8981\u8fd0\u884c\u7684\u4ee3\u7801\u5206\u5f00 // \u6bcf\u4e00\u4e2a\u5206\u652f\u4e4b\u95f4\u4f7f\u7528\u9017\u53f7\u5206\u9694\u3002 Coin :: Penny => 1 , // 1\u7f8e\u5206 Coin :: Nickel => 5 , // 5\u7f8e\u5206 Coin :: Dime => 10 , // 10\u7f8e\u5206 Coin :: Quarter => 25 , // 25\u7f8e\u5206 // \u5982\u679c\u6a21\u5f0f\u5339\u914d\u4e86\u8fd9\u4e2a\u503c\uff0c\u8fd9\u4e2a\u6a21\u5f0f\u76f8\u5173\u8054\u7684\u4ee3\u7801\u5c06\u88ab\u6267\u884c\u3002\u5982\u679c\u6a21\u5f0f\u5e76\u4e0d\u5339\u914d\u8fd9\u4e2a\u503c\uff0c\u5c06\u7ee7\u7eed\u6267\u884c\u4e0b\u4e00\u4e2a\u5206\u652f // \u53ef\u4ee5\u62e5\u6709\u4efb\u610f\u591a\u7684\u5206\u652f, \u8fd9\u91cc\u67094\u4e2a\u5206\u652f // \u6bcf\u4e2a\u5206\u652f\u76f8\u5173\u8054\u7684\u4ee3\u7801\u662f\u4e00\u4e2a\u8868\u8fbe\u5f0f\uff0c\u800c\u8868\u8fbe\u5f0f\u7684\u7ed3\u679c\u503c\u5c06\u4f5c\u4e3a\u6574\u4e2a match \u8868\u8fbe\u5f0f\u7684\u8fd4\u56de\u503c\u3002 } } \u5982\u679c\u5206\u652f\u4ee3\u7801\u8f83\u77ed\u7684\u8bdd\u901a\u5e38\u4e0d\u4f7f\u7528\u5927\u62ec\u53f7 \uff0c\u4e0a\u9762\u7684\u793a\u4f8b\u6bcf\u4e2a\u5206\u652f\u90fd\u53ea\u662f\u8fd4\u56de\u4e00\u4e2a\u503c\u3002 \u5982\u679c\u60f3\u8981\u5728\u5206\u652f\u4e2d\u8fd0\u884c\u591a\u884c\u4ee3\u7801\uff0c \u53ef\u4ee5\u4f7f\u7528\u5927\u62ec\u53f7\uff0c\u800c\u5206\u652f\u540e\u7684\u9017\u53f7\u662f\u53ef\u9009\u7684 \u3002 \u4f8b\u5982\uff0c\u5982\u4e0b\u4ee3\u7801\u5728\u6bcf\u6b21\u4f7f\u7528 Coin::Penny \u8c03\u7528\u65f6\u90fd\u4f1a\u6253\u5370\u51fa \u201cLucky penny!\u201d \uff0c\u540c\u65f6\u4ecd\u7136\u8fd4\u56de\u4ee3\u7801\u5757\u6700\u540e\u7684\u503c\uff0c1\uff1a fn value_in_cents ( coin : Coin ) -> u8 { match coin { Coin :: Penny => { println! ( \"Lucky penny!\" ); 1 } Coin :: Nickel => 5 , Coin :: Dime => 10 , Coin :: Quarter => 25 , } }","title":"match\u63a7\u5236\u6d41"},{"location":"enumerations/#_4","text":"\u5339\u914d\u5206\u652f\u7684\u53e6\u4e00\u4e2a\u6709\u7528\u7684\u529f\u80fd\u662f\u53ef\u4ee5 \u7ed1\u5b9a\u5339\u914d\u7684\u6a21\u5f0f\u7684\u90e8\u5206\u503c \u3002\u8fd9\u4e5f\u5c31\u662f\u5982\u4f55\u4ece\u679a\u4e3e\u6210\u5458\u4e2d\u63d0\u53d6\u503c\u7684\u3002 \u4f5c\u4e3a\u4e00\u4e2a\u4f8b\u5b50\uff0c\u8ba9\u6211\u4eec\u4fee\u6539\u679a\u4e3e\u7684\u4e00\u4e2a\u6210\u5458\u6765\u5b58\u653e\u6570\u636e\u3002 1999 \u5e74\u5230 2008 \u5e74\u95f4\uff0c\u7f8e\u56fd\u5728 25 \u7f8e\u5206\u7684\u786c\u5e01\u7684\u4e00\u4fa7\u4e3a 50 \u4e2a\u5dde\u7684\u6bcf\u4e00\u4e2a\u90fd\u5370\u5237\u4e86\u4e0d\u540c\u7684\u8bbe\u8ba1\u3002 \u5176\u4ed6\u7684\u786c\u5e01\u90fd\u6ca1\u6709\u8fd9\u79cd\u533a\u5206\u5dde\u7684\u8bbe\u8ba1\uff0c\u6240\u4ee5\u53ea\u6709\u8fd9\u4e9b 25 \u7f8e\u5206\u786c\u5e01\u6709\u7279\u6b8a\u7684\u4ef7\u503c\u3002 \u53ef\u4ee5\u5c06\u8fd9\u4e9b\u4fe1\u606f\u52a0\u5165\u6211\u4eec\u7684 enum \uff0c\u901a\u8fc7\u6539\u53d8 Quarter \u6210\u5458\u6765\u5305\u542b\u4e00\u4e2a State \u503c\uff0c\u793a\u4f8b\u5b8c\u6210\u4e86\u8fd9\u4e9b\u4fee\u6539\uff1a #[derive(Debug)] // \u8fd9\u6837\u53ef\u4ee5\u7acb\u523b\u770b\u5230\u5dde\u7684\u540d\u79f0 enum UsState { Alabama , Alaska , // --snip-- } enum Coin { Penny , Nickel , Dime , Quarter ( UsState ), } fn main () {} \u60f3\u8c61\u4e00\u4e0b\u6211\u4eec\u7684\u4e00\u4e2a\u670b\u53cb\u5c1d\u8bd5\u6536\u96c6\u6240\u6709 50 \u4e2a\u5dde\u7684 25 \u7f8e\u5206\u786c\u5e01\u3002\u5728\u6839\u636e\u786c\u5e01\u7c7b\u578b\u5206\u7c7b\u96f6\u94b1\u7684\u540c\u65f6\uff0c\u4e5f\u53ef\u4ee5\u62a5\u544a\u51fa\u6bcf\u4e2a 25 \u7f8e\u5206\u786c\u5e01\u6240\u5bf9\u5e94\u7684\u5dde\u540d\u79f0\uff0c\u8fd9\u6837\u5982\u679c\u6211\u4eec\u7684\u670b\u53cb\u6ca1\u6709\u7684\u8bdd\uff0c\u4ed6\u53ef\u4ee5\u5c06\u5176\u52a0\u5165\u6536\u85cf\u3002 \u5728\u8fd9\u4e9b\u4ee3\u7801\u7684\u5339\u914d\u8868\u8fbe\u5f0f\u4e2d\uff0c\u6211\u4eec\u5728\u5339\u914d Coin::Quarter \u6210\u5458\u7684\u5206\u652f\u7684\u6a21\u5f0f\u4e2d\u589e\u52a0\u4e86\u4e00\u4e2a\u53eb\u505a state \u7684\u53d8\u91cf\u3002\u5f53\u5339\u914d\u5230 Coin::Quarter \u65f6\uff0c\u53d8\u91cf state \u5c06\u4f1a\u7ed1\u5b9a 25 \u7f8e\u5206\u786c\u5e01\u6240\u5bf9\u5e94\u5dde\u7684\u503c\u3002 \u63a5\u7740\u5728\u90a3\u4e2a\u5206\u652f\u7684\u4ee3\u7801\u4e2d\u4f7f\u7528 state \uff0c\u5982\u4e0b\uff1a fn value_in_cents ( coin : Coin ) -> u8 { match coin { Coin :: Penny => 1 , Coin :: Nickel => 5 , Coin :: Dime => 10 , Coin :: Quarter ( state ) => { println! ( \"State quarter from {:?}!\" , state ); 25 } } } value_in_cents ( Coin :: Quarter ( UsState :: Alaska )) // state \u7ed1\u5b9a\u7684\u5c06\u4f1a\u662f\u503c UsState::Alaska","title":"\u7ed1\u5b9a\u503c\u7684\u6a21\u5f0f"},{"location":"enumerations/#optiont","text":"\u5728\u4e4b\u524d\u7684\u90e8\u5206\u4e2d\u4f7f\u7528 Option<T> \u65f6\uff0c\u662f\u4e3a\u4e86\u4ece Some \u4e2d\u53d6\u51fa\u5176\u5185\u90e8\u7684 T \u503c\uff1b\u6211\u4eec\u8fd8\u53ef\u4ee5\u50cf\u5904\u7406 Coin \u679a\u4e3e\u90a3\u6837\u4f7f\u7528 match \u5904\u7406 Option<T> \uff01\u53ea\u4e0d\u8fc7\u8fd9\u56de\u6bd4\u8f83\u7684\u4e0d\u518d\u662f\u786c\u5e01\uff0c\u800c\u662f Option<T> \u7684\u6210\u5458\uff0c\u4f46 match \u8868\u8fbe\u5f0f\u7684\u5de5\u4f5c\u65b9\u5f0f\u4fdd\u6301\u4e0d\u53d8\u3002 \u6bd4\u5982\u6211\u4eec\u60f3\u8981\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\uff0c\u5b83\u83b7\u53d6\u4e00\u4e2a Option<i32> \uff0c\u5982\u679c\u5176\u4e2d\u542b\u6709\u4e00\u4e2a\u503c\uff0c\u5c06\u5176\u52a0\u4e00\u3002\u5982\u679c\u5176\u4e2d\u6ca1\u6709\u503c\uff0c\u51fd\u6570\u5e94\u8be5\u8fd4\u56de None \u503c\uff0c\u800c\u4e0d\u5c1d\u8bd5\u6267\u884c\u4efb\u4f55\u64cd\u4f5c\u3002 // \u4e00\u4e2a\u5728 Option<i32> \u4e0a\u4f7f\u7528 match \u8868\u8fbe\u5f0f\u7684\u51fd\u6570 fn plus_one ( x : Option < i32 > ) -> Option < i32 > { match x { None => None , Some ( i ) => Some ( i + 1 ), } } let five = Some ( 5 ); let six = plus_one ( five ); let none = plus_one ( None );","title":"\u5339\u914d Option\\&lt;T>"},{"location":"enumerations/#somet","text":"\u66f4\u4ed4\u7ec6\u5730\u68c0\u67e5 plus_one \u7684\u7b2c\u4e00\u884c\u64cd\u4f5c\u3002\u5f53\u8c03\u7528 plus_one(five) \u65f6\uff0c plus_one \u51fd\u6570\u4f53\u4e2d\u7684 x \u5c06\u4f1a\u662f\u503c Some(5) \u3002\u63a5\u7740\u5c06\u5176\u4e0e\u6bcf\u4e2a\u5206\u652f\u6bd4\u8f83\u3002 \u503c Some(5) \u5e76\u4e0d\u5339\u914d\u6a21\u5f0f None \uff0c\u6240\u4ee5\u7ee7\u7eed\u8fdb\u884c\u4e0b\u4e00\u4e2a\u5206\u652f\u3002 Some ( i ) => Some ( i + 1 ), Some(5) \u4e0e Some(i) \u5339\u914d\u5417\uff1f\u5f53\u7136\u5339\u914d\uff01\u5b83\u4eec\u662f\u76f8\u540c\u7684\u6210\u5458\u3002 i \u7ed1\u5b9a\u4e86 Some \u4e2d\u5305\u542b\u7684\u503c\uff0c\u6240\u4ee5 i \u7684\u503c\u662f 5 \u3002 \u63a5\u7740\u5339\u914d\u5206\u652f\u7684\u4ee3\u7801\u88ab\u6267\u884c\uff0c\u6240\u4ee5\u6211\u4eec\u5c06 i \u7684\u503c\u52a0\u4e00\u5e76\u8fd4\u56de\u4e00\u4e2a\u542b\u6709\u503c 6 \u7684\u65b0 Some \u3002 \u63a5\u7740\u8003\u8651\u4e0b\u793a\u4f8b\u4e2d plus_one \u7684\u7b2c\u4e8c\u4e2a\u8c03\u7528\uff0c\u8fd9\u91cc x \u662f None \u3002\u6211\u4eec\u8fdb\u5165 match \u5e76\u4e0e\u7b2c\u4e00\u4e2a\u5206\u652f\u76f8\u6bd4\u8f83\u3002 None => None , \u5339\u914d\u4e0a\u4e86\uff01\u8fd9\u91cc\u6ca1\u6709\u503c\u6765\u52a0\u4e00\uff0c\u6240\u4ee5\u7a0b\u5e8f\u7ed3\u675f\u5e76\u8fd4\u56de => \u53f3\u4fa7\u7684\u503c None \uff0c\u56e0\u4e3a\u7b2c\u4e00\u4e2a\u5206\u652f\u5c31\u5339\u914d\u5230\u4e86\uff0c \u5176\u4ed6\u7684\u5206\u652f\u5c06\u4e0d\u518d\u6bd4\u8f83 \u3002 \u5c06 match \u4e0e\u679a\u4e3e\u76f8\u7ed3\u5408\u5728\u5f88\u591a\u573a\u666f\u4e2d\u90fd\u662f\u6709\u7528\u7684\u3002\u4f60\u4f1a\u5728 Rust \u4ee3\u7801\u4e2d\u770b\u5230\u5f88\u591a\u8fd9\u6837\u7684\u6a21\u5f0f\uff1a match \u4e00\u4e2a\u679a\u4e3e\uff0c\u7ed1\u5b9a\u5176\u4e2d\u7684\u503c\u5230\u4e00\u4e2a\u53d8\u91cf\uff0c\u63a5\u7740\u6839\u636e\u5176\u503c\u6267\u884c\u4ee3\u7801 \u3002 \u8fd9\u5728\u4e00\u5f00\u59cb\u6709\u70b9\u590d\u6742\uff0c\u4e0d\u8fc7\u4e00\u65e6\u4e60\u60ef\u4e86\uff0c\u4f60\u4f1a\u5e0c\u671b\u6240\u6709\u8bed\u8a00\u90fd\u62e5\u6709\u5b83\uff01","title":"\u5339\u914d Some(T)"},{"location":"enumerations/#_5","text":"match \u8fd8\u6709\u53e6\u4e00\u65b9\u9762\u9700\u8981\u8ba8\u8bba\uff1a \u8fd9\u4e9b\u5206\u652f\u5fc5\u987b\u8986\u76d6\u4e86\u6240\u6709\u7684\u53ef\u80fd\u6027 \u3002\u8003\u8651\u4e00\u4e0b plus_one \u51fd\u6570\u7684\u8fd9\u4e2a\u7248\u672c\uff0c\u5b83\u6709\u4e00\u4e2a bug \u5e76\u4e0d\u80fd\u7f16\u8bd1\uff1a fn plus_one ( x : Option < i32 > ) -> Option < i32 > { match x { Some ( i ) => Some ( i + 1 ), } } \u6211\u4eec\u6ca1\u6709\u5904\u7406 None \u7684\u60c5\u51b5\uff0c\u6240\u4ee5\u8fd9\u4e9b\u4ee3\u7801\u4f1a\u9020\u6210\u4e00\u4e2a bug \u3002\u5e78\u8fd0\u7684\u662f\uff0c\u8fd9\u662f\u4e00\u4e2a Rust \u77e5\u9053\u5982\u4f55\u5904\u7406\u7684 bug\u3002\u5982\u679c\u5c1d\u8bd5\u7f16\u8bd1\u8fd9\u6bb5\u4ee3\u7801\uff0c\u4f1a\u5f97\u5230\u8fd9\u4e2a\u9519\u8bef\uff1a $ cargo run Compiling enums v0.1.0 ( file:///projects/enums ) error [ E0004 ] : non-exhaustive patterns: ` None ` not covered --> src/main.rs:3:15 | 3 | match x { | ^ pattern ` None ` not covered | = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms = note: the matched value is of type ` Option<i32> ` For more information about this error, try ` rustc --explain E0004 ` . error: could not compile ` enums ` due to previous error Rust \u77e5\u9053\u6211\u4eec\u6ca1\u6709\u8986\u76d6\u6240\u6709\u53ef\u80fd\u7684\u60c5\u51b5\u751a\u81f3\u77e5\u9053\u54ea\u4e9b\u6a21\u5f0f\u88ab\u5fd8\u8bb0\u4e86\uff01 Rust \u4e2d\u7684\u5339\u914d\u662f \u7a77\u5c3d\u7684 \uff08exhaustive\uff09\uff1a \u5fc5\u987b\u7a77\u4e3e\u5230\u6700\u540e\u7684\u53ef\u80fd\u6027\u6765\u4f7f\u4ee3\u7801\u6709\u6548 \u3002 \u7279\u522b\u7684\u5728\u8fd9\u4e2a Option<T> \u7684\u4f8b\u5b50\u4e2d\uff0cRust \u9632\u6b62\u6211\u4eec\u5fd8\u8bb0\u660e\u786e\u7684\u5904\u7406 None \u7684\u60c5\u51b5\uff0c\u8fd9\u8ba9\u6211\u4eec\u514d\u4e8e\u5047\u8bbe\u62e5\u6709\u4e00\u4e2a\u5b9e\u9645\u4e0a\u4e3a\u7a7a\u7684\u503c\uff0c\u4ece\u800c\u4f7f\u4e4b\u524d\u63d0\u5230\u7684\u4ef7\u503c\u4ebf\u4e07\u7684\u9519\u8bef\u4e0d\u53ef\u80fd\u53d1\u751f\u3002","title":"\u5339\u914d\u662f\u7a77\u5c3d\u7684"},{"location":"enumerations/#_","text":"let dice_roll = 9 ; match dice_roll { // \u5bf9\u4e8e\u524d\u4e24\u4e2a\u5206\u652f\uff0c\u5339\u914d\u6a21\u5f0f\u662f\u5b57\u9762\u503c 3 \u548c 7 3 => add_fancy_hat (), 7 => remove_fancy_hat (), // \u6700\u540e\u4e00\u4e2a\u5206\u652f\u5219\u6db5\u76d6\u4e86\u6240\u6709\u5176\u4ed6\u53ef\u80fd\u7684\u503c other => move_player ( other ), } fn add_fancy_hat () {} fn remove_fancy_hat () {} fn move_player ( num_spaces : u8 ) {} \u6a21\u5f0f\u662f\u6211\u4eec\u547d\u540d\u4e3a other \u7684\u4e00\u4e2a\u53d8\u91cf\u3002 other \u5206\u652f\u7684\u4ee3\u7801\u901a\u8fc7\u5c06\u5176\u4f20\u9012\u7ed9 move_player \u51fd\u6570\u6765\u4f7f\u7528\u8fd9\u4e2a\u53d8\u91cf\u3002 \u5373\u4f7f\u6211\u4eec\u6ca1\u6709\u5217\u51fa u8 \u6240\u6709\u53ef\u80fd\u7684\u503c\uff0c\u8fd9\u6bb5\u4ee3\u7801\u4f9d\u7136\u80fd\u591f\u7f16\u8bd1\uff0c\u56e0\u4e3a\u6700\u540e\u4e00\u4e2a\u6a21\u5f0f\u5c06\u5339\u914d\u6240\u6709\u672a\u88ab\u7279\u6b8a\u5217\u51fa\u7684\u503c\u3002 \u8fd9\u79cd\u901a\u914d\u6a21\u5f0f\u6ee1\u8db3\u4e86 match \u5fc5\u987b\u88ab\u7a77\u5c3d\u7684\u8981\u6c42\u3002 \u8bf7\u6ce8\u610f\uff0c\u6211\u4eec \u5fc5\u987b\u5c06\u901a\u914d\u5206\u652f\u653e\u5728\u6700\u540e\uff0c\u56e0\u4e3a\u6a21\u5f0f\u662f\u6309\u987a\u5e8f\u5339\u914d\u7684 \u3002 \u5982\u679c\u6211\u4eec\u5728\u901a\u914d\u5206\u652f\u540e\u6dfb\u52a0\u5176\u4ed6\u5206\u652f\uff0cRust \u5c06\u4f1a\u8b66\u544a\u6211\u4eec\uff0c\u56e0\u4e3a\u6b64\u540e\u7684\u5206\u652f\u6c38\u8fdc\u4e0d\u4f1a\u88ab\u5339\u914d\u5230\u3002 Rust \u8fd8\u63d0\u4f9b\u4e86\u4e00\u4e2a\u6a21\u5f0f\uff0c\u5f53\u6211\u4eec\u4e0d\u60f3\u4f7f\u7528\u901a\u914d\u6a21\u5f0f\u83b7\u53d6\u7684\u503c\u65f6\uff0c\u8bf7\u4f7f\u7528 _ \uff0c\u8fd9\u662f\u4e00\u4e2a\u7279\u6b8a\u7684\u6a21\u5f0f\uff0c\u53ef\u4ee5\u5339\u914d\u4efb\u610f\u503c\u800c\u4e0d\u7ed1\u5b9a\u5230\u8be5\u503c\u3002 \u8fd9\u544a\u8bc9 Rust \u6211\u4eec\u4e0d\u4f1a\u4f7f\u7528\u8fd9\u4e2a\u503c\uff0c\u6240\u4ee5 Rust \u4e5f\u4e0d\u4f1a\u8b66\u544a\u6211\u4eec\u5b58\u5728\u672a\u4f7f\u7528\u7684\u53d8\u91cf\u3002 let dice_roll = 9 ; match dice_roll { 3 => add_fancy_hat (), 7 => remove_fancy_hat (), _ => reroll (), // \u4f7f\u7528 _ \u4e22\u5f03\u503c\u3002 } fn add_fancy_hat () {} fn remove_fancy_hat () {} fn reroll () {} \u6700\u540e\uff0c\u5982\u679c\u5c06\u65e0\u4e8b\u53d1\u751f\u3002\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 \u5355\u5143\u503c \uff08\u5728\u201c \u5143\u7ec4\u7c7b\u578b \u201d\u4e00\u8282\u4e2d\u63d0\u5230\u7684\u7a7a\u5143\u7ec4\uff09\u4f5c\u4e3a _ \u5206\u652f\u7684\u4ee3\u7801\uff1a let dice_roll = 9 ; match dice_roll { 3 => add_fancy_hat (), 7 => remove_fancy_hat (), _ => (), // \u5355\u5143\u503c\uff0c\u65e0\u4e8b\u53d1\u751f\u3002 } fn add_fancy_hat () {} fn remove_fancy_hat () {} \u5728\u8fd9\u91cc\uff0c\u660e\u786e\u544a\u8bc9 Rust \u6211\u4eec \u4e0d\u4f1a\u4f7f\u7528\u4e0e\u524d\u9762\u6a21\u5f0f\u4e0d\u5339\u914d\u7684\u503c\uff0c\u5e76\u4e14\u8fd9\u79cd\u60c5\u51b5\u4e0b\u6211\u4eec\u4e0d\u60f3\u8fd0\u884c\u4efb\u4f55\u4ee3\u7801 \u3002","title":"\u901a\u914d\u6a21\u5f0f\u548c _ \u5360\u4f4d\u7b26"},{"location":"enumerations/#if-let","text":"if let \u8bed\u6cd5\u8ba9\u6211\u4eec\u4ee5\u4e00\u79cd\u4e0d\u90a3\u4e48\u5197\u957f\u7684\u65b9\u5f0f\u7ed3\u5408 if \u548c let \uff0c\u6765\u5904\u7406\u53ea\u5339\u914d\u4e00\u4e2a\u6a21\u5f0f\u7684\u503c\u800c\u5ffd\u7565\u5176\u4ed6\u6a21\u5f0f\u7684\u60c5\u51b5\u3002 let config_max = Some ( 3 u8 ); // \u5339\u914d\u4e00\u4e2a config_max \u53d8\u91cf\u4e2d\u7684 Option<u8> \u503c\u5e76\u53ea\u5e0c\u671b\u5f53\u503c\u4e3a Some \u6210\u5458\u65f6\u6267\u884c\u4ee3\u7801 match config_max { // \u8fd9\u4e2a\u503c\u88ab\u7ed1\u5b9a\u5230\u6a21\u5f0f\u4e2d\u7684 max \u53d8\u91cf\u91cc\u3002 Some ( max ) => println! ( \"The maximum is configured to be {}\" , max ), // \u5bf9\u4e8e None \u503c\u6211\u4eec\u4e0d\u5e0c\u671b\u505a\u4efb\u4f55\u64cd\u4f5c _ => (), } \u4e0d\u8fc7\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 if let \u8fd9\u79cd\u66f4\u77ed\u7684\u65b9\u5f0f\u7f16\u5199: let config_max = Some ( 3 u8 ); // if let \u8bed\u6cd5\u83b7\u53d6\u901a\u8fc7\u7b49\u53f7\u5206\u9694\u7684\u4e00\u4e2a\u6a21\u5f0f\u548c\u4e00\u4e2a\u8868\u8fbe\u5f0f\u3002\u5b83\u7684\u5de5\u4f5c\u65b9\u5f0f\u4e0e match \u76f8\u540c\uff0c\u8fd9\u91cc\u7684\u8868\u8fbe\u5f0f\u5bf9\u5e94 match \u800c\u6a21\u5f0f\u5219\u5bf9\u5e94\u7b2c\u4e00\u4e2a\u5206\u652f\u3002 // \u6a21\u5f0f\u662f Some(max)\uff0cmax \u7ed1\u5b9a\u4e3a Some \u4e2d\u7684\u503c\u3002 // \u63a5\u7740\u53ef\u4ee5\u5728 if let \u4ee3\u7801\u5757\u4e2d\u4f7f\u7528 max \u4e86 if let Some ( max ) = config_max { println! ( \"The maximum is configured to be {}\" , max ); } // \u6a21\u5f0f\u4e0d\u5339\u914d\u65f6 if let \u5757\u4e2d\u7684\u4ee3\u7801\u4e0d\u4f1a\u6267\u884c\u3002 \u4f7f\u7528 if let \u610f\u5473\u7740\u7f16\u5199\u66f4\u5c11\u4ee3\u7801\uff0c\u66f4\u5c11\u7684\u7f29\u8fdb\u548c\u66f4\u5c11\u7684\u6837\u677f\u4ee3\u7801\u3002 \u7136\u800c\uff0c\u8fd9\u6837\u4f1a\u5931\u53bb match \u5f3a\u5236\u8981\u6c42\u7684\u7a77\u5c3d\u6027\u68c0\u67e5\u3002 match \u548c if let \u4e4b\u95f4\u7684\u9009\u62e9\u4f9d\u8d56\u7279\u5b9a\u7684\u73af\u5883\u4ee5\u53ca\u589e\u52a0\u7b80\u6d01\u5ea6\u548c\u5931\u53bb\u7a77\u5c3d\u6027\u68c0\u67e5\u7684\u6743\u8861\u53d6\u820d\u3002 \u53ef\u4ee5\u8ba4\u4e3a if let \u662f match \u7684\u4e00\u4e2a\u8bed\u6cd5\u7cd6\uff0c\u5b83\u5f53\u503c\u5339\u914d\u67d0\u4e00\u6a21\u5f0f\u65f6\u6267\u884c\u4ee3\u7801\u800c\u5ffd\u7565\u6240\u6709\u5176\u4ed6\u503c\u3002 // \u53ef\u4ee5\u5728 if let \u4e2d\u5305\u542b\u4e00\u4e2a else\u3002else \u5757\u4e2d\u7684\u4ee3\u7801\u4e0e match \u8868\u8fbe\u5f0f\u4e2d\u7684 _ \u5206\u652f\u5757\u4e2d\u7684\u4ee3\u7801\u76f8\u540c let mut count = 0 ; if let Coin :: Quarter ( state ) = coin { println! ( \"State quarter from {:?}!\" , state ); } else { count += 1 ; } // \u8fd9\u6837\u7684 match \u8868\u8fbe\u5f0f\u5c31\u7b49\u540c\u4e8e if let \u548c else\u3002 let mut count = 0 ; match coin { Coin :: Quarter ( state ) => println! ( \"State quarter from {:?}!\" , state ), _ => count += 1 , }","title":"if let\u63a7\u5236\u6d41"},{"location":"error-handing/","text":"\u9519\u8bef\u5904\u7406 \u9519\u8bef\u662f\u8f6f\u4ef6\u4e2d\u4e0d\u53ef\u5426\u8ba4\u7684\u4e8b\u5b9e\uff0c\u6240\u4ee5 Rust \u6709\u4e00\u4e9b\u5904\u7406\u51fa\u9519\u60c5\u51b5\u7684\u7279\u6027\u3002 \u5728\u8bb8\u591a\u60c5\u51b5\u4e0b\uff0cRust \u8981\u6c42\u4f60\u627f\u8ba4\u9519\u8bef\u7684\u53ef\u80fd\u6027\uff0c\u5e76\u5728\u4ee3\u7801\u7f16\u8bd1\u524d\u91c7\u53d6\u4e00\u4e9b\u884c\u52a8\u3002 \u8fd9\u4e00\u8981\u6c42\u4f7f\u4f60\u7684\u7a0b\u5e8f\u66f4\u52a0\u5065\u58ee\uff0c\u56e0\u4e3a\u5b83\u53ef\u4ee5\u786e\u4fdd\u4f60\u5728\u5c06\u4ee3\u7801\u90e8\u7f72\u5230\u751f\u4ea7\u73af\u5883\u4e4b\u524d\u5c31\u80fd\u53d1\u73b0\u9519\u8bef\u5e76\u8fdb\u884c\u9002\u5f53\u7684\u5904\u7406\u3002 Rust \u5c06\u9519\u8bef\u5206\u4e3a\u4e24\u5927\u7c7b\uff1a \u53ef\u6062\u590d\u7684 \uff08recoverable\uff09\u548c \u4e0d\u53ef\u6062\u590d\u7684 \uff08unrecoverable\uff09\u9519\u8bef\u3002\u5bf9\u4e8e\u4e00\u4e2a\u53ef\u6062\u590d\u7684\u9519\u8bef\uff0c\u6bd4\u5982\u6587\u4ef6\u672a\u627e\u5230\u7684\u9519\u8bef\uff0c\u5f88\u53ef\u80fd\u53ea\u60f3\u5411\u7528\u6237\u62a5\u544a\u95ee\u9898\u5e76\u91cd\u8bd5\u64cd\u4f5c\u3002\u4e0d\u53ef\u6062\u590d\u7684\u9519\u8bef\u603b\u662f bug \u51fa\u73b0\u7684\u5f81\u5146\uff0c\u6bd4\u5982\u8bd5\u56fe\u8bbf\u95ee\u4e00\u4e2a\u8d85\u8fc7\u6570\u7ec4\u672b\u7aef\u7684\u4f4d\u7f6e\uff0c\u56e0\u6b64\u6211\u4eec\u8981\u7acb\u5373\u505c\u6b62\u7a0b\u5e8f\u3002 \u5927\u591a\u6570\u8bed\u8a00\u5e76\u4e0d\u533a\u5206\u8fd9\u4e24\u79cd\u9519\u8bef\uff0c\u5e76\u91c7\u7528\u7c7b\u4f3c\u5f02\u5e38\u8fd9\u6837\u65b9\u5f0f\u7edf\u4e00\u5904\u7406\u4ed6\u4eec\u3002Rust \u6ca1\u6709\u5f02\u5e38\u3002\u76f8\u53cd\uff0c\u5b83\u6709 Result<T, E> \u7c7b\u578b\uff0c\u7528\u4e8e\u5904\u7406\u53ef\u6062\u590d\u7684\u9519\u8bef\uff0c\u8fd8\u6709 panic! \u5b8f\uff0c\u5728\u7a0b\u5e8f\u9047\u5230\u4e0d\u53ef\u6062\u590d\u7684\u9519\u8bef\u65f6\u505c\u6b62\u6267\u884c\u3002 \u4e0d\u53ef\u6062\u590d\u7684\u9519\u8bef(panic!) \u7a81\u7136\u6709\u4e00\u5929\uff0c\u4ee3\u7801\u51fa\u95ee\u9898\u4e86\uff0c\u800c\u4f60\u5bf9\u6b64\u675f\u624b\u65e0\u7b56\u3002\u5bf9\u4e8e\u8fd9\u79cd\u60c5\u51b5\uff0c Rust \u6709 panic! \u5b8f\u3002\u5f53\u6267\u884c\u8fd9\u4e2a\u5b8f\u65f6\uff0c\u7a0b\u5e8f\u4f1a \u6253\u5370\u51fa\u4e00\u4e2a\u9519\u8bef\u4fe1\u606f\uff0c\u5c55\u5f00\u5e76\u6e05\u7406\u6808\u6570\u636e \uff0c\u7136\u540e\u63a5\u7740\u9000\u51fa\u3002 \u51fa\u73b0\u8fd9\u79cd\u60c5\u51b5\u7684\u573a\u666f\u901a\u5e38\u662f\u68c0\u6d4b\u5230\u4e00\u4e9b\u7c7b\u578b\u7684 bug \uff0c\u800c\u4e14\u7a0b\u5e8f\u5458\u5e76\u4e0d\u6e05\u695a\u8be5\u5982\u4f55\u5904\u7406\u5b83\u3002 \u5bf9\u5e94 panic \u65f6\u7684\u6808\u5c55\u5f00\u6216\u7ec8\u6b62 \u5f53\u51fa\u73b0 panic \u65f6\uff0c\u7a0b\u5e8f\u9ed8\u8ba4\u4f1a\u5f00\u59cb \u5c55\u5f00 \uff08unwinding\uff09\uff0c\u8fd9\u610f\u5473\u7740 Rust \u4f1a\u56de\u6eaf\u6808\u5e76\u6e05\u7406\u5b83\u9047\u5230\u7684\u6bcf\u4e00\u4e2a\u51fd\u6570\u7684\u6570\u636e\uff0c\u4e0d\u8fc7\u8fd9\u4e2a\u56de\u6eaf\u5e76\u6e05\u7406\u7684\u8fc7\u7a0b\u6709\u5f88\u591a\u5de5\u4f5c\u3002 \u53e6\u4e00\u79cd\u9009\u62e9\u662f\u76f4\u63a5 \u7ec8\u6b62 \uff08abort\uff09\uff0c\u8fd9\u4f1a\u4e0d\u6e05\u7406\u6570\u636e\u5c31\u9000\u51fa\u7a0b\u5e8f\u3002\u90a3\u4e48\u7a0b\u5e8f\u6240\u4f7f\u7528\u7684\u5185\u5b58\u9700\u8981\u7531\u64cd\u4f5c\u7cfb\u7edf\u6765\u6e05\u7406\u3002 \u5982\u679c\u4f60\u9700\u8981\u9879\u76ee\u7684\u6700\u7ec8\u4e8c\u8fdb\u5236\u6587\u4ef6\u8d8a\u5c0f\u8d8a\u597d\uff0c panic \u65f6\u901a\u8fc7\u5728 Cargo.toml \u7684 [profile] \u90e8\u5206\u589e\u52a0 panic = 'abort' \uff0c\u53ef\u4ee5\u7531\u5c55\u5f00\u5207\u6362\u4e3a \u7ec8\u6b62 \u3002 \u4f8b\u5982\uff0c\u5982\u679c\u4f60\u60f3\u8981\u5728 release \u6a21\u5f0f\u4e2d panic \u65f6\u76f4\u63a5\u7ec8\u6b62\uff1a [profile.release] panic = 'abort' fn main () { // \u8c03\u7528 panic! panic! ( \"crash and burn\" ); } \u5c06\u4f1a\u51fa\u73b0\u7c7b\u4f3c\u8fd9\u6837\u7684\u8f93\u51fa\uff1a $ cargo run Compiling panic v0.1.0 ( file:///projects/panic ) Finished dev [ unoptimized + debuginfo ] target ( s ) in 0 .25s Running ` target/debug/panic ` thread 'main' panicked at 'crash and burn' , src/main.rs:2:5 note: run with ` RUST_BACKTRACE = 1 ` environment variable to display a backtrace # \u7b2c\u4e00\u884c\u663e\u793a\u4e86 panic \u63d0\u4f9b\u7684\u4fe1\u606f\u5e76\u6307\u660e\u4e86\u6e90\u7801\u4e2d panic \u51fa\u73b0\u7684\u4f4d\u7f6e\uff1asrc/main.rs:2:5 \u8868\u660e\u8fd9\u662f src/main.rs \u6587\u4ef6\u7684\u7b2c\u4e8c\u884c\u7b2c\u4e94\u4e2a\u5b57\u7b26\u3002 \u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u88ab\u6307\u660e\u7684\u90a3\u4e00\u884c\u662f\u6211\u4eec\u4ee3\u7801\u7684\u4e00\u90e8\u5206\uff0c\u800c\u4e14\u67e5\u770b\u8fd9\u4e00\u884c\u7684\u8bdd\u5c31\u4f1a\u53d1\u73b0 panic! \u5b8f\u7684\u8c03\u7528\u3002 \u5728\u5176\u4ed6\u60c5\u51b5\u4e0b\uff0c panic! \u53ef\u80fd\u4f1a\u51fa\u73b0\u5728\u6211\u4eec\u7684\u4ee3\u7801\u6240\u8c03\u7528\u7684\u4ee3\u7801\u4e2d\u3002 \u9519\u8bef\u4fe1\u606f\u62a5\u544a\u7684\u6587\u4ef6\u540d\u548c\u884c\u53f7\u53ef\u80fd\u6307\u5411\u522b\u4eba\u4ee3\u7801\u4e2d\u7684 panic! \u5b8f\u8c03\u7528\uff0c\u800c\u4e0d\u662f\u6211\u4eec\u4ee3\u7801\u4e2d\u6700\u7ec8\u5bfc\u81f4 panic! \u7684\u90a3\u4e00\u884c\u3002 \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 panic! \u88ab\u8c03\u7528\u7684\u51fd\u6570\u7684 backtrace \u6765\u5bfb\u627e\u4ee3\u7801\u4e2d\u51fa\u95ee\u9898\u7684\u5730\u65b9\u3002\u4e0b\u9762\u6211\u4eec\u4f1a\u8be6\u7ec6\u4ecb\u7ecd backtrace \u662f\u4ec0\u4e48\u3002 \u4f7f\u7528 panic! \u7684 backtrace \u53e6\u4e00\u4e2a\u56e0\u4e3a\u4ee3\u7801\u4e2d\u7684 bug \u5f15\u8d77\u7684\u522b\u7684\u5e93\u4e2d panic! \u7684\u4f8b\u5b50\uff0c\u800c\u4e0d\u662f\u76f4\u63a5\u7684\u5b8f\u8c03\u7528. // \u5c1d\u8bd5\u8bbf\u95ee\u8d85\u8d8a vector \u7ed3\u5c3e\u7684\u5143\u7d20\uff0c\u8fd9\u4f1a\u9020\u6210 panic! fn main () { let v = vec! [ 1 , 2 , 3 ]; // \u5c1d\u8bd5\u8bbf\u95ee vector \u7684\u7b2c\u4e00\u767e\u4e2a\u5143\u7d20, \u5b9e\u9645\u53ea\u67093\u4e2a\u3002 // \u8fd9\u79cd\u60c5\u51b5\u4e0b Rust \u4f1a panic\u3002 v [ 99 ]; } C \u8bed\u8a00\u4e2d\uff0c\u5c1d\u8bd5\u8bfb\u53d6\u6570\u636e\u7ed3\u6784\u4e4b\u540e\u7684\u503c\u662f \u672a\u5b9a\u4e49\u884c\u4e3a \uff08undefined behavior\uff09\u3002 \u4f60 \u4f1a\u5f97\u5230\u4efb\u4f55\u5bf9\u5e94\u6570\u636e\u7ed3\u6784\u4e2d\u8fd9\u4e2a\u5143\u7d20\u7684\u5185\u5b58\u4f4d\u7f6e\u7684\u503c\uff0c\u751a\u81f3\u662f\u8fd9\u4e9b\u5185\u5b58\u5e76\u4e0d\u5c5e\u4e8e\u8fd9\u4e2a\u6570\u636e\u7ed3\u6784\u7684\u60c5\u51b5\u3002 \u8fd9\u88ab\u79f0\u4e3a \u7f13\u51b2\u533a\u6ea2\u51fa \uff08buffer overread\uff09\uff0c\u5e76\u53ef\u80fd\u4f1a\u5bfc\u81f4 \u5b89\u5168\u6f0f\u6d1e \uff0c\u6bd4\u5982\u653b\u51fb\u8005\u53ef\u4ee5\u50cf\u8fd9\u6837\u64cd\u4f5c\u7d22\u5f15\u6765\u8bfb\u53d6\u50a8\u5b58\u5728\u6570\u636e\u7ed3\u6784\u4e4b\u540e\u4e0d\u88ab\u5141\u8bb8\u7684\u6570\u636e\u3002 \u4e3a\u4e86\u4fdd\u62a4\u7a0b\u5e8f\u8fdc\u79bb\u8fd9\u7c7b\u6f0f\u6d1e\uff0c\u5982\u679c\u5c1d\u8bd5\u8bfb\u53d6\u4e00\u4e2a\u7d22\u5f15\u4e0d\u5b58\u5728\u7684\u5143\u7d20\uff0cRust \u4f1a\u505c\u6b62\u6267\u884c\u5e76\u62d2\u7edd\u7ee7\u7eed\u3002 # \u5c1d\u8bd5\u8fd0\u884c\u4e0a\u9762\u7684\u7a0b\u5e8f\u4f1a\u51fa\u73b0\u5982\u4e0b\uff1a $ cargo run Compiling panic v0.1.0 ( file:///projects/panic ) Finished dev [ unoptimized + debuginfo ] target ( s ) in 0 .27s Running ` target/debug/panic ` thread 'main' panicked at 'index out of bounds: the len is 3 but the index is 99' , src/main.rs:4:5 # \u9519\u8bef\u6307\u5411 main.rs \u7684\u7b2c 4 \u884c\uff0c note: run with ` RUST_BACKTRACE = 1 ` environment variable to display a backtrace # \u4e0b\u9762\u7684\u8bf4\u660e\uff08note\uff09\u884c\u63d0\u9192\u6211\u4eec\u53ef\u4ee5\u8bbe\u7f6e RUST_BACKTRACE \u73af\u5883\u53d8\u91cf\u6765\u5f97\u5230\u4e00\u4e2a backtrace\u3002 backtrace \u662f\u4e00\u4e2a\u6267\u884c\u5230\u76ee\u524d\u4f4d\u7f6e\u6240\u6709\u88ab\u8c03\u7528\u7684\u51fd\u6570\u7684\u5217\u8868\u3002Rust \u7684 backtrace \u8ddf\u5176\u4ed6\u8bed\u8a00\u4e2d\u7684\u4e00\u6837\uff1a \u9605\u8bfb backtrace \u7684\u5173\u952e\u662f\u4ece\u5934\u5f00\u59cb\u8bfb\u76f4\u5230\u53d1\u73b0\u4f60\u7f16\u5199\u7684\u6587\u4ef6\u3002 \u8fd9\u5c31\u662f\u95ee\u9898\u7684\u53d1\u6e90\u5730\u3002\u8fd9\u4e00\u884c\u5f80\u4e0a\u662f\u4f60\u7684\u4ee3\u7801\u6240\u8c03\u7528\u7684\u4ee3\u7801\uff1b\u5f80\u4e0b\u5219\u662f\u8c03\u7528\u4f60\u7684\u4ee3\u7801\u7684\u4ee3\u7801\u3002\u8fd9\u4e9b\u884c\u53ef\u80fd\u5305\u542b\u6838\u5fc3 Rust \u4ee3\u7801\uff0c\u6807\u51c6\u5e93\u4ee3\u7801\u6216\u7528\u5230\u7684 crate \u4ee3\u7801\u3002 \u5c06 RUST_BACKTRACE \u73af\u5883\u53d8\u91cf\u8bbe\u7f6e\u4e3a\u4efb\u4f55\u4e0d\u662f 0 \u7684\u503c\u6765\u83b7\u53d6 backtrace \u770b\u770b\u3002 $ RUST_BACKTRACE = 1 cargo run thread ' main ' panicked at ' index out of bounds : the len is 3 but the index is 99 ' , src / main . rs : 4 : 5 stack backtrace : 0 : rust_begin_unwind at / rustc / 7 eac88abb2e57e752f3302f02be5f3ce3d7adfb4 / library / std / src / panicking . rs : 483 1 : core :: panicking :: panic_fmt at / rustc / 7 eac88abb2e57e752f3302f02be5f3ce3d7adfb4 / library / core / src / panicking . rs : 85 2 : core :: panicking :: panic_bounds_check at / rustc / 7 eac88abb2e57e752f3302f02be5f3ce3d7adfb4 / library / core / src / panicking . rs : 62 3 : < usize as core :: slice :: index :: SliceIndex < [ T ] >> :: index at / rustc / 7 eac88abb2e57e752f3302f02be5f3ce3d7adfb4 / library / core / src / slice / index . rs : 255 4 : core :: slice :: index :: < impl core :: ops :: index :: Index < I > for [ T ] > :: index at / rustc / 7 eac88abb2e57e752f3302f02be5f3ce3d7adfb4 / library / core / src / slice / index . rs : 15 5 : < alloc :: vec :: Vec < T > as core :: ops :: index :: Index < I >> :: index at / rustc / 7 eac88abb2e57e752f3302f02be5f3ce3d7adfb4 / library / alloc / src / vec . rs : 1982 6 : panic :: main at . / src / main . rs : 4 7 : core :: ops :: function :: FnOnce :: call_once at / rustc / 7 eac88abb2e57e752f3302f02be5f3ce3d7adfb4 / library / core / src / ops / function . rs : 227 note : Some details are omitted , run with ` RUST_BACKTRACE = full ` for a verbose backtrace . \u8fd9\u91cc\u6709\u5927\u91cf\u7684\u8f93\u51fa\uff01 \u5b9e\u9645\u770b\u5230\u7684\u8f93\u51fa\u53ef\u80fd\u56e0\u4e0d\u540c\u7684\u64cd\u4f5c\u7cfb\u7edf\u548c Rust \u7248\u672c\u800c\u6709\u6240\u4e0d\u540c \u3002\u4e3a\u4e86\u83b7\u53d6\u5e26\u6709\u8fd9\u4e9b\u4fe1\u606f\u7684 backtrace \uff0c\u5fc5\u987b\u542f\u7528 debug \u6807\u8bc6\u3002\u5f53\u4e0d\u4f7f\u7528 --release \u53c2\u6570\u8fd0\u884c cargo build \u6216 cargo run \u65f6 debug \u6807\u8bc6\u4f1a\u9ed8\u8ba4\u542f\u7528\uff0c\u5c31\u50cf\u8fd9\u91cc\u4e00\u6837\u3002 \u793a\u4f8b\u7684\u8f93\u51fa\u4e2d\uff0cbacktrace \u7684 12 \u884c\u6307\u5411\u4e86\u6211\u4eec\u9879\u76ee\u4e2d\u9020\u6210\u95ee\u9898\u7684\u884c\uff1a src/main.rs \u7684\u7b2c 4 \u884c\u3002\u5982\u679c\u4e0d\u5e0c\u671b\u7a0b\u5e8f panic \uff0c\u7b2c\u4e00\u4e2a\u63d0\u5230\u6211\u4eec\u7f16\u5199\u7684\u4ee3\u7801\u884c\u7684\u4f4d\u7f6e\u662f\u4f60\u5e94\u8be5\u5f00\u59cb\u8c03\u67e5\u7684\uff0c\u4ee5\u4fbf\u67e5\u660e\u662f\u4ec0\u4e48\u503c\u5982\u4f55\u5728\u8fd9\u4e2a\u5730\u65b9\u5f15\u8d77\u4e86 panic \u3002 \u5728\u793a\u4f8b\u4e2d\uff0c\u6545\u610f\u7f16\u5199\u4f1a panic \u7684\u4ee3\u7801\u6765\u6f14\u793a\u5982\u4f55\u4f7f\u7528 backtrace \uff0c\u4fee\u590d\u8fd9\u4e2a panic \u7684\u65b9\u6cd5\u5c31\u662f\u4e0d\u8981\u5c1d\u8bd5\u5728\u4e00\u4e2a\u53ea\u5305\u542b\u4e09\u4e2a\u9879\u7684 vector \u4e2d\u8bf7\u6c42\u7d22\u5f15\u662f 100 \u7684\u5143\u7d20\u3002 \u5f53\u5c06\u6765\u4f60\u7684\u4ee3\u7801\u51fa\u73b0\u4e86 panic \uff0c\u4f60\u9700\u8981\u641e\u6e05\u695a\u5728\u8fd9\u7279\u5b9a\u7684\u573a\u666f\u4e0b\u4ee3\u7801\u4e2d\u6267\u884c\u4e86\u4ec0\u4e48\u64cd\u4f5c\u548c\u4ec0\u4e48\u503c\u5bfc\u81f4\u4e86 panic \uff0c\u4ee5\u53ca\u5e94\u5f53\u5982\u4f55\u5904\u7406\u624d\u80fd\u907f\u514d\u8fd9\u4e2a\u95ee\u9898\u3002 \u53ef\u6062\u590d\u7684\u9519\u8bef(Result) \u5927\u90e8\u5206\u9519\u8bef\u5e76\u6ca1\u6709\u4e25\u91cd\u5230\u9700\u8981\u7a0b\u5e8f\u5b8c\u5168\u505c\u6b62\u6267\u884c \u3002\u6709\u65f6\uff0c\u4e00\u4e2a\u51fd\u6570\u4f1a\u56e0\u4e3a\u4e00\u4e2a\u5bb9\u6613\u7406\u89e3\u5e76\u505a\u51fa\u53cd\u5e94\u7684\u539f\u56e0\u5931\u8d25\u3002 \u4f8b\u5982\uff0c\u5982\u679c\u56e0\u4e3a\u6253\u5f00\u4e00\u4e2a\u5e76\u4e0d\u5b58\u5728\u7684\u6587\u4ef6\u800c\u5931\u8d25\uff0c\u6b64\u65f6\u6211\u4eec\u53ef\u80fd\u60f3\u8981\u521b\u5efa\u8fd9\u4e2a\u6587\u4ef6\uff0c\u800c\u4e0d\u662f\u7ec8\u6b62\u8fdb\u7a0b\u3002 \u7b2c\u4e8c\u7ae0 \u201c \u4f7f\u7528 Result \u7c7b\u578b\u6765\u5904\u7406\u6f5c\u5728\u7684\u9519\u8bef \u201d \u90e8\u5206\u4e2d\u7684\u90a3\u4e2a Result \u679a\u4e3e\uff0c\u5b83\u5b9a\u4e49\u6709\u5982\u4e0b\u4e24\u4e2a\u6210\u5458\uff0c Ok \u548c Err \uff1a // T \u548c E \u662f\u6cdb\u578b\u7c7b\u578b\u53c2\u6570 enum Result < T , E > { Ok ( T ), // T \u4ee3\u8868\u6210\u529f\u65f6\u8fd4\u56de\u7684 Ok \u6210\u5458\u4e2d\u7684\u6570\u636e\u7684\u7c7b\u578b\uff0c Err ( E ), // \u800c E \u4ee3\u8868\u5931\u8d25\u65f6\u8fd4\u56de\u7684 Err \u6210\u5458\u4e2d\u7684\u9519\u8bef\u7684\u7c7b\u578b\u3002 } \u56e0\u4e3a Result \u6709\u8fd9\u4e9b\u6cdb\u578b\u7c7b\u578b\u53c2\u6570\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06 Result \u7c7b\u578b\u548c\u6807\u51c6\u5e93\u4e2d\u4e3a\u5176\u5b9a\u4e49\u7684\u51fd\u6570\u7528\u4e8e\u5f88\u591a\u4e0d\u540c\u7684\u573a\u666f\uff0c\u8fd9\u4e9b\u60c5\u51b5\u4e2d\u9700\u8981\u8fd4\u56de\u7684\u6210\u529f\u503c\u548c\u5931\u8d25\u503c\u53ef\u80fd\u4f1a\u5404\u4e0d\u76f8\u540c\u3002 \u8c03\u7528\u4e00\u4e2a\u8fd4\u56de Result \u7684\u51fd\u6570\uff0c\u56e0\u4e3a\u5b83\u53ef\u80fd\u4f1a\u5931\u8d25\uff1a use std :: fs :: File ; fn main () { // \u6253\u5f00\u6587\u4ef6 let f = File :: open ( \"hello.txt\" ); } \u5982\u4f55\u77e5\u9053 File::open \u8fd4\u56de\u4e00\u4e2a Result \u5462\uff1f\u6211\u4eec\u53ef\u4ee5\u67e5\u770b \u6807\u51c6\u5e93 API \u6587\u6863\uff0c\u6216\u8005\u53ef\u4ee5\u76f4\u63a5\u95ee\u7f16\u8bd1\u5668\uff01 \u5982\u679c\u7ed9 f \u67d0\u4e2a\u6211\u4eec\u77e5\u9053 \u4e0d\u662f \u51fd\u6570\u8fd4\u56de\u503c\u7c7b\u578b\u7684\u7c7b\u578b\u6ce8\u89e3\uff0c\u63a5\u7740\u5c1d\u8bd5\u7f16\u8bd1\u4ee3\u7801\uff0c\u7f16\u8bd1\u5668\u4f1a\u544a\u8bc9\u6211\u4eec\u7c7b\u578b\u4e0d\u5339\u914d\u3002 \u7136\u540e\u9519\u8bef\u4fe1\u606f\u4f1a\u544a\u8bc9\u6211\u4eec f \u7684\u7c7b\u578b \u5e94\u8be5 \u662f\u4ec0\u4e48\u3002 \u8bd5\u8bd5\uff01\u77e5\u9053 File::open \u7684\u8fd4\u56de\u503c\u4e0d\u662f u32 \u7c7b\u578b\u7684\uff0c\u6240\u4ee5\u5c06 let f \u8bed\u53e5\u6539\u4e3a\u5982\u4e0b\uff1a let f : u32 = File :: open ( \"hello.txt\" ); $ cargo run Compiling error-handling v0.1.0 ( file:///projects/error-handling ) error [ E0308 ] : mismatched types --> src/main.rs:4:18 | 4 | let f: u32 = File::open ( \"hello.txt\" ) ; | --- ^^^^^^^^^^^^^^^^^^^^^^^ expected ` u32 ` , found enum ` Result ` | | | expected due to this | = note: expected type ` u32 ` found enum ` Result<File, std::io::Error> ` For more information about this error, try ` rustc --explain E0308 ` . error: could not compile ` error-handling ` due to previous error \u8fd9\u5c31\u544a\u8bc9\u6211\u4eec\u4e86 File::open \u51fd\u6570\u7684\u8fd4\u56de\u503c\u7c7b\u578b\u662f Result<T, E> \u3002\u8fd9\u91cc\u6cdb\u578b\u53c2\u6570 T \u653e\u5165\u4e86\u6210\u529f\u503c\u7684\u7c7b\u578b std::fs::File \uff0c\u5b83\u662f\u4e00\u4e2a\u6587\u4ef6\u53e5\u67c4\u3002 E \u88ab\u7528\u5728\u5931\u8d25\u503c\u4e0a\u65f6 E \u7684\u7c7b\u578b\u662f std::io::Error \u3002 \u8fd9\u4e2a\u8fd4\u56de\u503c\u7c7b\u578b\u8bf4\u660e File::open \u8c03\u7528\u53ef\u80fd\u4f1a\u6210\u529f\u5e76\u8fd4\u56de\u4e00\u4e2a\u53ef\u4ee5\u8fdb\u884c\u8bfb\u5199\u7684\u6587\u4ef6\u53e5\u67c4\u3002 \u8fd9\u4e2a\u51fd\u6570\u4e5f\u53ef\u80fd\u4f1a\u5931\u8d25\uff1a\u4f8b\u5982\uff0c\u6587\u4ef6\u53ef\u80fd\u5e76\u4e0d\u5b58\u5728\uff0c\u6216\u8005\u53ef\u80fd\u6ca1\u6709\u8bbf\u95ee\u6587\u4ef6\u7684\u6743\u9650\u3002 File::open \u9700\u8981\u4e00\u4e2a\u65b9\u5f0f\u544a\u8bc9\u6211\u4eec\u662f\u6210\u529f\u8fd8\u662f\u5931\u8d25\uff0c\u5e76\u540c\u65f6\u63d0\u4f9b\u7ed9\u6211\u4eec\u6587\u4ef6\u53e5\u67c4\u6216\u9519\u8bef\u4fe1\u606f\u3002\u800c\u8fd9\u4e9b\u4fe1\u606f\u6b63\u662f Result \u679a\u4e3e\u53ef\u4ee5\u63d0\u4f9b\u7684\u3002 \u5f53 File::open \u6210\u529f\u7684\u60c5\u51b5\u4e0b\uff0c\u53d8\u91cf f \u7684\u503c\u5c06\u4f1a\u662f\u4e00\u4e2a\u5305\u542b\u6587\u4ef6\u53e5\u67c4\u7684 Ok \u5b9e\u4f8b\u3002\u5728\u5931\u8d25\u7684\u60c5\u51b5\u4e0b\uff0c f \u7684\u503c\u4f1a\u662f\u4e00\u4e2a\u5305\u542b\u66f4\u591a\u5173\u4e8e\u51fa\u73b0\u4e86\u4f55\u79cd\u9519\u8bef\u4fe1\u606f\u7684 Err \u5b9e\u4f8b\u3002 \u9700\u8981\u5728\u793a\u4f8b\u7684\u4ee3\u7801\u4e2d\u589e\u52a0\u6839\u636e File::open \u8fd4\u56de\u503c\u8fdb\u884c\u4e0d\u540c\u5904\u7406\u7684\u903b\u8f91\u3002\u4e0b\u9762\u793a\u4f8b\u5c55\u793a\u4e86\u4e00\u4e2a\u4f7f\u7528\u57fa\u672c\u5de5\u5177\u5904\u7406 Result \u7684\u4f8b\u5b50\uff1a\u7b2c\u516d\u7ae0\u5b66\u4e60\u8fc7\u7684 match \u8868\u8fbe\u5f0f\u3002 use std :: fs :: File ; fn main () { let f = File :: open ( \"hello.txt\" ); let f = match f { Ok ( file ) => file , // \u8fd9\u91cc\u544a\u8bc9 Rust \u5f53\u7ed3\u679c\u662f Ok \u65f6\uff0c\u8fd4\u56de Ok \u6210\u5458\u4e2d\u7684 file \u503c\uff0c\u7136\u540e\u5c06\u8fd9\u4e2a\u6587\u4ef6\u53e5\u67c4\u8d4b\u503c\u7ed9\u53d8\u91cf f\u3002 // match \u4e4b\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u8fd9\u4e2a\u6587\u4ef6\u53e5\u67c4\u6765\u8fdb\u884c\u8bfb\u5199\u3002 Err ( error ) => panic! ( \"Problem opening the file: {:?}\" , error ), // match \u7684\u53e6\u4e00\u4e2a\u5206\u652f\u5904\u7406\u4ece File::open \u5f97\u5230 Err \u503c\u7684\u60c5\u51b5\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u9009\u62e9\u8c03\u7528 panic! \u5b8f\u3002 }; } \u6ce8\u610f\u4e0e Option \u679a\u4e3e\u4e00\u6837\uff0c Result \u679a\u4e3e\u548c\u5176\u6210\u5458\u4e5f\u88ab\u5bfc\u5165\u5230\u4e86 prelude \u4e2d\uff0c\u6240\u4ee5\u5c31\u4e0d\u9700\u8981\u5728 match \u5206\u652f\u4e2d\u7684 Ok \u548c Err \u4e4b\u524d\u6307\u5b9a Result:: \u3002 \u5982\u679c\u5f53\u524d\u76ee\u5f55\u6ca1\u6709\u4e00\u4e2a\u53eb\u505a hello.txt \u7684\u6587\u4ef6\uff0c\u5f53\u8fd0\u884c\u8fd9\u6bb5\u4ee3\u7801\u65f6\u4f1a\u770b\u5230\u5982\u4e0b\u6765\u81ea panic! \u5b8f\u7684\u8f93\u51fa\uff1a $ cargo run Compiling error - handling v0 . 1.0 ( file : ///projects/error-handling) Finished dev [ unoptimized + debuginfo ] target ( s ) in 0.73 s Running ` target / debug / error - handling ` thread ' main ' panicked at ' Problem opening the file : Os { code : 2 , kind : NotFound , message : \"No such file or directory\" } ' , src / main . rs : 8 : 23 note : run with ` RUST_BACKTRACE = 1 ` environment variable to display a backtrace \u5339\u914d\u4e0d\u540c\u7684\u9519\u8bef \u793a\u4f8b\u4e2d\u7684\u4ee3\u7801\u4e0d\u7ba1 File::open \u662f\u56e0\u4e3a\u4ec0\u4e48\u539f\u56e0\u5931\u8d25\u90fd\u4f1a panic! \u3002 \u6211\u4eec\u771f\u6b63\u5e0c\u671b\u7684\u662f\u5bf9\u4e0d\u540c\u7684\u9519\u8bef\u539f\u56e0\u91c7\u53d6\u4e0d\u540c\u7684\u884c\u4e3a\uff1a \u5982\u679c File::open \u56e0\u4e3a\u6587\u4ef6\u4e0d\u5b58\u5728\u800c\u5931\u8d25\uff0c\u6211\u4eec\u5e0c\u671b\u521b\u5efa\u8fd9\u4e2a\u6587\u4ef6\u5e76\u8fd4\u56de\u65b0\u6587\u4ef6\u7684\u53e5\u67c4\u3002 \u5982\u679c File::open \u56e0\u4e3a\u4efb\u4f55\u5176\u4ed6\u539f\u56e0\u5931\u8d25\uff0c\u4f8b\u5982\u6ca1\u6709\u6253\u5f00\u6587\u4ef6\u7684\u6743\u9650\uff0c\u6211\u4eec\u4ecd\u7136\u5e0c\u671b\u50cf\u793a\u4f8b\u90a3\u6837 panic! \u3002 \u8ba9\u6211\u4eec\u770b\u770b\u4e0b\u9762\u7684\u793a\u4f8b\uff0c\u5176\u4e2d match \u589e\u52a0\u4e86\u53e6\u4e00\u4e2a\u5206\u652f\uff1a // \u4f7f\u7528\u4e0d\u540c\u7684\u65b9\u5f0f\u5904\u7406\u4e0d\u540c\u7c7b\u578b\u7684\u9519\u8bef use std :: fs :: File ; use std :: io :: ErrorKind ; fn main () { let f = File :: open ( \"hello.txt\" ); let f = match f { Ok ( file ) => file , // File::open \u8fd4\u56de\u7684 Err \u6210\u5458\u4e2d\u7684\u503c\u7c7b\u578b io::Error\uff0c\u5b83\u662f\u4e00\u4e2a\u6807\u51c6\u5e93\u4e2d\u63d0\u4f9b\u7684\u7ed3\u6784\u4f53\u3002 // \u8fd9\u4e2a\u7ed3\u6784\u4f53\u6709\u4e00\u4e2a\u8fd4\u56de io::ErrorKind \u503c\u7684 kind \u65b9\u6cd5\u53ef\u4f9b\u8c03\u7528\u3002 // io::ErrorKind \u662f\u4e00\u4e2a\u6807\u51c6\u5e93\u63d0\u4f9b\u7684\u679a\u4e3e\uff0c\u5b83\u7684\u6210\u5458\u5bf9\u5e94 io \u64cd\u4f5c\u53ef\u80fd\u5bfc\u81f4\u7684\u4e0d\u540c\u9519\u8bef\u7c7b\u578b\u3002 // \u6211\u4eec\u611f\u5174\u8da3\u7684\u6210\u5458\u662f ErrorKind::NotFound\uff0c\u5b83\u4ee3\u8868\u5c1d\u8bd5\u6253\u5f00\u7684\u6587\u4ef6\u5e76\u4e0d\u5b58\u5728\u3002 Err ( err ) => match err . kind () { // \u5982\u679c error.kind() \u7684\u8fd4\u56de\u503c\u4e3a ErrorKind\u7684 NotFound \u6210\u5458\u3002 // \u5219\u5c1d\u8bd5\u901a\u8fc7 File::create \u521b\u5efa\u6587\u4ef6\u3002 ErrorKind :: NotFound => match File :: create ( \"hello.txt\" ) { Ok ( file ) => file , // \u7136\u800c\u56e0\u4e3a File::create \u4e5f\u53ef\u80fd\u4f1a\u5931\u8d25\uff0c\u8fd8\u9700\u8981\u589e\u52a0\u4e00\u4e2a\u5185\u5c42 match \u8bed\u53e5\u3002 // \u5f53\u6587\u4ef6\u4e0d\u80fd\u88ab\u6253\u5f00\uff0c\u4f1a\u6253\u5370\u51fa\u4e00\u4e2a\u4e0d\u540c\u7684\u9519\u8bef\u4fe1\u606f\u3002 Err ( e ) => panic! ( \"\u521b\u5efa\u6587\u4ef6\u5931\u8d25: {:?}\" , e ), }, // \u5916\u5c42 match \u7684\u6700\u540e\u4e00\u4e2a\u5206\u652f\u4fdd\u6301\u4e0d\u53d8\uff0c\u8fd9\u6837\u5bf9\u4efb\u4f55\u9664\u4e86\u6587\u4ef6\u4e0d\u5b58\u5728\u7684\u9519\u8bef\u4f1a\u4f7f\u7a0b\u5e8f panic\u3002 other_error => { panic! ( \"\u6253\u5f00\u6587\u4ef6\u5931\u8d25: {:?}\" , other_error ) } }, }; } \u4e0d\u540c\u4e8e\u4f7f\u7528 match \u548c Result<T, E> \u8fd9\u91cc\u6709\u597d\u591a match\uff01match \u786e\u5b9e\u5f88\u5f3a\u5927\uff0c\u4e0d\u8fc7\u4e5f\u975e\u5e38\u7684\u57fa\u7840\u3002\u7b2c\u5341\u4e09\u7ae0\u6211\u4eec\u4f1a\u4ecb\u7ecd\u95ed\u5305\uff08closure\uff09\uff0c\u8fd9\u53ef\u4ee5\u7528\u4e8e\u5f88\u591a Result \u4e0a\u5b9a\u4e49\u7684\u65b9\u6cd5\u3002\u5728\u5904\u7406\u4ee3\u7801\u4e2d\u7684 Result \u503c\u65f6\u8fd9\u4e9b\u65b9\u6cd5\u53ef\u80fd\u4f1a\u66f4\u52a0\u7b80\u6d01\u3002 \u4f8b\u5982\uff0c\u8fd9\u662f\u53e6\u4e00\u4e2a\u7f16\u5199\u4e0e\u793a\u4f8b 9-5 \u903b\u8f91\u76f8\u540c\u4f46\u662f\u4f7f\u7528\u95ed\u5305\u548c unwrap_or_else \u65b9\u6cd5\u7684\u4f8b\u5b50\uff1a use std :: fs :: File ; use std :: io :: ErrorKind ; fn main () { let f = File :: open ( \"hello.txt\" ). unwrap_or_else ( | error | { if error . kind () == ErrorKind :: NotFound { File :: create ( \"hello.txt\" ). unwrap_or_else ( | error | { panic! ( \"\u521b\u5efa\u6587\u4ef6\u5931\u8d25: {:?}\" , error ); }) } else { panic! ( \"\u6253\u5f00\u6587\u4ef6\u5931\u8d25: {:?}\" , error ); } }); } \u867d\u7136\u8fd9\u6bb5\u4ee3\u7801\u6709\u7740\u5982\u4e0a\u9762\u793a\u4f8b\u4e2d\u4e00\u6837\u7684\u884c\u4e3a\uff0c\u4f46\u5e76\u6ca1\u6709\u5305\u542b\u4efb\u4f55 match \u8868\u8fbe\u5f0f\u4e14\u66f4\u5bb9\u6613\u9605\u8bfb\u3002\u5728\u9605\u8bfb\u5b8c\u7b2c\u5341\u4e09\u7ae0\u540e\u518d\u56de\u5230\u8fd9\u4e2a\u4f8b\u5b50\uff0c\u5e76\u67e5\u770b\u6807\u51c6\u5e93\u6587\u6863 unwrap_or_else \u65b9\u6cd5\u90fd\u505a\u4e86\u4ec0\u4e48\u64cd\u4f5c\u3002\u5728\u5904\u7406\u9519\u8bef\u65f6\uff0c\u8fd8\u6709\u5f88\u591a\u8fd9\u7c7b\u65b9\u6cd5\u53ef\u4ee5\u6d88\u9664\u5927\u91cf\u5d4c\u5957\u7684 match \u8868\u8fbe\u5f0f\u3002 unwrap \u548c expect match \u80fd\u591f\u80dc\u4efb\u5b83\u7684\u5de5\u4f5c\uff0c\u4e0d\u8fc7\u5b83\u53ef\u80fd\u6709\u70b9\u5197\u957f\u5e76\u4e14\u4e0d\u603b\u662f\u80fd\u5f88\u597d\u7684\u8868\u660e\u5176\u610f\u56fe\u3002 Result<T, E> \u7c7b\u578b\u5b9a\u4e49\u4e86\u5f88\u591a\u8f85\u52a9\u65b9\u6cd5\u6765\u5904\u7406\u5404\u79cd\u60c5\u51b5\u3002 \u5176\u4e2d\u4e4b\u4e00\u53eb\u505a unwrap \uff0c\u5b83\u7684\u5b9e\u73b0\u5c31\u7c7b\u4f3c\u4e8e\u4e0a\u9762\u793a\u4f8b\u4e2d\u7684 match \u8bed\u53e5\u3002 \u5982\u679c Result \u503c\u662f\u6210\u5458 Ok \uff0c unwrap \u4f1a\u8fd4\u56de Ok \u4e2d\u7684\u503c\u3002 \u5982\u679c Result \u503c\u662f\u6210\u5458 Err \uff0c unwrap \u4f1a\u4e3a\u6211\u4eec\u8c03\u7528 panic! \u3002 \u8fd9\u91cc\u662f\u4e00\u4e2a\u5b9e\u8df5 unwrap \u7684\u4f8b\u5b50\uff1a use std :: fs :: File ; fn main () { // `unwrap` **\u8c03\u7528** `panic!` // \u4f7f\u7528\u9ed8\u8ba4\u7684 panic! \u4fe1\u606f\u3002 let f = File :: open ( \"hello.txt\" ). unwrap (); } \u5982\u679c\u8c03\u7528\u8fd9\u6bb5\u4ee3\u7801\u65f6\u4e0d\u5b58\u5728 hello.txt \u6587\u4ef6\uff0c\u6211\u4eec\u5c06\u4f1a\u770b\u5230\u4e00\u4e2a unwrap \u8c03\u7528 panic! \u65f6\u63d0\u4f9b\u7684\u9519\u8bef\u4fe1\u606f\uff1a thread ' main ' panicked at ' called ` Result :: unwrap () ` on an ` Err ` value : Error { repr : Os { code : 2 , message : \"No such file or directory\" } } ' , src / libcore / result . rs : 906 : 4 \u8fd8\u6709\u53e6\u4e00\u4e2a\u7c7b\u4f3c\u4e8e unwrap \u7684\u65b9\u6cd5\u5b83\u8fd8\u5141\u8bb8\u6211\u4eec\u9009\u62e9 panic! \u7684\u9519\u8bef\u4fe1\u606f\uff1a expect \u3002 \u4f7f\u7528 expect \u800c\u4e0d\u662f unwrap \u5e76\u63d0\u4f9b\u4e00\u4e2a\u597d\u7684\u9519\u8bef\u4fe1\u606f\u53ef\u4ee5\u8868\u660e\u4f60\u7684\u610f\u56fe\u5e76\u66f4\u6613\u4e8e\u8ffd\u8e2a panic \u7684\u6839\u6e90\u3002 expect \u7684\u8bed\u6cd5\u770b\u8d77\u6765\u50cf\u8fd9\u6837\uff1a use std :: fs :: File ; fn main () { // \u8fd4\u56de\u6587\u4ef6\u53e5\u67c4\u6216\u8c03\u7528 panic! \u5b8f // expect \u5728\u8c03\u7528 panic! \u65f6\u4f7f\u7528\u7684\u9519\u8bef\u4fe1\u606f\u5c06\u662f\u4f20\u9012\u7ed9 expect \u7684\u53c2\u6570\uff0c // \u800c\u4e0d\u50cf unwrap \u90a3\u6837\u4f7f\u7528\u9ed8\u8ba4\u7684 panic! \u4fe1\u606f\u3002 let f = File :: open ( \"hello.txt\" ). expect ( \"Failed to open hello.txt\" ); } expect \u4e0e unwrap \u7684\u4f7f\u7528\u65b9\u5f0f\u4e00\u6837\uff1a\u8fd4\u56de\u6587\u4ef6\u53e5\u67c4\u6216\u8c03\u7528 panic! \u5b8f\u3002 expect \u5728\u8c03\u7528 panic! \u65f6\u4f7f\u7528\u7684\u9519\u8bef\u4fe1\u606f\u5c06\u662f\u6211\u4eec\u4f20\u9012\u7ed9 expect \u7684\u53c2\u6570\uff0c\u800c\u4e0d\u50cf unwrap \u90a3\u6837\u4f7f\u7528\u9ed8\u8ba4\u7684 panic! \u4fe1\u606f\u3002 \u5b83\u770b\u8d77\u6765\u50cf\u8fd9\u6837\uff1a thread ' main ' panicked at ' Failed to open hello . txt : Error { repr : Os { code : 2 , message : \"No such file or directory\" } } ' , src / libcore / result . rs : 906 : 4 \u56e0\u4e3a\u8fd9\u4e2a\u9519\u8bef\u4fe1\u606f\u4ee5\u6307\u5b9a\u7684\u6587\u672c\u5f00\u59cb\uff0c Failed to open hello.txt \uff0c\u5c06\u4f1a\u66f4\u5bb9\u6613\u627e\u5230\u4ee3\u7801\u4e2d\u7684\u9519\u8bef\u4fe1\u606f\u6765\u81ea\u4f55\u5904\u3002 \u5982\u679c\u5728\u591a\u5904\u4f7f\u7528 unwrap \uff0c\u5219\u9700\u8981\u82b1\u66f4\u591a\u7684\u65f6\u95f4\u6765\u5206\u6790\u5230\u5e95\u662f\u54ea\u4e00\u4e2a unwrap \u9020\u6210\u4e86 panic \uff0c\u56e0\u4e3a\u6240\u6709\u7684 unwrap \u8c03\u7528\u90fd\u6253\u5370\u76f8\u540c\u7684\u4fe1\u606f\u3002 \u4f20\u64ad\u9519\u8bef \u5f53\u7f16\u5199\u4e00\u4e2a\u5176\u5b9e\u5148\u4f1a\u8c03\u7528\u4e00\u4e9b\u53ef\u80fd\u4f1a\u5931\u8d25\u7684\u64cd\u4f5c\u7684\u51fd\u6570\u65f6\uff0c\u9664\u4e86\u5728\u8fd9\u4e2a\u51fd\u6570\u4e2d\u5904\u7406\u9519\u8bef\u5916\uff0c\u8fd8\u53ef\u4ee5\u9009\u62e9\u8ba9\u8c03\u7528\u8005\u77e5\u9053\u8fd9\u4e2a\u9519\u8bef\u5e76\u51b3\u5b9a\u8be5\u5982\u4f55\u5904\u7406\u3002 \u8fd9\u88ab\u79f0\u4e3a \u4f20\u64ad \uff08propagating\uff09\u9519\u8bef\uff0c\u8fd9\u6837\u80fd\u66f4\u597d\u7684\u63a7\u5236\u4ee3\u7801\u8c03\u7528\uff0c\u56e0\u4e3a\u6bd4\u8d77\u4f60\u4ee3\u7801\u6240\u62e5\u6709\u7684\u4e0a\u4e0b\u6587\uff0c\u8c03\u7528\u8005\u53ef\u80fd\u62e5\u6709\u66f4\u591a\u4fe1\u606f\u6216\u903b\u8f91\u6765\u51b3\u5b9a\u5e94\u8be5\u5982\u4f55\u5904\u7406\u9519\u8bef\u3002 \u4f8b\u5982\uff0c\u4e0b\u9762\u5c55\u793a\u4e86\u4e00\u4e2a\u4ece\u6587\u4ef6\u4e2d\u8bfb\u53d6\u7528\u6237\u540d\u7684\u51fd\u6570\u3002\u5982\u679c\u6587\u4ef6\u4e0d\u5b58\u5728\u6216\u4e0d\u80fd\u8bfb\u53d6\uff0c\u8fd9\u4e2a\u51fd\u6570\u4f1a\u5c06\u8fd9\u4e9b\u9519\u8bef\u8fd4\u56de\u7ed9\u8c03\u7528\u5b83\u7684\u4ee3\u7801\uff1a // \u4e00\u4e2a\u51fd\u6570\u4f7f\u7528 match \u5c06\u9519\u8bef\u8fd4\u56de\u7ed9\u4ee3\u7801\u8c03\u7528\u8005 use std :: fs :: File ; use std :: io :: { self , Read }; // \u51fd\u6570\u8fd4\u56de\u4e00\u4e2a Result<T, E> \u7c7b\u578b\u7684\u503c\uff0c\u5176\u4e2d\u6cdb\u578b\u53c2\u6570 T \u7684\u5177\u4f53\u7c7b\u578b\u662f String\uff0c\u800c E \u7684\u5177\u4f53\u7c7b\u578b\u662f io::Error\u3002 // \u5982\u679c\u8fd9\u4e2a\u51fd\u6570\u6ca1\u6709\u51fa\u4efb\u4f55\u9519\u8bef\u6210\u529f\u8fd4\u56de\uff0c\u51fd\u6570\u7684\u8c03\u7528\u8005\u4f1a\u6536\u5230\u4e00\u4e2a\u5305\u542b String \u7684 Ok \u503c \u2014\u2014 \u51fd\u6570\u4ece\u6587\u4ef6\u4e2d\u8bfb\u53d6\u5230\u7684\u7528\u6237\u540d\u3002 // \u5982\u679c\u51fd\u6570\u9047\u5230\u4efb\u4f55\u9519\u8bef\uff0c\u51fd\u6570\u7684\u8c03\u7528\u8005\u4f1a\u6536\u5230\u4e00\u4e2a Err \u503c\uff0c\u5b83\u50a8\u5b58\u4e86\u4e00\u4e2a\u5305\u542b\u66f4\u591a\u8fd9\u4e2a\u95ee\u9898\u76f8\u5173\u4fe1\u606f\u7684 io::Error \u5b9e\u4f8b\u3002 // \u8fd9\u91cc\u9009\u62e9 io::Error \u4f5c\u4e3a\u51fd\u6570\u7684\u8fd4\u56de\u503c, \u5219\u662f\u56e0\u4e3a\u5b83\u6b63\u597d\u662f\u51fd\u6570\u4f53\u4e2d\uff1aFile::open \u51fd\u6570\u548c read_to_string \u65b9\u6cd5\u53ef\u80fd\u4f1a\u64cd\u4f5c\u5931\u8d25\u7684\u7684\u9519\u8bef\u8fd4\u56de\u503c\u3002 fn read_username_from_file () -> Result < String , io :: Error > { let f = File :: open ( \"hello.txt\" ); let mut f = match f { Ok ( file ) => file , // \u6253\u5f00\u6587\u4ef6\u6210\u529f\u65f6\uff0c\u76f4\u63a5\u8fd4\u56de\u6587\u4ef6\u53e5\u67c4 Err ( e ) => return Err ( e ), // \u6253\u5f00\u6587\u4ef6\u9519\u8bef\u662f\uff0c\u76f4\u63a5Return\u6210Result\u7684Error\u679a\u4e3e\u3002 }; let mut s = String :: new (); // \u521b\u5efa\u5b57\u7b26\u4e32\u4fdd\u5b58\u8bfb\u53d6\u7684\u503c\u3002 // match\u7ed3\u679c\u503c\u5c06\u8fd4\u56de, OK\u503c\u6216Err\u503c match f . read_to_string ( & mut s ) { Ok ( _ ) => Ok ( s ), // \u5c06\u8bfb\u53d6\u5230\u7684\u5b57\u7b26\u4e32\u4f5c\u4e3aResult\u7684OK\u4e2d\u7684\u503c\u3002 Err ( e ) => Err ( e ), // \u5c06Error\u503c\u4f5c\u4e3aResult\u7684Err\u4e2d\u7684\u503c\u3002 // \u4e0d\u9700\u8981\u663e\u5f0f\u7684\u8c03\u7528 return\uff0c\u56e0\u4e3a\u8fd9\u662f\u51fd\u6570\u7684\u6700\u540e\u4e00\u4e2a\u8868\u8fbe\u5f0f\u3002 } } \u8c03\u7528\u8fd9\u4e2a\u51fd\u6570\u7684\u4ee3\u7801\u6700\u7ec8\u4f1a\u5f97\u5230\u4e00\u4e2a\u5305\u542b\u7528\u6237\u540d\u7684 Ok \u503c\uff0c\u6216\u8005\u4e00\u4e2a\u5305\u542b io::Error \u7684 Err \u503c\u3002 \u6211\u4eec\u65e0\u4ece\u5f97\u77e5\u8c03\u7528\u8005\u4f1a\u5982\u4f55\u5904\u7406\u8fd9\u4e9b\u503c\u3002 \u4f8b\u5982\uff0c\u5982\u679c\u4ed6\u4eec\u5f97\u5230\u4e86\u4e00\u4e2a Err \u503c\uff0c\u4ed6\u4eec\u53ef\u80fd\u4f1a\u9009\u62e9 panic! \u5e76\u4f7f\u7a0b\u5e8f\u5d29\u6e83\u3001\u4f7f\u7528\u4e00\u4e2a\u9ed8\u8ba4\u7684\u7528\u6237\u540d\u6216\u8005\u4ece\u6587\u4ef6\u4e4b\u5916\u7684\u5730\u65b9\u5bfb\u627e\u7528\u6237\u540d\u3002 \u6211\u4eec\u6ca1\u6709\u8db3\u591f\u7684\u4fe1\u606f\u77e5\u6653\u8c03\u7528\u8005\u5177\u4f53\u4f1a\u5982\u4f55\u5c1d\u8bd5\uff0c\u6240\u4ee5\u5c06\u6240\u6709\u7684\u6210\u529f\u6216\u5931\u8d25\u4fe1\u606f\u5411\u4e0a\u4f20\u64ad\uff0c\u8ba9\u4ed6\u4eec\u9009\u62e9\u5408\u9002\u7684\u5904\u7406\u65b9\u6cd5\u3002 \u8fd9\u79cd\u4f20\u64ad\u9519\u8bef\u7684\u6a21\u5f0f\u5728 Rust \u662f\u5982\u6b64\u7684\u5e38\u89c1\uff0c\u4ee5\u81f3\u4e8e Rust \u63d0\u4f9b\u4e86 ? \u95ee\u53f7\u8fd0\u7b97\u7b26\u6765\u4f7f\u5176\u66f4\u6613\u4e8e\u5904\u7406\u3002 ?\u8fd0\u7b97\u7b26 \u4e0b\u9762\u793a\u4f8b\u5c55\u793a\u4e86\u4e00\u4e2a read_username_from_file \u7684\u5b9e\u73b0\uff0c\u5b83\u5b9e\u73b0\u4e86\u4e0e\u4e0a\u4e2a\u793a\u4f8b\u4e2d\u7684\u4ee3\u7801\u76f8\u540c\u7684\u529f\u80fd\uff0c\u4e0d\u8fc7\u8fd9\u4e2a\u5b9e\u73b0\u4f7f\u7528\u4e86 ? \u8fd0\u7b97\u7b26\uff1a // \u4e00\u4e2a\u4f7f\u7528 ? \u8fd0\u7b97\u7b26\u5411\u8c03\u7528\u8005\u8fd4\u56de\u9519\u8bef\u7684\u51fd\u6570 use std :: fs :: File ; use std :: io ; use std :: io :: Read ; fn read_username_from_file () -> Result < String , io :: Error > { // \u5982\u679c Result \u7684\u503c\u662f Ok\uff0c\u8fd9\u4e2a\u8868\u8fbe\u5f0f\u5c06\u4f1a\u8fd4\u56de Ok \u4e2d\u7684\u503c\u800c\u7a0b\u5e8f\u5c06\u7ee7\u7eed\u6267\u884c\u3002 // \u5982\u679c\u503c\u662f Err\uff0cErr \u4e2d\u7684\u503c\u5c06\u4f5c\u4e3a\u6574\u4e2a\u51fd\u6570\u7684\u8fd4\u56de\u503c\uff0c\u5c31\u597d\u50cf\u4f7f\u7528\u4e86 return \u5173\u952e\u5b57\u4e00\u6837\uff0c\u8fd9\u6837\u9519\u8bef\u503c\u5c31\u88ab\u4f20\u64ad\u7ed9\u4e86\u8c03\u7528\u8005\u3002 // ? \u5c06\u4f1a\u628a Ok \u4e2d\u7684\u503c\u8fd4\u56de\u7ed9\u53d8\u91cf f, \u5982\u679c\u51fa\u73b0\u4e86\u9519\u8bef\uff0c? \u8fd0\u7b97\u7b26\u4f1a\u63d0\u65e9\u8fd4\u56de\u6574\u4e2a\u51fd\u6570\u5e76\u5c06\u4e00\u4e9b Err \u503c\u4f20\u64ad\u7ed9\u8c03\u7528\u8005 let mut f = File :: open ( \"hello.txt\" ) ? ; let mut s = String :: new (); // \uff1f\u8fd0\u7528\u540c\u4e0a f . read_to_string ( & mut s ) ? ; Ok ( s ) // \u8fd4\u56deResult\u679a\u4e3e\u7684Ok\u503c\u3002 } \u4e0a\u4e2a\u793a\u4f8b\u4e2d\u7684 match \u8868\u8fbe\u5f0f\u4e0e\u95ee\u53f7\u8fd0\u7b97\u7b26\u6240\u505a\u7684\u6709 \u4e00\u70b9\u4e0d\u540c \uff1a ? \u8fd0\u7b97\u7b26\u6240\u4f7f\u7528\u7684\u9519\u8bef\u503c\u88ab\u4f20\u9012\u7ed9\u4e86 from \u51fd\u6570\uff0c\u5b83\u5b9a\u4e49\u4e8e\u6807\u51c6\u5e93\u7684 From trait \u4e2d\uff0c\u5176\u7528\u6765\u5c06\u9519\u8bef\u4ece\u4e00\u79cd\u7c7b\u578b\u8f6c\u6362\u4e3a\u53e6\u4e00\u79cd\u7c7b\u578b\u3002 \u5f53 ? \u8fd0\u7b97\u7b26\u8c03\u7528 from \u51fd\u6570\u65f6\uff0c\u6536\u5230\u7684\u9519\u8bef\u7c7b\u578b\u88ab\u8f6c\u6362\u4e3a\u7531\u5f53\u524d\u51fd\u6570\u8fd4\u56de\u7c7b\u578b\u6240\u6307\u5b9a\u7684\u9519\u8bef\u7c7b\u578b\u3002 \u8fd9\u5728\u5f53\u51fd\u6570\u8fd4\u56de\u5355\u4e2a\u9519\u8bef\u7c7b\u578b\u6765\u4ee3\u8868\u6240\u6709\u53ef\u80fd\u5931\u8d25\u7684\u65b9\u5f0f\u65f6\u5f88\u6709\u7528\uff0c\u5373\u4f7f\u5176\u53ef\u80fd\u4f1a\u56e0\u5f88\u591a\u79cd\u539f\u56e0\u5931\u8d25\u3002 \u53ea\u8981\u6bcf\u4e00\u4e2a\u9519\u8bef\u7c7b\u578b\u90fd\u5b9e\u73b0\u4e86 from \u51fd\u6570\u6765\u5b9a\u4e49\u5982\u4f55\u5c06\u81ea\u8eab\u8f6c\u6362\u4e3a\u8fd4\u56de\u7684\u9519\u8bef\u7c7b\u578b\uff0c ? \u8fd0\u7b97\u7b26\u4f1a\u81ea\u52a8\u5904\u7406\u8fd9\u4e9b\u8f6c\u6362\u3002 ? \u8fd0\u7b97\u7b26\u6d88\u9664\u4e86\u5927\u91cf\u6837\u677f\u4ee3\u7801\u5e76\u4f7f\u5f97\u51fd\u6570\u7684\u5b9e\u73b0\u66f4\u7b80\u5355\u3002 \u6211\u4eec\u751a\u81f3\u53ef\u4ee5\u5728 ? \u4e4b\u540e\u76f4\u63a5\u4f7f\u7528\u94fe\u5f0f\u65b9\u6cd5\u8c03\u7528\u6765\u8fdb\u4e00\u6b65\u7f29\u77ed\u4ee3\u7801: // \u95ee\u53f7\u8fd0\u7b97\u7b26\u4e4b\u540e\u7684\u94fe\u5f0f\u65b9\u6cd5\u8c03\u7528 use std :: fs :: File ; use std :: io ; use std :: io :: Read ; fn read_username_from_file () -> Result < String , io :: Error > { let mut s = String :: new (); File :: open ( \"hello.txt\" ) ? . read_to_string ( & mut s ) ? ; Ok ( s ) } \u54ea\u91cc\u4f7f\u7528 ? \u8fd0\u7b97\u7b26 ? \u8fd0\u7b97\u7b26\u53ea\u80fd\u88ab\u7528\u4e8e\u8fd4\u56de\u503c\u4e0e ? \u4f5c\u7528\u7684\u503c\u76f8\u517c\u5bb9\u7684\u51fd\u6570\u3002 \u56e0\u4e3a ? \u8fd0\u7b97\u7b26\u88ab\u5b9a\u4e49\u4e3a\u4ece\u51fd\u6570\u4e2d\u63d0\u65e9\u8fd4\u56de\u4e00\u4e2a\u503c\uff0c\u8fd9\u4e0e\u793a\u4f8b\u4e2d\u7684 match \u8868\u8fbe\u5f0f\u6709\u7740\u5b8c\u5168\u76f8\u540c\u7684\u5de5\u4f5c\u65b9\u5f0f\u3002 \u793a\u4f8b\u4e2d match \u4f5c\u7528\u4e8e\u4e00\u4e2a Result \u503c\uff0c\u63d0\u65e9\u8fd4\u56de\u7684\u5206\u652f\u8fd4\u56de\u4e86\u4e00\u4e2a Err(e) \u503c\u3002 \u51fd\u6570\u7684\u8fd4\u56de\u503c\u5fc5\u987b\u662f Result \u7c7b\u578b\u624d\u80fd\u4e0e\u8fd9\u4e2a return \u76f8\u517c\u5bb9\u3002 \u770b\u770b\u5728\u8fd4\u56de\u503c\u4e0d\u517c\u5bb9\u7684 main \u51fd\u6570\u4e2d\u4f7f\u7528 ? \u8fd0\u7b97\u7b26\u4f1a\u5f97\u5230\u4ec0\u4e48\u9519\u8bef\uff1a // \u5c1d\u8bd5\u5728\u8fd4\u56de () \u7684\u51fd\u6570\u4e2d\u4f7f\u7528 ? \u7684\u4ee3\u7801\u4e0d\u80fd\u7f16\u8bd1 use std :: fs :: File ; // \u8fd4\u56de\u7c7b\u578b\u662f () \u800c\u4e0d\u662f Result fn main () { let f = File :: open ( \"hello.txt\" ) ? ; } \u5f53\u7f16\u8bd1\u8fd9\u4e9b\u4ee3\u7801\uff0c\u4f1a\u5f97\u5230\u5982\u4e0b\u9519\u8bef\u4fe1\u606f\uff1a $ cargo run Compiling error - handling v0 . 1.0 ( file : ///projects/error-handling) error [ E0277 ] : the ` ? ` operator can only be used in a function that returns ` Result ` or ` Option ` ( or another type that implements ` FromResidual ` ) - -> src / main . rs : 4 : 36 | 3 | / fn main () { 4 | | let f = File :: open ( \"hello.txt\" ) ? ; | | ^ cannot use the ` ? ` operator in a function that returns ` () ` 5 | | } | | _ - this function should return ` Result ` or ` Option ` to accept ` ? ` | = help : the trait ` FromResidual < Result < Infallible , std :: io :: Error >> ` is not implemented for ` () ` For more information about this error , try ` rustc -- explain E0277 ` . error : could not compile ` error - handling ` due to previous error \u8fd9\u4e2a\u9519\u8bef\u6307\u51fa\u53ea\u80fd\u5728\u8fd4\u56de Result \u6216\u8005\u5176\u5b83\u5b9e\u73b0\u4e86 FromResidual \u7684\u7c7b\u578b\u7684\u51fd\u6570\u4e2d\u4f7f\u7528 ? \u8fd0\u7b97\u7b26\u3002 \u4e3a\u4e86\u4fee\u590d\u8fd9\u4e2a\u9519\u8bef\uff0c\u6709\u4e24\u4e2a\u9009\u62e9\u3002 \u4e00\u4e2a\u662f\uff0c\u5982\u679c\u6ca1\u6709\u9650\u5236\u7684\u8bdd\u5c06\u51fd\u6570\u7684\u8fd4\u56de\u503c\u6539\u4e3a Result<T, E> \u3002 \u53e6\u4e00\u4e2a\u662f\u4f7f\u7528 match \u6216 Result<T, E> \u7684\u65b9\u6cd5\u4e2d\u5408\u9002\u7684\u4e00\u4e2a\u6765\u5904\u7406 Result<T, E> \u3002 \u9519\u8bef\u4fe1\u606f\u4e2d\u4e5f\u63d0\u5230 ? \u4e5f\u53ef\u7528\u4e8e Option<T> \u503c\u3002 \u5982\u540c\u5bf9 Result \u4f7f\u7528 ? \u4e00\u6837\uff0c\u53ea\u80fd\u5728\u8fd4\u56de Option \u7684\u51fd\u6570\u4e2d\u5bf9 Option \u4f7f\u7528 ? \u3002 \u5728 Option<T> \u4e0a\u8c03\u7528 ? \u8fd0\u7b97\u7b26\u7684\u884c\u4e3a\u4e0e Result<T, E> \u7c7b\u4f3c\uff1a \u5982\u679c\u503c\u662f None \uff0c\u6b64\u65f6 None \u4f1a\u4ece\u51fd\u6570\u4e2d\u63d0\u524d\u8fd4\u56de\u3002 \u5982\u679c\u503c\u662f Some \uff0c Some \u4e2d\u7684\u503c\u4f5c\u4e3a\u8868\u8fbe\u5f0f\u7684\u8fd4\u56de\u503c\u540c\u65f6\u51fd\u6570\u7ee7\u7eed\u3002 \u4e0b\u9762\u793a\u4f8b\u4e2d\u6709\u4e00\u4e2a\u4ece\u7ed9\u5b9a\u6587\u672c\u4e2d\u8fd4\u56de\u7b2c\u4e00\u884c\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u7684\u51fd\u6570\u7684\u4f8b\u5b50\uff1a // \u5728 Option<T> \u503c\u4e0a\u4f7f\u7528 ? \u8fd0\u7b97\u7b26 fn last_char_of_first_line ( text : & str ) -> Option < char > { text . lines (). next () ? . chars (). last () } \u8fd9\u4e2a\u51fd\u6570\u8fd4\u56de Option<char> \u56e0\u4e3a\u5b83\u53ef\u80fd\u4f1a\u5728\u8fd9\u4e2a\u4f4d\u7f6e\u627e\u5230\u4e00\u4e2a\u5b57\u7b26\uff0c\u4e5f\u53ef\u80fd\u6ca1\u6709\u5b57\u7b26\u3002 \u8fd9\u6bb5\u4ee3\u7801\u83b7\u53d6 text \u5b57\u7b26\u4e32 slice \u4f5c\u4e3a\u53c2\u6570\u5e76\u8c03\u7528\u5176 lines \u65b9\u6cd5\uff0c\u8fd9\u4f1a\u8fd4\u56de\u4e00\u4e2a\u5b57\u7b26\u4e32\u4e2d\u6bcf\u4e00\u884c\u7684\u8fed\u4ee3\u5668\u3002 \u56e0\u4e3a\u51fd\u6570\u5e0c\u671b\u68c0\u67e5\u7b2c\u4e00\u884c\uff0c\u6240\u4ee5\u8c03\u7528\u4e86\u8fed\u4ee3\u5668 next \u6765\u83b7\u53d6\u8fed\u4ee3\u5668\u4e2d\u7b2c\u4e00\u4e2a\u503c\u3002 \u5982\u679c text \u662f\u7a7a\u5b57\u7b26\u4e32\uff0c next \u8c03\u7528\u4f1a\u8fd4\u56de None \uff0c\u6b64\u65f6\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 ? \u6765\u505c\u6b62\u5e76\u4ece last_char_of_first_line \u8fd4\u56de None \u3002 \u5982\u679c text \u4e0d\u662f\u7a7a\u5b57\u7b26\u4e32\uff0c next \u4f1a\u8fd4\u56de\u4e00\u4e2a\u5305\u542b text \u4e2d\u7b2c\u4e00\u884c\u7684\u5b57\u7b26\u4e32 slice \u7684 Some \u503c\u3002 ? \u4f1a\u63d0\u53d6\u8fd9\u4e2a\u5b57\u7b26\u4e32 slice \uff0c\u7136\u540e\u53ef\u4ee5\u5728\u5b57\u7b26\u4e32 slice \u4e0a\u8c03\u7528 chars \u6765\u83b7\u53d6\u5b57\u7b26\u7684\u8fed\u4ee3\u5668\u3002 \u6211\u4eec\u611f\u5174\u8da3\u7684\u662f\u7b2c\u4e00\u884c\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\uff0c\u6240\u4ee5\u53ef\u4ee5\u8c03\u7528 last \u6765\u8fd4\u56de\u8fed\u4ee3\u5668\u7684\u6700\u540e\u4e00\u9879\u3002 \u8fd9\u662f\u4e00\u4e2a Option \uff0c\u56e0\u4e3a\u6709\u53ef\u80fd\u7b2c\u4e00\u884c\u662f\u4e00\u4e2a\u7a7a\u5b57\u7b26\u4e32\uff0c\u4f8b\u5982 text \u4ee5\u4e00\u4e2a\u7a7a\u884c\u5f00\u5934\u800c\u540e\u9762\u7684\u884c\u6709\u6587\u672c\uff0c\u50cf\u662f \"\\nhi\"\u3002 \u4e0d\u8fc7\uff0c\u5982\u679c\u7b2c\u4e00\u884c\u6709\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\uff0c\u5b83\u4f1a\u8fd4\u56de\u5728\u4e00\u4e2a Some \u6210\u5458\u4e2d\u3002 ? \u8fd0\u7b97\u7b26\u4f5c\u7528\u4e8e\u5176\u4e2d\u7ed9\u4e86\u6211\u4eec\u4e00\u4e2a\u7b80\u6d01\u7684\u8868\u8fbe\u8fd9\u79cd\u903b\u8f91\u7684\u65b9\u5f0f\u3002 \u5982\u679c\u6211\u4eec\u4e0d\u80fd\u5728 Option \u4e0a\u4f7f\u7528 ? \u8fd0\u7b97\u7b26\uff0c\u5219\u4e0d\u5f97\u4e0d\u4f7f\u7528\u66f4\u591a\u7684\u65b9\u6cd5\u8c03\u7528\u6216\u8005 match \u8868\u8fbe\u5f0f\u6765\u5b9e\u73b0\u8fd9\u4e9b\u903b\u8f91\u3002 \u6ce8\u610f \u4f60\u53ef\u4ee5\u5728\u8fd4\u56de Result \u7684\u51fd\u6570\u4e2d\u5bf9 Result \u4f7f\u7528 ? \u8fd0\u7b97\u7b26\uff0c\u53ef\u4ee5\u5728\u8fd4\u56de Option \u7684\u51fd\u6570\u4e2d\u5bf9 Option \u4f7f\u7528 ? \u8fd0\u7b97\u7b26\uff0c\u4f46\u662f\u4e0d\u53ef\u4ee5\u6df7\u5408\u642d\u914d\u3002 ? \u8fd0\u7b97\u7b26\u4e0d\u4f1a\u81ea\u52a8\u5c06 Result \u8f6c\u5316\u4e3a Option \uff0c\u53cd\u4e4b\u4ea6\u7136\uff1b \u5728\u8fd9\u4e9b\u60c5\u51b5\u4e0b\uff0c\u53ef\u4ee5\u4f7f\u7528\u7c7b\u4f3c Result \u7684 ok \u65b9\u6cd5\u6216\u8005 Option \u7684 ok_or \u65b9\u6cd5\u6765\u663e\u5f0f\u8f6c\u6362\u3002 \u76ee\u524d\u4e3a\u6b62\uff0c\u6240\u4f7f\u7528\u7684\u6240\u6709 main \u51fd\u6570\u90fd\u8fd4\u56de () \u3002 main \u51fd\u6570\u662f\u7279\u6b8a\u7684\u56e0\u4e3a\u5b83\u662f\u53ef\u6267\u884c\u7a0b\u5e8f\u7684\u5165\u53e3\u70b9\u548c\u9000\u51fa\u70b9\uff0c\u4e3a\u4e86\u4f7f\u7a0b\u5e8f\u80fd\u6b63\u5e38\u5de5\u4f5c\uff0c\u5176\u53ef\u4ee5\u8fd4\u56de\u7684\u7c7b\u578b\u662f\u6709\u9650\u5236\u7684\u3002 \u5e78\u8fd0\u7684\u662f main \u51fd\u6570\u4e5f\u53ef\u4ee5\u8fd4\u56de Result<(), E> \uff0c \u4e0b\u9762\u793a\u4f8b\u4fee\u6539\u4e86 main \u7684\u8fd4\u56de\u503c\u4e3a Result<(), Box<dyn Error>> \u5e76\u5728\u7ed3\u5c3e\u589e\u52a0\u4e86\u4e00\u4e2a Ok(()) \u4f5c\u4e3a\u8fd4\u56de\u503c\u3002 \u8fd9\u6bb5\u4ee3\u7801\u53ef\u4ee5\u7f16\u8bd1\uff1a // \u4fee\u6539 main \u8fd4\u56de Result<(), E> \u5141\u8bb8\u5bf9 Result \u503c\u4f7f\u7528 ? \u8fd0\u7b97\u7b26 use std :: error :: Error ; use std :: fs :: File ; fn main () -> Result < (), Box < dyn Error >> { let f = File :: open ( \"hello.txt\" ) ? ; Ok (()) } Box<dyn Error> \u7c7b\u578b\u662f\u4e00\u4e2a trait \u5bf9\u8c61\uff08 trait object\uff09\u7b2c\u5341\u4e03\u7ae0 \u201c \u4e3a\u4f7f\u7528\u4e0d\u540c\u7c7b\u578b\u7684\u503c\u800c\u8bbe\u8ba1\u7684 trait \u5bf9\u8c61 \u201d \u90e8\u5206\u4f1a\u505a\u4ecb\u7ecd\u3002 \u76ee\u524d\u53ef\u4ee5\u5c06 Box<dyn Error> \u7406\u89e3\u4e3a \u201c \u4efb\u4f55\u7c7b\u578b\u7684\u9519\u8bef \u201d\u3002 \u5728\u8fd4\u56de Box<dyn Error> \u9519\u8bef\u7c7b\u578b main \u51fd\u6570\u4e2d\u5bf9 Result \u4f7f\u7528 ? \u662f\u5141\u8bb8\u7684\uff0c\u56e0\u4e3a\u5b83\u5141\u8bb8\u4efb\u4f55 Err \u503c\u63d0\u524d\u8fd4\u56de\u3002 \u5f53 main \u51fd\u6570\u8fd4\u56de Result<(), E> \uff0c \u5982\u679c main \u8fd4\u56de Ok(()) \u53ef\u6267\u884c\u7a0b\u5e8f\u4f1a\u4ee5 0 \u503c\u9000\u51fa\uff0c \u800c\u5982\u679c main \u8fd4\u56de Err \u503c\u5219\u4f1a\u4ee5\u975e\u96f6\u503c\u9000\u51fa\uff1b \u6210\u529f\u9000\u51fa\u7684\u7a0b\u5e8f\u4f1a\u8fd4\u56de\u6574\u6570 0 \uff0c\u8fd0\u884c\u9519\u8bef\u7684\u7a0b\u5e8f\u4f1a\u8fd4\u56de\u975e 0 \u7684\u6574\u6570\u3002 Rust \u4e5f\u4f1a\u4ece\u4e8c\u8fdb\u5236\u7a0b\u5e8f\u4e2d\u8fd4\u56de\u4e0e\u8fd9\u4e2a\u60ef\u4f8b\u76f8\u517c\u5bb9\u7684\u6574\u6570\u3002 main \u51fd\u6570\u4e5f\u53ef\u4ee5\u8fd4\u56de\u4efb\u4f55\u5b9e\u73b0\u4e86 std::process::Termination trait \u7684\u7c7b\u578b\u3002 \u622a\u81f3\u7f16\u5199\u65f6\uff0c Termination trait \u662f\u4e00\u4e2a\u4e0d\u7a33\u5b9a\u529f\u80fd\uff08unstable feature\uff09\uff0c\u53ea\u80fd\u7528\u4e8e Nightly Rust \u4e2d\uff0c \u6240\u4ee5\u4f60\u4e0d\u80fd\u5728 \u7a33\u5b9a\u7248 Rust\uff08Stable Rust\uff09\u4e2d\u7528\u81ea\u5df1\u7684\u7c7b\u578b\u53bb\u5b9e\u73b0\uff0c\u4e0d\u8fc7\u6709\u671d\u4e00\u65e5\u5e94\u8be5\u53ef\u4ee5\uff01 \u9519\u8bef\u5904\u7406\u6289\u62e9 \u90a3\u4e48\uff0c\u8be5\u5982\u4f55\u51b3\u5b9a\u4f55\u65f6\u5e94\u8be5 panic! \u4ee5\u53ca\u4f55\u65f6\u5e94\u8be5\u8fd4\u56de Result \u5462\uff1f \u5982\u679c\u4ee3\u7801 panic \uff0c\u5c31\u6ca1\u6709\u6062\u590d\u7684\u53ef\u80fd\u3002\u4f60\u53ef\u4ee5\u9009\u62e9\u5bf9\u4efb\u4f55\u9519\u8bef\u573a\u666f\u90fd\u8c03\u7528 panic! \uff0c\u4e0d\u7ba1\u662f\u5426\u6709\u53ef\u80fd\u6062\u590d\uff0c\u4e0d\u8fc7\u8fd9\u6837\u5c31\u662f\u4f60\u4ee3\u66ff\u8c03\u7528\u8005\u51b3\u5b9a\u4e86\u8fd9\u662f\u4e0d\u53ef\u6062\u590d\u7684\u3002 \u9009\u62e9\u8fd4\u56de Result \u503c\u7684\u8bdd\uff0c\u5c31\u5c06\u9009\u62e9\u6743\u4ea4\u7ed9\u4e86\u8c03\u7528\u8005\uff0c\u800c\u4e0d\u662f\u4ee3\u66ff\u4ed6\u4eec\u505a\u51fa\u51b3\u5b9a\u3002\u8c03\u7528\u8005\u53ef\u80fd\u4f1a\u9009\u62e9\u4ee5\u7b26\u5408\u4ed6\u4eec\u573a\u666f\u7684\u65b9\u5f0f\u5c1d\u8bd5\u6062\u590d\uff0c\u6216\u8005\u4e5f\u53ef\u80fd\u5e72\u8106\u5c31\u8ba4\u4e3a Err \u662f\u4e0d\u53ef\u6062\u590d\u7684\uff0c\u6240\u4ee5\u4ed6\u4eec\u4e5f\u53ef\u80fd\u4f1a\u8c03\u7528 panic! \u5e76\u5c06\u53ef\u6062\u590d\u7684\u9519\u8bef\u53d8\u6210\u4e86\u4e0d\u53ef\u6062\u590d\u7684\u9519\u8bef\u3002 \u56e0\u6b64\u8fd4\u56de Result \u662f\u5b9a\u4e49\u53ef\u80fd\u4f1a\u5931\u8d25\u7684\u51fd\u6570\u7684\u4e00\u4e2a\u597d\u7684\u9ed8\u8ba4\u9009\u62e9\u3002 \u5728\u4e00\u4e9b\u7c7b\u4f3c \u793a\u4f8b \u3001 \u539f\u578b\u4ee3\u7801 \uff08prototype code\uff09\u548c \u6d4b\u8bd5 \u4e2d\uff0c panic \u6bd4\u8fd4\u56de Result \u66f4\u4e3a\u5408\u9002\uff0c\u4e0d\u8fc7\u4ed6\u4eec\u5e76\u4e0d\u5e38\u89c1\u3002 \u793a\u4f8b\u3001\u4ee3\u7801\u539f\u578b\u548c\u6d4b\u8bd5\u90fd\u975e\u5e38\u9002\u5408 panic \u5f53\u4f60\u7f16\u5199\u4e00\u4e2a \u793a\u4f8b \u6765\u5c55\u793a\u4e00\u4e9b\u6982\u5ff5\u65f6\uff0c \u5728\u62e5\u6709\u5065\u58ee\u7684\u9519\u8bef\u5904\u7406\u4ee3\u7801\u7684\u540c\u65f6\u4e5f\u4f1a\u4f7f\u5f97\u4f8b\u5b50\u4e0d\u90a3\u4e48\u660e\u786e\u3002 \u4f8b\u5982\uff0c\u8c03\u7528\u4e00\u4e2a\u7c7b\u4f3c unwrap \u8fd9\u6837\u53ef\u80fd panic! \u7684\u65b9\u6cd5\u53ef\u4ee5\u88ab\u7406\u89e3\u4e3a\u4e00\u4e2a\u4f60\u5b9e\u9645\u5e0c\u671b\u7a0b\u5e8f\u5904\u7406\u9519\u8bef\u65b9\u5f0f\u7684\u5360\u4f4d\u7b26\uff0c\u5b83\u6839\u636e\u5176\u4f59\u4ee3\u7801\u8fd0\u884c\u65b9\u5f0f\u53ef\u80fd\u4f1a\u5404\u4e0d\u76f8\u540c\u3002 \u7c7b\u4f3c\u5730\uff0c\u5728\u51c6\u5907\u597d\u51b3\u5b9a\u5982\u4f55\u5904\u7406\u9519\u8bef\u4e4b\u524d\uff0c unwrap \u548c expect \u65b9\u6cd5\u5728\u539f\u578b\u8bbe\u8ba1\u65f6\u975e\u5e38\u65b9\u4fbf\u3002 \u5f53\u6211\u4eec\u51c6\u5907\u597d\u8ba9\u7a0b\u5e8f\u66f4\u52a0\u5065\u58ee\u65f6\uff0c\u5b83\u4eec\u4f1a\u5728\u4ee3\u7801\u4e2d\u7559\u4e0b\u6e05\u6670\u7684\u6807\u8bb0\u3002 \u5982\u679c\u65b9\u6cd5\u8c03\u7528\u5728\u6d4b\u8bd5\u4e2d\u5931\u8d25\u4e86\uff0c\u6211\u4eec\u5e0c\u671b\u8fd9\u4e2a\u6d4b\u8bd5\u90fd\u5931\u8d25\uff0c\u5373\u4fbf\u8fd9\u4e2a\u65b9\u6cd5\u5e76\u4e0d\u662f\u9700\u8981\u6d4b\u8bd5\u7684\u529f\u80fd\u3002\u56e0\u4e3a panic! \u4f1a\u5c06\u6d4b\u8bd5\u6807\u8bb0\u4e3a\u5931\u8d25\uff0c\u6b64\u65f6\u8c03\u7528 unwrap \u6216 expect \u662f\u6070\u5f53\u7684\u3002 \u5f53\u6211\u4eec\u77e5\u9053\u66f4\u591a\u7684\u60c5\u51b5 \u5f53\u4f60\u6709\u4e00\u4e9b\u5176\u4ed6\u7684\u903b\u8f91\u6765\u786e\u4fdd Result \u4f1a\u662f Ok \u503c\u65f6\uff0c\u8c03\u7528 unwrap \u4e5f\u662f\u5408\u9002\u7684\uff0c\u867d\u7136\u7f16\u8bd1\u5668\u65e0\u6cd5\u7406\u89e3\u8fd9\u79cd\u903b\u8f91\u3002 \u4f60\u4ecd\u7136\u9700\u8981\u5904\u7406\u4e00\u4e2a Result \u503c\uff1a\u5373\u4f7f\u5728\u4f60\u7684\u7279\u5b9a\u60c5\u51b5\u4e0b\u903b\u8f91\u4e0a\u662f\u4e0d\u53ef\u80fd\u7684\uff0c\u4f60\u6240\u8c03\u7528\u7684\u4efb\u4f55\u64cd\u4f5c\u4ecd\u7136\u6709\u53ef\u80fd\u5931\u8d25\u3002 \u5982\u679c\u901a\u8fc7\u4eba\u5de5\u68c0\u67e5\u4ee3\u7801\u6765\u786e\u4fdd\u6c38\u8fdc\u4e5f\u4e0d\u4f1a\u51fa\u73b0 Err \u503c\uff0c\u90a3\u4e48\u8c03\u7528 unwrap \u4e5f\u662f\u5b8c\u5168\u53ef\u4ee5\u63a5\u53d7\u7684\uff0c\u8fd9\u91cc\u662f\u4e00\u4e2a\u4f8b\u5b50\uff1a use std :: net :: IpAddr ; // \u6c38\u8fdc\u4e0d\u53ef\u80fd\u5931\u8d25\uff0c\u4f46\u8981\u5904\u7406Result\uff0c\u53ef\u4ee5\u4f7f\u7528unwrap; let home : IpAddr = \"127.0.0.1\" . parse (). unwrap (); \u901a\u8fc7\u89e3\u6790\u4e00\u4e2a\u786c\u7f16\u7801\u7684\u5b57\u7b26\u6765\u521b\u5efa\u4e00\u4e2a IpAddr \u5b9e\u4f8b\u3002\u53ef\u4ee5\u770b\u51fa 127.0.0.1 \u662f\u4e00\u4e2a\u6709\u6548\u7684 IP \u5730\u5740\uff0c\u6240\u4ee5\u8fd9\u91cc\u4f7f\u7528 unwrap \u662f\u53ef\u4ee5\u63a5\u53d7\u7684\u3002 \u7136\u800c\uff0c\u62e5\u6709\u4e00\u4e2a\u786c\u7f16\u7801\u7684\u6709\u6548\u7684\u5b57\u7b26\u4e32\u4e5f\u4e0d\u80fd\u6539\u53d8 parse \u65b9\u6cd5\u7684\u8fd4\u56de\u503c\u7c7b\u578b\uff1a\u5b83\u4ecd\u7136\u662f\u4e00\u4e2a Result \u503c\uff0c\u800c\u7f16\u8bd1\u5668\u4ecd\u7136\u4f1a\u8981\u6c42\u6211\u4eec\u5904\u7406\u8fd9\u4e2a Result \uff0c\u597d\u50cf\u8fd8\u662f\u6709\u53ef\u80fd\u51fa\u73b0 Err \u6210\u5458\u90a3\u6837\u3002 \u8fd9\u662f\u56e0\u4e3a\u7f16\u8bd1\u5668\u8fd8\u6ca1\u6709\u667a\u80fd\u5230\u53ef\u4ee5\u8bc6\u522b\u51fa\u8fd9\u4e2a\u5b57\u7b26\u4e32\u603b\u662f\u4e00\u4e2a\u6709\u6548\u7684 IP \u5730\u5740\u3002\u5982\u679c IP \u5730\u5740\u5b57\u7b26\u4e32\u6765\u6e90\u4e8e\u7528\u6237\u800c\u4e0d\u662f\u786c\u7f16\u7801\u8fdb\u7a0b\u5e8f\u4e2d\u7684\u8bdd\uff0c\u90a3\u4e48\u5c31 \u786e\u5b9e \u6709\u5931\u8d25\u7684\u53ef\u80fd\u6027\uff0c\u8fd9\u65f6\u5c31\u7edd\u5bf9\u9700\u8981\u6211\u4eec\u4ee5\u4e00\u79cd\u66f4\u5065\u58ee\u7684\u65b9\u5f0f\u5904\u7406 Result \u4e86\u3002 \u9519\u8bef\u5904\u7406\u6307\u5bfc\u539f\u5219 \u5728\u5f53\u6709\u53ef\u80fd\u4f1a\u5bfc\u81f4 \u6709\u5bb3\u72b6\u6001 \u7684\u60c5\u51b5\u4e0b\u5efa\u8bae\u4f7f\u7528 panic! \u2014\u2014 \u5728\u8fd9\u91cc\uff0c \u6709\u5bb3\u72b6\u6001 \u662f\u6307\u5f53\u4e00\u4e9b\u5047\u8bbe\u3001\u4fdd\u8bc1\u3001\u534f\u8bae\u6216\u4e0d\u53ef\u53d8\u6027\u88ab\u6253\u7834\u7684\u72b6\u6001 \uff0c\u4f8b\u5982 \u65e0\u6548\u7684\u503c \u3001 \u81ea\u76f8\u77db\u76fe\u7684\u503c \u6216\u8005 \u88ab\u4f20\u9012\u4e86\u4e0d\u5b58\u5728\u7684\u503c \u2014\u2014 \u5916\u52a0\u5982\u4e0b\u51e0\u79cd\u60c5\u51b5\uff1a \u6709\u5bb3\u72b6\u6001\u662f \u975e\u9884\u671f\u7684\u884c\u4e3a \uff0c\u4e0e\u5076\u5c14\u4f1a\u53d1\u751f\u7684\u884c\u4e3a\u76f8\u5bf9\uff0c\u6bd4\u5982\u7528\u6237\u8f93\u5165\u4e86\u9519\u8bef\u683c\u5f0f\u7684\u6570\u636e\u3002 \u5728\u6b64\u4e4b\u540e \u4ee3\u7801\u7684\u8fd0\u884c\u4f9d\u8d56\u4e8e\u4e0d\u5904\u4e8e\u8fd9\u79cd\u6709\u5bb3\u72b6\u6001 \uff0c\u800c\u4e0d\u662f\u5728\u6bcf\u4e00\u6b65\u90fd\u68c0\u67e5\u662f\u5426\u6709\u95ee\u9898\u3002 \u6ca1\u6709\u53ef\u884c\u7684\u624b\u6bb5\u6765\u5c06\u6709\u5bb3\u72b6\u6001\u4fe1\u606f\u7f16\u7801\u8fdb\u6240\u4f7f\u7528\u7684\u7c7b\u578b\u4e2d\u7684\u60c5\u51b5 \u3002\u6211\u4eec\u4f1a\u5728\u7b2c\u5341\u4e03\u7ae0 \u201c \u5c06\u72b6\u6001\u548c\u884c\u4e3a\u7f16\u7801\u4e3a\u7c7b\u578b \u201d \u90e8\u5206\u901a\u8fc7\u4e00\u4e2a\u4f8b\u5b50\u6765\u8bf4\u660e\u6211\u4eec\u7684\u610f\u601d\u3002 \u5982\u679c\u522b\u4eba\u8c03\u7528\u4f60\u7684\u4ee3\u7801\u5e76\u4f20\u9012\u4e86\u4e00\u4e2a\u6ca1\u6709\u610f\u4e49\u7684\u503c\uff0c\u6700\u597d\u7684\u60c5\u51b5\u4e5f\u8bb8\u5c31\u662f panic! \u5e76\u8b66\u544a\u4f7f\u7528\u4f60\u7684\u5e93\u7684\u4eba\u4ed6\u7684\u4ee3\u7801\u4e2d\u6709 bug \u4ee5\u4fbf\u4ed6\u80fd\u5728\u5f00\u53d1\u65f6\u5c31\u4fee\u590d\u5b83\u3002 \u7c7b\u4f3c\u7684\uff0c\u5982\u679c\u4f60\u6b63\u5728\u8c03\u7528\u4e0d\u53d7\u4f60\u63a7\u5236\u7684\u5916\u90e8\u4ee3\u7801\uff0c\u5e76\u4e14\u5b83\u8fd4\u56de\u4e86\u4e00\u4e2a\u4f60\u65e0\u6cd5\u4fee\u590d\u7684\u65e0\u6548\u72b6\u6001\uff0c\u90a3\u4e48 panic! \u5f80\u5f80\u662f\u5408\u9002\u7684\u3002 \u7136\u800c\u5f53\u9519\u8bef\u9884\u671f\u4f1a\u51fa\u73b0\u65f6\uff0c\u8fd4\u56de Result \u4ecd\u8981\u6bd4\u8c03\u7528 panic! \u66f4\u4e3a\u5408\u9002\u3002 \u8fd9\u6837\u7684\u4f8b\u5b50\u5305\u62ec\u89e3\u6790\u5668\u63a5\u6536\u5230\u683c\u5f0f\u9519\u8bef\u7684\u6570\u636e\uff0c\u6216\u8005 HTTP \u8bf7\u6c42\u8fd4\u56de\u4e86\u4e00\u4e2a\u8868\u660e\u89e6\u53d1\u4e86\u9650\u6d41\u7684\u72b6\u6001\u3002 \u5728\u8fd9\u4e9b\u4f8b\u5b50\u4e2d\uff0c\u5e94\u8be5\u901a\u8fc7\u8fd4\u56de Result \u6765\u8868\u660e\u5931\u8d25\u9884\u671f\u662f\u53ef\u80fd\u7684\uff0c\u8fd9\u6837\u5c06\u6709\u5bb3\u72b6\u6001\u5411\u4e0a\u4f20\u64ad\uff0c\u8c03\u7528\u8005\u5c31\u53ef\u4ee5\u51b3\u5b9a\u8be5\u5982\u4f55\u5904\u7406\u8fd9\u4e2a\u95ee\u9898\u3002 \u4f7f\u7528 panic! \u6765\u5904\u7406\u8fd9\u4e9b\u60c5\u51b5\u5c31\u4e0d\u662f\u6700\u597d\u7684\u9009\u62e9\u3002 \u5f53\u4ee3\u7801\u5bf9\u503c\u8fdb\u884c\u64cd\u4f5c\u65f6\uff0c\u5e94\u8be5\u9996\u5148\u9a8c\u8bc1\u503c\u662f\u6709\u6548\u7684\uff0c\u5e76\u5728\u5176\u65e0\u6548\u65f6 panic! \u3002 \u8fd9\u4e3b\u8981\u662f\u51fa\u4e8e\u5b89\u5168\u7684\u539f\u56e0\uff1a\u5c1d\u8bd5\u64cd\u4f5c\u65e0\u6548\u6570\u636e\u4f1a\u66b4\u9732\u4ee3\u7801\u6f0f\u6d1e\uff0c\u8fd9\u5c31\u662f\u6807\u51c6\u5e93\u5728\u5c1d\u8bd5\u8d8a\u754c\u8bbf\u95ee\u6570\u7ec4\u65f6\u4f1a panic! \u7684\u4e3b\u8981\u539f\u56e0\uff1a\u5c1d\u8bd5\u8bbf\u95ee\u4e0d\u5c5e\u4e8e\u5f53\u524d\u6570\u636e\u7ed3\u6784\u7684\u5185\u5b58\u662f\u4e00\u4e2a\u5e38\u89c1\u7684\u5b89\u5168\u9690\u60a3\u3002 \u51fd\u6570\u901a\u5e38\u90fd\u9075\u5faa \u5951\u7ea6 \uff08contracts\uff09\uff1a \u4ed6\u4eec\u7684\u884c\u4e3a\u53ea\u6709\u5728\u8f93\u5165\u6ee1\u8db3\u7279\u5b9a\u6761\u4ef6\u65f6\u624d\u80fd\u5f97\u5230\u4fdd\u8bc1 \u3002\u5f53\u8fdd\u53cd\u5951\u7ea6\u65f6 panic \u662f\u6709\u9053\u7406\u7684\uff0c\u56e0\u4e3a\u8fd9\u901a\u5e38\u4ee3\u8868\u8c03\u7528\u65b9\u7684 bug \uff0c\u800c\u4e14\u8fd9\u4e5f\u4e0d\u662f\u90a3\u79cd\u4f60\u5e0c\u671b\u6240\u8c03\u7528\u7684\u4ee3\u7801\u5fc5\u987b\u5904\u7406\u7684\u9519\u8bef\u3002 \u4e8b\u5b9e\u4e0a\u6240\u8c03\u7528\u7684\u4ee3\u7801\u4e5f\u6ca1\u6709\u5408\u7406\u7684\u65b9\u5f0f\u6765\u6062\u590d\uff0c\u800c\u662f\u9700\u8981\u8c03\u7528\u65b9\u7684 \u7a0b\u5e8f\u5458 \u4fee\u590d\u5176\u4ee3\u7801\u3002\u51fd\u6570\u7684\u5951\u7ea6\uff0c\u5c24\u5176\u662f\u5f53\u8fdd\u53cd\u5b83\u4f1a\u9020\u6210 panic \u7684\u5951\u7ea6\uff0c\u5e94\u8be5\u5728\u51fd\u6570\u7684 API \u6587\u6863\u4e2d\u5f97\u5230\u89e3\u91ca\u3002 \u867d\u7136\u5728\u6240\u6709\u51fd\u6570\u4e2d\u90fd\u62e5\u6709\u8bb8\u591a\u9519\u8bef\u68c0\u67e5\u662f\u5197\u957f\u800c\u70e6\u4eba\u7684\u3002 \u5e78\u8fd0\u7684\u662f\uff0c\u53ef\u4ee5\u5229\u7528 Rust \u7684\u7c7b\u578b\u7cfb\u7edf\uff08\u4ee5\u53ca\u7f16\u8bd1\u5668\u7684\u7c7b\u578b\u68c0\u67e5\uff09\u4e3a\u4f60\u8fdb\u884c\u5f88\u591a\u68c0\u67e5\u3002 \u5982\u679c\u51fd\u6570\u6709\u4e00\u4e2a\u7279\u5b9a\u7c7b\u578b\u7684\u53c2\u6570\uff0c\u53ef\u4ee5\u5728\u77e5\u6653\u7f16\u8bd1\u5668\u5df2\u7ecf\u786e\u4fdd\u5176\u62e5\u6709\u4e00\u4e2a\u6709\u6548\u503c\u7684\u524d\u63d0\u4e0b\u8fdb\u884c\u4f60\u7684\u4ee3\u7801\u903b\u8f91\u3002 \u4f8b\u5982\uff0c\u5982\u679c\u4f60\u4f7f\u7528\u4e86\u4e00\u4e2a\u5e76\u4e0d\u662f Option \u7684\u7c7b\u578b\uff0c\u5219\u7a0b\u5e8f\u671f\u671b\u5b83\u662f \u6709\u503c \u7684\u5e76\u4e14\u4e0d\u662f \u7a7a\u503c , \u4f60\u7684\u4ee3\u7801\u65e0\u9700\u5904\u7406 Some \u548c None \u8fd9\u4e24\u79cd\u60c5\u51b5\uff0c\u5b83\u53ea\u4f1a\u6709\u4e00\u79cd\u60c5\u51b5\u5c31\u662f\u7edd\u5bf9\u4f1a\u6709\u4e00\u4e2a\u503c\u3002 \u5c1d\u8bd5\u5411\u51fd\u6570\u4f20\u9012\u7a7a\u503c\u7684\u4ee3\u7801\u751a\u81f3\u6839\u672c\u4e0d\u80fd\u7f16\u8bd1\uff0c\u6240\u4ee5\u4f60\u7684\u51fd\u6570\u5728\u8fd0\u884c\u65f6\u6ca1\u6709\u5fc5\u8981\u5224\u7a7a\u3002 \u53e6\u5916\u4e00\u4e2a\u4f8b\u5b50\u662f\u4f7f\u7528\u50cf u32 \u8fd9\u6837\u7684\u65e0\u7b26\u53f7\u6574\u578b\uff0c\u4e5f\u4f1a\u786e\u4fdd\u5b83\u6c38\u8fdc\u4e0d\u4e3a\u8d1f\u3002 \u521b\u5efa\u81ea\u5b9a\u4e49\u7c7b\u578b\u8fdb\u884c\u6709\u6548\u6027\u9a8c\u8bc1 \u8ba9\u6211\u4eec\u4f7f\u7528 Rust \u7c7b\u578b\u7cfb\u7edf\u7684\u601d\u60f3\u6765\u8fdb\u4e00\u6b65\u786e\u4fdd\u503c\u7684\u6709\u6548\u6027\uff0c\u5e76\u5c1d\u8bd5\u521b\u5efa\u4e00\u4e2a\u81ea\u5b9a\u4e49\u7c7b\u578b\u4ee5\u8fdb\u884c\u9a8c\u8bc1\u3002 \u56de\u5fc6\u4e00\u4e0b\u7b2c\u4e8c\u7ae0\u7684\u731c\u731c\u770b\u6e38\u620f\uff0c\u6211\u4eec\u7684\u4ee3\u7801\u8981\u6c42\u7528\u6237\u731c\u6d4b\u4e00\u4e2a 1 \u5230 100 \u4e4b\u95f4\u7684\u6570\u5b57\uff0c\u5728\u5c06\u5176\u4e0e\u79d8\u5bc6\u6570\u5b57\u505a\u6bd4\u8f83\u4e4b\u524d\u6211\u4eec\u4ece\u672a\u9a8c\u8bc1\u7528\u6237\u7684\u731c\u6d4b\u662f\u4f4d\u4e8e\u8fd9\u4e24\u4e2a\u6570\u5b57\u4e4b\u95f4\u7684\uff0c\u6211\u4eec\u53ea\u9a8c\u8bc1\u5b83\u662f\u5426\u4e3a\u6b63\u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5176\u5f71\u54cd\u5e76\u4e0d\u662f\u5f88\u4e25\u91cd\uff1a\u201cToo high\u201d \u6216 \u201cToo low\u201d \u7684\u8f93\u51fa\u4ecd\u7136\u662f\u6b63\u786e\u7684\u3002 \u4f46\u662f\u8fd9\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u5f15\u5bfc\u7528\u6237\u5f97\u51fa\u6709\u6548\u731c\u6d4b\u7684\u8f85\u52a9\uff0c\u4f8b\u5982\u5f53\u7528\u6237\u731c\u6d4b\u4e00\u4e2a\u8d85\u51fa\u8303\u56f4\u7684\u6570\u5b57\u6216\u8005\u8f93\u5165\u5b57\u6bcd\u65f6\u91c7\u53d6\u4e0d\u540c\u7684\u884c\u4e3a\u3002 \u4e00\u79cd\u5b9e\u73b0\u65b9\u5f0f\u662f\u5c06\u731c\u6d4b\u89e3\u6790\u6210 i32 \u800c\u4e0d\u4ec5\u4ec5\u662f u32 \uff0c\u6765\u9ed8\u8bb8\u8f93\u5165\u8d1f\u6570\uff0c\u63a5\u7740\u68c0\u67e5\u6570\u5b57\u662f\u5426\u5728\u8303\u56f4\u5185\uff1a loop { // --snip-- let guess : i32 = match guess . trim (). parse () { Ok ( num ) => num , Err ( _ ) => continue , }; // if \u8868\u8fbe\u5f0f\u68c0\u67e5\u4e86\u503c\u662f\u5426\u8d85\u51fa\u8303\u56f4\uff0c\u544a\u8bc9\u7528\u6237\u51fa\u4e86\u4ec0\u4e48\u95ee\u9898\uff0c\u5e76\u8c03\u7528 continue \u5f00\u59cb\u4e0b\u4e00\u6b21\u5faa\u73af\uff0c\u8bf7\u6c42\u53e6\u4e00\u4e2a\u731c\u6d4b\u3002 // if \u8868\u8fbe\u5f0f\u4e4b\u540e\uff0c\u5c31\u53ef\u4ee5\u5728\u77e5\u9053 guess \u5728 1 \u5230 100 \u4e4b\u95f4\u7684\u60c5\u51b5\u4e0b\u4e0e\u79d8\u5bc6\u6570\u5b57\u4f5c\u6bd4\u8f83\u4e86\u3002 if guess < 1 || guess > 100 { println! ( \"The secret number will be between 1 and 100.\" ); continue ; } match guess . cmp ( & secret_number ) { // --snip-- } \u7136\u800c\uff0c\u8fd9\u5e76\u4e0d\u662f\u4e00\u4e2a\u7406\u60f3\u7684\u89e3\u51b3\u65b9\u6848\uff1a\u5982\u679c\u8ba9\u7a0b\u5e8f\u4ec5\u4ec5\u5904\u7406 1 \u5230 100 \u4e4b\u95f4\u7684\u503c\u662f\u4e00\u4e2a\u7edd\u5bf9\u9700\u8981\u6ee1\u8db3\u7684\u8981\u6c42\uff0c\u800c\u4e14\u7a0b\u5e8f\u4e2d\u7684\u5f88\u591a\u51fd\u6570\u90fd\u6709\u8fd9\u6837\u7684\u8981\u6c42\uff0c \u5728\u6bcf\u4e2a\u51fd\u6570\u4e2d\u90fd\u6709\u8fd9\u6837\u7684\u68c0\u67e5\u5c06\u662f\u975e\u5e38\u5197\u4f59\u7684 \uff08\u5e76\u53ef\u80fd\u6f5c\u5728\u7684\u5f71\u54cd\u6027\u80fd\uff09\u3002 \u76f8\u53cd\u6211\u4eec\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u65b0\u7c7b\u578b\u6765\u5c06\u9a8c\u8bc1\u653e\u5165\u521b\u5efa\u5176\u5b9e\u4f8b\u7684\u51fd\u6570\u4e2d\uff0c\u800c\u4e0d\u662f\u5230\u5904\u91cd\u590d\u8fd9\u4e9b\u68c0\u67e5\u3002\u8fd9\u6837\u5c31\u53ef\u4ee5\u5b89\u5168\u7684\u5728\u51fd\u6570\u7b7e\u540d\u4e2d\u4f7f\u7528\u65b0\u7c7b\u578b\u5e76\u76f8\u4fe1\u4ed6\u4eec\u63a5\u6536\u5230\u7684\u503c\u3002 \u4e0b\u9762\u793a\u4f8b\u4e2d\u5c55\u793a\u4e86\u4e00\u4e2a\u5b9a\u4e49 Guess \u7c7b\u578b\u7684\u65b9\u6cd5\uff0c\u53ea\u6709\u5728 new \u51fd\u6570\u63a5\u6536\u5230 1 \u5230 100 \u4e4b\u95f4\u7684\u503c\u65f6\u624d\u4f1a\u521b\u5efa Guess \u7684\u5b9e\u4f8b\uff1a // \u4e00\u4e2a Guess \u7c7b\u578b\uff0c\u5b83\u53ea\u5728\u503c\u4f4d\u4e8e 1 \u548c 100 \u4e4b\u95f4\u65f6\u624d\u7ee7\u7eed // \u9996\u5148\uff0c\u5b9a\u4e49\u4e86\u4e00\u4e2a\u5305\u542b i32 \u7c7b\u578b\u5b57\u6bb5 value \u7684\u7ed3\u6784\u4f53 Guess\u3002\u8fd9\u91cc\u662f\u50a8\u5b58\u731c\u6d4b\u503c\u7684\u5730\u65b9\u3002 pub struct Guess { value : i32 , } impl Guess { // \u63a5\u7740\u5728 Guess \u4e0a\u5b9e\u73b0\u4e86\u4e00\u4e2a\u53eb\u505a new \u7684\u5173\u8054\u51fd\u6570\u6765\u521b\u5efa Guess \u7684\u5b9e\u4f8b\u3002 // new \u5b9a\u4e49\u4e3a\u63a5\u6536\u4e00\u4e2a i32 \u7c7b\u578b\u7684\u53c2\u6570 value \u5e76\u8fd4\u56de\u4e00\u4e2a Guess\u3002 pub fn new ( value : i32 ) -> Guess { // new \u51fd\u6570\u4e2d\u4ee3\u7801\u7684\u6d4b\u8bd5\u786e\u4fdd\u4e86\u5176\u503c\u662f\u5728 1 \u5230 100 \u4e4b\u95f4\u7684\u3002 if value < 1 || value > 100 { // \u5982\u679c value \u6ca1\u6709\u901a\u8fc7\u6d4b\u8bd5\u5219\u8c03\u7528 panic!\uff0c\u8fd9\u4f1a\u8b66\u544a\u8c03\u7528\u8fd9\u4e2a\u51fd\u6570\u7684\u7a0b\u5e8f\u5458\u6709\u4e00\u4e2a\u9700\u8981\u4fee\u6539\u7684 bug\uff0c // \u56e0\u4e3a\u521b\u5efa\u4e00\u4e2a value \u8d85\u51fa\u8303\u56f4\u7684 Guess \u5c06\u4f1a\u8fdd\u53cd Guess::new \u6240\u9075\u5faa\u7684\u5951\u7ea6\u3002 // Guess::new \u4f1a\u51fa\u73b0 panic \u7684\u6761\u4ef6\u5e94\u8be5\u5728\u5176\u516c\u6709 API \u6587\u6863\u4e2d\u88ab\u63d0\u53ca\uff1b panic! ( \"Guess value must be between 1 and 100, got {}.\" , value ); } // \u5982\u679c value \u901a\u8fc7\u4e86\u6d4b\u8bd5\uff0c\u6211\u4eec\u65b0\u5efa\u4e00\u4e2a Guess\uff0c\u5176\u5b57\u6bb5 value \u5c06\u88ab\u8bbe\u7f6e\u4e3a\u53c2\u6570 value \u7684\u503c\uff0c\u63a5\u7740\u8fd4\u56de\u8fd9\u4e2a Guess\u3002 Guess { value } } // \u63a5\u7740, \u5b9e\u73b0\u4e86\u4e00\u4e2a\u501f\u7528\u4e86 self \u7684\u65b9\u6cd5 value\uff0c\u5b83\u6ca1\u6709\u4efb\u4f55\u5176\u4ed6\u53c2\u6570\u5e76\u8fd4\u56de\u4e00\u4e2a i32\u3002 // \u8fd9\u7c7b\u65b9\u6cd5\u6709\u65f6\u88ab\u79f0\u4e3a getter\uff0c\u56e0\u4e3a\u5b83\u7684\u76ee\u7684\u5c31\u662f\u8fd4\u56de\u5bf9\u5e94\u5b57\u6bb5\u7684\u6570\u636e\u3002 // \u8fd9\u6837\u7684\u516c\u6709\u65b9\u6cd5\u662f\u5fc5\u8981\u7684\uff0c\u56e0\u4e3a Guess \u7ed3\u6784\u4f53\u7684 value \u5b57\u6bb5\u662f\u79c1\u6709\u7684\u3002 pub fn value ( & self ) -> i32 { self . value } } \u79c1\u6709\u7684\u5b57\u6bb5 value \u662f\u5f88\u91cd\u8981\u7684\uff0c\u8fd9\u6837\u4f7f\u7528 Guess \u7ed3\u6784\u4f53\u7684\u4ee3\u7801\u5c06\u4e0d\u5141\u8bb8\u76f4\u63a5\u8bbe\u7f6e value \u7684\u503c\uff1a\u8c03\u7528\u8005 \u5fc5\u987b \u4f7f\u7528 Guess::new \u65b9\u6cd5\u6765\u521b\u5efa\u4e00\u4e2a Guess \u7684\u5b9e\u4f8b\uff0c\u8fd9\u5c31\u786e\u4fdd\u4e86\u4e0d\u4f1a\u5b58\u5728\u4e00\u4e2a value \u6ca1\u6709\u901a\u8fc7 Guess::new \u51fd\u6570\u7684\u6761\u4ef6\u68c0\u67e5\u7684 Guess\u3002 \u4e8e\u662f\uff0c\u4e00\u4e2a\u63a5\u6536\uff08\u6216\u8fd4\u56de\uff09 1 \u5230 100 \u4e4b\u95f4\u6570\u5b57\u7684\u51fd\u6570\u5c31\u53ef\u4ee5\u58f0\u660e\u4e3a\u63a5\u6536\uff08\u6216\u8fd4\u56de\uff09 Guess \u7684\u5b9e\u4f8b\uff0c\u800c\u4e0d\u662f i32 \uff0c\u540c\u65f6\u5176\u51fd\u6570\u4f53\u4e2d\u4e5f\u65e0\u9700\u8fdb\u884c\u4efb\u4f55\u989d\u5916\u7684\u68c0\u67e5\u3002 \u603b\u7ed3 Rust \u7684\u9519\u8bef\u5904\u7406\u529f\u80fd\u88ab\u8bbe\u8ba1\u4e3a\u5e2e\u52a9\u4f60\u7f16\u5199\u66f4\u52a0\u5065\u58ee\u7684\u4ee3\u7801\u3002 panic! \u5b8f\u4ee3\u8868\u4e00\u4e2a\u7a0b\u5e8f\u65e0\u6cd5\u5904\u7406\u7684\u72b6\u6001\uff0c\u5e76\u505c\u6b62\u6267\u884c\u800c\u4e0d\u662f\u4f7f\u7528\u65e0\u6548\u6216\u4e0d\u6b63\u786e\u7684\u503c\u7ee7\u7eed\u5904\u7406\u3002 Rust \u7c7b\u578b\u7cfb\u7edf\u7684 Result \u679a\u4e3e\u4ee3\u8868\u64cd\u4f5c\u53ef\u80fd\u4f1a\u5728\u4e00\u79cd\u53ef\u4ee5\u6062\u590d\u7684\u60c5\u51b5\u4e0b\u5931\u8d25\u3002 \u53ef\u4ee5\u4f7f\u7528 Result \u6765\u544a\u8bc9\u4ee3\u7801\u8c03\u7528\u8005\u4ed6\u9700\u8981\u5904\u7406\u6f5c\u5728\u7684\u6210\u529f\u6216\u5931\u8d25\u3002 \u5728\u9002\u5f53\u7684\u573a\u666f\u4f7f\u7528 panic! \u548c Result \u5c06\u4f1a\u4f7f\u4f60\u7684\u4ee3\u7801\u5728\u9762\u5bf9\u4e0d\u53ef\u907f\u514d\u7684\u9519\u8bef\u65f6\u663e\u5f97\u66f4\u52a0\u53ef\u9760\u3002","title":"\u9519\u8bef\u5904\u7406"},{"location":"error-handing/#_1","text":"\u9519\u8bef\u662f\u8f6f\u4ef6\u4e2d\u4e0d\u53ef\u5426\u8ba4\u7684\u4e8b\u5b9e\uff0c\u6240\u4ee5 Rust \u6709\u4e00\u4e9b\u5904\u7406\u51fa\u9519\u60c5\u51b5\u7684\u7279\u6027\u3002 \u5728\u8bb8\u591a\u60c5\u51b5\u4e0b\uff0cRust \u8981\u6c42\u4f60\u627f\u8ba4\u9519\u8bef\u7684\u53ef\u80fd\u6027\uff0c\u5e76\u5728\u4ee3\u7801\u7f16\u8bd1\u524d\u91c7\u53d6\u4e00\u4e9b\u884c\u52a8\u3002 \u8fd9\u4e00\u8981\u6c42\u4f7f\u4f60\u7684\u7a0b\u5e8f\u66f4\u52a0\u5065\u58ee\uff0c\u56e0\u4e3a\u5b83\u53ef\u4ee5\u786e\u4fdd\u4f60\u5728\u5c06\u4ee3\u7801\u90e8\u7f72\u5230\u751f\u4ea7\u73af\u5883\u4e4b\u524d\u5c31\u80fd\u53d1\u73b0\u9519\u8bef\u5e76\u8fdb\u884c\u9002\u5f53\u7684\u5904\u7406\u3002 Rust \u5c06\u9519\u8bef\u5206\u4e3a\u4e24\u5927\u7c7b\uff1a \u53ef\u6062\u590d\u7684 \uff08recoverable\uff09\u548c \u4e0d\u53ef\u6062\u590d\u7684 \uff08unrecoverable\uff09\u9519\u8bef\u3002\u5bf9\u4e8e\u4e00\u4e2a\u53ef\u6062\u590d\u7684\u9519\u8bef\uff0c\u6bd4\u5982\u6587\u4ef6\u672a\u627e\u5230\u7684\u9519\u8bef\uff0c\u5f88\u53ef\u80fd\u53ea\u60f3\u5411\u7528\u6237\u62a5\u544a\u95ee\u9898\u5e76\u91cd\u8bd5\u64cd\u4f5c\u3002\u4e0d\u53ef\u6062\u590d\u7684\u9519\u8bef\u603b\u662f bug \u51fa\u73b0\u7684\u5f81\u5146\uff0c\u6bd4\u5982\u8bd5\u56fe\u8bbf\u95ee\u4e00\u4e2a\u8d85\u8fc7\u6570\u7ec4\u672b\u7aef\u7684\u4f4d\u7f6e\uff0c\u56e0\u6b64\u6211\u4eec\u8981\u7acb\u5373\u505c\u6b62\u7a0b\u5e8f\u3002 \u5927\u591a\u6570\u8bed\u8a00\u5e76\u4e0d\u533a\u5206\u8fd9\u4e24\u79cd\u9519\u8bef\uff0c\u5e76\u91c7\u7528\u7c7b\u4f3c\u5f02\u5e38\u8fd9\u6837\u65b9\u5f0f\u7edf\u4e00\u5904\u7406\u4ed6\u4eec\u3002Rust \u6ca1\u6709\u5f02\u5e38\u3002\u76f8\u53cd\uff0c\u5b83\u6709 Result<T, E> \u7c7b\u578b\uff0c\u7528\u4e8e\u5904\u7406\u53ef\u6062\u590d\u7684\u9519\u8bef\uff0c\u8fd8\u6709 panic! \u5b8f\uff0c\u5728\u7a0b\u5e8f\u9047\u5230\u4e0d\u53ef\u6062\u590d\u7684\u9519\u8bef\u65f6\u505c\u6b62\u6267\u884c\u3002","title":"\u9519\u8bef\u5904\u7406"},{"location":"error-handing/#panic","text":"\u7a81\u7136\u6709\u4e00\u5929\uff0c\u4ee3\u7801\u51fa\u95ee\u9898\u4e86\uff0c\u800c\u4f60\u5bf9\u6b64\u675f\u624b\u65e0\u7b56\u3002\u5bf9\u4e8e\u8fd9\u79cd\u60c5\u51b5\uff0c Rust \u6709 panic! \u5b8f\u3002\u5f53\u6267\u884c\u8fd9\u4e2a\u5b8f\u65f6\uff0c\u7a0b\u5e8f\u4f1a \u6253\u5370\u51fa\u4e00\u4e2a\u9519\u8bef\u4fe1\u606f\uff0c\u5c55\u5f00\u5e76\u6e05\u7406\u6808\u6570\u636e \uff0c\u7136\u540e\u63a5\u7740\u9000\u51fa\u3002 \u51fa\u73b0\u8fd9\u79cd\u60c5\u51b5\u7684\u573a\u666f\u901a\u5e38\u662f\u68c0\u6d4b\u5230\u4e00\u4e9b\u7c7b\u578b\u7684 bug \uff0c\u800c\u4e14\u7a0b\u5e8f\u5458\u5e76\u4e0d\u6e05\u695a\u8be5\u5982\u4f55\u5904\u7406\u5b83\u3002 \u5bf9\u5e94 panic \u65f6\u7684\u6808\u5c55\u5f00\u6216\u7ec8\u6b62 \u5f53\u51fa\u73b0 panic \u65f6\uff0c\u7a0b\u5e8f\u9ed8\u8ba4\u4f1a\u5f00\u59cb \u5c55\u5f00 \uff08unwinding\uff09\uff0c\u8fd9\u610f\u5473\u7740 Rust \u4f1a\u56de\u6eaf\u6808\u5e76\u6e05\u7406\u5b83\u9047\u5230\u7684\u6bcf\u4e00\u4e2a\u51fd\u6570\u7684\u6570\u636e\uff0c\u4e0d\u8fc7\u8fd9\u4e2a\u56de\u6eaf\u5e76\u6e05\u7406\u7684\u8fc7\u7a0b\u6709\u5f88\u591a\u5de5\u4f5c\u3002 \u53e6\u4e00\u79cd\u9009\u62e9\u662f\u76f4\u63a5 \u7ec8\u6b62 \uff08abort\uff09\uff0c\u8fd9\u4f1a\u4e0d\u6e05\u7406\u6570\u636e\u5c31\u9000\u51fa\u7a0b\u5e8f\u3002\u90a3\u4e48\u7a0b\u5e8f\u6240\u4f7f\u7528\u7684\u5185\u5b58\u9700\u8981\u7531\u64cd\u4f5c\u7cfb\u7edf\u6765\u6e05\u7406\u3002 \u5982\u679c\u4f60\u9700\u8981\u9879\u76ee\u7684\u6700\u7ec8\u4e8c\u8fdb\u5236\u6587\u4ef6\u8d8a\u5c0f\u8d8a\u597d\uff0c panic \u65f6\u901a\u8fc7\u5728 Cargo.toml \u7684 [profile] \u90e8\u5206\u589e\u52a0 panic = 'abort' \uff0c\u53ef\u4ee5\u7531\u5c55\u5f00\u5207\u6362\u4e3a \u7ec8\u6b62 \u3002 \u4f8b\u5982\uff0c\u5982\u679c\u4f60\u60f3\u8981\u5728 release \u6a21\u5f0f\u4e2d panic \u65f6\u76f4\u63a5\u7ec8\u6b62\uff1a [profile.release] panic = 'abort' fn main () { // \u8c03\u7528 panic! panic! ( \"crash and burn\" ); } \u5c06\u4f1a\u51fa\u73b0\u7c7b\u4f3c\u8fd9\u6837\u7684\u8f93\u51fa\uff1a $ cargo run Compiling panic v0.1.0 ( file:///projects/panic ) Finished dev [ unoptimized + debuginfo ] target ( s ) in 0 .25s Running ` target/debug/panic ` thread 'main' panicked at 'crash and burn' , src/main.rs:2:5 note: run with ` RUST_BACKTRACE = 1 ` environment variable to display a backtrace # \u7b2c\u4e00\u884c\u663e\u793a\u4e86 panic \u63d0\u4f9b\u7684\u4fe1\u606f\u5e76\u6307\u660e\u4e86\u6e90\u7801\u4e2d panic \u51fa\u73b0\u7684\u4f4d\u7f6e\uff1asrc/main.rs:2:5 \u8868\u660e\u8fd9\u662f src/main.rs \u6587\u4ef6\u7684\u7b2c\u4e8c\u884c\u7b2c\u4e94\u4e2a\u5b57\u7b26\u3002 \u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u88ab\u6307\u660e\u7684\u90a3\u4e00\u884c\u662f\u6211\u4eec\u4ee3\u7801\u7684\u4e00\u90e8\u5206\uff0c\u800c\u4e14\u67e5\u770b\u8fd9\u4e00\u884c\u7684\u8bdd\u5c31\u4f1a\u53d1\u73b0 panic! \u5b8f\u7684\u8c03\u7528\u3002 \u5728\u5176\u4ed6\u60c5\u51b5\u4e0b\uff0c panic! \u53ef\u80fd\u4f1a\u51fa\u73b0\u5728\u6211\u4eec\u7684\u4ee3\u7801\u6240\u8c03\u7528\u7684\u4ee3\u7801\u4e2d\u3002 \u9519\u8bef\u4fe1\u606f\u62a5\u544a\u7684\u6587\u4ef6\u540d\u548c\u884c\u53f7\u53ef\u80fd\u6307\u5411\u522b\u4eba\u4ee3\u7801\u4e2d\u7684 panic! \u5b8f\u8c03\u7528\uff0c\u800c\u4e0d\u662f\u6211\u4eec\u4ee3\u7801\u4e2d\u6700\u7ec8\u5bfc\u81f4 panic! \u7684\u90a3\u4e00\u884c\u3002 \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 panic! \u88ab\u8c03\u7528\u7684\u51fd\u6570\u7684 backtrace \u6765\u5bfb\u627e\u4ee3\u7801\u4e2d\u51fa\u95ee\u9898\u7684\u5730\u65b9\u3002\u4e0b\u9762\u6211\u4eec\u4f1a\u8be6\u7ec6\u4ecb\u7ecd backtrace \u662f\u4ec0\u4e48\u3002","title":"\u4e0d\u53ef\u6062\u590d\u7684\u9519\u8bef(panic!)"},{"location":"error-handing/#panic-backtrace","text":"\u53e6\u4e00\u4e2a\u56e0\u4e3a\u4ee3\u7801\u4e2d\u7684 bug \u5f15\u8d77\u7684\u522b\u7684\u5e93\u4e2d panic! \u7684\u4f8b\u5b50\uff0c\u800c\u4e0d\u662f\u76f4\u63a5\u7684\u5b8f\u8c03\u7528. // \u5c1d\u8bd5\u8bbf\u95ee\u8d85\u8d8a vector \u7ed3\u5c3e\u7684\u5143\u7d20\uff0c\u8fd9\u4f1a\u9020\u6210 panic! fn main () { let v = vec! [ 1 , 2 , 3 ]; // \u5c1d\u8bd5\u8bbf\u95ee vector \u7684\u7b2c\u4e00\u767e\u4e2a\u5143\u7d20, \u5b9e\u9645\u53ea\u67093\u4e2a\u3002 // \u8fd9\u79cd\u60c5\u51b5\u4e0b Rust \u4f1a panic\u3002 v [ 99 ]; } C \u8bed\u8a00\u4e2d\uff0c\u5c1d\u8bd5\u8bfb\u53d6\u6570\u636e\u7ed3\u6784\u4e4b\u540e\u7684\u503c\u662f \u672a\u5b9a\u4e49\u884c\u4e3a \uff08undefined behavior\uff09\u3002 \u4f60 \u4f1a\u5f97\u5230\u4efb\u4f55\u5bf9\u5e94\u6570\u636e\u7ed3\u6784\u4e2d\u8fd9\u4e2a\u5143\u7d20\u7684\u5185\u5b58\u4f4d\u7f6e\u7684\u503c\uff0c\u751a\u81f3\u662f\u8fd9\u4e9b\u5185\u5b58\u5e76\u4e0d\u5c5e\u4e8e\u8fd9\u4e2a\u6570\u636e\u7ed3\u6784\u7684\u60c5\u51b5\u3002 \u8fd9\u88ab\u79f0\u4e3a \u7f13\u51b2\u533a\u6ea2\u51fa \uff08buffer overread\uff09\uff0c\u5e76\u53ef\u80fd\u4f1a\u5bfc\u81f4 \u5b89\u5168\u6f0f\u6d1e \uff0c\u6bd4\u5982\u653b\u51fb\u8005\u53ef\u4ee5\u50cf\u8fd9\u6837\u64cd\u4f5c\u7d22\u5f15\u6765\u8bfb\u53d6\u50a8\u5b58\u5728\u6570\u636e\u7ed3\u6784\u4e4b\u540e\u4e0d\u88ab\u5141\u8bb8\u7684\u6570\u636e\u3002 \u4e3a\u4e86\u4fdd\u62a4\u7a0b\u5e8f\u8fdc\u79bb\u8fd9\u7c7b\u6f0f\u6d1e\uff0c\u5982\u679c\u5c1d\u8bd5\u8bfb\u53d6\u4e00\u4e2a\u7d22\u5f15\u4e0d\u5b58\u5728\u7684\u5143\u7d20\uff0cRust \u4f1a\u505c\u6b62\u6267\u884c\u5e76\u62d2\u7edd\u7ee7\u7eed\u3002 # \u5c1d\u8bd5\u8fd0\u884c\u4e0a\u9762\u7684\u7a0b\u5e8f\u4f1a\u51fa\u73b0\u5982\u4e0b\uff1a $ cargo run Compiling panic v0.1.0 ( file:///projects/panic ) Finished dev [ unoptimized + debuginfo ] target ( s ) in 0 .27s Running ` target/debug/panic ` thread 'main' panicked at 'index out of bounds: the len is 3 but the index is 99' , src/main.rs:4:5 # \u9519\u8bef\u6307\u5411 main.rs \u7684\u7b2c 4 \u884c\uff0c note: run with ` RUST_BACKTRACE = 1 ` environment variable to display a backtrace # \u4e0b\u9762\u7684\u8bf4\u660e\uff08note\uff09\u884c\u63d0\u9192\u6211\u4eec\u53ef\u4ee5\u8bbe\u7f6e RUST_BACKTRACE \u73af\u5883\u53d8\u91cf\u6765\u5f97\u5230\u4e00\u4e2a backtrace\u3002 backtrace \u662f\u4e00\u4e2a\u6267\u884c\u5230\u76ee\u524d\u4f4d\u7f6e\u6240\u6709\u88ab\u8c03\u7528\u7684\u51fd\u6570\u7684\u5217\u8868\u3002Rust \u7684 backtrace \u8ddf\u5176\u4ed6\u8bed\u8a00\u4e2d\u7684\u4e00\u6837\uff1a \u9605\u8bfb backtrace \u7684\u5173\u952e\u662f\u4ece\u5934\u5f00\u59cb\u8bfb\u76f4\u5230\u53d1\u73b0\u4f60\u7f16\u5199\u7684\u6587\u4ef6\u3002 \u8fd9\u5c31\u662f\u95ee\u9898\u7684\u53d1\u6e90\u5730\u3002\u8fd9\u4e00\u884c\u5f80\u4e0a\u662f\u4f60\u7684\u4ee3\u7801\u6240\u8c03\u7528\u7684\u4ee3\u7801\uff1b\u5f80\u4e0b\u5219\u662f\u8c03\u7528\u4f60\u7684\u4ee3\u7801\u7684\u4ee3\u7801\u3002\u8fd9\u4e9b\u884c\u53ef\u80fd\u5305\u542b\u6838\u5fc3 Rust \u4ee3\u7801\uff0c\u6807\u51c6\u5e93\u4ee3\u7801\u6216\u7528\u5230\u7684 crate \u4ee3\u7801\u3002 \u5c06 RUST_BACKTRACE \u73af\u5883\u53d8\u91cf\u8bbe\u7f6e\u4e3a\u4efb\u4f55\u4e0d\u662f 0 \u7684\u503c\u6765\u83b7\u53d6 backtrace \u770b\u770b\u3002 $ RUST_BACKTRACE = 1 cargo run thread ' main ' panicked at ' index out of bounds : the len is 3 but the index is 99 ' , src / main . rs : 4 : 5 stack backtrace : 0 : rust_begin_unwind at / rustc / 7 eac88abb2e57e752f3302f02be5f3ce3d7adfb4 / library / std / src / panicking . rs : 483 1 : core :: panicking :: panic_fmt at / rustc / 7 eac88abb2e57e752f3302f02be5f3ce3d7adfb4 / library / core / src / panicking . rs : 85 2 : core :: panicking :: panic_bounds_check at / rustc / 7 eac88abb2e57e752f3302f02be5f3ce3d7adfb4 / library / core / src / panicking . rs : 62 3 : < usize as core :: slice :: index :: SliceIndex < [ T ] >> :: index at / rustc / 7 eac88abb2e57e752f3302f02be5f3ce3d7adfb4 / library / core / src / slice / index . rs : 255 4 : core :: slice :: index :: < impl core :: ops :: index :: Index < I > for [ T ] > :: index at / rustc / 7 eac88abb2e57e752f3302f02be5f3ce3d7adfb4 / library / core / src / slice / index . rs : 15 5 : < alloc :: vec :: Vec < T > as core :: ops :: index :: Index < I >> :: index at / rustc / 7 eac88abb2e57e752f3302f02be5f3ce3d7adfb4 / library / alloc / src / vec . rs : 1982 6 : panic :: main at . / src / main . rs : 4 7 : core :: ops :: function :: FnOnce :: call_once at / rustc / 7 eac88abb2e57e752f3302f02be5f3ce3d7adfb4 / library / core / src / ops / function . rs : 227 note : Some details are omitted , run with ` RUST_BACKTRACE = full ` for a verbose backtrace . \u8fd9\u91cc\u6709\u5927\u91cf\u7684\u8f93\u51fa\uff01 \u5b9e\u9645\u770b\u5230\u7684\u8f93\u51fa\u53ef\u80fd\u56e0\u4e0d\u540c\u7684\u64cd\u4f5c\u7cfb\u7edf\u548c Rust \u7248\u672c\u800c\u6709\u6240\u4e0d\u540c \u3002\u4e3a\u4e86\u83b7\u53d6\u5e26\u6709\u8fd9\u4e9b\u4fe1\u606f\u7684 backtrace \uff0c\u5fc5\u987b\u542f\u7528 debug \u6807\u8bc6\u3002\u5f53\u4e0d\u4f7f\u7528 --release \u53c2\u6570\u8fd0\u884c cargo build \u6216 cargo run \u65f6 debug \u6807\u8bc6\u4f1a\u9ed8\u8ba4\u542f\u7528\uff0c\u5c31\u50cf\u8fd9\u91cc\u4e00\u6837\u3002 \u793a\u4f8b\u7684\u8f93\u51fa\u4e2d\uff0cbacktrace \u7684 12 \u884c\u6307\u5411\u4e86\u6211\u4eec\u9879\u76ee\u4e2d\u9020\u6210\u95ee\u9898\u7684\u884c\uff1a src/main.rs \u7684\u7b2c 4 \u884c\u3002\u5982\u679c\u4e0d\u5e0c\u671b\u7a0b\u5e8f panic \uff0c\u7b2c\u4e00\u4e2a\u63d0\u5230\u6211\u4eec\u7f16\u5199\u7684\u4ee3\u7801\u884c\u7684\u4f4d\u7f6e\u662f\u4f60\u5e94\u8be5\u5f00\u59cb\u8c03\u67e5\u7684\uff0c\u4ee5\u4fbf\u67e5\u660e\u662f\u4ec0\u4e48\u503c\u5982\u4f55\u5728\u8fd9\u4e2a\u5730\u65b9\u5f15\u8d77\u4e86 panic \u3002 \u5728\u793a\u4f8b\u4e2d\uff0c\u6545\u610f\u7f16\u5199\u4f1a panic \u7684\u4ee3\u7801\u6765\u6f14\u793a\u5982\u4f55\u4f7f\u7528 backtrace \uff0c\u4fee\u590d\u8fd9\u4e2a panic \u7684\u65b9\u6cd5\u5c31\u662f\u4e0d\u8981\u5c1d\u8bd5\u5728\u4e00\u4e2a\u53ea\u5305\u542b\u4e09\u4e2a\u9879\u7684 vector \u4e2d\u8bf7\u6c42\u7d22\u5f15\u662f 100 \u7684\u5143\u7d20\u3002 \u5f53\u5c06\u6765\u4f60\u7684\u4ee3\u7801\u51fa\u73b0\u4e86 panic \uff0c\u4f60\u9700\u8981\u641e\u6e05\u695a\u5728\u8fd9\u7279\u5b9a\u7684\u573a\u666f\u4e0b\u4ee3\u7801\u4e2d\u6267\u884c\u4e86\u4ec0\u4e48\u64cd\u4f5c\u548c\u4ec0\u4e48\u503c\u5bfc\u81f4\u4e86 panic \uff0c\u4ee5\u53ca\u5e94\u5f53\u5982\u4f55\u5904\u7406\u624d\u80fd\u907f\u514d\u8fd9\u4e2a\u95ee\u9898\u3002","title":"\u4f7f\u7528 panic! \u7684 backtrace"},{"location":"error-handing/#result","text":"\u5927\u90e8\u5206\u9519\u8bef\u5e76\u6ca1\u6709\u4e25\u91cd\u5230\u9700\u8981\u7a0b\u5e8f\u5b8c\u5168\u505c\u6b62\u6267\u884c \u3002\u6709\u65f6\uff0c\u4e00\u4e2a\u51fd\u6570\u4f1a\u56e0\u4e3a\u4e00\u4e2a\u5bb9\u6613\u7406\u89e3\u5e76\u505a\u51fa\u53cd\u5e94\u7684\u539f\u56e0\u5931\u8d25\u3002 \u4f8b\u5982\uff0c\u5982\u679c\u56e0\u4e3a\u6253\u5f00\u4e00\u4e2a\u5e76\u4e0d\u5b58\u5728\u7684\u6587\u4ef6\u800c\u5931\u8d25\uff0c\u6b64\u65f6\u6211\u4eec\u53ef\u80fd\u60f3\u8981\u521b\u5efa\u8fd9\u4e2a\u6587\u4ef6\uff0c\u800c\u4e0d\u662f\u7ec8\u6b62\u8fdb\u7a0b\u3002 \u7b2c\u4e8c\u7ae0 \u201c \u4f7f\u7528 Result \u7c7b\u578b\u6765\u5904\u7406\u6f5c\u5728\u7684\u9519\u8bef \u201d \u90e8\u5206\u4e2d\u7684\u90a3\u4e2a Result \u679a\u4e3e\uff0c\u5b83\u5b9a\u4e49\u6709\u5982\u4e0b\u4e24\u4e2a\u6210\u5458\uff0c Ok \u548c Err \uff1a // T \u548c E \u662f\u6cdb\u578b\u7c7b\u578b\u53c2\u6570 enum Result < T , E > { Ok ( T ), // T \u4ee3\u8868\u6210\u529f\u65f6\u8fd4\u56de\u7684 Ok \u6210\u5458\u4e2d\u7684\u6570\u636e\u7684\u7c7b\u578b\uff0c Err ( E ), // \u800c E \u4ee3\u8868\u5931\u8d25\u65f6\u8fd4\u56de\u7684 Err \u6210\u5458\u4e2d\u7684\u9519\u8bef\u7684\u7c7b\u578b\u3002 } \u56e0\u4e3a Result \u6709\u8fd9\u4e9b\u6cdb\u578b\u7c7b\u578b\u53c2\u6570\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06 Result \u7c7b\u578b\u548c\u6807\u51c6\u5e93\u4e2d\u4e3a\u5176\u5b9a\u4e49\u7684\u51fd\u6570\u7528\u4e8e\u5f88\u591a\u4e0d\u540c\u7684\u573a\u666f\uff0c\u8fd9\u4e9b\u60c5\u51b5\u4e2d\u9700\u8981\u8fd4\u56de\u7684\u6210\u529f\u503c\u548c\u5931\u8d25\u503c\u53ef\u80fd\u4f1a\u5404\u4e0d\u76f8\u540c\u3002 \u8c03\u7528\u4e00\u4e2a\u8fd4\u56de Result \u7684\u51fd\u6570\uff0c\u56e0\u4e3a\u5b83\u53ef\u80fd\u4f1a\u5931\u8d25\uff1a use std :: fs :: File ; fn main () { // \u6253\u5f00\u6587\u4ef6 let f = File :: open ( \"hello.txt\" ); } \u5982\u4f55\u77e5\u9053 File::open \u8fd4\u56de\u4e00\u4e2a Result \u5462\uff1f\u6211\u4eec\u53ef\u4ee5\u67e5\u770b \u6807\u51c6\u5e93 API \u6587\u6863\uff0c\u6216\u8005\u53ef\u4ee5\u76f4\u63a5\u95ee\u7f16\u8bd1\u5668\uff01 \u5982\u679c\u7ed9 f \u67d0\u4e2a\u6211\u4eec\u77e5\u9053 \u4e0d\u662f \u51fd\u6570\u8fd4\u56de\u503c\u7c7b\u578b\u7684\u7c7b\u578b\u6ce8\u89e3\uff0c\u63a5\u7740\u5c1d\u8bd5\u7f16\u8bd1\u4ee3\u7801\uff0c\u7f16\u8bd1\u5668\u4f1a\u544a\u8bc9\u6211\u4eec\u7c7b\u578b\u4e0d\u5339\u914d\u3002 \u7136\u540e\u9519\u8bef\u4fe1\u606f\u4f1a\u544a\u8bc9\u6211\u4eec f \u7684\u7c7b\u578b \u5e94\u8be5 \u662f\u4ec0\u4e48\u3002 \u8bd5\u8bd5\uff01\u77e5\u9053 File::open \u7684\u8fd4\u56de\u503c\u4e0d\u662f u32 \u7c7b\u578b\u7684\uff0c\u6240\u4ee5\u5c06 let f \u8bed\u53e5\u6539\u4e3a\u5982\u4e0b\uff1a let f : u32 = File :: open ( \"hello.txt\" ); $ cargo run Compiling error-handling v0.1.0 ( file:///projects/error-handling ) error [ E0308 ] : mismatched types --> src/main.rs:4:18 | 4 | let f: u32 = File::open ( \"hello.txt\" ) ; | --- ^^^^^^^^^^^^^^^^^^^^^^^ expected ` u32 ` , found enum ` Result ` | | | expected due to this | = note: expected type ` u32 ` found enum ` Result<File, std::io::Error> ` For more information about this error, try ` rustc --explain E0308 ` . error: could not compile ` error-handling ` due to previous error \u8fd9\u5c31\u544a\u8bc9\u6211\u4eec\u4e86 File::open \u51fd\u6570\u7684\u8fd4\u56de\u503c\u7c7b\u578b\u662f Result<T, E> \u3002\u8fd9\u91cc\u6cdb\u578b\u53c2\u6570 T \u653e\u5165\u4e86\u6210\u529f\u503c\u7684\u7c7b\u578b std::fs::File \uff0c\u5b83\u662f\u4e00\u4e2a\u6587\u4ef6\u53e5\u67c4\u3002 E \u88ab\u7528\u5728\u5931\u8d25\u503c\u4e0a\u65f6 E \u7684\u7c7b\u578b\u662f std::io::Error \u3002 \u8fd9\u4e2a\u8fd4\u56de\u503c\u7c7b\u578b\u8bf4\u660e File::open \u8c03\u7528\u53ef\u80fd\u4f1a\u6210\u529f\u5e76\u8fd4\u56de\u4e00\u4e2a\u53ef\u4ee5\u8fdb\u884c\u8bfb\u5199\u7684\u6587\u4ef6\u53e5\u67c4\u3002 \u8fd9\u4e2a\u51fd\u6570\u4e5f\u53ef\u80fd\u4f1a\u5931\u8d25\uff1a\u4f8b\u5982\uff0c\u6587\u4ef6\u53ef\u80fd\u5e76\u4e0d\u5b58\u5728\uff0c\u6216\u8005\u53ef\u80fd\u6ca1\u6709\u8bbf\u95ee\u6587\u4ef6\u7684\u6743\u9650\u3002 File::open \u9700\u8981\u4e00\u4e2a\u65b9\u5f0f\u544a\u8bc9\u6211\u4eec\u662f\u6210\u529f\u8fd8\u662f\u5931\u8d25\uff0c\u5e76\u540c\u65f6\u63d0\u4f9b\u7ed9\u6211\u4eec\u6587\u4ef6\u53e5\u67c4\u6216\u9519\u8bef\u4fe1\u606f\u3002\u800c\u8fd9\u4e9b\u4fe1\u606f\u6b63\u662f Result \u679a\u4e3e\u53ef\u4ee5\u63d0\u4f9b\u7684\u3002 \u5f53 File::open \u6210\u529f\u7684\u60c5\u51b5\u4e0b\uff0c\u53d8\u91cf f \u7684\u503c\u5c06\u4f1a\u662f\u4e00\u4e2a\u5305\u542b\u6587\u4ef6\u53e5\u67c4\u7684 Ok \u5b9e\u4f8b\u3002\u5728\u5931\u8d25\u7684\u60c5\u51b5\u4e0b\uff0c f \u7684\u503c\u4f1a\u662f\u4e00\u4e2a\u5305\u542b\u66f4\u591a\u5173\u4e8e\u51fa\u73b0\u4e86\u4f55\u79cd\u9519\u8bef\u4fe1\u606f\u7684 Err \u5b9e\u4f8b\u3002 \u9700\u8981\u5728\u793a\u4f8b\u7684\u4ee3\u7801\u4e2d\u589e\u52a0\u6839\u636e File::open \u8fd4\u56de\u503c\u8fdb\u884c\u4e0d\u540c\u5904\u7406\u7684\u903b\u8f91\u3002\u4e0b\u9762\u793a\u4f8b\u5c55\u793a\u4e86\u4e00\u4e2a\u4f7f\u7528\u57fa\u672c\u5de5\u5177\u5904\u7406 Result \u7684\u4f8b\u5b50\uff1a\u7b2c\u516d\u7ae0\u5b66\u4e60\u8fc7\u7684 match \u8868\u8fbe\u5f0f\u3002 use std :: fs :: File ; fn main () { let f = File :: open ( \"hello.txt\" ); let f = match f { Ok ( file ) => file , // \u8fd9\u91cc\u544a\u8bc9 Rust \u5f53\u7ed3\u679c\u662f Ok \u65f6\uff0c\u8fd4\u56de Ok \u6210\u5458\u4e2d\u7684 file \u503c\uff0c\u7136\u540e\u5c06\u8fd9\u4e2a\u6587\u4ef6\u53e5\u67c4\u8d4b\u503c\u7ed9\u53d8\u91cf f\u3002 // match \u4e4b\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u8fd9\u4e2a\u6587\u4ef6\u53e5\u67c4\u6765\u8fdb\u884c\u8bfb\u5199\u3002 Err ( error ) => panic! ( \"Problem opening the file: {:?}\" , error ), // match \u7684\u53e6\u4e00\u4e2a\u5206\u652f\u5904\u7406\u4ece File::open \u5f97\u5230 Err \u503c\u7684\u60c5\u51b5\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u9009\u62e9\u8c03\u7528 panic! \u5b8f\u3002 }; } \u6ce8\u610f\u4e0e Option \u679a\u4e3e\u4e00\u6837\uff0c Result \u679a\u4e3e\u548c\u5176\u6210\u5458\u4e5f\u88ab\u5bfc\u5165\u5230\u4e86 prelude \u4e2d\uff0c\u6240\u4ee5\u5c31\u4e0d\u9700\u8981\u5728 match \u5206\u652f\u4e2d\u7684 Ok \u548c Err \u4e4b\u524d\u6307\u5b9a Result:: \u3002 \u5982\u679c\u5f53\u524d\u76ee\u5f55\u6ca1\u6709\u4e00\u4e2a\u53eb\u505a hello.txt \u7684\u6587\u4ef6\uff0c\u5f53\u8fd0\u884c\u8fd9\u6bb5\u4ee3\u7801\u65f6\u4f1a\u770b\u5230\u5982\u4e0b\u6765\u81ea panic! \u5b8f\u7684\u8f93\u51fa\uff1a $ cargo run Compiling error - handling v0 . 1.0 ( file : ///projects/error-handling) Finished dev [ unoptimized + debuginfo ] target ( s ) in 0.73 s Running ` target / debug / error - handling ` thread ' main ' panicked at ' Problem opening the file : Os { code : 2 , kind : NotFound , message : \"No such file or directory\" } ' , src / main . rs : 8 : 23 note : run with ` RUST_BACKTRACE = 1 ` environment variable to display a backtrace","title":"\u53ef\u6062\u590d\u7684\u9519\u8bef(Result)"},{"location":"error-handing/#_2","text":"\u793a\u4f8b\u4e2d\u7684\u4ee3\u7801\u4e0d\u7ba1 File::open \u662f\u56e0\u4e3a\u4ec0\u4e48\u539f\u56e0\u5931\u8d25\u90fd\u4f1a panic! \u3002 \u6211\u4eec\u771f\u6b63\u5e0c\u671b\u7684\u662f\u5bf9\u4e0d\u540c\u7684\u9519\u8bef\u539f\u56e0\u91c7\u53d6\u4e0d\u540c\u7684\u884c\u4e3a\uff1a \u5982\u679c File::open \u56e0\u4e3a\u6587\u4ef6\u4e0d\u5b58\u5728\u800c\u5931\u8d25\uff0c\u6211\u4eec\u5e0c\u671b\u521b\u5efa\u8fd9\u4e2a\u6587\u4ef6\u5e76\u8fd4\u56de\u65b0\u6587\u4ef6\u7684\u53e5\u67c4\u3002 \u5982\u679c File::open \u56e0\u4e3a\u4efb\u4f55\u5176\u4ed6\u539f\u56e0\u5931\u8d25\uff0c\u4f8b\u5982\u6ca1\u6709\u6253\u5f00\u6587\u4ef6\u7684\u6743\u9650\uff0c\u6211\u4eec\u4ecd\u7136\u5e0c\u671b\u50cf\u793a\u4f8b\u90a3\u6837 panic! \u3002 \u8ba9\u6211\u4eec\u770b\u770b\u4e0b\u9762\u7684\u793a\u4f8b\uff0c\u5176\u4e2d match \u589e\u52a0\u4e86\u53e6\u4e00\u4e2a\u5206\u652f\uff1a // \u4f7f\u7528\u4e0d\u540c\u7684\u65b9\u5f0f\u5904\u7406\u4e0d\u540c\u7c7b\u578b\u7684\u9519\u8bef use std :: fs :: File ; use std :: io :: ErrorKind ; fn main () { let f = File :: open ( \"hello.txt\" ); let f = match f { Ok ( file ) => file , // File::open \u8fd4\u56de\u7684 Err \u6210\u5458\u4e2d\u7684\u503c\u7c7b\u578b io::Error\uff0c\u5b83\u662f\u4e00\u4e2a\u6807\u51c6\u5e93\u4e2d\u63d0\u4f9b\u7684\u7ed3\u6784\u4f53\u3002 // \u8fd9\u4e2a\u7ed3\u6784\u4f53\u6709\u4e00\u4e2a\u8fd4\u56de io::ErrorKind \u503c\u7684 kind \u65b9\u6cd5\u53ef\u4f9b\u8c03\u7528\u3002 // io::ErrorKind \u662f\u4e00\u4e2a\u6807\u51c6\u5e93\u63d0\u4f9b\u7684\u679a\u4e3e\uff0c\u5b83\u7684\u6210\u5458\u5bf9\u5e94 io \u64cd\u4f5c\u53ef\u80fd\u5bfc\u81f4\u7684\u4e0d\u540c\u9519\u8bef\u7c7b\u578b\u3002 // \u6211\u4eec\u611f\u5174\u8da3\u7684\u6210\u5458\u662f ErrorKind::NotFound\uff0c\u5b83\u4ee3\u8868\u5c1d\u8bd5\u6253\u5f00\u7684\u6587\u4ef6\u5e76\u4e0d\u5b58\u5728\u3002 Err ( err ) => match err . kind () { // \u5982\u679c error.kind() \u7684\u8fd4\u56de\u503c\u4e3a ErrorKind\u7684 NotFound \u6210\u5458\u3002 // \u5219\u5c1d\u8bd5\u901a\u8fc7 File::create \u521b\u5efa\u6587\u4ef6\u3002 ErrorKind :: NotFound => match File :: create ( \"hello.txt\" ) { Ok ( file ) => file , // \u7136\u800c\u56e0\u4e3a File::create \u4e5f\u53ef\u80fd\u4f1a\u5931\u8d25\uff0c\u8fd8\u9700\u8981\u589e\u52a0\u4e00\u4e2a\u5185\u5c42 match \u8bed\u53e5\u3002 // \u5f53\u6587\u4ef6\u4e0d\u80fd\u88ab\u6253\u5f00\uff0c\u4f1a\u6253\u5370\u51fa\u4e00\u4e2a\u4e0d\u540c\u7684\u9519\u8bef\u4fe1\u606f\u3002 Err ( e ) => panic! ( \"\u521b\u5efa\u6587\u4ef6\u5931\u8d25: {:?}\" , e ), }, // \u5916\u5c42 match \u7684\u6700\u540e\u4e00\u4e2a\u5206\u652f\u4fdd\u6301\u4e0d\u53d8\uff0c\u8fd9\u6837\u5bf9\u4efb\u4f55\u9664\u4e86\u6587\u4ef6\u4e0d\u5b58\u5728\u7684\u9519\u8bef\u4f1a\u4f7f\u7a0b\u5e8f panic\u3002 other_error => { panic! ( \"\u6253\u5f00\u6587\u4ef6\u5931\u8d25: {:?}\" , other_error ) } }, }; } \u4e0d\u540c\u4e8e\u4f7f\u7528 match \u548c Result<T, E> \u8fd9\u91cc\u6709\u597d\u591a match\uff01match \u786e\u5b9e\u5f88\u5f3a\u5927\uff0c\u4e0d\u8fc7\u4e5f\u975e\u5e38\u7684\u57fa\u7840\u3002\u7b2c\u5341\u4e09\u7ae0\u6211\u4eec\u4f1a\u4ecb\u7ecd\u95ed\u5305\uff08closure\uff09\uff0c\u8fd9\u53ef\u4ee5\u7528\u4e8e\u5f88\u591a Result \u4e0a\u5b9a\u4e49\u7684\u65b9\u6cd5\u3002\u5728\u5904\u7406\u4ee3\u7801\u4e2d\u7684 Result \u503c\u65f6\u8fd9\u4e9b\u65b9\u6cd5\u53ef\u80fd\u4f1a\u66f4\u52a0\u7b80\u6d01\u3002 \u4f8b\u5982\uff0c\u8fd9\u662f\u53e6\u4e00\u4e2a\u7f16\u5199\u4e0e\u793a\u4f8b 9-5 \u903b\u8f91\u76f8\u540c\u4f46\u662f\u4f7f\u7528\u95ed\u5305\u548c unwrap_or_else \u65b9\u6cd5\u7684\u4f8b\u5b50\uff1a use std :: fs :: File ; use std :: io :: ErrorKind ; fn main () { let f = File :: open ( \"hello.txt\" ). unwrap_or_else ( | error | { if error . kind () == ErrorKind :: NotFound { File :: create ( \"hello.txt\" ). unwrap_or_else ( | error | { panic! ( \"\u521b\u5efa\u6587\u4ef6\u5931\u8d25: {:?}\" , error ); }) } else { panic! ( \"\u6253\u5f00\u6587\u4ef6\u5931\u8d25: {:?}\" , error ); } }); } \u867d\u7136\u8fd9\u6bb5\u4ee3\u7801\u6709\u7740\u5982\u4e0a\u9762\u793a\u4f8b\u4e2d\u4e00\u6837\u7684\u884c\u4e3a\uff0c\u4f46\u5e76\u6ca1\u6709\u5305\u542b\u4efb\u4f55 match \u8868\u8fbe\u5f0f\u4e14\u66f4\u5bb9\u6613\u9605\u8bfb\u3002\u5728\u9605\u8bfb\u5b8c\u7b2c\u5341\u4e09\u7ae0\u540e\u518d\u56de\u5230\u8fd9\u4e2a\u4f8b\u5b50\uff0c\u5e76\u67e5\u770b\u6807\u51c6\u5e93\u6587\u6863 unwrap_or_else \u65b9\u6cd5\u90fd\u505a\u4e86\u4ec0\u4e48\u64cd\u4f5c\u3002\u5728\u5904\u7406\u9519\u8bef\u65f6\uff0c\u8fd8\u6709\u5f88\u591a\u8fd9\u7c7b\u65b9\u6cd5\u53ef\u4ee5\u6d88\u9664\u5927\u91cf\u5d4c\u5957\u7684 match \u8868\u8fbe\u5f0f\u3002","title":"\u5339\u914d\u4e0d\u540c\u7684\u9519\u8bef"},{"location":"error-handing/#unwrap-expect","text":"match \u80fd\u591f\u80dc\u4efb\u5b83\u7684\u5de5\u4f5c\uff0c\u4e0d\u8fc7\u5b83\u53ef\u80fd\u6709\u70b9\u5197\u957f\u5e76\u4e14\u4e0d\u603b\u662f\u80fd\u5f88\u597d\u7684\u8868\u660e\u5176\u610f\u56fe\u3002 Result<T, E> \u7c7b\u578b\u5b9a\u4e49\u4e86\u5f88\u591a\u8f85\u52a9\u65b9\u6cd5\u6765\u5904\u7406\u5404\u79cd\u60c5\u51b5\u3002 \u5176\u4e2d\u4e4b\u4e00\u53eb\u505a unwrap \uff0c\u5b83\u7684\u5b9e\u73b0\u5c31\u7c7b\u4f3c\u4e8e\u4e0a\u9762\u793a\u4f8b\u4e2d\u7684 match \u8bed\u53e5\u3002 \u5982\u679c Result \u503c\u662f\u6210\u5458 Ok \uff0c unwrap \u4f1a\u8fd4\u56de Ok \u4e2d\u7684\u503c\u3002 \u5982\u679c Result \u503c\u662f\u6210\u5458 Err \uff0c unwrap \u4f1a\u4e3a\u6211\u4eec\u8c03\u7528 panic! \u3002 \u8fd9\u91cc\u662f\u4e00\u4e2a\u5b9e\u8df5 unwrap \u7684\u4f8b\u5b50\uff1a use std :: fs :: File ; fn main () { // `unwrap` **\u8c03\u7528** `panic!` // \u4f7f\u7528\u9ed8\u8ba4\u7684 panic! \u4fe1\u606f\u3002 let f = File :: open ( \"hello.txt\" ). unwrap (); } \u5982\u679c\u8c03\u7528\u8fd9\u6bb5\u4ee3\u7801\u65f6\u4e0d\u5b58\u5728 hello.txt \u6587\u4ef6\uff0c\u6211\u4eec\u5c06\u4f1a\u770b\u5230\u4e00\u4e2a unwrap \u8c03\u7528 panic! \u65f6\u63d0\u4f9b\u7684\u9519\u8bef\u4fe1\u606f\uff1a thread ' main ' panicked at ' called ` Result :: unwrap () ` on an ` Err ` value : Error { repr : Os { code : 2 , message : \"No such file or directory\" } } ' , src / libcore / result . rs : 906 : 4 \u8fd8\u6709\u53e6\u4e00\u4e2a\u7c7b\u4f3c\u4e8e unwrap \u7684\u65b9\u6cd5\u5b83\u8fd8\u5141\u8bb8\u6211\u4eec\u9009\u62e9 panic! \u7684\u9519\u8bef\u4fe1\u606f\uff1a expect \u3002 \u4f7f\u7528 expect \u800c\u4e0d\u662f unwrap \u5e76\u63d0\u4f9b\u4e00\u4e2a\u597d\u7684\u9519\u8bef\u4fe1\u606f\u53ef\u4ee5\u8868\u660e\u4f60\u7684\u610f\u56fe\u5e76\u66f4\u6613\u4e8e\u8ffd\u8e2a panic \u7684\u6839\u6e90\u3002 expect \u7684\u8bed\u6cd5\u770b\u8d77\u6765\u50cf\u8fd9\u6837\uff1a use std :: fs :: File ; fn main () { // \u8fd4\u56de\u6587\u4ef6\u53e5\u67c4\u6216\u8c03\u7528 panic! \u5b8f // expect \u5728\u8c03\u7528 panic! \u65f6\u4f7f\u7528\u7684\u9519\u8bef\u4fe1\u606f\u5c06\u662f\u4f20\u9012\u7ed9 expect \u7684\u53c2\u6570\uff0c // \u800c\u4e0d\u50cf unwrap \u90a3\u6837\u4f7f\u7528\u9ed8\u8ba4\u7684 panic! \u4fe1\u606f\u3002 let f = File :: open ( \"hello.txt\" ). expect ( \"Failed to open hello.txt\" ); } expect \u4e0e unwrap \u7684\u4f7f\u7528\u65b9\u5f0f\u4e00\u6837\uff1a\u8fd4\u56de\u6587\u4ef6\u53e5\u67c4\u6216\u8c03\u7528 panic! \u5b8f\u3002 expect \u5728\u8c03\u7528 panic! \u65f6\u4f7f\u7528\u7684\u9519\u8bef\u4fe1\u606f\u5c06\u662f\u6211\u4eec\u4f20\u9012\u7ed9 expect \u7684\u53c2\u6570\uff0c\u800c\u4e0d\u50cf unwrap \u90a3\u6837\u4f7f\u7528\u9ed8\u8ba4\u7684 panic! \u4fe1\u606f\u3002 \u5b83\u770b\u8d77\u6765\u50cf\u8fd9\u6837\uff1a thread ' main ' panicked at ' Failed to open hello . txt : Error { repr : Os { code : 2 , message : \"No such file or directory\" } } ' , src / libcore / result . rs : 906 : 4 \u56e0\u4e3a\u8fd9\u4e2a\u9519\u8bef\u4fe1\u606f\u4ee5\u6307\u5b9a\u7684\u6587\u672c\u5f00\u59cb\uff0c Failed to open hello.txt \uff0c\u5c06\u4f1a\u66f4\u5bb9\u6613\u627e\u5230\u4ee3\u7801\u4e2d\u7684\u9519\u8bef\u4fe1\u606f\u6765\u81ea\u4f55\u5904\u3002 \u5982\u679c\u5728\u591a\u5904\u4f7f\u7528 unwrap \uff0c\u5219\u9700\u8981\u82b1\u66f4\u591a\u7684\u65f6\u95f4\u6765\u5206\u6790\u5230\u5e95\u662f\u54ea\u4e00\u4e2a unwrap \u9020\u6210\u4e86 panic \uff0c\u56e0\u4e3a\u6240\u6709\u7684 unwrap \u8c03\u7528\u90fd\u6253\u5370\u76f8\u540c\u7684\u4fe1\u606f\u3002","title":"unwrap \u548c expect"},{"location":"error-handing/#_3","text":"\u5f53\u7f16\u5199\u4e00\u4e2a\u5176\u5b9e\u5148\u4f1a\u8c03\u7528\u4e00\u4e9b\u53ef\u80fd\u4f1a\u5931\u8d25\u7684\u64cd\u4f5c\u7684\u51fd\u6570\u65f6\uff0c\u9664\u4e86\u5728\u8fd9\u4e2a\u51fd\u6570\u4e2d\u5904\u7406\u9519\u8bef\u5916\uff0c\u8fd8\u53ef\u4ee5\u9009\u62e9\u8ba9\u8c03\u7528\u8005\u77e5\u9053\u8fd9\u4e2a\u9519\u8bef\u5e76\u51b3\u5b9a\u8be5\u5982\u4f55\u5904\u7406\u3002 \u8fd9\u88ab\u79f0\u4e3a \u4f20\u64ad \uff08propagating\uff09\u9519\u8bef\uff0c\u8fd9\u6837\u80fd\u66f4\u597d\u7684\u63a7\u5236\u4ee3\u7801\u8c03\u7528\uff0c\u56e0\u4e3a\u6bd4\u8d77\u4f60\u4ee3\u7801\u6240\u62e5\u6709\u7684\u4e0a\u4e0b\u6587\uff0c\u8c03\u7528\u8005\u53ef\u80fd\u62e5\u6709\u66f4\u591a\u4fe1\u606f\u6216\u903b\u8f91\u6765\u51b3\u5b9a\u5e94\u8be5\u5982\u4f55\u5904\u7406\u9519\u8bef\u3002 \u4f8b\u5982\uff0c\u4e0b\u9762\u5c55\u793a\u4e86\u4e00\u4e2a\u4ece\u6587\u4ef6\u4e2d\u8bfb\u53d6\u7528\u6237\u540d\u7684\u51fd\u6570\u3002\u5982\u679c\u6587\u4ef6\u4e0d\u5b58\u5728\u6216\u4e0d\u80fd\u8bfb\u53d6\uff0c\u8fd9\u4e2a\u51fd\u6570\u4f1a\u5c06\u8fd9\u4e9b\u9519\u8bef\u8fd4\u56de\u7ed9\u8c03\u7528\u5b83\u7684\u4ee3\u7801\uff1a // \u4e00\u4e2a\u51fd\u6570\u4f7f\u7528 match \u5c06\u9519\u8bef\u8fd4\u56de\u7ed9\u4ee3\u7801\u8c03\u7528\u8005 use std :: fs :: File ; use std :: io :: { self , Read }; // \u51fd\u6570\u8fd4\u56de\u4e00\u4e2a Result<T, E> \u7c7b\u578b\u7684\u503c\uff0c\u5176\u4e2d\u6cdb\u578b\u53c2\u6570 T \u7684\u5177\u4f53\u7c7b\u578b\u662f String\uff0c\u800c E \u7684\u5177\u4f53\u7c7b\u578b\u662f io::Error\u3002 // \u5982\u679c\u8fd9\u4e2a\u51fd\u6570\u6ca1\u6709\u51fa\u4efb\u4f55\u9519\u8bef\u6210\u529f\u8fd4\u56de\uff0c\u51fd\u6570\u7684\u8c03\u7528\u8005\u4f1a\u6536\u5230\u4e00\u4e2a\u5305\u542b String \u7684 Ok \u503c \u2014\u2014 \u51fd\u6570\u4ece\u6587\u4ef6\u4e2d\u8bfb\u53d6\u5230\u7684\u7528\u6237\u540d\u3002 // \u5982\u679c\u51fd\u6570\u9047\u5230\u4efb\u4f55\u9519\u8bef\uff0c\u51fd\u6570\u7684\u8c03\u7528\u8005\u4f1a\u6536\u5230\u4e00\u4e2a Err \u503c\uff0c\u5b83\u50a8\u5b58\u4e86\u4e00\u4e2a\u5305\u542b\u66f4\u591a\u8fd9\u4e2a\u95ee\u9898\u76f8\u5173\u4fe1\u606f\u7684 io::Error \u5b9e\u4f8b\u3002 // \u8fd9\u91cc\u9009\u62e9 io::Error \u4f5c\u4e3a\u51fd\u6570\u7684\u8fd4\u56de\u503c, \u5219\u662f\u56e0\u4e3a\u5b83\u6b63\u597d\u662f\u51fd\u6570\u4f53\u4e2d\uff1aFile::open \u51fd\u6570\u548c read_to_string \u65b9\u6cd5\u53ef\u80fd\u4f1a\u64cd\u4f5c\u5931\u8d25\u7684\u7684\u9519\u8bef\u8fd4\u56de\u503c\u3002 fn read_username_from_file () -> Result < String , io :: Error > { let f = File :: open ( \"hello.txt\" ); let mut f = match f { Ok ( file ) => file , // \u6253\u5f00\u6587\u4ef6\u6210\u529f\u65f6\uff0c\u76f4\u63a5\u8fd4\u56de\u6587\u4ef6\u53e5\u67c4 Err ( e ) => return Err ( e ), // \u6253\u5f00\u6587\u4ef6\u9519\u8bef\u662f\uff0c\u76f4\u63a5Return\u6210Result\u7684Error\u679a\u4e3e\u3002 }; let mut s = String :: new (); // \u521b\u5efa\u5b57\u7b26\u4e32\u4fdd\u5b58\u8bfb\u53d6\u7684\u503c\u3002 // match\u7ed3\u679c\u503c\u5c06\u8fd4\u56de, OK\u503c\u6216Err\u503c match f . read_to_string ( & mut s ) { Ok ( _ ) => Ok ( s ), // \u5c06\u8bfb\u53d6\u5230\u7684\u5b57\u7b26\u4e32\u4f5c\u4e3aResult\u7684OK\u4e2d\u7684\u503c\u3002 Err ( e ) => Err ( e ), // \u5c06Error\u503c\u4f5c\u4e3aResult\u7684Err\u4e2d\u7684\u503c\u3002 // \u4e0d\u9700\u8981\u663e\u5f0f\u7684\u8c03\u7528 return\uff0c\u56e0\u4e3a\u8fd9\u662f\u51fd\u6570\u7684\u6700\u540e\u4e00\u4e2a\u8868\u8fbe\u5f0f\u3002 } } \u8c03\u7528\u8fd9\u4e2a\u51fd\u6570\u7684\u4ee3\u7801\u6700\u7ec8\u4f1a\u5f97\u5230\u4e00\u4e2a\u5305\u542b\u7528\u6237\u540d\u7684 Ok \u503c\uff0c\u6216\u8005\u4e00\u4e2a\u5305\u542b io::Error \u7684 Err \u503c\u3002 \u6211\u4eec\u65e0\u4ece\u5f97\u77e5\u8c03\u7528\u8005\u4f1a\u5982\u4f55\u5904\u7406\u8fd9\u4e9b\u503c\u3002 \u4f8b\u5982\uff0c\u5982\u679c\u4ed6\u4eec\u5f97\u5230\u4e86\u4e00\u4e2a Err \u503c\uff0c\u4ed6\u4eec\u53ef\u80fd\u4f1a\u9009\u62e9 panic! \u5e76\u4f7f\u7a0b\u5e8f\u5d29\u6e83\u3001\u4f7f\u7528\u4e00\u4e2a\u9ed8\u8ba4\u7684\u7528\u6237\u540d\u6216\u8005\u4ece\u6587\u4ef6\u4e4b\u5916\u7684\u5730\u65b9\u5bfb\u627e\u7528\u6237\u540d\u3002 \u6211\u4eec\u6ca1\u6709\u8db3\u591f\u7684\u4fe1\u606f\u77e5\u6653\u8c03\u7528\u8005\u5177\u4f53\u4f1a\u5982\u4f55\u5c1d\u8bd5\uff0c\u6240\u4ee5\u5c06\u6240\u6709\u7684\u6210\u529f\u6216\u5931\u8d25\u4fe1\u606f\u5411\u4e0a\u4f20\u64ad\uff0c\u8ba9\u4ed6\u4eec\u9009\u62e9\u5408\u9002\u7684\u5904\u7406\u65b9\u6cd5\u3002 \u8fd9\u79cd\u4f20\u64ad\u9519\u8bef\u7684\u6a21\u5f0f\u5728 Rust \u662f\u5982\u6b64\u7684\u5e38\u89c1\uff0c\u4ee5\u81f3\u4e8e Rust \u63d0\u4f9b\u4e86 ? \u95ee\u53f7\u8fd0\u7b97\u7b26\u6765\u4f7f\u5176\u66f4\u6613\u4e8e\u5904\u7406\u3002","title":"\u4f20\u64ad\u9519\u8bef"},{"location":"error-handing/#_4","text":"\u4e0b\u9762\u793a\u4f8b\u5c55\u793a\u4e86\u4e00\u4e2a read_username_from_file \u7684\u5b9e\u73b0\uff0c\u5b83\u5b9e\u73b0\u4e86\u4e0e\u4e0a\u4e2a\u793a\u4f8b\u4e2d\u7684\u4ee3\u7801\u76f8\u540c\u7684\u529f\u80fd\uff0c\u4e0d\u8fc7\u8fd9\u4e2a\u5b9e\u73b0\u4f7f\u7528\u4e86 ? \u8fd0\u7b97\u7b26\uff1a // \u4e00\u4e2a\u4f7f\u7528 ? \u8fd0\u7b97\u7b26\u5411\u8c03\u7528\u8005\u8fd4\u56de\u9519\u8bef\u7684\u51fd\u6570 use std :: fs :: File ; use std :: io ; use std :: io :: Read ; fn read_username_from_file () -> Result < String , io :: Error > { // \u5982\u679c Result \u7684\u503c\u662f Ok\uff0c\u8fd9\u4e2a\u8868\u8fbe\u5f0f\u5c06\u4f1a\u8fd4\u56de Ok \u4e2d\u7684\u503c\u800c\u7a0b\u5e8f\u5c06\u7ee7\u7eed\u6267\u884c\u3002 // \u5982\u679c\u503c\u662f Err\uff0cErr \u4e2d\u7684\u503c\u5c06\u4f5c\u4e3a\u6574\u4e2a\u51fd\u6570\u7684\u8fd4\u56de\u503c\uff0c\u5c31\u597d\u50cf\u4f7f\u7528\u4e86 return \u5173\u952e\u5b57\u4e00\u6837\uff0c\u8fd9\u6837\u9519\u8bef\u503c\u5c31\u88ab\u4f20\u64ad\u7ed9\u4e86\u8c03\u7528\u8005\u3002 // ? \u5c06\u4f1a\u628a Ok \u4e2d\u7684\u503c\u8fd4\u56de\u7ed9\u53d8\u91cf f, \u5982\u679c\u51fa\u73b0\u4e86\u9519\u8bef\uff0c? \u8fd0\u7b97\u7b26\u4f1a\u63d0\u65e9\u8fd4\u56de\u6574\u4e2a\u51fd\u6570\u5e76\u5c06\u4e00\u4e9b Err \u503c\u4f20\u64ad\u7ed9\u8c03\u7528\u8005 let mut f = File :: open ( \"hello.txt\" ) ? ; let mut s = String :: new (); // \uff1f\u8fd0\u7528\u540c\u4e0a f . read_to_string ( & mut s ) ? ; Ok ( s ) // \u8fd4\u56deResult\u679a\u4e3e\u7684Ok\u503c\u3002 } \u4e0a\u4e2a\u793a\u4f8b\u4e2d\u7684 match \u8868\u8fbe\u5f0f\u4e0e\u95ee\u53f7\u8fd0\u7b97\u7b26\u6240\u505a\u7684\u6709 \u4e00\u70b9\u4e0d\u540c \uff1a ? \u8fd0\u7b97\u7b26\u6240\u4f7f\u7528\u7684\u9519\u8bef\u503c\u88ab\u4f20\u9012\u7ed9\u4e86 from \u51fd\u6570\uff0c\u5b83\u5b9a\u4e49\u4e8e\u6807\u51c6\u5e93\u7684 From trait \u4e2d\uff0c\u5176\u7528\u6765\u5c06\u9519\u8bef\u4ece\u4e00\u79cd\u7c7b\u578b\u8f6c\u6362\u4e3a\u53e6\u4e00\u79cd\u7c7b\u578b\u3002 \u5f53 ? \u8fd0\u7b97\u7b26\u8c03\u7528 from \u51fd\u6570\u65f6\uff0c\u6536\u5230\u7684\u9519\u8bef\u7c7b\u578b\u88ab\u8f6c\u6362\u4e3a\u7531\u5f53\u524d\u51fd\u6570\u8fd4\u56de\u7c7b\u578b\u6240\u6307\u5b9a\u7684\u9519\u8bef\u7c7b\u578b\u3002 \u8fd9\u5728\u5f53\u51fd\u6570\u8fd4\u56de\u5355\u4e2a\u9519\u8bef\u7c7b\u578b\u6765\u4ee3\u8868\u6240\u6709\u53ef\u80fd\u5931\u8d25\u7684\u65b9\u5f0f\u65f6\u5f88\u6709\u7528\uff0c\u5373\u4f7f\u5176\u53ef\u80fd\u4f1a\u56e0\u5f88\u591a\u79cd\u539f\u56e0\u5931\u8d25\u3002 \u53ea\u8981\u6bcf\u4e00\u4e2a\u9519\u8bef\u7c7b\u578b\u90fd\u5b9e\u73b0\u4e86 from \u51fd\u6570\u6765\u5b9a\u4e49\u5982\u4f55\u5c06\u81ea\u8eab\u8f6c\u6362\u4e3a\u8fd4\u56de\u7684\u9519\u8bef\u7c7b\u578b\uff0c ? \u8fd0\u7b97\u7b26\u4f1a\u81ea\u52a8\u5904\u7406\u8fd9\u4e9b\u8f6c\u6362\u3002 ? \u8fd0\u7b97\u7b26\u6d88\u9664\u4e86\u5927\u91cf\u6837\u677f\u4ee3\u7801\u5e76\u4f7f\u5f97\u51fd\u6570\u7684\u5b9e\u73b0\u66f4\u7b80\u5355\u3002 \u6211\u4eec\u751a\u81f3\u53ef\u4ee5\u5728 ? \u4e4b\u540e\u76f4\u63a5\u4f7f\u7528\u94fe\u5f0f\u65b9\u6cd5\u8c03\u7528\u6765\u8fdb\u4e00\u6b65\u7f29\u77ed\u4ee3\u7801: // \u95ee\u53f7\u8fd0\u7b97\u7b26\u4e4b\u540e\u7684\u94fe\u5f0f\u65b9\u6cd5\u8c03\u7528 use std :: fs :: File ; use std :: io ; use std :: io :: Read ; fn read_username_from_file () -> Result < String , io :: Error > { let mut s = String :: new (); File :: open ( \"hello.txt\" ) ? . read_to_string ( & mut s ) ? ; Ok ( s ) }","title":"?\u8fd0\u7b97\u7b26"},{"location":"error-handing/#_5","text":"? \u8fd0\u7b97\u7b26\u53ea\u80fd\u88ab\u7528\u4e8e\u8fd4\u56de\u503c\u4e0e ? \u4f5c\u7528\u7684\u503c\u76f8\u517c\u5bb9\u7684\u51fd\u6570\u3002 \u56e0\u4e3a ? \u8fd0\u7b97\u7b26\u88ab\u5b9a\u4e49\u4e3a\u4ece\u51fd\u6570\u4e2d\u63d0\u65e9\u8fd4\u56de\u4e00\u4e2a\u503c\uff0c\u8fd9\u4e0e\u793a\u4f8b\u4e2d\u7684 match \u8868\u8fbe\u5f0f\u6709\u7740\u5b8c\u5168\u76f8\u540c\u7684\u5de5\u4f5c\u65b9\u5f0f\u3002 \u793a\u4f8b\u4e2d match \u4f5c\u7528\u4e8e\u4e00\u4e2a Result \u503c\uff0c\u63d0\u65e9\u8fd4\u56de\u7684\u5206\u652f\u8fd4\u56de\u4e86\u4e00\u4e2a Err(e) \u503c\u3002 \u51fd\u6570\u7684\u8fd4\u56de\u503c\u5fc5\u987b\u662f Result \u7c7b\u578b\u624d\u80fd\u4e0e\u8fd9\u4e2a return \u76f8\u517c\u5bb9\u3002 \u770b\u770b\u5728\u8fd4\u56de\u503c\u4e0d\u517c\u5bb9\u7684 main \u51fd\u6570\u4e2d\u4f7f\u7528 ? \u8fd0\u7b97\u7b26\u4f1a\u5f97\u5230\u4ec0\u4e48\u9519\u8bef\uff1a // \u5c1d\u8bd5\u5728\u8fd4\u56de () \u7684\u51fd\u6570\u4e2d\u4f7f\u7528 ? \u7684\u4ee3\u7801\u4e0d\u80fd\u7f16\u8bd1 use std :: fs :: File ; // \u8fd4\u56de\u7c7b\u578b\u662f () \u800c\u4e0d\u662f Result fn main () { let f = File :: open ( \"hello.txt\" ) ? ; } \u5f53\u7f16\u8bd1\u8fd9\u4e9b\u4ee3\u7801\uff0c\u4f1a\u5f97\u5230\u5982\u4e0b\u9519\u8bef\u4fe1\u606f\uff1a $ cargo run Compiling error - handling v0 . 1.0 ( file : ///projects/error-handling) error [ E0277 ] : the ` ? ` operator can only be used in a function that returns ` Result ` or ` Option ` ( or another type that implements ` FromResidual ` ) - -> src / main . rs : 4 : 36 | 3 | / fn main () { 4 | | let f = File :: open ( \"hello.txt\" ) ? ; | | ^ cannot use the ` ? ` operator in a function that returns ` () ` 5 | | } | | _ - this function should return ` Result ` or ` Option ` to accept ` ? ` | = help : the trait ` FromResidual < Result < Infallible , std :: io :: Error >> ` is not implemented for ` () ` For more information about this error , try ` rustc -- explain E0277 ` . error : could not compile ` error - handling ` due to previous error \u8fd9\u4e2a\u9519\u8bef\u6307\u51fa\u53ea\u80fd\u5728\u8fd4\u56de Result \u6216\u8005\u5176\u5b83\u5b9e\u73b0\u4e86 FromResidual \u7684\u7c7b\u578b\u7684\u51fd\u6570\u4e2d\u4f7f\u7528 ? \u8fd0\u7b97\u7b26\u3002 \u4e3a\u4e86\u4fee\u590d\u8fd9\u4e2a\u9519\u8bef\uff0c\u6709\u4e24\u4e2a\u9009\u62e9\u3002 \u4e00\u4e2a\u662f\uff0c\u5982\u679c\u6ca1\u6709\u9650\u5236\u7684\u8bdd\u5c06\u51fd\u6570\u7684\u8fd4\u56de\u503c\u6539\u4e3a Result<T, E> \u3002 \u53e6\u4e00\u4e2a\u662f\u4f7f\u7528 match \u6216 Result<T, E> \u7684\u65b9\u6cd5\u4e2d\u5408\u9002\u7684\u4e00\u4e2a\u6765\u5904\u7406 Result<T, E> \u3002 \u9519\u8bef\u4fe1\u606f\u4e2d\u4e5f\u63d0\u5230 ? \u4e5f\u53ef\u7528\u4e8e Option<T> \u503c\u3002 \u5982\u540c\u5bf9 Result \u4f7f\u7528 ? \u4e00\u6837\uff0c\u53ea\u80fd\u5728\u8fd4\u56de Option \u7684\u51fd\u6570\u4e2d\u5bf9 Option \u4f7f\u7528 ? \u3002 \u5728 Option<T> \u4e0a\u8c03\u7528 ? \u8fd0\u7b97\u7b26\u7684\u884c\u4e3a\u4e0e Result<T, E> \u7c7b\u4f3c\uff1a \u5982\u679c\u503c\u662f None \uff0c\u6b64\u65f6 None \u4f1a\u4ece\u51fd\u6570\u4e2d\u63d0\u524d\u8fd4\u56de\u3002 \u5982\u679c\u503c\u662f Some \uff0c Some \u4e2d\u7684\u503c\u4f5c\u4e3a\u8868\u8fbe\u5f0f\u7684\u8fd4\u56de\u503c\u540c\u65f6\u51fd\u6570\u7ee7\u7eed\u3002 \u4e0b\u9762\u793a\u4f8b\u4e2d\u6709\u4e00\u4e2a\u4ece\u7ed9\u5b9a\u6587\u672c\u4e2d\u8fd4\u56de\u7b2c\u4e00\u884c\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u7684\u51fd\u6570\u7684\u4f8b\u5b50\uff1a // \u5728 Option<T> \u503c\u4e0a\u4f7f\u7528 ? \u8fd0\u7b97\u7b26 fn last_char_of_first_line ( text : & str ) -> Option < char > { text . lines (). next () ? . chars (). last () } \u8fd9\u4e2a\u51fd\u6570\u8fd4\u56de Option<char> \u56e0\u4e3a\u5b83\u53ef\u80fd\u4f1a\u5728\u8fd9\u4e2a\u4f4d\u7f6e\u627e\u5230\u4e00\u4e2a\u5b57\u7b26\uff0c\u4e5f\u53ef\u80fd\u6ca1\u6709\u5b57\u7b26\u3002 \u8fd9\u6bb5\u4ee3\u7801\u83b7\u53d6 text \u5b57\u7b26\u4e32 slice \u4f5c\u4e3a\u53c2\u6570\u5e76\u8c03\u7528\u5176 lines \u65b9\u6cd5\uff0c\u8fd9\u4f1a\u8fd4\u56de\u4e00\u4e2a\u5b57\u7b26\u4e32\u4e2d\u6bcf\u4e00\u884c\u7684\u8fed\u4ee3\u5668\u3002 \u56e0\u4e3a\u51fd\u6570\u5e0c\u671b\u68c0\u67e5\u7b2c\u4e00\u884c\uff0c\u6240\u4ee5\u8c03\u7528\u4e86\u8fed\u4ee3\u5668 next \u6765\u83b7\u53d6\u8fed\u4ee3\u5668\u4e2d\u7b2c\u4e00\u4e2a\u503c\u3002 \u5982\u679c text \u662f\u7a7a\u5b57\u7b26\u4e32\uff0c next \u8c03\u7528\u4f1a\u8fd4\u56de None \uff0c\u6b64\u65f6\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 ? \u6765\u505c\u6b62\u5e76\u4ece last_char_of_first_line \u8fd4\u56de None \u3002 \u5982\u679c text \u4e0d\u662f\u7a7a\u5b57\u7b26\u4e32\uff0c next \u4f1a\u8fd4\u56de\u4e00\u4e2a\u5305\u542b text \u4e2d\u7b2c\u4e00\u884c\u7684\u5b57\u7b26\u4e32 slice \u7684 Some \u503c\u3002 ? \u4f1a\u63d0\u53d6\u8fd9\u4e2a\u5b57\u7b26\u4e32 slice \uff0c\u7136\u540e\u53ef\u4ee5\u5728\u5b57\u7b26\u4e32 slice \u4e0a\u8c03\u7528 chars \u6765\u83b7\u53d6\u5b57\u7b26\u7684\u8fed\u4ee3\u5668\u3002 \u6211\u4eec\u611f\u5174\u8da3\u7684\u662f\u7b2c\u4e00\u884c\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\uff0c\u6240\u4ee5\u53ef\u4ee5\u8c03\u7528 last \u6765\u8fd4\u56de\u8fed\u4ee3\u5668\u7684\u6700\u540e\u4e00\u9879\u3002 \u8fd9\u662f\u4e00\u4e2a Option \uff0c\u56e0\u4e3a\u6709\u53ef\u80fd\u7b2c\u4e00\u884c\u662f\u4e00\u4e2a\u7a7a\u5b57\u7b26\u4e32\uff0c\u4f8b\u5982 text \u4ee5\u4e00\u4e2a\u7a7a\u884c\u5f00\u5934\u800c\u540e\u9762\u7684\u884c\u6709\u6587\u672c\uff0c\u50cf\u662f \"\\nhi\"\u3002 \u4e0d\u8fc7\uff0c\u5982\u679c\u7b2c\u4e00\u884c\u6709\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\uff0c\u5b83\u4f1a\u8fd4\u56de\u5728\u4e00\u4e2a Some \u6210\u5458\u4e2d\u3002 ? \u8fd0\u7b97\u7b26\u4f5c\u7528\u4e8e\u5176\u4e2d\u7ed9\u4e86\u6211\u4eec\u4e00\u4e2a\u7b80\u6d01\u7684\u8868\u8fbe\u8fd9\u79cd\u903b\u8f91\u7684\u65b9\u5f0f\u3002 \u5982\u679c\u6211\u4eec\u4e0d\u80fd\u5728 Option \u4e0a\u4f7f\u7528 ? \u8fd0\u7b97\u7b26\uff0c\u5219\u4e0d\u5f97\u4e0d\u4f7f\u7528\u66f4\u591a\u7684\u65b9\u6cd5\u8c03\u7528\u6216\u8005 match \u8868\u8fbe\u5f0f\u6765\u5b9e\u73b0\u8fd9\u4e9b\u903b\u8f91\u3002 \u6ce8\u610f \u4f60\u53ef\u4ee5\u5728\u8fd4\u56de Result \u7684\u51fd\u6570\u4e2d\u5bf9 Result \u4f7f\u7528 ? \u8fd0\u7b97\u7b26\uff0c\u53ef\u4ee5\u5728\u8fd4\u56de Option \u7684\u51fd\u6570\u4e2d\u5bf9 Option \u4f7f\u7528 ? \u8fd0\u7b97\u7b26\uff0c\u4f46\u662f\u4e0d\u53ef\u4ee5\u6df7\u5408\u642d\u914d\u3002 ? \u8fd0\u7b97\u7b26\u4e0d\u4f1a\u81ea\u52a8\u5c06 Result \u8f6c\u5316\u4e3a Option \uff0c\u53cd\u4e4b\u4ea6\u7136\uff1b \u5728\u8fd9\u4e9b\u60c5\u51b5\u4e0b\uff0c\u53ef\u4ee5\u4f7f\u7528\u7c7b\u4f3c Result \u7684 ok \u65b9\u6cd5\u6216\u8005 Option \u7684 ok_or \u65b9\u6cd5\u6765\u663e\u5f0f\u8f6c\u6362\u3002 \u76ee\u524d\u4e3a\u6b62\uff0c\u6240\u4f7f\u7528\u7684\u6240\u6709 main \u51fd\u6570\u90fd\u8fd4\u56de () \u3002 main \u51fd\u6570\u662f\u7279\u6b8a\u7684\u56e0\u4e3a\u5b83\u662f\u53ef\u6267\u884c\u7a0b\u5e8f\u7684\u5165\u53e3\u70b9\u548c\u9000\u51fa\u70b9\uff0c\u4e3a\u4e86\u4f7f\u7a0b\u5e8f\u80fd\u6b63\u5e38\u5de5\u4f5c\uff0c\u5176\u53ef\u4ee5\u8fd4\u56de\u7684\u7c7b\u578b\u662f\u6709\u9650\u5236\u7684\u3002 \u5e78\u8fd0\u7684\u662f main \u51fd\u6570\u4e5f\u53ef\u4ee5\u8fd4\u56de Result<(), E> \uff0c \u4e0b\u9762\u793a\u4f8b\u4fee\u6539\u4e86 main \u7684\u8fd4\u56de\u503c\u4e3a Result<(), Box<dyn Error>> \u5e76\u5728\u7ed3\u5c3e\u589e\u52a0\u4e86\u4e00\u4e2a Ok(()) \u4f5c\u4e3a\u8fd4\u56de\u503c\u3002 \u8fd9\u6bb5\u4ee3\u7801\u53ef\u4ee5\u7f16\u8bd1\uff1a // \u4fee\u6539 main \u8fd4\u56de Result<(), E> \u5141\u8bb8\u5bf9 Result \u503c\u4f7f\u7528 ? \u8fd0\u7b97\u7b26 use std :: error :: Error ; use std :: fs :: File ; fn main () -> Result < (), Box < dyn Error >> { let f = File :: open ( \"hello.txt\" ) ? ; Ok (()) } Box<dyn Error> \u7c7b\u578b\u662f\u4e00\u4e2a trait \u5bf9\u8c61\uff08 trait object\uff09\u7b2c\u5341\u4e03\u7ae0 \u201c \u4e3a\u4f7f\u7528\u4e0d\u540c\u7c7b\u578b\u7684\u503c\u800c\u8bbe\u8ba1\u7684 trait \u5bf9\u8c61 \u201d \u90e8\u5206\u4f1a\u505a\u4ecb\u7ecd\u3002 \u76ee\u524d\u53ef\u4ee5\u5c06 Box<dyn Error> \u7406\u89e3\u4e3a \u201c \u4efb\u4f55\u7c7b\u578b\u7684\u9519\u8bef \u201d\u3002 \u5728\u8fd4\u56de Box<dyn Error> \u9519\u8bef\u7c7b\u578b main \u51fd\u6570\u4e2d\u5bf9 Result \u4f7f\u7528 ? \u662f\u5141\u8bb8\u7684\uff0c\u56e0\u4e3a\u5b83\u5141\u8bb8\u4efb\u4f55 Err \u503c\u63d0\u524d\u8fd4\u56de\u3002 \u5f53 main \u51fd\u6570\u8fd4\u56de Result<(), E> \uff0c \u5982\u679c main \u8fd4\u56de Ok(()) \u53ef\u6267\u884c\u7a0b\u5e8f\u4f1a\u4ee5 0 \u503c\u9000\u51fa\uff0c \u800c\u5982\u679c main \u8fd4\u56de Err \u503c\u5219\u4f1a\u4ee5\u975e\u96f6\u503c\u9000\u51fa\uff1b \u6210\u529f\u9000\u51fa\u7684\u7a0b\u5e8f\u4f1a\u8fd4\u56de\u6574\u6570 0 \uff0c\u8fd0\u884c\u9519\u8bef\u7684\u7a0b\u5e8f\u4f1a\u8fd4\u56de\u975e 0 \u7684\u6574\u6570\u3002 Rust \u4e5f\u4f1a\u4ece\u4e8c\u8fdb\u5236\u7a0b\u5e8f\u4e2d\u8fd4\u56de\u4e0e\u8fd9\u4e2a\u60ef\u4f8b\u76f8\u517c\u5bb9\u7684\u6574\u6570\u3002 main \u51fd\u6570\u4e5f\u53ef\u4ee5\u8fd4\u56de\u4efb\u4f55\u5b9e\u73b0\u4e86 std::process::Termination trait \u7684\u7c7b\u578b\u3002 \u622a\u81f3\u7f16\u5199\u65f6\uff0c Termination trait \u662f\u4e00\u4e2a\u4e0d\u7a33\u5b9a\u529f\u80fd\uff08unstable feature\uff09\uff0c\u53ea\u80fd\u7528\u4e8e Nightly Rust \u4e2d\uff0c \u6240\u4ee5\u4f60\u4e0d\u80fd\u5728 \u7a33\u5b9a\u7248 Rust\uff08Stable Rust\uff09\u4e2d\u7528\u81ea\u5df1\u7684\u7c7b\u578b\u53bb\u5b9e\u73b0\uff0c\u4e0d\u8fc7\u6709\u671d\u4e00\u65e5\u5e94\u8be5\u53ef\u4ee5\uff01","title":"\u54ea\u91cc\u4f7f\u7528 ? \u8fd0\u7b97\u7b26"},{"location":"error-handing/#_6","text":"\u90a3\u4e48\uff0c\u8be5\u5982\u4f55\u51b3\u5b9a\u4f55\u65f6\u5e94\u8be5 panic! \u4ee5\u53ca\u4f55\u65f6\u5e94\u8be5\u8fd4\u56de Result \u5462\uff1f \u5982\u679c\u4ee3\u7801 panic \uff0c\u5c31\u6ca1\u6709\u6062\u590d\u7684\u53ef\u80fd\u3002\u4f60\u53ef\u4ee5\u9009\u62e9\u5bf9\u4efb\u4f55\u9519\u8bef\u573a\u666f\u90fd\u8c03\u7528 panic! \uff0c\u4e0d\u7ba1\u662f\u5426\u6709\u53ef\u80fd\u6062\u590d\uff0c\u4e0d\u8fc7\u8fd9\u6837\u5c31\u662f\u4f60\u4ee3\u66ff\u8c03\u7528\u8005\u51b3\u5b9a\u4e86\u8fd9\u662f\u4e0d\u53ef\u6062\u590d\u7684\u3002 \u9009\u62e9\u8fd4\u56de Result \u503c\u7684\u8bdd\uff0c\u5c31\u5c06\u9009\u62e9\u6743\u4ea4\u7ed9\u4e86\u8c03\u7528\u8005\uff0c\u800c\u4e0d\u662f\u4ee3\u66ff\u4ed6\u4eec\u505a\u51fa\u51b3\u5b9a\u3002\u8c03\u7528\u8005\u53ef\u80fd\u4f1a\u9009\u62e9\u4ee5\u7b26\u5408\u4ed6\u4eec\u573a\u666f\u7684\u65b9\u5f0f\u5c1d\u8bd5\u6062\u590d\uff0c\u6216\u8005\u4e5f\u53ef\u80fd\u5e72\u8106\u5c31\u8ba4\u4e3a Err \u662f\u4e0d\u53ef\u6062\u590d\u7684\uff0c\u6240\u4ee5\u4ed6\u4eec\u4e5f\u53ef\u80fd\u4f1a\u8c03\u7528 panic! \u5e76\u5c06\u53ef\u6062\u590d\u7684\u9519\u8bef\u53d8\u6210\u4e86\u4e0d\u53ef\u6062\u590d\u7684\u9519\u8bef\u3002 \u56e0\u6b64\u8fd4\u56de Result \u662f\u5b9a\u4e49\u53ef\u80fd\u4f1a\u5931\u8d25\u7684\u51fd\u6570\u7684\u4e00\u4e2a\u597d\u7684\u9ed8\u8ba4\u9009\u62e9\u3002 \u5728\u4e00\u4e9b\u7c7b\u4f3c \u793a\u4f8b \u3001 \u539f\u578b\u4ee3\u7801 \uff08prototype code\uff09\u548c \u6d4b\u8bd5 \u4e2d\uff0c panic \u6bd4\u8fd4\u56de Result \u66f4\u4e3a\u5408\u9002\uff0c\u4e0d\u8fc7\u4ed6\u4eec\u5e76\u4e0d\u5e38\u89c1\u3002","title":"\u9519\u8bef\u5904\u7406\u6289\u62e9"},{"location":"error-handing/#panic_1","text":"\u5f53\u4f60\u7f16\u5199\u4e00\u4e2a \u793a\u4f8b \u6765\u5c55\u793a\u4e00\u4e9b\u6982\u5ff5\u65f6\uff0c \u5728\u62e5\u6709\u5065\u58ee\u7684\u9519\u8bef\u5904\u7406\u4ee3\u7801\u7684\u540c\u65f6\u4e5f\u4f1a\u4f7f\u5f97\u4f8b\u5b50\u4e0d\u90a3\u4e48\u660e\u786e\u3002 \u4f8b\u5982\uff0c\u8c03\u7528\u4e00\u4e2a\u7c7b\u4f3c unwrap \u8fd9\u6837\u53ef\u80fd panic! \u7684\u65b9\u6cd5\u53ef\u4ee5\u88ab\u7406\u89e3\u4e3a\u4e00\u4e2a\u4f60\u5b9e\u9645\u5e0c\u671b\u7a0b\u5e8f\u5904\u7406\u9519\u8bef\u65b9\u5f0f\u7684\u5360\u4f4d\u7b26\uff0c\u5b83\u6839\u636e\u5176\u4f59\u4ee3\u7801\u8fd0\u884c\u65b9\u5f0f\u53ef\u80fd\u4f1a\u5404\u4e0d\u76f8\u540c\u3002 \u7c7b\u4f3c\u5730\uff0c\u5728\u51c6\u5907\u597d\u51b3\u5b9a\u5982\u4f55\u5904\u7406\u9519\u8bef\u4e4b\u524d\uff0c unwrap \u548c expect \u65b9\u6cd5\u5728\u539f\u578b\u8bbe\u8ba1\u65f6\u975e\u5e38\u65b9\u4fbf\u3002 \u5f53\u6211\u4eec\u51c6\u5907\u597d\u8ba9\u7a0b\u5e8f\u66f4\u52a0\u5065\u58ee\u65f6\uff0c\u5b83\u4eec\u4f1a\u5728\u4ee3\u7801\u4e2d\u7559\u4e0b\u6e05\u6670\u7684\u6807\u8bb0\u3002 \u5982\u679c\u65b9\u6cd5\u8c03\u7528\u5728\u6d4b\u8bd5\u4e2d\u5931\u8d25\u4e86\uff0c\u6211\u4eec\u5e0c\u671b\u8fd9\u4e2a\u6d4b\u8bd5\u90fd\u5931\u8d25\uff0c\u5373\u4fbf\u8fd9\u4e2a\u65b9\u6cd5\u5e76\u4e0d\u662f\u9700\u8981\u6d4b\u8bd5\u7684\u529f\u80fd\u3002\u56e0\u4e3a panic! \u4f1a\u5c06\u6d4b\u8bd5\u6807\u8bb0\u4e3a\u5931\u8d25\uff0c\u6b64\u65f6\u8c03\u7528 unwrap \u6216 expect \u662f\u6070\u5f53\u7684\u3002","title":"\u793a\u4f8b\u3001\u4ee3\u7801\u539f\u578b\u548c\u6d4b\u8bd5\u90fd\u975e\u5e38\u9002\u5408 panic"},{"location":"error-handing/#_7","text":"\u5f53\u4f60\u6709\u4e00\u4e9b\u5176\u4ed6\u7684\u903b\u8f91\u6765\u786e\u4fdd Result \u4f1a\u662f Ok \u503c\u65f6\uff0c\u8c03\u7528 unwrap \u4e5f\u662f\u5408\u9002\u7684\uff0c\u867d\u7136\u7f16\u8bd1\u5668\u65e0\u6cd5\u7406\u89e3\u8fd9\u79cd\u903b\u8f91\u3002 \u4f60\u4ecd\u7136\u9700\u8981\u5904\u7406\u4e00\u4e2a Result \u503c\uff1a\u5373\u4f7f\u5728\u4f60\u7684\u7279\u5b9a\u60c5\u51b5\u4e0b\u903b\u8f91\u4e0a\u662f\u4e0d\u53ef\u80fd\u7684\uff0c\u4f60\u6240\u8c03\u7528\u7684\u4efb\u4f55\u64cd\u4f5c\u4ecd\u7136\u6709\u53ef\u80fd\u5931\u8d25\u3002 \u5982\u679c\u901a\u8fc7\u4eba\u5de5\u68c0\u67e5\u4ee3\u7801\u6765\u786e\u4fdd\u6c38\u8fdc\u4e5f\u4e0d\u4f1a\u51fa\u73b0 Err \u503c\uff0c\u90a3\u4e48\u8c03\u7528 unwrap \u4e5f\u662f\u5b8c\u5168\u53ef\u4ee5\u63a5\u53d7\u7684\uff0c\u8fd9\u91cc\u662f\u4e00\u4e2a\u4f8b\u5b50\uff1a use std :: net :: IpAddr ; // \u6c38\u8fdc\u4e0d\u53ef\u80fd\u5931\u8d25\uff0c\u4f46\u8981\u5904\u7406Result\uff0c\u53ef\u4ee5\u4f7f\u7528unwrap; let home : IpAddr = \"127.0.0.1\" . parse (). unwrap (); \u901a\u8fc7\u89e3\u6790\u4e00\u4e2a\u786c\u7f16\u7801\u7684\u5b57\u7b26\u6765\u521b\u5efa\u4e00\u4e2a IpAddr \u5b9e\u4f8b\u3002\u53ef\u4ee5\u770b\u51fa 127.0.0.1 \u662f\u4e00\u4e2a\u6709\u6548\u7684 IP \u5730\u5740\uff0c\u6240\u4ee5\u8fd9\u91cc\u4f7f\u7528 unwrap \u662f\u53ef\u4ee5\u63a5\u53d7\u7684\u3002 \u7136\u800c\uff0c\u62e5\u6709\u4e00\u4e2a\u786c\u7f16\u7801\u7684\u6709\u6548\u7684\u5b57\u7b26\u4e32\u4e5f\u4e0d\u80fd\u6539\u53d8 parse \u65b9\u6cd5\u7684\u8fd4\u56de\u503c\u7c7b\u578b\uff1a\u5b83\u4ecd\u7136\u662f\u4e00\u4e2a Result \u503c\uff0c\u800c\u7f16\u8bd1\u5668\u4ecd\u7136\u4f1a\u8981\u6c42\u6211\u4eec\u5904\u7406\u8fd9\u4e2a Result \uff0c\u597d\u50cf\u8fd8\u662f\u6709\u53ef\u80fd\u51fa\u73b0 Err \u6210\u5458\u90a3\u6837\u3002 \u8fd9\u662f\u56e0\u4e3a\u7f16\u8bd1\u5668\u8fd8\u6ca1\u6709\u667a\u80fd\u5230\u53ef\u4ee5\u8bc6\u522b\u51fa\u8fd9\u4e2a\u5b57\u7b26\u4e32\u603b\u662f\u4e00\u4e2a\u6709\u6548\u7684 IP \u5730\u5740\u3002\u5982\u679c IP \u5730\u5740\u5b57\u7b26\u4e32\u6765\u6e90\u4e8e\u7528\u6237\u800c\u4e0d\u662f\u786c\u7f16\u7801\u8fdb\u7a0b\u5e8f\u4e2d\u7684\u8bdd\uff0c\u90a3\u4e48\u5c31 \u786e\u5b9e \u6709\u5931\u8d25\u7684\u53ef\u80fd\u6027\uff0c\u8fd9\u65f6\u5c31\u7edd\u5bf9\u9700\u8981\u6211\u4eec\u4ee5\u4e00\u79cd\u66f4\u5065\u58ee\u7684\u65b9\u5f0f\u5904\u7406 Result \u4e86\u3002","title":"\u5f53\u6211\u4eec\u77e5\u9053\u66f4\u591a\u7684\u60c5\u51b5"},{"location":"error-handing/#_8","text":"\u5728\u5f53\u6709\u53ef\u80fd\u4f1a\u5bfc\u81f4 \u6709\u5bb3\u72b6\u6001 \u7684\u60c5\u51b5\u4e0b\u5efa\u8bae\u4f7f\u7528 panic! \u2014\u2014 \u5728\u8fd9\u91cc\uff0c \u6709\u5bb3\u72b6\u6001 \u662f\u6307\u5f53\u4e00\u4e9b\u5047\u8bbe\u3001\u4fdd\u8bc1\u3001\u534f\u8bae\u6216\u4e0d\u53ef\u53d8\u6027\u88ab\u6253\u7834\u7684\u72b6\u6001 \uff0c\u4f8b\u5982 \u65e0\u6548\u7684\u503c \u3001 \u81ea\u76f8\u77db\u76fe\u7684\u503c \u6216\u8005 \u88ab\u4f20\u9012\u4e86\u4e0d\u5b58\u5728\u7684\u503c \u2014\u2014 \u5916\u52a0\u5982\u4e0b\u51e0\u79cd\u60c5\u51b5\uff1a \u6709\u5bb3\u72b6\u6001\u662f \u975e\u9884\u671f\u7684\u884c\u4e3a \uff0c\u4e0e\u5076\u5c14\u4f1a\u53d1\u751f\u7684\u884c\u4e3a\u76f8\u5bf9\uff0c\u6bd4\u5982\u7528\u6237\u8f93\u5165\u4e86\u9519\u8bef\u683c\u5f0f\u7684\u6570\u636e\u3002 \u5728\u6b64\u4e4b\u540e \u4ee3\u7801\u7684\u8fd0\u884c\u4f9d\u8d56\u4e8e\u4e0d\u5904\u4e8e\u8fd9\u79cd\u6709\u5bb3\u72b6\u6001 \uff0c\u800c\u4e0d\u662f\u5728\u6bcf\u4e00\u6b65\u90fd\u68c0\u67e5\u662f\u5426\u6709\u95ee\u9898\u3002 \u6ca1\u6709\u53ef\u884c\u7684\u624b\u6bb5\u6765\u5c06\u6709\u5bb3\u72b6\u6001\u4fe1\u606f\u7f16\u7801\u8fdb\u6240\u4f7f\u7528\u7684\u7c7b\u578b\u4e2d\u7684\u60c5\u51b5 \u3002\u6211\u4eec\u4f1a\u5728\u7b2c\u5341\u4e03\u7ae0 \u201c \u5c06\u72b6\u6001\u548c\u884c\u4e3a\u7f16\u7801\u4e3a\u7c7b\u578b \u201d \u90e8\u5206\u901a\u8fc7\u4e00\u4e2a\u4f8b\u5b50\u6765\u8bf4\u660e\u6211\u4eec\u7684\u610f\u601d\u3002 \u5982\u679c\u522b\u4eba\u8c03\u7528\u4f60\u7684\u4ee3\u7801\u5e76\u4f20\u9012\u4e86\u4e00\u4e2a\u6ca1\u6709\u610f\u4e49\u7684\u503c\uff0c\u6700\u597d\u7684\u60c5\u51b5\u4e5f\u8bb8\u5c31\u662f panic! \u5e76\u8b66\u544a\u4f7f\u7528\u4f60\u7684\u5e93\u7684\u4eba\u4ed6\u7684\u4ee3\u7801\u4e2d\u6709 bug \u4ee5\u4fbf\u4ed6\u80fd\u5728\u5f00\u53d1\u65f6\u5c31\u4fee\u590d\u5b83\u3002 \u7c7b\u4f3c\u7684\uff0c\u5982\u679c\u4f60\u6b63\u5728\u8c03\u7528\u4e0d\u53d7\u4f60\u63a7\u5236\u7684\u5916\u90e8\u4ee3\u7801\uff0c\u5e76\u4e14\u5b83\u8fd4\u56de\u4e86\u4e00\u4e2a\u4f60\u65e0\u6cd5\u4fee\u590d\u7684\u65e0\u6548\u72b6\u6001\uff0c\u90a3\u4e48 panic! \u5f80\u5f80\u662f\u5408\u9002\u7684\u3002 \u7136\u800c\u5f53\u9519\u8bef\u9884\u671f\u4f1a\u51fa\u73b0\u65f6\uff0c\u8fd4\u56de Result \u4ecd\u8981\u6bd4\u8c03\u7528 panic! \u66f4\u4e3a\u5408\u9002\u3002 \u8fd9\u6837\u7684\u4f8b\u5b50\u5305\u62ec\u89e3\u6790\u5668\u63a5\u6536\u5230\u683c\u5f0f\u9519\u8bef\u7684\u6570\u636e\uff0c\u6216\u8005 HTTP \u8bf7\u6c42\u8fd4\u56de\u4e86\u4e00\u4e2a\u8868\u660e\u89e6\u53d1\u4e86\u9650\u6d41\u7684\u72b6\u6001\u3002 \u5728\u8fd9\u4e9b\u4f8b\u5b50\u4e2d\uff0c\u5e94\u8be5\u901a\u8fc7\u8fd4\u56de Result \u6765\u8868\u660e\u5931\u8d25\u9884\u671f\u662f\u53ef\u80fd\u7684\uff0c\u8fd9\u6837\u5c06\u6709\u5bb3\u72b6\u6001\u5411\u4e0a\u4f20\u64ad\uff0c\u8c03\u7528\u8005\u5c31\u53ef\u4ee5\u51b3\u5b9a\u8be5\u5982\u4f55\u5904\u7406\u8fd9\u4e2a\u95ee\u9898\u3002 \u4f7f\u7528 panic! \u6765\u5904\u7406\u8fd9\u4e9b\u60c5\u51b5\u5c31\u4e0d\u662f\u6700\u597d\u7684\u9009\u62e9\u3002 \u5f53\u4ee3\u7801\u5bf9\u503c\u8fdb\u884c\u64cd\u4f5c\u65f6\uff0c\u5e94\u8be5\u9996\u5148\u9a8c\u8bc1\u503c\u662f\u6709\u6548\u7684\uff0c\u5e76\u5728\u5176\u65e0\u6548\u65f6 panic! \u3002 \u8fd9\u4e3b\u8981\u662f\u51fa\u4e8e\u5b89\u5168\u7684\u539f\u56e0\uff1a\u5c1d\u8bd5\u64cd\u4f5c\u65e0\u6548\u6570\u636e\u4f1a\u66b4\u9732\u4ee3\u7801\u6f0f\u6d1e\uff0c\u8fd9\u5c31\u662f\u6807\u51c6\u5e93\u5728\u5c1d\u8bd5\u8d8a\u754c\u8bbf\u95ee\u6570\u7ec4\u65f6\u4f1a panic! \u7684\u4e3b\u8981\u539f\u56e0\uff1a\u5c1d\u8bd5\u8bbf\u95ee\u4e0d\u5c5e\u4e8e\u5f53\u524d\u6570\u636e\u7ed3\u6784\u7684\u5185\u5b58\u662f\u4e00\u4e2a\u5e38\u89c1\u7684\u5b89\u5168\u9690\u60a3\u3002 \u51fd\u6570\u901a\u5e38\u90fd\u9075\u5faa \u5951\u7ea6 \uff08contracts\uff09\uff1a \u4ed6\u4eec\u7684\u884c\u4e3a\u53ea\u6709\u5728\u8f93\u5165\u6ee1\u8db3\u7279\u5b9a\u6761\u4ef6\u65f6\u624d\u80fd\u5f97\u5230\u4fdd\u8bc1 \u3002\u5f53\u8fdd\u53cd\u5951\u7ea6\u65f6 panic \u662f\u6709\u9053\u7406\u7684\uff0c\u56e0\u4e3a\u8fd9\u901a\u5e38\u4ee3\u8868\u8c03\u7528\u65b9\u7684 bug \uff0c\u800c\u4e14\u8fd9\u4e5f\u4e0d\u662f\u90a3\u79cd\u4f60\u5e0c\u671b\u6240\u8c03\u7528\u7684\u4ee3\u7801\u5fc5\u987b\u5904\u7406\u7684\u9519\u8bef\u3002 \u4e8b\u5b9e\u4e0a\u6240\u8c03\u7528\u7684\u4ee3\u7801\u4e5f\u6ca1\u6709\u5408\u7406\u7684\u65b9\u5f0f\u6765\u6062\u590d\uff0c\u800c\u662f\u9700\u8981\u8c03\u7528\u65b9\u7684 \u7a0b\u5e8f\u5458 \u4fee\u590d\u5176\u4ee3\u7801\u3002\u51fd\u6570\u7684\u5951\u7ea6\uff0c\u5c24\u5176\u662f\u5f53\u8fdd\u53cd\u5b83\u4f1a\u9020\u6210 panic \u7684\u5951\u7ea6\uff0c\u5e94\u8be5\u5728\u51fd\u6570\u7684 API \u6587\u6863\u4e2d\u5f97\u5230\u89e3\u91ca\u3002 \u867d\u7136\u5728\u6240\u6709\u51fd\u6570\u4e2d\u90fd\u62e5\u6709\u8bb8\u591a\u9519\u8bef\u68c0\u67e5\u662f\u5197\u957f\u800c\u70e6\u4eba\u7684\u3002 \u5e78\u8fd0\u7684\u662f\uff0c\u53ef\u4ee5\u5229\u7528 Rust \u7684\u7c7b\u578b\u7cfb\u7edf\uff08\u4ee5\u53ca\u7f16\u8bd1\u5668\u7684\u7c7b\u578b\u68c0\u67e5\uff09\u4e3a\u4f60\u8fdb\u884c\u5f88\u591a\u68c0\u67e5\u3002 \u5982\u679c\u51fd\u6570\u6709\u4e00\u4e2a\u7279\u5b9a\u7c7b\u578b\u7684\u53c2\u6570\uff0c\u53ef\u4ee5\u5728\u77e5\u6653\u7f16\u8bd1\u5668\u5df2\u7ecf\u786e\u4fdd\u5176\u62e5\u6709\u4e00\u4e2a\u6709\u6548\u503c\u7684\u524d\u63d0\u4e0b\u8fdb\u884c\u4f60\u7684\u4ee3\u7801\u903b\u8f91\u3002 \u4f8b\u5982\uff0c\u5982\u679c\u4f60\u4f7f\u7528\u4e86\u4e00\u4e2a\u5e76\u4e0d\u662f Option \u7684\u7c7b\u578b\uff0c\u5219\u7a0b\u5e8f\u671f\u671b\u5b83\u662f \u6709\u503c \u7684\u5e76\u4e14\u4e0d\u662f \u7a7a\u503c , \u4f60\u7684\u4ee3\u7801\u65e0\u9700\u5904\u7406 Some \u548c None \u8fd9\u4e24\u79cd\u60c5\u51b5\uff0c\u5b83\u53ea\u4f1a\u6709\u4e00\u79cd\u60c5\u51b5\u5c31\u662f\u7edd\u5bf9\u4f1a\u6709\u4e00\u4e2a\u503c\u3002 \u5c1d\u8bd5\u5411\u51fd\u6570\u4f20\u9012\u7a7a\u503c\u7684\u4ee3\u7801\u751a\u81f3\u6839\u672c\u4e0d\u80fd\u7f16\u8bd1\uff0c\u6240\u4ee5\u4f60\u7684\u51fd\u6570\u5728\u8fd0\u884c\u65f6\u6ca1\u6709\u5fc5\u8981\u5224\u7a7a\u3002 \u53e6\u5916\u4e00\u4e2a\u4f8b\u5b50\u662f\u4f7f\u7528\u50cf u32 \u8fd9\u6837\u7684\u65e0\u7b26\u53f7\u6574\u578b\uff0c\u4e5f\u4f1a\u786e\u4fdd\u5b83\u6c38\u8fdc\u4e0d\u4e3a\u8d1f\u3002","title":"\u9519\u8bef\u5904\u7406\u6307\u5bfc\u539f\u5219"},{"location":"error-handing/#_9","text":"\u8ba9\u6211\u4eec\u4f7f\u7528 Rust \u7c7b\u578b\u7cfb\u7edf\u7684\u601d\u60f3\u6765\u8fdb\u4e00\u6b65\u786e\u4fdd\u503c\u7684\u6709\u6548\u6027\uff0c\u5e76\u5c1d\u8bd5\u521b\u5efa\u4e00\u4e2a\u81ea\u5b9a\u4e49\u7c7b\u578b\u4ee5\u8fdb\u884c\u9a8c\u8bc1\u3002 \u56de\u5fc6\u4e00\u4e0b\u7b2c\u4e8c\u7ae0\u7684\u731c\u731c\u770b\u6e38\u620f\uff0c\u6211\u4eec\u7684\u4ee3\u7801\u8981\u6c42\u7528\u6237\u731c\u6d4b\u4e00\u4e2a 1 \u5230 100 \u4e4b\u95f4\u7684\u6570\u5b57\uff0c\u5728\u5c06\u5176\u4e0e\u79d8\u5bc6\u6570\u5b57\u505a\u6bd4\u8f83\u4e4b\u524d\u6211\u4eec\u4ece\u672a\u9a8c\u8bc1\u7528\u6237\u7684\u731c\u6d4b\u662f\u4f4d\u4e8e\u8fd9\u4e24\u4e2a\u6570\u5b57\u4e4b\u95f4\u7684\uff0c\u6211\u4eec\u53ea\u9a8c\u8bc1\u5b83\u662f\u5426\u4e3a\u6b63\u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5176\u5f71\u54cd\u5e76\u4e0d\u662f\u5f88\u4e25\u91cd\uff1a\u201cToo high\u201d \u6216 \u201cToo low\u201d \u7684\u8f93\u51fa\u4ecd\u7136\u662f\u6b63\u786e\u7684\u3002 \u4f46\u662f\u8fd9\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u5f15\u5bfc\u7528\u6237\u5f97\u51fa\u6709\u6548\u731c\u6d4b\u7684\u8f85\u52a9\uff0c\u4f8b\u5982\u5f53\u7528\u6237\u731c\u6d4b\u4e00\u4e2a\u8d85\u51fa\u8303\u56f4\u7684\u6570\u5b57\u6216\u8005\u8f93\u5165\u5b57\u6bcd\u65f6\u91c7\u53d6\u4e0d\u540c\u7684\u884c\u4e3a\u3002 \u4e00\u79cd\u5b9e\u73b0\u65b9\u5f0f\u662f\u5c06\u731c\u6d4b\u89e3\u6790\u6210 i32 \u800c\u4e0d\u4ec5\u4ec5\u662f u32 \uff0c\u6765\u9ed8\u8bb8\u8f93\u5165\u8d1f\u6570\uff0c\u63a5\u7740\u68c0\u67e5\u6570\u5b57\u662f\u5426\u5728\u8303\u56f4\u5185\uff1a loop { // --snip-- let guess : i32 = match guess . trim (). parse () { Ok ( num ) => num , Err ( _ ) => continue , }; // if \u8868\u8fbe\u5f0f\u68c0\u67e5\u4e86\u503c\u662f\u5426\u8d85\u51fa\u8303\u56f4\uff0c\u544a\u8bc9\u7528\u6237\u51fa\u4e86\u4ec0\u4e48\u95ee\u9898\uff0c\u5e76\u8c03\u7528 continue \u5f00\u59cb\u4e0b\u4e00\u6b21\u5faa\u73af\uff0c\u8bf7\u6c42\u53e6\u4e00\u4e2a\u731c\u6d4b\u3002 // if \u8868\u8fbe\u5f0f\u4e4b\u540e\uff0c\u5c31\u53ef\u4ee5\u5728\u77e5\u9053 guess \u5728 1 \u5230 100 \u4e4b\u95f4\u7684\u60c5\u51b5\u4e0b\u4e0e\u79d8\u5bc6\u6570\u5b57\u4f5c\u6bd4\u8f83\u4e86\u3002 if guess < 1 || guess > 100 { println! ( \"The secret number will be between 1 and 100.\" ); continue ; } match guess . cmp ( & secret_number ) { // --snip-- } \u7136\u800c\uff0c\u8fd9\u5e76\u4e0d\u662f\u4e00\u4e2a\u7406\u60f3\u7684\u89e3\u51b3\u65b9\u6848\uff1a\u5982\u679c\u8ba9\u7a0b\u5e8f\u4ec5\u4ec5\u5904\u7406 1 \u5230 100 \u4e4b\u95f4\u7684\u503c\u662f\u4e00\u4e2a\u7edd\u5bf9\u9700\u8981\u6ee1\u8db3\u7684\u8981\u6c42\uff0c\u800c\u4e14\u7a0b\u5e8f\u4e2d\u7684\u5f88\u591a\u51fd\u6570\u90fd\u6709\u8fd9\u6837\u7684\u8981\u6c42\uff0c \u5728\u6bcf\u4e2a\u51fd\u6570\u4e2d\u90fd\u6709\u8fd9\u6837\u7684\u68c0\u67e5\u5c06\u662f\u975e\u5e38\u5197\u4f59\u7684 \uff08\u5e76\u53ef\u80fd\u6f5c\u5728\u7684\u5f71\u54cd\u6027\u80fd\uff09\u3002 \u76f8\u53cd\u6211\u4eec\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u65b0\u7c7b\u578b\u6765\u5c06\u9a8c\u8bc1\u653e\u5165\u521b\u5efa\u5176\u5b9e\u4f8b\u7684\u51fd\u6570\u4e2d\uff0c\u800c\u4e0d\u662f\u5230\u5904\u91cd\u590d\u8fd9\u4e9b\u68c0\u67e5\u3002\u8fd9\u6837\u5c31\u53ef\u4ee5\u5b89\u5168\u7684\u5728\u51fd\u6570\u7b7e\u540d\u4e2d\u4f7f\u7528\u65b0\u7c7b\u578b\u5e76\u76f8\u4fe1\u4ed6\u4eec\u63a5\u6536\u5230\u7684\u503c\u3002 \u4e0b\u9762\u793a\u4f8b\u4e2d\u5c55\u793a\u4e86\u4e00\u4e2a\u5b9a\u4e49 Guess \u7c7b\u578b\u7684\u65b9\u6cd5\uff0c\u53ea\u6709\u5728 new \u51fd\u6570\u63a5\u6536\u5230 1 \u5230 100 \u4e4b\u95f4\u7684\u503c\u65f6\u624d\u4f1a\u521b\u5efa Guess \u7684\u5b9e\u4f8b\uff1a // \u4e00\u4e2a Guess \u7c7b\u578b\uff0c\u5b83\u53ea\u5728\u503c\u4f4d\u4e8e 1 \u548c 100 \u4e4b\u95f4\u65f6\u624d\u7ee7\u7eed // \u9996\u5148\uff0c\u5b9a\u4e49\u4e86\u4e00\u4e2a\u5305\u542b i32 \u7c7b\u578b\u5b57\u6bb5 value \u7684\u7ed3\u6784\u4f53 Guess\u3002\u8fd9\u91cc\u662f\u50a8\u5b58\u731c\u6d4b\u503c\u7684\u5730\u65b9\u3002 pub struct Guess { value : i32 , } impl Guess { // \u63a5\u7740\u5728 Guess \u4e0a\u5b9e\u73b0\u4e86\u4e00\u4e2a\u53eb\u505a new \u7684\u5173\u8054\u51fd\u6570\u6765\u521b\u5efa Guess \u7684\u5b9e\u4f8b\u3002 // new \u5b9a\u4e49\u4e3a\u63a5\u6536\u4e00\u4e2a i32 \u7c7b\u578b\u7684\u53c2\u6570 value \u5e76\u8fd4\u56de\u4e00\u4e2a Guess\u3002 pub fn new ( value : i32 ) -> Guess { // new \u51fd\u6570\u4e2d\u4ee3\u7801\u7684\u6d4b\u8bd5\u786e\u4fdd\u4e86\u5176\u503c\u662f\u5728 1 \u5230 100 \u4e4b\u95f4\u7684\u3002 if value < 1 || value > 100 { // \u5982\u679c value \u6ca1\u6709\u901a\u8fc7\u6d4b\u8bd5\u5219\u8c03\u7528 panic!\uff0c\u8fd9\u4f1a\u8b66\u544a\u8c03\u7528\u8fd9\u4e2a\u51fd\u6570\u7684\u7a0b\u5e8f\u5458\u6709\u4e00\u4e2a\u9700\u8981\u4fee\u6539\u7684 bug\uff0c // \u56e0\u4e3a\u521b\u5efa\u4e00\u4e2a value \u8d85\u51fa\u8303\u56f4\u7684 Guess \u5c06\u4f1a\u8fdd\u53cd Guess::new \u6240\u9075\u5faa\u7684\u5951\u7ea6\u3002 // Guess::new \u4f1a\u51fa\u73b0 panic \u7684\u6761\u4ef6\u5e94\u8be5\u5728\u5176\u516c\u6709 API \u6587\u6863\u4e2d\u88ab\u63d0\u53ca\uff1b panic! ( \"Guess value must be between 1 and 100, got {}.\" , value ); } // \u5982\u679c value \u901a\u8fc7\u4e86\u6d4b\u8bd5\uff0c\u6211\u4eec\u65b0\u5efa\u4e00\u4e2a Guess\uff0c\u5176\u5b57\u6bb5 value \u5c06\u88ab\u8bbe\u7f6e\u4e3a\u53c2\u6570 value \u7684\u503c\uff0c\u63a5\u7740\u8fd4\u56de\u8fd9\u4e2a Guess\u3002 Guess { value } } // \u63a5\u7740, \u5b9e\u73b0\u4e86\u4e00\u4e2a\u501f\u7528\u4e86 self \u7684\u65b9\u6cd5 value\uff0c\u5b83\u6ca1\u6709\u4efb\u4f55\u5176\u4ed6\u53c2\u6570\u5e76\u8fd4\u56de\u4e00\u4e2a i32\u3002 // \u8fd9\u7c7b\u65b9\u6cd5\u6709\u65f6\u88ab\u79f0\u4e3a getter\uff0c\u56e0\u4e3a\u5b83\u7684\u76ee\u7684\u5c31\u662f\u8fd4\u56de\u5bf9\u5e94\u5b57\u6bb5\u7684\u6570\u636e\u3002 // \u8fd9\u6837\u7684\u516c\u6709\u65b9\u6cd5\u662f\u5fc5\u8981\u7684\uff0c\u56e0\u4e3a Guess \u7ed3\u6784\u4f53\u7684 value \u5b57\u6bb5\u662f\u79c1\u6709\u7684\u3002 pub fn value ( & self ) -> i32 { self . value } } \u79c1\u6709\u7684\u5b57\u6bb5 value \u662f\u5f88\u91cd\u8981\u7684\uff0c\u8fd9\u6837\u4f7f\u7528 Guess \u7ed3\u6784\u4f53\u7684\u4ee3\u7801\u5c06\u4e0d\u5141\u8bb8\u76f4\u63a5\u8bbe\u7f6e value \u7684\u503c\uff1a\u8c03\u7528\u8005 \u5fc5\u987b \u4f7f\u7528 Guess::new \u65b9\u6cd5\u6765\u521b\u5efa\u4e00\u4e2a Guess \u7684\u5b9e\u4f8b\uff0c\u8fd9\u5c31\u786e\u4fdd\u4e86\u4e0d\u4f1a\u5b58\u5728\u4e00\u4e2a value \u6ca1\u6709\u901a\u8fc7 Guess::new \u51fd\u6570\u7684\u6761\u4ef6\u68c0\u67e5\u7684 Guess\u3002 \u4e8e\u662f\uff0c\u4e00\u4e2a\u63a5\u6536\uff08\u6216\u8fd4\u56de\uff09 1 \u5230 100 \u4e4b\u95f4\u6570\u5b57\u7684\u51fd\u6570\u5c31\u53ef\u4ee5\u58f0\u660e\u4e3a\u63a5\u6536\uff08\u6216\u8fd4\u56de\uff09 Guess \u7684\u5b9e\u4f8b\uff0c\u800c\u4e0d\u662f i32 \uff0c\u540c\u65f6\u5176\u51fd\u6570\u4f53\u4e2d\u4e5f\u65e0\u9700\u8fdb\u884c\u4efb\u4f55\u989d\u5916\u7684\u68c0\u67e5\u3002","title":"\u521b\u5efa\u81ea\u5b9a\u4e49\u7c7b\u578b\u8fdb\u884c\u6709\u6548\u6027\u9a8c\u8bc1"},{"location":"error-handing/#_10","text":"Rust \u7684\u9519\u8bef\u5904\u7406\u529f\u80fd\u88ab\u8bbe\u8ba1\u4e3a\u5e2e\u52a9\u4f60\u7f16\u5199\u66f4\u52a0\u5065\u58ee\u7684\u4ee3\u7801\u3002 panic! \u5b8f\u4ee3\u8868\u4e00\u4e2a\u7a0b\u5e8f\u65e0\u6cd5\u5904\u7406\u7684\u72b6\u6001\uff0c\u5e76\u505c\u6b62\u6267\u884c\u800c\u4e0d\u662f\u4f7f\u7528\u65e0\u6548\u6216\u4e0d\u6b63\u786e\u7684\u503c\u7ee7\u7eed\u5904\u7406\u3002 Rust \u7c7b\u578b\u7cfb\u7edf\u7684 Result \u679a\u4e3e\u4ee3\u8868\u64cd\u4f5c\u53ef\u80fd\u4f1a\u5728\u4e00\u79cd\u53ef\u4ee5\u6062\u590d\u7684\u60c5\u51b5\u4e0b\u5931\u8d25\u3002 \u53ef\u4ee5\u4f7f\u7528 Result \u6765\u544a\u8bc9\u4ee3\u7801\u8c03\u7528\u8005\u4ed6\u9700\u8981\u5904\u7406\u6f5c\u5728\u7684\u6210\u529f\u6216\u5931\u8d25\u3002 \u5728\u9002\u5f53\u7684\u573a\u666f\u4f7f\u7528 panic! \u548c Result \u5c06\u4f1a\u4f7f\u4f60\u7684\u4ee3\u7801\u5728\u9762\u5bf9\u4e0d\u53ef\u907f\u514d\u7684\u9519\u8bef\u65f6\u663e\u5f97\u66f4\u52a0\u53ef\u9760\u3002","title":"\u603b\u7ed3"},{"location":"guessing-game/","text":"\u731c\u6570\u6e38\u620f \u521b\u5efa\u65b0\u9879\u76ee cargo new guessing_game cd guessing_game \u5904\u7406\u4e00\u6b21\u731c\u6d4b\u8f93\u5165 \u6587\u4ef6\u540d: src/main.rs // \u9884\u5bfc\u5165 // io\u8f93\u5165/\u8f93\u51fa\u5e93\u5f15\u5165\u5f53\u524d\u4f5c\u7528\u57df; // io \u5e93\u6765\u81ea\u4e8e\u6807\u51c6\u5e93\uff0c\u4e5f\u88ab\u79f0\u4e3a std use std :: io ; // main \u51fd\u6570\u662f\u7a0b\u5e8f\u7684\u5165\u53e3\u70b9 // fn \u8bed\u6cd5\u58f0\u660e\u4e86\u4e00\u4e2a\u65b0\u51fd\u6570 // () \u8868\u660e\u6ca1\u6709\u53c2\u6570 // { \u4f5c\u4e3a\u51fd\u6570\u4f53\u7684\u5f00\u59cb fn main () { println! ( \"Guess the number!\" ); // println! \u662f\u4e00\u4e2a\u5728\u5c4f\u5e55\u4e0a\u6253\u5370\u5b57\u7b26\u4e32\u7684\u5b8f println! ( \"Please input your guess.\" ); // println! \u662f\u4e00\u4e2a\u5728\u5c4f\u5e55\u4e0a\u6253\u5370\u5b57\u7b26\u4e32\u7684\u5b8f // \u521b\u5efa\u4e00\u4e2a \u53d8\u91cf\uff08variable\uff09\u6765\u50a8\u5b58\u7528\u6237\u8f93\u5165 // \u5728 Rust \u4e2d\uff0c\u53d8\u91cf\u9ed8\u8ba4\u662f\u4e0d\u53ef\u53d8\u7684\uff0c\u8fd9\u610f\u5473\u7740\u4e00\u65e6\u6211\u4eec\u7ed9\u53d8\u91cf\u8d4b\u503c\uff0c\u8fd9\u4e2a\u503c\u5c31\u4e0d\u518d\u53ef\u4ee5\u4fee\u6539\u4e86\u3002 let mut guess = String :: new (); // \u5728\u53d8\u91cf\u540d\u524d\u4f7f\u7528 mut \u6765\u4f7f\u4e00\u4e2a\u53d8\u91cf\u53ef\u53d8 // String \u662f\u4e00\u4e2a\u6807\u51c6\u5e93\u63d0\u4f9b\u7684\u5b57\u7b26\u4e32\u7c7b\u578b\uff0c\u5b83\u662f UTF-8 \u7f16\u7801\u7684\u53ef\u589e\u957f\u6587\u672c\u5757\u3002 // ::new \u90a3\u4e00\u884c\u7684 :: \u8bed\u6cd5\u8868\u660e new \u662f String \u7c7b\u578b\u7684\u4e00\u4e2a \u5173\u8054\u51fd\u6570\uff08associated function\uff09\u3002 // \u5173\u8054\u51fd\u6570\u662f\u9488\u5bf9\u7c7b\u578b\u5b9e\u73b0\u7684\uff0c\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\u662f String\uff0c\u800c\u4e0d\u662f String \u7684\u67d0\u4e2a\u7279\u5b9a\u5b9e\u4f8b\u3002\u4e00\u4e9b\u8bed\u8a00\u4e2d\u628a\u5b83\u79f0\u4e3a \u9759\u6001\u65b9\u6cd5\uff08static method\uff09\u3002 // new \u51fd\u6570\u521b\u5efa\u4e86\u4e00\u4e2a\u65b0\u7684\u7a7a\u5b57\u7b26\u4e32\uff0c\u4f60\u4f1a\u53d1\u73b0\u5f88\u591a\u7c7b\u578b\u4e0a\u6709 new \u51fd\u6570\uff0c\u56e0\u4e3a\u5b83\u662f\u521b\u5efa\u7c7b\u578b\u5b9e\u4f8b\u7684\u60ef\u7528\u51fd\u6570\u540d\u3002 // \u603b\u7684\u6765\u8bf4\uff0clet mut guess = String::new(); \u8fd9\u4e00\u884c\u521b\u5efa\u4e86\u4e00\u4e2a\u53ef\u53d8\u53d8\u91cf\uff0c\u5f53\u524d\u5b83\u7ed1\u5b9a\u5230\u4e00\u4e2a\u65b0\u7684 String \u7a7a\u5b9e\u4f8b\u4e0a\u3002 // \u5982\u679c\u7a0b\u5e8f\u7684\u5f00\u5934\u6ca1\u6709\u4f7f\u7528 use std::io \u5f15\u5165 io \u5e93\uff0c\u6211\u4eec\u4ecd\u53ef\u4ee5\u901a\u8fc7\u628a\u51fd\u6570\u8c03\u7528\u5199\u6210 std::io::stdin \u6765\u4f7f\u7528\u51fd\u6570\u3002 // stdin \u51fd\u6570\u8fd4\u56de\u4e00\u4e2a std::io::Stdin \u7684\u5b9e\u4f8b\uff0c\u8fd9\u4ee3\u8868\u7ec8\u7aef\u6807\u51c6\u8f93\u5165\u53e5\u67c4\u7684\u7c7b\u578b\u3002 io :: stdin () . read_line ( & mut guess ) // \u4ece\u6807\u51c6\u8f93\u5165\u53e5\u67c4\u83b7\u53d6\u7528\u6237\u8f93\u5165\u3002 // \u5c06 &mut guess \u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\u7ed9 read_line() \u51fd\u6570\uff0c\u8ba9\u5176\u5c06\u7528\u6237\u8f93\u5165\u50a8\u5b58\u5230\u8fd9\u4e2a\u5b57\u7b26\u4e32\u4e2d\u3002 // read_line \u7684\u5de5\u4f5c\u662f\uff0c\u65e0\u8bba\u7528\u6237\u5728\u6807\u51c6\u8f93\u5165\u4e2d\u952e\u5165\u4ec0\u4e48\u5185\u5bb9\uff0c\u90fd\u5c06\u5176\u8ffd\u52a0\uff08\u4e0d\u4f1a\u8986\u76d6\u5176\u539f\u6709\u5185\u5bb9\uff09\u5230\u4e00\u4e2a\u5b57\u7b26\u4e32\u4e2d\uff0c\u56e0\u6b64\u5b83\u9700\u8981\u5b57\u7b26\u4e32\u4f5c\u4e3a\u53c2\u6570\u3002 // \u8fd9\u4e2a\u5b57\u7b26\u4e32\u53c2\u6570\u5e94\u8be5\u662f\u53ef\u53d8\u7684\uff0c\u4ee5\u4fbf read_line \u5c06\u7528\u6237\u8f93\u5165\u9644\u52a0\u4e0a\u53bb\u3002 // & \u8868\u793a\u8fd9\u4e2a\u53c2\u6570\u662f\u4e00\u4e2a \u5f15\u7528\uff08reference\uff09\uff0c\u5b83\u5141\u8bb8\u591a\u5904\u4ee3\u7801\u8bbf\u95ee\u540c\u4e00\u5904\u6570\u636e\uff0c\u800c\u65e0\u9700\u5728\u5185\u5b58\u4e2d\u591a\u6b21\u62f7\u8d1d\u3002 . expect ( \"Failed to read line\" ); // \u4f1a\u8fd4\u56de\u4e00\u4e2a\u7c7b\u578b\u4e3a Result \u7684\u503c\u3002 Result \u662f\u4e00\u79cd\u679a\u4e3e\u7c7b\u578b\uff0c\u901a\u5e38\u4e5f\u5199\u4f5c enum\u3002 // \u679a\u4e3e\u7c7b\u578b\u53d8\u91cf\u7684\u503c\u53ef\u4ee5\u662f\u591a\u79cd\u53ef\u80fd\u72b6\u6001\u4e2d\u7684\u4e00\u4e2a\u3002\u6211\u4eec\u628a\u6bcf\u79cd\u53ef\u80fd\u7684\u72b6\u6001\u79f0\u4e3a\u4e00\u79cd \u679a\u4e3e\u6210\u5458\uff08variant\uff09\u3002 // \u8fd9\u91cc\u7684 Result \u7c7b\u578b\u5c06\u7528\u6765\u7f16\u7801\u9519\u8bef\u5904\u7406\u7684\u4fe1\u606f\u3002 // Result \u7684\u6210\u5458\u662f Ok \u548c Err\uff0c // Ok \u6210\u5458\u8868\u793a\u64cd\u4f5c\u6210\u529f\uff0c\u5185\u90e8\u5305\u542b\u6210\u529f\u65f6\u4ea7\u751f\u7684\u503c\u3002 // Err \u6210\u5458\u5219\u610f\u5473\u7740\u64cd\u4f5c\u5931\u8d25\uff0c\u5e76\u4e14\u5305\u542b\u5931\u8d25\u7684\u524d\u56e0\u540e\u679c\u3002 // Result \u7c7b\u578b\u7684\u503c\uff0c\u50cf\u5176\u4ed6\u7c7b\u578b\u4e00\u6837\uff0c\u62e5\u6709\u5b9a\u4e49\u4e8e\u5176\u4e0a\u7684\u65b9\u6cd5\u3002Result \u7684\u5b9e\u4f8b\u62e5\u6709 expect \u65b9\u6cd5\u3002 // \u5982\u679c io::Result \u5b9e\u4f8b\u7684\u503c\u662f Err\uff0cexpect \u4f1a\u5bfc\u81f4\u7a0b\u5e8f\u5d29\u6e83\uff0c\u5e76\u663e\u793a\u5f53\u505a\u53c2\u6570\u4f20\u9012\u7ed9 expect \u7684\u4fe1\u606f\u3002 // \u5982\u679c read_line \u65b9\u6cd5\u8fd4\u56de Err\uff0c\u5219\u53ef\u80fd\u662f\u6765\u6e90\u4e8e\u5e95\u5c42\u64cd\u4f5c\u7cfb\u7edf\u9519\u8bef\u7684\u7ed3\u679c\u3002 // \u5982\u679c Result \u5b9e\u4f8b\u7684\u503c\u662f Ok\uff0cexpect \u4f1a\u83b7\u53d6 Ok \u4e2d\u7684\u503c\u5e76\u539f\u6837\u8fd4\u56de\u3002 // \u5728\u672c\u4f8b\u4e2d\uff0c\u8fd9\u4e2a\u503c\u662f\u7528\u6237\u8f93\u5165\u5230\u6807\u51c6\u8f93\u5165\u4e2d\u7684\u5b57\u8282\u6570\u3002 // \u5982\u679c\u4e0d\u8c03\u7528 expect\uff0c\u7a0b\u5e8f\u4e5f\u80fd\u7f16\u8bd1\uff0c\u4e0d\u8fc7\u4f1a\u51fa\u73b0\u4e00\u4e2a\u8b66\u544a\uff1a // note: this `Result` may be an `Err` variant, which should be handled // Rust \u8b66\u544a\u6211\u4eec\u6ca1\u6709\u4f7f\u7528 read_line \u7684\u8fd4\u56de\u503c Result\uff0c\u8bf4\u660e\u6709\u4e00\u4e2a\u53ef\u80fd\u7684\u9519\u8bef\u6ca1\u6709\u5904\u7406\u3002 // \u6d88\u9664\u8b66\u544a\u7684\u6b63\u786e\u505a\u6cd5\u662f\u5b9e\u9645\u53bb\u7f16\u5199\u9519\u8bef\u5904\u7406\u4ee3\u7801\uff0c\u4e0d\u8fc7\u7531\u4e8e\u6211\u4eec\u5c31\u662f\u5e0c\u671b\u7a0b\u5e8f\u5728\u51fa\u73b0\u95ee\u9898\u65f6\u7acb\u5373\u5d29\u6e83\uff0c\u6240\u4ee5\u76f4\u63a5\u4f7f\u7528 expect\u3002 // \u7ee7\u7eed\u6df1\u5165\u5b66\u4e60\u7684\u8bdd\uff0c\u5c06\u4f1a\u5b66\u4e60\u5230\u5982\u4f55\u4ece\u9519\u8bef\u4e2d\u6062\u590d\u3002 println! ( \"You guessed: {guess}\" ); // \u6253\u5370\u4e86\u5b58\u50a8\u7528\u6237\u8f93\u5165\u7684\u5b57\u7b26\u4e32\u3002 // \u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\uff0c\u91cc\u9762\u7684 {} \u662f\u9884\u7559\u5728\u7279\u5b9a\u4f4d\u7f6e\u7684\u5360\u4f4d\u7b26 // \u4f7f\u7528 {} \u4e5f\u53ef\u4ee5\u6253\u5370\u591a\u4e2a\u503c\uff1a // \u7b2c\u4e00\u5bf9 {} \u4f7f\u7528\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u4e4b\u540e\u7684\u7b2c\u4e00\u4e2a\u503c\uff0c\u7b2c\u4e8c\u5bf9\u5219\u4f7f\u7528\u7b2c\u4e8c\u4e2a\u503c\uff0c\u4f9d\u6b64\u7c7b\u63a8\u3002\u8c03 // \u7528\u4e00\u6b21 println! \u6253\u5370\u591a\u4e2a\u503c\u770b\u8d77\u6765\u50cf\u8fd9\u6837\uff1a // println!(\"x = {} and y = {}\", x, y); } \u751f\u6210\u4e00\u4e2a\u79d8\u5bc6\u6570\u5b57 Rust \u6807\u51c6\u5e93\u4e2d\u5c1a\u672a\u5305\u542b\u968f\u673a\u6570\u529f\u80fd\u3002\u7136\u800c\uff0cRust \u56e2\u961f\u8fd8\u662f\u63d0\u4f9b\u4e86\u4e00\u4e2a\u5305\u542b\u4e0a\u8ff0\u529f\u80fd\u7684 rand crate \u3002 rand crate \u662f\u4e00\u4e2a \u5e93 crate \uff0c \u5e93 crate \u53ef\u4ee5\u5305\u542b\u4efb\u610f\u80fd\u88ab\u5176\u4ed6\u7a0b\u5e8f\u4f7f\u7528\u7684\u4ee3\u7801\uff0c\u4f46\u662f\u4e0d\u80fd\u81ea\u6267\u884c\u3002 \u5728\u4f7f\u7528 rand \u7f16\u5199\u4ee3\u7801\u4e4b\u524d\uff0c\u9700\u8981\u4fee\u6539 Cargo.toml \u6587\u4ef6\uff0c\u5f15\u5165\u4e00\u4e2a rand \u4f9d\u8d56\u3002\u73b0\u5728\u6253\u5f00\u8fd9\u4e2a\u6587\u4ef6\u5e76\u5c06\u4e0b\u9762\u8fd9\u4e00\u884c\u6dfb\u52a0\u5230 [dependencies] \u7247\u6bb5\u6807\u9898\u4e4b\u4e0b\u3002 \u6587\u4ef6\u540d: Cargo.toml rand = \"0.8.3\" [dependencies] \u7247\u6bb5\u544a\u8bc9 Cargo \u672c\u9879\u76ee\u4f9d\u8d56\u4e86\u54ea\u4e9b\u5916\u90e8 crate \u53ca\u5176\u7248\u672c\u3002\u672c\u4f8b\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u8bed\u4e49\u5316\u7248\u672c 0.8.3 \u6765\u6307\u5b9a rand crate \u7684\u7248\u672c\u3002Cargo \u7406\u89e3 \u8bed\u4e49\u5316\u7248\u672c \uff08Semantic Versioning\uff09\uff08\u6709\u65f6\u4e5f\u79f0\u4e3a SemVer\uff09\uff0c\u8fd9\u662f\u4e00\u79cd\u5b9a\u4e49\u7248\u672c\u53f7\u7684\u6807\u51c6\u3002 0.8.3 \u4e8b\u5b9e\u4e0a\u662f ^0.8.3 \u7684\u7b80\u5199\uff0c\u5b83\u8868\u793a\u4efb\u4f55\u81f3\u5c11\u662f 0.8.3 \u4f46\u5c0f\u4e8e 0.9.0 \u7684\u7248\u672c\u3002 Cargo \u8ba4\u4e3a\u8fd9\u4e9b\u7248\u672c\u4e0e 0.8.3 \u7248\u672c\u7684\u516c\u6709 API \u76f8\u517c\u5bb9\uff0c\u8fd9\u6837\u7684\u7248\u672c\u6307\u5b9a\u786e\u4fdd\u4e86\u6211\u4eec\u53ef\u4ee5\u83b7\u53d6\u80fd\u4f7f\u672c\u7ae0\u4ee3\u7801\u7f16\u8bd1\u7684\u6700\u65b0\u7684\u8865\u4e01\uff08patch\uff09\u7248\u672c\u3002\u4efb\u4f55\u5927\u4e8e\u7b49\u4e8e 0.9.0 \u7684\u7248\u672c\u4e0d\u80fd\u4fdd\u8bc1\u548c\u63a5\u4e0b\u6765\u7684\u793a\u4f8b\u91c7\u7528\u4e86\u76f8\u540c\u7684 API\u3002 \u73b0\u5728\uff0c\u4e0d\u4fee\u6539\u4efb\u4f55\u4ee3\u7801\uff0c\u6784\u5efa\u9879\u76ee\uff0c\u5982\u4e0b\u6240\u793a\uff1a $ cargo build Updating crates.io index Downloaded ppv-lite86 v0.2.17 Downloaded rand v0.8.5 Downloaded rand_chacha v0.3.1 Downloaded rand_core v0.6.4 Downloaded cfg-if v1.0.0 Downloaded getrandom v0.2.8 Downloaded libc v0.2.138 Downloaded 7 crates ( 794 .8 KB ) in 2 .72s Compiling libc v0.2.138 Compiling cfg-if v1.0.0 Compiling ppv-lite86 v0.2.17 Compiling getrandom v0.2.8 Compiling rand_core v0.6.4 Compiling rand_chacha v0.3.1 Compiling rand v0.8.5 Compiling guessing-game v0.1.0 ( file:///projects/guessing_game ) Finished dev [ unoptimized + debuginfo ] target ( s ) in 3m 45s # \u5c06 rand crate \u6dfb\u52a0\u4e3a\u4f9d\u8d56\u4e4b\u540e\u8fd0\u884c cargo build \u7684\u8f93\u51fa \u73b0\u5728\u7cfb\u7edf\u6709\u4e86\u4e00\u4e2a\u5916\u90e8\u4f9d\u8d56\uff0cCargo \u4ece registry \u4e0a\u83b7\u53d6\u6240\u6709\u5305\u7684\u6700\u65b0\u7248\u672c\u4fe1\u606f\uff0c\u8fd9\u662f\u4e00\u4efd\u6765\u81ea Crates.io \u7684\u6570\u636e\u62f7\u8d1d\u3002Crates.io \u662f Rust \u751f\u6001\u73af\u5883\u4e2d\u7684\u5f00\u53d1\u8005\u4eec\u5411\u4ed6\u4eba\u8d21\u732e Rust \u5f00\u6e90\u9879\u76ee\u7684\u5730\u65b9\u3002 \u5728\u66f4\u65b0\u5b8c registry \u540e\uff0cCargo \u68c0\u67e5 [dependencies] \u90e8\u5206\u5e76\u4e0b\u8f7d\u5217\u8868\u4e2d\u5305\u542b\u4f46\u8fd8\u672a\u4e0b\u8f7d\u7684 crates \u3002\u672c\u4f8b\u4e2d\uff0c\u867d\u7136\u53ea\u58f0\u660e\u4e86 rand \u4e00\u4e2a\u4f9d\u8d56\uff0c\u7136\u800c Cargo \u8fd8\u662f\u989d\u5916\u83b7\u53d6\u4e86 rand \u6240\u9700\u8981\u7684\u5176\u4ed6 crates\uff0c\u56e0\u4e3a rand \u4f9d\u8d56\u5b83\u4eec\u6765\u6b63\u5e38\u5de5\u4f5c\u3002\u4e0b\u8f7d\u5b8c\u6210\u540e\uff0cRust \u7f16\u8bd1\u4f9d\u8d56\uff0c\u7136\u540e\u4f7f\u7528\u8fd9\u4e9b\u4f9d\u8d56\u7f16\u8bd1\u9879\u76ee\u3002 \u6587\u4ef6\u540d: src/main.rs // \u65b0\u589e\u4e86\u4e00\u884c use rand::Rng\u3002 // Rng \u662f\u4e00\u4e2a trait\uff0c\u5b83\u5b9a\u4e49\u4e86\u968f\u673a\u6570\u751f\u6210\u5668\u5e94\u5b9e\u73b0\u7684\u65b9\u6cd5\uff0c\u60f3\u4f7f\u7528\u8fd9\u4e9b\u65b9\u6cd5\u7684\u8bdd\uff0c\u6b64 trait \u5fc5\u987b\u5728\u4f5c\u7528\u57df\u4e2d\u3002 use rand :: Rng ; use std :: io ; fn main () { println! ( \"\u731c\u6570\u6e38\u620f\uff01\uff01\" ); let secret_number = rand :: thread_rng (). gen_range ( 1 ..= 100 ); // \u8c03\u7528\u4e86 rand::thread_rng \u51fd\u6570\u63d0\u4f9b\u5b9e\u9645\u4f7f\u7528\u7684\u968f\u673a\u6570\u751f\u6210\u5668\uff1a\u5b83\u4f4d\u4e8e\u5f53\u524d\u6267\u884c\u7ebf\u7a0b\u7684\u672c\u5730\u73af\u5883\u4e2d\uff0c\u5e76\u4ece\u64cd\u4f5c\u7cfb\u7edf\u83b7\u53d6 seed\u3002 // \u63a5\u7740\u8c03\u7528\u968f\u673a\u6570\u751f\u6210\u5668\u7684 gen_range \u65b9\u6cd5\u3002\u8fd9\u4e2a\u65b9\u6cd5\u7531 use rand::Rng \u8bed\u53e5\u5f15\u5165\u5230\u4f5c\u7528\u57df\u7684 Rng trait \u5b9a\u4e49\u3002 // gen_range \u65b9\u6cd5\u83b7\u53d6\u4e00\u4e2a\u8303\u56f4\u8868\u8fbe\u5f0f\uff08range expression\uff09\u4f5c\u4e3a\u53c2\u6570\uff0c\u5e76\u751f\u6210\u4e00\u4e2a\u5728\u6b64\u8303\u56f4\u4e4b\u95f4\u7684\u968f\u673a\u6570\u3002 // \u8fd9\u91cc\u4f7f\u7528\u7684\u8fd9\u7c7b\u8303\u56f4\u8868\u8fbe\u5f0f\u4f7f\u7528\u4e86 start..=end \u8fd9\u6837\u7684\u5f62\u5f0f\uff0c\u4e5f\u5c31\u662f\u8bf4\u5305\u542b\u4e86\u4e0a\u4e0b\u7aef\u70b9\uff0c\u6240\u4ee5\u9700\u8981\u6307\u5b9a 1..=100 \u6765\u8bf7\u6c42\u4e00\u4e2a 1 \u548c 100 \u4e4b\u95f4\u7684\u6570\u3002 println! ( \"\u751f\u6210\u7684\u5bc6\u7801\u6570\u5b57\u662f: {secret_number}\" ); println! ( \"\u8bf7\u8f93\u5165\u4e00\u4e2a\u503c:\" ); let mut guess = String :: new (); io :: stdin (). read_line ( & mut guess ). expect ( \"\u8bfb\u6570\u5931\u8d25!\" ); println! ( \"\u4f60\u731c\u6d4b\u7684\u6570\u4e3a: {guess}\" ) } \u6ce8\u610f \uff1a \u4f60\u4e0d\u53ef\u80fd\u51ed\u7a7a\u5c31\u77e5\u9053\u5e94\u8be5 use \u54ea\u4e2a trait \u4ee5\u53ca\u8be5\u4ece crate \u4e2d\u8c03\u7528\u54ea\u4e2a\u65b9\u6cd5\uff0c\u56e0\u6b64\u6bcf\u4e2acrate \u6709\u4f7f\u7528\u8bf4\u660e\u6587\u6863\u3002 Cargo \u6709\u4e00\u4e2a\u5f88\u68d2\u7684\u529f\u80fd\u662f\uff1a\u8fd0\u884c cargo doc --open \u547d\u4ee4\u6765\u6784\u5efa\u6240\u6709\u672c\u5730\u4f9d\u8d56\u63d0\u4f9b\u7684\u6587\u6863\uff0c\u5e76\u5728\u6d4f\u89c8\u5668\u4e2d\u6253\u5f00\u3002 \u4f8b\u5982\uff0c\u5047\u8bbe\u4f60\u5bf9 rand crate \u4e2d\u7684\u5176\u4ed6\u529f\u80fd\u611f\u5174\u8da3\uff0c\u4f60\u53ef\u4ee5\u8fd0\u884c cargo doc --open \u5e76\u70b9\u51fb\u5de6\u4fa7\u5bfc\u822a\u680f\u4e2d\u7684 rand\u3002 \u6bd4\u8f83\u731c\u6d4b\u7684\u6570\u5b57\u548c\u79d8\u5bc6\u6570\u5b57 \u6587\u4ef6\u540d: src/main.rs use rand :: Rng ; use std :: cmp :: Ordering ; // \u4ece\u6807\u51c6\u5e93\u5f15\u5165\u4e86\u4e00\u4e2a\u53eb\u505a std::cmp::Ordering \u7684\u7c7b\u578b\u5230\u4f5c\u7528\u57df\u4e2d\u3002 // Ordering \u4e5f\u662f\u4e00\u4e2a\u679a\u4e3e\uff0c\u4e0d\u8fc7\u5b83\u7684\u6210\u5458\u662f Less\u3001Greater \u548c Equal\u3002 // \u8fd9\u662f\u6bd4\u8f83\u4e24\u4e2a\u503c\u65f6\u53ef\u80fd\u51fa\u73b0\u7684\u4e09\u79cd\u7ed3\u679c\u3002 use std :: io ; fn main () { println! ( \"\u731c\u6570\u6e38\u620f\uff01\uff01\" ); let secret_number = rand :: thread_rng (). gen_range ( 1 ..= 100 ); println! ( \"\u751f\u6210\u7684\u5bc6\u7801\u6570\u5b57\u662f: {secret_number}\" ); println! ( \"\u8bf7\u8f93\u5165\u4e00\u4e2a\u503c:\" ); let mut guess = String :: new (); io :: stdin (). read_line ( & mut guess ). expect ( \"\u8bfb\u6570\u5931\u8d25!\" ); println! ( \"\u4f60\u731c\u6d4b\u7684\u6570\u4e3a: {guess}\" ); match guess . cmp ( & secret_number ){ // cmp \u65b9\u6cd5\u7528\u6765\u6bd4\u8f83\u4e24\u4e2a\u503c\u5e76\u53ef\u4ee5\u5728\u4efb\u4f55\u53ef\u6bd4\u8f83\u7684\u503c\u4e0a\u8c03\u7528\u3002 // \u5b83\u83b7\u53d6\u4e00\u4e2a\u88ab\u6bd4\u8f83\u503c\u7684\u5f15\u7528\uff1a\u8fd9\u91cc\u662f\u628a guess \u4e0e secret_number \u505a\u6bd4\u8f83\u3002 // \u7136\u540e\u5b83\u4f1a\u8fd4\u56de\u4e00\u4e2a\u521a\u624d\u901a\u8fc7 use \u5f15\u5165\u4f5c\u7528\u57df\u7684 Ordering \u679a\u4e3e\u7684\u6210\u5458\u3002 // \u4f7f\u7528\u4e00\u4e2a match \u8868\u8fbe\u5f0f\uff0c\u6839\u636e\u5bf9 guess \u548c secret_number \u8c03\u7528 cmp \u8fd4\u56de\u7684 Ordering \u6210\u5458\u6765\u51b3\u5b9a\u63a5\u4e0b\u6765\u505a\u4ec0\u4e48\u3002 Ordering :: Less => println! ( \"\u592a\u5c0f\u4e86\uff01\" ), Ordering :: Greater => println! ( \"\u592a\u5927\u4e86\uff01\" ), Ordering :: Equal => println! ( \"\u731c\u5bf9\u4e86\uff01\" ), } } \u4e00\u4e2a match \u8868\u8fbe\u5f0f\u7531 \u5206\u652f\uff08arms\uff09 \u6784\u6210\u3002 \u4e00\u4e2a\u5206\u652f\u5305\u542b\u4e00\u4e2a \u6a21\u5f0f\uff08pattern\uff09\u548c\u8868\u8fbe\u5f0f\u5f00\u5934\u7684\u503c\u4e0e\u5206\u652f\u6a21\u5f0f\u76f8\u5339\u914d\u65f6\u5e94\u8be5\u6267\u884c\u7684\u4ee3\u7801\u3002 Rust \u83b7\u53d6\u63d0\u4f9b\u7ed9 match \u7684\u503c\u5e76\u6328\u4e2a\u68c0\u67e5\u6bcf\u4e2a\u5206\u652f\u7684\u6a21\u5f0f\u3002 \u6b64\u65f6\u8fdb\u884c cargo build \u4f1a\u51fa\u73b0\u5982\u4e0b\u9519\u8bef: cargo build Compiling guessing-game v0.1.0 ( /files/rust-example-apps/src/guessing-game ) error [ E0308 ] : mismatched types --> src/main.rs:20:21 | 20 | match guess.cmp ( & secret_number ) { | --- ^^^^^^^^^^^^^^ expected struct ` String ` , found integer | | | arguments to this function are incorrect | = note: expected reference ` & String ` found reference ` & { integer } ` note: associated function defined here For more information about this error, try ` rustc --explain E0308 ` . error: could not compile ` guessing-game ` due to previous error \u9519\u8bef\u7684\u6838\u5fc3\u8868\u660e\u8fd9\u91cc\u6709 \u4e0d\u5339\u914d\u7684\u7c7b\u578b\uff08mismatched types\uff09 \u3002 Rust \u6709\u4e00\u4e2a\u9759\u6001\u5f3a\u7c7b\u578b\u7cfb\u7edf\uff0c\u540c\u65f6\u4e5f\u6709\u7c7b\u578b\u63a8\u65ad\u3002 \u5f53\u6211\u4eec\u5199\u51fa let guess = String::new() \u65f6\uff0cRust \u63a8\u65ad\u51fa guess \u5e94\u8be5\u662f String \u7c7b\u578b\uff0c\u5e76\u4e0d\u9700\u8981\u6211\u4eec\u5199\u51fa\u7c7b\u578b\u3002 \u53e6\u4e00\u65b9\u9762\uff0csecret_number\uff0c\u662f\u6570\u5b57\u7c7b\u578b\u3002\u51e0\u4e2a\u6570\u5b57\u7c7b\u578b\u62e5\u6709 1 \u5230 100 \u4e4b\u95f4\u7684\u503c\uff1a32 \u4f4d\u6570\u5b57 i32\uff1b32 \u4f4d\u65e0\u7b26\u53f7\u6570\u5b57 u32\uff1b64 \u4f4d\u6570\u5b57 i64 \u7b49\u7b49\u3002 Rust \u9ed8\u8ba4\u4f7f\u7528 i32\uff0c\u6240\u4ee5\u5b83\u662f secret_number \u7684\u7c7b\u578b\uff0c\u9664\u975e\u589e\u52a0\u7c7b\u578b\u4fe1\u606f\uff0c\u6216\u4efb\u4f55\u80fd\u8ba9 Rust \u63a8\u65ad\u51fa\u4e0d\u540c\u6570\u503c\u7c7b\u578b\u7684\u4fe1\u606f\u3002 \u8fd9\u91cc\u9519\u8bef\u7684\u539f\u56e0\u5728\u4e8e Rust \u4e0d\u4f1a\u6bd4\u8f83\u5b57\u7b26\u4e32\u7c7b\u578b\u548c\u6570\u5b57\u7c7b\u578b\u3002 \u6240\u4ee5\u6211\u4eec\u5fc5\u987b\u628a\u4ece\u8f93\u5165\u4e2d\u8bfb\u53d6\u5230\u7684 String \u8f6c\u6362\u4e3a\u4e00\u4e2a\u771f\u6b63\u7684\u6570\u5b57\u7c7b\u578b\uff0c\u624d\u597d\u4e0e\u79d8\u5bc6\u6570\u5b57\u8fdb\u884c\u6bd4\u8f83\u3002\u8fd9\u53ef\u4ee5\u901a\u8fc7\u5728 main \u51fd\u6570\u4f53\u4e2d\u589e\u52a0\u5982\u4e0b\u4ee3\u7801\u6765\u5b9e\u73b0\uff1a \u6587\u4ef6\u540d: src/main.rs use rand :: Rng ; use std :: cmp :: Ordering ; use std :: io ; fn main () { println! ( \"\u731c\u6570\u6e38\u620f\uff01\uff01\" ); let secret_number = rand :: thread_rng (). gen_range ( 1 ..= 100 ); println! ( \"\u751f\u6210\u7684\u5bc6\u7801\u6570\u5b57\u662f: {secret_number}\" ); println! ( \"\u8bf7\u8f93\u5165\u4e00\u4e2a\u503c:\" ); let mut guess = String :: new (); io :: stdin (). read_line ( & mut guess ). expect ( \"\u8bfb\u6570\u5931\u8d25!\" ); let guess : u32 = guess . trim (). parse (). expect ( \"\u8bf7\u8f93\u5165\u6570\u5b57!\" ); // \u8fd9\u91cc\u521b\u5efa\u4e86\u4e00\u4e2a\u53eb\u505a guess \u7684\u53d8\u91cf\u3002 // \u4e0d\u8fc7\u7b49\u7b49\uff0c\u4e0d\u662f\u5df2\u7ecf\u6709\u4e86\u4e00\u4e2a\u53eb\u505a guess \u7684\u53d8\u91cf\u4e86\u5417\uff1f // \u786e\u5b9e\u5982\u6b64\uff0c\u4e0d\u8fc7 Rust \u5141\u8bb8\u7528\u4e00\u4e2a\u65b0\u503c\u6765 \u9690\u85cf \uff08shadow\uff09 guess \u4e4b\u524d\u7684\u503c\u3002 // \u8fd9\u4e2a\u529f\u80fd\u5e38\u7528\u5728\u9700\u8981\u8f6c\u6362\u503c\u7c7b\u578b\u4e4b\u7c7b\u7684\u573a\u666f\u3002 // \u5b83\u5141\u8bb8\u6211\u4eec\u590d\u7528 guess \u53d8\u91cf\u7684\u540d\u5b57\uff0c\u800c\u4e0d\u662f\u88ab\u8feb\u521b\u5efa\u4e24\u4e2a\u4e0d\u540c\u53d8\u91cf\uff0c\u8bf8\u5982 guess_str \u548c guess \u4e4b\u7c7b\u3002 // \u5c06\u8fd9\u4e2a\u65b0\u53d8\u91cf\u7ed1\u5b9a\u5230 guess.trim().parse() \u8868\u8fbe\u5f0f\u4e0a\u3002 // \u8868\u8fbe\u5f0f\u4e2d\u7684 guess \u6307\u7684\u662f\u5305\u542b\u8f93\u5165\u7684\u5b57\u7b26\u4e32\u7c7b\u578b guess \u53d8\u91cf\u3002 // String \u5b9e\u4f8b\u7684 trim \u65b9\u6cd5\u4f1a\u53bb\u9664\u5b57\u7b26\u4e32\u5f00\u5934\u548c\u7ed3\u5c3e\u7684\u7a7a\u767d\u5b57\u7b26\uff0c\u6211\u4eec\u5fc5\u987b\u6267\u884c\u6b64\u65b9\u6cd5\u624d\u80fd\u5c06\u5b57\u7b26\u4e32\u4e0e u32 \u6bd4\u8f83\uff0c\u56e0\u4e3a u32 \u53ea\u80fd\u5305\u542b\u6570\u503c\u578b\u6570\u636e\u3002 // \u7528\u6237\u5fc5\u987b\u8f93\u5165 enter \u952e\u624d\u80fd\u8ba9 read_line \u8fd4\u56de\u5e76\u8f93\u5165\u4ed6\u4eec\u7684\u731c\u60f3\uff0c\u8fd9\u5c06\u4f1a\u5728\u5b57\u7b26\u4e32\u4e2d\u589e\u52a0\u4e00\u4e2a\u6362\u884c\uff08newline\uff09\u7b26\u3002 // \u4f8b\u5982\uff0c\u7528\u6237\u8f93\u5165 5 \u5e76\u6309\u4e0b enter, guess \u770b\u8d77\u6765\u50cf\u8fd9\u6837\uff1a5\\n \u6216\u8005 5\\r\\n\u3002 // \\n \u4ee3\u8868 \u201c\u6362\u884c\u201d\uff0c\u56de\u8f66\u952e\uff1b\\r \u4ee3\u8868 \u201c\u56de\u8f66\u201d\uff0c\u56de\u8f66\u952e\u3002 // trim \u65b9\u6cd5\u4f1a\u6d88\u9664 \\n \u6216\u8005 \\r\\n\uff0c\u53ea\u7559\u4e0b 5\u3002 // \u5b57\u7b26\u4e32\u7684 parse \u65b9\u6cd5 \u5c06\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u5176\u4ed6\u7c7b\u578b\u3002 // \u8fd9\u91cc\u7528\u5b83\u6765\u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u503c\u3002\u6211\u4eec\u9700\u8981\u544a\u8bc9 Rust \u5177\u4f53\u7684\u6570\u5b57\u7c7b\u578b\uff0c\u8fd9\u91cc\u901a\u8fc7 let guess: u32 \u6307\u5b9a\u3002 // guess \u540e\u9762\u7684\u5192\u53f7\uff08:\uff09\u544a\u8bc9 Rust \u6211\u4eec\u6307\u5b9a\u4e86\u53d8\u91cf\u7684\u7c7b\u578b\u3002 // Rust \u6709\u4e00\u4e9b\u5185\u5efa\u7684\u6570\u5b57\u7c7b\u578b\uff1bu32 \u662f\u4e00\u4e2a\u65e0\u7b26\u53f7\u7684 32 \u4f4d\u6574\u578b\u3002 // \u5bf9\u4e8e\u4e0d\u5927\u7684\u6b63\u6574\u6570\u6765\u8bf4\uff0c\u5b83\u662f\u4e0d\u9519\u7684\u9ed8\u8ba4\u7c7b\u578b\uff0c\u7b2c\u4e09\u7ae0\u8fd8\u4f1a\u8bb2\u5230\u5176\u4ed6\u6570\u5b57\u7c7b\u578b\u3002 // \u53e6\u5916\uff0c\u7a0b\u5e8f\u4e2d\u7684 u32 \u6ce8\u89e3\u4ee5\u53ca\u4e0e secret_number \u7684\u6bd4\u8f83\uff0c\u610f\u5473\u7740 Rust \u4f1a\u63a8\u65ad\u51fa secret_number \u4e5f\u662f u32 \u7c7b\u578b\u3002 // \u73b0\u5728\u53ef\u4ee5\u4f7f\u7528\u76f8\u540c\u7c7b\u578b\u6bd4\u8f83\u4e24\u4e2a\u503c\u4e86\uff01 // parse \u65b9\u6cd5\u53ea\u6709\u5728\u5b57\u7b26\u903b\u8f91\u4e0a\u53ef\u4ee5\u8f6c\u6362\u4e3a\u6570\u5b57\u7684\u65f6\u5019\u624d\u80fd\u5de5\u4f5c\u6240\u4ee5\u975e\u5e38\u5bb9\u6613\u51fa\u9519\u3002 // \u4f8b\u5982\uff0c\u5b57\u7b26\u4e32\u4e2d\u5305\u542b A\ud83d\udc4d%\uff0c\u5c31\u65e0\u6cd5\u5c06\u5176\u8f6c\u6362\u4e3a\u4e00\u4e2a\u6570\u5b57\u3002 // \u56e0\u6b64\uff0cparse \u65b9\u6cd5\u8fd4\u56de\u4e00\u4e2a Result \u7c7b\u578b\u3002 // \u50cf\u4e4b\u524d \u201c\u4f7f\u7528 Result \u7c7b\u578b\u6765\u5904\u7406\u6f5c\u5728\u7684\u9519\u8bef\u201d \u8ba8\u8bba\u7684 read_line \u65b9\u6cd5\u90a3\u6837\uff0c\u518d\u6b21\u6309\u90e8\u5c31\u73ed\u7684\u7528 expect \u65b9\u6cd5\u5904\u7406\u5373\u53ef\u3002 // \u5982\u679c parse \u4e0d\u80fd\u4ece\u5b57\u7b26\u4e32\u751f\u6210\u4e00\u4e2a\u6570\u5b57\uff0c\u8fd4\u56de\u4e00\u4e2a Result \u7684 Err \u6210\u5458\u65f6\uff0cexpect \u4f1a\u4f7f\u6e38\u620f\u5d29\u6e83\u5e76\u6253\u5370\u9644\u5e26\u7684\u4fe1\u606f\u3002 // \u5982\u679c parse \u6210\u529f\u5730\u5c06\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u4e00\u4e2a\u6570\u5b57\uff0c\u5b83\u4f1a\u8fd4\u56de Result \u7684 Ok \u6210\u5458\uff0c\u7136\u540e expect \u4f1a\u8fd4\u56de Ok \u503c\u4e2d\u7684\u6570\u5b57\u3002 println! ( \"\u4f60\u731c\u6d4b\u7684\u6570\u4e3a: {guess}\" ); match guess . cmp ( & secret_number ) { Ordering :: Less => println! ( \"\u592a\u5c0f\u4e86\uff01\" ), Ordering :: Greater => println! ( \"\u592a\u5927\u4e86\uff01\" ), Ordering :: Equal => println! ( \"\u731c\u5bf9\u4e86\uff01\" ), } } \u4f7f\u7528\u5faa\u73af\u6765\u5141\u8bb8\u591a\u6b21\u731c\u6d4b loop \u5173\u952e\u5b57\u521b\u5efa\u4e86\u4e00\u4e2a\u65e0\u9650\u5faa\u73af\u3002 \u6587\u4ef6\u540d: src/main.rs use rand :: Rng ; use std :: cmp :: Ordering ; use std :: io ; fn main () { println! ( \"\u731c\u6570\u6e38\u620f\uff01\uff01\" ); let secret_number = rand :: thread_rng (). gen_range ( 1 ..= 100 ); println! ( \"\u751f\u6210\u7684\u5bc6\u7801\u6570\u5b57\u662f: {secret_number}\" ); loop { println! ( \"\u8bf7\u8f93\u5165\u4e00\u4e2a\u503c:\" ); let mut guess = String :: new (); io :: stdin (). read_line ( & mut guess ). expect ( \"\u8bfb\u6570\u5931\u8d25!\" ); let guess : u32 = guess . trim (). parse (). expect ( \"\u8bf7\u8f93\u5165\u6570\u5b57!\" ); println! ( \"\u4f60\u731c\u6d4b\u7684\u6570\u4e3a: {guess}\" ); match guess . cmp ( & secret_number ) { Ordering :: Less => println! ( \"\u592a\u5c0f\u4e86\uff01\" ), Ordering :: Greater => println! ( \"\u592a\u5927\u4e86\uff01\" ), Ordering :: Equal => println! ( \"\u731c\u5bf9\u4e86\uff01\" ), } } } \u5982\u4e0a\u6240\u793a\uff0c\u6211\u4eec\u5c06\u63d0\u793a\u7528\u6237\u731c\u6d4b\u4e4b\u540e\u7684\u6240\u6709\u5185\u5bb9\u79fb\u52a8\u5230\u4e86\u5faa\u73af\u4e2d\u3002\u786e\u4fdd loop \u5faa\u73af\u4e2d\u7684\u4ee3\u7801\u591a\u7f29\u8fdb\u56db\u4e2a\u7a7a\u683c\uff0c\u518d\u6b21\u8fd0\u884c\u7a0b\u5e8f\u3002\u6ce8\u610f\u8fd9\u91cc\u6709\u4e00\u4e2a\u65b0\u95ee\u9898\uff0c\u56e0\u4e3a\u7a0b\u5e8f\u5fe0\u5b9e\u5730\u6267\u884c\u4e86\u6211\u4eec\u7684\u8981\u6c42\uff1a\u6c38\u8fdc\u5730\u8bf7\u6c42\u53e6\u4e00\u4e2a\u731c\u6d4b\uff0c\u7528\u6237\u597d\u50cf\u65e0\u6cd5\u9000\u51fa\u554a\uff01 \u7528\u6237\u603b\u80fd\u4f7f\u7528 ctrl-c \u7ec8\u6b62\u7a0b\u5e8f\u3002\u4e0d\u8fc7\u8fd8\u6709\u53e6\u4e00\u4e2a\u65b9\u6cd5\u8df3\u51fa\u65e0\u9650\u5faa\u73af\uff0c\u5c31\u662f \u201c\u6bd4\u8f83\u731c\u6d4b\u4e0e\u79d8\u5bc6\u6570\u5b57\u201d \u90e8\u5206\u63d0\u5230\u7684 parse\uff1a\u5982\u679c\u7528\u6237\u8f93\u5165\u7684\u7b54\u6848\u4e0d\u662f\u4e00\u4e2a\u6570\u5b57\uff0c\u7a0b\u5e8f\u4f1a\u5d29\u6e83\u3002\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u8fd9\u4e00\u70b9\u6765\u9000\u51fa\uff0c\u5982\u4e0b\u6240\u793a\uff1a $ cargo run Compiling guessing_game v0.1.0 ( file:///projects/guessing_game ) Finished dev [ unoptimized + debuginfo ] target ( s ) in 1 .50s Running ` target/debug/guessing_game ` \u731c\u6570\u6e38\u620f\uff01\uff01 \u751f\u6210\u7684\u5bc6\u7801\u6570\u5b57\u662f: 57 \u8bf7\u8f93\u5165\u4e00\u4e2a\u503c: 12 \u4f60\u731c\u6d4b\u7684\u6570\u4e3a: 12 \u592a\u5c0f\u4e86\uff01 \u8bf7\u8f93\u5165\u4e00\u4e2a\u503c: 57 \u4f60\u731c\u6d4b\u7684\u6570\u4e3a: 57 \u731c\u5bf9\u4e86\uff01 \u8bf7\u8f93\u5165\u4e00\u4e2a\u503c: asdf thread 'main' panicked at '\u8bf7\u8f93\u5165\u6570\u5b57!: ParseIntError { kind: InvalidDigit }' , src/main.rs:19:47 note: run with ` RUST_BACKTRACE = 1 ` environment variable to display a backtrace \u731c\u6d4b\u6b63\u786e\u540e\u9000\u51fa \u8ba9\u6211\u4eec\u589e\u52a0\u4e00\u4e2a break \u8bed\u53e5\uff0c\u5728\u7528\u6237\u731c\u5bf9\u65f6\u9000\u51fa\u6e38\u620f\uff1a \u6587\u4ef6\u540d: src/main.rs use rand :: Rng ; use std :: cmp :: Ordering ; use std :: io ; fn main () { println! ( \"\u731c\u6570\u6e38\u620f\uff01\uff01\" ); let secret_number = rand :: thread_rng (). gen_range ( 1 ..= 100 ); println! ( \"\u751f\u6210\u7684\u5bc6\u7801\u6570\u5b57\u662f: {secret_number}\" ); loop { println! ( \"\u8bf7\u8f93\u5165\u4e00\u4e2a\u503c:\" ); let mut guess = String :: new (); io :: stdin (). read_line ( & mut guess ). expect ( \"\u8bfb\u6570\u5931\u8d25!\" ); let guess : u32 = guess . trim (). parse (). expect ( \"\u8bf7\u8f93\u5165\u6570\u5b57!\" ); println! ( \"\u4f60\u731c\u6d4b\u7684\u6570\u4e3a: {guess}\" ); match guess . cmp ( & secret_number ) { Ordering :: Less => println! ( \"\u592a\u5c0f\u4e86\uff01\" ), Ordering :: Greater => println! ( \"\u592a\u5927\u4e86\uff01\" ), Ordering :: Equal => { println! ( \"\u731c\u5bf9\u4e86\uff01\" ); break ; } } } } a \u901a\u8fc7\u5728 You win! \u4e4b\u540e\u589e\u52a0\u4e00\u884c break\uff0c\u7528\u6237\u731c\u5bf9\u4e86\u795e\u79d8\u6570\u5b57\u540e\u4f1a\u9000\u51fa\u5faa\u73af\u3002\u9000\u51fa\u5faa\u73af\u4e5f\u610f\u5473\u7740\u9000\u51fa\u7a0b\u5e8f\uff0c\u56e0\u4e3a\u5faa\u73af\u662f main \u7684\u6700\u540e\u4e00\u90e8\u5206\u3002 \u5904\u7406\u65e0\u6548\u8f93\u5165 \u4e3a\u4e86\u8fdb\u4e00\u6b65\u6539\u5584\u6e38\u620f\u6027\uff0c\u4e0d\u8981\u5728\u7528\u6237\u8f93\u5165\u975e\u6570\u5b57\u65f6\u5d29\u6e83\uff0c\u9700\u8981\u5ffd\u7565\u975e\u6570\u5b57\uff0c\u8ba9\u7528\u6237\u53ef\u4ee5\u7ee7\u7eed\u731c\u6d4b\u3002\u53ef\u4ee5\u901a\u8fc7\u4fee\u6539 guess \u5c06 String \u8f6c\u5316\u4e3a u32 \u90a3\u90e8\u5206\u4ee3\u7801\u6765\u5b9e\u73b0 \u6587\u4ef6\u540d: src/main.rs use rand :: Rng ; use std :: cmp :: Ordering ; use std :: io ; fn main () { println! ( \"\u731c\u6570\u6e38\u620f\uff01\uff01\" ); let secret_number = rand :: thread_rng (). gen_range ( 1 ..= 100 ); println! ( \"\u751f\u6210\u7684\u5bc6\u7801\u6570\u5b57\u662f: {secret_number}\" ); loop { println! ( \"\u8bf7\u8f93\u5165\u4e00\u4e2a\u503c:\" ); let mut guess = String :: new (); io :: stdin (). read_line ( & mut guess ). expect ( \"\u8bfb\u6570\u5931\u8d25!\" ); let guess : u32 = match guess . trim (). parse () { Ok ( num ) => num , Err ( _ ) => continue , }; // \u5c06 expect \u8c03\u7528\u6362\u6210 match \u8bed\u53e5\uff0c\u4ee5\u4ece\u9047\u5230\u9519\u8bef\u5c31\u5d29\u6e83\u8f6c\u6362\u4e3a\u5904\u7406\u9519\u8bef\u3002 // \u987b\u77e5 parse \u8fd4\u56de\u4e00\u4e2a Result \u7c7b\u578b\uff0c\u800c Result \u662f\u4e00\u4e2a\u62e5\u6709 Ok \u6216 Err \u6210\u5458\u7684\u679a\u4e3e\u3002 // \u8fd9\u91cc\u4f7f\u7528\u7684 match \u8868\u8fbe\u5f0f\uff0c\u548c\u5904\u7406 cmp \u65b9\u6cd5\u8fd4\u56de Ordering \u65f6\u7528\u7684\u4e00\u6837\u3002 // \u5982\u679c parse \u80fd\u591f\u6210\u529f\u7684\u5c06\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u4e00\u4e2a\u6570\u5b57\uff0c\u5b83\u4f1a\u8fd4\u56de\u4e00\u4e2a\u5305\u542b\u7ed3\u679c\u6570\u5b57\u7684 Ok\u3002 // \u8fd9\u4e2a Ok \u503c\u4e0e match \u7b2c\u4e00\u4e2a\u5206\u652f\u7684\u6a21\u5f0f\u76f8\u5339\u914d\uff0c\u8be5\u5206\u652f\u5bf9\u5e94\u7684\u52a8\u4f5c\u8fd4\u56de Ok \u503c\u4e2d\u7684\u6570\u5b57 num\uff0c // \u6700\u540e\u5982\u613f\u53d8\u6210\u65b0\u521b\u5efa\u7684 guess \u53d8\u91cf\u3002 // \u5982\u679c parse \u4e0d\u80fd\u5c06\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u4e00\u4e2a\u6570\u5b57\uff0c\u5b83\u4f1a\u8fd4\u56de\u4e00\u4e2a\u5305\u542b\u66f4\u591a\u9519\u8bef\u4fe1\u606f\u7684 Err\u3002 // Err \u503c\u4e0d\u80fd\u5339\u914d\u7b2c\u4e00\u4e2a match \u5206\u652f\u7684 Ok(num) \u6a21\u5f0f\uff0c\u4f46\u662f\u4f1a\u5339\u914d\u7b2c\u4e8c\u4e2a\u5206\u652f\u7684 Err(_) \u6a21\u5f0f\uff1a // _ \u662f\u4e00\u4e2a\u901a\u914d\u7b26\u503c\uff0c\u672c\u4f8b\u4e2d\u7528\u6765\u5339\u914d\u6240\u6709 Err \u503c\uff0c\u4e0d\u7ba1\u5176\u4e2d\u6709\u4f55\u79cd\u4fe1\u606f\u3002 // \u6240\u4ee5\u7a0b\u5e8f\u4f1a\u6267\u884c\u7b2c\u4e8c\u4e2a\u5206\u652f\u7684\u52a8\u4f5c\uff0ccontinue \u610f\u5473\u7740\u8fdb\u5165 loop \u7684\u4e0b\u4e00\u6b21\u5faa\u73af\uff0c\u8bf7\u6c42\u53e6\u4e00\u4e2a\u731c\u6d4b\u3002 // \u8fd9\u6837\u7a0b\u5e8f\u5c31\u6709\u6548\u7684\u5ffd\u7565\u4e86 parse \u53ef\u80fd\u9047\u5230\u7684\u6240\u6709\u9519\u8bef\uff01 println! ( \"\u4f60\u731c\u6d4b\u7684\u6570\u4e3a: {guess}\" ); match guess . cmp ( & secret_number ) { Ordering :: Less => println! ( \"\u592a\u5c0f\u4e86\uff01\" ), Ordering :: Greater => println! ( \"\u592a\u5927\u4e86\uff01\" ), Ordering :: Equal => { println! ( \"\u731c\u5bf9\u4e86\uff01\" ); break ; } } } } \u73b0\u5728\u4e07\u4e8b\u4ff1\u5907\uff0c\u53ea\u9700\u8fd0\u884c cargo run\uff1a $ cargo run Compiling guessing_game v0.1.0 ( file:///projects/guessing_game ) Finished dev [ unoptimized + debuginfo ] target ( s ) in 4 .45s Running ` target/debug/guessing_game ` \u731c\u6570\u6e38\u620f\uff01\uff01 \u751f\u6210\u7684\u5bc6\u7801\u6570\u5b57\u662f: 66 \u8bf7\u8f93\u5165\u4e00\u4e2a\u503c: 12d \u8bf7\u8f93\u5165\u4e00\u4e2a\u503c: 12 \u4f60\u731c\u6d4b\u7684\u6570\u4e3a: 12 \u592a\u5c0f\u4e86\uff01 \u8bf7\u8f93\u5165\u4e00\u4e2a\u503c: 66 \u4f60\u731c\u6d4b\u7684\u6570\u4e3a: 66 \u731c\u5bf9\u4e86\uff01 \u6700\u7ec8\u7248\u672c \u592a\u68d2\u4e86\uff01\u518d\u6709\u6700\u540e\u4e00\u4e2a\u5c0f\u7684\u4fee\u6539\uff0c\u5c31\u80fd\u5b8c\u6210\u731c\u731c\u770b\u6e38\u620f\u4e86\uff1a\u8fd8\u8bb0\u5f97\u7a0b\u5e8f\u4f9d\u7136\u4f1a\u6253\u5370\u51fa\u79d8\u5bc6\u6570\u5b57\u3002\u5728\u6d4b\u8bd5\u65f6\u8fd8\u597d\uff0c\u4f46\u6b63\u5f0f\u53d1\u5e03\u65f6\u4f1a\u6bc1\u4e86\u6e38\u620f\u3002\u5220\u6389\u6253\u5370\u79d8\u5bc6\u6570\u5b57\u7684 println!\u3002 \u6700\u7ec8\u4ee3\u7801\uff1a \u6587\u4ef6\u540d: src/main.rs use rand :: Rng ; use std :: cmp :: Ordering ; use std :: io ; fn main () { println! ( \"\u731c\u6570\u6e38\u620f\uff01\uff01\" ); let secret_number = rand :: thread_rng (). gen_range ( 1 ..= 100 ); loop { println! ( \"\u8bf7\u8f93\u5165\u4e00\u4e2a\u503c:\" ); let mut guess = String :: new (); io :: stdin (). read_line ( & mut guess ). expect ( \"\u8bfb\u6570\u5931\u8d25!\" ); let guess : u32 = match guess . trim (). parse () { Ok ( num ) => num , Err ( _ ) => continue , }; println! ( \"\u4f60\u731c\u6d4b\u7684\u6570\u4e3a: {guess}\" ); match guess . cmp ( & secret_number ) { Ordering :: Less => println! ( \"\u592a\u5c0f\u4e86\uff01\" ), Ordering :: Greater => println! ( \"\u592a\u5927\u4e86\uff01\" ), Ordering :: Equal => { println! ( \"\u731c\u5bf9\u4e86\uff01\" ); break ; } } } }","title":"\u731c\u6570\u6e38\u620f"},{"location":"guessing-game/#_1","text":"","title":"\u731c\u6570\u6e38\u620f"},{"location":"guessing-game/#_2","text":"cargo new guessing_game cd guessing_game","title":"\u521b\u5efa\u65b0\u9879\u76ee"},{"location":"guessing-game/#_3","text":"\u6587\u4ef6\u540d: src/main.rs // \u9884\u5bfc\u5165 // io\u8f93\u5165/\u8f93\u51fa\u5e93\u5f15\u5165\u5f53\u524d\u4f5c\u7528\u57df; // io \u5e93\u6765\u81ea\u4e8e\u6807\u51c6\u5e93\uff0c\u4e5f\u88ab\u79f0\u4e3a std use std :: io ; // main \u51fd\u6570\u662f\u7a0b\u5e8f\u7684\u5165\u53e3\u70b9 // fn \u8bed\u6cd5\u58f0\u660e\u4e86\u4e00\u4e2a\u65b0\u51fd\u6570 // () \u8868\u660e\u6ca1\u6709\u53c2\u6570 // { \u4f5c\u4e3a\u51fd\u6570\u4f53\u7684\u5f00\u59cb fn main () { println! ( \"Guess the number!\" ); // println! \u662f\u4e00\u4e2a\u5728\u5c4f\u5e55\u4e0a\u6253\u5370\u5b57\u7b26\u4e32\u7684\u5b8f println! ( \"Please input your guess.\" ); // println! \u662f\u4e00\u4e2a\u5728\u5c4f\u5e55\u4e0a\u6253\u5370\u5b57\u7b26\u4e32\u7684\u5b8f // \u521b\u5efa\u4e00\u4e2a \u53d8\u91cf\uff08variable\uff09\u6765\u50a8\u5b58\u7528\u6237\u8f93\u5165 // \u5728 Rust \u4e2d\uff0c\u53d8\u91cf\u9ed8\u8ba4\u662f\u4e0d\u53ef\u53d8\u7684\uff0c\u8fd9\u610f\u5473\u7740\u4e00\u65e6\u6211\u4eec\u7ed9\u53d8\u91cf\u8d4b\u503c\uff0c\u8fd9\u4e2a\u503c\u5c31\u4e0d\u518d\u53ef\u4ee5\u4fee\u6539\u4e86\u3002 let mut guess = String :: new (); // \u5728\u53d8\u91cf\u540d\u524d\u4f7f\u7528 mut \u6765\u4f7f\u4e00\u4e2a\u53d8\u91cf\u53ef\u53d8 // String \u662f\u4e00\u4e2a\u6807\u51c6\u5e93\u63d0\u4f9b\u7684\u5b57\u7b26\u4e32\u7c7b\u578b\uff0c\u5b83\u662f UTF-8 \u7f16\u7801\u7684\u53ef\u589e\u957f\u6587\u672c\u5757\u3002 // ::new \u90a3\u4e00\u884c\u7684 :: \u8bed\u6cd5\u8868\u660e new \u662f String \u7c7b\u578b\u7684\u4e00\u4e2a \u5173\u8054\u51fd\u6570\uff08associated function\uff09\u3002 // \u5173\u8054\u51fd\u6570\u662f\u9488\u5bf9\u7c7b\u578b\u5b9e\u73b0\u7684\uff0c\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\u662f String\uff0c\u800c\u4e0d\u662f String \u7684\u67d0\u4e2a\u7279\u5b9a\u5b9e\u4f8b\u3002\u4e00\u4e9b\u8bed\u8a00\u4e2d\u628a\u5b83\u79f0\u4e3a \u9759\u6001\u65b9\u6cd5\uff08static method\uff09\u3002 // new \u51fd\u6570\u521b\u5efa\u4e86\u4e00\u4e2a\u65b0\u7684\u7a7a\u5b57\u7b26\u4e32\uff0c\u4f60\u4f1a\u53d1\u73b0\u5f88\u591a\u7c7b\u578b\u4e0a\u6709 new \u51fd\u6570\uff0c\u56e0\u4e3a\u5b83\u662f\u521b\u5efa\u7c7b\u578b\u5b9e\u4f8b\u7684\u60ef\u7528\u51fd\u6570\u540d\u3002 // \u603b\u7684\u6765\u8bf4\uff0clet mut guess = String::new(); \u8fd9\u4e00\u884c\u521b\u5efa\u4e86\u4e00\u4e2a\u53ef\u53d8\u53d8\u91cf\uff0c\u5f53\u524d\u5b83\u7ed1\u5b9a\u5230\u4e00\u4e2a\u65b0\u7684 String \u7a7a\u5b9e\u4f8b\u4e0a\u3002 // \u5982\u679c\u7a0b\u5e8f\u7684\u5f00\u5934\u6ca1\u6709\u4f7f\u7528 use std::io \u5f15\u5165 io \u5e93\uff0c\u6211\u4eec\u4ecd\u53ef\u4ee5\u901a\u8fc7\u628a\u51fd\u6570\u8c03\u7528\u5199\u6210 std::io::stdin \u6765\u4f7f\u7528\u51fd\u6570\u3002 // stdin \u51fd\u6570\u8fd4\u56de\u4e00\u4e2a std::io::Stdin \u7684\u5b9e\u4f8b\uff0c\u8fd9\u4ee3\u8868\u7ec8\u7aef\u6807\u51c6\u8f93\u5165\u53e5\u67c4\u7684\u7c7b\u578b\u3002 io :: stdin () . read_line ( & mut guess ) // \u4ece\u6807\u51c6\u8f93\u5165\u53e5\u67c4\u83b7\u53d6\u7528\u6237\u8f93\u5165\u3002 // \u5c06 &mut guess \u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\u7ed9 read_line() \u51fd\u6570\uff0c\u8ba9\u5176\u5c06\u7528\u6237\u8f93\u5165\u50a8\u5b58\u5230\u8fd9\u4e2a\u5b57\u7b26\u4e32\u4e2d\u3002 // read_line \u7684\u5de5\u4f5c\u662f\uff0c\u65e0\u8bba\u7528\u6237\u5728\u6807\u51c6\u8f93\u5165\u4e2d\u952e\u5165\u4ec0\u4e48\u5185\u5bb9\uff0c\u90fd\u5c06\u5176\u8ffd\u52a0\uff08\u4e0d\u4f1a\u8986\u76d6\u5176\u539f\u6709\u5185\u5bb9\uff09\u5230\u4e00\u4e2a\u5b57\u7b26\u4e32\u4e2d\uff0c\u56e0\u6b64\u5b83\u9700\u8981\u5b57\u7b26\u4e32\u4f5c\u4e3a\u53c2\u6570\u3002 // \u8fd9\u4e2a\u5b57\u7b26\u4e32\u53c2\u6570\u5e94\u8be5\u662f\u53ef\u53d8\u7684\uff0c\u4ee5\u4fbf read_line \u5c06\u7528\u6237\u8f93\u5165\u9644\u52a0\u4e0a\u53bb\u3002 // & \u8868\u793a\u8fd9\u4e2a\u53c2\u6570\u662f\u4e00\u4e2a \u5f15\u7528\uff08reference\uff09\uff0c\u5b83\u5141\u8bb8\u591a\u5904\u4ee3\u7801\u8bbf\u95ee\u540c\u4e00\u5904\u6570\u636e\uff0c\u800c\u65e0\u9700\u5728\u5185\u5b58\u4e2d\u591a\u6b21\u62f7\u8d1d\u3002 . expect ( \"Failed to read line\" ); // \u4f1a\u8fd4\u56de\u4e00\u4e2a\u7c7b\u578b\u4e3a Result \u7684\u503c\u3002 Result \u662f\u4e00\u79cd\u679a\u4e3e\u7c7b\u578b\uff0c\u901a\u5e38\u4e5f\u5199\u4f5c enum\u3002 // \u679a\u4e3e\u7c7b\u578b\u53d8\u91cf\u7684\u503c\u53ef\u4ee5\u662f\u591a\u79cd\u53ef\u80fd\u72b6\u6001\u4e2d\u7684\u4e00\u4e2a\u3002\u6211\u4eec\u628a\u6bcf\u79cd\u53ef\u80fd\u7684\u72b6\u6001\u79f0\u4e3a\u4e00\u79cd \u679a\u4e3e\u6210\u5458\uff08variant\uff09\u3002 // \u8fd9\u91cc\u7684 Result \u7c7b\u578b\u5c06\u7528\u6765\u7f16\u7801\u9519\u8bef\u5904\u7406\u7684\u4fe1\u606f\u3002 // Result \u7684\u6210\u5458\u662f Ok \u548c Err\uff0c // Ok \u6210\u5458\u8868\u793a\u64cd\u4f5c\u6210\u529f\uff0c\u5185\u90e8\u5305\u542b\u6210\u529f\u65f6\u4ea7\u751f\u7684\u503c\u3002 // Err \u6210\u5458\u5219\u610f\u5473\u7740\u64cd\u4f5c\u5931\u8d25\uff0c\u5e76\u4e14\u5305\u542b\u5931\u8d25\u7684\u524d\u56e0\u540e\u679c\u3002 // Result \u7c7b\u578b\u7684\u503c\uff0c\u50cf\u5176\u4ed6\u7c7b\u578b\u4e00\u6837\uff0c\u62e5\u6709\u5b9a\u4e49\u4e8e\u5176\u4e0a\u7684\u65b9\u6cd5\u3002Result \u7684\u5b9e\u4f8b\u62e5\u6709 expect \u65b9\u6cd5\u3002 // \u5982\u679c io::Result \u5b9e\u4f8b\u7684\u503c\u662f Err\uff0cexpect \u4f1a\u5bfc\u81f4\u7a0b\u5e8f\u5d29\u6e83\uff0c\u5e76\u663e\u793a\u5f53\u505a\u53c2\u6570\u4f20\u9012\u7ed9 expect \u7684\u4fe1\u606f\u3002 // \u5982\u679c read_line \u65b9\u6cd5\u8fd4\u56de Err\uff0c\u5219\u53ef\u80fd\u662f\u6765\u6e90\u4e8e\u5e95\u5c42\u64cd\u4f5c\u7cfb\u7edf\u9519\u8bef\u7684\u7ed3\u679c\u3002 // \u5982\u679c Result \u5b9e\u4f8b\u7684\u503c\u662f Ok\uff0cexpect \u4f1a\u83b7\u53d6 Ok \u4e2d\u7684\u503c\u5e76\u539f\u6837\u8fd4\u56de\u3002 // \u5728\u672c\u4f8b\u4e2d\uff0c\u8fd9\u4e2a\u503c\u662f\u7528\u6237\u8f93\u5165\u5230\u6807\u51c6\u8f93\u5165\u4e2d\u7684\u5b57\u8282\u6570\u3002 // \u5982\u679c\u4e0d\u8c03\u7528 expect\uff0c\u7a0b\u5e8f\u4e5f\u80fd\u7f16\u8bd1\uff0c\u4e0d\u8fc7\u4f1a\u51fa\u73b0\u4e00\u4e2a\u8b66\u544a\uff1a // note: this `Result` may be an `Err` variant, which should be handled // Rust \u8b66\u544a\u6211\u4eec\u6ca1\u6709\u4f7f\u7528 read_line \u7684\u8fd4\u56de\u503c Result\uff0c\u8bf4\u660e\u6709\u4e00\u4e2a\u53ef\u80fd\u7684\u9519\u8bef\u6ca1\u6709\u5904\u7406\u3002 // \u6d88\u9664\u8b66\u544a\u7684\u6b63\u786e\u505a\u6cd5\u662f\u5b9e\u9645\u53bb\u7f16\u5199\u9519\u8bef\u5904\u7406\u4ee3\u7801\uff0c\u4e0d\u8fc7\u7531\u4e8e\u6211\u4eec\u5c31\u662f\u5e0c\u671b\u7a0b\u5e8f\u5728\u51fa\u73b0\u95ee\u9898\u65f6\u7acb\u5373\u5d29\u6e83\uff0c\u6240\u4ee5\u76f4\u63a5\u4f7f\u7528 expect\u3002 // \u7ee7\u7eed\u6df1\u5165\u5b66\u4e60\u7684\u8bdd\uff0c\u5c06\u4f1a\u5b66\u4e60\u5230\u5982\u4f55\u4ece\u9519\u8bef\u4e2d\u6062\u590d\u3002 println! ( \"You guessed: {guess}\" ); // \u6253\u5370\u4e86\u5b58\u50a8\u7528\u6237\u8f93\u5165\u7684\u5b57\u7b26\u4e32\u3002 // \u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\uff0c\u91cc\u9762\u7684 {} \u662f\u9884\u7559\u5728\u7279\u5b9a\u4f4d\u7f6e\u7684\u5360\u4f4d\u7b26 // \u4f7f\u7528 {} \u4e5f\u53ef\u4ee5\u6253\u5370\u591a\u4e2a\u503c\uff1a // \u7b2c\u4e00\u5bf9 {} \u4f7f\u7528\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u4e4b\u540e\u7684\u7b2c\u4e00\u4e2a\u503c\uff0c\u7b2c\u4e8c\u5bf9\u5219\u4f7f\u7528\u7b2c\u4e8c\u4e2a\u503c\uff0c\u4f9d\u6b64\u7c7b\u63a8\u3002\u8c03 // \u7528\u4e00\u6b21 println! \u6253\u5370\u591a\u4e2a\u503c\u770b\u8d77\u6765\u50cf\u8fd9\u6837\uff1a // println!(\"x = {} and y = {}\", x, y); }","title":"\u5904\u7406\u4e00\u6b21\u731c\u6d4b\u8f93\u5165"},{"location":"guessing-game/#_4","text":"Rust \u6807\u51c6\u5e93\u4e2d\u5c1a\u672a\u5305\u542b\u968f\u673a\u6570\u529f\u80fd\u3002\u7136\u800c\uff0cRust \u56e2\u961f\u8fd8\u662f\u63d0\u4f9b\u4e86\u4e00\u4e2a\u5305\u542b\u4e0a\u8ff0\u529f\u80fd\u7684 rand crate \u3002 rand crate \u662f\u4e00\u4e2a \u5e93 crate \uff0c \u5e93 crate \u53ef\u4ee5\u5305\u542b\u4efb\u610f\u80fd\u88ab\u5176\u4ed6\u7a0b\u5e8f\u4f7f\u7528\u7684\u4ee3\u7801\uff0c\u4f46\u662f\u4e0d\u80fd\u81ea\u6267\u884c\u3002 \u5728\u4f7f\u7528 rand \u7f16\u5199\u4ee3\u7801\u4e4b\u524d\uff0c\u9700\u8981\u4fee\u6539 Cargo.toml \u6587\u4ef6\uff0c\u5f15\u5165\u4e00\u4e2a rand \u4f9d\u8d56\u3002\u73b0\u5728\u6253\u5f00\u8fd9\u4e2a\u6587\u4ef6\u5e76\u5c06\u4e0b\u9762\u8fd9\u4e00\u884c\u6dfb\u52a0\u5230 [dependencies] \u7247\u6bb5\u6807\u9898\u4e4b\u4e0b\u3002 \u6587\u4ef6\u540d: Cargo.toml rand = \"0.8.3\" [dependencies] \u7247\u6bb5\u544a\u8bc9 Cargo \u672c\u9879\u76ee\u4f9d\u8d56\u4e86\u54ea\u4e9b\u5916\u90e8 crate \u53ca\u5176\u7248\u672c\u3002\u672c\u4f8b\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u8bed\u4e49\u5316\u7248\u672c 0.8.3 \u6765\u6307\u5b9a rand crate \u7684\u7248\u672c\u3002Cargo \u7406\u89e3 \u8bed\u4e49\u5316\u7248\u672c \uff08Semantic Versioning\uff09\uff08\u6709\u65f6\u4e5f\u79f0\u4e3a SemVer\uff09\uff0c\u8fd9\u662f\u4e00\u79cd\u5b9a\u4e49\u7248\u672c\u53f7\u7684\u6807\u51c6\u3002 0.8.3 \u4e8b\u5b9e\u4e0a\u662f ^0.8.3 \u7684\u7b80\u5199\uff0c\u5b83\u8868\u793a\u4efb\u4f55\u81f3\u5c11\u662f 0.8.3 \u4f46\u5c0f\u4e8e 0.9.0 \u7684\u7248\u672c\u3002 Cargo \u8ba4\u4e3a\u8fd9\u4e9b\u7248\u672c\u4e0e 0.8.3 \u7248\u672c\u7684\u516c\u6709 API \u76f8\u517c\u5bb9\uff0c\u8fd9\u6837\u7684\u7248\u672c\u6307\u5b9a\u786e\u4fdd\u4e86\u6211\u4eec\u53ef\u4ee5\u83b7\u53d6\u80fd\u4f7f\u672c\u7ae0\u4ee3\u7801\u7f16\u8bd1\u7684\u6700\u65b0\u7684\u8865\u4e01\uff08patch\uff09\u7248\u672c\u3002\u4efb\u4f55\u5927\u4e8e\u7b49\u4e8e 0.9.0 \u7684\u7248\u672c\u4e0d\u80fd\u4fdd\u8bc1\u548c\u63a5\u4e0b\u6765\u7684\u793a\u4f8b\u91c7\u7528\u4e86\u76f8\u540c\u7684 API\u3002 \u73b0\u5728\uff0c\u4e0d\u4fee\u6539\u4efb\u4f55\u4ee3\u7801\uff0c\u6784\u5efa\u9879\u76ee\uff0c\u5982\u4e0b\u6240\u793a\uff1a $ cargo build Updating crates.io index Downloaded ppv-lite86 v0.2.17 Downloaded rand v0.8.5 Downloaded rand_chacha v0.3.1 Downloaded rand_core v0.6.4 Downloaded cfg-if v1.0.0 Downloaded getrandom v0.2.8 Downloaded libc v0.2.138 Downloaded 7 crates ( 794 .8 KB ) in 2 .72s Compiling libc v0.2.138 Compiling cfg-if v1.0.0 Compiling ppv-lite86 v0.2.17 Compiling getrandom v0.2.8 Compiling rand_core v0.6.4 Compiling rand_chacha v0.3.1 Compiling rand v0.8.5 Compiling guessing-game v0.1.0 ( file:///projects/guessing_game ) Finished dev [ unoptimized + debuginfo ] target ( s ) in 3m 45s # \u5c06 rand crate \u6dfb\u52a0\u4e3a\u4f9d\u8d56\u4e4b\u540e\u8fd0\u884c cargo build \u7684\u8f93\u51fa \u73b0\u5728\u7cfb\u7edf\u6709\u4e86\u4e00\u4e2a\u5916\u90e8\u4f9d\u8d56\uff0cCargo \u4ece registry \u4e0a\u83b7\u53d6\u6240\u6709\u5305\u7684\u6700\u65b0\u7248\u672c\u4fe1\u606f\uff0c\u8fd9\u662f\u4e00\u4efd\u6765\u81ea Crates.io \u7684\u6570\u636e\u62f7\u8d1d\u3002Crates.io \u662f Rust \u751f\u6001\u73af\u5883\u4e2d\u7684\u5f00\u53d1\u8005\u4eec\u5411\u4ed6\u4eba\u8d21\u732e Rust \u5f00\u6e90\u9879\u76ee\u7684\u5730\u65b9\u3002 \u5728\u66f4\u65b0\u5b8c registry \u540e\uff0cCargo \u68c0\u67e5 [dependencies] \u90e8\u5206\u5e76\u4e0b\u8f7d\u5217\u8868\u4e2d\u5305\u542b\u4f46\u8fd8\u672a\u4e0b\u8f7d\u7684 crates \u3002\u672c\u4f8b\u4e2d\uff0c\u867d\u7136\u53ea\u58f0\u660e\u4e86 rand \u4e00\u4e2a\u4f9d\u8d56\uff0c\u7136\u800c Cargo \u8fd8\u662f\u989d\u5916\u83b7\u53d6\u4e86 rand \u6240\u9700\u8981\u7684\u5176\u4ed6 crates\uff0c\u56e0\u4e3a rand \u4f9d\u8d56\u5b83\u4eec\u6765\u6b63\u5e38\u5de5\u4f5c\u3002\u4e0b\u8f7d\u5b8c\u6210\u540e\uff0cRust \u7f16\u8bd1\u4f9d\u8d56\uff0c\u7136\u540e\u4f7f\u7528\u8fd9\u4e9b\u4f9d\u8d56\u7f16\u8bd1\u9879\u76ee\u3002 \u6587\u4ef6\u540d: src/main.rs // \u65b0\u589e\u4e86\u4e00\u884c use rand::Rng\u3002 // Rng \u662f\u4e00\u4e2a trait\uff0c\u5b83\u5b9a\u4e49\u4e86\u968f\u673a\u6570\u751f\u6210\u5668\u5e94\u5b9e\u73b0\u7684\u65b9\u6cd5\uff0c\u60f3\u4f7f\u7528\u8fd9\u4e9b\u65b9\u6cd5\u7684\u8bdd\uff0c\u6b64 trait \u5fc5\u987b\u5728\u4f5c\u7528\u57df\u4e2d\u3002 use rand :: Rng ; use std :: io ; fn main () { println! ( \"\u731c\u6570\u6e38\u620f\uff01\uff01\" ); let secret_number = rand :: thread_rng (). gen_range ( 1 ..= 100 ); // \u8c03\u7528\u4e86 rand::thread_rng \u51fd\u6570\u63d0\u4f9b\u5b9e\u9645\u4f7f\u7528\u7684\u968f\u673a\u6570\u751f\u6210\u5668\uff1a\u5b83\u4f4d\u4e8e\u5f53\u524d\u6267\u884c\u7ebf\u7a0b\u7684\u672c\u5730\u73af\u5883\u4e2d\uff0c\u5e76\u4ece\u64cd\u4f5c\u7cfb\u7edf\u83b7\u53d6 seed\u3002 // \u63a5\u7740\u8c03\u7528\u968f\u673a\u6570\u751f\u6210\u5668\u7684 gen_range \u65b9\u6cd5\u3002\u8fd9\u4e2a\u65b9\u6cd5\u7531 use rand::Rng \u8bed\u53e5\u5f15\u5165\u5230\u4f5c\u7528\u57df\u7684 Rng trait \u5b9a\u4e49\u3002 // gen_range \u65b9\u6cd5\u83b7\u53d6\u4e00\u4e2a\u8303\u56f4\u8868\u8fbe\u5f0f\uff08range expression\uff09\u4f5c\u4e3a\u53c2\u6570\uff0c\u5e76\u751f\u6210\u4e00\u4e2a\u5728\u6b64\u8303\u56f4\u4e4b\u95f4\u7684\u968f\u673a\u6570\u3002 // \u8fd9\u91cc\u4f7f\u7528\u7684\u8fd9\u7c7b\u8303\u56f4\u8868\u8fbe\u5f0f\u4f7f\u7528\u4e86 start..=end \u8fd9\u6837\u7684\u5f62\u5f0f\uff0c\u4e5f\u5c31\u662f\u8bf4\u5305\u542b\u4e86\u4e0a\u4e0b\u7aef\u70b9\uff0c\u6240\u4ee5\u9700\u8981\u6307\u5b9a 1..=100 \u6765\u8bf7\u6c42\u4e00\u4e2a 1 \u548c 100 \u4e4b\u95f4\u7684\u6570\u3002 println! ( \"\u751f\u6210\u7684\u5bc6\u7801\u6570\u5b57\u662f: {secret_number}\" ); println! ( \"\u8bf7\u8f93\u5165\u4e00\u4e2a\u503c:\" ); let mut guess = String :: new (); io :: stdin (). read_line ( & mut guess ). expect ( \"\u8bfb\u6570\u5931\u8d25!\" ); println! ( \"\u4f60\u731c\u6d4b\u7684\u6570\u4e3a: {guess}\" ) } \u6ce8\u610f \uff1a \u4f60\u4e0d\u53ef\u80fd\u51ed\u7a7a\u5c31\u77e5\u9053\u5e94\u8be5 use \u54ea\u4e2a trait \u4ee5\u53ca\u8be5\u4ece crate \u4e2d\u8c03\u7528\u54ea\u4e2a\u65b9\u6cd5\uff0c\u56e0\u6b64\u6bcf\u4e2acrate \u6709\u4f7f\u7528\u8bf4\u660e\u6587\u6863\u3002 Cargo \u6709\u4e00\u4e2a\u5f88\u68d2\u7684\u529f\u80fd\u662f\uff1a\u8fd0\u884c cargo doc --open \u547d\u4ee4\u6765\u6784\u5efa\u6240\u6709\u672c\u5730\u4f9d\u8d56\u63d0\u4f9b\u7684\u6587\u6863\uff0c\u5e76\u5728\u6d4f\u89c8\u5668\u4e2d\u6253\u5f00\u3002 \u4f8b\u5982\uff0c\u5047\u8bbe\u4f60\u5bf9 rand crate \u4e2d\u7684\u5176\u4ed6\u529f\u80fd\u611f\u5174\u8da3\uff0c\u4f60\u53ef\u4ee5\u8fd0\u884c cargo doc --open \u5e76\u70b9\u51fb\u5de6\u4fa7\u5bfc\u822a\u680f\u4e2d\u7684 rand\u3002","title":"\u751f\u6210\u4e00\u4e2a\u79d8\u5bc6\u6570\u5b57"},{"location":"guessing-game/#_5","text":"\u6587\u4ef6\u540d: src/main.rs use rand :: Rng ; use std :: cmp :: Ordering ; // \u4ece\u6807\u51c6\u5e93\u5f15\u5165\u4e86\u4e00\u4e2a\u53eb\u505a std::cmp::Ordering \u7684\u7c7b\u578b\u5230\u4f5c\u7528\u57df\u4e2d\u3002 // Ordering \u4e5f\u662f\u4e00\u4e2a\u679a\u4e3e\uff0c\u4e0d\u8fc7\u5b83\u7684\u6210\u5458\u662f Less\u3001Greater \u548c Equal\u3002 // \u8fd9\u662f\u6bd4\u8f83\u4e24\u4e2a\u503c\u65f6\u53ef\u80fd\u51fa\u73b0\u7684\u4e09\u79cd\u7ed3\u679c\u3002 use std :: io ; fn main () { println! ( \"\u731c\u6570\u6e38\u620f\uff01\uff01\" ); let secret_number = rand :: thread_rng (). gen_range ( 1 ..= 100 ); println! ( \"\u751f\u6210\u7684\u5bc6\u7801\u6570\u5b57\u662f: {secret_number}\" ); println! ( \"\u8bf7\u8f93\u5165\u4e00\u4e2a\u503c:\" ); let mut guess = String :: new (); io :: stdin (). read_line ( & mut guess ). expect ( \"\u8bfb\u6570\u5931\u8d25!\" ); println! ( \"\u4f60\u731c\u6d4b\u7684\u6570\u4e3a: {guess}\" ); match guess . cmp ( & secret_number ){ // cmp \u65b9\u6cd5\u7528\u6765\u6bd4\u8f83\u4e24\u4e2a\u503c\u5e76\u53ef\u4ee5\u5728\u4efb\u4f55\u53ef\u6bd4\u8f83\u7684\u503c\u4e0a\u8c03\u7528\u3002 // \u5b83\u83b7\u53d6\u4e00\u4e2a\u88ab\u6bd4\u8f83\u503c\u7684\u5f15\u7528\uff1a\u8fd9\u91cc\u662f\u628a guess \u4e0e secret_number \u505a\u6bd4\u8f83\u3002 // \u7136\u540e\u5b83\u4f1a\u8fd4\u56de\u4e00\u4e2a\u521a\u624d\u901a\u8fc7 use \u5f15\u5165\u4f5c\u7528\u57df\u7684 Ordering \u679a\u4e3e\u7684\u6210\u5458\u3002 // \u4f7f\u7528\u4e00\u4e2a match \u8868\u8fbe\u5f0f\uff0c\u6839\u636e\u5bf9 guess \u548c secret_number \u8c03\u7528 cmp \u8fd4\u56de\u7684 Ordering \u6210\u5458\u6765\u51b3\u5b9a\u63a5\u4e0b\u6765\u505a\u4ec0\u4e48\u3002 Ordering :: Less => println! ( \"\u592a\u5c0f\u4e86\uff01\" ), Ordering :: Greater => println! ( \"\u592a\u5927\u4e86\uff01\" ), Ordering :: Equal => println! ( \"\u731c\u5bf9\u4e86\uff01\" ), } } \u4e00\u4e2a match \u8868\u8fbe\u5f0f\u7531 \u5206\u652f\uff08arms\uff09 \u6784\u6210\u3002 \u4e00\u4e2a\u5206\u652f\u5305\u542b\u4e00\u4e2a \u6a21\u5f0f\uff08pattern\uff09\u548c\u8868\u8fbe\u5f0f\u5f00\u5934\u7684\u503c\u4e0e\u5206\u652f\u6a21\u5f0f\u76f8\u5339\u914d\u65f6\u5e94\u8be5\u6267\u884c\u7684\u4ee3\u7801\u3002 Rust \u83b7\u53d6\u63d0\u4f9b\u7ed9 match \u7684\u503c\u5e76\u6328\u4e2a\u68c0\u67e5\u6bcf\u4e2a\u5206\u652f\u7684\u6a21\u5f0f\u3002 \u6b64\u65f6\u8fdb\u884c cargo build \u4f1a\u51fa\u73b0\u5982\u4e0b\u9519\u8bef: cargo build Compiling guessing-game v0.1.0 ( /files/rust-example-apps/src/guessing-game ) error [ E0308 ] : mismatched types --> src/main.rs:20:21 | 20 | match guess.cmp ( & secret_number ) { | --- ^^^^^^^^^^^^^^ expected struct ` String ` , found integer | | | arguments to this function are incorrect | = note: expected reference ` & String ` found reference ` & { integer } ` note: associated function defined here For more information about this error, try ` rustc --explain E0308 ` . error: could not compile ` guessing-game ` due to previous error \u9519\u8bef\u7684\u6838\u5fc3\u8868\u660e\u8fd9\u91cc\u6709 \u4e0d\u5339\u914d\u7684\u7c7b\u578b\uff08mismatched types\uff09 \u3002 Rust \u6709\u4e00\u4e2a\u9759\u6001\u5f3a\u7c7b\u578b\u7cfb\u7edf\uff0c\u540c\u65f6\u4e5f\u6709\u7c7b\u578b\u63a8\u65ad\u3002 \u5f53\u6211\u4eec\u5199\u51fa let guess = String::new() \u65f6\uff0cRust \u63a8\u65ad\u51fa guess \u5e94\u8be5\u662f String \u7c7b\u578b\uff0c\u5e76\u4e0d\u9700\u8981\u6211\u4eec\u5199\u51fa\u7c7b\u578b\u3002 \u53e6\u4e00\u65b9\u9762\uff0csecret_number\uff0c\u662f\u6570\u5b57\u7c7b\u578b\u3002\u51e0\u4e2a\u6570\u5b57\u7c7b\u578b\u62e5\u6709 1 \u5230 100 \u4e4b\u95f4\u7684\u503c\uff1a32 \u4f4d\u6570\u5b57 i32\uff1b32 \u4f4d\u65e0\u7b26\u53f7\u6570\u5b57 u32\uff1b64 \u4f4d\u6570\u5b57 i64 \u7b49\u7b49\u3002 Rust \u9ed8\u8ba4\u4f7f\u7528 i32\uff0c\u6240\u4ee5\u5b83\u662f secret_number \u7684\u7c7b\u578b\uff0c\u9664\u975e\u589e\u52a0\u7c7b\u578b\u4fe1\u606f\uff0c\u6216\u4efb\u4f55\u80fd\u8ba9 Rust \u63a8\u65ad\u51fa\u4e0d\u540c\u6570\u503c\u7c7b\u578b\u7684\u4fe1\u606f\u3002 \u8fd9\u91cc\u9519\u8bef\u7684\u539f\u56e0\u5728\u4e8e Rust \u4e0d\u4f1a\u6bd4\u8f83\u5b57\u7b26\u4e32\u7c7b\u578b\u548c\u6570\u5b57\u7c7b\u578b\u3002 \u6240\u4ee5\u6211\u4eec\u5fc5\u987b\u628a\u4ece\u8f93\u5165\u4e2d\u8bfb\u53d6\u5230\u7684 String \u8f6c\u6362\u4e3a\u4e00\u4e2a\u771f\u6b63\u7684\u6570\u5b57\u7c7b\u578b\uff0c\u624d\u597d\u4e0e\u79d8\u5bc6\u6570\u5b57\u8fdb\u884c\u6bd4\u8f83\u3002\u8fd9\u53ef\u4ee5\u901a\u8fc7\u5728 main \u51fd\u6570\u4f53\u4e2d\u589e\u52a0\u5982\u4e0b\u4ee3\u7801\u6765\u5b9e\u73b0\uff1a \u6587\u4ef6\u540d: src/main.rs use rand :: Rng ; use std :: cmp :: Ordering ; use std :: io ; fn main () { println! ( \"\u731c\u6570\u6e38\u620f\uff01\uff01\" ); let secret_number = rand :: thread_rng (). gen_range ( 1 ..= 100 ); println! ( \"\u751f\u6210\u7684\u5bc6\u7801\u6570\u5b57\u662f: {secret_number}\" ); println! ( \"\u8bf7\u8f93\u5165\u4e00\u4e2a\u503c:\" ); let mut guess = String :: new (); io :: stdin (). read_line ( & mut guess ). expect ( \"\u8bfb\u6570\u5931\u8d25!\" ); let guess : u32 = guess . trim (). parse (). expect ( \"\u8bf7\u8f93\u5165\u6570\u5b57!\" ); // \u8fd9\u91cc\u521b\u5efa\u4e86\u4e00\u4e2a\u53eb\u505a guess \u7684\u53d8\u91cf\u3002 // \u4e0d\u8fc7\u7b49\u7b49\uff0c\u4e0d\u662f\u5df2\u7ecf\u6709\u4e86\u4e00\u4e2a\u53eb\u505a guess \u7684\u53d8\u91cf\u4e86\u5417\uff1f // \u786e\u5b9e\u5982\u6b64\uff0c\u4e0d\u8fc7 Rust \u5141\u8bb8\u7528\u4e00\u4e2a\u65b0\u503c\u6765 \u9690\u85cf \uff08shadow\uff09 guess \u4e4b\u524d\u7684\u503c\u3002 // \u8fd9\u4e2a\u529f\u80fd\u5e38\u7528\u5728\u9700\u8981\u8f6c\u6362\u503c\u7c7b\u578b\u4e4b\u7c7b\u7684\u573a\u666f\u3002 // \u5b83\u5141\u8bb8\u6211\u4eec\u590d\u7528 guess \u53d8\u91cf\u7684\u540d\u5b57\uff0c\u800c\u4e0d\u662f\u88ab\u8feb\u521b\u5efa\u4e24\u4e2a\u4e0d\u540c\u53d8\u91cf\uff0c\u8bf8\u5982 guess_str \u548c guess \u4e4b\u7c7b\u3002 // \u5c06\u8fd9\u4e2a\u65b0\u53d8\u91cf\u7ed1\u5b9a\u5230 guess.trim().parse() \u8868\u8fbe\u5f0f\u4e0a\u3002 // \u8868\u8fbe\u5f0f\u4e2d\u7684 guess \u6307\u7684\u662f\u5305\u542b\u8f93\u5165\u7684\u5b57\u7b26\u4e32\u7c7b\u578b guess \u53d8\u91cf\u3002 // String \u5b9e\u4f8b\u7684 trim \u65b9\u6cd5\u4f1a\u53bb\u9664\u5b57\u7b26\u4e32\u5f00\u5934\u548c\u7ed3\u5c3e\u7684\u7a7a\u767d\u5b57\u7b26\uff0c\u6211\u4eec\u5fc5\u987b\u6267\u884c\u6b64\u65b9\u6cd5\u624d\u80fd\u5c06\u5b57\u7b26\u4e32\u4e0e u32 \u6bd4\u8f83\uff0c\u56e0\u4e3a u32 \u53ea\u80fd\u5305\u542b\u6570\u503c\u578b\u6570\u636e\u3002 // \u7528\u6237\u5fc5\u987b\u8f93\u5165 enter \u952e\u624d\u80fd\u8ba9 read_line \u8fd4\u56de\u5e76\u8f93\u5165\u4ed6\u4eec\u7684\u731c\u60f3\uff0c\u8fd9\u5c06\u4f1a\u5728\u5b57\u7b26\u4e32\u4e2d\u589e\u52a0\u4e00\u4e2a\u6362\u884c\uff08newline\uff09\u7b26\u3002 // \u4f8b\u5982\uff0c\u7528\u6237\u8f93\u5165 5 \u5e76\u6309\u4e0b enter, guess \u770b\u8d77\u6765\u50cf\u8fd9\u6837\uff1a5\\n \u6216\u8005 5\\r\\n\u3002 // \\n \u4ee3\u8868 \u201c\u6362\u884c\u201d\uff0c\u56de\u8f66\u952e\uff1b\\r \u4ee3\u8868 \u201c\u56de\u8f66\u201d\uff0c\u56de\u8f66\u952e\u3002 // trim \u65b9\u6cd5\u4f1a\u6d88\u9664 \\n \u6216\u8005 \\r\\n\uff0c\u53ea\u7559\u4e0b 5\u3002 // \u5b57\u7b26\u4e32\u7684 parse \u65b9\u6cd5 \u5c06\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u5176\u4ed6\u7c7b\u578b\u3002 // \u8fd9\u91cc\u7528\u5b83\u6765\u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u503c\u3002\u6211\u4eec\u9700\u8981\u544a\u8bc9 Rust \u5177\u4f53\u7684\u6570\u5b57\u7c7b\u578b\uff0c\u8fd9\u91cc\u901a\u8fc7 let guess: u32 \u6307\u5b9a\u3002 // guess \u540e\u9762\u7684\u5192\u53f7\uff08:\uff09\u544a\u8bc9 Rust \u6211\u4eec\u6307\u5b9a\u4e86\u53d8\u91cf\u7684\u7c7b\u578b\u3002 // Rust \u6709\u4e00\u4e9b\u5185\u5efa\u7684\u6570\u5b57\u7c7b\u578b\uff1bu32 \u662f\u4e00\u4e2a\u65e0\u7b26\u53f7\u7684 32 \u4f4d\u6574\u578b\u3002 // \u5bf9\u4e8e\u4e0d\u5927\u7684\u6b63\u6574\u6570\u6765\u8bf4\uff0c\u5b83\u662f\u4e0d\u9519\u7684\u9ed8\u8ba4\u7c7b\u578b\uff0c\u7b2c\u4e09\u7ae0\u8fd8\u4f1a\u8bb2\u5230\u5176\u4ed6\u6570\u5b57\u7c7b\u578b\u3002 // \u53e6\u5916\uff0c\u7a0b\u5e8f\u4e2d\u7684 u32 \u6ce8\u89e3\u4ee5\u53ca\u4e0e secret_number \u7684\u6bd4\u8f83\uff0c\u610f\u5473\u7740 Rust \u4f1a\u63a8\u65ad\u51fa secret_number \u4e5f\u662f u32 \u7c7b\u578b\u3002 // \u73b0\u5728\u53ef\u4ee5\u4f7f\u7528\u76f8\u540c\u7c7b\u578b\u6bd4\u8f83\u4e24\u4e2a\u503c\u4e86\uff01 // parse \u65b9\u6cd5\u53ea\u6709\u5728\u5b57\u7b26\u903b\u8f91\u4e0a\u53ef\u4ee5\u8f6c\u6362\u4e3a\u6570\u5b57\u7684\u65f6\u5019\u624d\u80fd\u5de5\u4f5c\u6240\u4ee5\u975e\u5e38\u5bb9\u6613\u51fa\u9519\u3002 // \u4f8b\u5982\uff0c\u5b57\u7b26\u4e32\u4e2d\u5305\u542b A\ud83d\udc4d%\uff0c\u5c31\u65e0\u6cd5\u5c06\u5176\u8f6c\u6362\u4e3a\u4e00\u4e2a\u6570\u5b57\u3002 // \u56e0\u6b64\uff0cparse \u65b9\u6cd5\u8fd4\u56de\u4e00\u4e2a Result \u7c7b\u578b\u3002 // \u50cf\u4e4b\u524d \u201c\u4f7f\u7528 Result \u7c7b\u578b\u6765\u5904\u7406\u6f5c\u5728\u7684\u9519\u8bef\u201d \u8ba8\u8bba\u7684 read_line \u65b9\u6cd5\u90a3\u6837\uff0c\u518d\u6b21\u6309\u90e8\u5c31\u73ed\u7684\u7528 expect \u65b9\u6cd5\u5904\u7406\u5373\u53ef\u3002 // \u5982\u679c parse \u4e0d\u80fd\u4ece\u5b57\u7b26\u4e32\u751f\u6210\u4e00\u4e2a\u6570\u5b57\uff0c\u8fd4\u56de\u4e00\u4e2a Result \u7684 Err \u6210\u5458\u65f6\uff0cexpect \u4f1a\u4f7f\u6e38\u620f\u5d29\u6e83\u5e76\u6253\u5370\u9644\u5e26\u7684\u4fe1\u606f\u3002 // \u5982\u679c parse \u6210\u529f\u5730\u5c06\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u4e00\u4e2a\u6570\u5b57\uff0c\u5b83\u4f1a\u8fd4\u56de Result \u7684 Ok \u6210\u5458\uff0c\u7136\u540e expect \u4f1a\u8fd4\u56de Ok \u503c\u4e2d\u7684\u6570\u5b57\u3002 println! ( \"\u4f60\u731c\u6d4b\u7684\u6570\u4e3a: {guess}\" ); match guess . cmp ( & secret_number ) { Ordering :: Less => println! ( \"\u592a\u5c0f\u4e86\uff01\" ), Ordering :: Greater => println! ( \"\u592a\u5927\u4e86\uff01\" ), Ordering :: Equal => println! ( \"\u731c\u5bf9\u4e86\uff01\" ), } }","title":"\u6bd4\u8f83\u731c\u6d4b\u7684\u6570\u5b57\u548c\u79d8\u5bc6\u6570\u5b57"},{"location":"guessing-game/#_6","text":"loop \u5173\u952e\u5b57\u521b\u5efa\u4e86\u4e00\u4e2a\u65e0\u9650\u5faa\u73af\u3002 \u6587\u4ef6\u540d: src/main.rs use rand :: Rng ; use std :: cmp :: Ordering ; use std :: io ; fn main () { println! ( \"\u731c\u6570\u6e38\u620f\uff01\uff01\" ); let secret_number = rand :: thread_rng (). gen_range ( 1 ..= 100 ); println! ( \"\u751f\u6210\u7684\u5bc6\u7801\u6570\u5b57\u662f: {secret_number}\" ); loop { println! ( \"\u8bf7\u8f93\u5165\u4e00\u4e2a\u503c:\" ); let mut guess = String :: new (); io :: stdin (). read_line ( & mut guess ). expect ( \"\u8bfb\u6570\u5931\u8d25!\" ); let guess : u32 = guess . trim (). parse (). expect ( \"\u8bf7\u8f93\u5165\u6570\u5b57!\" ); println! ( \"\u4f60\u731c\u6d4b\u7684\u6570\u4e3a: {guess}\" ); match guess . cmp ( & secret_number ) { Ordering :: Less => println! ( \"\u592a\u5c0f\u4e86\uff01\" ), Ordering :: Greater => println! ( \"\u592a\u5927\u4e86\uff01\" ), Ordering :: Equal => println! ( \"\u731c\u5bf9\u4e86\uff01\" ), } } } \u5982\u4e0a\u6240\u793a\uff0c\u6211\u4eec\u5c06\u63d0\u793a\u7528\u6237\u731c\u6d4b\u4e4b\u540e\u7684\u6240\u6709\u5185\u5bb9\u79fb\u52a8\u5230\u4e86\u5faa\u73af\u4e2d\u3002\u786e\u4fdd loop \u5faa\u73af\u4e2d\u7684\u4ee3\u7801\u591a\u7f29\u8fdb\u56db\u4e2a\u7a7a\u683c\uff0c\u518d\u6b21\u8fd0\u884c\u7a0b\u5e8f\u3002\u6ce8\u610f\u8fd9\u91cc\u6709\u4e00\u4e2a\u65b0\u95ee\u9898\uff0c\u56e0\u4e3a\u7a0b\u5e8f\u5fe0\u5b9e\u5730\u6267\u884c\u4e86\u6211\u4eec\u7684\u8981\u6c42\uff1a\u6c38\u8fdc\u5730\u8bf7\u6c42\u53e6\u4e00\u4e2a\u731c\u6d4b\uff0c\u7528\u6237\u597d\u50cf\u65e0\u6cd5\u9000\u51fa\u554a\uff01 \u7528\u6237\u603b\u80fd\u4f7f\u7528 ctrl-c \u7ec8\u6b62\u7a0b\u5e8f\u3002\u4e0d\u8fc7\u8fd8\u6709\u53e6\u4e00\u4e2a\u65b9\u6cd5\u8df3\u51fa\u65e0\u9650\u5faa\u73af\uff0c\u5c31\u662f \u201c\u6bd4\u8f83\u731c\u6d4b\u4e0e\u79d8\u5bc6\u6570\u5b57\u201d \u90e8\u5206\u63d0\u5230\u7684 parse\uff1a\u5982\u679c\u7528\u6237\u8f93\u5165\u7684\u7b54\u6848\u4e0d\u662f\u4e00\u4e2a\u6570\u5b57\uff0c\u7a0b\u5e8f\u4f1a\u5d29\u6e83\u3002\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u8fd9\u4e00\u70b9\u6765\u9000\u51fa\uff0c\u5982\u4e0b\u6240\u793a\uff1a $ cargo run Compiling guessing_game v0.1.0 ( file:///projects/guessing_game ) Finished dev [ unoptimized + debuginfo ] target ( s ) in 1 .50s Running ` target/debug/guessing_game ` \u731c\u6570\u6e38\u620f\uff01\uff01 \u751f\u6210\u7684\u5bc6\u7801\u6570\u5b57\u662f: 57 \u8bf7\u8f93\u5165\u4e00\u4e2a\u503c: 12 \u4f60\u731c\u6d4b\u7684\u6570\u4e3a: 12 \u592a\u5c0f\u4e86\uff01 \u8bf7\u8f93\u5165\u4e00\u4e2a\u503c: 57 \u4f60\u731c\u6d4b\u7684\u6570\u4e3a: 57 \u731c\u5bf9\u4e86\uff01 \u8bf7\u8f93\u5165\u4e00\u4e2a\u503c: asdf thread 'main' panicked at '\u8bf7\u8f93\u5165\u6570\u5b57!: ParseIntError { kind: InvalidDigit }' , src/main.rs:19:47 note: run with ` RUST_BACKTRACE = 1 ` environment variable to display a backtrace","title":"\u4f7f\u7528\u5faa\u73af\u6765\u5141\u8bb8\u591a\u6b21\u731c\u6d4b"},{"location":"guessing-game/#_7","text":"\u8ba9\u6211\u4eec\u589e\u52a0\u4e00\u4e2a break \u8bed\u53e5\uff0c\u5728\u7528\u6237\u731c\u5bf9\u65f6\u9000\u51fa\u6e38\u620f\uff1a \u6587\u4ef6\u540d: src/main.rs use rand :: Rng ; use std :: cmp :: Ordering ; use std :: io ; fn main () { println! ( \"\u731c\u6570\u6e38\u620f\uff01\uff01\" ); let secret_number = rand :: thread_rng (). gen_range ( 1 ..= 100 ); println! ( \"\u751f\u6210\u7684\u5bc6\u7801\u6570\u5b57\u662f: {secret_number}\" ); loop { println! ( \"\u8bf7\u8f93\u5165\u4e00\u4e2a\u503c:\" ); let mut guess = String :: new (); io :: stdin (). read_line ( & mut guess ). expect ( \"\u8bfb\u6570\u5931\u8d25!\" ); let guess : u32 = guess . trim (). parse (). expect ( \"\u8bf7\u8f93\u5165\u6570\u5b57!\" ); println! ( \"\u4f60\u731c\u6d4b\u7684\u6570\u4e3a: {guess}\" ); match guess . cmp ( & secret_number ) { Ordering :: Less => println! ( \"\u592a\u5c0f\u4e86\uff01\" ), Ordering :: Greater => println! ( \"\u592a\u5927\u4e86\uff01\" ), Ordering :: Equal => { println! ( \"\u731c\u5bf9\u4e86\uff01\" ); break ; } } } } a \u901a\u8fc7\u5728 You win! \u4e4b\u540e\u589e\u52a0\u4e00\u884c break\uff0c\u7528\u6237\u731c\u5bf9\u4e86\u795e\u79d8\u6570\u5b57\u540e\u4f1a\u9000\u51fa\u5faa\u73af\u3002\u9000\u51fa\u5faa\u73af\u4e5f\u610f\u5473\u7740\u9000\u51fa\u7a0b\u5e8f\uff0c\u56e0\u4e3a\u5faa\u73af\u662f main \u7684\u6700\u540e\u4e00\u90e8\u5206\u3002","title":"\u731c\u6d4b\u6b63\u786e\u540e\u9000\u51fa"},{"location":"guessing-game/#_8","text":"\u4e3a\u4e86\u8fdb\u4e00\u6b65\u6539\u5584\u6e38\u620f\u6027\uff0c\u4e0d\u8981\u5728\u7528\u6237\u8f93\u5165\u975e\u6570\u5b57\u65f6\u5d29\u6e83\uff0c\u9700\u8981\u5ffd\u7565\u975e\u6570\u5b57\uff0c\u8ba9\u7528\u6237\u53ef\u4ee5\u7ee7\u7eed\u731c\u6d4b\u3002\u53ef\u4ee5\u901a\u8fc7\u4fee\u6539 guess \u5c06 String \u8f6c\u5316\u4e3a u32 \u90a3\u90e8\u5206\u4ee3\u7801\u6765\u5b9e\u73b0 \u6587\u4ef6\u540d: src/main.rs use rand :: Rng ; use std :: cmp :: Ordering ; use std :: io ; fn main () { println! ( \"\u731c\u6570\u6e38\u620f\uff01\uff01\" ); let secret_number = rand :: thread_rng (). gen_range ( 1 ..= 100 ); println! ( \"\u751f\u6210\u7684\u5bc6\u7801\u6570\u5b57\u662f: {secret_number}\" ); loop { println! ( \"\u8bf7\u8f93\u5165\u4e00\u4e2a\u503c:\" ); let mut guess = String :: new (); io :: stdin (). read_line ( & mut guess ). expect ( \"\u8bfb\u6570\u5931\u8d25!\" ); let guess : u32 = match guess . trim (). parse () { Ok ( num ) => num , Err ( _ ) => continue , }; // \u5c06 expect \u8c03\u7528\u6362\u6210 match \u8bed\u53e5\uff0c\u4ee5\u4ece\u9047\u5230\u9519\u8bef\u5c31\u5d29\u6e83\u8f6c\u6362\u4e3a\u5904\u7406\u9519\u8bef\u3002 // \u987b\u77e5 parse \u8fd4\u56de\u4e00\u4e2a Result \u7c7b\u578b\uff0c\u800c Result \u662f\u4e00\u4e2a\u62e5\u6709 Ok \u6216 Err \u6210\u5458\u7684\u679a\u4e3e\u3002 // \u8fd9\u91cc\u4f7f\u7528\u7684 match \u8868\u8fbe\u5f0f\uff0c\u548c\u5904\u7406 cmp \u65b9\u6cd5\u8fd4\u56de Ordering \u65f6\u7528\u7684\u4e00\u6837\u3002 // \u5982\u679c parse \u80fd\u591f\u6210\u529f\u7684\u5c06\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u4e00\u4e2a\u6570\u5b57\uff0c\u5b83\u4f1a\u8fd4\u56de\u4e00\u4e2a\u5305\u542b\u7ed3\u679c\u6570\u5b57\u7684 Ok\u3002 // \u8fd9\u4e2a Ok \u503c\u4e0e match \u7b2c\u4e00\u4e2a\u5206\u652f\u7684\u6a21\u5f0f\u76f8\u5339\u914d\uff0c\u8be5\u5206\u652f\u5bf9\u5e94\u7684\u52a8\u4f5c\u8fd4\u56de Ok \u503c\u4e2d\u7684\u6570\u5b57 num\uff0c // \u6700\u540e\u5982\u613f\u53d8\u6210\u65b0\u521b\u5efa\u7684 guess \u53d8\u91cf\u3002 // \u5982\u679c parse \u4e0d\u80fd\u5c06\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u4e00\u4e2a\u6570\u5b57\uff0c\u5b83\u4f1a\u8fd4\u56de\u4e00\u4e2a\u5305\u542b\u66f4\u591a\u9519\u8bef\u4fe1\u606f\u7684 Err\u3002 // Err \u503c\u4e0d\u80fd\u5339\u914d\u7b2c\u4e00\u4e2a match \u5206\u652f\u7684 Ok(num) \u6a21\u5f0f\uff0c\u4f46\u662f\u4f1a\u5339\u914d\u7b2c\u4e8c\u4e2a\u5206\u652f\u7684 Err(_) \u6a21\u5f0f\uff1a // _ \u662f\u4e00\u4e2a\u901a\u914d\u7b26\u503c\uff0c\u672c\u4f8b\u4e2d\u7528\u6765\u5339\u914d\u6240\u6709 Err \u503c\uff0c\u4e0d\u7ba1\u5176\u4e2d\u6709\u4f55\u79cd\u4fe1\u606f\u3002 // \u6240\u4ee5\u7a0b\u5e8f\u4f1a\u6267\u884c\u7b2c\u4e8c\u4e2a\u5206\u652f\u7684\u52a8\u4f5c\uff0ccontinue \u610f\u5473\u7740\u8fdb\u5165 loop \u7684\u4e0b\u4e00\u6b21\u5faa\u73af\uff0c\u8bf7\u6c42\u53e6\u4e00\u4e2a\u731c\u6d4b\u3002 // \u8fd9\u6837\u7a0b\u5e8f\u5c31\u6709\u6548\u7684\u5ffd\u7565\u4e86 parse \u53ef\u80fd\u9047\u5230\u7684\u6240\u6709\u9519\u8bef\uff01 println! ( \"\u4f60\u731c\u6d4b\u7684\u6570\u4e3a: {guess}\" ); match guess . cmp ( & secret_number ) { Ordering :: Less => println! ( \"\u592a\u5c0f\u4e86\uff01\" ), Ordering :: Greater => println! ( \"\u592a\u5927\u4e86\uff01\" ), Ordering :: Equal => { println! ( \"\u731c\u5bf9\u4e86\uff01\" ); break ; } } } } \u73b0\u5728\u4e07\u4e8b\u4ff1\u5907\uff0c\u53ea\u9700\u8fd0\u884c cargo run\uff1a $ cargo run Compiling guessing_game v0.1.0 ( file:///projects/guessing_game ) Finished dev [ unoptimized + debuginfo ] target ( s ) in 4 .45s Running ` target/debug/guessing_game ` \u731c\u6570\u6e38\u620f\uff01\uff01 \u751f\u6210\u7684\u5bc6\u7801\u6570\u5b57\u662f: 66 \u8bf7\u8f93\u5165\u4e00\u4e2a\u503c: 12d \u8bf7\u8f93\u5165\u4e00\u4e2a\u503c: 12 \u4f60\u731c\u6d4b\u7684\u6570\u4e3a: 12 \u592a\u5c0f\u4e86\uff01 \u8bf7\u8f93\u5165\u4e00\u4e2a\u503c: 66 \u4f60\u731c\u6d4b\u7684\u6570\u4e3a: 66 \u731c\u5bf9\u4e86\uff01","title":"\u5904\u7406\u65e0\u6548\u8f93\u5165"},{"location":"guessing-game/#_9","text":"\u592a\u68d2\u4e86\uff01\u518d\u6709\u6700\u540e\u4e00\u4e2a\u5c0f\u7684\u4fee\u6539\uff0c\u5c31\u80fd\u5b8c\u6210\u731c\u731c\u770b\u6e38\u620f\u4e86\uff1a\u8fd8\u8bb0\u5f97\u7a0b\u5e8f\u4f9d\u7136\u4f1a\u6253\u5370\u51fa\u79d8\u5bc6\u6570\u5b57\u3002\u5728\u6d4b\u8bd5\u65f6\u8fd8\u597d\uff0c\u4f46\u6b63\u5f0f\u53d1\u5e03\u65f6\u4f1a\u6bc1\u4e86\u6e38\u620f\u3002\u5220\u6389\u6253\u5370\u79d8\u5bc6\u6570\u5b57\u7684 println!\u3002 \u6700\u7ec8\u4ee3\u7801\uff1a \u6587\u4ef6\u540d: src/main.rs use rand :: Rng ; use std :: cmp :: Ordering ; use std :: io ; fn main () { println! ( \"\u731c\u6570\u6e38\u620f\uff01\uff01\" ); let secret_number = rand :: thread_rng (). gen_range ( 1 ..= 100 ); loop { println! ( \"\u8bf7\u8f93\u5165\u4e00\u4e2a\u503c:\" ); let mut guess = String :: new (); io :: stdin (). read_line ( & mut guess ). expect ( \"\u8bfb\u6570\u5931\u8d25!\" ); let guess : u32 = match guess . trim (). parse () { Ok ( num ) => num , Err ( _ ) => continue , }; println! ( \"\u4f60\u731c\u6d4b\u7684\u6570\u4e3a: {guess}\" ); match guess . cmp ( & secret_number ) { Ordering :: Less => println! ( \"\u592a\u5c0f\u4e86\uff01\" ), Ordering :: Greater => println! ( \"\u592a\u5927\u4e86\uff01\" ), Ordering :: Equal => { println! ( \"\u731c\u5bf9\u4e86\uff01\" ); break ; } } } }","title":"\u6700\u7ec8\u7248\u672c"},{"location":"hello-cargo/","text":"Hello Cargo Cargo \u662f Rust \u7684\u6784\u5efa\u7cfb\u7edf\u548c\u5305\u7ba1\u7406\u5668\u3002 \u5b89\u88c5cargo \u5b98\u65b9\u81ea\u5e26\u7684 \u5b89\u88c5 \u90e8\u5206\u5df2\u7ecf\u5b89\u88c5\u4e86Cargo \u67e5\u770b\u7248\u672c $ cargo --version cargo 1 .66.0 ( d65d197ad 2022 -11-15 ) \u4f7f\u7528cargo\u521b\u5efa\u9879\u76ee cargo new Cargo \u5c06\u4ee3\u7801\u653e\u5728 src \u76ee\u5f55\uff0c\u540c\u65f6\u9879\u76ee\u6839\u76ee\u5f55\u5305\u542b\u4e00\u4e2a Cargo.toml \u914d\u7f6e\u6587\u4ef6\u3002 $ cargo new hello-cargo $ cd hello-cargo $ ls Cargo.toml src Cargo.toml \u914d\u7f6e\u6587\u4ef6\uff0c \u5982\u4e0b: # \u4e00\u4e2a\u7247\u6bb5\uff08section\uff09\u6807\u9898\uff0c\u8868\u660e\u4e0b\u9762\u7684\u8bed\u53e5\u7528\u6765\u914d\u7f6e\u4e00\u4e2a\u5305 [package] name = \"hello-cargo\" # \u9879\u76ee\u7684\u540d\u79f0 version = \"0.1.0\" # \u9879\u76ee\u7684\u7248\u672c edition = \"2021\" # Rust \u7248\u672c # See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html # \u7f57\u5217\u9879\u76ee\u4f9d\u8d56\u7684\u4ee3\u7801\u5305, \u4ee3\u7801\u5305\u88ab\u79f0\u4e3a crates\u3002\u8fd9\u4e2a\u9879\u76ee\u5e76\u4e0d\u9700\u8981\u5176\u4ed6\u7684 crate [dependencies] TOML \u683c\u5f0f\u662f Cargo \u914d\u7f6e\u6587\u4ef6\u7684\u683c\u5f0f\u3002 edition \u7684\u503c\u53c2\u8003 \u9644\u5f55E src \u9879\u76ee\u6e90\u6587\u4ef6\u5b58\u653e\u5728 src \u76ee\u5f55\u4e2d\u3002 \u9879\u76ee\u6839\u76ee\u5f55\u53ea\u5b58\u653e README \u3001 license \u4fe1\u606f\u3001 \u914d\u7f6e\u6587\u4ef6 \u548c \u5176\u4ed6\u8ddf\u4ee3\u7801\u65e0\u5173\u7684\u6587\u4ef6 \u3002 src/main.rs Cargo \u4e3a\u751f\u6210\u7684\u4e00\u4e2a \u201cHello, world!\u201d \u7a0b\u5e8f fn main () { println! ( \"Hello, world!\" ); } \u6784\u5efa\u5e76\u8fd0\u884c Cargo \u9879\u76ee \u901a\u8fc7 Cargo \u6784\u5efa\u548c\u8fd0\u884c \u201cHello, world!\u201d \u7a0b\u5e8f cargo build # \u5728hello-cargo\u76ee\u5f55\u6267\u884c $ cargo build Compiling hello_cargo v0.1.0 ( file:///projects/hello_cargo ) Finished dev [ unoptimized + debuginfo ] target ( s ) in 2 .85 secs $ ls Cargo.lock Cargo.toml src target # \u4f1a\u521b\u5efa\u4e00\u4e2a\u53ef\u6267\u884c\u6587\u4ef6 target/debug/hello-cargo, \u800c\u4e0d\u662f\u653e\u5728\u76ee\u524d\u76ee\u5f55\u4e0b\u3002 # \u7531\u4e8e\u9ed8\u8ba4\u7684\u6784\u5efa\u65b9\u6cd5\u662f\u8c03\u8bd5\u6784\u5efa\uff08debug build\uff09\uff0cCargo \u4f1a\u5c06\u53ef\u6267\u884c\u6587\u4ef6\u653e\u5728\u540d\u4e3a debug \u7684\u76ee\u5f55\u4e2d\u3002 \u8fd0\u884c\u53ef\u6267\u884c\u6587\u4ef6: $ ./target/debug/hello-cargo Hello, world! \u9996\u6b21\u8fd0\u884c cargo build \u65f6\uff0c\u4e5f\u4f1a\u4f7f Cargo \u5728\u9879\u76ee\u6839\u76ee\u5f55\u521b\u5efa\u4e00\u4e2a\u65b0\u6587\u4ef6\uff1a Cargo.lock \u3002\u8fd9\u4e2a\u6587\u4ef6\u8bb0\u5f55\u9879\u76ee\u4f9d\u8d56\u7684\u5b9e\u9645\u7248\u672c\u3002\u8fd9\u4e2a\u9879\u76ee\u5e76\u6ca1\u6709\u4f9d\u8d56\uff0c\u6240\u4ee5\u5176\u5185\u5bb9\u6bd4\u8f83\u5c11\u3002\u81ea\u5df1\u6c38\u8fdc\u4e5f\u4e0d\u9700\u8981\u78b0\u8fd9\u4e2a\u6587\u4ef6\uff0c\u8ba9 Cargo \u5904\u7406\u5b83\u5c31\u884c\u4e86\u3002 cargo run \u53ef\u4ee5\u4f7f\u7528 cargo run \u5728\u4e00\u4e2a\u547d\u4ee4\u4e2d\u540c\u65f6\u7f16\u8bd1\u5e76\u8fd0\u884c\u751f\u6210\u7684\u53ef\u6267\u884c\u6587\u4ef6\uff1a $ cargo run Finished dev [ unoptimized + debuginfo ] target ( s ) in 0 .00s Running ` target/debug/hello-cargo ` Hello, world! Cargo \u53d1\u73b0\u6587\u4ef6\u5e76\u6ca1\u6709\u88ab\u6539\u53d8\uff0c\u6240\u4ee5\u5b83\u5e76\u6ca1\u6709\u91cd\u65b0\u7f16\u8bd1\uff0c\u800c\u662f\u76f4\u63a5\u8fd0\u884c\u4e86\u53ef\u6267\u884c\u6587\u4ef6\u3002 \u5982\u679c\u4fee\u6539\u4e86\u6e90\u6587\u4ef6\u7684\u8bdd\uff0cCargo \u4f1a\u5728\u8fd0\u884c\u4e4b\u524d\u91cd\u65b0\u6784\u5efa\u9879\u76ee\uff0c\u5e76\u4f1a\u51fa\u73b0\u50cf\u8fd9\u6837\u7684\u8f93\u51fa\uff1a $ cargo run Compiling hello-cargo v0.1.0 ( file:///projects/hello_cargo ) Finished dev [ unoptimized + debuginfo ] target ( s ) in 0 .33 secs Running ` target/debug/hello_cargo ` Hello, world! cargo check \u8be5\u547d\u4ee4\u5feb\u901f\u68c0\u67e5\u4ee3\u7801\u786e\u4fdd\u5176\u53ef\u4ee5\u7f16\u8bd1\uff0c\u4f46\u5e76\u4e0d\u4ea7\u751f\u53ef\u6267\u884c\u6587\u4ef6: $ cargo check Checking hello_cargo v0.1.0 ( file:///projects/hello_cargo ) Finished dev [ unoptimized + debuginfo ] target ( s ) in 0 .32 secs \u4e3a\u4ec0\u4e48\u4f60\u4f1a\u4e0d\u9700\u8981\u53ef\u6267\u884c\u6587\u4ef6\u5462\uff1f \u901a\u5e38 cargo check \u8981\u6bd4 cargo build \u5feb\u5f97\u591a\uff0c\u56e0\u4e3a\u5b83\u7701\u7565\u4e86\u751f\u6210\u53ef\u6267\u884c\u6587\u4ef6\u7684\u6b65\u9aa4\u3002 \u5982\u679c\u4f60\u5728\u7f16\u5199\u4ee3\u7801\u65f6\u6301\u7eed\u7684\u8fdb\u884c\u68c0\u67e5\uff0c cargo check \u53ef\u4ee5\u8ba9\u4f60\u5feb\u901f\u4e86\u89e3\u73b0\u5728\u7684\u4ee3\u7801\u80fd\u4e0d\u80fd\u6b63\u5e38\u901a\u8fc7\u7f16\u8bd1\uff01 \u4e3a\u6b64\u5f88\u591a Rustaceans \u7f16\u5199\u4ee3\u7801\u65f6\u5b9a\u671f\u8fd0\u884c cargo check \u786e\u4fdd\u5b83\u4eec\u53ef\u4ee5\u7f16\u8bd1\u3002 \u5f53\u51c6\u5907\u597d\u4f7f\u7528\u53ef\u6267\u884c\u6587\u4ef6\u65f6\u624d\u8fd0\u884c cargo build \u3002 \u5176\u4ed6 git\u4ed3\u5e93 Cargo\u521b\u5efa\u9879\u76ee\u65f6\uff0c\u4f1a\u521d\u59cb\u5316\u4e00\u4e2a git \u4ed3\u5e93\uff0c\u4ee5\u53ca\u4e00\u4e2a .gitignore \u6587\u4ef6\u3002\u5982\u679c\u5728\u4e00\u4e2a\u5df2\u7ecf\u5b58\u5728\u7684 git \u4ed3\u5e93\u4e2d\u8fd0\u884c cargo new \uff0c\u5219\u8fd9\u4e9b git \u76f8\u5173\u6587\u4ef6\u5219\u4e0d\u4f1a\u751f\u6210\uff1b\u53ef\u4ee5\u901a\u8fc7\u8fd0\u884c cargo new --vcs=git \u6765\u8986\u76d6\u8fd9\u4e9b\u884c\u4e3a\u3002 \u53d1\u5e03\uff08release\uff09\u6784\u5efa \u5f53\u9879\u76ee\u6700\u7ec8\u51c6\u5907\u597d\u53d1\u5e03\u65f6\uff0c\u53ef\u4ee5\u4f7f\u7528 cargo build --release \u6765\u4f18\u5316\u7f16\u8bd1\u9879\u76ee\u3002 \u8fd9\u4f1a\u5728 target/release \u800c\u4e0d\u662f target/debug \u4e0b\u751f\u6210\u53ef\u6267\u884c\u6587\u4ef6\u3002 \u8fd9\u4e9b\u4f18\u5316\u53ef\u4ee5\u8ba9 Rust \u4ee3\u7801\u8fd0\u884c\u7684\u66f4\u5feb\uff0c\u4e0d\u8fc7\u542f\u7528\u8fd9\u4e9b\u4f18\u5316\u4e5f\u9700\u8981\u6d88\u8017\u66f4\u957f\u7684\u7f16\u8bd1\u65f6\u95f4\u3002 \u8fd9\u4e5f\u5c31\u662f\u4e3a\u4ec0\u4e48\u4f1a\u6709\u4e24\u79cd\u4e0d\u540c\u7684\u914d\u7f6e\uff1a \u4e00\u79cd\u662f\u4e3a\u4e86\u5f00\u53d1\uff0c\u4f60\u9700\u8981\u7ecf\u5e38\u5feb\u901f\u91cd\u65b0\u6784\u5efa\uff1b \u53e6\u4e00\u79cd\u662f\u4e3a\u7528\u6237\u6784\u5efa\u6700\u7ec8\u7a0b\u5e8f\uff0c\u5b83\u4eec\u4e0d\u4f1a\u7ecf\u5e38\u91cd\u65b0\u6784\u5efa\uff0c\u5e76\u4e14\u5e0c\u671b\u7a0b\u5e8f\u8fd0\u884c\u5f97\u8d8a\u5feb\u8d8a\u597d\u3002 \u5982\u679c\u4f60\u5728\u6d4b\u8bd5\u4ee3\u7801\u7684\u8fd0\u884c\u65f6\u95f4\uff0c\u8bf7\u786e\u4fdd\u8fd0\u884c cargo build --release \u5e76\u4f7f\u7528 target/release \u4e0b\u7684\u53ef\u6267\u884c\u6587\u4ef6\u8fdb\u884c\u6d4b\u8bd5\u3002 \u628a Cargo \u5f53\u4f5c\u4e60\u60ef \u5bf9\u4e8e\u7b80\u5355\u9879\u76ee\uff0c Cargo \u5e76\u4e0d\u6bd4 rustc \u63d0\u4f9b\u4e86\u66f4\u591a\u7684\u4f18\u52bf\uff0c\u4e0d\u8fc7\u968f\u7740\u5f00\u53d1\u7684\u6df1\u5165\uff0c\u7ec8\u5c06\u8bc1\u660e\u5176\u4ef7\u503c\u3002 \u4e00\u65e6\u7a0b\u5e8f\u58ee\u5927\u5230\u7531\u591a\u4e2a\u6587\u4ef6\u7ec4\u6210\uff0c\u4ea6\u6216\u8005\u662f\u9700\u8981\u5176\u4ed6\u7684\u4f9d\u8d56\uff0c\u8ba9 Cargo \u534f\u8c03\u6784\u5efa\u8fc7\u7a0b\u5c31\u4f1a\u7b80\u5355\u5f97\u591a\u3002 \u5373\u4fbf hello_cargo \u9879\u76ee\u5341\u5206\u7b80\u5355\uff0c\u5b83\u73b0\u5728\u4e5f\u4f7f\u7528\u4e86\u5f88\u591a\u5728\u4f60\u4e4b\u540e\u7684 Rust \u751f\u6daf\u5c06\u4f1a\u7528\u5230\u7684\u5b9e\u7528\u5de5\u5177\u3002 \u5176\u5b9e\uff0c\u8981\u5728\u4efb\u4f55\u5df2\u5b58\u5728\u7684\u9879\u76ee\u4e0a\u5de5\u4f5c\u65f6\uff0c\u53ef\u4ee5\u4f7f\u7528\u5982\u4e0b\u547d\u4ee4\u901a\u8fc7 Git \u68c0\u51fa\u4ee3\u7801\uff0c\u79fb\u52a8\u5230\u8be5\u9879\u76ee\u76ee\u5f55\u5e76\u6784\u5efa\uff1a git clone example.org/someproject cd someproject cargo build \u5173\u4e8e\u66f4\u591a Cargo \u7684\u4fe1\u606f\uff0c\u8bf7\u67e5\u9605 \u5176\u6587\u6863 \u3002","title":"Hello Cargo"},{"location":"hello-cargo/#hello-cargo","text":"Cargo \u662f Rust \u7684\u6784\u5efa\u7cfb\u7edf\u548c\u5305\u7ba1\u7406\u5668\u3002","title":"Hello Cargo"},{"location":"hello-cargo/#cargo","text":"\u5b98\u65b9\u81ea\u5e26\u7684 \u5b89\u88c5 \u90e8\u5206\u5df2\u7ecf\u5b89\u88c5\u4e86Cargo","title":"\u5b89\u88c5cargo"},{"location":"hello-cargo/#_1","text":"$ cargo --version cargo 1 .66.0 ( d65d197ad 2022 -11-15 )","title":"\u67e5\u770b\u7248\u672c"},{"location":"hello-cargo/#cargo_1","text":"","title":"\u4f7f\u7528cargo\u521b\u5efa\u9879\u76ee"},{"location":"hello-cargo/#cargo-new","text":"Cargo \u5c06\u4ee3\u7801\u653e\u5728 src \u76ee\u5f55\uff0c\u540c\u65f6\u9879\u76ee\u6839\u76ee\u5f55\u5305\u542b\u4e00\u4e2a Cargo.toml \u914d\u7f6e\u6587\u4ef6\u3002 $ cargo new hello-cargo $ cd hello-cargo $ ls Cargo.toml src","title":"cargo new"},{"location":"hello-cargo/#cargotoml","text":"\u914d\u7f6e\u6587\u4ef6\uff0c \u5982\u4e0b: # \u4e00\u4e2a\u7247\u6bb5\uff08section\uff09\u6807\u9898\uff0c\u8868\u660e\u4e0b\u9762\u7684\u8bed\u53e5\u7528\u6765\u914d\u7f6e\u4e00\u4e2a\u5305 [package] name = \"hello-cargo\" # \u9879\u76ee\u7684\u540d\u79f0 version = \"0.1.0\" # \u9879\u76ee\u7684\u7248\u672c edition = \"2021\" # Rust \u7248\u672c # See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html # \u7f57\u5217\u9879\u76ee\u4f9d\u8d56\u7684\u4ee3\u7801\u5305, \u4ee3\u7801\u5305\u88ab\u79f0\u4e3a crates\u3002\u8fd9\u4e2a\u9879\u76ee\u5e76\u4e0d\u9700\u8981\u5176\u4ed6\u7684 crate [dependencies] TOML \u683c\u5f0f\u662f Cargo \u914d\u7f6e\u6587\u4ef6\u7684\u683c\u5f0f\u3002 edition \u7684\u503c\u53c2\u8003 \u9644\u5f55E","title":"Cargo.toml"},{"location":"hello-cargo/#src","text":"\u9879\u76ee\u6e90\u6587\u4ef6\u5b58\u653e\u5728 src \u76ee\u5f55\u4e2d\u3002 \u9879\u76ee\u6839\u76ee\u5f55\u53ea\u5b58\u653e README \u3001 license \u4fe1\u606f\u3001 \u914d\u7f6e\u6587\u4ef6 \u548c \u5176\u4ed6\u8ddf\u4ee3\u7801\u65e0\u5173\u7684\u6587\u4ef6 \u3002","title":"src"},{"location":"hello-cargo/#srcmainrs","text":"Cargo \u4e3a\u751f\u6210\u7684\u4e00\u4e2a \u201cHello, world!\u201d \u7a0b\u5e8f fn main () { println! ( \"Hello, world!\" ); }","title":"src/main.rs"},{"location":"hello-cargo/#cargo_2","text":"\u901a\u8fc7 Cargo \u6784\u5efa\u548c\u8fd0\u884c \u201cHello, world!\u201d \u7a0b\u5e8f","title":"\u6784\u5efa\u5e76\u8fd0\u884c Cargo \u9879\u76ee"},{"location":"hello-cargo/#cargo-build","text":"# \u5728hello-cargo\u76ee\u5f55\u6267\u884c $ cargo build Compiling hello_cargo v0.1.0 ( file:///projects/hello_cargo ) Finished dev [ unoptimized + debuginfo ] target ( s ) in 2 .85 secs $ ls Cargo.lock Cargo.toml src target # \u4f1a\u521b\u5efa\u4e00\u4e2a\u53ef\u6267\u884c\u6587\u4ef6 target/debug/hello-cargo, \u800c\u4e0d\u662f\u653e\u5728\u76ee\u524d\u76ee\u5f55\u4e0b\u3002 # \u7531\u4e8e\u9ed8\u8ba4\u7684\u6784\u5efa\u65b9\u6cd5\u662f\u8c03\u8bd5\u6784\u5efa\uff08debug build\uff09\uff0cCargo \u4f1a\u5c06\u53ef\u6267\u884c\u6587\u4ef6\u653e\u5728\u540d\u4e3a debug \u7684\u76ee\u5f55\u4e2d\u3002 \u8fd0\u884c\u53ef\u6267\u884c\u6587\u4ef6: $ ./target/debug/hello-cargo Hello, world! \u9996\u6b21\u8fd0\u884c cargo build \u65f6\uff0c\u4e5f\u4f1a\u4f7f Cargo \u5728\u9879\u76ee\u6839\u76ee\u5f55\u521b\u5efa\u4e00\u4e2a\u65b0\u6587\u4ef6\uff1a Cargo.lock \u3002\u8fd9\u4e2a\u6587\u4ef6\u8bb0\u5f55\u9879\u76ee\u4f9d\u8d56\u7684\u5b9e\u9645\u7248\u672c\u3002\u8fd9\u4e2a\u9879\u76ee\u5e76\u6ca1\u6709\u4f9d\u8d56\uff0c\u6240\u4ee5\u5176\u5185\u5bb9\u6bd4\u8f83\u5c11\u3002\u81ea\u5df1\u6c38\u8fdc\u4e5f\u4e0d\u9700\u8981\u78b0\u8fd9\u4e2a\u6587\u4ef6\uff0c\u8ba9 Cargo \u5904\u7406\u5b83\u5c31\u884c\u4e86\u3002","title":"cargo build"},{"location":"hello-cargo/#cargo-run","text":"\u53ef\u4ee5\u4f7f\u7528 cargo run \u5728\u4e00\u4e2a\u547d\u4ee4\u4e2d\u540c\u65f6\u7f16\u8bd1\u5e76\u8fd0\u884c\u751f\u6210\u7684\u53ef\u6267\u884c\u6587\u4ef6\uff1a $ cargo run Finished dev [ unoptimized + debuginfo ] target ( s ) in 0 .00s Running ` target/debug/hello-cargo ` Hello, world! Cargo \u53d1\u73b0\u6587\u4ef6\u5e76\u6ca1\u6709\u88ab\u6539\u53d8\uff0c\u6240\u4ee5\u5b83\u5e76\u6ca1\u6709\u91cd\u65b0\u7f16\u8bd1\uff0c\u800c\u662f\u76f4\u63a5\u8fd0\u884c\u4e86\u53ef\u6267\u884c\u6587\u4ef6\u3002 \u5982\u679c\u4fee\u6539\u4e86\u6e90\u6587\u4ef6\u7684\u8bdd\uff0cCargo \u4f1a\u5728\u8fd0\u884c\u4e4b\u524d\u91cd\u65b0\u6784\u5efa\u9879\u76ee\uff0c\u5e76\u4f1a\u51fa\u73b0\u50cf\u8fd9\u6837\u7684\u8f93\u51fa\uff1a $ cargo run Compiling hello-cargo v0.1.0 ( file:///projects/hello_cargo ) Finished dev [ unoptimized + debuginfo ] target ( s ) in 0 .33 secs Running ` target/debug/hello_cargo ` Hello, world!","title":"cargo run"},{"location":"hello-cargo/#cargo-check","text":"\u8be5\u547d\u4ee4\u5feb\u901f\u68c0\u67e5\u4ee3\u7801\u786e\u4fdd\u5176\u53ef\u4ee5\u7f16\u8bd1\uff0c\u4f46\u5e76\u4e0d\u4ea7\u751f\u53ef\u6267\u884c\u6587\u4ef6: $ cargo check Checking hello_cargo v0.1.0 ( file:///projects/hello_cargo ) Finished dev [ unoptimized + debuginfo ] target ( s ) in 0 .32 secs \u4e3a\u4ec0\u4e48\u4f60\u4f1a\u4e0d\u9700\u8981\u53ef\u6267\u884c\u6587\u4ef6\u5462\uff1f \u901a\u5e38 cargo check \u8981\u6bd4 cargo build \u5feb\u5f97\u591a\uff0c\u56e0\u4e3a\u5b83\u7701\u7565\u4e86\u751f\u6210\u53ef\u6267\u884c\u6587\u4ef6\u7684\u6b65\u9aa4\u3002 \u5982\u679c\u4f60\u5728\u7f16\u5199\u4ee3\u7801\u65f6\u6301\u7eed\u7684\u8fdb\u884c\u68c0\u67e5\uff0c cargo check \u53ef\u4ee5\u8ba9\u4f60\u5feb\u901f\u4e86\u89e3\u73b0\u5728\u7684\u4ee3\u7801\u80fd\u4e0d\u80fd\u6b63\u5e38\u901a\u8fc7\u7f16\u8bd1\uff01 \u4e3a\u6b64\u5f88\u591a Rustaceans \u7f16\u5199\u4ee3\u7801\u65f6\u5b9a\u671f\u8fd0\u884c cargo check \u786e\u4fdd\u5b83\u4eec\u53ef\u4ee5\u7f16\u8bd1\u3002 \u5f53\u51c6\u5907\u597d\u4f7f\u7528\u53ef\u6267\u884c\u6587\u4ef6\u65f6\u624d\u8fd0\u884c cargo build \u3002","title":"cargo check"},{"location":"hello-cargo/#_2","text":"","title":"\u5176\u4ed6"},{"location":"hello-cargo/#git","text":"Cargo\u521b\u5efa\u9879\u76ee\u65f6\uff0c\u4f1a\u521d\u59cb\u5316\u4e00\u4e2a git \u4ed3\u5e93\uff0c\u4ee5\u53ca\u4e00\u4e2a .gitignore \u6587\u4ef6\u3002\u5982\u679c\u5728\u4e00\u4e2a\u5df2\u7ecf\u5b58\u5728\u7684 git \u4ed3\u5e93\u4e2d\u8fd0\u884c cargo new \uff0c\u5219\u8fd9\u4e9b git \u76f8\u5173\u6587\u4ef6\u5219\u4e0d\u4f1a\u751f\u6210\uff1b\u53ef\u4ee5\u901a\u8fc7\u8fd0\u884c cargo new --vcs=git \u6765\u8986\u76d6\u8fd9\u4e9b\u884c\u4e3a\u3002","title":"git\u4ed3\u5e93"},{"location":"hello-cargo/#release","text":"\u5f53\u9879\u76ee\u6700\u7ec8\u51c6\u5907\u597d\u53d1\u5e03\u65f6\uff0c\u53ef\u4ee5\u4f7f\u7528 cargo build --release \u6765\u4f18\u5316\u7f16\u8bd1\u9879\u76ee\u3002 \u8fd9\u4f1a\u5728 target/release \u800c\u4e0d\u662f target/debug \u4e0b\u751f\u6210\u53ef\u6267\u884c\u6587\u4ef6\u3002 \u8fd9\u4e9b\u4f18\u5316\u53ef\u4ee5\u8ba9 Rust \u4ee3\u7801\u8fd0\u884c\u7684\u66f4\u5feb\uff0c\u4e0d\u8fc7\u542f\u7528\u8fd9\u4e9b\u4f18\u5316\u4e5f\u9700\u8981\u6d88\u8017\u66f4\u957f\u7684\u7f16\u8bd1\u65f6\u95f4\u3002 \u8fd9\u4e5f\u5c31\u662f\u4e3a\u4ec0\u4e48\u4f1a\u6709\u4e24\u79cd\u4e0d\u540c\u7684\u914d\u7f6e\uff1a \u4e00\u79cd\u662f\u4e3a\u4e86\u5f00\u53d1\uff0c\u4f60\u9700\u8981\u7ecf\u5e38\u5feb\u901f\u91cd\u65b0\u6784\u5efa\uff1b \u53e6\u4e00\u79cd\u662f\u4e3a\u7528\u6237\u6784\u5efa\u6700\u7ec8\u7a0b\u5e8f\uff0c\u5b83\u4eec\u4e0d\u4f1a\u7ecf\u5e38\u91cd\u65b0\u6784\u5efa\uff0c\u5e76\u4e14\u5e0c\u671b\u7a0b\u5e8f\u8fd0\u884c\u5f97\u8d8a\u5feb\u8d8a\u597d\u3002 \u5982\u679c\u4f60\u5728\u6d4b\u8bd5\u4ee3\u7801\u7684\u8fd0\u884c\u65f6\u95f4\uff0c\u8bf7\u786e\u4fdd\u8fd0\u884c cargo build --release \u5e76\u4f7f\u7528 target/release \u4e0b\u7684\u53ef\u6267\u884c\u6587\u4ef6\u8fdb\u884c\u6d4b\u8bd5\u3002","title":"\u53d1\u5e03\uff08release\uff09\u6784\u5efa"},{"location":"hello-cargo/#cargo_3","text":"\u5bf9\u4e8e\u7b80\u5355\u9879\u76ee\uff0c Cargo \u5e76\u4e0d\u6bd4 rustc \u63d0\u4f9b\u4e86\u66f4\u591a\u7684\u4f18\u52bf\uff0c\u4e0d\u8fc7\u968f\u7740\u5f00\u53d1\u7684\u6df1\u5165\uff0c\u7ec8\u5c06\u8bc1\u660e\u5176\u4ef7\u503c\u3002 \u4e00\u65e6\u7a0b\u5e8f\u58ee\u5927\u5230\u7531\u591a\u4e2a\u6587\u4ef6\u7ec4\u6210\uff0c\u4ea6\u6216\u8005\u662f\u9700\u8981\u5176\u4ed6\u7684\u4f9d\u8d56\uff0c\u8ba9 Cargo \u534f\u8c03\u6784\u5efa\u8fc7\u7a0b\u5c31\u4f1a\u7b80\u5355\u5f97\u591a\u3002 \u5373\u4fbf hello_cargo \u9879\u76ee\u5341\u5206\u7b80\u5355\uff0c\u5b83\u73b0\u5728\u4e5f\u4f7f\u7528\u4e86\u5f88\u591a\u5728\u4f60\u4e4b\u540e\u7684 Rust \u751f\u6daf\u5c06\u4f1a\u7528\u5230\u7684\u5b9e\u7528\u5de5\u5177\u3002 \u5176\u5b9e\uff0c\u8981\u5728\u4efb\u4f55\u5df2\u5b58\u5728\u7684\u9879\u76ee\u4e0a\u5de5\u4f5c\u65f6\uff0c\u53ef\u4ee5\u4f7f\u7528\u5982\u4e0b\u547d\u4ee4\u901a\u8fc7 Git \u68c0\u51fa\u4ee3\u7801\uff0c\u79fb\u52a8\u5230\u8be5\u9879\u76ee\u76ee\u5f55\u5e76\u6784\u5efa\uff1a git clone example.org/someproject cd someproject cargo build \u5173\u4e8e\u66f4\u591a Cargo \u7684\u4fe1\u606f\uff0c\u8bf7\u67e5\u9605 \u5176\u6587\u6863 \u3002","title":"\u628a Cargo \u5f53\u4f5c\u4e60\u60ef"},{"location":"hello-world/","text":"hello world \u521b\u5efars\u6587\u4ef6 \u521b\u5efa helloworld.rs \u6587\u4ef6 fn main (){ println! ( \"Hello, world!\" ); } \u7f16\u8bd1 # \u7f16\u8bd1\u6e90\u6587\u4ef6 rustc helloworld.rs # \u751f\u6210 helloworld \u53ef\u6267\u884c\u6587\u4ef6. \u6267\u884c # \u6267\u884c\u53ef\u6267\u884c\u6587\u4ef6 ./helloworld # \u8f93\u51fa: Hello, world! \u91ca\u4e49 main \u51fd\u6570: \u5728\u53ef\u6267\u884c\u7684 Rust \u7a0b\u5e8f\u4e2d\uff0c\u5b83\u603b\u662f\u6700\u5148\u8fd0\u884c\u7684\u4ee3\u7801\u3002 \u53c2\u8003: \u5206\u6790\u8fd9\u4e2a Rust \u7a0b\u5e8f println! \u51fd\u6570: \u4e00\u4e2a Rust \u5b8f\uff08macro\uff09\u3002 \"Hello, world!\": \u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\u3002\u6211\u4eec\u628a\u8fd9\u4e2a\u5b57\u7b26\u4e32\u4f5c\u4e3a\u4e00\u4e2a\u53c2\u6570\u4f20\u9012\u7ed9 println!\uff0c\u5b57\u7b26\u4e32\u5c06\u88ab\u6253\u5370\u5230\u5c4f\u5e55\u4e0a\u3002 \u8be5\u884c\u4ee5\u5206\u53f7\u7ed3\u5c3e\uff08;\uff09: \u8fd9\u4ee3\u8868\u4e00\u4e2a\u8868\u8fbe\u5f0f\u7684\u7ed3\u675f\u548c\u4e0b\u4e00\u4e2a\u8868\u8fbe\u5f0f\u7684\u5f00\u59cb\u3002\u5927\u90e8\u5206 Rust \u4ee3\u7801\u884c\u4ee5\u5206\u53f7\u7ed3\u5c3e\u3002 \u7f16\u8bd1\u548c\u8fd0\u884c\u662f\u5f7c\u6b64\u72ec\u7acb\u7684\u6b65\u9aa4 # \u8fd0\u884c Rust \u7a0b\u5e8f\u4e4b\u524d\uff0c\u5fc5\u987b\u5148\u4f7f\u7528 Rust \u7f16\u8bd1\u5668\u7f16\u8bd1, $ rustc main.rs # \u8f93\u51fa\u4e00\u4e2a\u4e8c\u8fdb\u5236\u7684\u53ef\u6267\u884c\u6587\u4ef6, \u5728 shell \u4e2d\u8f93\u5165 ls \u547d\u4ee4\u53ef\u4ee5\u770b\u89c1\u8fd9\u4e2a\u53ef\u6267\u884c\u6587\u4ef6 $ ls helloword helloword.rs # \u4ece\u8fd9\u91cc\u5f00\u59cb\u8fd0\u884c helloword \u6587\u4ef6 $ ./helloword Hello, world! Rust \u662f\u4e00\u79cd \u9884\u7f16\u8bd1\u9759\u6001\u7c7b\u578b\uff08ahead-of-time compiled\uff09\u8bed\u8a00\uff0c\u8fd9\u610f\u5473\u7740\u4f60\u53ef\u4ee5\u7f16\u8bd1\u7a0b\u5e8f\uff0c\u5e76\u5c06\u53ef\u6267\u884c\u6587\u4ef6\u9001\u7ed9\u5176\u4ed6\u4eba\uff0c\u4ed6\u4eec\u751a\u81f3\u4e0d\u9700\u8981\u5b89\u88c5 Rust \u5c31\u53ef\u4ee5\u8fd0\u884c\u3002","title":"hello world"},{"location":"hello-world/#hello-world","text":"","title":"hello world"},{"location":"hello-world/#rs","text":"\u521b\u5efa helloworld.rs \u6587\u4ef6 fn main (){ println! ( \"Hello, world!\" ); }","title":"\u521b\u5efars\u6587\u4ef6"},{"location":"hello-world/#_1","text":"# \u7f16\u8bd1\u6e90\u6587\u4ef6 rustc helloworld.rs # \u751f\u6210 helloworld \u53ef\u6267\u884c\u6587\u4ef6.","title":"\u7f16\u8bd1"},{"location":"hello-world/#_2","text":"# \u6267\u884c\u53ef\u6267\u884c\u6587\u4ef6 ./helloworld # \u8f93\u51fa: Hello, world!","title":"\u6267\u884c"},{"location":"hello-world/#_3","text":"main \u51fd\u6570: \u5728\u53ef\u6267\u884c\u7684 Rust \u7a0b\u5e8f\u4e2d\uff0c\u5b83\u603b\u662f\u6700\u5148\u8fd0\u884c\u7684\u4ee3\u7801\u3002 \u53c2\u8003: \u5206\u6790\u8fd9\u4e2a Rust \u7a0b\u5e8f println! \u51fd\u6570: \u4e00\u4e2a Rust \u5b8f\uff08macro\uff09\u3002 \"Hello, world!\": \u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\u3002\u6211\u4eec\u628a\u8fd9\u4e2a\u5b57\u7b26\u4e32\u4f5c\u4e3a\u4e00\u4e2a\u53c2\u6570\u4f20\u9012\u7ed9 println!\uff0c\u5b57\u7b26\u4e32\u5c06\u88ab\u6253\u5370\u5230\u5c4f\u5e55\u4e0a\u3002 \u8be5\u884c\u4ee5\u5206\u53f7\u7ed3\u5c3e\uff08;\uff09: \u8fd9\u4ee3\u8868\u4e00\u4e2a\u8868\u8fbe\u5f0f\u7684\u7ed3\u675f\u548c\u4e0b\u4e00\u4e2a\u8868\u8fbe\u5f0f\u7684\u5f00\u59cb\u3002\u5927\u90e8\u5206 Rust \u4ee3\u7801\u884c\u4ee5\u5206\u53f7\u7ed3\u5c3e\u3002","title":"\u91ca\u4e49"},{"location":"hello-world/#_4","text":"# \u8fd0\u884c Rust \u7a0b\u5e8f\u4e4b\u524d\uff0c\u5fc5\u987b\u5148\u4f7f\u7528 Rust \u7f16\u8bd1\u5668\u7f16\u8bd1, $ rustc main.rs # \u8f93\u51fa\u4e00\u4e2a\u4e8c\u8fdb\u5236\u7684\u53ef\u6267\u884c\u6587\u4ef6, \u5728 shell \u4e2d\u8f93\u5165 ls \u547d\u4ee4\u53ef\u4ee5\u770b\u89c1\u8fd9\u4e2a\u53ef\u6267\u884c\u6587\u4ef6 $ ls helloword helloword.rs # \u4ece\u8fd9\u91cc\u5f00\u59cb\u8fd0\u884c helloword \u6587\u4ef6 $ ./helloword Hello, world! Rust \u662f\u4e00\u79cd \u9884\u7f16\u8bd1\u9759\u6001\u7c7b\u578b\uff08ahead-of-time compiled\uff09\u8bed\u8a00\uff0c\u8fd9\u610f\u5473\u7740\u4f60\u53ef\u4ee5\u7f16\u8bd1\u7a0b\u5e8f\uff0c\u5e76\u5c06\u53ef\u6267\u884c\u6587\u4ef6\u9001\u7ed9\u5176\u4ed6\u4eba\uff0c\u4ed6\u4eec\u751a\u81f3\u4e0d\u9700\u8981\u5b89\u88c5 Rust \u5c31\u53ef\u4ee5\u8fd0\u884c\u3002","title":"\u7f16\u8bd1\u548c\u8fd0\u884c\u662f\u5f7c\u6b64\u72ec\u7acb\u7684\u6b65\u9aa4"},{"location":"ownership/","text":"\u6240\u6709\u6743 Rust \u7684\u6838\u5fc3\u529f\u80fd\uff08\u4e4b\u4e00\uff09\u662f \u6240\u6709\u6743\uff08ownership\uff09\u3002 \u6240\u6709\u7a0b\u5e8f\u90fd\u5fc5\u987b\u7ba1\u7406\u5176\u8fd0\u884c\u65f6\u4f7f\u7528\u8ba1\u7b97\u673a\u5185\u5b58\u7684\u65b9\u5f0f\u3002 \u4e00\u4e9b\u8bed\u8a00\u4e2d\u5177\u6709\u5783\u573e\u56de\u6536\u673a\u5236\uff0c\u5728\u7a0b\u5e8f\u8fd0\u884c\u65f6\u6709\u89c4\u5f8b\u5730\u5bfb\u627e\u4e0d\u518d\u4f7f\u7528\u7684\u5185\u5b58\uff1b \u5728\u53e6\u4e00\u4e9b\u8bed\u8a00\u4e2d\uff0c\u7a0b\u5e8f\u5458\u5fc5\u987b\u4eb2\u81ea\u5206\u914d\u548c\u91ca\u653e\u5185\u5b58\u3002 Rust \u5219\u9009\u62e9\u4e86\u7b2c\u4e09\u79cd\u65b9\u5f0f\uff1a \u901a\u8fc7\u6240\u6709\u6743\u7cfb\u7edf\u7ba1\u7406\u5185\u5b58\uff0c\u7f16\u8bd1\u5668\u5728\u7f16\u8bd1\u65f6\u4f1a\u6839\u636e\u4e00\u7cfb\u5217\u7684\u89c4\u5219\u8fdb\u884c\u68c0\u67e5\u3002\u5982\u679c\u8fdd\u53cd\u4e86\u4efb\u4f55\u8fd9\u4e9b\u89c4\u5219\uff0c\u7a0b\u5e8f\u90fd\u4e0d\u80fd\u7f16\u8bd1\u3002\u5728\u8fd0\u884c\u65f6\uff0c\u6240\u6709\u6743\u7cfb\u7edf\u7684\u4efb\u4f55\u529f\u80fd\u90fd\u4e0d\u4f1a\u51cf\u6162\u7a0b\u5e8f\u3002 \u7b80\u4ecb \u6808\uff08Stack\uff09\u4e0e\u5806\uff08Heap\uff09 \u5728\u5f88\u591a\u8bed\u8a00\u4e2d\uff0c\u4f60\u5e76\u4e0d\u9700\u8981\u7ecf\u5e38\u8003\u8651\u5230\u6808\u4e0e\u5806\u3002\u4e0d\u8fc7\u5728\u50cf Rust \u8fd9\u6837\u7684\u7cfb\u7edf\u7f16\u7a0b\u8bed\u8a00\u4e2d\uff0c\u503c\u662f\u4f4d\u4e8e\u6808\u4e0a\u8fd8\u662f\u5806\u4e0a\u5728\u66f4\u5927\u7a0b\u5ea6\u4e0a\u5f71\u54cd\u4e86\u8bed\u8a00\u7684\u884c\u4e3a\u4ee5\u53ca\u4e3a\u4f55\u5fc5\u987b\u505a\u51fa\u8fd9\u6837\u7684\u6289\u62e9\u3002 \u6808\u548c\u5806\u90fd\u662f\u4ee3\u7801\u5728\u8fd0\u884c\u65f6\u53ef\u4f9b\u4f7f\u7528\u7684\u5185\u5b58\uff0c\u4f46\u662f\u5b83\u4eec\u7684\u7ed3\u6784\u4e0d\u540c\u3002 \u6808\u4ee5\u653e\u5165\u503c\u7684\u987a\u5e8f\u5b58\u50a8\u503c\u5e76\u4ee5\u76f8\u53cd\u987a\u5e8f\u53d6\u51fa\u503c \u3002\u8fd9\u4e5f\u88ab\u79f0\u4f5c \u540e\u8fdb\u5148\u51fa \uff08last in, first out\uff09\u3002\u60f3\u8c61\u4e00\u4e0b\u4e00\u53e0\u76d8\u5b50\uff1a\u5f53\u589e\u52a0\u66f4\u591a\u76d8\u5b50\u65f6\uff0c\u628a\u5b83\u4eec\u653e\u5728\u76d8\u5b50\u5806\u7684\u9876\u90e8\uff0c\u5f53\u9700\u8981\u76d8\u5b50\u65f6\uff0c\u4e5f\u4ece\u9876\u90e8\u62ff\u8d70\u3002\u4e0d\u80fd\u4ece\u4e2d\u95f4\u4e5f\u4e0d\u80fd\u4ece\u5e95\u90e8\u589e\u52a0\u6216\u62ff\u8d70\u76d8\u5b50\uff01\u589e\u52a0\u6570\u636e\u53eb\u505a \u8fdb\u6808 \uff08pushing onto the stack\uff09\uff0c\u800c\u79fb\u51fa\u6570\u636e\u53eb\u505a \u51fa\u6808 \uff08popping off the stack\uff09\u3002 \u6808\u4e2d\u7684\u6240\u6709\u6570\u636e\u90fd\u5fc5\u987b\u5360\u7528\u5df2\u77e5\u4e14\u56fa\u5b9a\u7684\u5927\u5c0f \u3002 \u5728\u7f16\u8bd1\u65f6\u5927\u5c0f\u672a\u77e5\u6216\u5927\u5c0f\u53ef\u80fd\u53d8\u5316\u7684\u6570\u636e\uff0c\u8981\u6539\u4e3a\u5b58\u50a8\u5728\u5806\u4e0a \u3002 \u5806\u662f\u7f3a\u4e4f\u7ec4\u7ec7\u7684\uff1a\u5f53\u5411\u5806\u653e\u5165\u6570\u636e\u65f6\uff0c\u4f60\u8981\u8bf7\u6c42\u4e00\u5b9a\u5927\u5c0f\u7684\u7a7a\u95f4\u3002 \u5185\u5b58\u5206\u914d\u5668 \uff08memory allocator\uff09\u5728\u5806\u7684\u67d0\u5904\u627e\u5230\u4e00\u5757\u8db3\u591f\u5927\u7684\u7a7a\u4f4d\uff0c\u628a\u5b83\u6807\u8bb0\u4e3a\u5df2\u4f7f\u7528\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a\u8868\u793a\u8be5\u4f4d\u7f6e\u5730\u5740\u7684 \u6307\u9488 \uff08pointer\uff09\u3002\u8fd9\u4e2a\u8fc7\u7a0b\u79f0\u4f5c \u5728\u5806\u4e0a\u5206\u914d\u5185\u5b58 \uff08allocating on the heap\uff09\uff0c\u6709\u65f6\u7b80\u79f0\u4e3a \u201c \u5206\u914d \u201d\uff08allocating\uff09\u3002\uff08\u5c06\u6570\u636e\u63a8\u5165\u6808\u4e2d\u5e76\u4e0d\u88ab\u8ba4\u4e3a\u662f\u5206\u914d\uff09\u3002\u56e0\u4e3a\u6307\u5411\u653e\u5165\u5806\u4e2d\u6570\u636e\u7684\u6307\u9488\u662f\u5df2\u77e5\u7684\u5e76\u4e14\u5927\u5c0f\u662f\u56fa\u5b9a\u7684\uff0c\u4f60\u53ef\u4ee5\u5c06\u8be5\u6307\u9488\u5b58\u50a8\u5728\u6808\u4e0a\uff0c\u4e0d\u8fc7\u5f53\u9700\u8981\u5b9e\u9645\u6570\u636e\u65f6\uff0c\u5fc5\u987b\u8bbf\u95ee\u6307\u9488\u3002\u60f3\u8c61\u4e00\u4e0b\u53bb\u9910\u9986\u5c31\u5ea7\u5403\u996d\u3002\u5f53\u8fdb\u5165\u65f6\uff0c\u4f60\u8bf4\u660e\u6709\u51e0\u4e2a\u4eba\uff0c\u9910\u9986\u5458\u5de5\u4f1a\u627e\u5230\u4e00\u4e2a\u591f\u5927\u7684\u7a7a\u684c\u5b50\u5e76\u9886\u4f60\u4eec\u8fc7\u53bb\u3002\u5982\u679c\u6709\u4eba\u6765\u8fdf\u4e86\uff0c\u4ed6\u4eec\u4e5f\u53ef\u4ee5\u901a\u8fc7\u8be2\u95ee\u6765\u627e\u5230\u4f60\u4eec\u5750\u5728\u54ea\u3002 \u5165\u6808\u6bd4\u5728\u5806\u4e0a\u5206\u914d\u5185\u5b58\u8981\u5feb \uff0c\u56e0\u4e3a\uff08\u5165\u6808\u65f6\uff09\u5206\u914d\u5668\u65e0\u9700\u4e3a\u5b58\u50a8\u65b0\u6570\u636e\u53bb\u641c\u7d22\u5185\u5b58\u7a7a\u95f4\uff1b\u5176\u4f4d\u7f6e\u603b\u662f\u5728\u6808\u9876\u3002\u76f8\u6bd4\u4e4b\u4e0b\uff0c \u5728\u5806\u4e0a\u5206\u914d\u5185\u5b58\u5219\u9700\u8981\u66f4\u591a\u7684\u5de5\u4f5c\uff0c\u8fd9\u662f\u56e0\u4e3a\u5206\u914d\u5668\u5fc5\u987b\u9996\u5148\u627e\u5230\u4e00\u5757\u8db3\u591f\u5b58\u653e\u6570\u636e\u7684\u5185\u5b58\u7a7a\u95f4\uff0c\u5e76\u63a5\u7740\u505a\u4e00\u4e9b\u8bb0\u5f55\u4e3a\u4e0b\u4e00\u6b21\u5206\u914d\u505a\u51c6\u5907\u3002 \u8bbf\u95ee\u5806\u4e0a\u7684\u6570\u636e\u6bd4\u8bbf\u95ee\u6808\u4e0a\u7684\u6570\u636e\u6162\uff0c\u56e0\u4e3a\u5fc5\u987b\u901a\u8fc7\u6307\u9488\u6765\u8bbf\u95ee \u3002\u73b0\u4ee3\u5904\u7406\u5668\u5728\u5185\u5b58\u4e2d\u8df3\u8f6c\u8d8a\u5c11\u5c31\u8d8a\u5feb\uff08\u7f13\u5b58\uff09\u3002\u7ee7\u7eed\u7c7b\u6bd4\uff0c\u5047\u8bbe\u6709\u4e00\u4e2a\u670d\u52a1\u5458\u5728\u9910\u5385\u91cc\u5904\u7406\u591a\u4e2a\u684c\u5b50\u7684\u70b9\u83dc\u3002\u5728\u4e00\u4e2a\u684c\u5b50\u62a5\u5b8c\u6240\u6709\u83dc\u540e\u518d\u79fb\u52a8\u5230\u4e0b\u4e00\u4e2a\u684c\u5b50\u662f\u6700\u6709\u6548\u7387\u7684\u3002\u4ece\u684c\u5b50 A \u542c\u4e00\u4e2a\u83dc\uff0c\u63a5\u7740\u684c\u5b50 B \u542c\u4e00\u4e2a\u83dc\uff0c\u7136\u540e\u518d\u684c\u5b50 A\uff0c\u7136\u540e\u518d\u684c\u5b50 B \u8fd9\u6837\u7684\u6d41\u7a0b\u4f1a\u66f4\u52a0\u7f13\u6162\u3002\u51fa\u4e8e\u540c\u6837\u539f\u56e0\uff0c\u5904\u7406\u5668\u5728\u5904\u7406\u7684\u6570\u636e\u5f7c\u6b64\u8f83\u8fd1\u7684\u65f6\u5019\uff08\u6bd4\u5982\u5728\u6808\u4e0a\uff09\u6bd4\u8f83\u8fdc\u7684\u65f6\u5019\uff08\u6bd4\u5982\u53ef\u80fd\u5728\u5806\u4e0a\uff09\u80fd\u66f4\u597d\u7684\u5de5\u4f5c\u3002 \u5f53\u4f60\u7684\u4ee3\u7801\u8c03\u7528\u4e00\u4e2a\u51fd\u6570\u65f6\uff0c\u4f20\u9012\u7ed9\u51fd\u6570\u7684\u503c\uff08\u5305\u62ec\u53ef\u80fd\u6307\u5411\u5806\u4e0a\u6570\u636e\u7684\u6307\u9488\uff09\u548c\u51fd\u6570\u7684\u5c40\u90e8\u53d8\u91cf\u88ab\u538b\u5165\u6808\u4e2d\u3002\u5f53\u51fd\u6570\u7ed3\u675f\u65f6\uff0c\u8fd9\u4e9b\u503c\u88ab\u79fb\u51fa\u6808\u3002 \u8ddf\u8e2a\u54ea\u90e8\u5206\u4ee3\u7801\u6b63\u5728\u4f7f\u7528\u5806\u4e0a\u7684\u54ea\u4e9b\u6570\u636e\uff0c\u6700\u5927\u9650\u5ea6\u7684\u51cf\u5c11\u5806\u4e0a\u7684\u91cd\u590d\u6570\u636e\u7684\u6570\u91cf\uff0c\u4ee5\u53ca\u6e05\u7406\u5806\u4e0a\u4e0d\u518d\u4f7f\u7528\u7684\u6570\u636e\u786e\u4fdd\u4e0d\u4f1a\u8017\u5c3d\u7a7a\u95f4\uff0c\u8fd9\u4e9b\u95ee\u9898\u6b63\u662f\u6240\u6709\u6743\u7cfb\u7edf\u8981\u5904\u7406\u7684 \u3002\u4e00\u65e6\u7406\u89e3\u4e86\u6240\u6709\u6743\uff0c\u4f60\u5c31\u4e0d\u9700\u8981\u7ecf\u5e38\u8003\u8651\u6808\u548c\u5806\u4e86\uff0c\u4e0d\u8fc7\u660e\u767d\u4e86\u6240\u6709\u6743\u7684\u4e3b\u8981\u76ee\u7684\u5c31\u662f\u4e3a\u4e86\u7ba1\u7406\u5806\u6570\u636e\uff0c\u80fd\u591f\u5e2e\u52a9\u89e3\u91ca\u4e3a\u4ec0\u4e48\u6240\u6709\u6743\u8981\u4ee5\u8fd9\u79cd\u65b9\u5f0f\u5de5\u4f5c\u3002 \u6240\u6709\u6743\u89c4\u5219 \u9996\u5148\uff0c\u8ba9\u6211\u4eec\u770b\u4e00\u4e0b\u6240\u6709\u6743\u7684\u89c4\u5219. Rust \u4e2d\u7684\u6bcf\u4e00\u4e2a\u503c\u90fd\u6709\u4e00\u4e2a \u6240\u6709\u8005 \uff08owner\uff09\u3002 \u503c\u5728\u4efb\u4e00\u65f6\u523b\u6709\u4e14\u53ea\u6709\u4e00\u4e2a\u6240\u6709\u8005\u3002 \u5f53\u6240\u6709\u8005\uff08\u53d8\u91cf\uff09\u79bb\u5f00\u4f5c\u7528\u57df\uff0c\u8fd9\u4e2a\u503c\u5c06\u88ab\u4e22\u5f03\u3002 \u53d8\u91cf\u4f5c\u7528\u57df \u4f5c\u7528\u57df\u662f\u4e00\u4e2a\u9879\uff08item\uff09\u5728\u7a0b\u5e8f\u4e2d\u6709\u6548\u7684\u8303\u56f4\u3002\u5047\u8bbe\u6709\u8fd9\u6837\u4e00\u4e2a\u53d8\u91cf\uff1a { // s \u5728\u8fd9\u91cc\u65e0\u6548, \u5b83\u5c1a\u672a\u58f0\u660e let s = \"hello\" ; // \u4ece\u6b64\u5904\u8d77\uff0cs \u662f\u6709\u6548\u7684 // \u4f7f\u7528 s println! ( \"s is {s}\" ) } // \u6b64\u4f5c\u7528\u57df\u5df2\u7ed3\u675f\uff0cs \u4e0d\u518d\u6709\u6548 \u4e24\u4e2a\u91cd\u8981\u7684\u65f6\u95f4\u70b9\uff1a \u5f53 s \u8fdb\u5165\u4f5c\u7528\u57df \u65f6\uff0c\u5b83\u5c31\u662f\u6709\u6548\u7684\u3002 \u8fd9\u4e00\u76f4\u6301\u7eed\u5230\u5b83 \u79bb\u5f00\u4f5c\u7528\u57df \u4e3a\u6b62\u3002 String \u7c7b\u578b \u5df2\u7ecf\u89c1\u8fc7\u5b57\u7b26\u4e32\u5b57\u9762\u503c\uff0c\u5373\u88ab\u786c\u7f16\u7801\u8fdb\u7a0b\u5e8f\u91cc\u7684\u5b57\u7b26\u4e32\u503c\u3002\u5b57\u7b26\u4e32\u5b57\u9762\u503c\u662f\u5f88\u65b9\u4fbf\u7684\uff0c\u4e0d\u8fc7\u5b83\u4eec\u5e76\u4e0d\u9002\u5408\u4f7f\u7528\u6587\u672c\u7684\u6bcf\u4e00\u79cd\u573a\u666f\u3002\u539f\u56e0\u4e4b\u4e00\u5c31\u662f \u5b83\u4eec\u662f\u4e0d\u53ef\u53d8\u7684 \u3002\u53e6\u4e00\u4e2a\u539f\u56e0\u662f \u5e76\u975e\u6240\u6709\u5b57\u7b26\u4e32\u7684\u503c\u90fd\u80fd\u5728\u7f16\u5199\u4ee3\u7801\u65f6\u5c31\u77e5\u9053 \uff1a\u4f8b\u5982\uff0c\u8981\u662f\u60f3\u83b7\u53d6\u7528\u6237\u8f93\u5165\u5e76\u5b58\u50a8\u8be5\u600e\u4e48\u529e\u5462\uff1f\u4e3a\u6b64\uff0cRust \u6709\u7b2c\u4e8c\u4e2a\u5b57\u7b26\u4e32\u7c7b\u578b\uff0cString\u3002\u8fd9\u4e2a\u7c7b\u578b\u7ba1\u7406\u88ab\u5206\u914d\u5230\u5806\u4e0a\u7684\u6570\u636e\uff0c\u6240\u4ee5\u80fd\u591f\u5b58\u50a8\u5728\u7f16\u8bd1\u65f6\u672a\u77e5\u5927\u5c0f\u7684\u6587\u672c\u3002\u53ef\u4ee5\u4f7f\u7528 from \u51fd\u6570\u57fa\u4e8e\u5b57\u7b26\u4e32\u5b57\u9762\u503c\u6765\u521b\u5efa String \uff0c\u5982\u4e0b\uff1a let s = String :: from ( \"hello\" ); // \u4e24\u4e2a\u5192\u53f7 :: \u662f\u8fd0\u7b97\u7b26\uff0c\u5141\u8bb8\u5c06\u7279\u5b9a\u7684 from \u51fd\u6570\u7f6e\u4e8e String \u7c7b\u578b\u7684\u547d\u540d\u7a7a\u95f4\uff08namespace\uff09\u4e0b\uff0c\u800c\u4e0d\u9700\u8981\u4f7f\u7528\u7c7b\u4f3c string_from \u8fd9\u6837\u7684\u540d\u5b57\u3002 \u53ef\u4ee5 \u4fee\u6539\u6b64\u7c7b\u5b57\u7b26\u4e32 \uff1a let mut s = String :: from ( \"hello\" ); s . push_str ( \", world!\" ); // push_str() \u5728\u5b57\u7b26\u4e32\u540e\u8ffd\u52a0\u5b57\u9762\u503c println! ( \"{}\" , s ); // \u5c06\u6253\u5370 `hello, world!` // \u90a3\u4e48\u8fd9\u91cc\u6709\u4ec0\u4e48\u533a\u522b\u5462\uff1f // \u4e3a\u4ec0\u4e48 String \u53ef\u53d8\u800c\u5b57\u9762\u503c\u5374\u4e0d\u884c\u5462\uff1f // \u533a\u522b\u5728\u4e8e\u4e24\u4e2a\u7c7b\u578b\u5bf9\u5185\u5b58\u7684\u5904\u7406\u4e0a\u3002 \u5185\u5b58\u4e0e\u5206\u914d \u5c31\u5b57\u7b26\u4e32\u5b57\u9762\u503c\u6765\u8bf4\uff0c\u6211\u4eec\u5728\u7f16\u8bd1\u65f6\u5c31\u77e5\u9053\u5176\u5185\u5bb9\uff0c\u6240\u4ee5\u6587\u672c\u88ab\u76f4\u63a5\u786c\u7f16\u7801\u8fdb\u6700\u7ec8\u7684\u53ef\u6267\u884c\u6587\u4ef6\u4e2d\u3002\u8fd9\u4f7f\u5f97\u5b57\u7b26\u4e32\u5b57\u9762\u503c\u5feb\u901f\u4e14\u9ad8\u6548\u3002 \u4e0d\u8fc7\u8fd9\u4e9b\u7279\u6027\u90fd\u53ea\u5f97\u76ca\u4e8e\u5b57\u7b26\u4e32\u5b57\u9762\u503c\u7684\u4e0d\u53ef\u53d8\u6027\u3002 \u4e0d\u5e78\u7684\u662f\uff0c\u6211\u4eec\u4e0d\u80fd\u4e3a\u4e86\u6bcf\u4e00\u4e2a\u5728\u7f16\u8bd1\u65f6\u5927\u5c0f\u672a\u77e5\u7684\u6587\u672c\u800c\u5c06\u4e00\u5757\u5185\u5b58\u653e\u5165\u4e8c\u8fdb\u5236\u6587\u4ef6\u4e2d\uff0c\u5e76\u4e14\u5b83\u7684\u5927\u5c0f\u8fd8\u53ef\u80fd\u968f\u7740\u7a0b\u5e8f\u8fd0\u884c\u800c\u6539\u53d8\u3002 \u5bf9\u4e8e String \u7c7b\u578b\uff0c\u4e3a\u4e86\u652f\u6301\u4e00\u4e2a\u53ef\u53d8\uff0c\u53ef\u589e\u957f\u7684\u6587\u672c\u7247\u6bb5\uff0c \u9700\u8981\u5728\u5806\u4e0a\u5206\u914d\u4e00\u5757\u5728\u7f16\u8bd1\u65f6\u672a\u77e5\u5927\u5c0f\u7684\u5185\u5b58\u6765\u5b58\u653e\u5185\u5bb9 \u3002\u8fd9\u610f\u5473\u7740\uff1a \u5fc5\u987b\u5728\u8fd0\u884c\u65f6\u5411\u5185\u5b58\u5206\u914d\u5668\uff08memory allocator\uff09\u8bf7\u6c42\u5185\u5b58\u3002 \u9700\u8981\u4e00\u4e2a\u5f53\u6211\u4eec\u5904\u7406\u5b8c String \u65f6\u5c06\u5185\u5b58\u8fd4\u56de\u7ed9\u5206\u914d\u5668\u7684\u65b9\u6cd5\u3002 \u7b2c\u4e00\u90e8\u5206\u7531\u6211\u4eec\u5b8c\u6210\uff1a\u5f53\u8c03\u7528 String::from \u65f6\uff0c\u5b83\u7684\u5b9e\u73b0 (implementation) \u8bf7\u6c42\u5176\u6240\u9700\u7684\u5185\u5b58\u3002\u8fd9\u5728\u7f16\u7a0b\u8bed\u8a00\u4e2d\u662f\u975e\u5e38\u901a\u7528\u7684\u3002 \u7136\u800c\uff0c\u7b2c\u4e8c\u90e8\u5206\u5b9e\u73b0\u8d77\u6765\u5c31\u5404\u6709\u533a\u522b\u4e86\u3002\u5728\u6709 \u5783\u573e\u56de\u6536 \uff08garbage collector\uff0c GC \uff09\u7684\u8bed\u8a00\u4e2d\uff0c GC \u8bb0\u5f55\u5e76\u6e05\u9664\u4e0d\u518d\u4f7f\u7528\u7684\u5185\u5b58\uff0c\u800c\u6211\u4eec\u5e76\u4e0d\u9700\u8981\u5173\u5fc3\u5b83\u3002\u5728\u5927\u90e8\u5206\u6ca1\u6709 GC \u7684\u8bed\u8a00\u4e2d\uff0c\u8bc6\u522b\u51fa\u4e0d\u518d\u4f7f\u7528\u7684\u5185\u5b58\u5e76\u8c03\u7528\u4ee3\u7801\u663e\u5f0f\u91ca\u653e\u5c31\u662f\u6211\u4eec\u7684\u8d23\u4efb\u4e86\uff0c\u8ddf\u8bf7\u6c42\u5185\u5b58\u7684\u65f6\u5019\u4e00\u6837\u3002\u4ece\u5386\u53f2\u7684\u89d2\u5ea6\u4e0a\u8bf4\u6b63\u786e\u5904\u7406\u5185\u5b58\u56de\u6536\u66fe\u7ecf\u662f\u4e00\u4e2a\u56f0\u96be\u7684\u7f16\u7a0b\u95ee\u9898\u3002\u5982\u679c\u5fd8\u8bb0\u56de\u6536\u4e86\u4f1a\u6d6a\u8d39\u5185\u5b58\u3002\u5982\u679c\u8fc7\u65e9\u56de\u6536\u4e86\uff0c\u5c06\u4f1a\u51fa\u73b0\u65e0\u6548\u53d8\u91cf\u3002\u5982\u679c\u91cd\u590d\u56de\u6536\uff0c\u8fd9\u4e5f\u662f\u4e2a bug\u3002\u6211\u4eec\u9700\u8981 \u7cbe\u786e\u7684\u4e3a\u4e00\u4e2a allocate \u914d\u5bf9\u4e00\u4e2a free \u3002 Rust \u91c7\u53d6\u4e86\u4e00\u4e2a\u4e0d\u540c\u7684\u7b56\u7565\uff1a \u5185\u5b58\u5728\u62e5\u6709\u5b83\u7684\u53d8\u91cf\u79bb\u5f00\u4f5c\u7528\u57df\u540e\u5c31\u88ab\u81ea\u52a8\u91ca\u653e \u3002\u4e0b\u9762\u662f\u4f5c\u7528\u57df\u4f8b\u5b50\u7684\u4e00\u4e2a\u4f7f\u7528 String \u800c\u4e0d\u662f\u5b57\u7b26\u4e32\u5b57\u9762\u503c\u7684\u7248\u672c\uff1a { let s = String :: from ( \"hello\" ); // \u4ece\u6b64\u5904\u8d77\uff0cs \u662f\u6709\u6548\u7684 // \u4f7f\u7528 s println! ( \"s is {s}\" ) } // \u6b64\u4f5c\u7528\u57df\u5df2\u7ed3\u675f\uff0c // s \u4e0d\u518d\u6709\u6548 \u5f53\u53d8\u91cf\u79bb\u5f00\u4f5c\u7528\u57df\uff0cRust \u4e3a\u6211\u4eec\u8c03\u7528\u4e00\u4e2a\u7279\u6b8a\u7684\u51fd\u6570\u3002\u8fd9\u4e2a\u51fd\u6570\u53eb\u505a drop \uff0cRust \u5728\u7ed3\u5c3e\u7684 } \u5904\u81ea\u52a8\u8c03\u7528 drop \u3002 \u6570\u636e\u4ea4\u4e92\uff1a\u79fb\u52a8 \u591a\u4e2a\u53d8\u91cf\u53ef\u4ee5\u91c7\u53d6\u4e0d\u540c\u7684\u65b9\u5f0f\u4e0e\u540c\u4e00\u6570\u636e\u8fdb\u884c\u4ea4\u4e92\u3002 fn main () { let x = 5 ; let y = x ; // \u5c06\u53d8\u91cf x \u7684\u6574\u6570\u503c\u8d4b\u7ed9 y } \u201c\u5c06 5 \u7ed1\u5b9a\u5230 x\uff1b\u63a5\u7740\u751f\u6210\u4e00\u4e2a\u503c x \u7684\u62f7\u8d1d\u5e76\u7ed1\u5b9a\u5230 y\u201d\u3002 \u73b0\u5728\u6709\u4e86\u4e24\u4e2a\u53d8\u91cf\uff0cx \u548c y\uff0c\u90fd\u7b49\u4e8e 5\u3002\u8fd9\u4e5f\u6b63\u662f\u4e8b\u5b9e\u4e0a\u53d1\u751f\u4e86\u7684\uff0c\u56e0\u4e3a\u6574\u6570\u662f\u6709 \u5df2\u77e5\u56fa\u5b9a\u5927\u5c0f \u7684\u7b80\u5355\u503c\uff0c\u6240\u4ee5\u8fd9 \u4e24\u4e2a 5 \u88ab\u653e\u5165\u4e86\u6808\u4e2d \u3002 String \u7248\u672c\uff1a let s1 = String :: from ( \"hello\" ); let s2 = s1 ; // \u5f53\u6211\u4eec\u5c06 s1 \u8d4b\u503c\u7ed9 s2\uff0cString \u7684\u6570\u636e\u88ab\u590d\u5236\u4e86\uff0c\u8fd9\u610f\u5473\u7740\u6211\u4eec\u4ece\u6808\u4e0a\u62f7\u8d1d\u4e86\u5b83\u7684\u6307\u9488\u3001\u957f\u5ea6\u548c\u5bb9\u91cf\u3002 // Rust\u5e76\u6ca1\u6709\u590d\u5236\u6307\u9488\u6307\u5411\u7684\u5806\u4e0a\u6570\u636e\u3002 // \u5982\u679c Rust \u4e5f\u62f7\u8d1d\u4e86\u5806\u4e0a\u7684\u6570\u636e\uff0c\u90a3\u4e48\u64cd\u4f5c s2 = s1 \u5728\u5806\u4e0a\u6570\u636e\u6bd4\u8f83\u5927\u7684\u65f6\u5019\u4f1a\u5bf9\u8fd0\u884c\u65f6\u6027\u80fd\u9020\u6210\u975e\u5e38\u5927\u7684\u5f71\u54cd\u3002 \u8fc7\u5f53\u53d8\u91cf\u79bb\u5f00\u4f5c\u7528\u57df\u540e\uff0cRust \u81ea\u52a8\u8c03\u7528 drop \u51fd\u6570\u5e76\u6e05\u7406\u53d8\u91cf\u7684\u5806\u5185\u5b58\u3002\u4e0d\u8fc7\u4e24\u4e2a\u6570\u636e\u6307\u9488\u6307\u5411\u4e86\u540c\u4e00\u4f4d\u7f6e\u3002 \u8fd9\u5c31\u6709\u4e86\u4e00\u4e2a\u95ee\u9898\uff1a\u5f53 s2 \u548c s1 \u79bb\u5f00\u4f5c\u7528\u57df\uff0c\u4ed6\u4eec\u90fd\u4f1a\u5c1d\u8bd5\u91ca\u653e\u76f8\u540c\u7684\u5185\u5b58\u3002 \u8fd9\u662f\u4e00\u4e2a\u53eb\u505a \u4e8c\u6b21\u91ca\u653e \uff08double free\uff09\u7684\u9519\u8bef\uff0c\u4e5f\u662f\u4e4b\u524d\u63d0\u5230\u8fc7\u7684\u5185\u5b58\u5b89\u5168\u6027 bug \u4e4b\u4e00\u3002 \u4e24\u6b21\u91ca\u653e \uff08\u76f8\u540c\uff09\u5185\u5b58\u4f1a\u5bfc\u81f4\u5185\u5b58\u6c61\u67d3\uff0c\u5b83\u53ef\u80fd\u4f1a\u5bfc\u81f4\u6f5c\u5728\u7684\u5b89\u5168\u6f0f\u6d1e\u3002 \u4e3a\u4e86\u786e\u4fdd\u5185\u5b58\u5b89\u5168\uff0c\u5728 let s2 = s1 \u4e4b\u540e\uff0cRust \u8ba4\u4e3a s1 \u4e0d\u518d\u6709\u6548\uff0c\u56e0\u6b64 Rust \u4e0d\u9700\u8981\u5728 s1 \u79bb\u5f00\u4f5c\u7528\u57df\u540e\u6e05\u7406\u4efb\u4f55\u4e1c\u897f\u3002 \u5728 s2 \u88ab\u521b\u5efa\u4e4b\u540e\u5c1d\u8bd5\u4f7f\u7528 s1 \u4f1a\u53d1\u751f\u4ec0\u4e48\uff1b\u8fd9\u6bb5\u4ee3\u7801\u4e0d\u80fd\u8fd0\u884c\uff1a let s1 = String :: from ( \"hello\" ); let s2 = s1 ; println! ( \"{}, world!\" , s1 ); // \u4f1a\u5f97\u5230\u4e00\u4e2a\u9519\u8bef: value borrowed here after move // \u56e0\u4e3a Rust \u7981\u6b62\u4f7f\u7528\u65e0\u6548\u7684\u5f15\u7528\u3002 \u5982\u679c\u5728\u5176\u4ed6\u8bed\u8a00\u4e2d\u542c\u8bf4\u8fc7\u672f\u8bed \u6d45\u62f7\u8d1d \uff08shallow copy\uff09\u548c \u6df1\u62f7\u8d1d \uff08deep copy\uff09\uff0c\u90a3\u4e48\u62f7\u8d1d\u6307\u9488\u3001\u957f\u5ea6\u548c\u5bb9\u91cf\u800c\u4e0d\u62f7\u8d1d\u6570\u636e\u53ef\u80fd\u542c\u8d77\u6765\u50cf\u6d45\u62f7\u8d1d\u3002\u4e0d\u8fc7\u56e0\u4e3a Rust \u540c\u65f6\u4f7f\u7b2c\u4e00\u4e2a\u53d8\u91cf\u65e0\u6548\u4e86\uff0c\u8fd9\u4e2a\u64cd\u4f5c\u88ab\u79f0\u4e3a \u79fb\u52a8 \uff08move\uff09\uff0c\u800c\u4e0d\u662f\u6d45\u62f7\u8d1d\u3002\u4e0a\u9762\u7684\u4f8b\u5b50\u53ef\u4ee5\u89e3\u8bfb\u4e3a s1 \u88ab \u79fb\u52a8 \u5230\u4e86 s2 \u4e2d\u3002 \u8fd9\u6837\u5c31\u89e3\u51b3\u4e86\u4e8c\u6b21\u91ca\u653e\u7684\u95ee\u9898\uff01\u56e0\u4e3a\u53ea\u6709 s2 \u662f\u6709\u6548\u7684\uff0c\u5f53\u5176\u79bb\u5f00\u4f5c\u7528\u57df\uff0c\u5b83\u5c31\u91ca\u653e\u4e86\u81ea\u5df1\u7684\u5185\u5b58\u3002 \u8fd9\u91cc\u8fd8\u9690\u542b\u4e86\u4e00\u4e2a\u8bbe\u8ba1\u9009\u62e9\uff1a Rust \u6c38\u8fdc\u4e5f\u4e0d\u4f1a\u81ea\u52a8\u521b\u5efa\u6570\u636e\u7684 \u201c\u6df1\u62f7\u8d1d\u201d \u3002\u56e0\u6b64\uff0c\u4efb\u4f55 \u81ea\u52a8 \u7684\u590d\u5236\u53ef\u4ee5\u88ab\u8ba4\u4e3a\u5bf9\u8fd0\u884c\u65f6\u6027\u80fd\u5f71\u54cd\u8f83\u5c0f\u3002 \u6570\u636e\u4ea4\u4e92\uff1a\u514b\u9686 \u5982\u679c \u786e\u5b9e \u9700\u8981\u6df1\u5ea6\u590d\u5236 String \u4e2d\u5806\u4e0a\u7684\u6570\u636e\uff0c\u800c\u4e0d\u4ec5\u4ec5\u662f\u6808\u4e0a\u7684\u6570\u636e\uff0c\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a\u53eb\u505a clone \u7684\u901a\u7528\u51fd\u6570\u3002 let s1 = String :: from ( \"hello\" ); let s2 = s1 . clone (); println! ( \"s1 = {}, s2 = {}\" , s1 , s2 ); \u8fd9\u6bb5\u4ee3\u7801\u80fd\u6b63\u5e38\u8fd0\u884c\uff0c\u8fd9\u91cc\u5806\u4e0a\u7684\u6570\u636e \u786e\u5b9e \u88ab\u590d\u5236\u4e86\u3002 \u5f53\u51fa\u73b0 clone \u8c03\u7528\u65f6\uff0c\u4f60\u77e5\u9053\u4e00\u4e9b\u7279\u5b9a\u7684\u4ee3\u7801\u88ab\u6267\u884c\u800c\u4e14\u8fd9\u4e9b\u4ee3\u7801\u53ef\u80fd\u76f8\u5f53\u6d88\u8017\u8d44\u6e90\u3002 \u62f7\u8d1d \u8fd9\u91cc\u8fd8\u6709\u4e00\u4e2a\u6ca1\u6709\u63d0\u5230\u7684\u5c0f\u7a8d\u95e8\u3002\u8fd9\u4e9b\u4ee3\u7801\u4f7f\u7528\u4e86\u6574\u578b\u5e76\u4e14\u662f\u6709\u6548\u7684! let x = 5 ; let y = x ; println! ( \"x = {}, y = {}\" , x , y ); \u4f46\u8fd9\u6bb5\u4ee3\u7801\u4f3c\u4e4e\u4e0e\u521a\u521a\u5b66\u5230\u7684\u5185\u5bb9\u76f8\u77db\u76fe\uff1a\u6ca1\u6709\u8c03\u7528 clone\uff0c\u4e0d\u8fc7 x \u4f9d\u7136\u6709\u6548\u4e14\u6ca1\u6709\u88ab\u79fb\u52a8\u5230 y \u4e2d\u3002 \u539f\u56e0\u662f\u50cf\u6574\u578b\u8fd9\u6837\u7684\u5728\u7f16\u8bd1\u65f6\u5df2\u77e5\u5927\u5c0f\u7684\u7c7b\u578b\u88ab\u6574\u4e2a\u5b58\u50a8\u5728\u6808\u4e0a\uff0c\u6240\u4ee5\u62f7\u8d1d\u5176\u5b9e\u9645\u7684\u503c\u662f\u5feb\u901f\u7684\u3002\u8fd9\u610f\u5473\u7740\u6ca1\u6709\u7406\u7531\u5728\u521b\u5efa\u53d8\u91cf y \u540e\u4f7f x \u65e0\u6548\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c \u8fd9\u91cc\u6ca1\u6709\u6df1\u6d45\u62f7\u8d1d\u7684\u533a\u522b \uff0c\u6240\u4ee5\u8fd9\u91cc\u8c03\u7528 clone \u5e76\u4e0d\u4f1a\u4e0e\u901a\u5e38\u7684\u6d45\u62f7\u8d1d\u6709\u4ec0\u4e48\u4e0d\u540c\uff0c\u6211\u4eec\u53ef\u4ee5\u4e0d\u7528\u7ba1\u5b83\u3002 Rust \u6709\u4e00\u4e2a\u53eb\u505a Copy trait \u7684\u7279\u6b8a\u6ce8\u89e3\uff0c\u53ef\u4ee5\u7528\u5728\u7c7b\u4f3c\u6574\u578b\u8fd9\u6837\u7684\u5b58\u50a8\u5728\u6808\u4e0a\u7684\u7c7b\u578b\u4e0a\uff08 \u7b2c\u5341\u7ae0 \u5c06\u4f1a\u8be6\u7ec6\u8bb2\u89e3 trait\uff09\u3002\u5982\u679c\u4e00\u4e2a\u7c7b\u578b\u5b9e\u73b0\u4e86 Copy trait \uff0c\u90a3\u4e48\u4e00\u4e2a\u65e7\u7684\u53d8\u91cf\u5728\u5c06\u5176\u8d4b\u503c\u7ed9\u5176\u4ed6\u53d8\u91cf\u540e\u4ecd\u7136\u53ef\u7528\u3002 Rust \u4e0d\u5141\u8bb8\u81ea\u8eab\u6216\u5176\u4efb\u4f55\u90e8\u5206\u5b9e\u73b0\u4e86 Drop trait \u7684\u7c7b\u578b\u4f7f\u7528 Copy trait \u3002\u5982\u679c\u6211\u4eec\u5bf9\u5176\u503c\u79bb\u5f00\u4f5c\u7528\u57df\u65f6\u9700\u8981\u7279\u6b8a\u5904\u7406\u7684\u7c7b\u578b\u4f7f\u7528 Copy \u6ce8\u89e3\uff0c\u5c06\u4f1a\u51fa\u73b0\u4e00\u4e2a\u7f16\u8bd1\u65f6\u9519\u8bef\u3002\u8981\u5b66\u4e60\u5982\u4f55\u4e3a\u4f60\u7684\u7c7b\u578b\u6dfb\u52a0 Copy \u6ce8\u89e3\u4ee5\u5b9e\u73b0\u8be5 trait\uff0c\u8bf7\u9605\u8bfb \u9644\u5f55 C \u4e2d\u7684 \u201c\u53ef\u6d3e\u751f\u7684 trait\u201d \u3002 \u90a3\u4e48\u54ea\u4e9b\u7c7b\u578b\u5b9e\u73b0\u4e86 Copy trait \u5462\uff1f\u53ef\u4ee5\u67e5\u770b\u7ed9\u5b9a\u7c7b\u578b\u7684\u6587\u6863\u6765\u786e\u8ba4\uff0c\u4e0d\u8fc7\u4f5c\u4e3a\u4e00\u4e2a\u901a\u7528\u7684\u89c4\u5219\uff0c\u4efb\u4f55\u4e00\u7ec4\u7b80\u5355\u6807\u91cf\u503c\u7684\u7ec4\u5408\u90fd\u53ef\u4ee5\u5b9e\u73b0 Copy\uff0c\u4efb\u4f55\u4e0d\u9700\u8981\u5206\u914d\u5185\u5b58\u6216\u67d0\u79cd\u5f62\u5f0f\u8d44\u6e90\u7684\u7c7b\u578b\u90fd\u53ef\u4ee5\u5b9e\u73b0 Copy \u3002\u5982\u4e0b\u662f\u4e00\u4e9b Copy \u7684\u7c7b\u578b\uff1a \u6240\u6709\u6574\u6570\u7c7b\u578b\uff0c\u6bd4\u5982 u32\u3002 \u5e03\u5c14\u7c7b\u578b\uff0cbool\uff0c\u5b83\u7684\u503c\u662f true \u548c false\u3002 \u6240\u6709\u6d6e\u70b9\u6570\u7c7b\u578b\uff0c\u6bd4\u5982 f64\u3002 \u5b57\u7b26\u7c7b\u578b\uff0cchar\u3002 \u5143\u7ec4\uff0c\u5f53\u4e14\u4ec5\u5f53\u5176\u5305\u542b\u7684\u7c7b\u578b\u4e5f\u90fd\u5b9e\u73b0 Copy \u7684\u65f6\u5019\u3002\u6bd4\u5982\uff0c(i32, i32) \u5b9e\u73b0\u4e86 Copy\uff0c\u4f46 (i32, String) \u5c31\u6ca1\u6709\u3002 \u6240\u6709\u6743\u4e0e\u51fd\u6570 \u5c06\u503c\u4f20\u9012\u7ed9\u51fd\u6570\u4e0e\u7ed9\u53d8\u91cf\u8d4b\u503c\u7684\u539f\u7406\u76f8\u4f3c\u3002\u5411\u51fd\u6570\u4f20\u9012\u503c\u53ef\u80fd\u4f1a\u79fb\u52a8\u6216\u8005\u590d\u5236\uff0c\u5c31\u50cf\u8d4b\u503c\u8bed\u53e5\u4e00\u6837\u3002 fn main () { let s = String :: from ( \"hello\" ); // s \u8fdb\u5165\u4f5c\u7528\u57df takes_ownership ( s ); // s \u7684\u503c\u79fb\u52a8\u5230\u51fd\u6570\u91cc ... // ... \u6240\u4ee5\u5230\u8fd9\u91cc\u4e0d\u518d\u6709\u6548 let x = 5 ; // x \u8fdb\u5165\u4f5c\u7528\u57df makes_copy ( x ); // x \u5e94\u8be5\u79fb\u52a8\u51fd\u6570\u91cc\uff0c // \u4f46 i32 \u662f Copy \u7684\uff0c // \u6240\u4ee5\u5728\u540e\u9762\u53ef\u7ee7\u7eed\u4f7f\u7528 x } // \u8fd9\u91cc, x \u5148\u79fb\u51fa\u4e86\u4f5c\u7528\u57df\uff0c\u7136\u540e\u662f s\u3002\u4f46\u56e0\u4e3a s \u7684\u503c\u5df2\u88ab\u79fb\u8d70\uff0c // \u6ca1\u6709\u7279\u6b8a\u4e4b\u5904 fn takes_ownership ( some_string : String ) { // some_string \u8fdb\u5165\u4f5c\u7528\u57df println! ( \"{}\" , some_string ); } // \u8fd9\u91cc\uff0csome_string \u79fb\u51fa\u4f5c\u7528\u57df\u5e76\u8c03\u7528 `drop` \u65b9\u6cd5\u3002 // \u5360\u7528\u7684\u5185\u5b58\u88ab\u91ca\u653e fn makes_copy ( some_integer : i32 ) { // some_integer \u8fdb\u5165\u4f5c\u7528\u57df println! ( \"{}\" , some_integer ); } // \u8fd9\u91cc\uff0csome_integer \u79fb\u51fa\u4f5c\u7528\u57df\u3002\u6ca1\u6709\u7279\u6b8a\u4e4b\u5904 \u5f53\u5c1d\u8bd5\u5728\u8c03\u7528 takes_ownership \u540e\u4f7f\u7528 s \u65f6\uff0cRust \u4f1a\u629b\u51fa\u4e00\u4e2a\u7f16\u8bd1\u65f6\u9519\u8bef\u3002\u8fd9\u4e9b\u9759\u6001\u68c0\u67e5\u4f7f\u6211\u4eec\u514d\u4e8e\u72af\u9519\u3002 \u8bd5\u8bd5\u5728 main \u51fd\u6570\u4e2d\u6dfb\u52a0\u4f7f\u7528 s \u548c x \u7684\u4ee3\u7801\u6765\u770b\u770b\u54ea\u91cc\u80fd\u4f7f\u7528\u4ed6\u4eec\uff0c\u4ee5\u53ca\u6240\u6709\u6743\u89c4\u5219\u4f1a\u5728\u54ea\u91cc\u963b\u6b62\u6211\u4eec\u8fd9\u4e48\u505a\u3002 \u8fd4\u56de\u503c\u4e0e\u4f5c\u7528\u57df \u8fd4\u56de\u503c\u4e5f\u53ef\u4ee5\u8f6c\u79fb\u6240\u6709\u6743\u3002 ffn main () { let s1 = gives_ownership (); // gives_ownership \u5c06\u8fd4\u56de\u503c // \u8f6c\u79fb\u7ed9 s1 let s2 = String :: from ( \"hello\" ); // s2 \u8fdb\u5165\u4f5c\u7528\u57df let s3 = takes_and_gives_back ( s2 ); // s2 \u88ab\u79fb\u52a8\u5230 // takes_and_gives_back \u4e2d, // \u5b83\u4e5f\u5c06\u8fd4\u56de\u503c\u79fb\u7ed9 s3 } // \u8fd9\u91cc, s3 \u79fb\u51fa\u4f5c\u7528\u57df\u5e76\u88ab\u4e22\u5f03\u3002s2 \u4e5f\u79fb\u51fa\u4f5c\u7528\u57df\uff0c\u4f46\u5df2\u88ab\u79fb\u8d70\uff0c // \u6240\u4ee5\u4ec0\u4e48\u4e5f\u4e0d\u4f1a\u53d1\u751f\u3002s1 \u79bb\u5f00\u4f5c\u7528\u57df\u5e76\u88ab\u4e22\u5f03 fn gives_ownership () -> String { // gives_ownership \u4f1a\u5c06 // \u8fd4\u56de\u503c\u79fb\u52a8\u7ed9 // \u8c03\u7528\u5b83\u7684\u51fd\u6570 let some_string = String :: from ( \"yours\" ); // some_string \u8fdb\u5165\u4f5c\u7528\u57df. some_string // \u8fd4\u56de some_string // \u5e76\u79fb\u51fa\u7ed9\u8c03\u7528\u7684\u51fd\u6570 // } // takes_and_gives_back \u5c06\u4f20\u5165\u5b57\u7b26\u4e32\u5e76\u8fd4\u56de\u8be5\u503c fn takes_and_gives_back ( a_string : String ) -> String { // a_string \u8fdb\u5165\u4f5c\u7528\u57df // a_string // \u8fd4\u56de a_string \u5e76\u79fb\u51fa\u7ed9\u8c03\u7528\u7684\u51fd\u6570 } \u53d8\u91cf\u7684\u6240\u6709\u6743\u603b\u662f\u9075\u5faa\u76f8\u540c\u7684\u6a21\u5f0f\uff1a \u5c06\u503c\u8d4b\u7ed9\u53e6\u4e00\u4e2a\u53d8\u91cf\u65f6\u79fb\u52a8\u5b83\u3002\u5f53\u6301\u6709\u5806\u4e2d\u6570\u636e\u503c\u7684\u53d8\u91cf\u79bb\u5f00\u4f5c\u7528\u57df\u65f6\uff0c\u5176\u503c\u5c06\u901a\u8fc7 drop \u88ab\u6e05\u7406\u6389\uff0c\u9664\u975e\u6570\u636e\u88ab\u79fb\u52a8\u4e3a\u53e6\u4e00\u4e2a\u53d8\u91cf\u6240\u6709\u3002 \u867d\u7136\u8fd9\u6837\u662f\u53ef\u4ee5\u7684\uff0c\u4f46\u662f\u5728\u6bcf\u4e00\u4e2a\u51fd\u6570\u4e2d\u90fd\u83b7\u53d6\u6240\u6709\u6743\u5e76\u63a5\u7740\u8fd4\u56de\u6240\u6709\u6743\u6709\u4e9b\u5570\u55e6\u3002\u5982\u679c\u6211\u4eec\u60f3\u8981\u51fd\u6570\u4f7f\u7528\u4e00\u4e2a\u503c\u4f46\u4e0d\u83b7\u53d6\u6240\u6709\u6743\u8be5\u600e\u4e48\u529e\u5462\uff1f\u5982\u679c\u6211\u4eec\u8fd8\u8981\u63a5\u7740\u4f7f\u7528\u5b83\u7684\u8bdd\uff0c\u6bcf\u6b21\u90fd\u4f20\u8fdb\u53bb\u518d\u8fd4\u56de\u6765\u5c31\u6709\u70b9\u70e6\u4eba\u4e86\uff0c\u9664\u6b64\u4e4b\u5916\uff0c\u6211\u4eec\u4e5f\u53ef\u80fd\u60f3\u8fd4\u56de\u51fd\u6570\u4f53\u4e2d\u4ea7\u751f\u7684\u4e00\u4e9b\u6570\u636e\u3002 \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u5143\u7ec4\u6765\u8fd4\u56de\u591a\u4e2a\u503c\uff0c\u793a\u4f8b\uff1a fn main () { let s1 = String :: from ( \"hello\" ); let ( s2 , len ) = calculate_length ( s1 ); println! ( \"The length of '{}' is {}.\" , s2 , len ); } fn calculate_length ( s : String ) -> ( String , usize ) { let length = s . len (); // len() \u8fd4\u56de\u5b57\u7b26\u4e32\u7684\u957f\u5ea6 ( s , length ) } \u4f46\u662f\u8fd9\u672a\u514d\u6709\u4e9b\u5f62\u5f0f\u4e3b\u4e49\uff0c\u800c\u4e14\u8fd9\u79cd\u573a\u666f\u5e94\u8be5\u5f88\u5e38\u89c1\u3002\u5e78\u8fd0\u7684\u662f\uff0cRust \u5bf9\u6b64\u63d0\u4f9b\u4e86\u4e00\u4e2a\u4e0d\u7528\u83b7\u53d6\u6240\u6709\u6743\u5c31\u53ef\u4ee5\u4f7f\u7528\u503c\u7684\u529f\u80fd\uff0c\u53eb\u505a \u5f15\u7528 \uff08references\uff09\u3002 \u5f15\u7528\u4e0e\u501f\u7528 \u4ee5\u63d0\u4f9b\u4e00\u4e2a String \u503c\u7684\u5f15\u7528\uff08reference\uff09\u3002 \u5f15\u7528 \uff08reference\uff09\u50cf\u4e00\u4e2a\u6307\u9488\uff0c\u56e0\u4e3a\u5b83\u662f\u4e00\u4e2a\u5730\u5740\uff0c\u6211\u4eec\u53ef\u4ee5\u7531\u6b64\u8bbf\u95ee\u50a8\u5b58\u4e8e\u8be5\u5730\u5740\u7684\u5c5e\u4e8e\u5176\u4ed6\u53d8\u91cf\u7684\u6570\u636e\u3002 \u4e0e\u6307\u9488\u4e0d\u540c\uff0c \u5f15\u7528\u786e\u4fdd\u6307\u5411\u67d0\u4e2a\u7279\u5b9a\u7c7b\u578b\u7684\u6709\u6548\u503c \u3002 fn main () { let s1 = String :: from ( \"hello\" ); // \u4f20\u9012 &s1 \u7ed9 calculate_length // \u8fd9\u4e9b & \u7b26\u53f7\u5c31\u662f \u5f15\u7528\uff0c\u5b83\u4eec\u5141\u8bb8\u4f60\u4f7f\u7528\u503c\u4f46\u4e0d\u83b7\u53d6\u5176\u6240\u6709\u6743\u3002 // &s1 \u8bed\u6cd5\u8ba9\u6211\u4eec\u521b\u5efa\u4e00\u4e2a \u6307\u5411 \u503c s1 \u7684\u5f15\u7528\uff0c\u4f46\u662f\u5e76\u4e0d\u62e5\u6709\u5b83\u3002 // \u56e0\u4e3a\u5e76\u4e0d\u62e5\u6709\u8fd9\u4e2a\u503c\uff0c\u6240\u4ee5\u5f53\u5f15\u7528\u505c\u6b62\u4f7f\u7528\u65f6\uff0c\u5b83\u6240\u6307\u5411\u7684\u503c\u4e5f\u4e0d\u4f1a\u88ab\u4e22\u5f03\u3002 let len = calculate_length ( & s1 ); println! ( \"The length of '{}' is {}.\" , s1 , len ); } // \u51fd\u6570\u7b7e\u540d\u4f7f\u7528 & \u6765\u8868\u660e\u53c2\u6570 s \u7684\u7c7b\u578b\u662f\u4e00\u4e2a\u5f15\u7528\u3002 fn calculate_length ( s : & String ) -> usize { // s\u662fString\u7684\u5f15\u7528 s . len () } // \u8fd9\u91cc\uff0cs \u79bb\u5f00\u4e86\u4f5c\u7528\u57df\u3002\u4f46\u56e0\u4e3a\u5b83\u5e76\u4e0d\u62e5\u6709\u5f15\u7528\u503c\u7684\u6240\u6709\u6743\uff0c // \u6240\u4ee5\u4ec0\u4e48\u4e5f\u4e0d\u4f1a\u53d1\u751f (Rust \u4e0d\u4f1a\u8c03\u7528drop) \u5f53\u51fd\u6570\u4f7f\u7528\u5f15\u7528\u800c\u4e0d\u662f\u5b9e\u9645\u503c\u4f5c\u4e3a\u53c2\u6570\uff0c\u65e0\u9700\u8fd4\u56de\u503c\u6765\u4ea4\u8fd8\u6240\u6709\u6743\uff0c\u56e0\u4e3a\u5c31\u4e0d\u66fe\u62e5\u6709\u6240\u6709\u6743\u3002 \u5c06\u521b\u5efa\u4e00\u4e2a\u5f15\u7528\u7684\u884c\u4e3a\u79f0\u4e3a \u501f\u7528 \uff08borrowing\uff09\u3002\u6b63\u5982\u73b0\u5b9e\u751f\u6d3b\u4e2d\uff0c\u5982\u679c\u4e00\u4e2a\u4eba\u62e5\u6709\u67d0\u6837\u4e1c\u897f\uff0c\u4f60\u53ef\u4ee5\u4ece\u4ed6\u90a3\u91cc\u501f\u6765\u3002\u5f53\u4f60\u4f7f\u7528\u5b8c\u6bd5\uff0c\u5fc5\u987b\u8fd8\u56de\u53bb\u3002 \u6b63\u5982\u53d8\u91cf\u9ed8\u8ba4\u662f\u4e0d\u53ef\u53d8\u7684\uff0c\u5f15\u7528\u4e5f\u4e00\u6837\u3002\uff08\u9ed8\u8ba4\uff09\u4e0d\u5141\u8bb8\u4fee\u6539 \u5f15\u7528 \u7684\u503c\u3002 \u53ef\u53d8\u5f15\u7528 \u5141\u8bb8\u6211\u4eec\u4fee\u6539\u4e00\u4e2a\u501f\u7528\u7684\u503c\uff0c\u8fd9\u5c31\u662f \u53ef\u53d8\u5f15\u7528 \uff08mutable reference\uff09 fn main () { let mut s = String :: from ( \"hello\" ); // \u5fc5\u987b\u5c06 s \u6539\u4e3a mut\uff0c \u58f0\u660e\u53ef\u53d8 change ( & mut s ); // \u4f20\u5165\u53ef\u53d8\u5f15\u7528 } // \u58f0\u660e\u53ef\u53d8\u5f15\u7528 fn change ( some_string : & mut String ) { some_string . push_str ( \", world\" ); // \u56e0\u4e3a\u53ef\u53d8\uff0c\u6240\u4ee5\u53ef\u4ee5\u66f4\u6539\u3002 } \u53ef\u53d8\u5f15\u7528\u6709\u4e00\u4e2a\u5f88\u5927\u7684\u9650\u5236\uff1a \u5982\u679c\u4f60\u6709\u4e00\u4e2a\u5bf9\u8be5\u53d8\u91cf\u7684\u53ef\u53d8\u5f15\u7528\uff0c\u4f60\u5c31\u4e0d\u80fd\u518d\u521b\u5efa\u5bf9\u8be5\u53d8\u91cf\u7684\u5f15\u7528 \u3002\u8fd9\u4e9b\u5c1d\u8bd5\u521b\u5efa\u4e24\u4e2a s \u7684\u53ef\u53d8\u5f15\u7528\u7684\u4ee3\u7801\u4f1a\u5931\u8d25\uff1a let mut s = String :: from ( \"hello\" ); let r1 = & mut s ; // \u6709\u4e00\u4e2a\u4e86 let r2 = & mut s ; // \u7b2c\u4e8c\u4e2a\u5c06\u4f1a\u62a5\u9519\u3002 println! ( \"{}, {}\" , r1 , r2 ); \u62a5\u9519\u5982\u4e0b: $ cargo run Compiling ownership v0 . 1.0 ( file : ///projects/ownership) error [ E0499 ] : cannot borrow ` s ` as mutable more than once at a time - -> src / main . rs : 5 : 14 | 4 | let r1 = & mut s ; | ------ first mutable borrow occurs here 5 | let r2 = & mut s ; | ^^^^^^ second mutable borrow occurs here 6 | 7 | println! ( \"{}, {}\" , r1 , r2 ); | -- first borrow later used here For more information about this error , try ` rustc -- explain E0499 ` . error : could not compile ` ownership ` due to previous error \u8fd9\u4e00\u9650\u5236\u4ee5\u4e00\u79cd\u975e\u5e38\u5c0f\u5fc3\u8c28\u614e\u7684\u65b9\u5f0f\u5141\u8bb8\u53ef\u53d8\u6027\uff0c \u9632\u6b62\u540c\u4e00\u65f6\u95f4\u5bf9\u540c\u4e00\u6570\u636e\u5b58\u5728\u591a\u4e2a\u53ef\u53d8\u5f15\u7528 \u3002\u65b0 Rustacean \u4eec\u7ecf\u5e38\u96be\u4ee5\u9002\u5e94\u8fd9\u4e00\u70b9\uff0c\u56e0\u4e3a\u5927\u90e8\u5206\u8bed\u8a00\u4e2d\u53d8\u91cf\u4efb\u4f55\u65f6\u5019\u90fd\u662f\u53ef\u53d8\u7684\u3002\u8fd9\u4e2a\u9650\u5236\u7684\u597d\u5904\u662f Rust \u53ef\u4ee5\u5728\u7f16\u8bd1\u65f6\u5c31\u907f\u514d\u6570\u636e\u7ade\u4e89\u3002 \u6570\u636e\u7ade\u4e89 \uff08data race\uff09\u7c7b\u4f3c\u4e8e\u7ade\u6001\u6761\u4ef6\uff0c\u5b83\u53ef\u7531\u8fd9\u4e09\u4e2a\u884c\u4e3a\u9020\u6210\uff1a \u4e24\u4e2a\u6216\u66f4\u591a\u6307\u9488\u540c\u65f6\u8bbf\u95ee\u540c\u4e00\u6570\u636e\u3002 \u81f3\u5c11\u6709\u4e00\u4e2a\u6307\u9488\u88ab\u7528\u6765\u5199\u5165\u6570\u636e\u3002 \u6ca1\u6709\u540c\u6b65\u6570\u636e\u8bbf\u95ee\u7684\u673a\u5236\u3002 \u6570\u636e\u7ade\u4e89\u4f1a\u5bfc\u81f4\u672a\u5b9a\u4e49\u884c\u4e3a\uff0c\u96be\u4ee5\u5728\u8fd0\u884c\u65f6\u8ffd\u8e2a\uff0c\u5e76\u4e14\u96be\u4ee5\u8bca\u65ad\u548c\u4fee\u590d\uff1bRust \u907f\u514d\u4e86\u8fd9\u79cd\u60c5\u51b5\u7684\u53d1\u751f\uff0c\u56e0\u4e3a\u5b83\u751a\u81f3\u4e0d\u4f1a\u7f16\u8bd1\u5b58\u5728\u6570\u636e\u7ade\u4e89\u7684\u4ee3\u7801\uff01 \u4e00\u5982\u65e2\u5f80\uff0c\u53ef\u4ee5\u4f7f\u7528\u5927\u62ec\u53f7\u6765\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u4f5c\u7528\u57df\uff0c\u4ee5\u5141\u8bb8\u62e5\u6709\u591a\u4e2a\u53ef\u53d8\u5f15\u7528\uff0c\u53ea\u662f\u4e0d\u80fd \u540c\u65f6 \u62e5\u6709\uff1a fn main () { let mut s = String :: from ( \"hello\" ); { let r1 = & mut s ; } // r1 \u5728\u8fd9\u91cc\u79bb\u5f00\u4e86\u4f5c\u7528\u57df\uff0c\u6240\u4ee5\u6211\u4eec\u5b8c\u5168\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u5f15\u7528 let r2 = & mut s ; } Rust \u5728\u540c\u65f6\u4f7f\u7528\u53ef\u53d8\u4e0e\u4e0d\u53ef\u53d8\u5f15\u7528\u65f6\u4e5f\u91c7\u7528\u7684\u7c7b\u4f3c\u7684\u89c4\u5219\u3002\u8fd9\u4e9b\u4ee3\u7801\u4f1a\u5bfc\u81f4\u4e00\u4e2a\u9519\u8bef\uff1a let mut s = String :: from ( \"hello\" ); let r1 = & s ; // \u6ca1\u95ee\u9898 let r2 = & s ; // \u6ca1\u95ee\u9898 let r3 = & mut s ; // \u5927\u95ee\u9898 println! ( \"{}, {}, and {}\" , r1 , r2 , r3 ); // \u4f7f\u7528\u4e0d\u53ef\u53d8\u5f15\u7528\u65f6\uff0c\u540c\u65f6\u53c8\u4f7f\u7528\u4e86\u53ef\u53d8\u5f15\u7528\u3002 \u9519\u8bef\u5982\u4e0b\uff1a $ cargo run Compiling ownership v0 . 1.0 ( file : ///projects/ownership) error [ E0502 ] : cannot borrow ` s ` as mutable because it is also borrowed as immutable - -> src / main . rs : 6 : 14 | 4 | let r1 = & s ; // no problem | -- immutable borrow occurs here 5 | let r2 = & s ; // no problem 6 | let r3 = & mut s ; // BIG PROBLEM | ^^^^^^ mutable borrow occurs here 7 | 8 | println! ( \"{}, {}, and {}\" , r1 , r2 , r3 ); | -- immutable borrow later used here For more information about this error , try ` rustc -- explain E0502 ` . error : could not compile ` ownership ` due to previous error \u54c7\u54e6\uff01\u6211\u4eec \u4e5f \u4e0d\u80fd\u5728\u62e5\u6709\u4e0d\u53ef\u53d8\u5f15\u7528\u7684\u540c\u65f6\u62e5\u6709\u53ef\u53d8\u5f15\u7528\u3002 \u6ce8\u610f \u4e00\u4e2a\u5f15\u7528\u7684\u4f5c\u7528\u57df\u4ece\u58f0\u660e\u7684\u5730\u65b9\u5f00\u59cb\u4e00\u76f4\u6301\u7eed\u5230\u6700\u540e\u4e00\u6b21\u4f7f\u7528\u4e3a\u6b62 \u3002\u4f8b\u5982\uff0c\u56e0\u4e3a\u6700\u540e\u4e00\u6b21\u4f7f\u7528 \u4e0d\u53ef\u53d8\u5f15\u7528 \uff08println!)\uff0c\u53d1\u751f\u5728\u58f0\u660e\u53ef\u53d8\u5f15\u7528\u4e4b\u524d\uff0c\u6240\u4ee5\u5982\u4e0b\u4ee3\u7801\u662f\u53ef\u4ee5\u7f16\u8bd1\u7684\uff1a let mut s = String :: from ( \"hello\" ); let r1 = & s ; // \u6ca1\u95ee\u9898 let r2 = & s ; // \u6ca1\u95ee\u9898 println! ( \"{} and {}\" , r1 , r2 ); // \u6b64\u4f4d\u7f6e\u4e4b\u540e r1 \u548c r2 \u4e0d\u518d\u4f7f\u7528 let r3 = & mut s ; // \u6ca1\u95ee\u9898 println! ( \"{}\" , r3 ); \u4e0d\u53ef\u53d8\u5f15\u7528 r1 \u548c r2 \u7684\u4f5c\u7528\u57df\u5728 println! \u6700\u540e\u4e00\u6b21\u4f7f\u7528\u4e4b\u540e\u7ed3\u675f\uff0c\u8fd9\u4e5f\u662f\u521b\u5efa\u53ef\u53d8\u5f15\u7528 r3 \u7684\u5730\u65b9\u3002\u5b83\u4eec\u7684\u4f5c\u7528\u57df \u6ca1\u6709\u91cd\u53e0 \uff0c\u6240\u4ee5\u4ee3\u7801\u662f\u53ef\u4ee5\u7f16\u8bd1\u7684\u3002 \u7f16\u8bd1\u5668\u5728\u4f5c\u7528\u57df\u7ed3\u675f\u4e4b\u524d\u5224\u65ad\u4e0d\u518d\u4f7f\u7528\u7684\u5f15\u7528\u7684\u80fd\u529b\u88ab\u79f0\u4e3a \u975e\u8bcd\u6cd5\u4f5c\u7528\u57df\u751f\u547d\u5468\u671f \uff08Non-Lexical Lifetimes\uff0c\u7b80\u79f0 NLL\uff09\u3002\u4f60\u53ef\u4ee5\u5728 The Edition Guide \u4e2d\u9605\u8bfb\u66f4\u591a\u5173\u4e8e\u5b83\u7684\u4fe1\u606f\u3002 \u60ac\u5782\u5f15\u7528\uff08Dangling References\uff09 \u6240\u8c13 \u60ac\u5782\u6307\u9488 \u662f\u5176\u6307\u5411\u7684\u5185\u5b58\u53ef\u80fd\u5df2\u7ecf\u88ab\u5206\u914d\u7ed9\u5176\u5b83\u6301\u6709\u8005\u3002\u76f8\u6bd4\u4e4b\u4e0b\uff0c\u5728 Rust \u4e2d\u7f16\u8bd1\u5668\u786e\u4fdd\u5f15\u7528\u6c38\u8fdc\u4e5f\u4e0d\u4f1a\u53d8\u6210\u60ac\u5782\u72b6\u6001\uff1a \u5f53\u4f60\u62e5\u6709\u4e00\u4e9b\u6570\u636e\u7684\u5f15\u7528\uff0c\u7f16\u8bd1\u5668\u786e\u4fdd\u6570\u636e\u4e0d\u4f1a\u5728\u5176\u5f15\u7528\u4e4b\u524d\u79bb\u5f00\u4f5c\u7528\u57df\u3002 \u5f53\u5c1d\u8bd5\u521b\u5efa\u4e00\u4e2a\u60ac\u5782\u5f15\u7528\u65f6\uff0cRust \u4f1a\u901a\u8fc7\u4e00\u4e2a\u7f16\u8bd1\u65f6\u9519\u8bef\u6765\u907f\u514d\uff1a fn main () { let reference_to_nothing = dangle (); } fn dangle () -> & String { // dangle \u8fd4\u56de\u4e00\u4e2a\u5b57\u7b26\u4e32\u7684\u5f15\u7528 let s = String :: from ( \"hello\" ); // s \u662f\u4e00\u4e2a\u65b0\u5b57\u7b26\u4e32 & s // \u8fd4\u56de\u5b57\u7b26\u4e32 s \u7684\u5f15\u7528 } // \u8fd9\u91cc s \u79bb\u5f00\u4f5c\u7528\u57df\u5e76\u88ab\u4e22\u5f03\u3002\u5176\u5185\u5b58\u88ab\u91ca\u653e\u3002 // \u5371\u9669\uff01 \u9519\u8bef: $ cargo run Compiling ownership v0.1.0 ( file:///projects/ownership ) error [ E0106 ] : missing lifetime specifier --> src/main.rs:5:16 | 5 | fn dangle () -> & String { | ^ expected named lifetime parameter | = help: this function 's return type contains a borrowed value, but there is no value for it to be borrowed from help: consider using the `' static ` lifetime | 5 | fn dangle () -> & ' static String { | ~~~~~~~~ For more information about this error, try ` rustc --explain E0106 ` . error: could not compile ` ownership ` due to previous error \u56e0\u4e3a s \u662f\u5728 dangle \u51fd\u6570\u5185\u521b\u5efa\u7684\uff0c\u5f53 dangle \u7684\u4ee3\u7801\u6267\u884c\u5b8c\u6bd5\u540e\uff0cs \u5c06\u88ab\u91ca\u653e\u3002\u4e0d\u8fc7\u6211\u4eec\u5c1d\u8bd5\u8fd4\u56de\u5b83\u7684\u5f15\u7528\u3002\u8fd9\u610f\u5473\u7740\u8fd9\u4e2a\u5f15\u7528\u4f1a\u6307\u5411\u4e00\u4e2a\u65e0\u6548\u7684 String\uff0c\u8fd9\u53ef\u4e0d\u5bf9\uff01Rust \u4e0d\u4f1a\u5141\u8bb8\u8fd9\u4e48\u505a\u3002 \u8fd9\u91cc\u7684\u89e3\u51b3\u65b9\u6cd5\u662f\u76f4\u63a5\u8fd4\u56de String\uff1a fn no_dangle () -> String { let s = String :: from ( \"hello\" ); s // \u76f4\u63a5\u8fd4\u56des // \u6240\u6709\u6743\u88ab\u79fb\u52a8\u51fa\u53bb\uff0c\u6240\u4ee5\u6ca1\u6709\u503c\u88ab\u91ca\u653e\u3002 } \u5f15\u7528\u7684\u89c4\u5219 \u5728\u4efb\u610f\u7ed9\u5b9a\u65f6\u95f4\uff0c\u8981\u4e48 \u53ea\u80fd\u6709\u4e00\u4e2a\u53ef\u53d8\u5f15\u7528\uff0c\u8981\u4e48 \u53ea\u80fd\u6709\u591a\u4e2a\u4e0d\u53ef\u53d8\u5f15\u7528\u3002 \u5f15\u7528\u5fc5\u987b\u603b\u662f\u6709\u6548\u7684\u3002 Slice\u7c7b\u578b slice \u5141\u8bb8\u4f60\u5f15\u7528\u96c6\u5408\u4e2d\u4e00\u6bb5\u8fde\u7eed\u7684\u5143\u7d20\u5e8f\u5217\uff0c\u800c\u4e0d\u7528\u5f15\u7528\u6574\u4e2a\u96c6\u5408\u3002 slice \u662f\u4e00\u7c7b\u5f15\u7528\uff0c\u6240\u4ee5\u5b83\u6ca1\u6709\u6240\u6709\u6743\u3002 \u5c0f\u7ec3\u4e60\uff1a \u7f16\u5199\u4e00\u4e2a\u51fd\u6570\uff0c\u8be5\u51fd\u6570\u63a5\u6536\u4e00\u4e2a\u7528\u7a7a\u683c\u5206\u9694\u5355\u8bcd\u7684\u5b57\u7b26\u4e32\uff0c\u5e76\u8fd4\u56de\u5728\u8be5\u5b57\u7b26\u4e32\u4e2d\u627e\u5230\u7684\u7b2c\u4e00\u4e2a\u5355\u8bcd, \u5982\u679c\u51fd\u6570\u5728\u8be5\u5b57\u7b26\u4e32\u4e2d\u5e76\u672a\u627e\u5230\u7a7a\u683c\uff0c\u5219\u6574\u4e2a\u5b57\u7b26\u4e32\u5c31\u662f\u4e00\u4e2a\u5355\u8bcd\uff0c\u6240\u4ee5\u5e94\u8be5\u8fd4\u56de\u6574\u4e2a\u5b57\u7b26\u4e32\u3002 fn first_word ( s : & String ) -> ? first_word \u51fd\u6570\u6709\u4e00\u4e2a\u53c2\u6570 &String \u3002\u56e0\u4e3a\u6211\u4eec\u4e0d\u9700\u8981\u6240\u6709\u6743\uff0c\u6240\u4ee5\u8fd9\u6ca1\u6709\u95ee\u9898\u3002\u4e0d\u8fc7\u5e94\u8be5\u8fd4\u56de\u4ec0\u4e48\u5462\uff1f\u6211\u4eec\u5e76\u6ca1\u6709\u4e00\u4e2a\u771f\u6b63\u83b7\u53d6 \u90e8\u5206 \u5b57\u7b26\u4e32\u7684\u529e\u6cd5\u3002\u4e0d\u8fc7\uff0c\u6211\u4eec\u53ef\u4ee5\u8fd4\u56de\u5355\u8bcd\u7ed3\u5c3e\u7684\u7d22\u5f15\uff0c\u7ed3\u5c3e\u7531\u4e00\u4e2a\u7a7a\u683c\u8868\u793a\u3002 fn first_word ( s : & String ) -> usize { // \u7528 as_bytes \u65b9\u6cd5\u5c06 String \u8f6c\u5316\u4e3a\u5b57\u8282\u6570\u7ec4 let bytes = s . as_bytes (); // \u4f7f\u7528 iter \u65b9\u6cd5\u5728\u5b57\u8282\u6570\u7ec4\u4e0a\u521b\u5efa\u4e00\u4e2a\u8fed\u4ee3\u5668\uff1a // enumerate \u5305\u88c5\u4e86 iter \u7684\u7ed3\u679c\uff0c\u5c06\u8fd9\u4e9b\u5143\u7d20\u4f5c\u4e3a\u5143\u7ec4\u7684\u4e00\u90e8\u5206\u6765\u8fd4\u56de\u3002 // enumerate \u8fd4\u56de\u7684\u5143\u7ec4\u4e2d\uff0c\u7b2c\u4e00\u4e2a\u5143\u7d20\u662f\u7d22\u5f15\uff0c\u7b2c\u4e8c\u4e2a\u5143\u7d20\u662f\u96c6\u5408\u4e2d\u5143\u7d20\u7684\u5f15\u7528\u3002 // \u56e0\u4e3a enumerate \u65b9\u6cd5\u8fd4\u56de\u4e00\u4e2a\u5143\u7ec4\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u6a21\u5f0f\u6765\u89e3\u6784 // \u5143\u7ec4\u4e2d\u7684 i \u662f\u7d22\u5f15\u800c\u5143\u7ec4\u4e2d\u7684 &item \u662f\u5355\u4e2a\u5b57\u8282\u3002 // \u56e0\u4e3a\u6211\u4eec\u4ece .iter().enumerate() \u4e2d\u83b7\u53d6\u4e86\u96c6\u5408\u5143\u7d20\u7684\u5f15\u7528\uff0c\u6240\u4ee5\u6a21\u5f0f\u4e2d\u4f7f\u7528\u4e86 &\u3002 for ( i , & item ) in bytes . iter (). enumerate () { // \u901a\u8fc7\u5b57\u8282\u7684\u5b57\u9762\u503c\u8bed\u6cd5\u6765\u5bfb\u627e\u4ee3\u8868\u7a7a\u683c\u7684\u5b57\u8282\u3002 // \u5982\u679c\u627e\u5230\u4e86\u4e00\u4e2a\u7a7a\u683c\uff0c\u8fd4\u56de\u5b83\u7684\u4f4d\u7f6e\u3002 if item == b' ' { return i ; } } // \u5426\u5219\uff0c\u4f7f\u7528 s.len() \u8fd4\u56de\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\uff1a s . len () } \u73b0\u5728\u6709\u4e86\u4e00\u4e2a\u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7b2c\u4e00\u4e2a\u5355\u8bcd\u7ed3\u5c3e\u7d22\u5f15\u7684\u65b9\u6cd5\uff0c\u4e0d\u8fc7\u8fd9\u6709\u4e00\u4e2a\u95ee\u9898\u3002 \u6211\u4eec\u8fd4\u56de\u4e86\u4e00\u4e2a\u72ec\u7acb\u7684 usize \uff0c\u4e0d\u8fc7\u5b83\u53ea\u5728 &String \u7684\u4e0a\u4e0b\u6587\u4e2d\u624d\u662f\u4e00\u4e2a\u6709\u610f\u4e49\u7684\u6570\u5b57\u3002 \u6362\u53e5\u8bdd\u8bf4\uff0c\u56e0\u4e3a\u5b83\u662f\u4e00\u4e2a\u4e0e String \u76f8\u5206\u79bb\u7684\u503c\uff0c\u65e0\u6cd5\u4fdd\u8bc1\u5c06\u6765\u5b83\u4ecd\u7136\u6709\u6548\u3002 fn main () { let mut s = String :: from ( \"hello world\" ); let word = first_word ( & s ); // word \u7684\u503c\u4e3a 5 s . clear (); // \u8fd9\u6e05\u7a7a\u4e86\u5b57\u7b26\u4e32\uff0c\u4f7f\u5176\u7b49\u4e8e \"\" // word \u5728\u6b64\u5904\u7684\u503c\u4ecd\u7136\u662f 5\uff0c // \u4f46\u662f\u6ca1\u6709\u66f4\u591a\u7684\u5b57\u7b26\u4e32\u8ba9\u6211\u4eec\u53ef\u4ee5\u6709\u6548\u5730\u5e94\u7528\u6570\u503c 5\u3002word \u7684\u503c\u73b0\u5728\u5b8c\u5168\u65e0\u6548\uff01 } \u8fd9\u4e2a\u7a0b\u5e8f\u7f16\u8bd1\u65f6\u6ca1\u6709\u4efb\u4f55\u9519\u8bef\uff0c\u800c\u4e14\u5728\u8c03\u7528 s.clear() \u4e4b\u540e\u4f7f\u7528 word \u4e5f\u4e0d\u4f1a\u51fa\u9519\u3002\u56e0\u4e3a word \u4e0e s \u72b6\u6001\u5b8c\u5168\u6ca1\u6709\u8054\u7cfb\uff0c\u6240\u4ee5 word \u4ecd\u7136\u5305\u542b\u503c 5\u3002 \u53ef\u4ee5\u5c1d\u8bd5\u7528\u503c 5 \u6765\u63d0\u53d6\u53d8\u91cf s \u7684\u7b2c\u4e00\u4e2a\u5355\u8bcd\uff0c\u4e0d\u8fc7\u8fd9\u662f\u6709 bug \u7684\uff0c\u56e0\u4e3a\u5728\u6211\u4eec\u5c06 5 \u4fdd\u5b58\u5230 word \u4e4b\u540e s \u7684\u5185\u5bb9\u5df2\u7ecf\u6539\u53d8\u3002 \u6211\u4eec\u4e0d\u5f97\u4e0d\u65f6\u523b\u62c5\u5fc3 word \u7684\u7d22\u5f15\u4e0e s \u4e2d\u7684\u6570\u636e\u4e0d\u518d\u540c\u6b65\uff0c\u8fd9\u5f88\u5570\u55e6\u4e14\u6613\u51fa\u9519\uff01\u5982\u679c\u7f16\u5199\u8fd9\u4e48\u4e00\u4e2a second_word \u51fd\u6570\u7684\u8bdd\uff0c\u7ba1\u7406\u7d22\u5f15\u8fd9\u4ef6\u4e8b\u5c06\u66f4\u52a0\u5bb9\u6613\u51fa\u95ee\u9898\u3002\u5b83\u7684\u7b7e\u540d\u770b\u8d77\u6765\u50cf\u8fd9\u6837\uff1a fn second_word ( s : & String ) -> ( usize , usize ) { \u73b0\u5728\u6211\u4eec\u8981\u8ddf\u8e2a\u4e00\u4e2a \u5f00\u59cb\u7d22\u5f15 \u548c \u4e00\u4e2a \u7ed3\u5c3e\u7d22\u5f15 \uff0c\u540c\u65f6\u6709\u4e86\u66f4\u591a\u4ece\u6570\u636e\u7684\u67d0\u4e2a\u7279\u5b9a\u72b6\u6001\u8ba1\u7b97\u800c\u6765\u7684\u503c\uff0c\u4f46\u90fd\u5b8c\u5168\u6ca1\u6709\u4e0e\u8fd9\u4e2a\u72b6\u6001\u76f8\u5173\u8054\u3002\u73b0\u5728\u6709\u4e09\u4e2a\u98d8\u5ffd\u4e0d\u5b9a\u7684\u4e0d\u76f8\u5173\u53d8\u91cf\u9700\u8981\u4fdd\u6301\u540c\u6b65\u3002 \u5b57\u7b26\u4e32Slice \u5b57\u7b26\u4e32 slice \uff08string slice\uff09\u662f String \u4e2d\u4e00\u90e8\u5206\u503c\u7684\u5f15\u7528\uff0c\u5b83\u770b\u8d77\u6765\u50cf\u8fd9\u6837\uff1a let s = String :: from ( \"hello world\" ); let hello = & s [ 0 .. 5 ]; // hello \u662f\u4e00\u4e2a\u90e8\u5206 String \u7684\u5f15\u7528\uff0c\u7531\u4e00\u4e2a\u989d\u5916\u7684 [0..5] \u90e8\u5206\u6307\u5b9a\u3002 let world = & s [ 6 .. 11 ]; // \u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a\u7531\u4e2d\u62ec\u53f7\u4e2d\u7684 [starting_index..ending_index] \u6307\u5b9a\u7684 range \u521b\u5efa\u4e00\u4e2a slice\uff0c\u5176\u4e2d starting_index \u662f slice \u7684\u7b2c\u4e00\u4e2a\u4f4d\u7f6e\uff0cending_index \u5219\u662f slice \u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\u7684\u540e\u4e00\u4e2a\u503c\u3002 \u5728\u5176\u5185\u90e8\uff0c slice \u7684\u6570\u636e\u7ed3\u6784\u5b58\u50a8\u4e86 slice \u7684\u5f00\u59cb\u4f4d\u7f6e\u548c\u957f\u5ea6\uff0c\u957f\u5ea6\u5bf9\u5e94\u4e8e ending_index \u51cf\u53bb starting_index \u7684\u503c\u3002 \u6240\u4ee5\u5bf9\u4e8e let world = &s[6..11]; \u7684\u60c5\u51b5\uff0cworld \u5c06\u662f\u4e00\u4e2a\u5305\u542b\u6307\u5411 s \u7d22\u5f15 6 \u7684\u6307\u9488\u548c\u957f\u5ea6\u503c 5 \u7684 slice\u3002 \u5bf9\u4e8e Rust \u7684 .. range \u8bed\u6cd5\uff0c\u5982\u679c\u60f3\u8981\u4ece\u7d22\u5f15 0 \u5f00\u59cb\uff0c\u53ef\u4ee5 \u4e0d\u5199\u4e24\u4e2a\u70b9\u53f7\u4e4b\u524d\u7684\u503c \u3002\u5982\u4e0b\u4e24\u4e2a\u8bed\u53e5\u662f\u76f8\u540c\u7684\uff1a let s = String :: from ( \"hello\" ); let slice = & s [ 0 .. 2 ]; let slice = & s [ .. 2 ]; \u4f9d\u6b64\u7c7b\u63a8\uff0c\u5982\u679c slice \u5305\u542b String \u7684\u6700\u540e\u4e00\u4e2a\u5b57\u8282\uff0c\u4e5f\u53ef\u4ee5 \u820d\u5f03\u5c3e\u90e8 \u7684\u6570\u5b57\u3002\u8fd9\u610f\u5473\u7740\u5982\u4e0b\u4e5f\u662f\u76f8\u540c\u7684\uff1a let s = String :: from ( \"hello\" ); let len = s . len (); let slice = & s [ 3 .. len ]; let slice = & s [ 3 .. ]; \u4e5f\u53ef\u4ee5 \u540c\u65f6\u820d\u5f03 \u8fd9\u4e24\u4e2a\u503c\u6765\u83b7\u53d6\u6574\u4e2a\u5b57\u7b26\u4e32\u7684 slice\u3002\u6240\u4ee5\u5982\u4e0b\u4ea6\u662f\u76f8\u540c\u7684\uff1a let s = String :: from ( \"hello\" ); let len = s . len (); let slice = & s [ 0 .. len ]; let slice = & s [ .. ]; \u6ce8\u610f \u5b57\u7b26\u4e32 slice range \u7684\u7d22\u5f15\u5fc5\u987b\u4f4d\u4e8e\u6709\u6548\u7684 UTF-8 \u5b57\u7b26\u8fb9\u754c\u5185\uff0c\u5982\u679c\u5c1d\u8bd5\u4ece\u4e00\u4e2a\u591a\u5b57\u8282\u5b57\u7b26\u7684\u4e2d\u95f4\u4f4d\u7f6e\u521b\u5efa\u5b57\u7b26\u4e32 slice\uff0c\u5219\u7a0b\u5e8f\u5c06\u4f1a\u56e0\u9519\u8bef\u800c\u9000\u51fa\u3002 \u51fa\u4e8e\u4ecb\u7ecd\u5b57\u7b26\u4e32 slice \u7684\u76ee\u7684\uff0c\u672c\u90e8\u5206\u5047\u8bbe\u53ea\u4f7f\u7528 ASCII \u5b57\u7b26\u96c6\uff1b\u7b2c\u516b\u7ae0\u7684 \u201c \u4f7f\u7528\u5b57\u7b26\u4e32\u5b58\u50a8 UTF-8 \u7f16\u7801\u7684\u6587\u672c \u201d \u90e8\u5206\u4f1a\u66f4\u52a0\u5168\u9762\u7684\u8ba8\u8bba UTF-8 \u5904\u7406\u95ee\u9898\u3002 \u91cd\u5199 first_word \u6765\u8fd4\u56de\u4e00\u4e2a slice \u3002 \u201c\u5b57\u7b26\u4e32 slice\u201d \u7684\u7c7b\u578b\u58f0\u660e\u5199\u4f5c &str \uff1a fn first_word ( s : & String ) -> & str { let bytes = s . as_bytes (); for ( i , & item ) in bytes . iter (). enumerate () { if item == b' ' { return & s [ 0 .. i ]; } } & s [ .. ] } \u73b0\u5728\u5f53\u8c03\u7528 first_word \u65f6\uff0c\u4f1a\u8fd4\u56de\u4e0e\u5e95\u5c42\u6570\u636e\u5173\u8054\u7684\u5355\u4e2a\u503c\u3002\u8fd9\u4e2a\u503c\u7531\u4e00\u4e2a slice \u5f00\u59cb\u4f4d\u7f6e\u7684\u5f15\u7528\u548c slice \u4e2d\u5143\u7d20\u7684\u6570\u91cf\u7ec4\u6210 \u3002 second_word \u51fd\u6570\u4e5f\u53ef\u4ee5\u6539\u4e3a\u8fd4\u56de\u4e00\u4e2a slice \uff1a fn second_word ( s : & String ) -> & str { \u73b0\u5728\u6709\u4e86\u4e00\u4e2a\u4e0d\u6613\u6df7\u6dc6\u4e14\u76f4\u89c2\u7684 API \u4e86\uff0c \u56e0\u4e3a\u7f16\u8bd1\u5668\u4f1a\u786e\u4fdd\u6307\u5411 String \u7684\u5f15\u7528\u6301\u7eed\u6709\u6548\u3002 \u4f7f\u7528 slice \u7248\u672c\u7684 first_word \u4f1a\u629b\u51fa\u4e00\u4e2a\u7f16\u8bd1\u65f6\u9519\u8bef\uff1a fn main () { let mut s = String :: from ( \"hello world\" ); let word = first_word ( & s ); s . clear (); // \u9519\u8bef! println! ( \"the first word is: {}\" , word ); } \u7f16\u8bd1\u9519\u8bef\uff1a $ cargo run Compiling ownership v0 . 1.0 ( file : ///projects/ownership) error [ E0502 ] : cannot borrow ` s ` as mutable because it is also borrowed as immutable - -> src / main . rs : 18 : 5 | 16 | let word = first_word ( & s ); | -- immutable borrow occurs here 17 | 18 | s . clear (); // error! | ^^^^^^^^^ mutable borrow occurs here 19 | 20 | println! ( \"the first word is: {}\" , word ); | ---- immutable borrow later used here For more information about this error , try ` rustc -- explain E0502 ` . error : could not compile ` ownership ` due to previous error \u56de\u5fc6\u4e00\u4e0b \u501f\u7528\u89c4\u5219 \uff0c\u5f53\u62e5\u6709\u67d0\u503c\u7684\u4e0d\u53ef\u53d8\u5f15\u7528\u65f6\uff0c\u5c31\u4e0d\u80fd\u518d\u83b7\u53d6\u4e00\u4e2a\u53ef\u53d8\u5f15\u7528\u3002\u56e0\u4e3a clear \u9700\u8981\u6e05\u7a7a String\uff0c\u5b83\u5c1d\u8bd5\u83b7\u53d6\u4e00\u4e2a\u53ef\u53d8\u5f15\u7528\u3002 \u5728\u8c03\u7528 clear \u4e4b\u540e\u7684 println! \u4f7f\u7528\u4e86 word \u4e2d\u7684\u5f15\u7528\uff0c\u6240\u4ee5\u8fd9\u4e2a\u4e0d\u53ef\u53d8\u7684\u5f15\u7528\u5728\u6b64\u65f6\u5fc5\u987b\u4ecd\u7136\u6709\u6548\u3002 Rust \u4e0d\u5141\u8bb8 clear \u4e2d\u7684\u53ef\u53d8\u5f15\u7528\u548c word \u4e2d\u7684\u4e0d\u53ef\u53d8\u5f15\u7528\u540c\u65f6\u5b58\u5728\uff0c\u56e0\u6b64\u7f16\u8bd1\u5931\u8d25\u3002 Rust \u4e0d\u4ec5\u4f7f\u5f97\u6211\u4eec\u7684 API \u7b80\u5355\u6613\u7528\uff0c\u4e5f\u5728\u7f16\u8bd1\u65f6\u5c31\u6d88\u9664\u4e86\u4e00\u6574\u7c7b\u7684\u9519\u8bef\uff01 \u5b57\u7b26\u4e32\u5b57\u9762\u503c\u5c31\u662f slice \u8fd8\u8bb0\u5f97\u8bb2\u5230\u8fc7\u5b57\u7b26\u4e32\u5b57\u9762\u503c\u88ab\u50a8\u5b58\u5728\u4e8c\u8fdb\u5236\u6587\u4ef6\u4e2d\u5417\uff1f\u73b0\u5728\u77e5\u9053 slice \u4e86\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u6b63\u786e\u5730\u7406\u89e3\u5b57\u7b26\u4e32\u5b57\u9762\u503c\u4e86\uff1a let s = \"Hello, world!\" ; \u8fd9\u91cc s \u7684\u7c7b\u578b\u662f &str \uff1a\u5b83\u662f\u4e00\u4e2a\u6307\u5411\u4e8c\u8fdb\u5236\u7a0b\u5e8f\u7279\u5b9a\u4f4d\u7f6e\u7684 slice\u3002\u8fd9\u4e5f\u5c31\u662f\u4e3a\u4ec0\u4e48\u5b57\u7b26\u4e32\u5b57\u9762\u503c\u662f\u4e0d\u53ef\u53d8\u7684\uff1b &str \u662f\u4e00\u4e2a\u4e0d\u53ef\u53d8\u5f15\u7528 \u3002 \u5b57\u7b26\u4e32 slice \u4f5c\u4e3a\u53c2\u6570 \u5728\u77e5\u9053\u4e86\u80fd\u591f\u83b7\u53d6\u5b57\u9762\u503c\u548c String \u7684 slice \u540e\uff0c\u6211\u4eec\u5bf9 first_word \u505a\u4e86\u6539\u8fdb\uff0c\u8fd9\u662f\u5b83\u7684\u7b7e\u540d\uff1a fn first_word ( s : & String ) -> & str { \u800c\u66f4\u6709\u7ecf\u9a8c\u7684 Rustacean \u4f1a\u7f16\u5199\u51fa\u8fd9\u6837\u7684\u51fd\u6570\u7b7e\u540d\uff0c\u56e0\u4e3a\u5b83\u4f7f\u5f97\u53ef\u4ee5\u5bf9 &String \u503c\u548c &str \u503c\u4f7f\u7528\u76f8\u540c\u7684\u51fd\u6570\uff1a fn first_word ( s : & str ) -> & str { \u5982\u679c\u6709\u4e00\u4e2a\u5b57\u7b26\u4e32 slice\uff0c\u53ef\u4ee5\u76f4\u63a5\u4f20\u9012\u5b83\u3002\u5982\u679c\u6709\u4e00\u4e2a String \uff0c\u5219\u53ef\u4ee5\u4f20\u9012\u6574\u4e2a String \u7684 slice \u6216\u5bf9 String \u7684\u5f15\u7528\u3002 \u8fd9\u79cd\u7075\u6d3b\u6027\u5229\u7528\u4e86 deref coercions \u7684\u4f18\u52bf\uff0c\u8fd9\u4e2a\u7279\u6027\u6211\u4eec\u5c06\u5728\u201c \u51fd\u6570\u548c\u65b9\u6cd5\u7684\u9690\u5f0f Deref \u5f3a\u5236\u8f6c\u6362 \u201d\u7ae0\u8282\u4e2d\u4ecb\u7ecd\u3002 \u5b9a\u4e49\u4e00\u4e2a\u83b7\u53d6\u5b57\u7b26\u4e32 slice \u800c\u4e0d\u662f String \u5f15\u7528\u7684\u51fd\u6570\u4f7f\u5f97\u6211\u4eec\u7684 API \u66f4\u52a0\u901a\u7528 \u5e76\u4e14\u4e0d\u4f1a\u4e22\u5931\u4efb\u4f55\u529f\u80fd\uff1a fn main () { let my_string = String :: from ( \"hello world\" ); // `first_word` \u9002\u7528\u4e8e `String`\uff08\u7684 slice\uff09\uff0c\u6574\u4f53\u6216\u5168\u90e8 let word = first_word ( & my_string [ 0 .. 6 ]); let word = first_word ( & my_string [ .. ]); // `first_word` \u4e5f\u9002\u7528\u4e8e `String` \u7684\u5f15\u7528\uff0c // \u8fd9\u7b49\u4ef7\u4e8e\u6574\u4e2a `String` \u7684 slice let word = first_word ( & my_string ); let my_string_literal = \"hello world\" ; // `first_word` \u9002\u7528\u4e8e\u5b57\u7b26\u4e32\u5b57\u9762\u503c\uff0c\u6574\u4f53\u6216\u5168\u90e8 let word = first_word ( & my_string_literal [ 0 .. 6 ]); let word = first_word ( & my_string_literal [ .. ]); // \u56e0\u4e3a\u5b57\u7b26\u4e32\u5b57\u9762\u503c\u5df2\u7ecf \u662f \u5b57\u7b26\u4e32 slice \u4e86\uff0c // \u8fd9\u4e5f\u662f\u9002\u7528\u7684\uff0c\u65e0\u9700 slice \u8bed\u6cd5\uff01 let word = first_word ( my_string_literal ); } \u5176\u4ed6\u7c7b\u578b\u7684 slice \u5b57\u7b26\u4e32 slice\uff0c\u6b63\u5982\u4f60\u60f3\u8c61\u7684\u90a3\u6837\uff0c\u662f\u9488\u5bf9\u5b57\u7b26\u4e32\u7684\u3002\u4e0d\u8fc7\u4e5f\u6709\u66f4\u901a\u7528\u7684 slice \u7c7b\u578b\u3002\u8003\u8651\u4e00\u4e0b\u8fd9\u4e2a\u6570\u7ec4\uff1a let a = [ 1 , 2 , 3 , 4 , 5 ]; \u5c31\u8ddf\u60f3\u8981\u83b7\u53d6\u5b57\u7b26\u4e32\u7684\u4e00\u90e8\u5206\u90a3\u6837\uff0c\u4e5f\u4f1a\u60f3\u8981\u5f15\u7528\u6570\u7ec4\u7684\u4e00\u90e8\u5206\u3002\u53ef\u4ee5\u8fd9\u6837\u505a\uff1a let a = [ 1 , 2 , 3 , 4 , 5 ]; let slice = & a [ 1 .. 3 ]; // \u8fd9\u4e2a slice \u7684\u7c7b\u578b\u662f &[i32]\u3002 assert_eq! ( slice , & [ 2 , 3 ]); \u5b83\u8ddf\u5b57\u7b26\u4e32 slice \u7684\u5de5\u4f5c\u65b9\u5f0f\u4e00\u6837\uff0c\u901a\u8fc7 \u5b58\u50a8\u7b2c\u4e00\u4e2a\u96c6\u5408\u5143\u7d20\u7684\u5f15\u7528\u548c\u4e00\u4e2a\u96c6\u5408\u603b\u957f\u5ea6 \u3002\u4f60\u53ef\u4ee5\u5bf9\u5176\u4ed6\u6240\u6709\u96c6\u5408\u4f7f\u7528\u8fd9\u7c7b slice\u3002\u7b2c\u516b\u7ae0\u8bb2\u5230 vector \u65f6\u4f1a\u8be6\u7ec6\u8ba8\u8bba\u8fd9\u4e9b\u96c6\u5408\u3002 \u603b\u7ed3 \u6240\u6709\u6743 \u3001 \u501f\u7528 \u548c slice \u8fd9\u4e9b\u6982\u5ff5\u8ba9 Rust \u7a0b\u5e8f\u5728\u7f16\u8bd1\u65f6\u786e\u4fdd\u5185\u5b58\u5b89\u5168\u3002 Rust \u8bed\u8a00\u63d0\u4f9b\u4e86\u8ddf\u5176\u4ed6\u7cfb\u7edf\u7f16\u7a0b\u8bed\u8a00\u76f8\u540c\u7684\u65b9\u5f0f\u6765\u63a7\u5236\u4f60\u4f7f\u7528\u7684\u5185\u5b58\uff0c\u4f46\u62e5\u6709\u6570\u636e\u6240\u6709\u8005\u5728\u79bb\u5f00\u4f5c\u7528\u57df\u540e\u81ea\u52a8\u6e05\u9664\u5176\u6570\u636e\u7684\u529f\u80fd\u610f\u5473\u7740\u4f60\u65e0\u987b\u989d\u5916\u7f16\u5199\u548c\u8c03\u8bd5\u76f8\u5173\u7684\u63a7\u5236\u4ee3\u7801\u3002","title":"\u6240\u6709\u6743"},{"location":"ownership/#_1","text":"Rust \u7684\u6838\u5fc3\u529f\u80fd\uff08\u4e4b\u4e00\uff09\u662f \u6240\u6709\u6743\uff08ownership\uff09\u3002 \u6240\u6709\u7a0b\u5e8f\u90fd\u5fc5\u987b\u7ba1\u7406\u5176\u8fd0\u884c\u65f6\u4f7f\u7528\u8ba1\u7b97\u673a\u5185\u5b58\u7684\u65b9\u5f0f\u3002 \u4e00\u4e9b\u8bed\u8a00\u4e2d\u5177\u6709\u5783\u573e\u56de\u6536\u673a\u5236\uff0c\u5728\u7a0b\u5e8f\u8fd0\u884c\u65f6\u6709\u89c4\u5f8b\u5730\u5bfb\u627e\u4e0d\u518d\u4f7f\u7528\u7684\u5185\u5b58\uff1b \u5728\u53e6\u4e00\u4e9b\u8bed\u8a00\u4e2d\uff0c\u7a0b\u5e8f\u5458\u5fc5\u987b\u4eb2\u81ea\u5206\u914d\u548c\u91ca\u653e\u5185\u5b58\u3002 Rust \u5219\u9009\u62e9\u4e86\u7b2c\u4e09\u79cd\u65b9\u5f0f\uff1a \u901a\u8fc7\u6240\u6709\u6743\u7cfb\u7edf\u7ba1\u7406\u5185\u5b58\uff0c\u7f16\u8bd1\u5668\u5728\u7f16\u8bd1\u65f6\u4f1a\u6839\u636e\u4e00\u7cfb\u5217\u7684\u89c4\u5219\u8fdb\u884c\u68c0\u67e5\u3002\u5982\u679c\u8fdd\u53cd\u4e86\u4efb\u4f55\u8fd9\u4e9b\u89c4\u5219\uff0c\u7a0b\u5e8f\u90fd\u4e0d\u80fd\u7f16\u8bd1\u3002\u5728\u8fd0\u884c\u65f6\uff0c\u6240\u6709\u6743\u7cfb\u7edf\u7684\u4efb\u4f55\u529f\u80fd\u90fd\u4e0d\u4f1a\u51cf\u6162\u7a0b\u5e8f\u3002","title":"\u6240\u6709\u6743"},{"location":"ownership/#_2","text":"\u6808\uff08Stack\uff09\u4e0e\u5806\uff08Heap\uff09 \u5728\u5f88\u591a\u8bed\u8a00\u4e2d\uff0c\u4f60\u5e76\u4e0d\u9700\u8981\u7ecf\u5e38\u8003\u8651\u5230\u6808\u4e0e\u5806\u3002\u4e0d\u8fc7\u5728\u50cf Rust \u8fd9\u6837\u7684\u7cfb\u7edf\u7f16\u7a0b\u8bed\u8a00\u4e2d\uff0c\u503c\u662f\u4f4d\u4e8e\u6808\u4e0a\u8fd8\u662f\u5806\u4e0a\u5728\u66f4\u5927\u7a0b\u5ea6\u4e0a\u5f71\u54cd\u4e86\u8bed\u8a00\u7684\u884c\u4e3a\u4ee5\u53ca\u4e3a\u4f55\u5fc5\u987b\u505a\u51fa\u8fd9\u6837\u7684\u6289\u62e9\u3002 \u6808\u548c\u5806\u90fd\u662f\u4ee3\u7801\u5728\u8fd0\u884c\u65f6\u53ef\u4f9b\u4f7f\u7528\u7684\u5185\u5b58\uff0c\u4f46\u662f\u5b83\u4eec\u7684\u7ed3\u6784\u4e0d\u540c\u3002 \u6808\u4ee5\u653e\u5165\u503c\u7684\u987a\u5e8f\u5b58\u50a8\u503c\u5e76\u4ee5\u76f8\u53cd\u987a\u5e8f\u53d6\u51fa\u503c \u3002\u8fd9\u4e5f\u88ab\u79f0\u4f5c \u540e\u8fdb\u5148\u51fa \uff08last in, first out\uff09\u3002\u60f3\u8c61\u4e00\u4e0b\u4e00\u53e0\u76d8\u5b50\uff1a\u5f53\u589e\u52a0\u66f4\u591a\u76d8\u5b50\u65f6\uff0c\u628a\u5b83\u4eec\u653e\u5728\u76d8\u5b50\u5806\u7684\u9876\u90e8\uff0c\u5f53\u9700\u8981\u76d8\u5b50\u65f6\uff0c\u4e5f\u4ece\u9876\u90e8\u62ff\u8d70\u3002\u4e0d\u80fd\u4ece\u4e2d\u95f4\u4e5f\u4e0d\u80fd\u4ece\u5e95\u90e8\u589e\u52a0\u6216\u62ff\u8d70\u76d8\u5b50\uff01\u589e\u52a0\u6570\u636e\u53eb\u505a \u8fdb\u6808 \uff08pushing onto the stack\uff09\uff0c\u800c\u79fb\u51fa\u6570\u636e\u53eb\u505a \u51fa\u6808 \uff08popping off the stack\uff09\u3002 \u6808\u4e2d\u7684\u6240\u6709\u6570\u636e\u90fd\u5fc5\u987b\u5360\u7528\u5df2\u77e5\u4e14\u56fa\u5b9a\u7684\u5927\u5c0f \u3002 \u5728\u7f16\u8bd1\u65f6\u5927\u5c0f\u672a\u77e5\u6216\u5927\u5c0f\u53ef\u80fd\u53d8\u5316\u7684\u6570\u636e\uff0c\u8981\u6539\u4e3a\u5b58\u50a8\u5728\u5806\u4e0a \u3002 \u5806\u662f\u7f3a\u4e4f\u7ec4\u7ec7\u7684\uff1a\u5f53\u5411\u5806\u653e\u5165\u6570\u636e\u65f6\uff0c\u4f60\u8981\u8bf7\u6c42\u4e00\u5b9a\u5927\u5c0f\u7684\u7a7a\u95f4\u3002 \u5185\u5b58\u5206\u914d\u5668 \uff08memory allocator\uff09\u5728\u5806\u7684\u67d0\u5904\u627e\u5230\u4e00\u5757\u8db3\u591f\u5927\u7684\u7a7a\u4f4d\uff0c\u628a\u5b83\u6807\u8bb0\u4e3a\u5df2\u4f7f\u7528\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a\u8868\u793a\u8be5\u4f4d\u7f6e\u5730\u5740\u7684 \u6307\u9488 \uff08pointer\uff09\u3002\u8fd9\u4e2a\u8fc7\u7a0b\u79f0\u4f5c \u5728\u5806\u4e0a\u5206\u914d\u5185\u5b58 \uff08allocating on the heap\uff09\uff0c\u6709\u65f6\u7b80\u79f0\u4e3a \u201c \u5206\u914d \u201d\uff08allocating\uff09\u3002\uff08\u5c06\u6570\u636e\u63a8\u5165\u6808\u4e2d\u5e76\u4e0d\u88ab\u8ba4\u4e3a\u662f\u5206\u914d\uff09\u3002\u56e0\u4e3a\u6307\u5411\u653e\u5165\u5806\u4e2d\u6570\u636e\u7684\u6307\u9488\u662f\u5df2\u77e5\u7684\u5e76\u4e14\u5927\u5c0f\u662f\u56fa\u5b9a\u7684\uff0c\u4f60\u53ef\u4ee5\u5c06\u8be5\u6307\u9488\u5b58\u50a8\u5728\u6808\u4e0a\uff0c\u4e0d\u8fc7\u5f53\u9700\u8981\u5b9e\u9645\u6570\u636e\u65f6\uff0c\u5fc5\u987b\u8bbf\u95ee\u6307\u9488\u3002\u60f3\u8c61\u4e00\u4e0b\u53bb\u9910\u9986\u5c31\u5ea7\u5403\u996d\u3002\u5f53\u8fdb\u5165\u65f6\uff0c\u4f60\u8bf4\u660e\u6709\u51e0\u4e2a\u4eba\uff0c\u9910\u9986\u5458\u5de5\u4f1a\u627e\u5230\u4e00\u4e2a\u591f\u5927\u7684\u7a7a\u684c\u5b50\u5e76\u9886\u4f60\u4eec\u8fc7\u53bb\u3002\u5982\u679c\u6709\u4eba\u6765\u8fdf\u4e86\uff0c\u4ed6\u4eec\u4e5f\u53ef\u4ee5\u901a\u8fc7\u8be2\u95ee\u6765\u627e\u5230\u4f60\u4eec\u5750\u5728\u54ea\u3002 \u5165\u6808\u6bd4\u5728\u5806\u4e0a\u5206\u914d\u5185\u5b58\u8981\u5feb \uff0c\u56e0\u4e3a\uff08\u5165\u6808\u65f6\uff09\u5206\u914d\u5668\u65e0\u9700\u4e3a\u5b58\u50a8\u65b0\u6570\u636e\u53bb\u641c\u7d22\u5185\u5b58\u7a7a\u95f4\uff1b\u5176\u4f4d\u7f6e\u603b\u662f\u5728\u6808\u9876\u3002\u76f8\u6bd4\u4e4b\u4e0b\uff0c \u5728\u5806\u4e0a\u5206\u914d\u5185\u5b58\u5219\u9700\u8981\u66f4\u591a\u7684\u5de5\u4f5c\uff0c\u8fd9\u662f\u56e0\u4e3a\u5206\u914d\u5668\u5fc5\u987b\u9996\u5148\u627e\u5230\u4e00\u5757\u8db3\u591f\u5b58\u653e\u6570\u636e\u7684\u5185\u5b58\u7a7a\u95f4\uff0c\u5e76\u63a5\u7740\u505a\u4e00\u4e9b\u8bb0\u5f55\u4e3a\u4e0b\u4e00\u6b21\u5206\u914d\u505a\u51c6\u5907\u3002 \u8bbf\u95ee\u5806\u4e0a\u7684\u6570\u636e\u6bd4\u8bbf\u95ee\u6808\u4e0a\u7684\u6570\u636e\u6162\uff0c\u56e0\u4e3a\u5fc5\u987b\u901a\u8fc7\u6307\u9488\u6765\u8bbf\u95ee \u3002\u73b0\u4ee3\u5904\u7406\u5668\u5728\u5185\u5b58\u4e2d\u8df3\u8f6c\u8d8a\u5c11\u5c31\u8d8a\u5feb\uff08\u7f13\u5b58\uff09\u3002\u7ee7\u7eed\u7c7b\u6bd4\uff0c\u5047\u8bbe\u6709\u4e00\u4e2a\u670d\u52a1\u5458\u5728\u9910\u5385\u91cc\u5904\u7406\u591a\u4e2a\u684c\u5b50\u7684\u70b9\u83dc\u3002\u5728\u4e00\u4e2a\u684c\u5b50\u62a5\u5b8c\u6240\u6709\u83dc\u540e\u518d\u79fb\u52a8\u5230\u4e0b\u4e00\u4e2a\u684c\u5b50\u662f\u6700\u6709\u6548\u7387\u7684\u3002\u4ece\u684c\u5b50 A \u542c\u4e00\u4e2a\u83dc\uff0c\u63a5\u7740\u684c\u5b50 B \u542c\u4e00\u4e2a\u83dc\uff0c\u7136\u540e\u518d\u684c\u5b50 A\uff0c\u7136\u540e\u518d\u684c\u5b50 B \u8fd9\u6837\u7684\u6d41\u7a0b\u4f1a\u66f4\u52a0\u7f13\u6162\u3002\u51fa\u4e8e\u540c\u6837\u539f\u56e0\uff0c\u5904\u7406\u5668\u5728\u5904\u7406\u7684\u6570\u636e\u5f7c\u6b64\u8f83\u8fd1\u7684\u65f6\u5019\uff08\u6bd4\u5982\u5728\u6808\u4e0a\uff09\u6bd4\u8f83\u8fdc\u7684\u65f6\u5019\uff08\u6bd4\u5982\u53ef\u80fd\u5728\u5806\u4e0a\uff09\u80fd\u66f4\u597d\u7684\u5de5\u4f5c\u3002 \u5f53\u4f60\u7684\u4ee3\u7801\u8c03\u7528\u4e00\u4e2a\u51fd\u6570\u65f6\uff0c\u4f20\u9012\u7ed9\u51fd\u6570\u7684\u503c\uff08\u5305\u62ec\u53ef\u80fd\u6307\u5411\u5806\u4e0a\u6570\u636e\u7684\u6307\u9488\uff09\u548c\u51fd\u6570\u7684\u5c40\u90e8\u53d8\u91cf\u88ab\u538b\u5165\u6808\u4e2d\u3002\u5f53\u51fd\u6570\u7ed3\u675f\u65f6\uff0c\u8fd9\u4e9b\u503c\u88ab\u79fb\u51fa\u6808\u3002 \u8ddf\u8e2a\u54ea\u90e8\u5206\u4ee3\u7801\u6b63\u5728\u4f7f\u7528\u5806\u4e0a\u7684\u54ea\u4e9b\u6570\u636e\uff0c\u6700\u5927\u9650\u5ea6\u7684\u51cf\u5c11\u5806\u4e0a\u7684\u91cd\u590d\u6570\u636e\u7684\u6570\u91cf\uff0c\u4ee5\u53ca\u6e05\u7406\u5806\u4e0a\u4e0d\u518d\u4f7f\u7528\u7684\u6570\u636e\u786e\u4fdd\u4e0d\u4f1a\u8017\u5c3d\u7a7a\u95f4\uff0c\u8fd9\u4e9b\u95ee\u9898\u6b63\u662f\u6240\u6709\u6743\u7cfb\u7edf\u8981\u5904\u7406\u7684 \u3002\u4e00\u65e6\u7406\u89e3\u4e86\u6240\u6709\u6743\uff0c\u4f60\u5c31\u4e0d\u9700\u8981\u7ecf\u5e38\u8003\u8651\u6808\u548c\u5806\u4e86\uff0c\u4e0d\u8fc7\u660e\u767d\u4e86\u6240\u6709\u6743\u7684\u4e3b\u8981\u76ee\u7684\u5c31\u662f\u4e3a\u4e86\u7ba1\u7406\u5806\u6570\u636e\uff0c\u80fd\u591f\u5e2e\u52a9\u89e3\u91ca\u4e3a\u4ec0\u4e48\u6240\u6709\u6743\u8981\u4ee5\u8fd9\u79cd\u65b9\u5f0f\u5de5\u4f5c\u3002","title":"\u7b80\u4ecb"},{"location":"ownership/#_3","text":"\u9996\u5148\uff0c\u8ba9\u6211\u4eec\u770b\u4e00\u4e0b\u6240\u6709\u6743\u7684\u89c4\u5219. Rust \u4e2d\u7684\u6bcf\u4e00\u4e2a\u503c\u90fd\u6709\u4e00\u4e2a \u6240\u6709\u8005 \uff08owner\uff09\u3002 \u503c\u5728\u4efb\u4e00\u65f6\u523b\u6709\u4e14\u53ea\u6709\u4e00\u4e2a\u6240\u6709\u8005\u3002 \u5f53\u6240\u6709\u8005\uff08\u53d8\u91cf\uff09\u79bb\u5f00\u4f5c\u7528\u57df\uff0c\u8fd9\u4e2a\u503c\u5c06\u88ab\u4e22\u5f03\u3002","title":"\u6240\u6709\u6743\u89c4\u5219"},{"location":"ownership/#_4","text":"\u4f5c\u7528\u57df\u662f\u4e00\u4e2a\u9879\uff08item\uff09\u5728\u7a0b\u5e8f\u4e2d\u6709\u6548\u7684\u8303\u56f4\u3002\u5047\u8bbe\u6709\u8fd9\u6837\u4e00\u4e2a\u53d8\u91cf\uff1a { // s \u5728\u8fd9\u91cc\u65e0\u6548, \u5b83\u5c1a\u672a\u58f0\u660e let s = \"hello\" ; // \u4ece\u6b64\u5904\u8d77\uff0cs \u662f\u6709\u6548\u7684 // \u4f7f\u7528 s println! ( \"s is {s}\" ) } // \u6b64\u4f5c\u7528\u57df\u5df2\u7ed3\u675f\uff0cs \u4e0d\u518d\u6709\u6548 \u4e24\u4e2a\u91cd\u8981\u7684\u65f6\u95f4\u70b9\uff1a \u5f53 s \u8fdb\u5165\u4f5c\u7528\u57df \u65f6\uff0c\u5b83\u5c31\u662f\u6709\u6548\u7684\u3002 \u8fd9\u4e00\u76f4\u6301\u7eed\u5230\u5b83 \u79bb\u5f00\u4f5c\u7528\u57df \u4e3a\u6b62\u3002","title":"\u53d8\u91cf\u4f5c\u7528\u57df"},{"location":"ownership/#string","text":"\u5df2\u7ecf\u89c1\u8fc7\u5b57\u7b26\u4e32\u5b57\u9762\u503c\uff0c\u5373\u88ab\u786c\u7f16\u7801\u8fdb\u7a0b\u5e8f\u91cc\u7684\u5b57\u7b26\u4e32\u503c\u3002\u5b57\u7b26\u4e32\u5b57\u9762\u503c\u662f\u5f88\u65b9\u4fbf\u7684\uff0c\u4e0d\u8fc7\u5b83\u4eec\u5e76\u4e0d\u9002\u5408\u4f7f\u7528\u6587\u672c\u7684\u6bcf\u4e00\u79cd\u573a\u666f\u3002\u539f\u56e0\u4e4b\u4e00\u5c31\u662f \u5b83\u4eec\u662f\u4e0d\u53ef\u53d8\u7684 \u3002\u53e6\u4e00\u4e2a\u539f\u56e0\u662f \u5e76\u975e\u6240\u6709\u5b57\u7b26\u4e32\u7684\u503c\u90fd\u80fd\u5728\u7f16\u5199\u4ee3\u7801\u65f6\u5c31\u77e5\u9053 \uff1a\u4f8b\u5982\uff0c\u8981\u662f\u60f3\u83b7\u53d6\u7528\u6237\u8f93\u5165\u5e76\u5b58\u50a8\u8be5\u600e\u4e48\u529e\u5462\uff1f\u4e3a\u6b64\uff0cRust \u6709\u7b2c\u4e8c\u4e2a\u5b57\u7b26\u4e32\u7c7b\u578b\uff0cString\u3002\u8fd9\u4e2a\u7c7b\u578b\u7ba1\u7406\u88ab\u5206\u914d\u5230\u5806\u4e0a\u7684\u6570\u636e\uff0c\u6240\u4ee5\u80fd\u591f\u5b58\u50a8\u5728\u7f16\u8bd1\u65f6\u672a\u77e5\u5927\u5c0f\u7684\u6587\u672c\u3002\u53ef\u4ee5\u4f7f\u7528 from \u51fd\u6570\u57fa\u4e8e\u5b57\u7b26\u4e32\u5b57\u9762\u503c\u6765\u521b\u5efa String \uff0c\u5982\u4e0b\uff1a let s = String :: from ( \"hello\" ); // \u4e24\u4e2a\u5192\u53f7 :: \u662f\u8fd0\u7b97\u7b26\uff0c\u5141\u8bb8\u5c06\u7279\u5b9a\u7684 from \u51fd\u6570\u7f6e\u4e8e String \u7c7b\u578b\u7684\u547d\u540d\u7a7a\u95f4\uff08namespace\uff09\u4e0b\uff0c\u800c\u4e0d\u9700\u8981\u4f7f\u7528\u7c7b\u4f3c string_from \u8fd9\u6837\u7684\u540d\u5b57\u3002 \u53ef\u4ee5 \u4fee\u6539\u6b64\u7c7b\u5b57\u7b26\u4e32 \uff1a let mut s = String :: from ( \"hello\" ); s . push_str ( \", world!\" ); // push_str() \u5728\u5b57\u7b26\u4e32\u540e\u8ffd\u52a0\u5b57\u9762\u503c println! ( \"{}\" , s ); // \u5c06\u6253\u5370 `hello, world!` // \u90a3\u4e48\u8fd9\u91cc\u6709\u4ec0\u4e48\u533a\u522b\u5462\uff1f // \u4e3a\u4ec0\u4e48 String \u53ef\u53d8\u800c\u5b57\u9762\u503c\u5374\u4e0d\u884c\u5462\uff1f // \u533a\u522b\u5728\u4e8e\u4e24\u4e2a\u7c7b\u578b\u5bf9\u5185\u5b58\u7684\u5904\u7406\u4e0a\u3002","title":"String \u7c7b\u578b"},{"location":"ownership/#_5","text":"\u5c31\u5b57\u7b26\u4e32\u5b57\u9762\u503c\u6765\u8bf4\uff0c\u6211\u4eec\u5728\u7f16\u8bd1\u65f6\u5c31\u77e5\u9053\u5176\u5185\u5bb9\uff0c\u6240\u4ee5\u6587\u672c\u88ab\u76f4\u63a5\u786c\u7f16\u7801\u8fdb\u6700\u7ec8\u7684\u53ef\u6267\u884c\u6587\u4ef6\u4e2d\u3002\u8fd9\u4f7f\u5f97\u5b57\u7b26\u4e32\u5b57\u9762\u503c\u5feb\u901f\u4e14\u9ad8\u6548\u3002 \u4e0d\u8fc7\u8fd9\u4e9b\u7279\u6027\u90fd\u53ea\u5f97\u76ca\u4e8e\u5b57\u7b26\u4e32\u5b57\u9762\u503c\u7684\u4e0d\u53ef\u53d8\u6027\u3002 \u4e0d\u5e78\u7684\u662f\uff0c\u6211\u4eec\u4e0d\u80fd\u4e3a\u4e86\u6bcf\u4e00\u4e2a\u5728\u7f16\u8bd1\u65f6\u5927\u5c0f\u672a\u77e5\u7684\u6587\u672c\u800c\u5c06\u4e00\u5757\u5185\u5b58\u653e\u5165\u4e8c\u8fdb\u5236\u6587\u4ef6\u4e2d\uff0c\u5e76\u4e14\u5b83\u7684\u5927\u5c0f\u8fd8\u53ef\u80fd\u968f\u7740\u7a0b\u5e8f\u8fd0\u884c\u800c\u6539\u53d8\u3002 \u5bf9\u4e8e String \u7c7b\u578b\uff0c\u4e3a\u4e86\u652f\u6301\u4e00\u4e2a\u53ef\u53d8\uff0c\u53ef\u589e\u957f\u7684\u6587\u672c\u7247\u6bb5\uff0c \u9700\u8981\u5728\u5806\u4e0a\u5206\u914d\u4e00\u5757\u5728\u7f16\u8bd1\u65f6\u672a\u77e5\u5927\u5c0f\u7684\u5185\u5b58\u6765\u5b58\u653e\u5185\u5bb9 \u3002\u8fd9\u610f\u5473\u7740\uff1a \u5fc5\u987b\u5728\u8fd0\u884c\u65f6\u5411\u5185\u5b58\u5206\u914d\u5668\uff08memory allocator\uff09\u8bf7\u6c42\u5185\u5b58\u3002 \u9700\u8981\u4e00\u4e2a\u5f53\u6211\u4eec\u5904\u7406\u5b8c String \u65f6\u5c06\u5185\u5b58\u8fd4\u56de\u7ed9\u5206\u914d\u5668\u7684\u65b9\u6cd5\u3002 \u7b2c\u4e00\u90e8\u5206\u7531\u6211\u4eec\u5b8c\u6210\uff1a\u5f53\u8c03\u7528 String::from \u65f6\uff0c\u5b83\u7684\u5b9e\u73b0 (implementation) \u8bf7\u6c42\u5176\u6240\u9700\u7684\u5185\u5b58\u3002\u8fd9\u5728\u7f16\u7a0b\u8bed\u8a00\u4e2d\u662f\u975e\u5e38\u901a\u7528\u7684\u3002 \u7136\u800c\uff0c\u7b2c\u4e8c\u90e8\u5206\u5b9e\u73b0\u8d77\u6765\u5c31\u5404\u6709\u533a\u522b\u4e86\u3002\u5728\u6709 \u5783\u573e\u56de\u6536 \uff08garbage collector\uff0c GC \uff09\u7684\u8bed\u8a00\u4e2d\uff0c GC \u8bb0\u5f55\u5e76\u6e05\u9664\u4e0d\u518d\u4f7f\u7528\u7684\u5185\u5b58\uff0c\u800c\u6211\u4eec\u5e76\u4e0d\u9700\u8981\u5173\u5fc3\u5b83\u3002\u5728\u5927\u90e8\u5206\u6ca1\u6709 GC \u7684\u8bed\u8a00\u4e2d\uff0c\u8bc6\u522b\u51fa\u4e0d\u518d\u4f7f\u7528\u7684\u5185\u5b58\u5e76\u8c03\u7528\u4ee3\u7801\u663e\u5f0f\u91ca\u653e\u5c31\u662f\u6211\u4eec\u7684\u8d23\u4efb\u4e86\uff0c\u8ddf\u8bf7\u6c42\u5185\u5b58\u7684\u65f6\u5019\u4e00\u6837\u3002\u4ece\u5386\u53f2\u7684\u89d2\u5ea6\u4e0a\u8bf4\u6b63\u786e\u5904\u7406\u5185\u5b58\u56de\u6536\u66fe\u7ecf\u662f\u4e00\u4e2a\u56f0\u96be\u7684\u7f16\u7a0b\u95ee\u9898\u3002\u5982\u679c\u5fd8\u8bb0\u56de\u6536\u4e86\u4f1a\u6d6a\u8d39\u5185\u5b58\u3002\u5982\u679c\u8fc7\u65e9\u56de\u6536\u4e86\uff0c\u5c06\u4f1a\u51fa\u73b0\u65e0\u6548\u53d8\u91cf\u3002\u5982\u679c\u91cd\u590d\u56de\u6536\uff0c\u8fd9\u4e5f\u662f\u4e2a bug\u3002\u6211\u4eec\u9700\u8981 \u7cbe\u786e\u7684\u4e3a\u4e00\u4e2a allocate \u914d\u5bf9\u4e00\u4e2a free \u3002 Rust \u91c7\u53d6\u4e86\u4e00\u4e2a\u4e0d\u540c\u7684\u7b56\u7565\uff1a \u5185\u5b58\u5728\u62e5\u6709\u5b83\u7684\u53d8\u91cf\u79bb\u5f00\u4f5c\u7528\u57df\u540e\u5c31\u88ab\u81ea\u52a8\u91ca\u653e \u3002\u4e0b\u9762\u662f\u4f5c\u7528\u57df\u4f8b\u5b50\u7684\u4e00\u4e2a\u4f7f\u7528 String \u800c\u4e0d\u662f\u5b57\u7b26\u4e32\u5b57\u9762\u503c\u7684\u7248\u672c\uff1a { let s = String :: from ( \"hello\" ); // \u4ece\u6b64\u5904\u8d77\uff0cs \u662f\u6709\u6548\u7684 // \u4f7f\u7528 s println! ( \"s is {s}\" ) } // \u6b64\u4f5c\u7528\u57df\u5df2\u7ed3\u675f\uff0c // s \u4e0d\u518d\u6709\u6548 \u5f53\u53d8\u91cf\u79bb\u5f00\u4f5c\u7528\u57df\uff0cRust \u4e3a\u6211\u4eec\u8c03\u7528\u4e00\u4e2a\u7279\u6b8a\u7684\u51fd\u6570\u3002\u8fd9\u4e2a\u51fd\u6570\u53eb\u505a drop \uff0cRust \u5728\u7ed3\u5c3e\u7684 } \u5904\u81ea\u52a8\u8c03\u7528 drop \u3002","title":"\u5185\u5b58\u4e0e\u5206\u914d"},{"location":"ownership/#_6","text":"\u591a\u4e2a\u53d8\u91cf\u53ef\u4ee5\u91c7\u53d6\u4e0d\u540c\u7684\u65b9\u5f0f\u4e0e\u540c\u4e00\u6570\u636e\u8fdb\u884c\u4ea4\u4e92\u3002 fn main () { let x = 5 ; let y = x ; // \u5c06\u53d8\u91cf x \u7684\u6574\u6570\u503c\u8d4b\u7ed9 y } \u201c\u5c06 5 \u7ed1\u5b9a\u5230 x\uff1b\u63a5\u7740\u751f\u6210\u4e00\u4e2a\u503c x \u7684\u62f7\u8d1d\u5e76\u7ed1\u5b9a\u5230 y\u201d\u3002 \u73b0\u5728\u6709\u4e86\u4e24\u4e2a\u53d8\u91cf\uff0cx \u548c y\uff0c\u90fd\u7b49\u4e8e 5\u3002\u8fd9\u4e5f\u6b63\u662f\u4e8b\u5b9e\u4e0a\u53d1\u751f\u4e86\u7684\uff0c\u56e0\u4e3a\u6574\u6570\u662f\u6709 \u5df2\u77e5\u56fa\u5b9a\u5927\u5c0f \u7684\u7b80\u5355\u503c\uff0c\u6240\u4ee5\u8fd9 \u4e24\u4e2a 5 \u88ab\u653e\u5165\u4e86\u6808\u4e2d \u3002 String \u7248\u672c\uff1a let s1 = String :: from ( \"hello\" ); let s2 = s1 ; // \u5f53\u6211\u4eec\u5c06 s1 \u8d4b\u503c\u7ed9 s2\uff0cString \u7684\u6570\u636e\u88ab\u590d\u5236\u4e86\uff0c\u8fd9\u610f\u5473\u7740\u6211\u4eec\u4ece\u6808\u4e0a\u62f7\u8d1d\u4e86\u5b83\u7684\u6307\u9488\u3001\u957f\u5ea6\u548c\u5bb9\u91cf\u3002 // Rust\u5e76\u6ca1\u6709\u590d\u5236\u6307\u9488\u6307\u5411\u7684\u5806\u4e0a\u6570\u636e\u3002 // \u5982\u679c Rust \u4e5f\u62f7\u8d1d\u4e86\u5806\u4e0a\u7684\u6570\u636e\uff0c\u90a3\u4e48\u64cd\u4f5c s2 = s1 \u5728\u5806\u4e0a\u6570\u636e\u6bd4\u8f83\u5927\u7684\u65f6\u5019\u4f1a\u5bf9\u8fd0\u884c\u65f6\u6027\u80fd\u9020\u6210\u975e\u5e38\u5927\u7684\u5f71\u54cd\u3002 \u8fc7\u5f53\u53d8\u91cf\u79bb\u5f00\u4f5c\u7528\u57df\u540e\uff0cRust \u81ea\u52a8\u8c03\u7528 drop \u51fd\u6570\u5e76\u6e05\u7406\u53d8\u91cf\u7684\u5806\u5185\u5b58\u3002\u4e0d\u8fc7\u4e24\u4e2a\u6570\u636e\u6307\u9488\u6307\u5411\u4e86\u540c\u4e00\u4f4d\u7f6e\u3002 \u8fd9\u5c31\u6709\u4e86\u4e00\u4e2a\u95ee\u9898\uff1a\u5f53 s2 \u548c s1 \u79bb\u5f00\u4f5c\u7528\u57df\uff0c\u4ed6\u4eec\u90fd\u4f1a\u5c1d\u8bd5\u91ca\u653e\u76f8\u540c\u7684\u5185\u5b58\u3002 \u8fd9\u662f\u4e00\u4e2a\u53eb\u505a \u4e8c\u6b21\u91ca\u653e \uff08double free\uff09\u7684\u9519\u8bef\uff0c\u4e5f\u662f\u4e4b\u524d\u63d0\u5230\u8fc7\u7684\u5185\u5b58\u5b89\u5168\u6027 bug \u4e4b\u4e00\u3002 \u4e24\u6b21\u91ca\u653e \uff08\u76f8\u540c\uff09\u5185\u5b58\u4f1a\u5bfc\u81f4\u5185\u5b58\u6c61\u67d3\uff0c\u5b83\u53ef\u80fd\u4f1a\u5bfc\u81f4\u6f5c\u5728\u7684\u5b89\u5168\u6f0f\u6d1e\u3002 \u4e3a\u4e86\u786e\u4fdd\u5185\u5b58\u5b89\u5168\uff0c\u5728 let s2 = s1 \u4e4b\u540e\uff0cRust \u8ba4\u4e3a s1 \u4e0d\u518d\u6709\u6548\uff0c\u56e0\u6b64 Rust \u4e0d\u9700\u8981\u5728 s1 \u79bb\u5f00\u4f5c\u7528\u57df\u540e\u6e05\u7406\u4efb\u4f55\u4e1c\u897f\u3002 \u5728 s2 \u88ab\u521b\u5efa\u4e4b\u540e\u5c1d\u8bd5\u4f7f\u7528 s1 \u4f1a\u53d1\u751f\u4ec0\u4e48\uff1b\u8fd9\u6bb5\u4ee3\u7801\u4e0d\u80fd\u8fd0\u884c\uff1a let s1 = String :: from ( \"hello\" ); let s2 = s1 ; println! ( \"{}, world!\" , s1 ); // \u4f1a\u5f97\u5230\u4e00\u4e2a\u9519\u8bef: value borrowed here after move // \u56e0\u4e3a Rust \u7981\u6b62\u4f7f\u7528\u65e0\u6548\u7684\u5f15\u7528\u3002 \u5982\u679c\u5728\u5176\u4ed6\u8bed\u8a00\u4e2d\u542c\u8bf4\u8fc7\u672f\u8bed \u6d45\u62f7\u8d1d \uff08shallow copy\uff09\u548c \u6df1\u62f7\u8d1d \uff08deep copy\uff09\uff0c\u90a3\u4e48\u62f7\u8d1d\u6307\u9488\u3001\u957f\u5ea6\u548c\u5bb9\u91cf\u800c\u4e0d\u62f7\u8d1d\u6570\u636e\u53ef\u80fd\u542c\u8d77\u6765\u50cf\u6d45\u62f7\u8d1d\u3002\u4e0d\u8fc7\u56e0\u4e3a Rust \u540c\u65f6\u4f7f\u7b2c\u4e00\u4e2a\u53d8\u91cf\u65e0\u6548\u4e86\uff0c\u8fd9\u4e2a\u64cd\u4f5c\u88ab\u79f0\u4e3a \u79fb\u52a8 \uff08move\uff09\uff0c\u800c\u4e0d\u662f\u6d45\u62f7\u8d1d\u3002\u4e0a\u9762\u7684\u4f8b\u5b50\u53ef\u4ee5\u89e3\u8bfb\u4e3a s1 \u88ab \u79fb\u52a8 \u5230\u4e86 s2 \u4e2d\u3002 \u8fd9\u6837\u5c31\u89e3\u51b3\u4e86\u4e8c\u6b21\u91ca\u653e\u7684\u95ee\u9898\uff01\u56e0\u4e3a\u53ea\u6709 s2 \u662f\u6709\u6548\u7684\uff0c\u5f53\u5176\u79bb\u5f00\u4f5c\u7528\u57df\uff0c\u5b83\u5c31\u91ca\u653e\u4e86\u81ea\u5df1\u7684\u5185\u5b58\u3002 \u8fd9\u91cc\u8fd8\u9690\u542b\u4e86\u4e00\u4e2a\u8bbe\u8ba1\u9009\u62e9\uff1a Rust \u6c38\u8fdc\u4e5f\u4e0d\u4f1a\u81ea\u52a8\u521b\u5efa\u6570\u636e\u7684 \u201c\u6df1\u62f7\u8d1d\u201d \u3002\u56e0\u6b64\uff0c\u4efb\u4f55 \u81ea\u52a8 \u7684\u590d\u5236\u53ef\u4ee5\u88ab\u8ba4\u4e3a\u5bf9\u8fd0\u884c\u65f6\u6027\u80fd\u5f71\u54cd\u8f83\u5c0f\u3002","title":"\u6570\u636e\u4ea4\u4e92\uff1a\u79fb\u52a8"},{"location":"ownership/#_7","text":"\u5982\u679c \u786e\u5b9e \u9700\u8981\u6df1\u5ea6\u590d\u5236 String \u4e2d\u5806\u4e0a\u7684\u6570\u636e\uff0c\u800c\u4e0d\u4ec5\u4ec5\u662f\u6808\u4e0a\u7684\u6570\u636e\uff0c\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a\u53eb\u505a clone \u7684\u901a\u7528\u51fd\u6570\u3002 let s1 = String :: from ( \"hello\" ); let s2 = s1 . clone (); println! ( \"s1 = {}, s2 = {}\" , s1 , s2 ); \u8fd9\u6bb5\u4ee3\u7801\u80fd\u6b63\u5e38\u8fd0\u884c\uff0c\u8fd9\u91cc\u5806\u4e0a\u7684\u6570\u636e \u786e\u5b9e \u88ab\u590d\u5236\u4e86\u3002 \u5f53\u51fa\u73b0 clone \u8c03\u7528\u65f6\uff0c\u4f60\u77e5\u9053\u4e00\u4e9b\u7279\u5b9a\u7684\u4ee3\u7801\u88ab\u6267\u884c\u800c\u4e14\u8fd9\u4e9b\u4ee3\u7801\u53ef\u80fd\u76f8\u5f53\u6d88\u8017\u8d44\u6e90\u3002","title":"\u6570\u636e\u4ea4\u4e92\uff1a\u514b\u9686"},{"location":"ownership/#_8","text":"\u8fd9\u91cc\u8fd8\u6709\u4e00\u4e2a\u6ca1\u6709\u63d0\u5230\u7684\u5c0f\u7a8d\u95e8\u3002\u8fd9\u4e9b\u4ee3\u7801\u4f7f\u7528\u4e86\u6574\u578b\u5e76\u4e14\u662f\u6709\u6548\u7684! let x = 5 ; let y = x ; println! ( \"x = {}, y = {}\" , x , y ); \u4f46\u8fd9\u6bb5\u4ee3\u7801\u4f3c\u4e4e\u4e0e\u521a\u521a\u5b66\u5230\u7684\u5185\u5bb9\u76f8\u77db\u76fe\uff1a\u6ca1\u6709\u8c03\u7528 clone\uff0c\u4e0d\u8fc7 x \u4f9d\u7136\u6709\u6548\u4e14\u6ca1\u6709\u88ab\u79fb\u52a8\u5230 y \u4e2d\u3002 \u539f\u56e0\u662f\u50cf\u6574\u578b\u8fd9\u6837\u7684\u5728\u7f16\u8bd1\u65f6\u5df2\u77e5\u5927\u5c0f\u7684\u7c7b\u578b\u88ab\u6574\u4e2a\u5b58\u50a8\u5728\u6808\u4e0a\uff0c\u6240\u4ee5\u62f7\u8d1d\u5176\u5b9e\u9645\u7684\u503c\u662f\u5feb\u901f\u7684\u3002\u8fd9\u610f\u5473\u7740\u6ca1\u6709\u7406\u7531\u5728\u521b\u5efa\u53d8\u91cf y \u540e\u4f7f x \u65e0\u6548\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c \u8fd9\u91cc\u6ca1\u6709\u6df1\u6d45\u62f7\u8d1d\u7684\u533a\u522b \uff0c\u6240\u4ee5\u8fd9\u91cc\u8c03\u7528 clone \u5e76\u4e0d\u4f1a\u4e0e\u901a\u5e38\u7684\u6d45\u62f7\u8d1d\u6709\u4ec0\u4e48\u4e0d\u540c\uff0c\u6211\u4eec\u53ef\u4ee5\u4e0d\u7528\u7ba1\u5b83\u3002 Rust \u6709\u4e00\u4e2a\u53eb\u505a Copy trait \u7684\u7279\u6b8a\u6ce8\u89e3\uff0c\u53ef\u4ee5\u7528\u5728\u7c7b\u4f3c\u6574\u578b\u8fd9\u6837\u7684\u5b58\u50a8\u5728\u6808\u4e0a\u7684\u7c7b\u578b\u4e0a\uff08 \u7b2c\u5341\u7ae0 \u5c06\u4f1a\u8be6\u7ec6\u8bb2\u89e3 trait\uff09\u3002\u5982\u679c\u4e00\u4e2a\u7c7b\u578b\u5b9e\u73b0\u4e86 Copy trait \uff0c\u90a3\u4e48\u4e00\u4e2a\u65e7\u7684\u53d8\u91cf\u5728\u5c06\u5176\u8d4b\u503c\u7ed9\u5176\u4ed6\u53d8\u91cf\u540e\u4ecd\u7136\u53ef\u7528\u3002 Rust \u4e0d\u5141\u8bb8\u81ea\u8eab\u6216\u5176\u4efb\u4f55\u90e8\u5206\u5b9e\u73b0\u4e86 Drop trait \u7684\u7c7b\u578b\u4f7f\u7528 Copy trait \u3002\u5982\u679c\u6211\u4eec\u5bf9\u5176\u503c\u79bb\u5f00\u4f5c\u7528\u57df\u65f6\u9700\u8981\u7279\u6b8a\u5904\u7406\u7684\u7c7b\u578b\u4f7f\u7528 Copy \u6ce8\u89e3\uff0c\u5c06\u4f1a\u51fa\u73b0\u4e00\u4e2a\u7f16\u8bd1\u65f6\u9519\u8bef\u3002\u8981\u5b66\u4e60\u5982\u4f55\u4e3a\u4f60\u7684\u7c7b\u578b\u6dfb\u52a0 Copy \u6ce8\u89e3\u4ee5\u5b9e\u73b0\u8be5 trait\uff0c\u8bf7\u9605\u8bfb \u9644\u5f55 C \u4e2d\u7684 \u201c\u53ef\u6d3e\u751f\u7684 trait\u201d \u3002 \u90a3\u4e48\u54ea\u4e9b\u7c7b\u578b\u5b9e\u73b0\u4e86 Copy trait \u5462\uff1f\u53ef\u4ee5\u67e5\u770b\u7ed9\u5b9a\u7c7b\u578b\u7684\u6587\u6863\u6765\u786e\u8ba4\uff0c\u4e0d\u8fc7\u4f5c\u4e3a\u4e00\u4e2a\u901a\u7528\u7684\u89c4\u5219\uff0c\u4efb\u4f55\u4e00\u7ec4\u7b80\u5355\u6807\u91cf\u503c\u7684\u7ec4\u5408\u90fd\u53ef\u4ee5\u5b9e\u73b0 Copy\uff0c\u4efb\u4f55\u4e0d\u9700\u8981\u5206\u914d\u5185\u5b58\u6216\u67d0\u79cd\u5f62\u5f0f\u8d44\u6e90\u7684\u7c7b\u578b\u90fd\u53ef\u4ee5\u5b9e\u73b0 Copy \u3002\u5982\u4e0b\u662f\u4e00\u4e9b Copy \u7684\u7c7b\u578b\uff1a \u6240\u6709\u6574\u6570\u7c7b\u578b\uff0c\u6bd4\u5982 u32\u3002 \u5e03\u5c14\u7c7b\u578b\uff0cbool\uff0c\u5b83\u7684\u503c\u662f true \u548c false\u3002 \u6240\u6709\u6d6e\u70b9\u6570\u7c7b\u578b\uff0c\u6bd4\u5982 f64\u3002 \u5b57\u7b26\u7c7b\u578b\uff0cchar\u3002 \u5143\u7ec4\uff0c\u5f53\u4e14\u4ec5\u5f53\u5176\u5305\u542b\u7684\u7c7b\u578b\u4e5f\u90fd\u5b9e\u73b0 Copy \u7684\u65f6\u5019\u3002\u6bd4\u5982\uff0c(i32, i32) \u5b9e\u73b0\u4e86 Copy\uff0c\u4f46 (i32, String) \u5c31\u6ca1\u6709\u3002","title":"\u62f7\u8d1d"},{"location":"ownership/#_9","text":"\u5c06\u503c\u4f20\u9012\u7ed9\u51fd\u6570\u4e0e\u7ed9\u53d8\u91cf\u8d4b\u503c\u7684\u539f\u7406\u76f8\u4f3c\u3002\u5411\u51fd\u6570\u4f20\u9012\u503c\u53ef\u80fd\u4f1a\u79fb\u52a8\u6216\u8005\u590d\u5236\uff0c\u5c31\u50cf\u8d4b\u503c\u8bed\u53e5\u4e00\u6837\u3002 fn main () { let s = String :: from ( \"hello\" ); // s \u8fdb\u5165\u4f5c\u7528\u57df takes_ownership ( s ); // s \u7684\u503c\u79fb\u52a8\u5230\u51fd\u6570\u91cc ... // ... \u6240\u4ee5\u5230\u8fd9\u91cc\u4e0d\u518d\u6709\u6548 let x = 5 ; // x \u8fdb\u5165\u4f5c\u7528\u57df makes_copy ( x ); // x \u5e94\u8be5\u79fb\u52a8\u51fd\u6570\u91cc\uff0c // \u4f46 i32 \u662f Copy \u7684\uff0c // \u6240\u4ee5\u5728\u540e\u9762\u53ef\u7ee7\u7eed\u4f7f\u7528 x } // \u8fd9\u91cc, x \u5148\u79fb\u51fa\u4e86\u4f5c\u7528\u57df\uff0c\u7136\u540e\u662f s\u3002\u4f46\u56e0\u4e3a s \u7684\u503c\u5df2\u88ab\u79fb\u8d70\uff0c // \u6ca1\u6709\u7279\u6b8a\u4e4b\u5904 fn takes_ownership ( some_string : String ) { // some_string \u8fdb\u5165\u4f5c\u7528\u57df println! ( \"{}\" , some_string ); } // \u8fd9\u91cc\uff0csome_string \u79fb\u51fa\u4f5c\u7528\u57df\u5e76\u8c03\u7528 `drop` \u65b9\u6cd5\u3002 // \u5360\u7528\u7684\u5185\u5b58\u88ab\u91ca\u653e fn makes_copy ( some_integer : i32 ) { // some_integer \u8fdb\u5165\u4f5c\u7528\u57df println! ( \"{}\" , some_integer ); } // \u8fd9\u91cc\uff0csome_integer \u79fb\u51fa\u4f5c\u7528\u57df\u3002\u6ca1\u6709\u7279\u6b8a\u4e4b\u5904 \u5f53\u5c1d\u8bd5\u5728\u8c03\u7528 takes_ownership \u540e\u4f7f\u7528 s \u65f6\uff0cRust \u4f1a\u629b\u51fa\u4e00\u4e2a\u7f16\u8bd1\u65f6\u9519\u8bef\u3002\u8fd9\u4e9b\u9759\u6001\u68c0\u67e5\u4f7f\u6211\u4eec\u514d\u4e8e\u72af\u9519\u3002 \u8bd5\u8bd5\u5728 main \u51fd\u6570\u4e2d\u6dfb\u52a0\u4f7f\u7528 s \u548c x \u7684\u4ee3\u7801\u6765\u770b\u770b\u54ea\u91cc\u80fd\u4f7f\u7528\u4ed6\u4eec\uff0c\u4ee5\u53ca\u6240\u6709\u6743\u89c4\u5219\u4f1a\u5728\u54ea\u91cc\u963b\u6b62\u6211\u4eec\u8fd9\u4e48\u505a\u3002","title":"\u6240\u6709\u6743\u4e0e\u51fd\u6570"},{"location":"ownership/#_10","text":"\u8fd4\u56de\u503c\u4e5f\u53ef\u4ee5\u8f6c\u79fb\u6240\u6709\u6743\u3002 ffn main () { let s1 = gives_ownership (); // gives_ownership \u5c06\u8fd4\u56de\u503c // \u8f6c\u79fb\u7ed9 s1 let s2 = String :: from ( \"hello\" ); // s2 \u8fdb\u5165\u4f5c\u7528\u57df let s3 = takes_and_gives_back ( s2 ); // s2 \u88ab\u79fb\u52a8\u5230 // takes_and_gives_back \u4e2d, // \u5b83\u4e5f\u5c06\u8fd4\u56de\u503c\u79fb\u7ed9 s3 } // \u8fd9\u91cc, s3 \u79fb\u51fa\u4f5c\u7528\u57df\u5e76\u88ab\u4e22\u5f03\u3002s2 \u4e5f\u79fb\u51fa\u4f5c\u7528\u57df\uff0c\u4f46\u5df2\u88ab\u79fb\u8d70\uff0c // \u6240\u4ee5\u4ec0\u4e48\u4e5f\u4e0d\u4f1a\u53d1\u751f\u3002s1 \u79bb\u5f00\u4f5c\u7528\u57df\u5e76\u88ab\u4e22\u5f03 fn gives_ownership () -> String { // gives_ownership \u4f1a\u5c06 // \u8fd4\u56de\u503c\u79fb\u52a8\u7ed9 // \u8c03\u7528\u5b83\u7684\u51fd\u6570 let some_string = String :: from ( \"yours\" ); // some_string \u8fdb\u5165\u4f5c\u7528\u57df. some_string // \u8fd4\u56de some_string // \u5e76\u79fb\u51fa\u7ed9\u8c03\u7528\u7684\u51fd\u6570 // } // takes_and_gives_back \u5c06\u4f20\u5165\u5b57\u7b26\u4e32\u5e76\u8fd4\u56de\u8be5\u503c fn takes_and_gives_back ( a_string : String ) -> String { // a_string \u8fdb\u5165\u4f5c\u7528\u57df // a_string // \u8fd4\u56de a_string \u5e76\u79fb\u51fa\u7ed9\u8c03\u7528\u7684\u51fd\u6570 } \u53d8\u91cf\u7684\u6240\u6709\u6743\u603b\u662f\u9075\u5faa\u76f8\u540c\u7684\u6a21\u5f0f\uff1a \u5c06\u503c\u8d4b\u7ed9\u53e6\u4e00\u4e2a\u53d8\u91cf\u65f6\u79fb\u52a8\u5b83\u3002\u5f53\u6301\u6709\u5806\u4e2d\u6570\u636e\u503c\u7684\u53d8\u91cf\u79bb\u5f00\u4f5c\u7528\u57df\u65f6\uff0c\u5176\u503c\u5c06\u901a\u8fc7 drop \u88ab\u6e05\u7406\u6389\uff0c\u9664\u975e\u6570\u636e\u88ab\u79fb\u52a8\u4e3a\u53e6\u4e00\u4e2a\u53d8\u91cf\u6240\u6709\u3002 \u867d\u7136\u8fd9\u6837\u662f\u53ef\u4ee5\u7684\uff0c\u4f46\u662f\u5728\u6bcf\u4e00\u4e2a\u51fd\u6570\u4e2d\u90fd\u83b7\u53d6\u6240\u6709\u6743\u5e76\u63a5\u7740\u8fd4\u56de\u6240\u6709\u6743\u6709\u4e9b\u5570\u55e6\u3002\u5982\u679c\u6211\u4eec\u60f3\u8981\u51fd\u6570\u4f7f\u7528\u4e00\u4e2a\u503c\u4f46\u4e0d\u83b7\u53d6\u6240\u6709\u6743\u8be5\u600e\u4e48\u529e\u5462\uff1f\u5982\u679c\u6211\u4eec\u8fd8\u8981\u63a5\u7740\u4f7f\u7528\u5b83\u7684\u8bdd\uff0c\u6bcf\u6b21\u90fd\u4f20\u8fdb\u53bb\u518d\u8fd4\u56de\u6765\u5c31\u6709\u70b9\u70e6\u4eba\u4e86\uff0c\u9664\u6b64\u4e4b\u5916\uff0c\u6211\u4eec\u4e5f\u53ef\u80fd\u60f3\u8fd4\u56de\u51fd\u6570\u4f53\u4e2d\u4ea7\u751f\u7684\u4e00\u4e9b\u6570\u636e\u3002 \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u5143\u7ec4\u6765\u8fd4\u56de\u591a\u4e2a\u503c\uff0c\u793a\u4f8b\uff1a fn main () { let s1 = String :: from ( \"hello\" ); let ( s2 , len ) = calculate_length ( s1 ); println! ( \"The length of '{}' is {}.\" , s2 , len ); } fn calculate_length ( s : String ) -> ( String , usize ) { let length = s . len (); // len() \u8fd4\u56de\u5b57\u7b26\u4e32\u7684\u957f\u5ea6 ( s , length ) } \u4f46\u662f\u8fd9\u672a\u514d\u6709\u4e9b\u5f62\u5f0f\u4e3b\u4e49\uff0c\u800c\u4e14\u8fd9\u79cd\u573a\u666f\u5e94\u8be5\u5f88\u5e38\u89c1\u3002\u5e78\u8fd0\u7684\u662f\uff0cRust \u5bf9\u6b64\u63d0\u4f9b\u4e86\u4e00\u4e2a\u4e0d\u7528\u83b7\u53d6\u6240\u6709\u6743\u5c31\u53ef\u4ee5\u4f7f\u7528\u503c\u7684\u529f\u80fd\uff0c\u53eb\u505a \u5f15\u7528 \uff08references\uff09\u3002","title":"\u8fd4\u56de\u503c\u4e0e\u4f5c\u7528\u57df"},{"location":"ownership/#_11","text":"\u4ee5\u63d0\u4f9b\u4e00\u4e2a String \u503c\u7684\u5f15\u7528\uff08reference\uff09\u3002 \u5f15\u7528 \uff08reference\uff09\u50cf\u4e00\u4e2a\u6307\u9488\uff0c\u56e0\u4e3a\u5b83\u662f\u4e00\u4e2a\u5730\u5740\uff0c\u6211\u4eec\u53ef\u4ee5\u7531\u6b64\u8bbf\u95ee\u50a8\u5b58\u4e8e\u8be5\u5730\u5740\u7684\u5c5e\u4e8e\u5176\u4ed6\u53d8\u91cf\u7684\u6570\u636e\u3002 \u4e0e\u6307\u9488\u4e0d\u540c\uff0c \u5f15\u7528\u786e\u4fdd\u6307\u5411\u67d0\u4e2a\u7279\u5b9a\u7c7b\u578b\u7684\u6709\u6548\u503c \u3002 fn main () { let s1 = String :: from ( \"hello\" ); // \u4f20\u9012 &s1 \u7ed9 calculate_length // \u8fd9\u4e9b & \u7b26\u53f7\u5c31\u662f \u5f15\u7528\uff0c\u5b83\u4eec\u5141\u8bb8\u4f60\u4f7f\u7528\u503c\u4f46\u4e0d\u83b7\u53d6\u5176\u6240\u6709\u6743\u3002 // &s1 \u8bed\u6cd5\u8ba9\u6211\u4eec\u521b\u5efa\u4e00\u4e2a \u6307\u5411 \u503c s1 \u7684\u5f15\u7528\uff0c\u4f46\u662f\u5e76\u4e0d\u62e5\u6709\u5b83\u3002 // \u56e0\u4e3a\u5e76\u4e0d\u62e5\u6709\u8fd9\u4e2a\u503c\uff0c\u6240\u4ee5\u5f53\u5f15\u7528\u505c\u6b62\u4f7f\u7528\u65f6\uff0c\u5b83\u6240\u6307\u5411\u7684\u503c\u4e5f\u4e0d\u4f1a\u88ab\u4e22\u5f03\u3002 let len = calculate_length ( & s1 ); println! ( \"The length of '{}' is {}.\" , s1 , len ); } // \u51fd\u6570\u7b7e\u540d\u4f7f\u7528 & \u6765\u8868\u660e\u53c2\u6570 s \u7684\u7c7b\u578b\u662f\u4e00\u4e2a\u5f15\u7528\u3002 fn calculate_length ( s : & String ) -> usize { // s\u662fString\u7684\u5f15\u7528 s . len () } // \u8fd9\u91cc\uff0cs \u79bb\u5f00\u4e86\u4f5c\u7528\u57df\u3002\u4f46\u56e0\u4e3a\u5b83\u5e76\u4e0d\u62e5\u6709\u5f15\u7528\u503c\u7684\u6240\u6709\u6743\uff0c // \u6240\u4ee5\u4ec0\u4e48\u4e5f\u4e0d\u4f1a\u53d1\u751f (Rust \u4e0d\u4f1a\u8c03\u7528drop) \u5f53\u51fd\u6570\u4f7f\u7528\u5f15\u7528\u800c\u4e0d\u662f\u5b9e\u9645\u503c\u4f5c\u4e3a\u53c2\u6570\uff0c\u65e0\u9700\u8fd4\u56de\u503c\u6765\u4ea4\u8fd8\u6240\u6709\u6743\uff0c\u56e0\u4e3a\u5c31\u4e0d\u66fe\u62e5\u6709\u6240\u6709\u6743\u3002 \u5c06\u521b\u5efa\u4e00\u4e2a\u5f15\u7528\u7684\u884c\u4e3a\u79f0\u4e3a \u501f\u7528 \uff08borrowing\uff09\u3002\u6b63\u5982\u73b0\u5b9e\u751f\u6d3b\u4e2d\uff0c\u5982\u679c\u4e00\u4e2a\u4eba\u62e5\u6709\u67d0\u6837\u4e1c\u897f\uff0c\u4f60\u53ef\u4ee5\u4ece\u4ed6\u90a3\u91cc\u501f\u6765\u3002\u5f53\u4f60\u4f7f\u7528\u5b8c\u6bd5\uff0c\u5fc5\u987b\u8fd8\u56de\u53bb\u3002 \u6b63\u5982\u53d8\u91cf\u9ed8\u8ba4\u662f\u4e0d\u53ef\u53d8\u7684\uff0c\u5f15\u7528\u4e5f\u4e00\u6837\u3002\uff08\u9ed8\u8ba4\uff09\u4e0d\u5141\u8bb8\u4fee\u6539 \u5f15\u7528 \u7684\u503c\u3002","title":"\u5f15\u7528\u4e0e\u501f\u7528"},{"location":"ownership/#_12","text":"\u5141\u8bb8\u6211\u4eec\u4fee\u6539\u4e00\u4e2a\u501f\u7528\u7684\u503c\uff0c\u8fd9\u5c31\u662f \u53ef\u53d8\u5f15\u7528 \uff08mutable reference\uff09 fn main () { let mut s = String :: from ( \"hello\" ); // \u5fc5\u987b\u5c06 s \u6539\u4e3a mut\uff0c \u58f0\u660e\u53ef\u53d8 change ( & mut s ); // \u4f20\u5165\u53ef\u53d8\u5f15\u7528 } // \u58f0\u660e\u53ef\u53d8\u5f15\u7528 fn change ( some_string : & mut String ) { some_string . push_str ( \", world\" ); // \u56e0\u4e3a\u53ef\u53d8\uff0c\u6240\u4ee5\u53ef\u4ee5\u66f4\u6539\u3002 } \u53ef\u53d8\u5f15\u7528\u6709\u4e00\u4e2a\u5f88\u5927\u7684\u9650\u5236\uff1a \u5982\u679c\u4f60\u6709\u4e00\u4e2a\u5bf9\u8be5\u53d8\u91cf\u7684\u53ef\u53d8\u5f15\u7528\uff0c\u4f60\u5c31\u4e0d\u80fd\u518d\u521b\u5efa\u5bf9\u8be5\u53d8\u91cf\u7684\u5f15\u7528 \u3002\u8fd9\u4e9b\u5c1d\u8bd5\u521b\u5efa\u4e24\u4e2a s \u7684\u53ef\u53d8\u5f15\u7528\u7684\u4ee3\u7801\u4f1a\u5931\u8d25\uff1a let mut s = String :: from ( \"hello\" ); let r1 = & mut s ; // \u6709\u4e00\u4e2a\u4e86 let r2 = & mut s ; // \u7b2c\u4e8c\u4e2a\u5c06\u4f1a\u62a5\u9519\u3002 println! ( \"{}, {}\" , r1 , r2 ); \u62a5\u9519\u5982\u4e0b: $ cargo run Compiling ownership v0 . 1.0 ( file : ///projects/ownership) error [ E0499 ] : cannot borrow ` s ` as mutable more than once at a time - -> src / main . rs : 5 : 14 | 4 | let r1 = & mut s ; | ------ first mutable borrow occurs here 5 | let r2 = & mut s ; | ^^^^^^ second mutable borrow occurs here 6 | 7 | println! ( \"{}, {}\" , r1 , r2 ); | -- first borrow later used here For more information about this error , try ` rustc -- explain E0499 ` . error : could not compile ` ownership ` due to previous error \u8fd9\u4e00\u9650\u5236\u4ee5\u4e00\u79cd\u975e\u5e38\u5c0f\u5fc3\u8c28\u614e\u7684\u65b9\u5f0f\u5141\u8bb8\u53ef\u53d8\u6027\uff0c \u9632\u6b62\u540c\u4e00\u65f6\u95f4\u5bf9\u540c\u4e00\u6570\u636e\u5b58\u5728\u591a\u4e2a\u53ef\u53d8\u5f15\u7528 \u3002\u65b0 Rustacean \u4eec\u7ecf\u5e38\u96be\u4ee5\u9002\u5e94\u8fd9\u4e00\u70b9\uff0c\u56e0\u4e3a\u5927\u90e8\u5206\u8bed\u8a00\u4e2d\u53d8\u91cf\u4efb\u4f55\u65f6\u5019\u90fd\u662f\u53ef\u53d8\u7684\u3002\u8fd9\u4e2a\u9650\u5236\u7684\u597d\u5904\u662f Rust \u53ef\u4ee5\u5728\u7f16\u8bd1\u65f6\u5c31\u907f\u514d\u6570\u636e\u7ade\u4e89\u3002 \u6570\u636e\u7ade\u4e89 \uff08data race\uff09\u7c7b\u4f3c\u4e8e\u7ade\u6001\u6761\u4ef6\uff0c\u5b83\u53ef\u7531\u8fd9\u4e09\u4e2a\u884c\u4e3a\u9020\u6210\uff1a \u4e24\u4e2a\u6216\u66f4\u591a\u6307\u9488\u540c\u65f6\u8bbf\u95ee\u540c\u4e00\u6570\u636e\u3002 \u81f3\u5c11\u6709\u4e00\u4e2a\u6307\u9488\u88ab\u7528\u6765\u5199\u5165\u6570\u636e\u3002 \u6ca1\u6709\u540c\u6b65\u6570\u636e\u8bbf\u95ee\u7684\u673a\u5236\u3002 \u6570\u636e\u7ade\u4e89\u4f1a\u5bfc\u81f4\u672a\u5b9a\u4e49\u884c\u4e3a\uff0c\u96be\u4ee5\u5728\u8fd0\u884c\u65f6\u8ffd\u8e2a\uff0c\u5e76\u4e14\u96be\u4ee5\u8bca\u65ad\u548c\u4fee\u590d\uff1bRust \u907f\u514d\u4e86\u8fd9\u79cd\u60c5\u51b5\u7684\u53d1\u751f\uff0c\u56e0\u4e3a\u5b83\u751a\u81f3\u4e0d\u4f1a\u7f16\u8bd1\u5b58\u5728\u6570\u636e\u7ade\u4e89\u7684\u4ee3\u7801\uff01 \u4e00\u5982\u65e2\u5f80\uff0c\u53ef\u4ee5\u4f7f\u7528\u5927\u62ec\u53f7\u6765\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u4f5c\u7528\u57df\uff0c\u4ee5\u5141\u8bb8\u62e5\u6709\u591a\u4e2a\u53ef\u53d8\u5f15\u7528\uff0c\u53ea\u662f\u4e0d\u80fd \u540c\u65f6 \u62e5\u6709\uff1a fn main () { let mut s = String :: from ( \"hello\" ); { let r1 = & mut s ; } // r1 \u5728\u8fd9\u91cc\u79bb\u5f00\u4e86\u4f5c\u7528\u57df\uff0c\u6240\u4ee5\u6211\u4eec\u5b8c\u5168\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u5f15\u7528 let r2 = & mut s ; } Rust \u5728\u540c\u65f6\u4f7f\u7528\u53ef\u53d8\u4e0e\u4e0d\u53ef\u53d8\u5f15\u7528\u65f6\u4e5f\u91c7\u7528\u7684\u7c7b\u4f3c\u7684\u89c4\u5219\u3002\u8fd9\u4e9b\u4ee3\u7801\u4f1a\u5bfc\u81f4\u4e00\u4e2a\u9519\u8bef\uff1a let mut s = String :: from ( \"hello\" ); let r1 = & s ; // \u6ca1\u95ee\u9898 let r2 = & s ; // \u6ca1\u95ee\u9898 let r3 = & mut s ; // \u5927\u95ee\u9898 println! ( \"{}, {}, and {}\" , r1 , r2 , r3 ); // \u4f7f\u7528\u4e0d\u53ef\u53d8\u5f15\u7528\u65f6\uff0c\u540c\u65f6\u53c8\u4f7f\u7528\u4e86\u53ef\u53d8\u5f15\u7528\u3002 \u9519\u8bef\u5982\u4e0b\uff1a $ cargo run Compiling ownership v0 . 1.0 ( file : ///projects/ownership) error [ E0502 ] : cannot borrow ` s ` as mutable because it is also borrowed as immutable - -> src / main . rs : 6 : 14 | 4 | let r1 = & s ; // no problem | -- immutable borrow occurs here 5 | let r2 = & s ; // no problem 6 | let r3 = & mut s ; // BIG PROBLEM | ^^^^^^ mutable borrow occurs here 7 | 8 | println! ( \"{}, {}, and {}\" , r1 , r2 , r3 ); | -- immutable borrow later used here For more information about this error , try ` rustc -- explain E0502 ` . error : could not compile ` ownership ` due to previous error \u54c7\u54e6\uff01\u6211\u4eec \u4e5f \u4e0d\u80fd\u5728\u62e5\u6709\u4e0d\u53ef\u53d8\u5f15\u7528\u7684\u540c\u65f6\u62e5\u6709\u53ef\u53d8\u5f15\u7528\u3002 \u6ce8\u610f \u4e00\u4e2a\u5f15\u7528\u7684\u4f5c\u7528\u57df\u4ece\u58f0\u660e\u7684\u5730\u65b9\u5f00\u59cb\u4e00\u76f4\u6301\u7eed\u5230\u6700\u540e\u4e00\u6b21\u4f7f\u7528\u4e3a\u6b62 \u3002\u4f8b\u5982\uff0c\u56e0\u4e3a\u6700\u540e\u4e00\u6b21\u4f7f\u7528 \u4e0d\u53ef\u53d8\u5f15\u7528 \uff08println!)\uff0c\u53d1\u751f\u5728\u58f0\u660e\u53ef\u53d8\u5f15\u7528\u4e4b\u524d\uff0c\u6240\u4ee5\u5982\u4e0b\u4ee3\u7801\u662f\u53ef\u4ee5\u7f16\u8bd1\u7684\uff1a let mut s = String :: from ( \"hello\" ); let r1 = & s ; // \u6ca1\u95ee\u9898 let r2 = & s ; // \u6ca1\u95ee\u9898 println! ( \"{} and {}\" , r1 , r2 ); // \u6b64\u4f4d\u7f6e\u4e4b\u540e r1 \u548c r2 \u4e0d\u518d\u4f7f\u7528 let r3 = & mut s ; // \u6ca1\u95ee\u9898 println! ( \"{}\" , r3 ); \u4e0d\u53ef\u53d8\u5f15\u7528 r1 \u548c r2 \u7684\u4f5c\u7528\u57df\u5728 println! \u6700\u540e\u4e00\u6b21\u4f7f\u7528\u4e4b\u540e\u7ed3\u675f\uff0c\u8fd9\u4e5f\u662f\u521b\u5efa\u53ef\u53d8\u5f15\u7528 r3 \u7684\u5730\u65b9\u3002\u5b83\u4eec\u7684\u4f5c\u7528\u57df \u6ca1\u6709\u91cd\u53e0 \uff0c\u6240\u4ee5\u4ee3\u7801\u662f\u53ef\u4ee5\u7f16\u8bd1\u7684\u3002 \u7f16\u8bd1\u5668\u5728\u4f5c\u7528\u57df\u7ed3\u675f\u4e4b\u524d\u5224\u65ad\u4e0d\u518d\u4f7f\u7528\u7684\u5f15\u7528\u7684\u80fd\u529b\u88ab\u79f0\u4e3a \u975e\u8bcd\u6cd5\u4f5c\u7528\u57df\u751f\u547d\u5468\u671f \uff08Non-Lexical Lifetimes\uff0c\u7b80\u79f0 NLL\uff09\u3002\u4f60\u53ef\u4ee5\u5728 The Edition Guide \u4e2d\u9605\u8bfb\u66f4\u591a\u5173\u4e8e\u5b83\u7684\u4fe1\u606f\u3002","title":"\u53ef\u53d8\u5f15\u7528"},{"location":"ownership/#dangling-references","text":"\u6240\u8c13 \u60ac\u5782\u6307\u9488 \u662f\u5176\u6307\u5411\u7684\u5185\u5b58\u53ef\u80fd\u5df2\u7ecf\u88ab\u5206\u914d\u7ed9\u5176\u5b83\u6301\u6709\u8005\u3002\u76f8\u6bd4\u4e4b\u4e0b\uff0c\u5728 Rust \u4e2d\u7f16\u8bd1\u5668\u786e\u4fdd\u5f15\u7528\u6c38\u8fdc\u4e5f\u4e0d\u4f1a\u53d8\u6210\u60ac\u5782\u72b6\u6001\uff1a \u5f53\u4f60\u62e5\u6709\u4e00\u4e9b\u6570\u636e\u7684\u5f15\u7528\uff0c\u7f16\u8bd1\u5668\u786e\u4fdd\u6570\u636e\u4e0d\u4f1a\u5728\u5176\u5f15\u7528\u4e4b\u524d\u79bb\u5f00\u4f5c\u7528\u57df\u3002 \u5f53\u5c1d\u8bd5\u521b\u5efa\u4e00\u4e2a\u60ac\u5782\u5f15\u7528\u65f6\uff0cRust \u4f1a\u901a\u8fc7\u4e00\u4e2a\u7f16\u8bd1\u65f6\u9519\u8bef\u6765\u907f\u514d\uff1a fn main () { let reference_to_nothing = dangle (); } fn dangle () -> & String { // dangle \u8fd4\u56de\u4e00\u4e2a\u5b57\u7b26\u4e32\u7684\u5f15\u7528 let s = String :: from ( \"hello\" ); // s \u662f\u4e00\u4e2a\u65b0\u5b57\u7b26\u4e32 & s // \u8fd4\u56de\u5b57\u7b26\u4e32 s \u7684\u5f15\u7528 } // \u8fd9\u91cc s \u79bb\u5f00\u4f5c\u7528\u57df\u5e76\u88ab\u4e22\u5f03\u3002\u5176\u5185\u5b58\u88ab\u91ca\u653e\u3002 // \u5371\u9669\uff01 \u9519\u8bef: $ cargo run Compiling ownership v0.1.0 ( file:///projects/ownership ) error [ E0106 ] : missing lifetime specifier --> src/main.rs:5:16 | 5 | fn dangle () -> & String { | ^ expected named lifetime parameter | = help: this function 's return type contains a borrowed value, but there is no value for it to be borrowed from help: consider using the `' static ` lifetime | 5 | fn dangle () -> & ' static String { | ~~~~~~~~ For more information about this error, try ` rustc --explain E0106 ` . error: could not compile ` ownership ` due to previous error \u56e0\u4e3a s \u662f\u5728 dangle \u51fd\u6570\u5185\u521b\u5efa\u7684\uff0c\u5f53 dangle \u7684\u4ee3\u7801\u6267\u884c\u5b8c\u6bd5\u540e\uff0cs \u5c06\u88ab\u91ca\u653e\u3002\u4e0d\u8fc7\u6211\u4eec\u5c1d\u8bd5\u8fd4\u56de\u5b83\u7684\u5f15\u7528\u3002\u8fd9\u610f\u5473\u7740\u8fd9\u4e2a\u5f15\u7528\u4f1a\u6307\u5411\u4e00\u4e2a\u65e0\u6548\u7684 String\uff0c\u8fd9\u53ef\u4e0d\u5bf9\uff01Rust \u4e0d\u4f1a\u5141\u8bb8\u8fd9\u4e48\u505a\u3002 \u8fd9\u91cc\u7684\u89e3\u51b3\u65b9\u6cd5\u662f\u76f4\u63a5\u8fd4\u56de String\uff1a fn no_dangle () -> String { let s = String :: from ( \"hello\" ); s // \u76f4\u63a5\u8fd4\u56des // \u6240\u6709\u6743\u88ab\u79fb\u52a8\u51fa\u53bb\uff0c\u6240\u4ee5\u6ca1\u6709\u503c\u88ab\u91ca\u653e\u3002 }","title":"\u60ac\u5782\u5f15\u7528\uff08Dangling References\uff09"},{"location":"ownership/#_13","text":"\u5728\u4efb\u610f\u7ed9\u5b9a\u65f6\u95f4\uff0c\u8981\u4e48 \u53ea\u80fd\u6709\u4e00\u4e2a\u53ef\u53d8\u5f15\u7528\uff0c\u8981\u4e48 \u53ea\u80fd\u6709\u591a\u4e2a\u4e0d\u53ef\u53d8\u5f15\u7528\u3002 \u5f15\u7528\u5fc5\u987b\u603b\u662f\u6709\u6548\u7684\u3002","title":"\u5f15\u7528\u7684\u89c4\u5219"},{"location":"ownership/#slice","text":"slice \u5141\u8bb8\u4f60\u5f15\u7528\u96c6\u5408\u4e2d\u4e00\u6bb5\u8fde\u7eed\u7684\u5143\u7d20\u5e8f\u5217\uff0c\u800c\u4e0d\u7528\u5f15\u7528\u6574\u4e2a\u96c6\u5408\u3002 slice \u662f\u4e00\u7c7b\u5f15\u7528\uff0c\u6240\u4ee5\u5b83\u6ca1\u6709\u6240\u6709\u6743\u3002 \u5c0f\u7ec3\u4e60\uff1a \u7f16\u5199\u4e00\u4e2a\u51fd\u6570\uff0c\u8be5\u51fd\u6570\u63a5\u6536\u4e00\u4e2a\u7528\u7a7a\u683c\u5206\u9694\u5355\u8bcd\u7684\u5b57\u7b26\u4e32\uff0c\u5e76\u8fd4\u56de\u5728\u8be5\u5b57\u7b26\u4e32\u4e2d\u627e\u5230\u7684\u7b2c\u4e00\u4e2a\u5355\u8bcd, \u5982\u679c\u51fd\u6570\u5728\u8be5\u5b57\u7b26\u4e32\u4e2d\u5e76\u672a\u627e\u5230\u7a7a\u683c\uff0c\u5219\u6574\u4e2a\u5b57\u7b26\u4e32\u5c31\u662f\u4e00\u4e2a\u5355\u8bcd\uff0c\u6240\u4ee5\u5e94\u8be5\u8fd4\u56de\u6574\u4e2a\u5b57\u7b26\u4e32\u3002 fn first_word ( s : & String ) -> ? first_word \u51fd\u6570\u6709\u4e00\u4e2a\u53c2\u6570 &String \u3002\u56e0\u4e3a\u6211\u4eec\u4e0d\u9700\u8981\u6240\u6709\u6743\uff0c\u6240\u4ee5\u8fd9\u6ca1\u6709\u95ee\u9898\u3002\u4e0d\u8fc7\u5e94\u8be5\u8fd4\u56de\u4ec0\u4e48\u5462\uff1f\u6211\u4eec\u5e76\u6ca1\u6709\u4e00\u4e2a\u771f\u6b63\u83b7\u53d6 \u90e8\u5206 \u5b57\u7b26\u4e32\u7684\u529e\u6cd5\u3002\u4e0d\u8fc7\uff0c\u6211\u4eec\u53ef\u4ee5\u8fd4\u56de\u5355\u8bcd\u7ed3\u5c3e\u7684\u7d22\u5f15\uff0c\u7ed3\u5c3e\u7531\u4e00\u4e2a\u7a7a\u683c\u8868\u793a\u3002 fn first_word ( s : & String ) -> usize { // \u7528 as_bytes \u65b9\u6cd5\u5c06 String \u8f6c\u5316\u4e3a\u5b57\u8282\u6570\u7ec4 let bytes = s . as_bytes (); // \u4f7f\u7528 iter \u65b9\u6cd5\u5728\u5b57\u8282\u6570\u7ec4\u4e0a\u521b\u5efa\u4e00\u4e2a\u8fed\u4ee3\u5668\uff1a // enumerate \u5305\u88c5\u4e86 iter \u7684\u7ed3\u679c\uff0c\u5c06\u8fd9\u4e9b\u5143\u7d20\u4f5c\u4e3a\u5143\u7ec4\u7684\u4e00\u90e8\u5206\u6765\u8fd4\u56de\u3002 // enumerate \u8fd4\u56de\u7684\u5143\u7ec4\u4e2d\uff0c\u7b2c\u4e00\u4e2a\u5143\u7d20\u662f\u7d22\u5f15\uff0c\u7b2c\u4e8c\u4e2a\u5143\u7d20\u662f\u96c6\u5408\u4e2d\u5143\u7d20\u7684\u5f15\u7528\u3002 // \u56e0\u4e3a enumerate \u65b9\u6cd5\u8fd4\u56de\u4e00\u4e2a\u5143\u7ec4\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u6a21\u5f0f\u6765\u89e3\u6784 // \u5143\u7ec4\u4e2d\u7684 i \u662f\u7d22\u5f15\u800c\u5143\u7ec4\u4e2d\u7684 &item \u662f\u5355\u4e2a\u5b57\u8282\u3002 // \u56e0\u4e3a\u6211\u4eec\u4ece .iter().enumerate() \u4e2d\u83b7\u53d6\u4e86\u96c6\u5408\u5143\u7d20\u7684\u5f15\u7528\uff0c\u6240\u4ee5\u6a21\u5f0f\u4e2d\u4f7f\u7528\u4e86 &\u3002 for ( i , & item ) in bytes . iter (). enumerate () { // \u901a\u8fc7\u5b57\u8282\u7684\u5b57\u9762\u503c\u8bed\u6cd5\u6765\u5bfb\u627e\u4ee3\u8868\u7a7a\u683c\u7684\u5b57\u8282\u3002 // \u5982\u679c\u627e\u5230\u4e86\u4e00\u4e2a\u7a7a\u683c\uff0c\u8fd4\u56de\u5b83\u7684\u4f4d\u7f6e\u3002 if item == b' ' { return i ; } } // \u5426\u5219\uff0c\u4f7f\u7528 s.len() \u8fd4\u56de\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\uff1a s . len () } \u73b0\u5728\u6709\u4e86\u4e00\u4e2a\u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7b2c\u4e00\u4e2a\u5355\u8bcd\u7ed3\u5c3e\u7d22\u5f15\u7684\u65b9\u6cd5\uff0c\u4e0d\u8fc7\u8fd9\u6709\u4e00\u4e2a\u95ee\u9898\u3002 \u6211\u4eec\u8fd4\u56de\u4e86\u4e00\u4e2a\u72ec\u7acb\u7684 usize \uff0c\u4e0d\u8fc7\u5b83\u53ea\u5728 &String \u7684\u4e0a\u4e0b\u6587\u4e2d\u624d\u662f\u4e00\u4e2a\u6709\u610f\u4e49\u7684\u6570\u5b57\u3002 \u6362\u53e5\u8bdd\u8bf4\uff0c\u56e0\u4e3a\u5b83\u662f\u4e00\u4e2a\u4e0e String \u76f8\u5206\u79bb\u7684\u503c\uff0c\u65e0\u6cd5\u4fdd\u8bc1\u5c06\u6765\u5b83\u4ecd\u7136\u6709\u6548\u3002 fn main () { let mut s = String :: from ( \"hello world\" ); let word = first_word ( & s ); // word \u7684\u503c\u4e3a 5 s . clear (); // \u8fd9\u6e05\u7a7a\u4e86\u5b57\u7b26\u4e32\uff0c\u4f7f\u5176\u7b49\u4e8e \"\" // word \u5728\u6b64\u5904\u7684\u503c\u4ecd\u7136\u662f 5\uff0c // \u4f46\u662f\u6ca1\u6709\u66f4\u591a\u7684\u5b57\u7b26\u4e32\u8ba9\u6211\u4eec\u53ef\u4ee5\u6709\u6548\u5730\u5e94\u7528\u6570\u503c 5\u3002word \u7684\u503c\u73b0\u5728\u5b8c\u5168\u65e0\u6548\uff01 } \u8fd9\u4e2a\u7a0b\u5e8f\u7f16\u8bd1\u65f6\u6ca1\u6709\u4efb\u4f55\u9519\u8bef\uff0c\u800c\u4e14\u5728\u8c03\u7528 s.clear() \u4e4b\u540e\u4f7f\u7528 word \u4e5f\u4e0d\u4f1a\u51fa\u9519\u3002\u56e0\u4e3a word \u4e0e s \u72b6\u6001\u5b8c\u5168\u6ca1\u6709\u8054\u7cfb\uff0c\u6240\u4ee5 word \u4ecd\u7136\u5305\u542b\u503c 5\u3002 \u53ef\u4ee5\u5c1d\u8bd5\u7528\u503c 5 \u6765\u63d0\u53d6\u53d8\u91cf s \u7684\u7b2c\u4e00\u4e2a\u5355\u8bcd\uff0c\u4e0d\u8fc7\u8fd9\u662f\u6709 bug \u7684\uff0c\u56e0\u4e3a\u5728\u6211\u4eec\u5c06 5 \u4fdd\u5b58\u5230 word \u4e4b\u540e s \u7684\u5185\u5bb9\u5df2\u7ecf\u6539\u53d8\u3002 \u6211\u4eec\u4e0d\u5f97\u4e0d\u65f6\u523b\u62c5\u5fc3 word \u7684\u7d22\u5f15\u4e0e s \u4e2d\u7684\u6570\u636e\u4e0d\u518d\u540c\u6b65\uff0c\u8fd9\u5f88\u5570\u55e6\u4e14\u6613\u51fa\u9519\uff01\u5982\u679c\u7f16\u5199\u8fd9\u4e48\u4e00\u4e2a second_word \u51fd\u6570\u7684\u8bdd\uff0c\u7ba1\u7406\u7d22\u5f15\u8fd9\u4ef6\u4e8b\u5c06\u66f4\u52a0\u5bb9\u6613\u51fa\u95ee\u9898\u3002\u5b83\u7684\u7b7e\u540d\u770b\u8d77\u6765\u50cf\u8fd9\u6837\uff1a fn second_word ( s : & String ) -> ( usize , usize ) { \u73b0\u5728\u6211\u4eec\u8981\u8ddf\u8e2a\u4e00\u4e2a \u5f00\u59cb\u7d22\u5f15 \u548c \u4e00\u4e2a \u7ed3\u5c3e\u7d22\u5f15 \uff0c\u540c\u65f6\u6709\u4e86\u66f4\u591a\u4ece\u6570\u636e\u7684\u67d0\u4e2a\u7279\u5b9a\u72b6\u6001\u8ba1\u7b97\u800c\u6765\u7684\u503c\uff0c\u4f46\u90fd\u5b8c\u5168\u6ca1\u6709\u4e0e\u8fd9\u4e2a\u72b6\u6001\u76f8\u5173\u8054\u3002\u73b0\u5728\u6709\u4e09\u4e2a\u98d8\u5ffd\u4e0d\u5b9a\u7684\u4e0d\u76f8\u5173\u53d8\u91cf\u9700\u8981\u4fdd\u6301\u540c\u6b65\u3002","title":"Slice\u7c7b\u578b"},{"location":"ownership/#slice_1","text":"\u5b57\u7b26\u4e32 slice \uff08string slice\uff09\u662f String \u4e2d\u4e00\u90e8\u5206\u503c\u7684\u5f15\u7528\uff0c\u5b83\u770b\u8d77\u6765\u50cf\u8fd9\u6837\uff1a let s = String :: from ( \"hello world\" ); let hello = & s [ 0 .. 5 ]; // hello \u662f\u4e00\u4e2a\u90e8\u5206 String \u7684\u5f15\u7528\uff0c\u7531\u4e00\u4e2a\u989d\u5916\u7684 [0..5] \u90e8\u5206\u6307\u5b9a\u3002 let world = & s [ 6 .. 11 ]; // \u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a\u7531\u4e2d\u62ec\u53f7\u4e2d\u7684 [starting_index..ending_index] \u6307\u5b9a\u7684 range \u521b\u5efa\u4e00\u4e2a slice\uff0c\u5176\u4e2d starting_index \u662f slice \u7684\u7b2c\u4e00\u4e2a\u4f4d\u7f6e\uff0cending_index \u5219\u662f slice \u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\u7684\u540e\u4e00\u4e2a\u503c\u3002 \u5728\u5176\u5185\u90e8\uff0c slice \u7684\u6570\u636e\u7ed3\u6784\u5b58\u50a8\u4e86 slice \u7684\u5f00\u59cb\u4f4d\u7f6e\u548c\u957f\u5ea6\uff0c\u957f\u5ea6\u5bf9\u5e94\u4e8e ending_index \u51cf\u53bb starting_index \u7684\u503c\u3002 \u6240\u4ee5\u5bf9\u4e8e let world = &s[6..11]; \u7684\u60c5\u51b5\uff0cworld \u5c06\u662f\u4e00\u4e2a\u5305\u542b\u6307\u5411 s \u7d22\u5f15 6 \u7684\u6307\u9488\u548c\u957f\u5ea6\u503c 5 \u7684 slice\u3002 \u5bf9\u4e8e Rust \u7684 .. range \u8bed\u6cd5\uff0c\u5982\u679c\u60f3\u8981\u4ece\u7d22\u5f15 0 \u5f00\u59cb\uff0c\u53ef\u4ee5 \u4e0d\u5199\u4e24\u4e2a\u70b9\u53f7\u4e4b\u524d\u7684\u503c \u3002\u5982\u4e0b\u4e24\u4e2a\u8bed\u53e5\u662f\u76f8\u540c\u7684\uff1a let s = String :: from ( \"hello\" ); let slice = & s [ 0 .. 2 ]; let slice = & s [ .. 2 ]; \u4f9d\u6b64\u7c7b\u63a8\uff0c\u5982\u679c slice \u5305\u542b String \u7684\u6700\u540e\u4e00\u4e2a\u5b57\u8282\uff0c\u4e5f\u53ef\u4ee5 \u820d\u5f03\u5c3e\u90e8 \u7684\u6570\u5b57\u3002\u8fd9\u610f\u5473\u7740\u5982\u4e0b\u4e5f\u662f\u76f8\u540c\u7684\uff1a let s = String :: from ( \"hello\" ); let len = s . len (); let slice = & s [ 3 .. len ]; let slice = & s [ 3 .. ]; \u4e5f\u53ef\u4ee5 \u540c\u65f6\u820d\u5f03 \u8fd9\u4e24\u4e2a\u503c\u6765\u83b7\u53d6\u6574\u4e2a\u5b57\u7b26\u4e32\u7684 slice\u3002\u6240\u4ee5\u5982\u4e0b\u4ea6\u662f\u76f8\u540c\u7684\uff1a let s = String :: from ( \"hello\" ); let len = s . len (); let slice = & s [ 0 .. len ]; let slice = & s [ .. ]; \u6ce8\u610f \u5b57\u7b26\u4e32 slice range \u7684\u7d22\u5f15\u5fc5\u987b\u4f4d\u4e8e\u6709\u6548\u7684 UTF-8 \u5b57\u7b26\u8fb9\u754c\u5185\uff0c\u5982\u679c\u5c1d\u8bd5\u4ece\u4e00\u4e2a\u591a\u5b57\u8282\u5b57\u7b26\u7684\u4e2d\u95f4\u4f4d\u7f6e\u521b\u5efa\u5b57\u7b26\u4e32 slice\uff0c\u5219\u7a0b\u5e8f\u5c06\u4f1a\u56e0\u9519\u8bef\u800c\u9000\u51fa\u3002 \u51fa\u4e8e\u4ecb\u7ecd\u5b57\u7b26\u4e32 slice \u7684\u76ee\u7684\uff0c\u672c\u90e8\u5206\u5047\u8bbe\u53ea\u4f7f\u7528 ASCII \u5b57\u7b26\u96c6\uff1b\u7b2c\u516b\u7ae0\u7684 \u201c \u4f7f\u7528\u5b57\u7b26\u4e32\u5b58\u50a8 UTF-8 \u7f16\u7801\u7684\u6587\u672c \u201d \u90e8\u5206\u4f1a\u66f4\u52a0\u5168\u9762\u7684\u8ba8\u8bba UTF-8 \u5904\u7406\u95ee\u9898\u3002 \u91cd\u5199 first_word \u6765\u8fd4\u56de\u4e00\u4e2a slice \u3002 \u201c\u5b57\u7b26\u4e32 slice\u201d \u7684\u7c7b\u578b\u58f0\u660e\u5199\u4f5c &str \uff1a fn first_word ( s : & String ) -> & str { let bytes = s . as_bytes (); for ( i , & item ) in bytes . iter (). enumerate () { if item == b' ' { return & s [ 0 .. i ]; } } & s [ .. ] } \u73b0\u5728\u5f53\u8c03\u7528 first_word \u65f6\uff0c\u4f1a\u8fd4\u56de\u4e0e\u5e95\u5c42\u6570\u636e\u5173\u8054\u7684\u5355\u4e2a\u503c\u3002\u8fd9\u4e2a\u503c\u7531\u4e00\u4e2a slice \u5f00\u59cb\u4f4d\u7f6e\u7684\u5f15\u7528\u548c slice \u4e2d\u5143\u7d20\u7684\u6570\u91cf\u7ec4\u6210 \u3002 second_word \u51fd\u6570\u4e5f\u53ef\u4ee5\u6539\u4e3a\u8fd4\u56de\u4e00\u4e2a slice \uff1a fn second_word ( s : & String ) -> & str { \u73b0\u5728\u6709\u4e86\u4e00\u4e2a\u4e0d\u6613\u6df7\u6dc6\u4e14\u76f4\u89c2\u7684 API \u4e86\uff0c \u56e0\u4e3a\u7f16\u8bd1\u5668\u4f1a\u786e\u4fdd\u6307\u5411 String \u7684\u5f15\u7528\u6301\u7eed\u6709\u6548\u3002 \u4f7f\u7528 slice \u7248\u672c\u7684 first_word \u4f1a\u629b\u51fa\u4e00\u4e2a\u7f16\u8bd1\u65f6\u9519\u8bef\uff1a fn main () { let mut s = String :: from ( \"hello world\" ); let word = first_word ( & s ); s . clear (); // \u9519\u8bef! println! ( \"the first word is: {}\" , word ); } \u7f16\u8bd1\u9519\u8bef\uff1a $ cargo run Compiling ownership v0 . 1.0 ( file : ///projects/ownership) error [ E0502 ] : cannot borrow ` s ` as mutable because it is also borrowed as immutable - -> src / main . rs : 18 : 5 | 16 | let word = first_word ( & s ); | -- immutable borrow occurs here 17 | 18 | s . clear (); // error! | ^^^^^^^^^ mutable borrow occurs here 19 | 20 | println! ( \"the first word is: {}\" , word ); | ---- immutable borrow later used here For more information about this error , try ` rustc -- explain E0502 ` . error : could not compile ` ownership ` due to previous error \u56de\u5fc6\u4e00\u4e0b \u501f\u7528\u89c4\u5219 \uff0c\u5f53\u62e5\u6709\u67d0\u503c\u7684\u4e0d\u53ef\u53d8\u5f15\u7528\u65f6\uff0c\u5c31\u4e0d\u80fd\u518d\u83b7\u53d6\u4e00\u4e2a\u53ef\u53d8\u5f15\u7528\u3002\u56e0\u4e3a clear \u9700\u8981\u6e05\u7a7a String\uff0c\u5b83\u5c1d\u8bd5\u83b7\u53d6\u4e00\u4e2a\u53ef\u53d8\u5f15\u7528\u3002 \u5728\u8c03\u7528 clear \u4e4b\u540e\u7684 println! \u4f7f\u7528\u4e86 word \u4e2d\u7684\u5f15\u7528\uff0c\u6240\u4ee5\u8fd9\u4e2a\u4e0d\u53ef\u53d8\u7684\u5f15\u7528\u5728\u6b64\u65f6\u5fc5\u987b\u4ecd\u7136\u6709\u6548\u3002 Rust \u4e0d\u5141\u8bb8 clear \u4e2d\u7684\u53ef\u53d8\u5f15\u7528\u548c word \u4e2d\u7684\u4e0d\u53ef\u53d8\u5f15\u7528\u540c\u65f6\u5b58\u5728\uff0c\u56e0\u6b64\u7f16\u8bd1\u5931\u8d25\u3002 Rust \u4e0d\u4ec5\u4f7f\u5f97\u6211\u4eec\u7684 API \u7b80\u5355\u6613\u7528\uff0c\u4e5f\u5728\u7f16\u8bd1\u65f6\u5c31\u6d88\u9664\u4e86\u4e00\u6574\u7c7b\u7684\u9519\u8bef\uff01","title":"\u5b57\u7b26\u4e32Slice"},{"location":"ownership/#slice_2","text":"\u8fd8\u8bb0\u5f97\u8bb2\u5230\u8fc7\u5b57\u7b26\u4e32\u5b57\u9762\u503c\u88ab\u50a8\u5b58\u5728\u4e8c\u8fdb\u5236\u6587\u4ef6\u4e2d\u5417\uff1f\u73b0\u5728\u77e5\u9053 slice \u4e86\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u6b63\u786e\u5730\u7406\u89e3\u5b57\u7b26\u4e32\u5b57\u9762\u503c\u4e86\uff1a let s = \"Hello, world!\" ; \u8fd9\u91cc s \u7684\u7c7b\u578b\u662f &str \uff1a\u5b83\u662f\u4e00\u4e2a\u6307\u5411\u4e8c\u8fdb\u5236\u7a0b\u5e8f\u7279\u5b9a\u4f4d\u7f6e\u7684 slice\u3002\u8fd9\u4e5f\u5c31\u662f\u4e3a\u4ec0\u4e48\u5b57\u7b26\u4e32\u5b57\u9762\u503c\u662f\u4e0d\u53ef\u53d8\u7684\uff1b &str \u662f\u4e00\u4e2a\u4e0d\u53ef\u53d8\u5f15\u7528 \u3002","title":"\u5b57\u7b26\u4e32\u5b57\u9762\u503c\u5c31\u662f slice"},{"location":"ownership/#slice_3","text":"\u5728\u77e5\u9053\u4e86\u80fd\u591f\u83b7\u53d6\u5b57\u9762\u503c\u548c String \u7684 slice \u540e\uff0c\u6211\u4eec\u5bf9 first_word \u505a\u4e86\u6539\u8fdb\uff0c\u8fd9\u662f\u5b83\u7684\u7b7e\u540d\uff1a fn first_word ( s : & String ) -> & str { \u800c\u66f4\u6709\u7ecf\u9a8c\u7684 Rustacean \u4f1a\u7f16\u5199\u51fa\u8fd9\u6837\u7684\u51fd\u6570\u7b7e\u540d\uff0c\u56e0\u4e3a\u5b83\u4f7f\u5f97\u53ef\u4ee5\u5bf9 &String \u503c\u548c &str \u503c\u4f7f\u7528\u76f8\u540c\u7684\u51fd\u6570\uff1a fn first_word ( s : & str ) -> & str { \u5982\u679c\u6709\u4e00\u4e2a\u5b57\u7b26\u4e32 slice\uff0c\u53ef\u4ee5\u76f4\u63a5\u4f20\u9012\u5b83\u3002\u5982\u679c\u6709\u4e00\u4e2a String \uff0c\u5219\u53ef\u4ee5\u4f20\u9012\u6574\u4e2a String \u7684 slice \u6216\u5bf9 String \u7684\u5f15\u7528\u3002 \u8fd9\u79cd\u7075\u6d3b\u6027\u5229\u7528\u4e86 deref coercions \u7684\u4f18\u52bf\uff0c\u8fd9\u4e2a\u7279\u6027\u6211\u4eec\u5c06\u5728\u201c \u51fd\u6570\u548c\u65b9\u6cd5\u7684\u9690\u5f0f Deref \u5f3a\u5236\u8f6c\u6362 \u201d\u7ae0\u8282\u4e2d\u4ecb\u7ecd\u3002 \u5b9a\u4e49\u4e00\u4e2a\u83b7\u53d6\u5b57\u7b26\u4e32 slice \u800c\u4e0d\u662f String \u5f15\u7528\u7684\u51fd\u6570\u4f7f\u5f97\u6211\u4eec\u7684 API \u66f4\u52a0\u901a\u7528 \u5e76\u4e14\u4e0d\u4f1a\u4e22\u5931\u4efb\u4f55\u529f\u80fd\uff1a fn main () { let my_string = String :: from ( \"hello world\" ); // `first_word` \u9002\u7528\u4e8e `String`\uff08\u7684 slice\uff09\uff0c\u6574\u4f53\u6216\u5168\u90e8 let word = first_word ( & my_string [ 0 .. 6 ]); let word = first_word ( & my_string [ .. ]); // `first_word` \u4e5f\u9002\u7528\u4e8e `String` \u7684\u5f15\u7528\uff0c // \u8fd9\u7b49\u4ef7\u4e8e\u6574\u4e2a `String` \u7684 slice let word = first_word ( & my_string ); let my_string_literal = \"hello world\" ; // `first_word` \u9002\u7528\u4e8e\u5b57\u7b26\u4e32\u5b57\u9762\u503c\uff0c\u6574\u4f53\u6216\u5168\u90e8 let word = first_word ( & my_string_literal [ 0 .. 6 ]); let word = first_word ( & my_string_literal [ .. ]); // \u56e0\u4e3a\u5b57\u7b26\u4e32\u5b57\u9762\u503c\u5df2\u7ecf \u662f \u5b57\u7b26\u4e32 slice \u4e86\uff0c // \u8fd9\u4e5f\u662f\u9002\u7528\u7684\uff0c\u65e0\u9700 slice \u8bed\u6cd5\uff01 let word = first_word ( my_string_literal ); }","title":"\u5b57\u7b26\u4e32 slice \u4f5c\u4e3a\u53c2\u6570"},{"location":"ownership/#slice_4","text":"\u5b57\u7b26\u4e32 slice\uff0c\u6b63\u5982\u4f60\u60f3\u8c61\u7684\u90a3\u6837\uff0c\u662f\u9488\u5bf9\u5b57\u7b26\u4e32\u7684\u3002\u4e0d\u8fc7\u4e5f\u6709\u66f4\u901a\u7528\u7684 slice \u7c7b\u578b\u3002\u8003\u8651\u4e00\u4e0b\u8fd9\u4e2a\u6570\u7ec4\uff1a let a = [ 1 , 2 , 3 , 4 , 5 ]; \u5c31\u8ddf\u60f3\u8981\u83b7\u53d6\u5b57\u7b26\u4e32\u7684\u4e00\u90e8\u5206\u90a3\u6837\uff0c\u4e5f\u4f1a\u60f3\u8981\u5f15\u7528\u6570\u7ec4\u7684\u4e00\u90e8\u5206\u3002\u53ef\u4ee5\u8fd9\u6837\u505a\uff1a let a = [ 1 , 2 , 3 , 4 , 5 ]; let slice = & a [ 1 .. 3 ]; // \u8fd9\u4e2a slice \u7684\u7c7b\u578b\u662f &[i32]\u3002 assert_eq! ( slice , & [ 2 , 3 ]); \u5b83\u8ddf\u5b57\u7b26\u4e32 slice \u7684\u5de5\u4f5c\u65b9\u5f0f\u4e00\u6837\uff0c\u901a\u8fc7 \u5b58\u50a8\u7b2c\u4e00\u4e2a\u96c6\u5408\u5143\u7d20\u7684\u5f15\u7528\u548c\u4e00\u4e2a\u96c6\u5408\u603b\u957f\u5ea6 \u3002\u4f60\u53ef\u4ee5\u5bf9\u5176\u4ed6\u6240\u6709\u96c6\u5408\u4f7f\u7528\u8fd9\u7c7b slice\u3002\u7b2c\u516b\u7ae0\u8bb2\u5230 vector \u65f6\u4f1a\u8be6\u7ec6\u8ba8\u8bba\u8fd9\u4e9b\u96c6\u5408\u3002","title":"\u5176\u4ed6\u7c7b\u578b\u7684 slice"},{"location":"ownership/#_14","text":"\u6240\u6709\u6743 \u3001 \u501f\u7528 \u548c slice \u8fd9\u4e9b\u6982\u5ff5\u8ba9 Rust \u7a0b\u5e8f\u5728\u7f16\u8bd1\u65f6\u786e\u4fdd\u5185\u5b58\u5b89\u5168\u3002 Rust \u8bed\u8a00\u63d0\u4f9b\u4e86\u8ddf\u5176\u4ed6\u7cfb\u7edf\u7f16\u7a0b\u8bed\u8a00\u76f8\u540c\u7684\u65b9\u5f0f\u6765\u63a7\u5236\u4f60\u4f7f\u7528\u7684\u5185\u5b58\uff0c\u4f46\u62e5\u6709\u6570\u636e\u6240\u6709\u8005\u5728\u79bb\u5f00\u4f5c\u7528\u57df\u540e\u81ea\u52a8\u6e05\u9664\u5176\u6570\u636e\u7684\u529f\u80fd\u610f\u5473\u7740\u4f60\u65e0\u987b\u989d\u5916\u7f16\u5199\u548c\u8c03\u8bd5\u76f8\u5173\u7684\u63a7\u5236\u4ee3\u7801\u3002","title":"\u603b\u7ed3"},{"location":"packages/","text":"\u5305\u3001crate\u3001\u6a21\u5757 \u5f53\u7f16\u5199\u5927\u578b\u7a0b\u5e8f\u65f6\uff0c\u7ec4\u7ec7\u4f60\u7684\u4ee3\u7801\u663e\u5f97\u5c24\u4e3a\u91cd\u8981\u3002 \u6982\u5ff5 \u201c \u4f5c\u7528\u57df\uff08scope\uff09 \u201d\uff1a\u4ee3\u7801\u6240\u5728\u7684\u5d4c\u5957\u4e0a\u4e0b\u6587\u6709\u4e00\u7ec4\u5b9a\u4e49\u4e3a \u201c in scope \u201d \u7684\u540d\u79f0\u3002 \u5f53\u9605\u8bfb\u3001\u7f16\u5199\u548c\u7f16\u8bd1\u4ee3\u7801\u65f6\uff0c\u7a0b\u5e8f\u5458\u548c\u7f16\u8bd1\u5668\u9700\u8981\u77e5\u9053\u7279\u5b9a\u4f4d\u7f6e\u7684\u7279\u5b9a\u540d\u79f0\u662f\u5426\u5f15\u7528\u4e86 \u53d8\u91cf \u3001 \u51fd\u6570 \u3001 \u7ed3\u6784\u4f53 \u3001 \u679a\u4e3e \u3001 \u6a21\u5757 \u3001 \u5e38\u91cf \u6216\u8005\u5176\u4ed6\u6709\u610f\u4e49\u7684 \u9879 \u3002 \u4f60\u53ef\u4ee5\u521b\u5efa\u4f5c\u7528\u57df\uff0c\u4ee5\u53ca\u6539\u53d8\u54ea\u4e9b\u540d\u79f0\u5728\u4f5c\u7528\u57df\u5185\u8fd8\u662f\u4f5c\u7528\u57df\u5916\u3002 \u540c\u4e00\u4e2a\u4f5c\u7528\u57df\u5185\u4e0d\u80fd\u62e5\u6709\u4e24\u4e2a\u76f8\u540c\u540d\u79f0\u7684\u9879 \u3002 Rust \u6709\u8bb8\u591a\u529f\u80fd\u53ef\u4ee5 \u7ba1\u7406\u4ee3\u7801\u7684\u7ec4\u7ec7 \uff0c\u5305\u62ec\u54ea\u4e9b\u5185\u5bb9\u53ef\u4ee5\u88ab\u516c\u5f00\uff0c\u54ea\u4e9b\u5185\u5bb9\u4f5c\u4e3a\u79c1\u6709\u90e8\u5206\uff0c\u4ee5\u53ca\u7a0b\u5e8f\u6bcf\u4e2a\u4f5c\u7528\u57df\u4e2d\u7684\u540d\u5b57\u3002\u8fd9\u4e9b\u529f\u80fd\u3002\u8fd9\u6709\u65f6\u88ab\u79f0\u4e3a \u201c \u6a21\u5757\u7cfb\u7edf \uff08the module system\uff09\u201d\uff0c\u5305\u62ec\uff1a \u5305\uff08Packages\uff09 \uff1a Cargo \u7684\u4e00\u4e2a\u529f\u80fd\uff0c\u5b83\u5141\u8bb8\u4f60\u6784\u5efa\u3001\u6d4b\u8bd5\u548c\u5206\u4eab crate\u3002 Crates \uff1a\u4e00\u4e2a\u6a21\u5757\u7684\u6811\u5f62\u7ed3\u6784\uff0c\u5b83\u5f62\u6210\u4e86\u5e93\u6216\u4e8c\u8fdb\u5236\u9879\u76ee\u3002 \u6a21\u5757\uff08Modules\uff09\u548c use \uff1a \u5141\u8bb8\u4f60\u63a7\u5236\u4f5c\u7528\u57df\u548c\u8def\u5f84\u7684\u79c1\u6709\u6027\u3002 \u8def\u5f84\uff08path\uff09 \uff1a\u4e00\u4e2a\u547d\u540d\u4f8b\u5982\u7ed3\u6784\u4f53\u3001\u51fd\u6570\u6216\u6a21\u5757\u7b49\u9879\u7684\u65b9\u5f0f \u5305\u548ccrate crate \u662f Rust \u5728\u7f16\u8bd1\u65f6\u6700\u5c0f\u7684\u4ee3\u7801\u5355\u4f4d\u3002\u5982\u679c\u7528 rustc \u800c\u4e0d\u662f cargo \u6765\u7f16\u8bd1\u4e00\u4e2a\u6587\u4ef6\uff0c\u7f16\u8bd1\u5668\u8fd8\u662f\u4f1a\u5c06\u90a3\u4e2a\u6587\u4ef6\u8ba4\u4f5c\u4e00\u4e2a crate \u3002 crate \u53ef\u4ee5\u5305\u542b\u6a21\u5757\uff0c\u6a21\u5757\u53ef\u4ee5\u5b9a\u4e49\u5728\u5176\u4ed6\u6587\u4ef6\uff0c\u7136\u540e\u548c crate \u4e00\u8d77\u7f16\u8bd1\uff0c\u6211\u4eec\u4f1a\u5728\u63a5\u4e0b\u6765\u7684\u7ae0\u8282\u4e2d\u9047\u5230\u3002 crate \u6709\u4e24\u79cd\u5f62\u5f0f\uff1a \u4e8c\u8fdb\u5236\u9879 \u548c \u5e93 \u3002 \u4e8c\u8fdb\u5236\u9879 \u53ef\u4ee5\u88ab\u7f16\u8bd1\u4e3a\u53ef\u6267\u884c\u7a0b\u5e8f\uff0c\u6bd4\u5982\u4e00\u4e2a\u547d\u4ee4\u884c\u7a0b\u5e8f\u6216\u8005\u4e00\u4e2a\u670d\u52a1\u5668\u3002 \u5b83\u4eec\u5fc5\u987b\u6709\u4e00\u4e2a main \u51fd\u6570\u6765\u5b9a\u4e49\u5f53\u7a0b\u5e8f\u88ab\u6267\u884c\u7684\u65f6\u5019\u6240\u9700\u8981\u505a\u7684\u4e8b\u60c5\u3002 \u76ee\u524d\u4e3a\u6b62\u793a\u4f8b\u4e2d\u6240\u521b\u5efa\u7684 crate \u90fd\u662f\u4e8c\u8fdb\u5236\u9879\u3002 \u5e93 \u5e76\u6ca1\u6709 main \u51fd\u6570\uff0c\u5b83\u4eec\u4e5f\u4e0d\u4f1a\u7f16\u8bd1\u4e3a\u53ef\u6267\u884c\u7a0b\u5e8f\uff0c\u5b83\u4eec\u63d0\u4f9b\u4e00\u4e9b\u8bf8\u5982\u51fd\u6570\u4e4b\u7c7b\u7684\u4e1c\u897f \uff0c\u4f7f\u5176\u4ed6\u9879\u76ee\u4e5f\u80fd\u4f7f\u7528\u8fd9\u4e9b\u4e1c\u897f\u3002 \u6bd4\u5982 rand crate \u5c31\u63d0\u4f9b\u4e86\u751f\u6210\u968f\u673a\u6570\u7684\u4e1c\u897f\u3002\u5927\u591a\u6570\u65f6\u95f4 Rustaceans \u8bf4\u7684 crate \u6307\u7684\u90fd\u662f \u5e93 \uff0c\u8fd9\u4e0e\u5176\u4ed6\u7f16\u7a0b\u8bed\u8a00\u4e2d library \u6982\u5ff5\u4e00\u81f4\u3002 crate root \u662f\u4e00\u4e2a\u6e90\u6587\u4ef6\uff0cRust \u7f16\u8bd1\u5668\u4ee5\u5b83\u4e3a\u8d77\u59cb\u70b9\uff0c\u5e76\u6784\u6210\u4f60\u7684 crate \u7684\u6839\u6a21\u5757\uff08\u6211\u4eec\u5c06\u5728 \u201c \u5b9a\u4e49\u6a21\u5757\u6765\u63a7\u5236\u4f5c\u7528\u57df\u4e0e\u79c1\u6709\u6027 \u201d \u4e00\u8282\u6df1\u5165\u89e3\u8bfb\uff09\u3002 \u5305\uff08package\uff09 \u662f \u63d0\u4f9b\u4e00\u7cfb\u5217\u529f\u80fd\u7684\u4e00\u4e2a\u6216\u8005\u591a\u4e2a crate \u3002\u4e00\u4e2a\u5305\u4f1a\u5305\u542b\u4e00\u4e2a Cargo.toml \u6587\u4ef6\uff0c\u9610\u8ff0\u5982\u4f55\u53bb\u6784\u5efa\u8fd9\u4e9b crate \u3002 Cargo \u5c31\u662f\u4e00\u4e2a\u5305\u542b\u6784\u5efa\u4f60\u4ee3\u7801\u7684\u4e8c\u8fdb\u5236\u9879\u7684\u5305\u3002Cargo \u4e5f\u5305\u542b\u8fd9\u4e9b\u4e8c\u8fdb\u5236\u9879\u6240\u4f9d\u8d56\u7684 \u5e93 \u3002\u5176\u4ed6\u9879\u76ee\u4e5f\u80fd\u7528 Cargo \u5e93\u6765\u5b9e\u73b0\u4e0e Cargo \u547d\u4ee4\u884c\u7a0b\u5e8f\u4e00\u6837\u7684\u903b\u8f91\u3002 \u5305\u4e2d\u53ef\u4ee5\u5305\u542b\u81f3\u591a\u4e00\u4e2a\u5e93 crate(library crate)\u3002\u5305\u4e2d\u53ef\u4ee5\u5305\u542b\u4efb\u610f\u591a\u4e2a\u4e8c\u8fdb\u5236 crate (binary crate)\uff0c\u4f46\u662f\u5fc5\u987b\u81f3\u5c11\u5305\u542b\u4e00\u4e2a crate \uff08\u65e0\u8bba\u662f\u5e93\u7684\u8fd8\u662f\u4e8c\u8fdb\u5236\u7684\uff09\u3002 \u770b\u770b\u521b\u5efa\u5305\u7684\u65f6\u5019\u4f1a\u53d1\u751f\u4ec0\u4e48\u3002\u9996\u5148\uff0c\u8f93\u5165\u547d\u4ee4 cargo new \uff1a $ cargo new my-project Created binary ( application ) ` my-project ` package $ ls my-project Cargo.toml src # Cargo \u9075\u5faa\u7684\u4e00\u4e2a\u7ea6\u5b9a\uff1asrc/main.rs \u5c31\u662f\u4e00\u4e2a\u4e0e\u5305\u540c\u540d\u7684\u4e8c\u8fdb\u5236 crate \u7684 crate \u6839\u3002 $ ls my-project/src main.rs # \u540c\u6837\u7684\uff0cCargo \u77e5\u9053\u5982\u679c\u5305\u76ee\u5f55\u4e2d\u5305\u542b src/lib.rs\uff0c\u5219\u5305\u5e26\u6709\u4e0e\u5176\u540c\u540d\u7684\u5e93 crate\uff0c\u4e14 src/lib.rs \u662f crate \u6839\u3002 # crate \u6839\u6587\u4ef6\u5c06\u7531 Cargo \u4f20\u9012\u7ed9 rustc \u6765\u5b9e\u9645\u6784\u5efa\u5e93\u6216\u8005\u4e8c\u8fdb\u5236\u9879\u76ee\u3002 \u5728\u6b64\uff0c\u6211\u4eec\u6709\u4e86\u4e00\u4e2a\u53ea\u5305\u542b src/main.rs \u7684\u5305\uff0c \u610f\u5473\u7740\u5b83\u53ea\u542b\u6709\u4e00\u4e2a\u540d\u4e3a my-project \u7684\u4e8c\u8fdb\u5236 crate \u3002 \u5982\u679c\u4e00\u4e2a\u5305\u540c\u65f6\u542b\u6709 src/main.rs \u548c src/lib.rs \uff0c\u5219\u5b83\u6709 \u4e24\u4e2a crate \uff1a\u4e00\u4e2a\u4e8c\u8fdb\u5236\u7684\u548c\u4e00\u4e2a\u5e93\u7684\uff0c\u4e14\u540d\u5b57\u90fd\u4e0e\u5305\u76f8\u540c\u3002 \u901a\u8fc7\u5c06\u6587\u4ef6\u653e\u5728 src/bin \u76ee\u5f55\u4e0b\uff0c\u4e00\u4e2a\u5305\u53ef\u4ee5\u62e5\u6709\u591a\u4e2a\u4e8c\u8fdb\u5236 crate \uff1a \u6bcf\u4e2a src/bin \u4e0b\u7684\u6587\u4ef6\u90fd\u4f1a\u88ab\u7f16\u8bd1\u6210\u4e00\u4e2a\u72ec\u7acb\u7684\u4e8c\u8fdb\u5236 crate\u3002 \u5b9a\u4e49\u6a21\u5757 \u4e00\u4e2a\u7b80\u5355\u7684\u53c2\u8003\uff0c\u7528\u6765\u89e3\u91ca\u6a21\u5757\u3001\u8def\u5f84\u3001use\u5173\u952e\u8bcd\u548cpub\u5173\u952e\u8bcd\u5982\u4f55\u5728\u7f16\u8bd1\u5668\u4e2d\u5de5\u4f5c\uff0c\u4ee5\u53ca\u5927\u90e8\u5206\u5f00\u53d1\u8005\u5982\u4f55\u7ec4\u7ec7\u4ed6\u4eec\u7684\u4ee3\u7801\u3002 \u4ececrate\u6839\u8282\u70b9\u5f00\u59cb : \u5f53\u7f16\u8bd1\u4e00\u4e2acrate, \u7f16\u8bd1\u5668\u9996\u5148\u5728crate\u6839\u6587\u4ef6\uff08\u901a\u5e38\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u5e93crate\u800c\u8a00\u662f src/lib.rs \uff0c\u5bf9\u4e8e\u4e00\u4e2a\u4e8c\u8fdb\u5236crate\u800c\u8a00\u662f src/main.rs \uff09\u4e2d\u5bfb\u627e\u9700\u8981\u88ab\u7f16\u8bd1\u7684\u4ee3\u7801\u3002 \u58f0\u660e\u6a21\u5757 : \u5728crate\u6839\u6587\u4ef6\u4e2d\uff0c\u4f60\u53ef\u4ee5\u58f0\u660e\u4e00\u4e2a\u65b0\u6a21\u5757\uff1b\u6bd4\u5982\uff0c\u4f60\u7528 mod garden \u58f0\u660e\u4e86\u4e00\u4e2a\u53eb\u505agarden\u7684\u6a21\u5757\u3002\u7f16\u8bd1\u5668\u4f1a\u5728\u4e0b\u5217\u8def\u5f84\u4e2d\u5bfb\u627e\u6a21\u5757\u4ee3\u7801\uff1a \u5185\u8054\uff0c\u5728\u5927\u62ec\u53f7\u4e2d\uff0c\u5f53 mod garden \u540e\u65b9\u4e0d\u662f\u4e00\u4e2a\u5206\u53f7\u800c\u662f\u4e00\u4e2a\u5927\u62ec\u53f7 \u5728\u6587\u4ef6 src/garden.rs \u5728\u6587\u4ef6 src/garden/mod.rs \u58f0\u660e\u5b50\u6a21\u5757 : \u5728\u9664\u4e86crate\u6839\u8282\u70b9\u4ee5\u5916\u7684\u5176\u4ed6\u6587\u4ef6\u4e2d\uff0c\u4f60\u53ef\u4ee5\u5b9a\u4e49 \u5b50\u6a21\u5757 \u3002\u6bd4\u5982\uff0c\u4f60\u53ef\u80fd\u5728 src/garden.rs \u4e2d\u5b9a\u4e49\u4e86 mod vegetables ;\u3002\u7f16\u8bd1\u5668\u4f1a\u5728\u4ee5\u7236\u6a21\u5757\u547d\u540d\u7684\u76ee\u5f55\u4e2d\u5bfb\u627e\u5b50\u6a21\u5757\u4ee3\u7801\uff1a \u5185\u8054, \u5728\u5927\u62ec\u53f7\u4e2d\uff0c\u5f53 mod vegetables \u540e\u65b9\u4e0d\u662f\u4e00\u4e2a\u5206\u53f7\u800c\u662f\u4e00\u4e2a\u5927\u62ec\u53f7 \u5728\u6587\u4ef6 src/garden/vegetables.rs \u5728\u6587\u4ef6 src/garden/vegetables/mod.rs \u6a21\u5757\u4e2d\u7684\u4ee3\u7801\u8def\u5f84 : \u4e00\u65e6\u4e00\u4e2a\u6a21\u5757\u662f\u4f60crate\u7684\u4e00\u90e8\u5206\uff0c \u4f60\u53ef\u4ee5\u5728\u9690\u79c1\u89c4\u5219\u5141\u8bb8\u7684\u524d\u63d0\u4e0b\uff0c\u4ece\u540c\u4e00\u4e2acrate\u5185\u7684\u4efb\u610f\u5730\u65b9\uff0c\u901a\u8fc7\u4ee3\u7801\u8def\u5f84\u5f15\u7528\u8be5\u6a21\u5757\u7684\u4ee3\u7801\u3002\u4e3e\u4f8b\u800c\u8a00\uff0c\u4e00\u4e2a garden vegetables \u6a21\u5757\u4e0b\u7684Asparagus\u7c7b\u578b\u53ef\u4ee5\u5728 crate::garden::vegetables::Asparagus \u88ab\u627e\u5230\u3002 \u79c1\u6709 vs \u516c\u7528 : \u4e00\u4e2a\u6a21\u5757\u91cc\u7684\u4ee3\u7801\u9ed8\u8ba4\u5bf9\u5176\u7236\u6a21\u5757\u79c1\u6709\u3002\u4e3a\u4e86\u4f7f\u4e00\u4e2a\u6a21\u5757\u516c\u7528\uff0c\u5e94\u5f53\u5728\u58f0\u660e\u65f6\u4f7f\u7528 pub mod \u66ff\u4ee3 mod \u3002\u4e3a\u4e86\u4f7f\u4e00\u4e2a\u516c\u7528\u6a21\u5757\u5185\u90e8\u7684\u6210\u5458\u516c\u7528\uff0c\u5e94\u5f53\u5728\u58f0\u660e\u524d\u4f7f\u7528 pub \u3002 use \u5173\u952e\u5b57 : \u5728\u4e00\u4e2a\u4f5c\u7528\u57df\u5185\uff0c use \u5173\u952e\u5b57\u521b\u5efa\u4e86\u4e00\u4e2a\u6210\u5458\u7684\u5feb\u6377\u65b9\u5f0f\uff0c\u7528\u6765\u51cf\u5c11\u957f\u8def\u5f84\u7684\u91cd\u590d\u3002\u5728\u4efb\u4f55\u53ef\u4ee5\u5f15\u7528 crate::garden::vegetables::Asparagus \u7684\u4f5c\u7528\u57df, \u4f60\u53ef\u4ee5\u901a\u8fc7 use crate::garden::vegetables::Asparagus; \u521b\u5efa\u4e00\u4e2a\u5feb\u6377\u65b9\u5f0f\uff0c\u7136\u540e\u4f60\u5c31\u53ef\u4ee5\u5728\u4f5c\u7528\u57df\u4e2d\u53ea\u5199Asparagus\u6765\u4f7f\u7528\u8be5\u7c7b\u578b\u3002 \u8fd9\u91cc\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a backyard \u7684 \u4e8c\u8fdb\u5236 crate \u6765\u8bf4\u660e\u8fd9\u4e9b\u89c4\u5219\u3002\u8be5 crate \u7684\u8def\u5f84\u540c\u6837\u547d\u540d\u4e3abackyard\uff0c\u8be5\u8def\u5f84\u5305\u542b\u4e86\u8fd9\u4e9b\u6587\u4ef6\u548c\u76ee\u5f55\uff1a backyard \u251c\u2500\u2500 Cargo.lock \u251c\u2500\u2500 Cargo.toml \u2514\u2500\u2500 src \u251c\u2500\u2500 garden \u2502 \u2514\u2500\u2500 vegetables.rs \u251c\u2500\u2500 garden.rs \u2514\u2500\u2500 main.rs # crate\u6839\u6587\u4ef6 \u6587\u4ef6\u540d: src/main.rs use crate :: garden :: vegetables :: Asparagus ; pub mod garden ; // \u544a\u8bc9\u7f16\u8bd1\u5668\u5e94\u8be5\u5305\u542b\u5728src/garden.rs\u6587\u4ef6\u4e2d\u53d1\u73b0\u7684\u4ee3\u7801 fn main () { let plant = Asparagus {}; println! ( \"I'm growing {:?}!\" , plant ); } \u6587\u4ef6\u540d: src/garden.rs pub mod vegetables ; // \u610f\u5473\u7740\u5728src/garden/vegetables.rs\u4e2d\u7684\u4ee3\u7801\u4e5f\u5e94\u8be5\u88ab\u5305\u62ec\u3002 \u6587\u4ef6\u540d: src/garden/vegetables.rs #[derive(Debug)] pub struct Asparagus {} \u5bf9\u76f8\u5173\u4ee3\u7801\u8fdb\u884c\u5206\u7ec4 \u6a21\u5757 \u53ef\u4ee5\u5c06\u4e00\u4e2a crate \u4e2d\u7684\u4ee3\u7801\u8fdb\u884c\u5206\u7ec4\uff0c\u4ee5\u63d0\u9ad8\u53ef\u8bfb\u6027\u4e0e\u91cd\u7528\u6027\u3002 \u56e0\u4e3a\u4e00\u4e2a \u6a21\u5757\u4e2d\u7684\u4ee3\u7801\u9ed8\u8ba4\u662f\u79c1\u6709\u7684 \uff0c\u6240\u4ee5\u8fd8\u53ef\u4ee5\u5229\u7528\u6a21\u5757\u63a7\u5236\u9879\u7684 \u79c1\u6709\u6027 \u3002 \u79c1\u6709\u9879\u662f\u4e0d\u53ef\u4e3a\u5916\u90e8\u4f7f\u7528\u7684\u5185\u5728\u8be6\u7ec6\u5b9e\u73b0\u3002\u4e5f\u53ef\u4ee5\u5c06\u6a21\u5757\u548c\u5b83\u5176\u4e2d\u7684\u9879\u6807\u8bb0\u4e3a\u516c\u5f00\u7684\uff0c\u8fd9\u6837\uff0c\u5916\u90e8\u4ee3\u7801\u5c31\u53ef\u4ee5\u4f7f\u7528\u5e76\u4f9d\u8d56\u4e0e\u5b83\u4eec\u3002 \u5728\u9910\u996e\u4e1a\uff0c\u9910\u9986\u4e2d\u4f1a\u6709\u4e00\u4e9b\u5730\u65b9\u88ab\u79f0\u4e4b\u4e3a \u524d\u53f0 \uff08front of house\uff09\uff0c\u8fd8\u6709\u53e6\u5916\u4e00\u4e9b\u5730\u65b9\u88ab\u79f0\u4e4b\u4e3a \u540e\u53f0 \uff08back of house\uff09\u3002 \u524d\u53f0\u662f\u62db\u5f85\u987e\u5ba2\u7684\u5730\u65b9\uff0c\u5728\u8fd9\u91cc\uff0c\u5e97\u4e3b\u53ef\u4ee5\u4e3a\u987e\u5ba2\u5b89\u6392\u5ea7\u4f4d\uff0c\u670d\u52a1\u5458\u63a5\u53d7\u987e\u5ba2\u4e0b\u5355\u548c\u4ed8\u6b3e\uff0c\u8c03\u9152\u5e08\u4f1a\u5236\u4f5c\u996e\u54c1\u3002 \u540e\u53f0\u5219\u662f\u7531\u53a8\u5e08\u5de5\u4f5c\u7684\u53a8\u623f\uff0c\u6d17\u7897\u5de5\u7684\u5de5\u4f5c\u5730\u70b9\uff0c\u4ee5\u53ca\u7ecf\u7406\u505a\u884c\u653f\u5de5\u4f5c\u7684\u5730\u65b9\u7ec4\u6210\u3002 \u53ef\u4ee5\u5c06\u51fd\u6570\u653e\u7f6e\u5230\u5d4c\u5957\u7684\u6a21\u5757\u4e2d\uff0c\u6765\u4f7f\u6211\u4eec\u7684 crate \u7ed3\u6784\u4e0e\u5b9e\u9645\u7684\u9879\u76ee\u4e1a\u52a1\u7ed3\u6784\u76f8\u540c\u3002\u901a\u8fc7\u6267\u884c cargo new --lib restaurant \uff0c \u6765\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u540d\u4e3a restaurant \u7684\u5e93\u3002\u7136\u540e\u5c06\u793a\u4f8b\u4e2d\u6240\u7f57\u5217\u51fa\u6765\u7684\u4ee3\u7801\u653e\u5165 src/lib.rs \u4e2d\uff0c\u6765\u5b9a\u4e49\u4e00\u4e9b\u6a21\u5757\u548c\u51fd\u6570\u3002 \u6587\u4ef6\u540d: src/lib.rs // \u4e00\u4e2a\u5305\u542b\u4e86\u5176\u4ed6\u5185\u7f6e\u4e86\u51fd\u6570\u7684\u6a21\u5757\u7684 front_of_house \u6a21\u5757 // \u5b9a\u4e49\u4e00\u4e2a\u6a21\u5757\uff0c\u662f\u4ee5 mod \u5173\u952e\u5b57\u4e3a\u8d77\u59cb\uff0c\u7136\u540e\u6307\u5b9a\u6a21\u5757\u7684\u540d\u5b57\uff08\u53eb\u505a front_of_house\uff09\uff0c\u5e76\u4e14\u7528\u82b1\u62ec\u53f7\u5305\u56f4\u6a21\u5757\u7684\u4e3b\u4f53\u3002 mod front_of_house { // \u5728\u6a21\u5757\u5185\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u5b9a\u4e49\u5176\u4ed6\u7684\u6a21\u5757\uff0c // hosting \u6a21\u5757 mod hosting { // \u6a21\u5757\u8fd8\u53ef\u4ee5\u4fdd\u5b58\u4e00\u4e9b\u5b9a\u4e49\u7684\u5176\u4ed6\u9879 // \u6bd4\u5982\u7ed3\u6784\u4f53\u3001\u679a\u4e3e\u3001\u5e38\u91cf\u3001traits\u3001\u6216\u8005\u51fd\u6570\u3002 fn add_to_waitlist () {} fn seat_at_table () {} } // serving \u6a21\u5757 mod serving { fn take_order () {} fn serve_order () {} fn take_payment () {} } } \u901a\u8fc7\u4f7f\u7528\u6a21\u5757\uff0c\u53ef\u4ee5\u5c06\u76f8\u5173\u7684\u5b9a\u4e49\u5206\u7ec4\u5230\u4e00\u8d77\uff0c\u5e76\u6307\u51fa\u4ed6\u4eec\u4e3a\u4ec0\u4e48\u76f8\u5173 \u3002 \u7a0b\u5e8f\u5458\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528\u8fd9\u6bb5\u4ee3\u7801\uff0c\u66f4\u52a0\u5bb9\u6613\u5730\u627e\u5230\u4ed6\u4eec\u60f3\u8981\u7684\u5b9a\u4e49\uff0c\u56e0\u4e3a\u4ed6\u4eec\u53ef\u4ee5\u57fa\u4e8e\u5206\u7ec4\u6765\u5bf9\u4ee3\u7801\u8fdb\u884c\u5bfc\u822a\uff0c\u800c\u4e0d\u9700\u8981\u9605\u8bfb\u6240\u6709\u7684\u5b9a\u4e49\u3002 \u7a0b\u5e8f\u5458\u5411\u8fd9\u6bb5\u4ee3\u7801\u4e2d\u6dfb\u52a0\u4e00\u4e2a\u65b0\u7684\u529f\u80fd\u65f6\uff0c\u4ed6\u4eec\u4e5f\u4f1a\u77e5\u9053\u4ee3\u7801\u5e94\u8be5\u653e\u7f6e\u5728\u4f55\u5904\uff0c\u53ef\u4ee5\u4fdd\u6301\u7a0b\u5e8f\u7684\u7ec4\u7ec7\u6027\u3002 \u5728\u524d\u9762\u63d0\u5230\u4e86\uff0c src/main.rs \u548c src/lib.rs \u53eb\u505a crate \u6839\u3002 \u4e4b\u6240\u4ee5\u8fd9\u6837\u53eb\u5b83\u4eec\u662f\u56e0\u4e3a\u8fd9\u4e24\u4e2a\u6587\u4ef6\u7684\u5185\u5bb9\u90fd\u5206\u522b\u5728 crate \u6a21\u5757\u7ed3\u6784\u7684\u6839\u7ec4\u6210\u4e86\u4e00\u4e2a\u540d\u4e3a crate \u7684\u6a21\u5757\uff0c\u8be5\u7ed3\u6784\u88ab\u79f0\u4e3a \u6a21\u5757\u6811 \uff08module tree\uff09\u3002 # \u793a\u4f8b\u7684\u6a21\u5757\u6811 # \u8fd9\u4e2a\u6811\u5c55\u793a\u4e86\u4e00\u4e9b\u6a21\u5757\u662f\u5982\u4f55\u88ab\u5d4c\u5165\u5230\u53e6\u4e00\u4e2a\u6a21\u5757\u7684 # \u8fd8\u5c55\u793a\u4e86\u4e00\u4e9b\u6a21\u5757\u662f\u4e92\u4e3a \u5144\u5f1f\uff08siblings\uff09 \u7684\uff0c\u8fd9\u610f\u5473\u7740\u5b83\u4eec\u5b9a\u4e49\u5728\u540c\u4e00\u6a21\u5757\u4e2d # \uff08hosting \u548c serving \u88ab\u4e00\u8d77\u5b9a\u4e49\u5728 front_of_house \u4e2d\uff09\u3002 crate \u2514\u2500\u2500 front_of_house \u251c\u2500\u2500 hosting \u2502 \u251c\u2500\u2500 add_to_waitlist \u2502 \u2514\u2500\u2500 seat_at_table \u2514\u2500\u2500 serving \u251c\u2500\u2500 take_order \u251c\u2500\u2500 serve_order \u2514\u2500\u2500 take_payment \u6cbf\u7528\u5bb6\u5ead\u5173\u7cfb\u7684\u6bd4\u55bb\uff0c\u5982\u679c\u4e00\u4e2a\u6a21\u5757 A \u88ab\u5305\u542b\u5728\u6a21\u5757 B \u4e2d\uff0c\u6211\u4eec\u5c06\u6a21\u5757 A \u79f0\u4e3a\u6a21\u5757 B \u7684 \u5b50\u6a21\u5757 \uff08child\uff09\uff0c\u6a21\u5757 B \u5219\u662f\u6a21\u5757 A \u7684 \u7236\u6a21\u5757 \uff08parent\uff09\u3002\u6ce8\u610f\uff0c\u6574\u4e2a\u6a21\u5757\u6811\u90fd\u690d\u6839\u4e8e\u540d\u4e3a crate \u7684\u9690\u5f0f\u6a21\u5757\u4e0b\u3002 \u8fd9\u4e2a\u6a21\u5757\u6811\u5f88\u50cf\u7535\u8111\u4e0a\u6587\u4ef6\u7cfb\u7edf\u7684 \u76ee\u5f55\u6811 \uff1b\u8fd9\u662f\u4e00\u4e2a\u975e\u5e38\u6070\u5f53\u7684\u7c7b\u6bd4\uff01\u5c31\u50cf\u6587\u4ef6\u7cfb\u7edf\u7684\u76ee\u5f55\uff0c\u53ef\u4ee5\u4f7f\u7528\u6a21\u5757\u6765\u7ec4\u7ec7\u4f60\u7684\u4ee3\u7801\u3002 \u5f15\u7528\u6a21\u5757 \u4f7f\u7528\u8def\u5f84\u7684\u65b9\u5f0f\uff0c\u5c31\u50cf\u5728\u6587\u4ef6\u7cfb\u7edf\u4f7f\u7528\u8def\u5f84\u4e00\u6837\u3002 \u8def\u5f84\u6709\u4e24\u79cd\u5f62\u5f0f\uff1a \u7edd\u5bf9\u8def\u5f84 \uff08absolute path\uff09\u4ece crate \u6839\u5f00\u59cb\uff0c\u4ee5 crate \u540d\u6216\u8005 \u5b57\u9762\u503c crate \u5f00\u5934\u3002 \u76f8\u5bf9\u8def\u5f84 \uff08relative path\uff09\u4ece\u5f53\u524d\u6a21\u5757\u5f00\u59cb\uff0c\u4ee5 self \u3001 super \u6216 \u5f53\u524d\u6a21\u5757\u7684\u6807\u8bc6\u7b26 \u5f00\u5934\u3002 \u7edd\u5bf9\u8def\u5f84\u548c\u76f8\u5bf9\u8def\u5f84\u90fd\u540e\u8ddf\u4e00\u4e2a\u6216\u591a\u4e2a\u7531\u53cc\u5192\u53f7\uff08 :: \uff09\u5206\u5272\u7684\u6807\u8bc6\u7b26\u3002 \u6587\u4ef6\u540d: src/lib.rs mod front_of_house { mod hosting { fn add_to_waitlist () {} } } pub fn eat_at_restaurant () { // \u7edd\u5bf9\u8def\u5f84 // \u88ab\u5b9a\u4e49\u5728\u540c\u4e00 crate \u4e2d\uff0c\u8fd9\u610f\u5473\u7740\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 crate \u5173\u952e\u5b57\u4e3a\u8d77\u59cb\u7684\u7edd\u5bf9\u8def\u5f84\u3002 crate :: front_of_house :: hosting :: add_to_waitlist (); // \u76f8\u5bf9\u8def\u5f84 // \u4ee5 front_of_house \u4e3a\u8d77\u59cb // \u4ee5\u540d\u79f0\u4e3a\u8d77\u59cb\uff0c\u610f\u5473\u7740\u8be5\u8def\u5f84\u662f\u76f8\u5bf9\u8def\u5f84\u3002 front_of_house :: hosting :: add_to_waitlist (); } // \u8fd9\u4e2a\u4f8b\u5b50\u65e0\u6cd5\u7f16\u8bd1\u901a\u8fc7, \u56e0\u4e3a hosting \u5b50\u6a21\u5757\u662f\u79c1\u6709\u7684\uff08\u9ed8\u8ba4\uff09 \u9009\u62e9\u4f7f\u7528\u76f8\u5bf9\u8def\u5f84\u8fd8\u662f\u7edd\u5bf9\u8def\u5f84\uff0c\u8fd8\u662f\u8981\u53d6\u51b3\u4e8e\u4f60\u7684\u9879\u76ee\u3002\u53d6\u51b3\u4e8e\u4f60\u662f\u66f4\u503e\u5411\u4e8e\u5c06\u9879\u7684\u5b9a\u4e49\u4ee3\u7801\u4e0e\u4f7f\u7528\u8be5\u9879\u7684\u4ee3\u7801\u5206\u5f00\u6765\u79fb\u52a8\uff0c\u8fd8\u662f\u4e00\u8d77\u79fb\u52a8\u3002 build \u62a5\u9519: $ cargo build Compiling restaurant v0.1.0 ( file:///projects/restaurant ) error [ E0603 ] : module ` hosting ` is private --> src/lib.rs:9:28 | 9 | crate::front_of_house::hosting::add_to_waitlist () ; | ^^^^^^^ private module | note: the module ` hosting ` is defined here --> src/lib.rs:2:5 | 2 | mod hosting { | ^^^^^^^^^^^ error [ E0603 ] : module ` hosting ` is private --> src/lib.rs:12:21 | 12 | front_of_house::hosting::add_to_waitlist () ; | ^^^^^^^ private module | note: the module ` hosting ` is defined here --> src/lib.rs:2:5 | 2 | mod hosting { | ^^^^^^^^^^^ For more information about this error, try ` rustc --explain E0603 ` . error: could not compile ` restaurant ` due to 2 previous errors \u9519\u8bef\u4fe1\u606f\u8bf4 hosting \u6a21\u5757\u662f\u79c1\u6709\u7684\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u793a\u4f8b\u62e5\u6709 hosting \u6a21\u5757\u548c add_to_waitlist \u51fd\u6570\u7684\u7684\u6b63\u786e\u8def\u5f84\uff0c\u4f46\u662f Rust \u4e0d\u8ba9\u6211\u4eec\u4f7f\u7528\uff0c\u56e0\u4e3a\u5b83 \u4e0d\u80fd\u8bbf\u95ee\u79c1\u6709\u7247\u6bb5 \u3002 \u6a21\u5757\u4e0d\u4ec5\u5bf9\u4e8e\u7ec4\u7ec7\u4ee3\u7801\u5f88\u6709\u7528\u3002\u8fd8\u5b9a\u4e49\u4e86 Rust \u7684 \u79c1\u6709\u6027\u8fb9\u754c \uff08privacy boundary\uff09\uff1a\u8fd9\u6761\u754c\u7ebf\u4e0d\u5141\u8bb8\u5916\u90e8\u4ee3\u7801\u4e86\u89e3\u3001\u8c03\u7528\u548c\u4f9d\u8d56\u88ab\u5c01\u88c5\u7684\u5b9e\u73b0\u7ec6\u8282\u3002\u6240\u4ee5\uff0c\u5982\u679c\u5e0c\u671b\u521b\u5efa\u4e00\u4e2a\u79c1\u6709\u51fd\u6570\u6216\u7ed3\u6784\u4f53\uff0c\u53ef\u4ee5\u5c06\u5176\u653e\u5165\u6a21\u5757\u3002 Rust \u4e2d \u9ed8\u8ba4 \u6240\u6709\u9879\uff08\u51fd\u6570\u3001\u65b9\u6cd5\u3001\u7ed3\u6784\u4f53\u3001\u679a\u4e3e\u3001\u6a21\u5757\u548c\u5e38\u91cf\uff09\u90fd\u662f\u79c1\u6709\u7684\u3002\u7236\u6a21\u5757\u4e2d\u7684\u9879\u4e0d\u80fd\u4f7f\u7528\u5b50\u6a21\u5757\u4e2d\u7684\u79c1\u6709\u9879\uff0c\u4f46\u662f\u5b50\u6a21\u5757\u4e2d\u7684\u9879\u53ef\u4ee5\u4f7f\u7528\u4ed6\u4eec\u7236\u6a21\u5757\u4e2d\u7684\u9879\u3002 \u8fd9\u662f\u56e0\u4e3a\u5b50\u6a21\u5757\u5c01\u88c5\u5e76\u9690\u85cf\u4e86\u4ed6\u4eec\u7684\u5b9e\u73b0\u8be6\u60c5\uff0c\u4f46\u662f\u5b50\u6a21\u5757\u53ef\u4ee5\u770b\u5230\u4ed6\u4eec\u5b9a\u4e49\u7684\u4e0a\u4e0b\u6587\u3002 \u7ee7\u7eed\u62ff\u9910\u9986\u4f5c\u6bd4\u55bb\uff0c\u628a\u79c1\u6709\u6027\u89c4\u5219\u60f3\u8c61\u6210\u9910\u9986\u7684\u540e\u53f0\u529e\u516c\u5ba4\uff1a\u9910\u9986\u5185\u7684\u4e8b\u52a1\u5bf9\u9910\u5385\u987e\u5ba2\u6765\u8bf4\u662f\u4e0d\u53ef\u77e5\u7684\uff0c\u4f46\u529e\u516c\u5ba4\u7ecf\u7406\u53ef\u4ee5\u6d1e\u6089\u5176\u7ecf\u8425\u7684\u9910\u5385\u5e76\u5728\u5176\u4e2d\u505a\u4efb\u4f55\u4e8b\u60c5\u3002 Rust \u9009\u62e9\u4ee5\u8fd9\u79cd\u65b9\u5f0f\u6765\u5b9e\u73b0\u6a21\u5757\u7cfb\u7edf\u529f\u80fd\uff0c\u56e0\u6b64\u9ed8\u8ba4\u9690\u85cf\u5185\u90e8\u5b9e\u73b0\u7ec6\u8282\u3002\u8fd9\u6837\u4e00\u6765\uff0c\u5c31\u77e5\u9053\u53ef\u4ee5\u66f4\u6539\u5185\u90e8\u4ee3\u7801\u7684\u54ea\u4e9b\u90e8\u5206\u800c\u4e0d\u4f1a\u7834\u574f\u5916\u90e8\u4ee3\u7801\u3002\u8fd8\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528 pub \u5173\u952e\u5b57\u6765\u521b\u5efa\u516c\u5171\u9879\uff0c\u4f7f\u5b50\u6a21\u5757\u7684\u5185\u90e8\u90e8\u5206\u66b4\u9732\u7ed9\u4e0a\u7ea7\u6a21\u5757\u3002 pub\u5173\u952e\u5b57 \u5728\u4e0a\u9762\u793a\u4f8b\u7684\u62a5\u9519\u4fe1\u606f\u4e2d\uff0c\u5b83\u544a\u8bc9\u6211\u4eec hosting \u6a21\u5757\u662f\u79c1\u6709\u7684\u3002\u60f3\u8ba9\u7236\u6a21\u5757\u4e2d\u7684 eat_at_restaurant \u51fd\u6570\u53ef\u4ee5\u8bbf\u95ee\u5b50\u6a21\u5757\u4e2d\u7684 add_to_waitlist \u51fd\u6570\uff0c\u56e0\u6b64\u6211\u4eec\u4f7f\u7528 pub \u5173\u952e\u5b57\u6765\u6807\u8bb0 hosting \u6a21\u5757\uff0c \u6587\u4ef6\u540d: src/lib.rs mod front_of_house { // \u6dfb\u52a0pub\u5173\u952e\u5b57\u4f7f\u6a21\u5757\u516c\u5f00 pub mod hosting { // \u6dfb\u52a0pub\u5173\u952e\u5b57\u4f7f\u51fd\u6570\u516c\u5f00 pub fn add_to_waitlist () {} } } pub fn eat_at_restaurant () { // \u7edd\u5bf9\u8def\u5f84 crate :: front_of_house :: hosting :: add_to_waitlist (); // \u76f8\u5bf9\u8def\u5f84 front_of_house :: hosting :: add_to_waitlist (); } // \u73b0\u5728\u4ee3\u7801\u53ef\u4ee5\u7f16\u8bd1\u901a\u8fc7\u4e86\uff01 \u79c1\u6709\u6027\u89c4\u5219\u4e0d\u4f46\u5e94\u7528\u4e8e\u6a21\u5757\uff0c\u8fd8\u5e94\u7528\u4e8e\u7ed3\u6784\u4f53\u3001\u679a\u4e3e\u3001\u51fd\u6570\u548c\u65b9\u6cd5\u3002 super\u76f8\u5bf9\u8def\u5f84 \u8fd8\u53ef\u4ee5\u4f7f\u7528 super \u5f00\u5934\u6765\u6784\u5efa\u4ece\u7236\u6a21\u5757\u5f00\u59cb\u7684\u76f8\u5bf9\u8def\u5f84\u3002 \u4f3c\u4e8e\u6587\u4ef6\u7cfb\u7edf\u4e2d\u4ee5 .. \u5f00\u5934\u7684\u8bed\u6cd5\u3002 \u6587\u4ef6\u540d: src/lib.rs // \u4f7f\u7528\u4ee5 super \u5f00\u5934\u7684\u76f8\u5bf9\u8def\u5f84\u4ece\u7236\u76ee\u5f55\u5f00\u59cb\u8c03\u7528\u51fd\u6570 fn serve_order () {} mod back_of_house { fn fix_incorrect_order () { cook_order (); // super\u8868\u793a\u7236\u7ea7\u7684\u6a21\u5757 super :: serve_order (); } fn cook_order () {} } \u516c\u6709\u7684\u7ed3\u6784\u4f53\u548c\u679a\u4e3e \u8fd8\u53ef\u4ee5\u4f7f\u7528 pub \u6765\u8bbe\u8ba1\u516c\u6709\u7684 \u7ed3\u6784\u4f53 \u548c \u679a\u4e3e \uff0c\u4e0d\u8fc7\u6709\u4e00\u4e9b\u989d\u5916\u7684\u7ec6\u8282\u9700\u8981\u6ce8\u610f\u3002 \u5982\u679c\u6211\u4eec\u5728\u4e00\u4e2a\u7ed3\u6784\u4f53\u5b9a\u4e49\u7684\u524d\u9762\u4f7f\u7528\u4e86 pub \uff0c\u8fd9\u4e2a\u7ed3\u6784\u4f53\u4f1a\u53d8\u6210\u516c\u6709\u7684\uff0c\u4f46\u662f\u8fd9\u4e2a\u7ed3\u6784\u4f53\u7684\u5b57\u6bb5\u4ecd\u7136\u662f\u79c1\u6709\u7684\u3002\u53ef\u4ee5\u6839\u636e\u60c5\u51b5\u51b3\u5b9a\u6bcf\u4e2a\u5b57\u6bb5\u662f\u5426\u516c\u6709\u3002 \u5728\u793a\u4f8b\u4e2d\uff0c\u5b9a\u4e49\u4e86\u4e00\u4e2a\u516c\u6709\u7ed3\u6784\u4f53 back_of_house:Breakfast \uff0c\u5176\u4e2d\u6709\u4e00\u4e2a\u516c\u6709\u5b57\u6bb5 toast \u548c\u79c1\u6709\u5b57\u6bb5 seasonal_fruit \u3002 \u8fd9\u4e2a\u4f8b\u5b50\u6a21\u62df\u7684\u60c5\u51b5\u662f\uff0c\u5728\u4e00\u5bb6\u9910\u9986\u4e2d\uff0c\u987e\u5ba2\u53ef\u4ee5\u9009\u62e9\u968f\u9910\u9644\u8d60\u7684\u9762\u5305\u7c7b\u578b\uff0c\u4f46\u662f\u53a8\u5e08\u4f1a\u6839\u636e\u5b63\u8282\u548c\u5e93\u5b58\u60c5\u51b5\u6765\u51b3\u5b9a\u968f\u9910\u642d\u914d\u7684\u6c34\u679c\u3002\u9910\u9986\u53ef\u7528\u7684\u6c34\u679c\u53d8\u5316\u662f\u5f88\u5feb\u7684\uff0c\u6240\u4ee5\u987e\u5ba2\u4e0d\u80fd\u9009\u62e9\u6c34\u679c\uff0c\u751a\u81f3\u65e0\u6cd5\u770b\u5230\u4ed6\u4eec\u5c06\u4f1a\u5f97\u5230\u4ec0\u4e48\u6c34\u679c\u3002 mod back_of_house { pub struct Breakfast { pub toast : String , seasonal_fruit : String , } impl Breakfast { pub fn summer ( toast : & str ) -> Breakfast { Breakfast { toast : String :: from ( toast ), seasonal_fruit : String :: from ( \"peaches\" ), } } } } pub fn eat_at_restaurant () { // \u5728\u590f\u5929\u8ba2\u8d2d\u4e00\u4e2a\u9ed1\u9ea6\u571f\u53f8\u4f5c\u4e3a\u65e9\u9910 let mut meal = back_of_house :: Breakfast :: summer ( \"Rye\" ); // toast \u5b57\u6bb5\u662f\u516c\u6709\u7684, \u6240\u4ee5\u53ef\u4ee5\u4f7f\u7528\u70b9\u53f7\u6765\u968f\u610f\u7684\u8bfb\u5199 toast \u5b57\u6bb5\u3002 // \u6539\u53d8\u4e3b\u610f\u66f4\u6362\u60f3\u8981\u9762\u5305\u7684\u7c7b\u578b meal . toast = String :: from ( \"Wheat\" ); println! ( \"I'd like {} toast please\" , meal . toast ); // \u5982\u679c\u53d6\u6d88\u4e0b\u4e00\u884c\u7684\u6ce8\u91ca\u4ee3\u7801\u4e0d\u80fd\u7f16\u8bd1\uff1b // \u4e0d\u5141\u8bb8\u67e5\u770b\u6216\u4fee\u6539\u65e9\u9910\u9644\u5e26\u7684\u5b63\u8282\u6c34\u679c // \u56e0\u4e3a seasonal_fruit \u662f\u79c1\u6709\u7684, \u6240\u4ee5\u4e0d\u80fd\u7528\u70b9\u53f7\u6765\u968f\u610f\u7684\u8bfb\u5199 seasonal_fruit \u5b57\u6bb5\u3002 // meal.seasonal_fruit = String::from(\"blueberries\"); } \u6ce8\u610f \u56e0\u4e3a back_of_house::Breakfast \u5177\u6709\u79c1\u6709\u5b57\u6bb5\uff0c\u6240\u4ee5\u8fd9\u4e2a\u7ed3\u6784\u4f53 \u9700\u8981\u63d0\u4f9b\u4e00\u4e2a\u516c\u5171\u7684\u5173\u8054\u51fd\u6570\u6765\u6784\u9020 Breakfast \u7684\u5b9e\u4f8b (\u8fd9\u91cc\u547d\u540d\u4e3a summer )\u3002 \u5982\u679c Breakfast \u6ca1\u6709\u8fd9\u6837\u7684\u51fd\u6570\uff0c\u5c06\u65e0\u6cd5\u5728 eat_at_restaurant \u4e2d\u521b\u5efa Breakfast \u5b9e\u4f8b\uff0c \u56e0\u4e3a\u6211\u4eec\u4e0d\u80fd\u5728 eat_at_restaurant \u4e2d\u8bbe\u7f6e\u79c1\u6709\u5b57\u6bb5 seasonal_fruit \u7684\u503c\u3002 \u4e0e\u4e4b\u76f8\u53cd\uff0c\u5982\u679c\u5c06 \u679a\u4e3e \u8bbe\u4e3a\u516c\u6709\uff0c\u5219\u5b83\u7684\u6240\u6709\u6210\u5458\u90fd\u5c06\u53d8\u4e3a\u516c\u6709\u3002\u53ea\u9700\u8981\u5728 enum \u5173\u952e\u5b57\u524d\u9762\u52a0\u4e0a pub // \u8bbe\u8ba1\u516c\u6709\u679a\u4e3e\uff0c\u4f7f\u5176\u6240\u6709\u6210\u5458\u516c\u6709 mod back_of_house { pub enum Appetizer { Soup , Salad , } } pub fn eat_at_restaurant () { let order1 = back_of_house :: Appetizer :: Soup ; let order2 = back_of_house :: Appetizer :: Salad ; } \u5982\u679c\u679a\u4e3e\u6210\u5458\u4e0d\u662f\u516c\u6709\u7684\uff0c\u90a3\u4e48\u679a\u4e3e\u4f1a\u663e\u5f97\u7528\u5904\u4e0d\u5927\uff1b \u7ed9\u679a\u4e3e\u7684\u6240\u6709\u6210\u5458\u6328\u4e2a\u6dfb\u52a0 pub \u662f\u5f88\u4ee4\u4eba\u607c\u706b\u7684\uff0c\u56e0\u6b64\u679a\u4e3e\u6210\u5458\u9ed8\u8ba4\u5c31\u662f\u516c\u6709\u7684\u3002 \u7ed3\u6784\u4f53\u901a\u5e38\u4f7f\u7528\u65f6\uff0c\u4e0d\u5fc5\u5c06\u5b83\u4eec\u7684\u5b57\u6bb5\u516c\u6709\u5316\uff0c\u56e0\u6b64\u7ed3\u6784\u4f53\u9075\u5faa\u5e38\u89c4\uff0c\u5185\u5bb9\u5168\u90e8\u662f\u79c1\u6709\u7684\uff0c\u9664\u975e\u4f7f\u7528 pub \u5173\u952e\u5b57\u3002 use\u5173\u952e\u5b57 \u53ef\u4ee5\u4f7f\u7528 use \u5173\u952e\u5b57\u5c06\u8def\u5f84\u4e00\u6b21\u6027\u5f15\u5165\u4f5c\u7528\u57df\uff0c\u7136\u540e\u8c03\u7528\u8be5\u8def\u5f84\u4e2d\u7684\u9879\uff0c\u5c31\u5982\u540c\u5b83\u4eec\u662f\u672c\u5730\u9879\u4e00\u6837\u3002 mod front_of_house { pub mod hosting { pub fn add_to_waitlist () {} } } // \u4f7f\u7528 use \u5c06\u6a21\u5757\u5f15\u5165\u4f5c\u7528\u57df use crate :: front_of_house :: hosting ; pub fn eat_at_restaurant () { hosting :: add_to_waitlist (); hosting :: add_to_waitlist (); hosting :: add_to_waitlist (); } \u4f5c\u7528\u57df\u4e2d\u589e\u52a0 use \u548c\u8def\u5f84\u7c7b\u4f3c\u4e8e\u5728\u6587\u4ef6\u7cfb\u7edf\u4e2d\u521b\u5efa\u8f6f\u8fde\u63a5\uff08\u7b26\u53f7\u8fde\u63a5\uff0csymbolic link\uff09 \u901a\u8fc7\u5728 crate \u6839\u589e\u52a0 use crate::front_of_house::hosting \uff0c\u73b0\u5728 hosting \u5728\u4f5c\u7528\u57df\u4e2d\u5c31\u662f\u6709\u6548\u7684\u540d\u79f0\u4e86\uff0c \u5982\u540c hosting \u6a21\u5757 \u88ab\u5b9a\u4e49 \u4e8e crate \u6839\u4e00\u6837\u3002\u901a\u8fc7 use \u5f15\u5165\u4f5c\u7528\u57df\u7684\u8def\u5f84 \u4e5f\u4f1a\u68c0\u67e5\u79c1\u6709\u6027 \uff0c\u540c\u5176\u5b83\u8def\u5f84\u4e00\u6837\u3002 // \u5f15\u5165\u4f5c\u7528\u57df\u7684\u4e60\u60ef\u7528\u6cd5 mod front_of_house { pub mod hosting { pub fn add_to_waitlist () {} } } // \u4f7f\u7528 use \u548c\u76f8\u5bf9\u8def\u5f84\u6765\u5c06\u4e00\u4e2a\u9879\u5f15\u5165\u4f5c\u7528\u57df use self :: front_of_house :: hosting ; pub fn eat_at_restaurant () { hosting :: add_to_waitlist (); hosting :: add_to_waitlist (); hosting :: add_to_waitlist (); } mod front_of_house { pub mod hosting { pub fn add_to_waitlist () {} } } use crate :: front_of_house :: hosting :: add_to_waitlist ; pub fn eat_at_restaurant () { add_to_waitlist (); add_to_waitlist (); add_to_waitlist (); } \u60ef\u7528\u7684 use \u8def\u5f84 use \u5c06\u51fd\u6570\u5f15\u5165\u4f5c\u7528\u57df\u7684\u4e60\u60ef\u7528\u6cd5\u3002\u5c31\u662f\u4f7f\u7528 use \u5c06\u51fd\u6570\u7684\u7236\u6a21\u5757\u5f15\u5165\u4f5c\u7528\u57df\uff0c\u5fc5\u987b\u5728\u8c03\u7528\u51fd\u6570\u65f6\u6307\u5b9a\u7236\u6a21\u5757\uff0c\u8fd9\u6837\u53ef\u4ee5\u6e05\u6670\u5730\u8868\u660e\u51fd\u6570\u4e0d\u662f\u5728\u672c\u5730\u5b9a\u4e49\u7684\uff0c\u540c\u65f6\u4f7f\u5b8c\u6574\u8def\u5f84\u7684\u91cd\u590d\u5ea6\u6700\u5c0f\u5316\u3002 \u5982\u4e0b\u793a\u4f8b\u4e2d\u7684\u4ee3\u7801\u4e0d\u6e05\u695a add_to_waitlist \u662f\u5728\u54ea\u91cc\u88ab\u5b9a\u4e49\u7684\u3002 mod front_of_house { pub mod hosting { pub fn add_to_waitlist () {} } } use crate :: front_of_house :: hosting :: add_to_waitlist ; pub fn eat_at_restaurant () { // \u6b64\u65f6\u5bb9\u6613\u4e0d\u77e5 add_to_waitlist \u662f\u5728\u54ea\u91cc\u88ab\u5b9a\u4e49\u7684\u3002 add_to_waitlist (); add_to_waitlist (); add_to_waitlist (); } \u4f7f\u7528 use \u5f15\u5165\u7ed3\u6784\u4f53\u3001\u679a\u4e3e\u548c\u5176\u4ed6\u9879\u65f6\uff0c\u4e60\u60ef\u662f\u6307\u5b9a\u5b83\u4eec\u7684\u5b8c\u6574\u8def\u5f84\u3002 // \u5c06 HashMap \u5f15\u5165\u4f5c\u7528\u57df\u7684\u4e60\u60ef\u7528\u6cd5 use std :: collections :: HashMap ; fn main () { let mut map = HashMap :: new (); map . insert ( 1 , 2 ); } \u8fd9\u79cd\u4e60\u60ef\u7528\u6cd5\u80cc\u540e\u6ca1\u6709\u4ec0\u4e48\u786c\u6027\u8981\u6c42\uff1a\u5b83\u53ea\u662f\u4e00\u79cd\u60ef\u4f8b\uff0c\u4eba\u4eec\u5df2\u7ecf\u4e60\u60ef\u4e86\u4ee5\u8fd9\u79cd\u65b9\u5f0f\u9605\u8bfb\u548c\u7f16\u5199 Rust \u4ee3\u7801\u3002 \u8fd9\u4e2a\u4e60\u60ef\u7528\u6cd5\u6709\u4e00\u4e2a\u4f8b\u5916\uff0c\u90a3\u5c31\u662f\u6211\u4eec\u60f3\u4f7f\u7528 use \u8bed\u53e5\u5c06\u4e24\u4e2a\u5177\u6709\u76f8\u540c\u540d\u79f0\u7684\u9879\u5e26\u5165\u4f5c\u7528\u57df\uff0c\u56e0\u4e3a Rust \u4e0d\u5141\u8bb8\u8fd9\u6837\u505a\u3002 // \u5c55\u793a\u4e86\u5982\u4f55\u5c06\u4e24\u4e2a\u5177\u6709\u76f8\u540c\u540d\u79f0\u4f46\u4e0d\u540c\u7236\u6a21\u5757\u7684 Result \u7c7b\u578b\u5f15\u5165\u4f5c\u7528\u57df\uff0c\u4ee5\u53ca\u5982\u4f55\u5f15\u7528\u5b83\u4eec\u3002 use std :: fmt ; use std :: io ; fn function1 () -> fmt :: Result { // --snip-- } fn function2 () -> io :: Result < () > { // --snip-- } // \u4f7f\u7528\u7236\u6a21\u5757\u53ef\u4ee5\u533a\u5206\u8fd9\u4e24\u4e2a Result \u7c7b\u578b\u3002 as \u5173\u952e\u5b57 \u4f7f\u7528 use \u5c06\u4e24\u4e2a\u540c\u540d\u7c7b\u578b\u5f15\u5165\u540c\u4e00\u4f5c\u7528\u57df\u8fd9\u4e2a\u95ee\u9898\u8fd8\u6709\u53e6\u4e00\u4e2a\u89e3\u51b3\u529e\u6cd5\uff1a \u5728\u8fd9\u4e2a\u7c7b\u578b\u7684\u8def\u5f84\u540e\u9762\uff0c\u4f7f\u7528 as \u6307\u5b9a\u4e00\u4e2a\u65b0\u7684\u672c\u5730\u540d\u79f0\u6216\u8005\u522b\u540d\u3002 // \u901a\u8fc7 as \u91cd\u547d\u540d\u5176\u4e2d\u4e00\u4e2a Result \u7c7b\u578b use std :: fmt :: Result ; use std :: io :: Result as IoResult ; fn function1 () -> Result { // --snip-- } fn function2 () -> IoResult < () > { // --snip-- } pub use\u91cd\u5bfc\u51fa \u4f7f\u7528 use \u5173\u952e\u5b57\uff0c \u5c06\u67d0\u4e2a\u540d\u79f0\u5bfc\u5165\u5f53\u524d\u4f5c\u7528\u57df\u540e\uff0c\u8fd9\u4e2a\u540d\u79f0\u5728\u6b64\u4f5c\u7528\u57df\u4e2d\u5c31\u53ef\u4ee5\u4f7f\u7528\u4e86\uff0c\u4f46\u5b83\u5bf9\u6b64\u4f5c\u7528\u57df\u4e4b\u5916\u8fd8\u662f\u79c1\u6709\u7684 \u3002 \u5982\u679c\u60f3\u8ba9\u5176\u4ed6\u4eba\u8c03\u7528\u6211\u4eec\u7684\u4ee3\u7801\u65f6\uff0c\u4e5f\u80fd\u591f\u6b63\u5e38\u4f7f\u7528\u8fd9\u4e2a\u540d\u79f0\uff0c\u5c31\u597d\u50cf\u5b83\u672c\u6765\u5c31\u5728\u5f53\u524d\u4f5c\u7528\u57df\u4e00\u6837\uff0c\u90a3\u6211\u4eec\u53ef\u4ee5\u5c06 pub \u548c use \u5408\u8d77\u6765\u4f7f\u7528\u3002 \u8fd9\u79cd\u6280\u672f\u88ab\u79f0\u4e3a \u201c \u91cd\u5bfc\u51fa \uff08re-exporting\uff09\u201d\uff1a\u6211\u4eec\u4e0d\u4ec5\u5c06\u4e00\u4e2a\u540d\u79f0\u5bfc\u5165\u4e86\u5f53\u524d\u4f5c\u7528\u57df\uff0c\u8fd8\u5141\u8bb8\u522b\u4eba\u628a\u5b83\u5bfc\u5165\u4ed6\u4eec\u81ea\u5df1\u7684\u4f5c\u7528\u57df\u3002 mod front_of_house { pub mod hosting { pub fn add_to_waitlist () {} } } pub use crate :: front_of_house :: hosting ; pub fn eat_at_restaurant () { hosting :: add_to_waitlist (); hosting :: add_to_waitlist (); hosting :: add_to_waitlist (); } \u901a\u8fc7 pub use \u91cd\u5bfc\u51fa\uff0c\u5916\u90e8\u4ee3\u7801\u73b0\u5728\u53ef\u4ee5\u901a\u8fc7\u65b0\u8def\u5f84 restaurant::hosting::add_to_waitlist \u6765\u8c03\u7528 add_to_waitlist \u51fd\u6570\u3002 \u5982\u679c\u6ca1\u6709\u6307\u5b9a pub use \uff0c\u5916\u90e8\u4ee3\u7801\u9700\u5728\u5176\u4f5c\u7528\u57df\u4e2d\u8c03\u7528 restaurant::front_of_house::hosting::add_to_waitlist \u3002 \u5f53\u4f60\u4ee3\u7801\u7684\u5185\u90e8\u7ed3\u6784\u4e0e\u8c03\u7528\u4f60\u4ee3\u7801\u7684\u7a0b\u5e8f\u5458\u6240\u60f3\u8c61\u7684\u7ed3\u6784\u4e0d\u540c\u65f6\uff0c\u91cd\u5bfc\u51fa\u4f1a\u5f88\u6709\u7528\u3002 \u4f8b\u5982\uff0c\u5728\u8fd9\u4e2a\u9910\u9986\u7684\u6bd4\u55bb\u4e2d\uff0c\u7ecf\u8425\u9910\u9986\u7684\u4eba\u4f1a\u60f3\u5230\u201c\u524d\u53f0\u201d\u548c\u201c\u540e\u53f0\u201d\u3002\u4f46\u987e\u5ba2\u5728\u5149\u987e\u4e00\u5bb6\u9910\u9986\u65f6\uff0c\u53ef\u80fd\u4e0d\u4f1a\u4ee5\u8fd9\u4e9b\u672f\u8bed\u6765\u8003\u8651\u9910\u9986\u7684\u5404\u4e2a\u90e8\u5206\u3002 \u4f7f\u7528 pub use \uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4e00\u79cd\u7ed3\u6784\u7f16\u5199\u4ee3\u7801\uff0c\u5374\u5c06\u4e0d\u540c\u7684\u7ed3\u6784\u5f62\u5f0f\u66b4\u9732\u51fa\u6765\u3002\u8fd9\u6837\u505a\u4f7f\u6211\u4eec\u7684\u5e93 \u4e95\u4e95\u6709\u6761 \uff0c \u4e5f\u4f7f\u5f00\u53d1\u8fd9\u4e2a\u5e93\u7684\u7a0b\u5e8f\u5458\u548c\u8c03\u7528\u8fd9\u4e2a\u5e93\u7684\u7a0b\u5e8f\u5458\u90fd\u66f4\u52a0\u65b9\u4fbf\u3002 \u4f7f\u7528\u5916\u90e8\u5305 \u5728\u7f16\u5199\u731c\u731c\u770b\u6e38\u620f\u65f6\u3002\u9879\u76ee\u4f7f\u7528\u4e86\u4e00\u4e2a\u5916\u90e8\u5305\uff0c rand \uff0c\u6765\u751f\u6210\u968f\u673a\u6570\u3002\u4e3a\u4e86\u5728\u9879\u76ee\u4e2d\u4f7f\u7528 rand \uff0c\u5728 Cargo.toml \u4e2d\u52a0\u5165\u4e86\u5982\u4e0b\u884c\uff1a rand = \"0.8.3\" // \u544a\u8bc9\u4e86 Cargo \u8981\u4ece crates.io \u4e0b\u8f7d rand \u548c\u5176\u4f9d\u8d56\uff0c\u5e76\u4f7f\u5176\u53ef\u5728\u9879\u76ee\u4ee3\u7801\u4e2d\u4f7f\u7528\u3002 \u63a5\u7740\uff0c\u4e3a\u4e86\u5c06 rand \u5b9a\u4e49\u5f15\u5165\u9879\u76ee\u5305\u7684\u4f5c\u7528\u57df\uff0c\u52a0\u5165\u4e00\u884c use \u8d77\u59cb\u7684\u5305\u540d\uff0c\u5b83\u4ee5 rand \u5305\u540d\u5f00\u5934\u5e76\u5217\u51fa\u4e86\u9700\u8981\u5f15\u5165\u4f5c\u7528\u57df\u7684\u9879\u3002\u66fe\u5c06 Rng trait \u5f15\u5165\u4f5c\u7528\u57df\u5e76\u8c03\u7528\u4e86 rand::thread_rng \u51fd\u6570\uff1a use rand :: Rng ; fn main () { let secret_number = rand :: thread_rng (). gen_range ( 1 ..= 100 ); } crates.io \u4e0a\u6709\u5f88\u591a Rust \u793e\u533a\u6210\u5458\u53d1\u5e03\u7684\u5305\uff0c\u5c06\u5176\u5f15\u5165\u81ea\u5df1\u7684\u9879\u76ee\u90fd\u9700\u8981\u4e00\u9053\u76f8\u540c\u7684\u6b65\u9aa4\uff1a \u5728 Cargo.toml \u5217\u51fa\u5b83\u4eec\u5e76\u901a\u8fc7 use \u5c06\u5176\u4e2d\u5b9a\u4e49\u7684\u9879\u5f15\u5165\u9879\u76ee\u5305\u7684\u4f5c\u7528\u57df\u4e2d\u3002 \u6ce8\u610f \u6807\u51c6\u5e93\uff08std\uff09 \u5bf9\u4e8e\u4f60\u7684\u5305\u6765\u8bf4\u4e5f\u662f\u5916\u90e8 crate \u3002\u56e0\u4e3a\u6807\u51c6\u5e93\u968f Rust \u8bed\u8a00\u4e00\u540c\u5206\u53d1\uff0c\u65e0\u9700\u4fee\u6539 Cargo.toml \u6765\u5f15\u5165 std \uff0c\u4e0d\u8fc7\u9700\u8981\u901a\u8fc7 use \u5c06\u6807\u51c6\u5e93\u4e2d\u5b9a\u4e49\u7684\u9879\u5f15\u5165\u9879\u76ee\u5305\u7684\u4f5c\u7528\u57df\u4e2d\u6765\u5f15\u7528\u5b83\u4eec\uff0c\u6bd4\u5982\u4f7f\u7528\u7684 HashMap \uff1a use std :: collections :: HashMap ; // \u4ee5\u6807\u51c6\u5e93 crate \u540d std \u5f00\u5934\u7684\u7edd\u5bf9\u8def\u5f84\u3002 \u5d4c\u5957\u8def\u5f84 \u5f53\u9700\u8981\u5f15\u5165\u5f88\u591a\u5b9a\u4e49\u4e8e\u76f8\u540c\u5305\u6216\u76f8\u540c\u6a21\u5757\u7684\u9879\u65f6\uff0c\u4e3a\u6bcf\u4e00\u9879\u5355\u72ec\u5217\u51fa\u4e00\u884c\u4f1a\u5360\u7528\u6e90\u7801\u5f88\u5927\u7684\u7a7a\u95f4\u3002 // --snip-- use std :: cmp :: Ordering ; use std :: io ; // --snip-- \u53ef\u4ee5\u4f7f\u7528\u5d4c\u5957\u8def\u5f84\u5c06\u76f8\u540c\u7684\u9879\u5728\u4e00\u884c\u4e2d\u5f15\u5165\u4f5c\u7528\u57df\u3002 // --snip-- use std :: { cmp :: Ordering , io }; // --snip-- \u5728\u8f83\u5927\u7684\u7a0b\u5e8f\u4e2d\uff0c\u4f7f\u7528\u5d4c\u5957\u8def\u5f84\u4ece\u76f8\u540c\u5305\u6216\u6a21\u5757\u4e2d\u5f15\u5165\u5f88\u591a\u9879\uff0c\u53ef\u4ee5\u663e\u8457\u51cf\u5c11\u6240\u9700\u7684\u72ec\u7acb use \u8bed\u53e5\u7684\u6570\u91cf\uff01 \u53ef\u4ee5\u5728\u8def\u5f84\u7684\u4efb\u4f55\u5c42\u7ea7\u4f7f\u7528\u5d4c\u5957\u8def\u5f84\uff0c\u8fd9\u5728\u7ec4\u5408\u4e24\u4e2a\u5171\u4eab\u5b50\u8def\u5f84\u7684 use \u8bed\u53e5\u65f6\u975e\u5e38\u6709\u7528\u3002 use std :: io ; use std :: io :: Write ; \u4e3a: // \u540c\u65f6\u5f15\u5165\u4f5c\u7528\u57df\u3002 use std :: io :: { self , Write }; glob\u8fd0\u7b97\u7b26 \u5982\u679c\u5e0c\u671b\u5c06\u4e00\u4e2a\u8def\u5f84\u4e0b \u6240\u6709 \u516c\u6709\u9879\u5f15\u5165\u4f5c\u7528\u57df\uff0c\u53ef\u4ee5\u6307\u5b9a\u8def\u5f84\u540e\u8ddf * \uff0cglob \u8fd0\u7b97\u7b26\uff1a use std :: collections :: * ; // \u4f7f\u7528 glob \u8fd0\u7b97\u7b26\u65f6\u8bf7\u591a\u52a0\u5c0f\u5fc3\uff01 // Glob \u4f1a\u4f7f\u5f97\u6211\u4eec\u96be\u4ee5\u63a8\u5bfc\u4f5c\u7528\u57df\u4e2d\u6709\u4ec0\u4e48\u540d\u79f0\u548c\u5b83\u4eec\u662f\u5728\u4f55\u5904\u5b9a\u4e49\u7684\u3002 glob \u8fd0\u7b97\u7b26\u7ecf\u5e38\u7528\u4e8e\u6d4b\u8bd5\u6a21\u5757 tests \u4e2d\uff0c\u8fd9\u65f6\u4f1a\u5c06\u6240\u6709\u5185\u5bb9\u5f15\u5165\u4f5c\u7528\u57df\uff1b glob \u8fd0\u7b97\u7b26\u6709\u65f6\u4e5f\u7528\u4e8e prelude \u6a21\u5f0f\uff1b\u67e5\u770b \u6807\u51c6\u5e93\u4e2d\u7684\u6587\u6863 \u4e86\u89e3\u8fd9\u4e2a\u6a21\u5f0f\u7684\u66f4\u591a\u7ec6\u8282\u3002 \u6a21\u5757\u62c6\u5206 \u5f53\u6a21\u5757\u53d8\u5f97\u66f4\u5927\u65f6\uff0c\u53ef\u80fd\u60f3\u8981\u5c06\u5b83\u4eec\u7684\u5b9a\u4e49\u79fb\u52a8\u5230\u5355\u72ec\u7684\u6587\u4ef6\u4e2d\uff0c\u4ece\u800c\u4f7f\u4ee3\u7801\u66f4\u5bb9\u6613\u9605\u8bfb\u3002 \u4f8b\u5982\uff0c\u5c06 front_of_house \u6a21\u5757\u79fb\u52a8\u5230\u5c5e\u4e8e\u5b83\u81ea\u5df1\u7684\u6587\u4ef6 src/front_of_house.rs \u4e2d\uff0c\u901a\u8fc7\u6539\u53d8 crate \u6839\u6587\u4ef6\uff0c\u4f7f\u5176\u5305\u542b\u793a\u4f8b\u7684\u4ee3\u7801\u3002 \u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0ccrate \u6839\u6587\u4ef6\u662f src/lib.rs \uff0c\u8fd9\u4e5f\u540c\u6837\u9002\u7528\u4e8e\u4ee5 src/main.rs \u4e3a crate \u6839\u6587\u4ef6\u7684\u4e8c\u8fdb\u5236 crate \u9879\u3002 // \u6587\u4ef6\u540d: src/lib.rs // \u58f0\u660e front_of_house \u6a21\u5757\uff0c\u5176\u5185\u5bb9\u5c06\u4f4d\u4e8e src/front_of_house.rs mod front_of_house ; pub use crate :: front_of_house :: hosting ; pub fn eat_at_restaurant () { hosting :: add_to_waitlist (); hosting :: add_to_waitlist (); hosting :: add_to_waitlist (); } src/front_of_house.rs \u4f1a\u83b7\u53d6 front_of_house \u6a21\u5757\u7684\u5b9a\u4e49\u5185\u5bb9 // \u6587\u4ef6\u540d: src/front_of_house.rs // \u5728 src/front_of_house.rs \u4e2d\u5b9a\u4e49 front_of_house \u6a21\u5757 pub mod hosting { pub fn add_to_waitlist () {} } \u5728 mod front_of_house \u540e\u4f7f\u7528 \u5206\u53f7 \uff0c\u800c\u4e0d\u662f \u4ee3\u7801\u5757 \uff0c\u8fd9\u5c06\u544a\u8bc9 Rust \u5728\u53e6\u4e00\u4e2a\u4e0e\u6a21\u5757\u540c\u540d\u7684\u6587\u4ef6\u4e2d\u52a0\u8f7d\u6a21\u5757\u7684\u5185\u5bb9\u3002 \u7ee7\u7eed\u91cd\u6784\u4f8b\u5b50\uff0c\u5c06 hosting \u6a21\u5757\u4e5f\u63d0\u53d6\u5230\u5176\u81ea\u5df1\u7684\u6587\u4ef6\u4e2d\uff0c\u4ec5\u5bf9 src/front_of_house.rs \u5305\u542b hosting \u6a21\u5757\u7684\u58f0\u660e\u8fdb\u884c\u4fee\u6539\uff1a // \u6587\u4ef6\u540d: src/front_of_house.rs pub mod hosting ; \u63a5\u7740\u6211\u4eec\u521b\u5efa\u4e00\u4e2a src/front_of_house \u76ee\u5f55\u548c\u4e00\u4e2a\u5305\u542b hosting \u6a21\u5757\u5b9a\u4e49\u7684 src/front_of_house/hosting.rs \u6587\u4ef6\uff1a // \u6587\u4ef6\u540d: src/front_of_house/hosting.rs pub fn add_to_waitlist () {} \u6a21\u5757\u6811\u4f9d\u7136\u4fdd\u6301\u76f8\u540c\uff0c eat_at_restaurant \u4e2d\u7684\u51fd\u6570\u8c03\u7528\u4e5f\u65e0\u9700\u4fee\u6539\u7ee7\u7eed\u4fdd\u6301\u6709\u6548\uff0c\u5373\u4fbf\u5176\u5b9a\u4e49\u5b58\u5728\u4e8e\u4e0d\u540c\u7684\u6587\u4ef6\u4e2d\u3002 \u8fd9\u4e2a\u6280\u5de7\u53ef\u4ee5\u5728\u6a21\u5757\u4ee3\u7801\u589e\u957f\u65f6\uff0c\u5c06\u5b83\u4eec\u79fb\u52a8\u5230\u65b0\u6587\u4ef6\u4e2d\u3002 \u6ce8\u610f\uff0c src/lib.rs \u4e2d\u7684 pub use crate::front_of_house::hosting \u8bed\u53e5\u662f\u6ca1\u6709\u6539\u53d8\u7684\uff0c\u5728\u6587\u4ef6\u4f5c\u4e3a crate \u7684\u4e00\u90e8\u5206\u800c\u7f16\u8bd1\u65f6\uff0c use \u4e0d\u4f1a\u6709\u4efb\u4f55\u5f71\u54cd\u3002 mod \u5173\u952e\u5b57\u58f0\u660e\u4e86\u6a21\u5757\uff0cRust \u4f1a\u5728\u4e0e\u6a21\u5757\u540c\u540d\u7684\u6587\u4ef6\u4e2d\u67e5\u627e\u6a21\u5757\u7684\u4ee3\u7801\u3002 \u603b\u7ed3 Rust \u63d0\u4f9b\u4e86\u5c06\u5305\u5206\u6210\u591a\u4e2a crate \uff0c\u5c06 crate \u5206\u6210\u6a21\u5757\uff0c\u4ee5\u53ca\u901a\u8fc7\u6307\u5b9a\u7edd\u5bf9\u6216\u76f8\u5bf9\u8def\u5f84\u4ece\u4e00\u4e2a\u6a21\u5757\u5f15\u7528\u53e6\u4e00\u4e2a\u6a21\u5757\u4e2d\u5b9a\u4e49\u7684\u9879\u7684\u65b9\u5f0f\u3002 \u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528 use \u8bed\u53e5\u5c06\u8def\u5f84\u5f15\u5165\u4f5c\u7528\u57df\uff0c\u8fd9\u6837\u5728\u591a\u6b21\u4f7f\u7528\u65f6\u53ef\u4ee5\u4f7f\u7528\u66f4\u77ed\u7684\u8def\u5f84\u3002 \u6a21\u5757\u5b9a\u4e49\u7684\u4ee3\u7801\u9ed8\u8ba4\u662f\u79c1\u6709\u7684\uff0c\u4e0d\u8fc7\u53ef\u4ee5\u9009\u62e9\u589e\u52a0 pub \u5173\u952e\u5b57\u4f7f\u5176\u5b9a\u4e49\u53d8\u4e3a\u516c\u6709\u3002","title":"\u5305\u3001crate\u3001\u6a21\u5757"},{"location":"packages/#crate","text":"\u5f53\u7f16\u5199\u5927\u578b\u7a0b\u5e8f\u65f6\uff0c\u7ec4\u7ec7\u4f60\u7684\u4ee3\u7801\u663e\u5f97\u5c24\u4e3a\u91cd\u8981\u3002 \u6982\u5ff5 \u201c \u4f5c\u7528\u57df\uff08scope\uff09 \u201d\uff1a\u4ee3\u7801\u6240\u5728\u7684\u5d4c\u5957\u4e0a\u4e0b\u6587\u6709\u4e00\u7ec4\u5b9a\u4e49\u4e3a \u201c in scope \u201d \u7684\u540d\u79f0\u3002 \u5f53\u9605\u8bfb\u3001\u7f16\u5199\u548c\u7f16\u8bd1\u4ee3\u7801\u65f6\uff0c\u7a0b\u5e8f\u5458\u548c\u7f16\u8bd1\u5668\u9700\u8981\u77e5\u9053\u7279\u5b9a\u4f4d\u7f6e\u7684\u7279\u5b9a\u540d\u79f0\u662f\u5426\u5f15\u7528\u4e86 \u53d8\u91cf \u3001 \u51fd\u6570 \u3001 \u7ed3\u6784\u4f53 \u3001 \u679a\u4e3e \u3001 \u6a21\u5757 \u3001 \u5e38\u91cf \u6216\u8005\u5176\u4ed6\u6709\u610f\u4e49\u7684 \u9879 \u3002 \u4f60\u53ef\u4ee5\u521b\u5efa\u4f5c\u7528\u57df\uff0c\u4ee5\u53ca\u6539\u53d8\u54ea\u4e9b\u540d\u79f0\u5728\u4f5c\u7528\u57df\u5185\u8fd8\u662f\u4f5c\u7528\u57df\u5916\u3002 \u540c\u4e00\u4e2a\u4f5c\u7528\u57df\u5185\u4e0d\u80fd\u62e5\u6709\u4e24\u4e2a\u76f8\u540c\u540d\u79f0\u7684\u9879 \u3002 Rust \u6709\u8bb8\u591a\u529f\u80fd\u53ef\u4ee5 \u7ba1\u7406\u4ee3\u7801\u7684\u7ec4\u7ec7 \uff0c\u5305\u62ec\u54ea\u4e9b\u5185\u5bb9\u53ef\u4ee5\u88ab\u516c\u5f00\uff0c\u54ea\u4e9b\u5185\u5bb9\u4f5c\u4e3a\u79c1\u6709\u90e8\u5206\uff0c\u4ee5\u53ca\u7a0b\u5e8f\u6bcf\u4e2a\u4f5c\u7528\u57df\u4e2d\u7684\u540d\u5b57\u3002\u8fd9\u4e9b\u529f\u80fd\u3002\u8fd9\u6709\u65f6\u88ab\u79f0\u4e3a \u201c \u6a21\u5757\u7cfb\u7edf \uff08the module system\uff09\u201d\uff0c\u5305\u62ec\uff1a \u5305\uff08Packages\uff09 \uff1a Cargo \u7684\u4e00\u4e2a\u529f\u80fd\uff0c\u5b83\u5141\u8bb8\u4f60\u6784\u5efa\u3001\u6d4b\u8bd5\u548c\u5206\u4eab crate\u3002 Crates \uff1a\u4e00\u4e2a\u6a21\u5757\u7684\u6811\u5f62\u7ed3\u6784\uff0c\u5b83\u5f62\u6210\u4e86\u5e93\u6216\u4e8c\u8fdb\u5236\u9879\u76ee\u3002 \u6a21\u5757\uff08Modules\uff09\u548c use \uff1a \u5141\u8bb8\u4f60\u63a7\u5236\u4f5c\u7528\u57df\u548c\u8def\u5f84\u7684\u79c1\u6709\u6027\u3002 \u8def\u5f84\uff08path\uff09 \uff1a\u4e00\u4e2a\u547d\u540d\u4f8b\u5982\u7ed3\u6784\u4f53\u3001\u51fd\u6570\u6216\u6a21\u5757\u7b49\u9879\u7684\u65b9\u5f0f","title":"\u5305\u3001crate\u3001\u6a21\u5757"},{"location":"packages/#crate_1","text":"crate \u662f Rust \u5728\u7f16\u8bd1\u65f6\u6700\u5c0f\u7684\u4ee3\u7801\u5355\u4f4d\u3002\u5982\u679c\u7528 rustc \u800c\u4e0d\u662f cargo \u6765\u7f16\u8bd1\u4e00\u4e2a\u6587\u4ef6\uff0c\u7f16\u8bd1\u5668\u8fd8\u662f\u4f1a\u5c06\u90a3\u4e2a\u6587\u4ef6\u8ba4\u4f5c\u4e00\u4e2a crate \u3002 crate \u53ef\u4ee5\u5305\u542b\u6a21\u5757\uff0c\u6a21\u5757\u53ef\u4ee5\u5b9a\u4e49\u5728\u5176\u4ed6\u6587\u4ef6\uff0c\u7136\u540e\u548c crate \u4e00\u8d77\u7f16\u8bd1\uff0c\u6211\u4eec\u4f1a\u5728\u63a5\u4e0b\u6765\u7684\u7ae0\u8282\u4e2d\u9047\u5230\u3002 crate \u6709\u4e24\u79cd\u5f62\u5f0f\uff1a \u4e8c\u8fdb\u5236\u9879 \u548c \u5e93 \u3002 \u4e8c\u8fdb\u5236\u9879 \u53ef\u4ee5\u88ab\u7f16\u8bd1\u4e3a\u53ef\u6267\u884c\u7a0b\u5e8f\uff0c\u6bd4\u5982\u4e00\u4e2a\u547d\u4ee4\u884c\u7a0b\u5e8f\u6216\u8005\u4e00\u4e2a\u670d\u52a1\u5668\u3002 \u5b83\u4eec\u5fc5\u987b\u6709\u4e00\u4e2a main \u51fd\u6570\u6765\u5b9a\u4e49\u5f53\u7a0b\u5e8f\u88ab\u6267\u884c\u7684\u65f6\u5019\u6240\u9700\u8981\u505a\u7684\u4e8b\u60c5\u3002 \u76ee\u524d\u4e3a\u6b62\u793a\u4f8b\u4e2d\u6240\u521b\u5efa\u7684 crate \u90fd\u662f\u4e8c\u8fdb\u5236\u9879\u3002 \u5e93 \u5e76\u6ca1\u6709 main \u51fd\u6570\uff0c\u5b83\u4eec\u4e5f\u4e0d\u4f1a\u7f16\u8bd1\u4e3a\u53ef\u6267\u884c\u7a0b\u5e8f\uff0c\u5b83\u4eec\u63d0\u4f9b\u4e00\u4e9b\u8bf8\u5982\u51fd\u6570\u4e4b\u7c7b\u7684\u4e1c\u897f \uff0c\u4f7f\u5176\u4ed6\u9879\u76ee\u4e5f\u80fd\u4f7f\u7528\u8fd9\u4e9b\u4e1c\u897f\u3002 \u6bd4\u5982 rand crate \u5c31\u63d0\u4f9b\u4e86\u751f\u6210\u968f\u673a\u6570\u7684\u4e1c\u897f\u3002\u5927\u591a\u6570\u65f6\u95f4 Rustaceans \u8bf4\u7684 crate \u6307\u7684\u90fd\u662f \u5e93 \uff0c\u8fd9\u4e0e\u5176\u4ed6\u7f16\u7a0b\u8bed\u8a00\u4e2d library \u6982\u5ff5\u4e00\u81f4\u3002 crate root \u662f\u4e00\u4e2a\u6e90\u6587\u4ef6\uff0cRust \u7f16\u8bd1\u5668\u4ee5\u5b83\u4e3a\u8d77\u59cb\u70b9\uff0c\u5e76\u6784\u6210\u4f60\u7684 crate \u7684\u6839\u6a21\u5757\uff08\u6211\u4eec\u5c06\u5728 \u201c \u5b9a\u4e49\u6a21\u5757\u6765\u63a7\u5236\u4f5c\u7528\u57df\u4e0e\u79c1\u6709\u6027 \u201d \u4e00\u8282\u6df1\u5165\u89e3\u8bfb\uff09\u3002 \u5305\uff08package\uff09 \u662f \u63d0\u4f9b\u4e00\u7cfb\u5217\u529f\u80fd\u7684\u4e00\u4e2a\u6216\u8005\u591a\u4e2a crate \u3002\u4e00\u4e2a\u5305\u4f1a\u5305\u542b\u4e00\u4e2a Cargo.toml \u6587\u4ef6\uff0c\u9610\u8ff0\u5982\u4f55\u53bb\u6784\u5efa\u8fd9\u4e9b crate \u3002 Cargo \u5c31\u662f\u4e00\u4e2a\u5305\u542b\u6784\u5efa\u4f60\u4ee3\u7801\u7684\u4e8c\u8fdb\u5236\u9879\u7684\u5305\u3002Cargo \u4e5f\u5305\u542b\u8fd9\u4e9b\u4e8c\u8fdb\u5236\u9879\u6240\u4f9d\u8d56\u7684 \u5e93 \u3002\u5176\u4ed6\u9879\u76ee\u4e5f\u80fd\u7528 Cargo \u5e93\u6765\u5b9e\u73b0\u4e0e Cargo \u547d\u4ee4\u884c\u7a0b\u5e8f\u4e00\u6837\u7684\u903b\u8f91\u3002 \u5305\u4e2d\u53ef\u4ee5\u5305\u542b\u81f3\u591a\u4e00\u4e2a\u5e93 crate(library crate)\u3002\u5305\u4e2d\u53ef\u4ee5\u5305\u542b\u4efb\u610f\u591a\u4e2a\u4e8c\u8fdb\u5236 crate (binary crate)\uff0c\u4f46\u662f\u5fc5\u987b\u81f3\u5c11\u5305\u542b\u4e00\u4e2a crate \uff08\u65e0\u8bba\u662f\u5e93\u7684\u8fd8\u662f\u4e8c\u8fdb\u5236\u7684\uff09\u3002 \u770b\u770b\u521b\u5efa\u5305\u7684\u65f6\u5019\u4f1a\u53d1\u751f\u4ec0\u4e48\u3002\u9996\u5148\uff0c\u8f93\u5165\u547d\u4ee4 cargo new \uff1a $ cargo new my-project Created binary ( application ) ` my-project ` package $ ls my-project Cargo.toml src # Cargo \u9075\u5faa\u7684\u4e00\u4e2a\u7ea6\u5b9a\uff1asrc/main.rs \u5c31\u662f\u4e00\u4e2a\u4e0e\u5305\u540c\u540d\u7684\u4e8c\u8fdb\u5236 crate \u7684 crate \u6839\u3002 $ ls my-project/src main.rs # \u540c\u6837\u7684\uff0cCargo \u77e5\u9053\u5982\u679c\u5305\u76ee\u5f55\u4e2d\u5305\u542b src/lib.rs\uff0c\u5219\u5305\u5e26\u6709\u4e0e\u5176\u540c\u540d\u7684\u5e93 crate\uff0c\u4e14 src/lib.rs \u662f crate \u6839\u3002 # crate \u6839\u6587\u4ef6\u5c06\u7531 Cargo \u4f20\u9012\u7ed9 rustc \u6765\u5b9e\u9645\u6784\u5efa\u5e93\u6216\u8005\u4e8c\u8fdb\u5236\u9879\u76ee\u3002 \u5728\u6b64\uff0c\u6211\u4eec\u6709\u4e86\u4e00\u4e2a\u53ea\u5305\u542b src/main.rs \u7684\u5305\uff0c \u610f\u5473\u7740\u5b83\u53ea\u542b\u6709\u4e00\u4e2a\u540d\u4e3a my-project \u7684\u4e8c\u8fdb\u5236 crate \u3002 \u5982\u679c\u4e00\u4e2a\u5305\u540c\u65f6\u542b\u6709 src/main.rs \u548c src/lib.rs \uff0c\u5219\u5b83\u6709 \u4e24\u4e2a crate \uff1a\u4e00\u4e2a\u4e8c\u8fdb\u5236\u7684\u548c\u4e00\u4e2a\u5e93\u7684\uff0c\u4e14\u540d\u5b57\u90fd\u4e0e\u5305\u76f8\u540c\u3002 \u901a\u8fc7\u5c06\u6587\u4ef6\u653e\u5728 src/bin \u76ee\u5f55\u4e0b\uff0c\u4e00\u4e2a\u5305\u53ef\u4ee5\u62e5\u6709\u591a\u4e2a\u4e8c\u8fdb\u5236 crate \uff1a \u6bcf\u4e2a src/bin \u4e0b\u7684\u6587\u4ef6\u90fd\u4f1a\u88ab\u7f16\u8bd1\u6210\u4e00\u4e2a\u72ec\u7acb\u7684\u4e8c\u8fdb\u5236 crate\u3002","title":"\u5305\u548ccrate"},{"location":"packages/#_1","text":"\u4e00\u4e2a\u7b80\u5355\u7684\u53c2\u8003\uff0c\u7528\u6765\u89e3\u91ca\u6a21\u5757\u3001\u8def\u5f84\u3001use\u5173\u952e\u8bcd\u548cpub\u5173\u952e\u8bcd\u5982\u4f55\u5728\u7f16\u8bd1\u5668\u4e2d\u5de5\u4f5c\uff0c\u4ee5\u53ca\u5927\u90e8\u5206\u5f00\u53d1\u8005\u5982\u4f55\u7ec4\u7ec7\u4ed6\u4eec\u7684\u4ee3\u7801\u3002 \u4ececrate\u6839\u8282\u70b9\u5f00\u59cb : \u5f53\u7f16\u8bd1\u4e00\u4e2acrate, \u7f16\u8bd1\u5668\u9996\u5148\u5728crate\u6839\u6587\u4ef6\uff08\u901a\u5e38\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u5e93crate\u800c\u8a00\u662f src/lib.rs \uff0c\u5bf9\u4e8e\u4e00\u4e2a\u4e8c\u8fdb\u5236crate\u800c\u8a00\u662f src/main.rs \uff09\u4e2d\u5bfb\u627e\u9700\u8981\u88ab\u7f16\u8bd1\u7684\u4ee3\u7801\u3002 \u58f0\u660e\u6a21\u5757 : \u5728crate\u6839\u6587\u4ef6\u4e2d\uff0c\u4f60\u53ef\u4ee5\u58f0\u660e\u4e00\u4e2a\u65b0\u6a21\u5757\uff1b\u6bd4\u5982\uff0c\u4f60\u7528 mod garden \u58f0\u660e\u4e86\u4e00\u4e2a\u53eb\u505agarden\u7684\u6a21\u5757\u3002\u7f16\u8bd1\u5668\u4f1a\u5728\u4e0b\u5217\u8def\u5f84\u4e2d\u5bfb\u627e\u6a21\u5757\u4ee3\u7801\uff1a \u5185\u8054\uff0c\u5728\u5927\u62ec\u53f7\u4e2d\uff0c\u5f53 mod garden \u540e\u65b9\u4e0d\u662f\u4e00\u4e2a\u5206\u53f7\u800c\u662f\u4e00\u4e2a\u5927\u62ec\u53f7 \u5728\u6587\u4ef6 src/garden.rs \u5728\u6587\u4ef6 src/garden/mod.rs \u58f0\u660e\u5b50\u6a21\u5757 : \u5728\u9664\u4e86crate\u6839\u8282\u70b9\u4ee5\u5916\u7684\u5176\u4ed6\u6587\u4ef6\u4e2d\uff0c\u4f60\u53ef\u4ee5\u5b9a\u4e49 \u5b50\u6a21\u5757 \u3002\u6bd4\u5982\uff0c\u4f60\u53ef\u80fd\u5728 src/garden.rs \u4e2d\u5b9a\u4e49\u4e86 mod vegetables ;\u3002\u7f16\u8bd1\u5668\u4f1a\u5728\u4ee5\u7236\u6a21\u5757\u547d\u540d\u7684\u76ee\u5f55\u4e2d\u5bfb\u627e\u5b50\u6a21\u5757\u4ee3\u7801\uff1a \u5185\u8054, \u5728\u5927\u62ec\u53f7\u4e2d\uff0c\u5f53 mod vegetables \u540e\u65b9\u4e0d\u662f\u4e00\u4e2a\u5206\u53f7\u800c\u662f\u4e00\u4e2a\u5927\u62ec\u53f7 \u5728\u6587\u4ef6 src/garden/vegetables.rs \u5728\u6587\u4ef6 src/garden/vegetables/mod.rs \u6a21\u5757\u4e2d\u7684\u4ee3\u7801\u8def\u5f84 : \u4e00\u65e6\u4e00\u4e2a\u6a21\u5757\u662f\u4f60crate\u7684\u4e00\u90e8\u5206\uff0c \u4f60\u53ef\u4ee5\u5728\u9690\u79c1\u89c4\u5219\u5141\u8bb8\u7684\u524d\u63d0\u4e0b\uff0c\u4ece\u540c\u4e00\u4e2acrate\u5185\u7684\u4efb\u610f\u5730\u65b9\uff0c\u901a\u8fc7\u4ee3\u7801\u8def\u5f84\u5f15\u7528\u8be5\u6a21\u5757\u7684\u4ee3\u7801\u3002\u4e3e\u4f8b\u800c\u8a00\uff0c\u4e00\u4e2a garden vegetables \u6a21\u5757\u4e0b\u7684Asparagus\u7c7b\u578b\u53ef\u4ee5\u5728 crate::garden::vegetables::Asparagus \u88ab\u627e\u5230\u3002 \u79c1\u6709 vs \u516c\u7528 : \u4e00\u4e2a\u6a21\u5757\u91cc\u7684\u4ee3\u7801\u9ed8\u8ba4\u5bf9\u5176\u7236\u6a21\u5757\u79c1\u6709\u3002\u4e3a\u4e86\u4f7f\u4e00\u4e2a\u6a21\u5757\u516c\u7528\uff0c\u5e94\u5f53\u5728\u58f0\u660e\u65f6\u4f7f\u7528 pub mod \u66ff\u4ee3 mod \u3002\u4e3a\u4e86\u4f7f\u4e00\u4e2a\u516c\u7528\u6a21\u5757\u5185\u90e8\u7684\u6210\u5458\u516c\u7528\uff0c\u5e94\u5f53\u5728\u58f0\u660e\u524d\u4f7f\u7528 pub \u3002 use \u5173\u952e\u5b57 : \u5728\u4e00\u4e2a\u4f5c\u7528\u57df\u5185\uff0c use \u5173\u952e\u5b57\u521b\u5efa\u4e86\u4e00\u4e2a\u6210\u5458\u7684\u5feb\u6377\u65b9\u5f0f\uff0c\u7528\u6765\u51cf\u5c11\u957f\u8def\u5f84\u7684\u91cd\u590d\u3002\u5728\u4efb\u4f55\u53ef\u4ee5\u5f15\u7528 crate::garden::vegetables::Asparagus \u7684\u4f5c\u7528\u57df, \u4f60\u53ef\u4ee5\u901a\u8fc7 use crate::garden::vegetables::Asparagus; \u521b\u5efa\u4e00\u4e2a\u5feb\u6377\u65b9\u5f0f\uff0c\u7136\u540e\u4f60\u5c31\u53ef\u4ee5\u5728\u4f5c\u7528\u57df\u4e2d\u53ea\u5199Asparagus\u6765\u4f7f\u7528\u8be5\u7c7b\u578b\u3002 \u8fd9\u91cc\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a backyard \u7684 \u4e8c\u8fdb\u5236 crate \u6765\u8bf4\u660e\u8fd9\u4e9b\u89c4\u5219\u3002\u8be5 crate \u7684\u8def\u5f84\u540c\u6837\u547d\u540d\u4e3abackyard\uff0c\u8be5\u8def\u5f84\u5305\u542b\u4e86\u8fd9\u4e9b\u6587\u4ef6\u548c\u76ee\u5f55\uff1a backyard \u251c\u2500\u2500 Cargo.lock \u251c\u2500\u2500 Cargo.toml \u2514\u2500\u2500 src \u251c\u2500\u2500 garden \u2502 \u2514\u2500\u2500 vegetables.rs \u251c\u2500\u2500 garden.rs \u2514\u2500\u2500 main.rs # crate\u6839\u6587\u4ef6 \u6587\u4ef6\u540d: src/main.rs use crate :: garden :: vegetables :: Asparagus ; pub mod garden ; // \u544a\u8bc9\u7f16\u8bd1\u5668\u5e94\u8be5\u5305\u542b\u5728src/garden.rs\u6587\u4ef6\u4e2d\u53d1\u73b0\u7684\u4ee3\u7801 fn main () { let plant = Asparagus {}; println! ( \"I'm growing {:?}!\" , plant ); } \u6587\u4ef6\u540d: src/garden.rs pub mod vegetables ; // \u610f\u5473\u7740\u5728src/garden/vegetables.rs\u4e2d\u7684\u4ee3\u7801\u4e5f\u5e94\u8be5\u88ab\u5305\u62ec\u3002 \u6587\u4ef6\u540d: src/garden/vegetables.rs #[derive(Debug)] pub struct Asparagus {}","title":"\u5b9a\u4e49\u6a21\u5757"},{"location":"packages/#_2","text":"\u6a21\u5757 \u53ef\u4ee5\u5c06\u4e00\u4e2a crate \u4e2d\u7684\u4ee3\u7801\u8fdb\u884c\u5206\u7ec4\uff0c\u4ee5\u63d0\u9ad8\u53ef\u8bfb\u6027\u4e0e\u91cd\u7528\u6027\u3002 \u56e0\u4e3a\u4e00\u4e2a \u6a21\u5757\u4e2d\u7684\u4ee3\u7801\u9ed8\u8ba4\u662f\u79c1\u6709\u7684 \uff0c\u6240\u4ee5\u8fd8\u53ef\u4ee5\u5229\u7528\u6a21\u5757\u63a7\u5236\u9879\u7684 \u79c1\u6709\u6027 \u3002 \u79c1\u6709\u9879\u662f\u4e0d\u53ef\u4e3a\u5916\u90e8\u4f7f\u7528\u7684\u5185\u5728\u8be6\u7ec6\u5b9e\u73b0\u3002\u4e5f\u53ef\u4ee5\u5c06\u6a21\u5757\u548c\u5b83\u5176\u4e2d\u7684\u9879\u6807\u8bb0\u4e3a\u516c\u5f00\u7684\uff0c\u8fd9\u6837\uff0c\u5916\u90e8\u4ee3\u7801\u5c31\u53ef\u4ee5\u4f7f\u7528\u5e76\u4f9d\u8d56\u4e0e\u5b83\u4eec\u3002 \u5728\u9910\u996e\u4e1a\uff0c\u9910\u9986\u4e2d\u4f1a\u6709\u4e00\u4e9b\u5730\u65b9\u88ab\u79f0\u4e4b\u4e3a \u524d\u53f0 \uff08front of house\uff09\uff0c\u8fd8\u6709\u53e6\u5916\u4e00\u4e9b\u5730\u65b9\u88ab\u79f0\u4e4b\u4e3a \u540e\u53f0 \uff08back of house\uff09\u3002 \u524d\u53f0\u662f\u62db\u5f85\u987e\u5ba2\u7684\u5730\u65b9\uff0c\u5728\u8fd9\u91cc\uff0c\u5e97\u4e3b\u53ef\u4ee5\u4e3a\u987e\u5ba2\u5b89\u6392\u5ea7\u4f4d\uff0c\u670d\u52a1\u5458\u63a5\u53d7\u987e\u5ba2\u4e0b\u5355\u548c\u4ed8\u6b3e\uff0c\u8c03\u9152\u5e08\u4f1a\u5236\u4f5c\u996e\u54c1\u3002 \u540e\u53f0\u5219\u662f\u7531\u53a8\u5e08\u5de5\u4f5c\u7684\u53a8\u623f\uff0c\u6d17\u7897\u5de5\u7684\u5de5\u4f5c\u5730\u70b9\uff0c\u4ee5\u53ca\u7ecf\u7406\u505a\u884c\u653f\u5de5\u4f5c\u7684\u5730\u65b9\u7ec4\u6210\u3002 \u53ef\u4ee5\u5c06\u51fd\u6570\u653e\u7f6e\u5230\u5d4c\u5957\u7684\u6a21\u5757\u4e2d\uff0c\u6765\u4f7f\u6211\u4eec\u7684 crate \u7ed3\u6784\u4e0e\u5b9e\u9645\u7684\u9879\u76ee\u4e1a\u52a1\u7ed3\u6784\u76f8\u540c\u3002\u901a\u8fc7\u6267\u884c cargo new --lib restaurant \uff0c \u6765\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u540d\u4e3a restaurant \u7684\u5e93\u3002\u7136\u540e\u5c06\u793a\u4f8b\u4e2d\u6240\u7f57\u5217\u51fa\u6765\u7684\u4ee3\u7801\u653e\u5165 src/lib.rs \u4e2d\uff0c\u6765\u5b9a\u4e49\u4e00\u4e9b\u6a21\u5757\u548c\u51fd\u6570\u3002 \u6587\u4ef6\u540d: src/lib.rs // \u4e00\u4e2a\u5305\u542b\u4e86\u5176\u4ed6\u5185\u7f6e\u4e86\u51fd\u6570\u7684\u6a21\u5757\u7684 front_of_house \u6a21\u5757 // \u5b9a\u4e49\u4e00\u4e2a\u6a21\u5757\uff0c\u662f\u4ee5 mod \u5173\u952e\u5b57\u4e3a\u8d77\u59cb\uff0c\u7136\u540e\u6307\u5b9a\u6a21\u5757\u7684\u540d\u5b57\uff08\u53eb\u505a front_of_house\uff09\uff0c\u5e76\u4e14\u7528\u82b1\u62ec\u53f7\u5305\u56f4\u6a21\u5757\u7684\u4e3b\u4f53\u3002 mod front_of_house { // \u5728\u6a21\u5757\u5185\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u5b9a\u4e49\u5176\u4ed6\u7684\u6a21\u5757\uff0c // hosting \u6a21\u5757 mod hosting { // \u6a21\u5757\u8fd8\u53ef\u4ee5\u4fdd\u5b58\u4e00\u4e9b\u5b9a\u4e49\u7684\u5176\u4ed6\u9879 // \u6bd4\u5982\u7ed3\u6784\u4f53\u3001\u679a\u4e3e\u3001\u5e38\u91cf\u3001traits\u3001\u6216\u8005\u51fd\u6570\u3002 fn add_to_waitlist () {} fn seat_at_table () {} } // serving \u6a21\u5757 mod serving { fn take_order () {} fn serve_order () {} fn take_payment () {} } } \u901a\u8fc7\u4f7f\u7528\u6a21\u5757\uff0c\u53ef\u4ee5\u5c06\u76f8\u5173\u7684\u5b9a\u4e49\u5206\u7ec4\u5230\u4e00\u8d77\uff0c\u5e76\u6307\u51fa\u4ed6\u4eec\u4e3a\u4ec0\u4e48\u76f8\u5173 \u3002 \u7a0b\u5e8f\u5458\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528\u8fd9\u6bb5\u4ee3\u7801\uff0c\u66f4\u52a0\u5bb9\u6613\u5730\u627e\u5230\u4ed6\u4eec\u60f3\u8981\u7684\u5b9a\u4e49\uff0c\u56e0\u4e3a\u4ed6\u4eec\u53ef\u4ee5\u57fa\u4e8e\u5206\u7ec4\u6765\u5bf9\u4ee3\u7801\u8fdb\u884c\u5bfc\u822a\uff0c\u800c\u4e0d\u9700\u8981\u9605\u8bfb\u6240\u6709\u7684\u5b9a\u4e49\u3002 \u7a0b\u5e8f\u5458\u5411\u8fd9\u6bb5\u4ee3\u7801\u4e2d\u6dfb\u52a0\u4e00\u4e2a\u65b0\u7684\u529f\u80fd\u65f6\uff0c\u4ed6\u4eec\u4e5f\u4f1a\u77e5\u9053\u4ee3\u7801\u5e94\u8be5\u653e\u7f6e\u5728\u4f55\u5904\uff0c\u53ef\u4ee5\u4fdd\u6301\u7a0b\u5e8f\u7684\u7ec4\u7ec7\u6027\u3002 \u5728\u524d\u9762\u63d0\u5230\u4e86\uff0c src/main.rs \u548c src/lib.rs \u53eb\u505a crate \u6839\u3002 \u4e4b\u6240\u4ee5\u8fd9\u6837\u53eb\u5b83\u4eec\u662f\u56e0\u4e3a\u8fd9\u4e24\u4e2a\u6587\u4ef6\u7684\u5185\u5bb9\u90fd\u5206\u522b\u5728 crate \u6a21\u5757\u7ed3\u6784\u7684\u6839\u7ec4\u6210\u4e86\u4e00\u4e2a\u540d\u4e3a crate \u7684\u6a21\u5757\uff0c\u8be5\u7ed3\u6784\u88ab\u79f0\u4e3a \u6a21\u5757\u6811 \uff08module tree\uff09\u3002 # \u793a\u4f8b\u7684\u6a21\u5757\u6811 # \u8fd9\u4e2a\u6811\u5c55\u793a\u4e86\u4e00\u4e9b\u6a21\u5757\u662f\u5982\u4f55\u88ab\u5d4c\u5165\u5230\u53e6\u4e00\u4e2a\u6a21\u5757\u7684 # \u8fd8\u5c55\u793a\u4e86\u4e00\u4e9b\u6a21\u5757\u662f\u4e92\u4e3a \u5144\u5f1f\uff08siblings\uff09 \u7684\uff0c\u8fd9\u610f\u5473\u7740\u5b83\u4eec\u5b9a\u4e49\u5728\u540c\u4e00\u6a21\u5757\u4e2d # \uff08hosting \u548c serving \u88ab\u4e00\u8d77\u5b9a\u4e49\u5728 front_of_house \u4e2d\uff09\u3002 crate \u2514\u2500\u2500 front_of_house \u251c\u2500\u2500 hosting \u2502 \u251c\u2500\u2500 add_to_waitlist \u2502 \u2514\u2500\u2500 seat_at_table \u2514\u2500\u2500 serving \u251c\u2500\u2500 take_order \u251c\u2500\u2500 serve_order \u2514\u2500\u2500 take_payment \u6cbf\u7528\u5bb6\u5ead\u5173\u7cfb\u7684\u6bd4\u55bb\uff0c\u5982\u679c\u4e00\u4e2a\u6a21\u5757 A \u88ab\u5305\u542b\u5728\u6a21\u5757 B \u4e2d\uff0c\u6211\u4eec\u5c06\u6a21\u5757 A \u79f0\u4e3a\u6a21\u5757 B \u7684 \u5b50\u6a21\u5757 \uff08child\uff09\uff0c\u6a21\u5757 B \u5219\u662f\u6a21\u5757 A \u7684 \u7236\u6a21\u5757 \uff08parent\uff09\u3002\u6ce8\u610f\uff0c\u6574\u4e2a\u6a21\u5757\u6811\u90fd\u690d\u6839\u4e8e\u540d\u4e3a crate \u7684\u9690\u5f0f\u6a21\u5757\u4e0b\u3002 \u8fd9\u4e2a\u6a21\u5757\u6811\u5f88\u50cf\u7535\u8111\u4e0a\u6587\u4ef6\u7cfb\u7edf\u7684 \u76ee\u5f55\u6811 \uff1b\u8fd9\u662f\u4e00\u4e2a\u975e\u5e38\u6070\u5f53\u7684\u7c7b\u6bd4\uff01\u5c31\u50cf\u6587\u4ef6\u7cfb\u7edf\u7684\u76ee\u5f55\uff0c\u53ef\u4ee5\u4f7f\u7528\u6a21\u5757\u6765\u7ec4\u7ec7\u4f60\u7684\u4ee3\u7801\u3002","title":"\u5bf9\u76f8\u5173\u4ee3\u7801\u8fdb\u884c\u5206\u7ec4"},{"location":"packages/#_3","text":"\u4f7f\u7528\u8def\u5f84\u7684\u65b9\u5f0f\uff0c\u5c31\u50cf\u5728\u6587\u4ef6\u7cfb\u7edf\u4f7f\u7528\u8def\u5f84\u4e00\u6837\u3002 \u8def\u5f84\u6709\u4e24\u79cd\u5f62\u5f0f\uff1a \u7edd\u5bf9\u8def\u5f84 \uff08absolute path\uff09\u4ece crate \u6839\u5f00\u59cb\uff0c\u4ee5 crate \u540d\u6216\u8005 \u5b57\u9762\u503c crate \u5f00\u5934\u3002 \u76f8\u5bf9\u8def\u5f84 \uff08relative path\uff09\u4ece\u5f53\u524d\u6a21\u5757\u5f00\u59cb\uff0c\u4ee5 self \u3001 super \u6216 \u5f53\u524d\u6a21\u5757\u7684\u6807\u8bc6\u7b26 \u5f00\u5934\u3002 \u7edd\u5bf9\u8def\u5f84\u548c\u76f8\u5bf9\u8def\u5f84\u90fd\u540e\u8ddf\u4e00\u4e2a\u6216\u591a\u4e2a\u7531\u53cc\u5192\u53f7\uff08 :: \uff09\u5206\u5272\u7684\u6807\u8bc6\u7b26\u3002 \u6587\u4ef6\u540d: src/lib.rs mod front_of_house { mod hosting { fn add_to_waitlist () {} } } pub fn eat_at_restaurant () { // \u7edd\u5bf9\u8def\u5f84 // \u88ab\u5b9a\u4e49\u5728\u540c\u4e00 crate \u4e2d\uff0c\u8fd9\u610f\u5473\u7740\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 crate \u5173\u952e\u5b57\u4e3a\u8d77\u59cb\u7684\u7edd\u5bf9\u8def\u5f84\u3002 crate :: front_of_house :: hosting :: add_to_waitlist (); // \u76f8\u5bf9\u8def\u5f84 // \u4ee5 front_of_house \u4e3a\u8d77\u59cb // \u4ee5\u540d\u79f0\u4e3a\u8d77\u59cb\uff0c\u610f\u5473\u7740\u8be5\u8def\u5f84\u662f\u76f8\u5bf9\u8def\u5f84\u3002 front_of_house :: hosting :: add_to_waitlist (); } // \u8fd9\u4e2a\u4f8b\u5b50\u65e0\u6cd5\u7f16\u8bd1\u901a\u8fc7, \u56e0\u4e3a hosting \u5b50\u6a21\u5757\u662f\u79c1\u6709\u7684\uff08\u9ed8\u8ba4\uff09 \u9009\u62e9\u4f7f\u7528\u76f8\u5bf9\u8def\u5f84\u8fd8\u662f\u7edd\u5bf9\u8def\u5f84\uff0c\u8fd8\u662f\u8981\u53d6\u51b3\u4e8e\u4f60\u7684\u9879\u76ee\u3002\u53d6\u51b3\u4e8e\u4f60\u662f\u66f4\u503e\u5411\u4e8e\u5c06\u9879\u7684\u5b9a\u4e49\u4ee3\u7801\u4e0e\u4f7f\u7528\u8be5\u9879\u7684\u4ee3\u7801\u5206\u5f00\u6765\u79fb\u52a8\uff0c\u8fd8\u662f\u4e00\u8d77\u79fb\u52a8\u3002 build \u62a5\u9519: $ cargo build Compiling restaurant v0.1.0 ( file:///projects/restaurant ) error [ E0603 ] : module ` hosting ` is private --> src/lib.rs:9:28 | 9 | crate::front_of_house::hosting::add_to_waitlist () ; | ^^^^^^^ private module | note: the module ` hosting ` is defined here --> src/lib.rs:2:5 | 2 | mod hosting { | ^^^^^^^^^^^ error [ E0603 ] : module ` hosting ` is private --> src/lib.rs:12:21 | 12 | front_of_house::hosting::add_to_waitlist () ; | ^^^^^^^ private module | note: the module ` hosting ` is defined here --> src/lib.rs:2:5 | 2 | mod hosting { | ^^^^^^^^^^^ For more information about this error, try ` rustc --explain E0603 ` . error: could not compile ` restaurant ` due to 2 previous errors \u9519\u8bef\u4fe1\u606f\u8bf4 hosting \u6a21\u5757\u662f\u79c1\u6709\u7684\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u793a\u4f8b\u62e5\u6709 hosting \u6a21\u5757\u548c add_to_waitlist \u51fd\u6570\u7684\u7684\u6b63\u786e\u8def\u5f84\uff0c\u4f46\u662f Rust \u4e0d\u8ba9\u6211\u4eec\u4f7f\u7528\uff0c\u56e0\u4e3a\u5b83 \u4e0d\u80fd\u8bbf\u95ee\u79c1\u6709\u7247\u6bb5 \u3002 \u6a21\u5757\u4e0d\u4ec5\u5bf9\u4e8e\u7ec4\u7ec7\u4ee3\u7801\u5f88\u6709\u7528\u3002\u8fd8\u5b9a\u4e49\u4e86 Rust \u7684 \u79c1\u6709\u6027\u8fb9\u754c \uff08privacy boundary\uff09\uff1a\u8fd9\u6761\u754c\u7ebf\u4e0d\u5141\u8bb8\u5916\u90e8\u4ee3\u7801\u4e86\u89e3\u3001\u8c03\u7528\u548c\u4f9d\u8d56\u88ab\u5c01\u88c5\u7684\u5b9e\u73b0\u7ec6\u8282\u3002\u6240\u4ee5\uff0c\u5982\u679c\u5e0c\u671b\u521b\u5efa\u4e00\u4e2a\u79c1\u6709\u51fd\u6570\u6216\u7ed3\u6784\u4f53\uff0c\u53ef\u4ee5\u5c06\u5176\u653e\u5165\u6a21\u5757\u3002 Rust \u4e2d \u9ed8\u8ba4 \u6240\u6709\u9879\uff08\u51fd\u6570\u3001\u65b9\u6cd5\u3001\u7ed3\u6784\u4f53\u3001\u679a\u4e3e\u3001\u6a21\u5757\u548c\u5e38\u91cf\uff09\u90fd\u662f\u79c1\u6709\u7684\u3002\u7236\u6a21\u5757\u4e2d\u7684\u9879\u4e0d\u80fd\u4f7f\u7528\u5b50\u6a21\u5757\u4e2d\u7684\u79c1\u6709\u9879\uff0c\u4f46\u662f\u5b50\u6a21\u5757\u4e2d\u7684\u9879\u53ef\u4ee5\u4f7f\u7528\u4ed6\u4eec\u7236\u6a21\u5757\u4e2d\u7684\u9879\u3002 \u8fd9\u662f\u56e0\u4e3a\u5b50\u6a21\u5757\u5c01\u88c5\u5e76\u9690\u85cf\u4e86\u4ed6\u4eec\u7684\u5b9e\u73b0\u8be6\u60c5\uff0c\u4f46\u662f\u5b50\u6a21\u5757\u53ef\u4ee5\u770b\u5230\u4ed6\u4eec\u5b9a\u4e49\u7684\u4e0a\u4e0b\u6587\u3002 \u7ee7\u7eed\u62ff\u9910\u9986\u4f5c\u6bd4\u55bb\uff0c\u628a\u79c1\u6709\u6027\u89c4\u5219\u60f3\u8c61\u6210\u9910\u9986\u7684\u540e\u53f0\u529e\u516c\u5ba4\uff1a\u9910\u9986\u5185\u7684\u4e8b\u52a1\u5bf9\u9910\u5385\u987e\u5ba2\u6765\u8bf4\u662f\u4e0d\u53ef\u77e5\u7684\uff0c\u4f46\u529e\u516c\u5ba4\u7ecf\u7406\u53ef\u4ee5\u6d1e\u6089\u5176\u7ecf\u8425\u7684\u9910\u5385\u5e76\u5728\u5176\u4e2d\u505a\u4efb\u4f55\u4e8b\u60c5\u3002 Rust \u9009\u62e9\u4ee5\u8fd9\u79cd\u65b9\u5f0f\u6765\u5b9e\u73b0\u6a21\u5757\u7cfb\u7edf\u529f\u80fd\uff0c\u56e0\u6b64\u9ed8\u8ba4\u9690\u85cf\u5185\u90e8\u5b9e\u73b0\u7ec6\u8282\u3002\u8fd9\u6837\u4e00\u6765\uff0c\u5c31\u77e5\u9053\u53ef\u4ee5\u66f4\u6539\u5185\u90e8\u4ee3\u7801\u7684\u54ea\u4e9b\u90e8\u5206\u800c\u4e0d\u4f1a\u7834\u574f\u5916\u90e8\u4ee3\u7801\u3002\u8fd8\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528 pub \u5173\u952e\u5b57\u6765\u521b\u5efa\u516c\u5171\u9879\uff0c\u4f7f\u5b50\u6a21\u5757\u7684\u5185\u90e8\u90e8\u5206\u66b4\u9732\u7ed9\u4e0a\u7ea7\u6a21\u5757\u3002","title":"\u5f15\u7528\u6a21\u5757"},{"location":"packages/#pub","text":"\u5728\u4e0a\u9762\u793a\u4f8b\u7684\u62a5\u9519\u4fe1\u606f\u4e2d\uff0c\u5b83\u544a\u8bc9\u6211\u4eec hosting \u6a21\u5757\u662f\u79c1\u6709\u7684\u3002\u60f3\u8ba9\u7236\u6a21\u5757\u4e2d\u7684 eat_at_restaurant \u51fd\u6570\u53ef\u4ee5\u8bbf\u95ee\u5b50\u6a21\u5757\u4e2d\u7684 add_to_waitlist \u51fd\u6570\uff0c\u56e0\u6b64\u6211\u4eec\u4f7f\u7528 pub \u5173\u952e\u5b57\u6765\u6807\u8bb0 hosting \u6a21\u5757\uff0c \u6587\u4ef6\u540d: src/lib.rs mod front_of_house { // \u6dfb\u52a0pub\u5173\u952e\u5b57\u4f7f\u6a21\u5757\u516c\u5f00 pub mod hosting { // \u6dfb\u52a0pub\u5173\u952e\u5b57\u4f7f\u51fd\u6570\u516c\u5f00 pub fn add_to_waitlist () {} } } pub fn eat_at_restaurant () { // \u7edd\u5bf9\u8def\u5f84 crate :: front_of_house :: hosting :: add_to_waitlist (); // \u76f8\u5bf9\u8def\u5f84 front_of_house :: hosting :: add_to_waitlist (); } // \u73b0\u5728\u4ee3\u7801\u53ef\u4ee5\u7f16\u8bd1\u901a\u8fc7\u4e86\uff01 \u79c1\u6709\u6027\u89c4\u5219\u4e0d\u4f46\u5e94\u7528\u4e8e\u6a21\u5757\uff0c\u8fd8\u5e94\u7528\u4e8e\u7ed3\u6784\u4f53\u3001\u679a\u4e3e\u3001\u51fd\u6570\u548c\u65b9\u6cd5\u3002","title":"pub\u5173\u952e\u5b57"},{"location":"packages/#super","text":"\u8fd8\u53ef\u4ee5\u4f7f\u7528 super \u5f00\u5934\u6765\u6784\u5efa\u4ece\u7236\u6a21\u5757\u5f00\u59cb\u7684\u76f8\u5bf9\u8def\u5f84\u3002 \u4f3c\u4e8e\u6587\u4ef6\u7cfb\u7edf\u4e2d\u4ee5 .. \u5f00\u5934\u7684\u8bed\u6cd5\u3002 \u6587\u4ef6\u540d: src/lib.rs // \u4f7f\u7528\u4ee5 super \u5f00\u5934\u7684\u76f8\u5bf9\u8def\u5f84\u4ece\u7236\u76ee\u5f55\u5f00\u59cb\u8c03\u7528\u51fd\u6570 fn serve_order () {} mod back_of_house { fn fix_incorrect_order () { cook_order (); // super\u8868\u793a\u7236\u7ea7\u7684\u6a21\u5757 super :: serve_order (); } fn cook_order () {} }","title":"super\u76f8\u5bf9\u8def\u5f84"},{"location":"packages/#_4","text":"\u8fd8\u53ef\u4ee5\u4f7f\u7528 pub \u6765\u8bbe\u8ba1\u516c\u6709\u7684 \u7ed3\u6784\u4f53 \u548c \u679a\u4e3e \uff0c\u4e0d\u8fc7\u6709\u4e00\u4e9b\u989d\u5916\u7684\u7ec6\u8282\u9700\u8981\u6ce8\u610f\u3002 \u5982\u679c\u6211\u4eec\u5728\u4e00\u4e2a\u7ed3\u6784\u4f53\u5b9a\u4e49\u7684\u524d\u9762\u4f7f\u7528\u4e86 pub \uff0c\u8fd9\u4e2a\u7ed3\u6784\u4f53\u4f1a\u53d8\u6210\u516c\u6709\u7684\uff0c\u4f46\u662f\u8fd9\u4e2a\u7ed3\u6784\u4f53\u7684\u5b57\u6bb5\u4ecd\u7136\u662f\u79c1\u6709\u7684\u3002\u53ef\u4ee5\u6839\u636e\u60c5\u51b5\u51b3\u5b9a\u6bcf\u4e2a\u5b57\u6bb5\u662f\u5426\u516c\u6709\u3002 \u5728\u793a\u4f8b\u4e2d\uff0c\u5b9a\u4e49\u4e86\u4e00\u4e2a\u516c\u6709\u7ed3\u6784\u4f53 back_of_house:Breakfast \uff0c\u5176\u4e2d\u6709\u4e00\u4e2a\u516c\u6709\u5b57\u6bb5 toast \u548c\u79c1\u6709\u5b57\u6bb5 seasonal_fruit \u3002 \u8fd9\u4e2a\u4f8b\u5b50\u6a21\u62df\u7684\u60c5\u51b5\u662f\uff0c\u5728\u4e00\u5bb6\u9910\u9986\u4e2d\uff0c\u987e\u5ba2\u53ef\u4ee5\u9009\u62e9\u968f\u9910\u9644\u8d60\u7684\u9762\u5305\u7c7b\u578b\uff0c\u4f46\u662f\u53a8\u5e08\u4f1a\u6839\u636e\u5b63\u8282\u548c\u5e93\u5b58\u60c5\u51b5\u6765\u51b3\u5b9a\u968f\u9910\u642d\u914d\u7684\u6c34\u679c\u3002\u9910\u9986\u53ef\u7528\u7684\u6c34\u679c\u53d8\u5316\u662f\u5f88\u5feb\u7684\uff0c\u6240\u4ee5\u987e\u5ba2\u4e0d\u80fd\u9009\u62e9\u6c34\u679c\uff0c\u751a\u81f3\u65e0\u6cd5\u770b\u5230\u4ed6\u4eec\u5c06\u4f1a\u5f97\u5230\u4ec0\u4e48\u6c34\u679c\u3002 mod back_of_house { pub struct Breakfast { pub toast : String , seasonal_fruit : String , } impl Breakfast { pub fn summer ( toast : & str ) -> Breakfast { Breakfast { toast : String :: from ( toast ), seasonal_fruit : String :: from ( \"peaches\" ), } } } } pub fn eat_at_restaurant () { // \u5728\u590f\u5929\u8ba2\u8d2d\u4e00\u4e2a\u9ed1\u9ea6\u571f\u53f8\u4f5c\u4e3a\u65e9\u9910 let mut meal = back_of_house :: Breakfast :: summer ( \"Rye\" ); // toast \u5b57\u6bb5\u662f\u516c\u6709\u7684, \u6240\u4ee5\u53ef\u4ee5\u4f7f\u7528\u70b9\u53f7\u6765\u968f\u610f\u7684\u8bfb\u5199 toast \u5b57\u6bb5\u3002 // \u6539\u53d8\u4e3b\u610f\u66f4\u6362\u60f3\u8981\u9762\u5305\u7684\u7c7b\u578b meal . toast = String :: from ( \"Wheat\" ); println! ( \"I'd like {} toast please\" , meal . toast ); // \u5982\u679c\u53d6\u6d88\u4e0b\u4e00\u884c\u7684\u6ce8\u91ca\u4ee3\u7801\u4e0d\u80fd\u7f16\u8bd1\uff1b // \u4e0d\u5141\u8bb8\u67e5\u770b\u6216\u4fee\u6539\u65e9\u9910\u9644\u5e26\u7684\u5b63\u8282\u6c34\u679c // \u56e0\u4e3a seasonal_fruit \u662f\u79c1\u6709\u7684, \u6240\u4ee5\u4e0d\u80fd\u7528\u70b9\u53f7\u6765\u968f\u610f\u7684\u8bfb\u5199 seasonal_fruit \u5b57\u6bb5\u3002 // meal.seasonal_fruit = String::from(\"blueberries\"); } \u6ce8\u610f \u56e0\u4e3a back_of_house::Breakfast \u5177\u6709\u79c1\u6709\u5b57\u6bb5\uff0c\u6240\u4ee5\u8fd9\u4e2a\u7ed3\u6784\u4f53 \u9700\u8981\u63d0\u4f9b\u4e00\u4e2a\u516c\u5171\u7684\u5173\u8054\u51fd\u6570\u6765\u6784\u9020 Breakfast \u7684\u5b9e\u4f8b (\u8fd9\u91cc\u547d\u540d\u4e3a summer )\u3002 \u5982\u679c Breakfast \u6ca1\u6709\u8fd9\u6837\u7684\u51fd\u6570\uff0c\u5c06\u65e0\u6cd5\u5728 eat_at_restaurant \u4e2d\u521b\u5efa Breakfast \u5b9e\u4f8b\uff0c \u56e0\u4e3a\u6211\u4eec\u4e0d\u80fd\u5728 eat_at_restaurant \u4e2d\u8bbe\u7f6e\u79c1\u6709\u5b57\u6bb5 seasonal_fruit \u7684\u503c\u3002 \u4e0e\u4e4b\u76f8\u53cd\uff0c\u5982\u679c\u5c06 \u679a\u4e3e \u8bbe\u4e3a\u516c\u6709\uff0c\u5219\u5b83\u7684\u6240\u6709\u6210\u5458\u90fd\u5c06\u53d8\u4e3a\u516c\u6709\u3002\u53ea\u9700\u8981\u5728 enum \u5173\u952e\u5b57\u524d\u9762\u52a0\u4e0a pub // \u8bbe\u8ba1\u516c\u6709\u679a\u4e3e\uff0c\u4f7f\u5176\u6240\u6709\u6210\u5458\u516c\u6709 mod back_of_house { pub enum Appetizer { Soup , Salad , } } pub fn eat_at_restaurant () { let order1 = back_of_house :: Appetizer :: Soup ; let order2 = back_of_house :: Appetizer :: Salad ; } \u5982\u679c\u679a\u4e3e\u6210\u5458\u4e0d\u662f\u516c\u6709\u7684\uff0c\u90a3\u4e48\u679a\u4e3e\u4f1a\u663e\u5f97\u7528\u5904\u4e0d\u5927\uff1b \u7ed9\u679a\u4e3e\u7684\u6240\u6709\u6210\u5458\u6328\u4e2a\u6dfb\u52a0 pub \u662f\u5f88\u4ee4\u4eba\u607c\u706b\u7684\uff0c\u56e0\u6b64\u679a\u4e3e\u6210\u5458\u9ed8\u8ba4\u5c31\u662f\u516c\u6709\u7684\u3002 \u7ed3\u6784\u4f53\u901a\u5e38\u4f7f\u7528\u65f6\uff0c\u4e0d\u5fc5\u5c06\u5b83\u4eec\u7684\u5b57\u6bb5\u516c\u6709\u5316\uff0c\u56e0\u6b64\u7ed3\u6784\u4f53\u9075\u5faa\u5e38\u89c4\uff0c\u5185\u5bb9\u5168\u90e8\u662f\u79c1\u6709\u7684\uff0c\u9664\u975e\u4f7f\u7528 pub \u5173\u952e\u5b57\u3002","title":"\u516c\u6709\u7684\u7ed3\u6784\u4f53\u548c\u679a\u4e3e"},{"location":"packages/#use","text":"\u53ef\u4ee5\u4f7f\u7528 use \u5173\u952e\u5b57\u5c06\u8def\u5f84\u4e00\u6b21\u6027\u5f15\u5165\u4f5c\u7528\u57df\uff0c\u7136\u540e\u8c03\u7528\u8be5\u8def\u5f84\u4e2d\u7684\u9879\uff0c\u5c31\u5982\u540c\u5b83\u4eec\u662f\u672c\u5730\u9879\u4e00\u6837\u3002 mod front_of_house { pub mod hosting { pub fn add_to_waitlist () {} } } // \u4f7f\u7528 use \u5c06\u6a21\u5757\u5f15\u5165\u4f5c\u7528\u57df use crate :: front_of_house :: hosting ; pub fn eat_at_restaurant () { hosting :: add_to_waitlist (); hosting :: add_to_waitlist (); hosting :: add_to_waitlist (); } \u4f5c\u7528\u57df\u4e2d\u589e\u52a0 use \u548c\u8def\u5f84\u7c7b\u4f3c\u4e8e\u5728\u6587\u4ef6\u7cfb\u7edf\u4e2d\u521b\u5efa\u8f6f\u8fde\u63a5\uff08\u7b26\u53f7\u8fde\u63a5\uff0csymbolic link\uff09 \u901a\u8fc7\u5728 crate \u6839\u589e\u52a0 use crate::front_of_house::hosting \uff0c\u73b0\u5728 hosting \u5728\u4f5c\u7528\u57df\u4e2d\u5c31\u662f\u6709\u6548\u7684\u540d\u79f0\u4e86\uff0c \u5982\u540c hosting \u6a21\u5757 \u88ab\u5b9a\u4e49 \u4e8e crate \u6839\u4e00\u6837\u3002\u901a\u8fc7 use \u5f15\u5165\u4f5c\u7528\u57df\u7684\u8def\u5f84 \u4e5f\u4f1a\u68c0\u67e5\u79c1\u6709\u6027 \uff0c\u540c\u5176\u5b83\u8def\u5f84\u4e00\u6837\u3002 // \u5f15\u5165\u4f5c\u7528\u57df\u7684\u4e60\u60ef\u7528\u6cd5 mod front_of_house { pub mod hosting { pub fn add_to_waitlist () {} } } // \u4f7f\u7528 use \u548c\u76f8\u5bf9\u8def\u5f84\u6765\u5c06\u4e00\u4e2a\u9879\u5f15\u5165\u4f5c\u7528\u57df use self :: front_of_house :: hosting ; pub fn eat_at_restaurant () { hosting :: add_to_waitlist (); hosting :: add_to_waitlist (); hosting :: add_to_waitlist (); } mod front_of_house { pub mod hosting { pub fn add_to_waitlist () {} } } use crate :: front_of_house :: hosting :: add_to_waitlist ; pub fn eat_at_restaurant () { add_to_waitlist (); add_to_waitlist (); add_to_waitlist (); }","title":"use\u5173\u952e\u5b57"},{"location":"packages/#use_1","text":"use \u5c06\u51fd\u6570\u5f15\u5165\u4f5c\u7528\u57df\u7684\u4e60\u60ef\u7528\u6cd5\u3002\u5c31\u662f\u4f7f\u7528 use \u5c06\u51fd\u6570\u7684\u7236\u6a21\u5757\u5f15\u5165\u4f5c\u7528\u57df\uff0c\u5fc5\u987b\u5728\u8c03\u7528\u51fd\u6570\u65f6\u6307\u5b9a\u7236\u6a21\u5757\uff0c\u8fd9\u6837\u53ef\u4ee5\u6e05\u6670\u5730\u8868\u660e\u51fd\u6570\u4e0d\u662f\u5728\u672c\u5730\u5b9a\u4e49\u7684\uff0c\u540c\u65f6\u4f7f\u5b8c\u6574\u8def\u5f84\u7684\u91cd\u590d\u5ea6\u6700\u5c0f\u5316\u3002 \u5982\u4e0b\u793a\u4f8b\u4e2d\u7684\u4ee3\u7801\u4e0d\u6e05\u695a add_to_waitlist \u662f\u5728\u54ea\u91cc\u88ab\u5b9a\u4e49\u7684\u3002 mod front_of_house { pub mod hosting { pub fn add_to_waitlist () {} } } use crate :: front_of_house :: hosting :: add_to_waitlist ; pub fn eat_at_restaurant () { // \u6b64\u65f6\u5bb9\u6613\u4e0d\u77e5 add_to_waitlist \u662f\u5728\u54ea\u91cc\u88ab\u5b9a\u4e49\u7684\u3002 add_to_waitlist (); add_to_waitlist (); add_to_waitlist (); } \u4f7f\u7528 use \u5f15\u5165\u7ed3\u6784\u4f53\u3001\u679a\u4e3e\u548c\u5176\u4ed6\u9879\u65f6\uff0c\u4e60\u60ef\u662f\u6307\u5b9a\u5b83\u4eec\u7684\u5b8c\u6574\u8def\u5f84\u3002 // \u5c06 HashMap \u5f15\u5165\u4f5c\u7528\u57df\u7684\u4e60\u60ef\u7528\u6cd5 use std :: collections :: HashMap ; fn main () { let mut map = HashMap :: new (); map . insert ( 1 , 2 ); } \u8fd9\u79cd\u4e60\u60ef\u7528\u6cd5\u80cc\u540e\u6ca1\u6709\u4ec0\u4e48\u786c\u6027\u8981\u6c42\uff1a\u5b83\u53ea\u662f\u4e00\u79cd\u60ef\u4f8b\uff0c\u4eba\u4eec\u5df2\u7ecf\u4e60\u60ef\u4e86\u4ee5\u8fd9\u79cd\u65b9\u5f0f\u9605\u8bfb\u548c\u7f16\u5199 Rust \u4ee3\u7801\u3002 \u8fd9\u4e2a\u4e60\u60ef\u7528\u6cd5\u6709\u4e00\u4e2a\u4f8b\u5916\uff0c\u90a3\u5c31\u662f\u6211\u4eec\u60f3\u4f7f\u7528 use \u8bed\u53e5\u5c06\u4e24\u4e2a\u5177\u6709\u76f8\u540c\u540d\u79f0\u7684\u9879\u5e26\u5165\u4f5c\u7528\u57df\uff0c\u56e0\u4e3a Rust \u4e0d\u5141\u8bb8\u8fd9\u6837\u505a\u3002 // \u5c55\u793a\u4e86\u5982\u4f55\u5c06\u4e24\u4e2a\u5177\u6709\u76f8\u540c\u540d\u79f0\u4f46\u4e0d\u540c\u7236\u6a21\u5757\u7684 Result \u7c7b\u578b\u5f15\u5165\u4f5c\u7528\u57df\uff0c\u4ee5\u53ca\u5982\u4f55\u5f15\u7528\u5b83\u4eec\u3002 use std :: fmt ; use std :: io ; fn function1 () -> fmt :: Result { // --snip-- } fn function2 () -> io :: Result < () > { // --snip-- } // \u4f7f\u7528\u7236\u6a21\u5757\u53ef\u4ee5\u533a\u5206\u8fd9\u4e24\u4e2a Result \u7c7b\u578b\u3002","title":"\u60ef\u7528\u7684 use \u8def\u5f84"},{"location":"packages/#as","text":"\u4f7f\u7528 use \u5c06\u4e24\u4e2a\u540c\u540d\u7c7b\u578b\u5f15\u5165\u540c\u4e00\u4f5c\u7528\u57df\u8fd9\u4e2a\u95ee\u9898\u8fd8\u6709\u53e6\u4e00\u4e2a\u89e3\u51b3\u529e\u6cd5\uff1a \u5728\u8fd9\u4e2a\u7c7b\u578b\u7684\u8def\u5f84\u540e\u9762\uff0c\u4f7f\u7528 as \u6307\u5b9a\u4e00\u4e2a\u65b0\u7684\u672c\u5730\u540d\u79f0\u6216\u8005\u522b\u540d\u3002 // \u901a\u8fc7 as \u91cd\u547d\u540d\u5176\u4e2d\u4e00\u4e2a Result \u7c7b\u578b use std :: fmt :: Result ; use std :: io :: Result as IoResult ; fn function1 () -> Result { // --snip-- } fn function2 () -> IoResult < () > { // --snip-- }","title":"as \u5173\u952e\u5b57"},{"location":"packages/#pub-use","text":"\u4f7f\u7528 use \u5173\u952e\u5b57\uff0c \u5c06\u67d0\u4e2a\u540d\u79f0\u5bfc\u5165\u5f53\u524d\u4f5c\u7528\u57df\u540e\uff0c\u8fd9\u4e2a\u540d\u79f0\u5728\u6b64\u4f5c\u7528\u57df\u4e2d\u5c31\u53ef\u4ee5\u4f7f\u7528\u4e86\uff0c\u4f46\u5b83\u5bf9\u6b64\u4f5c\u7528\u57df\u4e4b\u5916\u8fd8\u662f\u79c1\u6709\u7684 \u3002 \u5982\u679c\u60f3\u8ba9\u5176\u4ed6\u4eba\u8c03\u7528\u6211\u4eec\u7684\u4ee3\u7801\u65f6\uff0c\u4e5f\u80fd\u591f\u6b63\u5e38\u4f7f\u7528\u8fd9\u4e2a\u540d\u79f0\uff0c\u5c31\u597d\u50cf\u5b83\u672c\u6765\u5c31\u5728\u5f53\u524d\u4f5c\u7528\u57df\u4e00\u6837\uff0c\u90a3\u6211\u4eec\u53ef\u4ee5\u5c06 pub \u548c use \u5408\u8d77\u6765\u4f7f\u7528\u3002 \u8fd9\u79cd\u6280\u672f\u88ab\u79f0\u4e3a \u201c \u91cd\u5bfc\u51fa \uff08re-exporting\uff09\u201d\uff1a\u6211\u4eec\u4e0d\u4ec5\u5c06\u4e00\u4e2a\u540d\u79f0\u5bfc\u5165\u4e86\u5f53\u524d\u4f5c\u7528\u57df\uff0c\u8fd8\u5141\u8bb8\u522b\u4eba\u628a\u5b83\u5bfc\u5165\u4ed6\u4eec\u81ea\u5df1\u7684\u4f5c\u7528\u57df\u3002 mod front_of_house { pub mod hosting { pub fn add_to_waitlist () {} } } pub use crate :: front_of_house :: hosting ; pub fn eat_at_restaurant () { hosting :: add_to_waitlist (); hosting :: add_to_waitlist (); hosting :: add_to_waitlist (); } \u901a\u8fc7 pub use \u91cd\u5bfc\u51fa\uff0c\u5916\u90e8\u4ee3\u7801\u73b0\u5728\u53ef\u4ee5\u901a\u8fc7\u65b0\u8def\u5f84 restaurant::hosting::add_to_waitlist \u6765\u8c03\u7528 add_to_waitlist \u51fd\u6570\u3002 \u5982\u679c\u6ca1\u6709\u6307\u5b9a pub use \uff0c\u5916\u90e8\u4ee3\u7801\u9700\u5728\u5176\u4f5c\u7528\u57df\u4e2d\u8c03\u7528 restaurant::front_of_house::hosting::add_to_waitlist \u3002 \u5f53\u4f60\u4ee3\u7801\u7684\u5185\u90e8\u7ed3\u6784\u4e0e\u8c03\u7528\u4f60\u4ee3\u7801\u7684\u7a0b\u5e8f\u5458\u6240\u60f3\u8c61\u7684\u7ed3\u6784\u4e0d\u540c\u65f6\uff0c\u91cd\u5bfc\u51fa\u4f1a\u5f88\u6709\u7528\u3002 \u4f8b\u5982\uff0c\u5728\u8fd9\u4e2a\u9910\u9986\u7684\u6bd4\u55bb\u4e2d\uff0c\u7ecf\u8425\u9910\u9986\u7684\u4eba\u4f1a\u60f3\u5230\u201c\u524d\u53f0\u201d\u548c\u201c\u540e\u53f0\u201d\u3002\u4f46\u987e\u5ba2\u5728\u5149\u987e\u4e00\u5bb6\u9910\u9986\u65f6\uff0c\u53ef\u80fd\u4e0d\u4f1a\u4ee5\u8fd9\u4e9b\u672f\u8bed\u6765\u8003\u8651\u9910\u9986\u7684\u5404\u4e2a\u90e8\u5206\u3002 \u4f7f\u7528 pub use \uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4e00\u79cd\u7ed3\u6784\u7f16\u5199\u4ee3\u7801\uff0c\u5374\u5c06\u4e0d\u540c\u7684\u7ed3\u6784\u5f62\u5f0f\u66b4\u9732\u51fa\u6765\u3002\u8fd9\u6837\u505a\u4f7f\u6211\u4eec\u7684\u5e93 \u4e95\u4e95\u6709\u6761 \uff0c \u4e5f\u4f7f\u5f00\u53d1\u8fd9\u4e2a\u5e93\u7684\u7a0b\u5e8f\u5458\u548c\u8c03\u7528\u8fd9\u4e2a\u5e93\u7684\u7a0b\u5e8f\u5458\u90fd\u66f4\u52a0\u65b9\u4fbf\u3002","title":"pub use\u91cd\u5bfc\u51fa"},{"location":"packages/#_5","text":"\u5728\u7f16\u5199\u731c\u731c\u770b\u6e38\u620f\u65f6\u3002\u9879\u76ee\u4f7f\u7528\u4e86\u4e00\u4e2a\u5916\u90e8\u5305\uff0c rand \uff0c\u6765\u751f\u6210\u968f\u673a\u6570\u3002\u4e3a\u4e86\u5728\u9879\u76ee\u4e2d\u4f7f\u7528 rand \uff0c\u5728 Cargo.toml \u4e2d\u52a0\u5165\u4e86\u5982\u4e0b\u884c\uff1a rand = \"0.8.3\" // \u544a\u8bc9\u4e86 Cargo \u8981\u4ece crates.io \u4e0b\u8f7d rand \u548c\u5176\u4f9d\u8d56\uff0c\u5e76\u4f7f\u5176\u53ef\u5728\u9879\u76ee\u4ee3\u7801\u4e2d\u4f7f\u7528\u3002 \u63a5\u7740\uff0c\u4e3a\u4e86\u5c06 rand \u5b9a\u4e49\u5f15\u5165\u9879\u76ee\u5305\u7684\u4f5c\u7528\u57df\uff0c\u52a0\u5165\u4e00\u884c use \u8d77\u59cb\u7684\u5305\u540d\uff0c\u5b83\u4ee5 rand \u5305\u540d\u5f00\u5934\u5e76\u5217\u51fa\u4e86\u9700\u8981\u5f15\u5165\u4f5c\u7528\u57df\u7684\u9879\u3002\u66fe\u5c06 Rng trait \u5f15\u5165\u4f5c\u7528\u57df\u5e76\u8c03\u7528\u4e86 rand::thread_rng \u51fd\u6570\uff1a use rand :: Rng ; fn main () { let secret_number = rand :: thread_rng (). gen_range ( 1 ..= 100 ); } crates.io \u4e0a\u6709\u5f88\u591a Rust \u793e\u533a\u6210\u5458\u53d1\u5e03\u7684\u5305\uff0c\u5c06\u5176\u5f15\u5165\u81ea\u5df1\u7684\u9879\u76ee\u90fd\u9700\u8981\u4e00\u9053\u76f8\u540c\u7684\u6b65\u9aa4\uff1a \u5728 Cargo.toml \u5217\u51fa\u5b83\u4eec\u5e76\u901a\u8fc7 use \u5c06\u5176\u4e2d\u5b9a\u4e49\u7684\u9879\u5f15\u5165\u9879\u76ee\u5305\u7684\u4f5c\u7528\u57df\u4e2d\u3002 \u6ce8\u610f \u6807\u51c6\u5e93\uff08std\uff09 \u5bf9\u4e8e\u4f60\u7684\u5305\u6765\u8bf4\u4e5f\u662f\u5916\u90e8 crate \u3002\u56e0\u4e3a\u6807\u51c6\u5e93\u968f Rust \u8bed\u8a00\u4e00\u540c\u5206\u53d1\uff0c\u65e0\u9700\u4fee\u6539 Cargo.toml \u6765\u5f15\u5165 std \uff0c\u4e0d\u8fc7\u9700\u8981\u901a\u8fc7 use \u5c06\u6807\u51c6\u5e93\u4e2d\u5b9a\u4e49\u7684\u9879\u5f15\u5165\u9879\u76ee\u5305\u7684\u4f5c\u7528\u57df\u4e2d\u6765\u5f15\u7528\u5b83\u4eec\uff0c\u6bd4\u5982\u4f7f\u7528\u7684 HashMap \uff1a use std :: collections :: HashMap ; // \u4ee5\u6807\u51c6\u5e93 crate \u540d std \u5f00\u5934\u7684\u7edd\u5bf9\u8def\u5f84\u3002","title":"\u4f7f\u7528\u5916\u90e8\u5305"},{"location":"packages/#_6","text":"\u5f53\u9700\u8981\u5f15\u5165\u5f88\u591a\u5b9a\u4e49\u4e8e\u76f8\u540c\u5305\u6216\u76f8\u540c\u6a21\u5757\u7684\u9879\u65f6\uff0c\u4e3a\u6bcf\u4e00\u9879\u5355\u72ec\u5217\u51fa\u4e00\u884c\u4f1a\u5360\u7528\u6e90\u7801\u5f88\u5927\u7684\u7a7a\u95f4\u3002 // --snip-- use std :: cmp :: Ordering ; use std :: io ; // --snip-- \u53ef\u4ee5\u4f7f\u7528\u5d4c\u5957\u8def\u5f84\u5c06\u76f8\u540c\u7684\u9879\u5728\u4e00\u884c\u4e2d\u5f15\u5165\u4f5c\u7528\u57df\u3002 // --snip-- use std :: { cmp :: Ordering , io }; // --snip-- \u5728\u8f83\u5927\u7684\u7a0b\u5e8f\u4e2d\uff0c\u4f7f\u7528\u5d4c\u5957\u8def\u5f84\u4ece\u76f8\u540c\u5305\u6216\u6a21\u5757\u4e2d\u5f15\u5165\u5f88\u591a\u9879\uff0c\u53ef\u4ee5\u663e\u8457\u51cf\u5c11\u6240\u9700\u7684\u72ec\u7acb use \u8bed\u53e5\u7684\u6570\u91cf\uff01 \u53ef\u4ee5\u5728\u8def\u5f84\u7684\u4efb\u4f55\u5c42\u7ea7\u4f7f\u7528\u5d4c\u5957\u8def\u5f84\uff0c\u8fd9\u5728\u7ec4\u5408\u4e24\u4e2a\u5171\u4eab\u5b50\u8def\u5f84\u7684 use \u8bed\u53e5\u65f6\u975e\u5e38\u6709\u7528\u3002 use std :: io ; use std :: io :: Write ; \u4e3a: // \u540c\u65f6\u5f15\u5165\u4f5c\u7528\u57df\u3002 use std :: io :: { self , Write };","title":"\u5d4c\u5957\u8def\u5f84"},{"location":"packages/#glob","text":"\u5982\u679c\u5e0c\u671b\u5c06\u4e00\u4e2a\u8def\u5f84\u4e0b \u6240\u6709 \u516c\u6709\u9879\u5f15\u5165\u4f5c\u7528\u57df\uff0c\u53ef\u4ee5\u6307\u5b9a\u8def\u5f84\u540e\u8ddf * \uff0cglob \u8fd0\u7b97\u7b26\uff1a use std :: collections :: * ; // \u4f7f\u7528 glob \u8fd0\u7b97\u7b26\u65f6\u8bf7\u591a\u52a0\u5c0f\u5fc3\uff01 // Glob \u4f1a\u4f7f\u5f97\u6211\u4eec\u96be\u4ee5\u63a8\u5bfc\u4f5c\u7528\u57df\u4e2d\u6709\u4ec0\u4e48\u540d\u79f0\u548c\u5b83\u4eec\u662f\u5728\u4f55\u5904\u5b9a\u4e49\u7684\u3002 glob \u8fd0\u7b97\u7b26\u7ecf\u5e38\u7528\u4e8e\u6d4b\u8bd5\u6a21\u5757 tests \u4e2d\uff0c\u8fd9\u65f6\u4f1a\u5c06\u6240\u6709\u5185\u5bb9\u5f15\u5165\u4f5c\u7528\u57df\uff1b glob \u8fd0\u7b97\u7b26\u6709\u65f6\u4e5f\u7528\u4e8e prelude \u6a21\u5f0f\uff1b\u67e5\u770b \u6807\u51c6\u5e93\u4e2d\u7684\u6587\u6863 \u4e86\u89e3\u8fd9\u4e2a\u6a21\u5f0f\u7684\u66f4\u591a\u7ec6\u8282\u3002","title":"glob\u8fd0\u7b97\u7b26"},{"location":"packages/#_7","text":"\u5f53\u6a21\u5757\u53d8\u5f97\u66f4\u5927\u65f6\uff0c\u53ef\u80fd\u60f3\u8981\u5c06\u5b83\u4eec\u7684\u5b9a\u4e49\u79fb\u52a8\u5230\u5355\u72ec\u7684\u6587\u4ef6\u4e2d\uff0c\u4ece\u800c\u4f7f\u4ee3\u7801\u66f4\u5bb9\u6613\u9605\u8bfb\u3002 \u4f8b\u5982\uff0c\u5c06 front_of_house \u6a21\u5757\u79fb\u52a8\u5230\u5c5e\u4e8e\u5b83\u81ea\u5df1\u7684\u6587\u4ef6 src/front_of_house.rs \u4e2d\uff0c\u901a\u8fc7\u6539\u53d8 crate \u6839\u6587\u4ef6\uff0c\u4f7f\u5176\u5305\u542b\u793a\u4f8b\u7684\u4ee3\u7801\u3002 \u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0ccrate \u6839\u6587\u4ef6\u662f src/lib.rs \uff0c\u8fd9\u4e5f\u540c\u6837\u9002\u7528\u4e8e\u4ee5 src/main.rs \u4e3a crate \u6839\u6587\u4ef6\u7684\u4e8c\u8fdb\u5236 crate \u9879\u3002 // \u6587\u4ef6\u540d: src/lib.rs // \u58f0\u660e front_of_house \u6a21\u5757\uff0c\u5176\u5185\u5bb9\u5c06\u4f4d\u4e8e src/front_of_house.rs mod front_of_house ; pub use crate :: front_of_house :: hosting ; pub fn eat_at_restaurant () { hosting :: add_to_waitlist (); hosting :: add_to_waitlist (); hosting :: add_to_waitlist (); } src/front_of_house.rs \u4f1a\u83b7\u53d6 front_of_house \u6a21\u5757\u7684\u5b9a\u4e49\u5185\u5bb9 // \u6587\u4ef6\u540d: src/front_of_house.rs // \u5728 src/front_of_house.rs \u4e2d\u5b9a\u4e49 front_of_house \u6a21\u5757 pub mod hosting { pub fn add_to_waitlist () {} } \u5728 mod front_of_house \u540e\u4f7f\u7528 \u5206\u53f7 \uff0c\u800c\u4e0d\u662f \u4ee3\u7801\u5757 \uff0c\u8fd9\u5c06\u544a\u8bc9 Rust \u5728\u53e6\u4e00\u4e2a\u4e0e\u6a21\u5757\u540c\u540d\u7684\u6587\u4ef6\u4e2d\u52a0\u8f7d\u6a21\u5757\u7684\u5185\u5bb9\u3002 \u7ee7\u7eed\u91cd\u6784\u4f8b\u5b50\uff0c\u5c06 hosting \u6a21\u5757\u4e5f\u63d0\u53d6\u5230\u5176\u81ea\u5df1\u7684\u6587\u4ef6\u4e2d\uff0c\u4ec5\u5bf9 src/front_of_house.rs \u5305\u542b hosting \u6a21\u5757\u7684\u58f0\u660e\u8fdb\u884c\u4fee\u6539\uff1a // \u6587\u4ef6\u540d: src/front_of_house.rs pub mod hosting ; \u63a5\u7740\u6211\u4eec\u521b\u5efa\u4e00\u4e2a src/front_of_house \u76ee\u5f55\u548c\u4e00\u4e2a\u5305\u542b hosting \u6a21\u5757\u5b9a\u4e49\u7684 src/front_of_house/hosting.rs \u6587\u4ef6\uff1a // \u6587\u4ef6\u540d: src/front_of_house/hosting.rs pub fn add_to_waitlist () {} \u6a21\u5757\u6811\u4f9d\u7136\u4fdd\u6301\u76f8\u540c\uff0c eat_at_restaurant \u4e2d\u7684\u51fd\u6570\u8c03\u7528\u4e5f\u65e0\u9700\u4fee\u6539\u7ee7\u7eed\u4fdd\u6301\u6709\u6548\uff0c\u5373\u4fbf\u5176\u5b9a\u4e49\u5b58\u5728\u4e8e\u4e0d\u540c\u7684\u6587\u4ef6\u4e2d\u3002 \u8fd9\u4e2a\u6280\u5de7\u53ef\u4ee5\u5728\u6a21\u5757\u4ee3\u7801\u589e\u957f\u65f6\uff0c\u5c06\u5b83\u4eec\u79fb\u52a8\u5230\u65b0\u6587\u4ef6\u4e2d\u3002 \u6ce8\u610f\uff0c src/lib.rs \u4e2d\u7684 pub use crate::front_of_house::hosting \u8bed\u53e5\u662f\u6ca1\u6709\u6539\u53d8\u7684\uff0c\u5728\u6587\u4ef6\u4f5c\u4e3a crate \u7684\u4e00\u90e8\u5206\u800c\u7f16\u8bd1\u65f6\uff0c use \u4e0d\u4f1a\u6709\u4efb\u4f55\u5f71\u54cd\u3002 mod \u5173\u952e\u5b57\u58f0\u660e\u4e86\u6a21\u5757\uff0cRust \u4f1a\u5728\u4e0e\u6a21\u5757\u540c\u540d\u7684\u6587\u4ef6\u4e2d\u67e5\u627e\u6a21\u5757\u7684\u4ee3\u7801\u3002","title":"\u6a21\u5757\u62c6\u5206"},{"location":"packages/#_8","text":"Rust \u63d0\u4f9b\u4e86\u5c06\u5305\u5206\u6210\u591a\u4e2a crate \uff0c\u5c06 crate \u5206\u6210\u6a21\u5757\uff0c\u4ee5\u53ca\u901a\u8fc7\u6307\u5b9a\u7edd\u5bf9\u6216\u76f8\u5bf9\u8def\u5f84\u4ece\u4e00\u4e2a\u6a21\u5757\u5f15\u7528\u53e6\u4e00\u4e2a\u6a21\u5757\u4e2d\u5b9a\u4e49\u7684\u9879\u7684\u65b9\u5f0f\u3002 \u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528 use \u8bed\u53e5\u5c06\u8def\u5f84\u5f15\u5165\u4f5c\u7528\u57df\uff0c\u8fd9\u6837\u5728\u591a\u6b21\u4f7f\u7528\u65f6\u53ef\u4ee5\u4f7f\u7528\u66f4\u77ed\u7684\u8def\u5f84\u3002 \u6a21\u5757\u5b9a\u4e49\u7684\u4ee3\u7801\u9ed8\u8ba4\u662f\u79c1\u6709\u7684\uff0c\u4e0d\u8fc7\u53ef\u4ee5\u9009\u62e9\u589e\u52a0 pub \u5173\u952e\u5b57\u4f7f\u5176\u5b9a\u4e49\u53d8\u4e3a\u516c\u6709\u3002","title":"\u603b\u7ed3"},{"location":"struct/","text":"\u7ed3\u6784\u4f53 struct \uff0c\u6216\u8005 structure \uff0c\u662f\u4e00\u4e2a\u81ea\u5b9a\u4e49\u6570\u636e\u7c7b\u578b\uff0c\u5141\u8bb8\u4f60\u5305\u88c5\u548c\u547d\u540d\u591a\u4e2a\u76f8\u5173\u7684\u503c\uff0c\u4ece\u800c\u5f62\u6210\u4e00\u4e2a\u6709\u610f\u4e49\u7684\u7ec4\u5408\u3002 \u5b9a\u4e49\u548c\u5b9e\u4f8b\u5316 \u548c\u5143\u7ec4\u4e00\u6837\uff0c\u7ed3\u6784\u4f53\u7684\u6bcf\u4e00\u90e8\u5206\u53ef\u4ee5\u662f\u4e0d\u540c\u7c7b\u578b\u3002\u4f46\u4e0d\u540c\u4e8e\u5143\u7ec4\uff0c \u7ed3\u6784\u4f53\u9700\u8981\u547d\u540d\u5404\u90e8\u5206\u6570\u636e\u4ee5\u4fbf\u80fd\u6e05\u695a\u7684\u8868\u660e\u5176\u503c\u7684\u610f\u4e49 \u3002\u7531\u4e8e\u6709\u4e86\u8fd9\u4e9b\u540d\u5b57\uff0c\u7ed3\u6784\u4f53\u6bd4\u5143\u7ec4\u66f4\u7075\u6d3b\uff1a \u4e0d\u9700\u8981\u4f9d\u8d56\u987a\u5e8f\u6765\u6307\u5b9a\u6216\u8bbf\u95ee\u5b9e\u4f8b\u4e2d\u7684\u503c \u3002 \u5b9a\u4e49\u7ed3\u6784\u4f53\uff0c\u9700\u8981\u4f7f\u7528 struct \u5173\u952e\u5b57\u5e76\u4e3a\u6574\u4e2a\u7ed3\u6784\u4f53\u63d0\u4f9b\u4e00\u4e2a\u540d\u5b57\u3002\u7ed3\u6784\u4f53\u7684\u540d\u5b57\u9700\u8981\u63cf\u8ff0\u5b83\u6240\u7ec4\u5408\u7684\u6570\u636e\u7684\u610f\u4e49\u3002\u63a5\u7740\uff0c\u5728\u5927\u62ec\u53f7\u4e2d\uff0c\u5b9a\u4e49\u6bcf\u4e00\u90e8\u5206\u6570\u636e\u7684\u540d\u5b57\u548c\u7c7b\u578b\uff0c\u79f0\u4e3a \u5b57\u6bb5 \uff08field\uff09\u3002 struct User { active : bool , username : String , email : String , sign_in_count : u64 , } \u4e00\u65e6\u5b9a\u4e49\u4e86\u7ed3\u6784\u4f53\u540e\uff0c\u4e3a\u4e86\u4f7f\u7528\u5b83\uff0c\u901a\u8fc7\u4e3a\u6bcf\u4e2a\u5b57\u6bb5\u6307\u5b9a\u5177\u4f53\u503c\u6765\u521b\u5efa\u8fd9\u4e2a\u7ed3\u6784\u4f53\u7684 \u5b9e\u4f8b \u3002\u521b\u5efa\u4e00\u4e2a\u5b9e\u4f8b\u9700\u8981\u4ee5\u7ed3\u6784\u4f53\u7684\u540d\u5b57\u5f00\u5934\uff0c\u63a5\u7740\u5728\u5927\u62ec\u53f7\u4e2d\u4f7f\u7528 key: value \u952e-\u503c\u5bf9\u7684\u5f62\u5f0f\u63d0\u4f9b\u5b57\u6bb5\uff0c\u5176\u4e2d key \u662f\u5b57\u6bb5\u7684\u540d\u5b57\uff0c value \u662f\u9700\u8981\u5b58\u50a8\u5728\u5b57\u6bb5\u4e2d\u7684\u6570\u636e\u503c\u3002 \u5b9e\u4f8b\u4e2d\u5b57\u6bb5\u7684\u987a\u5e8f \u4e0d\u9700\u8981 \u548c\u5b83\u4eec\u5728\u7ed3\u6784\u4f53\u4e2d\u58f0\u660e\u7684\u987a\u5e8f\u4e00\u81f4\u3002 \u4e3a\u4e86\u4ece\u7ed3\u6784\u4f53\u4e2d\u83b7\u53d6\u67d0\u4e2a\u7279\u5b9a\u7684\u503c\uff0c\u53ef\u4ee5\u4f7f\u7528\u70b9\u53f7\u3002 fn main () { // \u5b9e\u4f8b\u5316\u4e00\u4e2a\u7ed3\u6784\u4f53\uff0c\u5176\u4e2d\u5b57\u6bb5\u987a\u5e8f\u4e0d\u9700\u8981\u548c\u5b9a\u4e49\u65f6\u7684\u4e00\u76f4\u3002 let user1 = User { email : String :: from ( \"someone@example.com\" ), username : String :: from ( \"someusername123\" ), active : true , sign_in_count : 1 , }; // \u4f7f\u7528\u70b9\u53f7\u83b7\u53d6\u7ed3\u6784\u4f53\u4e2d\u7684\u67d0\u4e2a\u7279\u5b9a\u7684\u503c user1 . email = String :: from ( \"anotheremail@example.com\" ); } \u6ce8\u610f\u6574\u4e2a\u5b9e\u4f8b\u5fc5\u987b\u662f\u53ef\u53d8\u7684\uff1bRust \u5e76 \u4e0d\u5141\u8bb8 \u53ea\u5c06\u67d0\u4e2a\u5b57\u6bb5\u6807\u8bb0\u4e3a\u53ef\u53d8\u3002 \u53e6\u5916\u9700\u8981\u6ce8\u610f\u540c\u5176\u4ed6\u4efb\u4f55\u8868\u8fbe\u5f0f\u4e00\u6837\uff0c\u53ef\u4ee5\u5728\u51fd\u6570\u4f53\u7684\u6700\u540e\u4e00\u4e2a\u8868\u8fbe\u5f0f\u4e2d\u6784\u9020\u4e00\u4e2a\u7ed3\u6784\u4f53\u7684\u65b0\u5b9e\u4f8b\uff0c\u6765\u9690\u5f0f\u5730\u8fd4\u56de\u8fd9\u4e2a\u5b9e\u4f8b\u3002 // \u521b\u5efa\u4e00\u4e2a\u7ed3\u6784\u4f53\u7684\u5b9e\u4f8b\u5e76\u8fd4\u56de\uff0c // \u6709\u70b9\u7c7b\u4f3c\u4e8e\u5176\u4ed6\u8bed\u8a00\u4e2d\u7684\u521d\u59cb\u5316\u4e00\u4e2a\u7ed3\u6784\u4f53\u3002 fn build_user ( email : String , username : String ) -> User { User { email : email , username : username , active : true , // \u9ed8\u8ba4\u503c\u4e3atrue sign_in_count : 1 , // \u9ed8\u8ba4\u503c\u4e3a1 } } \u5b57\u6bb5\u521d\u59cb\u5316\u7b80\u5199 \u56e0\u4e3a\u793a\u4f8b\u4e2d\u7684\u53c2\u6570\u540d\u4e0e\u5b57\u6bb5\u540d\u90fd\u5b8c\u5168\u76f8\u540c\uff0c\u5219\u53ef\u4ee5\u4f7f\u7528 \u5b57\u6bb5\u521d\u59cb\u5316\u7b80\u5199\u8bed\u6cd5 \uff08field init shorthand\uff09\u6765\u91cd\u5199 build_user \uff0c\u8fd9\u6837\u5176\u884c\u4e3a\u4e0e\u4e4b\u524d\u5b8c\u5168\u76f8\u540c\uff0c\u4e0d\u8fc7\u65e0\u9700\u91cd\u590d email \u548c username . fn build_user ( email : String , username : String ) -> User { User { email , // \u5b57\u6bb5\u521d\u59cb\u5316\u7b80\u5199\u8bed\u6cd5 username , // \u5b57\u6bb5\u521d\u59cb\u5316\u7b80\u5199\u8bed\u6cd5 active : true , sign_in_count : 1 , } } \u4ece\u5176\u4ed6\u5b9e\u4f8b\u521b\u5efa\u5b9e\u4f8b \u4f7f\u7528\u65e7\u5b9e\u4f8b\u7684\u5927\u90e8\u5206\u503c\u4f46\u6539\u53d8\u5176\u90e8\u5206\u503c\u6765\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u7ed3\u6784\u4f53\u5b9e\u4f8b\u901a\u5e38\u662f\u5f88\u6709\u7528\u7684\u3002\u8fd9\u53ef\u4ee5\u901a\u8fc7 \u7ed3\u6784\u4f53\u66f4\u65b0\u8bed\u6cd5 \uff08struct update syntax\uff09\u5b9e\u73b0\u3002 fn main () { // --snip-- let user2 = User { active : user1 . active , // \u4ece\u53e6\u4e00\u4e2a\u7ed3\u6784\u4f53\u7684\u5b57\u6bb5\u503c\u6765\u521d\u59cb\u5316 username : user1 . username , // \u4ece\u53e6\u4e00\u4e2a\u7ed3\u6784\u4f53\u7684\u5b57\u6bb5\u503c\u6765\u521d\u59cb\u5316 email : String :: from ( \"another@example.com\" ), sign_in_count : user1 . sign_in_count , }; } \u540c\u65f6\uff0c\u53ef\u4ee5\u4f7f\u7528 .. \u8bed\u6cd5\u6307\u5b9a\u4e86\u5269\u4f59\u672a\u663e\u5f0f\u8bbe\u7f6e\u503c\u7684\u5b57\u6bb5\u5e94\u6709\u4e0e\u7ed9\u5b9a\u5b9e\u4f8b\u5bf9\u5e94\u5b57\u6bb5\u76f8\u540c\u7684\u503c\u3002 fn main () { // --snip-- let user2 = User { // \u53ef\u4ee5\u9009\u62e9\u4ee5\u4efb\u4f55\u987a\u5e8f\u4e3a\u4efb\u610f\u5b57\u6bb5\u6307\u5b9a\u503c\uff0c\u800c\u4e0d\u7528\u8003\u8651\u7ed3\u6784\u4f53\u5b9a\u4e49\u4e2d\u5b57\u6bb5\u7684\u987a\u5e8f\u3002 email : String :: from ( \"another@example.com\" ), .. user1 // ..\u8bed\u6cd5\u6307\u5b9a\u5269\u4f59\u672a\u663e\u5f0f\u8bbe\u7f6e\u503c\u7684\u5b57\u6bb5 // ..user1 \u5fc5\u987b\u653e\u5728\u6700\u540e\uff0c\u4ee5\u6307\u5b9a\u5176\u4f59\u7684\u5b57\u6bb5\u5e94\u4ece user1 \u7684\u76f8\u5e94\u5b57\u6bb5\u4e2d\u83b7\u53d6\u5176\u503c }; } \u6ce8\u610f \u7ed3\u6784\u66f4\u65b0\u8bed\u6cd5\u5c31\u50cf\u5e26\u6709 = \u7684\u8d4b\u503c\uff0c\u56e0\u4e3a\u5b83\u79fb\u52a8\u4e86\u6570\u636e\uff0c\u5c31\u50cf\u5728\u201c \u53d8\u91cf\u4e0e\u6570\u636e\u4ea4\u4e92\u7684\u65b9\u5f0f\uff08\u4e00\uff09\uff1a\u79fb\u52a8 \u201d\u90e8\u5206\u8bb2\u5230\u7684\u4e00\u6837\u3002 \u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u5728\u521b\u5efa user2 \u540e\u4e0d\u80fd\u518d\u4f7f\u7528 user1 \uff0c\u56e0\u4e3a user1 \u7684 username \u5b57\u6bb5\u4e2d\u7684 String \u88ab\u79fb\u5230 user2 \u4e2d\u3002 \u5982\u679c\u6211\u4eec\u7ed9 user2 \u7684 email \u548c username \u90fd\u8d4b\u4e88\u65b0\u7684 String \u503c\uff0c\u4ece\u800c\u53ea\u4f7f\u7528 user1 \u7684 active \u548c sign_in_count \u503c\uff0c\u90a3\u4e48 user1 \u5728\u521b\u5efa user2 \u540e\u4ecd\u7136\u6709\u6548\u3002 active \u548c sign_in_count \u7684\u7c7b\u578b\u662f\u5b9e\u73b0 Copy trait \u7684\u7c7b\u578b\uff0c\u6240\u4ee5\u5728\u201c \u53d8\u91cf\u4e0e\u6570\u636e\u4ea4\u4e92\u7684\u65b9\u5f0f\uff08\u4e8c\uff09\uff1a\u514b\u9686 \u201d \u90e8\u5206\u8ba8\u8bba\u7684\u884c\u4e3a\u540c\u6837\u9002\u7528\u3002 \u5143\u7ec4\u7ed3\u6784\u4f53 \u5b9a\u4e49\u4e0e \u5143\u7ec4 \u7c7b\u4f3c\u7684\u7ed3\u6784\u4f53\uff0c\u79f0\u4e3a \u5143\u7ec4\u7ed3\u6784\u4f53 \uff08tuple structs\uff09\u3002 \u5143\u7ec4\u7ed3\u6784\u4f53\u6709\u7740\u7ed3\u6784\u4f53\u540d\u79f0\u63d0\u4f9b\u7684\u542b\u4e49\uff0c\u4f46\u6ca1\u6709\u5177\u4f53\u7684\u5b57\u6bb5\u540d\uff0c\u53ea\u6709\u5b57\u6bb5\u7684\u7c7b\u578b\u3002 \u5f53\u4f60\u60f3\u7ed9\u6574\u4e2a\u5143\u7ec4\u53d6\u4e00\u4e2a\u540d\u5b57\uff0c\u5e76\u4f7f\u5143\u7ec4\u6210\u4e3a\u4e0e\u5176\u4ed6\u5143\u7ec4\u4e0d\u540c\u7684\u7c7b\u578b\u65f6\uff0c\u5143\u7ec4\u7ed3\u6784\u4f53\u662f\u5f88\u6709\u7528\u7684\uff0c\u8fd9\u65f6\u50cf\u5e38\u89c4\u7ed3\u6784\u4f53\u90a3\u6837\u4e3a\u6bcf\u4e2a\u5b57\u6bb5\u547d\u540d\u5c31\u663e\u5f97\u591a\u4f59\u548c\u5f62\u5f0f\u5316\u4e86\u3002 \u8981\u5b9a\u4e49\u5143\u7ec4\u7ed3\u6784\u4f53\uff0c\u4ee5 struct \u5173\u952e\u5b57\u548c\u7ed3\u6784\u4f53\u540d\u5f00\u5934\u5e76\u540e\u8ddf\u5143\u7ec4\u4e2d\u7684\u7c7b\u578b\u3002 struct Color ( i32 , i32 , i32 ); struct Point ( i32 , i32 , i32 ); fn main () { let black = Color ( 0 , 0 , 0 ); let origin = Point ( 0 , 0 , 0 ); } \u6ce8\u610f black \u548c origin \u503c\u7684\u7c7b\u578b\u4e0d\u540c\uff0c\u56e0\u4e3a\u5b83\u4eec\u662f\u4e0d\u540c\u7684\u5143\u7ec4\u7ed3\u6784\u4f53\u7684\u5b9e\u4f8b\u3002 \u5b9a\u4e49\u7684\u6bcf\u4e00\u4e2a\u7ed3\u6784\u4f53\u6709\u5176\u81ea\u5df1\u7684\u7c7b\u578b\uff0c\u5373\u4f7f\u7ed3\u6784\u4f53\u4e2d\u7684\u5b57\u6bb5\u53ef\u80fd\u6709\u7740\u76f8\u540c\u7684\u7c7b\u578b \u3002 \u4f8b\u5982\uff0c\u4e00\u4e2a\u83b7\u53d6 Color \u7c7b\u578b\u53c2\u6570\u7684\u51fd\u6570\u4e0d\u80fd\u63a5\u53d7 Point \u4f5c\u4e3a\u53c2\u6570\uff0c\u5373\u4fbf\u8fd9\u4e24\u4e2a\u7c7b\u578b\u90fd\u7531\u4e09\u4e2a i32 \u503c\u7ec4\u6210\u3002 \u5728\u5176\u4ed6\u65b9\u9762\uff0c\u5143\u7ec4\u7ed3\u6784\u4f53\u5b9e\u4f8b\u7c7b\u4f3c\u4e8e\u5143\u7ec4\uff0c\u53ef\u4ee5\u5c06\u5b83\u4eec\u89e3\u6784\u4e3a\u5355\u72ec\u7684\u90e8\u5206\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528 . \u540e\u8ddf\u7d22\u5f15\u6765\u8bbf\u95ee\u5355\u72ec\u7684\u503c\u3002 \u7c7b\u5355\u5143\u7ed3\u6784\u4f53 \u4e5f\u53ef\u4ee5\u5b9a\u4e49\u4e00\u4e2a\u6ca1\u6709\u4efb\u4f55\u5b57\u6bb5\u7684\u7ed3\u6784\u4f53\uff01\u5b83\u4eec\u88ab\u79f0\u4e3a \u7c7b\u5355\u5143\u7ed3\u6784\u4f53 \uff08unit-like structs\uff09\u56e0\u4e3a\u5b83\u4eec\u7c7b\u4f3c\u4e8e ()\uff0c\u5373\u201c \u5143\u7ec4\u7c7b\u578b \u201d\u4e00\u8282\u4e2d\u63d0\u5230\u7684 unit \u7c7b\u578b\u3002 \u7c7b\u5355\u5143\u7ed3\u6784\u4f53\u5e38\u5e38\u5728\u60f3\u8981\u5728\u67d0\u4e2a\u7c7b\u578b\u4e0a\u5b9e\u73b0 trait \u4f46\u4e0d\u9700\u8981\u5728\u7c7b\u578b\u4e2d\u5b58\u50a8\u6570\u636e\u7684\u65f6\u5019\u53d1\u6325\u4f5c\u7528\u3002 // \u7c7b\u5355\u5143\u7ed3\u6784\u4f53 struct AlwaysEqual ; // \u4e0d\u9700\u8981\u82b1\u62ec\u53f7\u6216\u5706\u62ec\u53f7\uff01 fn main () { // \u4ee5\u7c7b\u4f3c\u7684\u65b9\u5f0f\u5728 subject \u53d8\u91cf\u4e2d\u83b7\u5f97 AlwaysEqual \u7684\u5b9e\u4f8b let subject = AlwaysEqual ; // \u4f7f\u7528\u5b9a\u4e49\u7684\u540d\u79f0\uff0c\u4e0d\u9700\u8981\u4efb\u4f55\u82b1\u62ec\u53f7\u6216\u5706\u62ec\u53f7\u3002 // \u60f3\u8c61\u4e00\u4e0b\uff0c\u5b9e\u73b0\u8fd9\u4e2a\u7c7b\u578b\u7684\u884c\u4e3a\uff0c\u5373\u6bcf\u4e2a\u5b9e\u4f8b\u59cb\u7ec8\u7b49\u4e8e\u6bcf\u4e00\u4e2a\u5176\u4ed6\u7c7b\u578b\u7684\u5b9e\u4f8b\uff0c\u4e5f\u8bb8\u662f\u4e3a\u4e86\u83b7\u5f97\u4e00\u4e2a\u5df2\u77e5\u7684\u7ed3\u679c\u4ee5\u4fbf\u8fdb\u884c\u6d4b\u8bd5\u3002 } \u7ed3\u6784\u4f53\u6570\u636e\u7684\u6240\u6709\u6743 \u5728\u793a\u4f8b User \u7ed3\u6784\u4f53\u7684\u5b9a\u4e49\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u4e86\u81ea\u8eab\u62e5\u6709\u6240\u6709\u6743\u7684 String \u7c7b\u578b\u800c\u4e0d\u662f &str \u5b57\u7b26\u4e32 slice \u7c7b\u578b\u3002\u8fd9\u662f\u4e00\u4e2a\u6709\u610f\u800c\u4e3a\u4e4b\u7684\u9009\u62e9\uff0c\u56e0\u4e3a\u6211\u4eec\u60f3\u8981\u8fd9\u4e2a\u7ed3\u6784\u4f53\u62e5\u6709\u5b83\u6240\u6709\u7684\u6570\u636e\uff0c\u4e3a\u6b64\u53ea\u8981\u6574\u4e2a\u7ed3\u6784\u4f53\u662f\u6709\u6548\u7684\u8bdd\u5176\u6570\u636e\u4e5f\u662f\u6709\u6548\u7684\u3002 \u53ef\u4ee5\u4f7f\u7ed3\u6784\u4f53\u5b58\u50a8\u88ab\u5176\u4ed6\u5bf9\u8c61\u62e5\u6709\u7684\u6570\u636e\u7684\u5f15\u7528\uff0c\u4e0d\u8fc7\u8fd9\u4e48\u505a\u7684\u8bdd\u9700\u8981\u7528\u4e0a \u751f\u547d\u5468\u671f \uff08lifetimes\uff09\uff0c\u8fd9\u662f\u4e00\u4e2a \u7b2c\u5341\u7ae0 \u4f1a\u8ba8\u8bba\u7684 Rust \u529f\u80fd\u3002 \u751f\u547d\u5468\u671f\u786e\u4fdd\u7ed3\u6784\u4f53\u5f15\u7528\u7684\u6570\u636e\u6709\u6548\u6027\u8ddf\u7ed3\u6784\u4f53\u672c\u8eab\u4fdd\u6301\u4e00\u81f4\u3002\u5982\u679c\u4f60\u5c1d\u8bd5\u5728\u7ed3\u6784\u4f53\u4e2d\u5b58\u50a8\u4e00\u4e2a\u5f15\u7528\u800c\u4e0d\u6307\u5b9a\u751f\u547d\u5468\u671f\u5c06\u662f\u65e0\u6548\u7684\uff0c\u6bd4\u5982\u8fd9\u6837\uff1a struct User { active : bool , username : & str , email : & str , sign_in_count : u64 , } fn main () { let user1 = User { email : \"someone@example.com\" , username : \"someusername123\" , active : true , sign_in_count : 1 , }; } \u7f16\u8bd1\u5668\u4f1a\u62b1\u6028\u5b83\u9700\u8981\u751f\u547d\u5468\u671f\u6807\u8bc6\u7b26\uff1a $ cargo run Compiling structs v0.1.0 ( file:///projects/structs ) error [ E0106 ] : missing lifetime specifier --> src/main.rs:3:15 | 3 | username: & str, | ^ expected named lifetime parameter | help: consider introducing a named lifetime parameter | 1 ~ struct User< 'a> { 2 | active: bool, 3 ~ username: &' a str, | error [ E0106 ] : missing lifetime specifier --> src/main.rs:4:12 | 4 | email: & str, | ^ expected named lifetime parameter | help: consider introducing a named lifetime parameter | 1 ~ struct User< 'a> { 2 | active: bool, 3 | username: &str, 4 ~ email: &' a str, | For more information about this error, try ` rustc --explain E0106 ` . error: could not compile ` structs ` due to 2 previous errors \u7b2c\u5341\u7ae0 \u4f1a\u8bb2\u5230\u5982\u4f55\u4fee\u590d\u8fd9\u4e2a\u95ee\u9898\u4ee5\u4fbf\u5728\u7ed3\u6784\u4f53\u4e2d\u5b58\u50a8\u5f15\u7528\uff0c\u4e0d\u8fc7\u73b0\u5728\uff0c\u4f1a\u4f7f\u7528\u50cf String \u8fd9\u7c7b\u62e5\u6709\u6240\u6709\u6743\u7684\u7c7b\u578b\u6765\u66ff\u4ee3 &str \u8fd9\u6837\u7684\u5f15\u7528\u4ee5\u4fee\u6b63\u8fd9\u4e2a\u9519\u8bef\u3002 \u793a\u4f8b\u7a0b\u5e8f \u4e3a\u4e86\u7406\u89e3\u4f55\u65f6\u4f1a\u9700\u8981\u4f7f\u7528\u7ed3\u6784\u4f53\uff0c\u8fd9\u91cc\u7f16\u5199\u4e00\u4e2a\u8ba1\u7b97\u957f\u65b9\u5f62\u9762\u79ef\u7684\u7a0b\u5e8f\u3002 \u4f7f\u7528 Cargo \u65b0\u5efa\u4e00\u4e2a\u53eb\u505a rectangles \u7684\u4e8c\u8fdb\u5236\u7a0b\u5e8f\uff0c\u5b83\u83b7\u53d6\u4ee5\u50cf\u7d20\u4e3a\u5355\u4f4d\u7684\u957f\u65b9\u5f62\u7684\u5bbd\u5ea6\u548c\u9ad8\u5ea6\uff0c\u5e76\u8ba1\u7b97\u51fa\u957f\u65b9\u5f62\u7684\u9762\u79ef\u3002 fn main () { let width1 = 30 ; let height1 = 50 ; println! ( \"\u77e9\u5f62\u7684\u9762\u79ef\u662f{}\u4e2a\u50cf\u7d20\" , area ( width1 , height1 )) } fn area ( width : u32 , height : u32 ) -> u32 { width * height } \u4fee\u6539\u8fd9\u6bb5\u4ee3\u7801\u6765\u4f7f\u5b83\u7684\u610f\u4e49\u66f4\u52a0\u660e\u786e: // \u51fd\u6570 area \u672c\u5e94\u8be5\u8ba1\u7b97\u4e00\u4e2a\u957f\u65b9\u5f62\u7684\u9762\u79ef\uff0c\u4e0d\u8fc7\u51fd\u6570\u5374\u6709\u4e24\u4e2a\u53c2\u6570\u3002 // \u8fd9\u4e24\u4e2a\u53c2\u6570\u662f\u76f8\u5173\u8054\u7684\uff0c\u4e0d\u8fc7\u7a0b\u5e8f\u672c\u8eab\u5374\u6ca1\u6709\u8868\u73b0\u51fa\u8fd9\u4e00\u70b9\u3002 // \u5c06\u957f\u5ea6\u548c\u5bbd\u5ea6\u7ec4\u5408\u5728\u4e00\u8d77\u5c06\u66f4\u6613\u61c2\u4e5f\u66f4\u6613\u5904\u7406\u3002 fn area ( width : u32 , height : u32 ) -> u32 { // ... } \u5143\u7ec4\u91cd\u6784 \u4f7f\u7528\u5143\u7ec4\u7684\u53e6\u4e00\u4e2a\u7a0b\u5e8f\u7248\u672c: fn main () { let rect = ( 30 , 50 ); println! ( \"\u77e9\u5f62\u7684\u9762\u79ef\u662f{}\u4e2a\u50cf\u7d20\" , area ( rect )) } // \u5143\u7ec4\u5e2e\u52a9\u6211\u4eec\u589e\u52a0\u4e86\u4e00\u4e9b\u7ed3\u6784\u6027\uff0c\u5e76\u4e14\u73b0\u5728\u53ea\u9700\u4f20\u4e00\u4e2a\u53c2\u6570\u3002 // \u4e0d\u8fc7\u5728\u53e6\u4e00\u65b9\u9762\uff0c\u8fd9\u4e2a\u7248\u672c\u5374\u6709\u4e00\u70b9\u4e0d\u660e\u786e\u4e86\uff1a\u5143\u7ec4\u5e76\u6ca1\u6709\u7ed9\u51fa\u5143\u7d20\u7684\u540d\u79f0\uff0c\u6240\u4ee5\u8ba1\u7b97\u53d8\u5f97\u66f4\u8d39\u89e3\u4e86\uff0c\u56e0\u4e3a\u4e0d\u5f97\u4e0d\u4f7f\u7528\u7d22\u5f15\u6765\u83b7\u53d6\u5143\u7ec4\u7684\u6bcf\u4e00\u90e8\u5206\uff1a fn area ( dimensions : ( u32 , u32 )) -> u32 { dimensions . 0 * dimensions . 1 } \u7ed3\u6784\u4f53\u91cd\u6784 \u53ef\u4ee5\u4f7f\u7528\u7ed3\u6784\u4f53\u4e3a\u6570\u636e\u547d\u540d\u6765\u4e3a\u5176\u8d4b\u4e88\u610f\u4e49\u3002\u5c06\u6211\u4eec\u6b63\u5728\u4f7f\u7528\u7684\u5143\u7ec4\u8f6c\u6362\u6210\u4e00\u4e2a\u6709\u6574\u4f53\u540d\u79f0\u800c\u4e14\u6bcf\u4e2a\u90e8\u5206\u4e5f\u6709\u5bf9\u5e94\u540d\u5b57\u7684\u7ed3\u6784\u4f53\uff0c // \u5b9a\u4e49\u4e00\u4e2a\u77e9\u5f62\u7684\u7ed3\u6784\u4f53 // \u5728\u5927\u62ec\u53f7\u4e2d\u5b9a\u4e49\u4e86\u5b57\u6bb5 width \u548c height\uff0c\u7c7b\u578b\u90fd\u662f u32\u3002 struct Rectangle { width : u32 , height : u32 , } fn main () { // \u521b\u5efa\u4e86\u4e00\u4e2a\u5177\u4f53\u7684 Rectangle \u5b9e\u4f8b let rect1 = Rectangle { width : 30 , height : 50 , }; println! ( \"\u77e9\u5f62\u7684\u9762\u79ef\u662f{}\u4e2a\u50cf\u7d20\" , area ( & rect1 )); } // \u8ba1\u7b97\u4e00\u4e2a\u77e9\u5f62\u7684\u9762\u79ef // \u88ab\u5b9a\u4e49\u4e3a\u63a5\u6536\u4e00\u4e2a\u540d\u53eb rectangle \u7684\u53c2\u6570\uff0c\u5176\u7c7b\u578b\u662f\u4e00\u4e2a\u7ed3\u6784\u4f53 Rectangle \u5b9e\u4f8b\u7684\u4e0d\u53ef\u53d8\u501f\u7528(\u5f15\u7528)\u3002 // \u501f\u7528\u7ed3\u6784\u4f53\u800c\u4e0d\u662f\u83b7\u53d6\u5b83\u7684\u6240\u6709\u6743\uff0c\u8fd9\u6837 main \u51fd\u6570\u5c31\u53ef\u4ee5\u4fdd\u6301 rect1 \u7684\u6240\u6709\u6743\u5e76\u7ee7\u7eed\u4f7f\u7528\u5b83\uff0c\u6240\u4ee5\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u5728\u51fd\u6570\u7b7e\u540d\u548c\u8c03\u7528\u7684\u5730\u65b9\u4f1a\u6709 &\u3002 fn area ( rectangle : & Rectangle ) -> u32 { // \u8bbf\u95ee Rectangle \u5b9e\u4f8b\u7684 width \u548c height \u5b57\u6bb5 // \u6ce8\u610f\uff0c\u8bbf\u95ee\u5bf9\u7ed3\u6784\u4f53\u7684\u5f15\u7528\u7684\u5b57\u6bb5\u4e0d\u4f1a\u79fb\u52a8\u5b57\u6bb5\u7684\u6240\u6709\u6743, \u6240\u4ee5\u4f1a\u7ecf\u5e38\u770b\u5230\u5bf9\u7ed3\u6784\u4f53\u7684\u5f15\u7528 rectangle . width * rectangle . height } \u4f7f\u7528 Rectangle \u7684 width \u548c height \u5b57\u6bb5\uff0c\u8ba1\u7b97 Rectangle \u7684\u9762\u79ef\u3002\u8fd9\u8868\u660e\u5bbd\u9ad8\u662f\u76f8\u4e92\u8054\u7cfb\u7684\uff0c\u5e76\u4e3a\u8fd9\u4e9b\u503c\u63d0\u4f9b\u4e86\u63cf\u8ff0\u6027\u7684\u540d\u79f0\u800c\u4e0d\u662f\u4f7f\u7528\u5143\u7ec4\u7684\u7d22\u5f15\u503c 0 \u548c 1 \u3002 \u7ed3\u6784\u4f53\u80dc\u5728\u66f4\u6e05\u6670\u660e\u4e86 \u3002 \u6d3e\u751fTrait \u5728\u8c03\u8bd5\u7a0b\u5e8f\u65f6\u6253\u5370\u51fa Rectangle \u5b9e\u4f8b\u6765\u67e5\u770b\u5176\u6240\u6709\u5b57\u6bb5\u7684\u503c\u975e\u5e38\u6709\u7528\u3002\u5982\u679c\u80fd\u50cf\u524d\u9762\u90a3\u6837\u5c1d\u8bd5\u4f7f\u7528 println! \u5b8f \u5c31\u597d\u4e86\u3002\u4f46\u8fd9\u5e76\u4e0d\u884c\u3002 struct Rectangle { width : u32 , height : u32 , } fn main () { let rect1 = Rectangle { width : 30 , height : 50 , }; println! ( \"\u77e9\u5f62\u662f{}\" , rect1 ); } \u51fa\u73b0\u5e26\u6709\u5982\u4e0b\u6838\u5fc3\u4fe1\u606f\u7684\u9519\u8bef\uff1a error [ E0277 ] : ` Rectangle ` doesn ' t implement ` std::fmt::Display ` println! \u5b8f \u80fd\u5904\u7406\u5f88\u591a\u7c7b\u578b\u7684\u683c\u5f0f\uff0c\u4e0d\u8fc7\uff0c {} \u9ed8\u8ba4\u544a\u8bc9 println! \u4f7f\u7528\u88ab\u79f0\u4e3a Display \u7684\u683c\u5f0f\uff1a \u610f\u5728\u63d0\u4f9b\u7ed9\u76f4\u63a5\u7ec8\u7aef\u7528\u6237\u67e5\u770b\u7684\u8f93\u51fa \u3002 \u76ee\u524d\u4e3a\u6b62\u89c1\u8fc7\u7684\u57fa\u672c\u7c7b\u578b\u90fd\u9ed8\u8ba4\u5b9e\u73b0\u4e86 Display \u683c\u5f0f\uff0c\u56e0\u4e3a\u5b83\u5c31\u662f\u5411\u7528\u6237\u5c55\u793a 1 \u6216\u5176\u4ed6\u4efb\u4f55 \u57fa\u672c\u7c7b\u578b \u7684\u552f\u4e00\u65b9\u5f0f\u3002 \u4e0d\u8fc7\u5bf9\u4e8e\u7ed3\u6784\u4f53\uff0c println! \u5e94\u8be5\u7528\u6765\u8f93\u51fa\u7684\u683c\u5f0f\u662f\u4e0d\u660e\u786e\u7684\uff0c\u56e0\u4e3a\u8fd9\u6709\u66f4\u591a\u663e\u793a\u7684\u53ef\u80fd\u6027\uff1a\u662f\u5426\u9700\u8981\u9017\u53f7\uff1f\u9700\u8981\u6253\u5370\u51fa\u5927\u62ec\u53f7\u5417\uff1f\u6240\u6709\u5b57\u6bb5\u90fd\u5e94\u8be5\u663e\u793a\u5417\uff1f \u7531\u4e8e\u8fd9\u79cd\u4e0d\u786e\u5b9a\u6027\uff0cRust \u4e0d\u4f1a\u5c1d\u8bd5\u731c\u6d4b\u6211\u4eec\u7684\u610f\u56fe\uff0c\u6240\u4ee5\u7ed3\u6784\u4f53\u5e76\u6ca1\u6709\u63d0\u4f9b\u4e00\u4e2a Display \u5b9e\u73b0\u6765\u4f7f\u7528 println! \u4e0e {} \u5360\u4f4d\u7b26\u3002 \u5982\u679c\u6211\u4eec\u7ee7\u7eed\u9605\u8bfb\u9519\u8bef\uff0c\u5c06\u4f1a\u53d1\u73b0\u8fd9\u4e2a\u6709\u5e2e\u52a9\u7684\u4fe1\u606f\uff1a help: the trait ` std::fmt::Display ` is not implemented for ` Rectangle ` note: in format strings you may be able to use ` { :? } ` ( or { :#? } for pretty-print ) instead \u73b0\u5728 println! \u5b8f\u8c03\u7528\u770b\u8d77\u6765\u50cf println!(\"rect1 is {:?}\", rect1); \u8fd9\u6837\u3002\u5728 {} \u4e2d\u52a0\u5165 :? \u6307\u793a\u7b26\u544a\u8bc9 println! \u6211\u4eec\u60f3\u8981\u4f7f\u7528\u53eb\u505a Debug \u7684\u8f93\u51fa\u683c\u5f0f\u3002 Debug \u662f\u4e00\u4e2a trait \uff0c\u5b83\u5141\u8bb8\u6211\u4eec\u4ee5\u4e00\u79cd\u5bf9\u5f00\u53d1\u8005\u6709\u5e2e\u52a9\u7684\u65b9\u5f0f\u6253\u5370\u7ed3\u6784\u4f53\uff0c\u4ee5\u4fbf\u5f53\u6211\u4eec\u8c03\u8bd5\u4ee3\u7801\u65f6\u80fd\u770b\u5230\u5b83\u7684\u503c\u3002 struct Rectangle { width : u32 , height : u32 , } fn main () { let rect1 = Rectangle { width : 30 , height : 50 , }; println! ( \"\u77e9\u5f62\u662f{:?}\" , rect1 ); // \u6dfb\u52a0 :? \u5c1d\u8bd5\u4f7f\u7528Debug\u7684\u8f93\u51fa\u683c\u5f0f } \u8fd9\u6837\u8c03\u6574\u540e\u518d\u6b21\u8fd0\u884c\u7a0b\u5e8f\u3002\u89c1\u9b3c\u4e86\uff01\u4ecd\u7136\u80fd\u770b\u5230\u4e00\u4e2a\u9519\u8bef\uff1a error [ E0277 ] : ` Rectangle ` doesn ' t implement ` Debug ` \u4e0d\u8fc7\u7f16\u8bd1\u5668\u53c8\u4e00\u6b21\u7ed9\u51fa\u4e86\u4e00\u4e2a\u6709\u5e2e\u52a9\u7684\u4fe1\u606f\uff1a help: the trait ` Debug ` is not implemented for ` Rectangle ` note: add ` #[derive(Debug)]` to `Rectangle` or manually `impl Debug for Rectangle` Debug\u8f93\u51fa\u7ed3\u6784\u4f53 Rust \u786e\u5b9e \u5305\u542b\u4e86\u6253\u5370\u51fa\u8c03\u8bd5\u4fe1\u606f\u7684\u529f\u80fd\uff0c\u4e0d\u8fc7\u6211\u4eec\u5fc5\u987b\u4e3a\u7ed3\u6784\u4f53 \u663e\u5f0f \u9009\u62e9\u8fd9\u4e2a\u529f\u80fd\u3002\u4e3a\u6b64\uff0c\u5728\u7ed3\u6784\u4f53\u5b9a\u4e49\u4e4b\u524d\u52a0\u4e0a\u5916\u90e8\u5c5e\u6027 #[derive(Debug)] // \u6dfb\u52a0\u6253\u5370\u8c03\u8bd5\u7684\u529f\u80fd #[derive(Debug)] struct Rectangle { width : u32 , height : u32 , } fn main () { let rect1 = Rectangle { width : 30 , height : 50 , }; println! ( \"\u77e9\u5f62\u662f{:?}\" , rect1 ); // \u5c1d\u8bd5\u4f7f\u7528Debug\u7684\u8f93\u51fa\u683c\u5f0f } \u518d\u8fd0\u884c\u8fd9\u4e2a\u7a0b\u5e8f\u65f6\uff0c\u5c31\u4e0d\u4f1a\u6709\u4efb\u4f55\u9519\u8bef\uff0c\u5e76\u4f1a\u51fa\u73b0\u5982\u4e0b\u8f93\u51fa\uff1a $ cargo run Compiling rectangles v0.1.0 ( file:///projects/rectangles ) Finished dev [ unoptimized + debuginfo ] target ( s ) in 0 .48s Running ` target/debug/rectangles ` \u77e9\u5f62\u662fRectangle { width: 30 , height: 50 } \u8fd9\u5e76\u4e0d\u662f\u6700\u6f02\u4eae\u7684\u8f93\u51fa\uff0c\u4e0d\u8fc7\u5b83\u663e\u793a\u8fd9\u4e2a\u5b9e\u4f8b\u7684\u6240\u6709\u5b57\u6bb5\uff0c\u6beb\u65e0\u7591\u95ee\u8fd9\u5bf9\u8c03\u8bd5\u6709\u5e2e\u52a9\u3002 \u5f53\u6211\u4eec\u6709\u4e00\u4e2a\u66f4\u5927\u7684\u7ed3\u6784\u4f53\u65f6\uff0c\u80fd\u6709\u66f4 \u6613\u8bfb \u4e00\u70b9\u7684\u8f93\u51fa\u5c31\u597d\u4e86\uff0c\u4e3a\u6b64\u53ef\u4ee5\u4f7f\u7528 {:#?} \u66ff\u6362 println! \u5b57\u7b26\u4e32\u4e2d\u7684 {:?} \u3002 #[derive(Debug)] struct Rectangle { width : u32 , height : u32 , } fn main () { let rect1 = Rectangle { width : 30 , height : 50 , }; println! ( \"\u77e9\u5f62\u662f{:#?}\" , rect1 ); // \u5c1d\u8bd5\u4f7f\u7528Debug\u7684\u8f93\u51fa\u683c\u5f0f } \u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\u4f7f\u7528 {:#?} \u98ce\u683c\u5c06\u4f1a\u8f93\u51fa\uff1a $ cargo run Compiling rectangles v0 . 1.0 ( file : ///projects/rectangles) Finished dev [ unoptimized + debuginfo ] target ( s ) in 0.48 s Running ` target / debug / rectangles ` \u77e9\u5f62\u662f Rectangle { width : 30 , height : 50 , } dbg!\u5b8f \u53e6\u4e00\u79cd\u4f7f\u7528 Debug \u683c\u5f0f\u6253\u5370\u6570\u503c\u7684\u65b9\u6cd5\u662f\u4f7f\u7528 dbg! \u5b8f \u3002 dbg! \u5b8f \u53ef\u4ee5\u63a5\u6536\u4e00\u4e2a \u8868\u8fbe\u5f0f \u7684\u6240\u6709\u6743\uff0c\u6253\u5370\u51fa\u4ee3\u7801\u4e2d\u8c03\u7528 dbg! \u5b8f\u65f6\u6240\u5728\u7684\u6587\u4ef6\u548c\u884c\u53f7\uff0c\u4ee5\u53ca\u8be5\u8868\u8fbe\u5f0f\u7684\u7ed3\u679c\u503c\uff0c\u5e76\u8fd4\u56de\u8be5\u503c\u7684\u6240\u6709\u6743\u3002 \uff08\u4e0e println! \u5b8f\u76f8\u53cd\uff0c\u5176\u63a5\u6536\u7684\u662f\u5f15\u7528\uff09 \u6ce8\u610f \u8c03\u7528 dbg! \u5b8f \u4f1a\u6253\u5370\u5230\u6807\u51c6\u9519\u8bef\u63a7\u5236\u53f0\u6d41\uff08stderr\uff09\uff0c\u4e0e println! \u4e0d\u540c\uff0c\u540e\u8005\u4f1a\u6253\u5370\u5230\u6807\u51c6\u8f93\u51fa\u63a7\u5236\u53f0\u6d41\uff08stdout\uff09\u3002\u6211\u4eec\u5c06\u5728 \u7b2c\u5341\u4e8c\u7ae0 \u201c\u5c06\u9519\u8bef\u4fe1\u606f\u5199\u5165\u6807\u51c6\u9519\u8bef\u800c\u4e0d\u662f\u6807\u51c6\u8f93\u51fa\u201d \u4e00\u8282 \u4e2d\u66f4\u591a\u5730\u8ba8\u8bba stderr \u548c stdout \u3002 #[derive(Debug)] struct Rectangle { width : u32 , height : u32 , } fn main () { let scale = 2 ; let rect1 = Rectangle { // \u53ef\u4ee5\u628a dbg! \u653e\u5728\u8868\u8fbe\u5f0f 30 * scale \u5468\u56f4\uff0c\u56e0\u4e3a dbg! \u4f1a\u8fd4\u56de\u8868\u8fbe\u5f0f\u7684\u503c\u7684\u6240\u6709\u6743\uff0c // \u6240\u4ee5 width \u5b57\u6bb5\u5c06\u83b7\u5f97\u76f8\u540c\u7684\u503c\uff0c\u5c31\u50cf\u6211\u4eec\u5728\u90a3\u91cc\u6ca1\u6709 dbg! \u8c03\u7528\u4e00\u6837\u3002 width : dbg ! ( scale * 30 ), height : 50 , }; // \u4e0d\u5e0c\u671b dbg! \u62e5\u6709 rect1 \u7684\u6240\u6709\u6743\uff0c\u6240\u4ee5\u5728\u8fd9\u91cc\u8c03\u7528 dbg! \u65f6\u4ec5\u4f20\u9012\u4e00\u4e2a\u5f15\u7528\u3002 dbg! ( & rect1 ); } $ cargo run Compiling rectangles v0 . 1.0 ( file : ///projects/rectangles) Finished dev [ unoptimized + debuginfo ] target ( s ) in 0.61 s Running ` target / debug / rectangles ` [ src / main . rs : 10 ] scale * 30 = 60 [ src / main . rs : 14 ] & rect1 = Rectangle { width : 60 , height : 50 , } \u8fd9\u4e2a\u8f93\u51fa\u4f7f\u7528\u4e86\u66f4\u4e3a\u6613\u8bfb\u7684 Debug \u683c\u5f0f\u3002\u5f53\u4f60\u8bd5\u56fe\u5f04\u6e05\u695a\u4f60\u7684\u4ee3\u7801\u5728\u505a\u4ec0\u4e48\u65f6\uff0c dbg! \u5b8f \u53ef\u80fd\u771f\u7684\u5f88\u6709\u5e2e\u52a9! \u65b9\u6cd5 \u65b9\u6cd5\uff08method\uff09 \u4e0e\u51fd\u6570\u7c7b\u4f3c\uff1a \u5b83\u4eec\u4f7f\u7528 fn \u5173\u952e\u5b57\u548c\u540d\u79f0\u58f0\u660e\uff0c\u53ef\u4ee5\u62e5\u6709\u53c2\u6570\u548c\u8fd4\u56de\u503c\uff0c\u540c\u65f6\u5305\u542b\u5728\u67d0\u5904\u8c03\u7528\u8be5\u65b9\u6cd5\u65f6\u4f1a\u6267\u884c\u7684\u4ee3\u7801 \u3002 \u4e0d\u8fc7\u65b9\u6cd5\u4e0e\u51fd\u6570\u662f\u4e0d\u540c\u7684\uff0c\u56e0\u4e3a\u5b83\u4eec\u5728\u7ed3\u6784\u4f53\u7684\u4e0a\u4e0b\u6587\u4e2d\u88ab\u5b9a\u4e49\uff08\u6216\u8005\u662f \u679a\u4e3e \u6216 trait \u5bf9\u8c61\u7684\u4e0a\u4e0b\u6587\uff09\uff0c\u5e76\u4e14\u5b83\u4eec\u7b2c\u4e00\u4e2a\u53c2\u6570\u603b\u662f self \uff0c\u5b83\u4ee3\u8868\u8c03\u7528\u8be5\u65b9\u6cd5\u7684\u7ed3\u6784\u4f53\u5b9e\u4f8b\u3002 \u5b9a\u4e49\u65b9\u6cd5 \u628a\u524d\u9762\u5b9e\u73b0\u7684\u83b7\u53d6\u4e00\u4e2a Rectangle \u5b9e\u4f8b\u4f5c\u4e3a\u53c2\u6570\u7684 area \u51fd\u6570\uff0c\u6539\u5199\u6210\u4e00\u4e2a\u5b9a\u4e49\u4e8e Rectangle \u7ed3\u6784\u4f53\u4e0a\u7684 area \u65b9\u6cd5: #[derive(Debug)] struct Rectangle { width : u32 , height : u32 , } // impl \u662f implementation \u7684\u7f29\u5199 // impl \u5757\u4e2d\u7684\u6240\u6709\u5185\u5bb9\u90fd\u5c06\u4e0e Rectangle \u7c7b\u578b\u76f8\u5173\u8054 impl Rectangle { // \u5b9a\u4e49 \u4e0e Rectangle \u76f8\u5173\u8054\u7684 area\u65b9\u6cd5 // \u4f7f\u7528 &self \u6765\u66ff\u4ee3 rectangle: &Rectangle // &self \u5b9e\u9645\u4e0a\u662f self: &Self \u7684\u7f29\u5199 // \u8fd9\u91cc\u9009\u62e9 `&self` \u7684\u7406\u7531\u8ddf\u5728\u51fd\u6570\u7248\u672c\u4e2d\u4f7f\u7528 `&Rectangle` \u662f\u76f8\u540c\u7684\uff1a\u5e76\u4e0d\u60f3\u83b7\u53d6\u6240\u6709\u6743\uff0c\u53ea\u5e0c\u671b\u80fd\u591f\u8bfb\u53d6\u7ed3\u6784\u4f53\u4e2d\u7684\u6570\u636e\uff0c\u800c\u4e0d\u662f\u5199\u5165\u3002 // \u5982\u679c\u60f3\u8981\u5728\u65b9\u6cd5\u4e2d\u6539\u53d8\u8c03\u7528\u65b9\u6cd5\u7684\u5b9e\u4f8b\uff0c\u9700\u8981\u5c06\u7b2c\u4e00\u4e2a\u53c2\u6570\u6539\u4e3a &mut self\u3002 // \u901a\u8fc7\u4ec5\u4ec5\u4f7f\u7528 self \u4f5c\u4e3a\u7b2c\u4e00\u4e2a\u53c2\u6570\u6765\u4f7f\u65b9\u6cd5\u83b7\u53d6\u5b9e\u4f8b\u7684\u6240\u6709\u6743\u662f\u5f88\u5c11\u89c1\u7684\uff1b\u8fd9\u79cd\u6280\u672f\u901a\u5e38\u7528\u5728\u5f53\u65b9\u6cd5\u5c06 self \u8f6c\u6362\u6210\u522b\u7684\u5b9e\u4f8b\u7684\u65f6\u5019\uff0c\u8fd9\u65f6\u60f3\u8981\u9632\u6b62\u8c03\u7528\u8005\u5728\u8f6c\u6362\u4e4b\u540e\u4f7f\u7528\u539f\u59cb\u7684\u5b9e\u4f8b\u3002 fn area ( & self ) -> u32 { self . width * self . height } } fn main () { let rect1 = Rectangle { width : 30 , height : 50 , }; println! ( \"\u77e9\u5f62\u7684\u9762\u79ef\u662f: {} \u50cf\u7d20\" , rect1 . area ()) // \u8c03\u7528Rectangle\u7684\u5173\u8054\u65b9\u6cd5area } \u5728\u4e00\u4e2a impl \u5757\u4e2d\uff0cSelf \u7c7b\u578b\u662f impl \u5757\u7684\u7c7b\u578b\u7684\u522b\u540d\u3002\u65b9\u6cd5\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u5fc5\u987b\u6709\u4e00\u4e2a\u540d\u4e3a self \u7684Self \u7c7b\u578b\u7684\u53c2\u6570 \uff0c\u6240\u4ee5 Rust \u8ba9\u4f60\u5728\u7b2c\u4e00\u4e2a\u53c2\u6570\u4f4d\u7f6e\u4e0a\u53ea\u7528 self \u8fd9\u4e2a\u540d\u5b57\u6765\u7f29\u5199\u3002 \u6ce8\u610f \u6211\u4eec\u4ecd\u7136\u9700\u8981\u5728 self \u524d\u9762\u4f7f\u7528 & \u6765\u8868\u793a\u8fd9\u4e2a\u65b9\u6cd5\u501f\u7528\u4e86 Self \u5b9e\u4f8b\uff0c\u5c31\u50cf\u6211\u4eec\u5728 rectangle: &Rectangle \u4e2d\u505a\u7684\u90a3\u6837\u3002 \u65b9\u6cd5\u53ef\u4ee5\u9009\u62e9\u83b7\u5f97 self \u7684\u6240\u6709\u6743\uff0c\u6216\u8005\u50cf\u8fd9\u91cc\u4e00\u6837 \u4e0d\u53ef\u53d8\u5730\u501f\u7528 self \uff0c\u6216\u8005 \u53ef\u53d8\u5730\u501f\u7528 self \uff0c\u5c31\u8ddf\u5176\u4ed6\u53c2\u6570\u4e00\u6837\u3002 \u4f7f\u7528 \u65b9\u6cd5 \u66ff\u4ee3 \u51fd\u6570 \uff0c\u9664\u4e86\u53ef\u4f7f\u7528\u65b9\u6cd5\u8bed\u6cd5\u548c\u4e0d\u9700\u8981\u5728\u6bcf\u4e2a\u51fd\u6570\u7b7e\u540d\u4e2d\u91cd\u590d self \u7684\u7c7b\u578b\u4e4b\u5916\uff0c\u5176\u4e3b\u8981\u597d\u5904\u5728\u4e8e\u7ec4\u7ec7\u6027\u3002 \u6211\u4eec\u5c06\u67d0\u4e2a\u7c7b\u578b\u5b9e\u4f8b\u80fd\u505a\u7684\u6240\u6709\u4e8b\u60c5\u90fd\u4e00\u8d77\u653e\u5165 impl \u5757\u4e2d\uff0c\u800c\u4e0d\u662f\u8ba9\u5c06\u6765\u7684\u7528\u6237\u5728\u6211\u4eec\u7684\u5e93\u4e2d\u5230\u5904\u5bfb\u627e Rectangle \u7684\u529f\u80fd\u3002 \u6ce8\u610f \u6211\u4eec\u53ef\u4ee5\u9009\u62e9\u5c06\u65b9\u6cd5\u7684\u540d\u79f0\u4e0e\u7ed3\u6784\u4e2d\u7684\u4e00\u4e2a\u5b57\u6bb5\u76f8\u540c\u3002\u4f8b\u5982\uff0c\u6211\u4eec\u53ef\u4ee5\u5728 Rectangle \u4e0a\u5b9a\u4e49\u4e00\u4e2a\u65b9\u6cd5\uff0c\u5e76\u547d\u540d\u4e3a width\uff1a struct Rectangle { width : u32 , height : u32 , } impl Rectangle { fn width ( & self ) -> bool { self . width > 0 } } fn main () { let rect1 = Rectangle { width : 30 , height : 50 , }; println! ( \"\u77e9\u5f62\u7684\u5bbd\u5ea6\u4e0d\u4e3a\u96f6: {}\" , rect1 . width ()) } \u7f16\u7a0b\u65f6 \u53ef\u4ee5\u51fa\u4e8e\u4efb\u4f55\u76ee\u7684\uff0c\u5728\u540c\u540d\u7684\u65b9\u6cd5\u4e2d\u4f7f\u7528\u540c\u540d\u7684\u5b57\u6bb5 \u5728 main \u4e2d\uff0c\u5f53\u6211\u4eec\u5728 rect1.width \u540e\u9762\u52a0\u4e0a\u62ec\u53f7\u65f6\u3002Rust \u77e5\u9053\u6211\u4eec\u6307\u7684\u662f\u65b9\u6cd5 width \u3002\u5f53\u6211\u4eec\u4e0d\u4f7f\u7528\u5706\u62ec\u53f7\u65f6\uff0cRust \u77e5\u9053\u6211\u4eec\u6307\u7684\u662f\u5b57\u6bb5 width \u3002 \u901a\u5e38\uff0c\u4f46\u5e76\u4e0d\u603b\u662f\u5982\u6b64\uff0c\u4e0e\u5b57\u6bb5\u540c\u540d\u7684\u65b9\u6cd5\u5c06\u88ab\u5b9a\u4e49\u4e3a\u53ea\u8fd4\u56de\u5b57\u6bb5\u4e2d\u7684\u503c\uff0c\u800c\u4e0d\u505a\u5176\u4ed6\u4e8b\u60c5\u3002\u8fd9\u6837\u7684\u65b9\u6cd5\u88ab\u79f0\u4e3a getters \uff0c Rust \u5e76\u4e0d\u50cf\u5176\u4ed6\u4e00\u4e9b\u8bed\u8a00\u90a3\u6837\u4e3a\u7ed3\u6784\u5b57\u6bb5\u81ea\u52a8\u5b9e\u73b0\u5b83\u4eec\u3002 Getters \u5f88\u6709\u7528\uff0c\u56e0\u4e3a\u4f60\u53ef\u4ee5\u628a\u5b57\u6bb5\u53d8\u6210\u79c1\u6709\u7684\uff0c\u4f46\u65b9\u6cd5\u662f\u516c\u5171\u7684\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u628a\u5bf9\u5b57\u6bb5\u7684\u53ea\u8bfb\u8bbf\u95ee\u4f5c\u4e3a\u8be5\u7c7b\u578b\u516c\u5171 API \u7684\u4e00\u90e8\u5206\u3002 \u6211\u4eec\u5c06\u5728 \u7b2c\u4e03\u7ae0 \u4e2d\u8ba8\u8bba\u4ec0\u4e48\u662f\u516c\u6709\u548c\u79c1\u6709\uff0c\u4ee5\u53ca\u5982\u4f55\u5c06\u4e00\u4e2a\u5b57\u6bb5\u6216\u65b9\u6cd5\u6307\u5b9a\u4e3a\u516c\u6709\u6216\u79c1\u6709\u3002 \u53c2\u6570\u65b9\u6cd5 \u901a\u8fc7\u5b9e\u73b0 Rectangle \u7ed3\u6784\u4f53\u4e0a\u7684\u53e6\u4e00\u65b9\u6cd5\u6765\u7ec3\u4e60\u4f7f\u7528\u65b9\u6cd5 \u8ba9\u4e00\u4e2a Rectangle \u7684\u5b9e\u4f8b\u83b7\u53d6\u53e6\u4e00\u4e2a Rectangle \u5b9e\u4f8b\uff0c\u5982\u679c self \uff08\u7b2c\u4e00\u4e2a Rectangle \uff09\u80fd\u5b8c\u5168\u5305\u542b\u7b2c\u4e8c\u4e2a\u957f\u65b9\u5f62\u5219\u8fd4\u56de true\uff1b\u5426\u5219\u8fd4\u56de false\u3002 fn main () { let rect1 = Rectangle { width : 30 , height : 50 , }; let rect2 = Rectangle { width : 10 , height : 40 , }; let rect3 = Rectangle { width : 60 , height : 45 , }; println! ( \"\u77e9\u5f62rect1\u53ef\u4ee5\u5305\u542brect2: {}\" , rect1 . can_hold ( & rect2 )); println! ( \"\u77e9\u5f62rect2\u53ef\u4ee5\u5305\u542brect3: {}\" , rect2 . can_hold ( & rect3 )); } \u540c\u65f6\u5e0c\u671b\u770b\u5230\u5982\u4e0b\u8f93\u51fa\uff0c\u56e0\u4e3a rect2 \u7684\u4e24\u4e2a\u7ef4\u5ea6\u90fd\u5c0f\u4e8e rect1\uff0c\u800c rect3 \u6bd4 rect1 \u8981\u5bbd\uff1a \u77e9\u5f62rect1\u53ef\u4ee5\u5305\u542brect2: true \u77e9\u5f62rect2\u53ef\u4ee5\u5305\u542brect3: false impl Rectangle { fn width ( & self ) -> bool { self . width > 0 } fn area ( & self ) -> u32 { self . width * self . height } // \u5e0c\u671b main \u4fdd\u6301 other \u7684\u6240\u6709\u6743\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u5728\u8c03\u7528\u8fd9\u4e2a\u65b9\u6cd5\u540e\u7ee7\u7eed\u4f7f\u7528\u5b83\u3002 // can_hold \u7684\u8fd4\u56de\u503c\u662f\u4e00\u4e2a\u5e03\u5c14\u503c\uff0c\u5176\u5b9e\u73b0\u4f1a\u5206\u522b\u68c0\u67e5 self \u7684\u5bbd\u9ad8\u662f\u5426\u90fd\u5927\u4e8e\u53e6\u4e00\u4e2a Rectangle\u3002 fn can_hold ( & self , other : & Rectangle ) -> bool { self . width > other . width && self . height > other . height } } \u5173\u8054\u51fd\u6570 \u6240\u6709\u5728 impl \u5757\u4e2d\u5b9a\u4e49\u7684\u51fd\u6570\u88ab\u79f0\u4e3a \u5173\u8054\u51fd\u6570 \uff08associated functions\uff09\uff0c\u56e0\u4e3a\u5b83\u4eec\u4e0e impl \u540e\u9762\u547d\u540d\u7684\u7c7b\u578b\u76f8\u5173\u3002 \u53ef\u4ee5\u5b9a\u4e49\u4e0d\u4ee5 self \u4e3a\u7b2c\u4e00\u53c2\u6570\u7684\u5173\u8054\u51fd\u6570\uff08\u56e0\u6b64\u4e0d\u662f\u65b9\u6cd5\uff09\uff0c\u56e0\u4e3a\u5b83\u4eec\u5e76\u4e0d\u4f5c\u7528\u4e8e\u4e00\u4e2a\u7ed3\u6784\u4f53\u7684\u5b9e\u4f8b\u3002\u6211\u4eec\u5df2\u7ecf\u4f7f\u7528\u4e86\u4e00\u4e2a\u8fd9\u6837\u7684\u51fd\u6570\uff1a \u5728 String \u7c7b\u578b\u4e0a\u5b9a\u4e49\u7684 String::from \u51fd\u6570 \u3002 \u4e0d\u662f\u65b9\u6cd5\u7684\u5173\u8054\u51fd\u6570\u7ecf\u5e38\u88ab\u7528\u4f5c\u8fd4\u56de\u4e00\u4e2a\u7ed3\u6784\u4f53\u65b0\u5b9e\u4f8b\u7684\u6784\u9020\u51fd\u6570 \u3002\u8fd9\u4e9b\u51fd\u6570\u7684\u540d\u79f0\u901a\u5e38\u4e3a new \uff0c\u4f46 new \u5e76\u4e0d\u662f\u4e00\u4e2a\u5173\u952e\u5b57\u3002 \u4f8b\u5982\u6211\u4eec\u53ef\u4ee5\u63d0\u4f9b\u4e00\u4e2a\u53eb\u505a square \u5173\u8054\u51fd\u6570\uff0c\u5b83\u63a5\u53d7\u4e00\u4e2a\u7ef4\u5ea6\u53c2\u6570\u5e76\u4e14\u540c\u65f6\u4f5c\u4e3a\u5bbd\u548c\u9ad8\uff0c\u8fd9\u6837\u53ef\u4ee5\u66f4\u8f7b\u677e\u7684\u521b\u5efa\u4e00\u4e2a\u6b63\u65b9\u5f62 Rectangle \u800c\u4e0d\u5fc5\u6307\u5b9a\u4e24\u6b21\u540c\u6837\u7684\u503c\uff1a impl Rectangle { // \u521b\u5efa\u4e00\u4e2a\u6b63\u65b9\u5f62\u7684\u5173\u8054\u51fd\u6570\uff0c\u4e0d\u662f\u65b9\u6cd5\uff01\uff01\uff01 // \u5173\u952e\u5b57 Self \u5728\u51fd\u6570\u7684\u8fd4\u56de\u7c7b\u578b\u4e2d\u4ee3\u6307\u5728 impl \u5173\u952e\u5b57\u540e\u51fa\u73b0\u7684\u7c7b\u578b\uff0c\u5728\u8fd9\u91cc\u662f Rectangle fn square ( size : u32 ) -> Self { Self { width : size , height : size , } } } \u4f7f\u7528\u7ed3\u6784\u4f53\u540d\u548c :: \u8bed\u6cd5\u6765\u8c03\u7528\u8fd9\u4e2a\u5173\u8054\u51fd\u6570\uff1a\u6bd4\u5982 let sq = Rectangle::square(3); \u3002 \u8fd9\u4e2a\u51fd\u6570\u4f4d\u4e8e\u7ed3\u6784\u4f53\u7684\u547d\u540d\u7a7a\u95f4\u4e2d\uff1a :: \u8bed\u6cd5\u7528\u4e8e \u5173\u8054\u51fd\u6570 \u548c \u6a21\u5757\u521b\u5efa\u7684\u547d\u540d\u7a7a\u95f4 \u3002 \u7b2c\u4e03\u7ae0 \u4f1a\u8bb2\u5230\u6a21\u5757\u3002 \u591a\u4e2a impl \u5757 \u6bcf\u4e2a\u7ed3\u6784\u4f53\u90fd\u5141\u8bb8\u62e5\u6709\u591a\u4e2a impl \u5757\u3002\u4f8b\u5982\uff0c\u4e0b\u9762\u793a\u4f8b\u4e2d\u7684\u4ee3\u7801\u7b49\u540c\u4e8e\u4e0a\u9762\u793a\u4f8b\u4e2d\u4ee3\u7801\uff0c\u4f46\u6bcf\u4e2a\u65b9\u6cd5\u6709\u5176\u81ea\u5df1\u7684 impl \u5757\u3002 impl Rectangle { fn area ( & self ) -> u32 { self . width * self . height } } impl Rectangle { fn can_hold ( & self , other : & Rectangle ) -> bool { self . width > other . width && self . height > other . height } } \u8fd9\u91cc\u6ca1\u6709\u7406\u7531\u5c06\u8fd9\u4e9b\u65b9\u6cd5\u5206\u6563\u5728\u591a\u4e2a impl \u5757\u4e2d\uff0c\u4e0d\u8fc7\u8fd9\u662f\u6709\u6548\u7684\u8bed\u6cd5\u3002 \u7b2c\u5341\u7ae0 \u8ba8\u8bba\u6cdb\u578b\u548c trait \u65f6\u4f1a\u770b\u5230\u5b9e\u7528\u7684\u591a impl \u5757\u7684\u7528\u4f8b\u3002 \u603b\u7ed3 \u7ed3\u6784\u4f53\u8ba9\u4f60\u53ef\u4ee5\u521b\u5efa\u51fa\u5728\u4f60\u7684\u9886\u57df\u4e2d\u6709\u610f\u4e49\u7684\u81ea\u5b9a\u4e49\u7c7b\u578b \u3002 \u901a\u8fc7\u7ed3\u6784\u4f53\uff0c\u6211\u4eec\u53ef\u4ee5 \u5c06\u76f8\u5173\u8054\u7684\u6570\u636e\u7247\u6bb5\u8054\u7cfb\u8d77\u6765\u5e76\u547d\u540d\u5b83\u4eec\uff0c\u8fd9\u6837\u53ef\u4ee5\u4f7f\u5f97\u4ee3\u7801\u66f4\u52a0\u6e05\u6670 \u3002 \u5728 impl \u5757\u4e2d\uff0c\u4f60\u53ef\u4ee5\u5b9a\u4e49\u4e0e\u4f60\u7684\u7c7b\u578b\u76f8\u5173\u8054\u7684\u51fd\u6570\uff0c\u800c\u65b9\u6cd5\u662f\u4e00\u79cd\u76f8\u5173\u8054\u7684\u51fd\u6570\uff0c\u8ba9\u4f60\u6307\u5b9a\u7ed3\u6784\u4f53\u7684 \u5b9e\u4f8b \u6240\u5177\u6709\u7684\u884c\u4e3a\u3002 \u4f46\u7ed3\u6784\u4f53\u5e76\u4e0d\u662f\u521b\u5efa\u81ea\u5b9a\u4e49\u7c7b\u578b\u7684\u552f\u4e00\u65b9\u6cd5\uff1a Rust \u7684\u679a\u4e3e\u529f\u80fd\u4e5f\u53ef\u4ee5\uff01","title":"\u7ed3\u6784\u4f53"},{"location":"struct/#_1","text":"struct \uff0c\u6216\u8005 structure \uff0c\u662f\u4e00\u4e2a\u81ea\u5b9a\u4e49\u6570\u636e\u7c7b\u578b\uff0c\u5141\u8bb8\u4f60\u5305\u88c5\u548c\u547d\u540d\u591a\u4e2a\u76f8\u5173\u7684\u503c\uff0c\u4ece\u800c\u5f62\u6210\u4e00\u4e2a\u6709\u610f\u4e49\u7684\u7ec4\u5408\u3002","title":"\u7ed3\u6784\u4f53"},{"location":"struct/#_2","text":"\u548c\u5143\u7ec4\u4e00\u6837\uff0c\u7ed3\u6784\u4f53\u7684\u6bcf\u4e00\u90e8\u5206\u53ef\u4ee5\u662f\u4e0d\u540c\u7c7b\u578b\u3002\u4f46\u4e0d\u540c\u4e8e\u5143\u7ec4\uff0c \u7ed3\u6784\u4f53\u9700\u8981\u547d\u540d\u5404\u90e8\u5206\u6570\u636e\u4ee5\u4fbf\u80fd\u6e05\u695a\u7684\u8868\u660e\u5176\u503c\u7684\u610f\u4e49 \u3002\u7531\u4e8e\u6709\u4e86\u8fd9\u4e9b\u540d\u5b57\uff0c\u7ed3\u6784\u4f53\u6bd4\u5143\u7ec4\u66f4\u7075\u6d3b\uff1a \u4e0d\u9700\u8981\u4f9d\u8d56\u987a\u5e8f\u6765\u6307\u5b9a\u6216\u8bbf\u95ee\u5b9e\u4f8b\u4e2d\u7684\u503c \u3002 \u5b9a\u4e49\u7ed3\u6784\u4f53\uff0c\u9700\u8981\u4f7f\u7528 struct \u5173\u952e\u5b57\u5e76\u4e3a\u6574\u4e2a\u7ed3\u6784\u4f53\u63d0\u4f9b\u4e00\u4e2a\u540d\u5b57\u3002\u7ed3\u6784\u4f53\u7684\u540d\u5b57\u9700\u8981\u63cf\u8ff0\u5b83\u6240\u7ec4\u5408\u7684\u6570\u636e\u7684\u610f\u4e49\u3002\u63a5\u7740\uff0c\u5728\u5927\u62ec\u53f7\u4e2d\uff0c\u5b9a\u4e49\u6bcf\u4e00\u90e8\u5206\u6570\u636e\u7684\u540d\u5b57\u548c\u7c7b\u578b\uff0c\u79f0\u4e3a \u5b57\u6bb5 \uff08field\uff09\u3002 struct User { active : bool , username : String , email : String , sign_in_count : u64 , } \u4e00\u65e6\u5b9a\u4e49\u4e86\u7ed3\u6784\u4f53\u540e\uff0c\u4e3a\u4e86\u4f7f\u7528\u5b83\uff0c\u901a\u8fc7\u4e3a\u6bcf\u4e2a\u5b57\u6bb5\u6307\u5b9a\u5177\u4f53\u503c\u6765\u521b\u5efa\u8fd9\u4e2a\u7ed3\u6784\u4f53\u7684 \u5b9e\u4f8b \u3002\u521b\u5efa\u4e00\u4e2a\u5b9e\u4f8b\u9700\u8981\u4ee5\u7ed3\u6784\u4f53\u7684\u540d\u5b57\u5f00\u5934\uff0c\u63a5\u7740\u5728\u5927\u62ec\u53f7\u4e2d\u4f7f\u7528 key: value \u952e-\u503c\u5bf9\u7684\u5f62\u5f0f\u63d0\u4f9b\u5b57\u6bb5\uff0c\u5176\u4e2d key \u662f\u5b57\u6bb5\u7684\u540d\u5b57\uff0c value \u662f\u9700\u8981\u5b58\u50a8\u5728\u5b57\u6bb5\u4e2d\u7684\u6570\u636e\u503c\u3002 \u5b9e\u4f8b\u4e2d\u5b57\u6bb5\u7684\u987a\u5e8f \u4e0d\u9700\u8981 \u548c\u5b83\u4eec\u5728\u7ed3\u6784\u4f53\u4e2d\u58f0\u660e\u7684\u987a\u5e8f\u4e00\u81f4\u3002 \u4e3a\u4e86\u4ece\u7ed3\u6784\u4f53\u4e2d\u83b7\u53d6\u67d0\u4e2a\u7279\u5b9a\u7684\u503c\uff0c\u53ef\u4ee5\u4f7f\u7528\u70b9\u53f7\u3002 fn main () { // \u5b9e\u4f8b\u5316\u4e00\u4e2a\u7ed3\u6784\u4f53\uff0c\u5176\u4e2d\u5b57\u6bb5\u987a\u5e8f\u4e0d\u9700\u8981\u548c\u5b9a\u4e49\u65f6\u7684\u4e00\u76f4\u3002 let user1 = User { email : String :: from ( \"someone@example.com\" ), username : String :: from ( \"someusername123\" ), active : true , sign_in_count : 1 , }; // \u4f7f\u7528\u70b9\u53f7\u83b7\u53d6\u7ed3\u6784\u4f53\u4e2d\u7684\u67d0\u4e2a\u7279\u5b9a\u7684\u503c user1 . email = String :: from ( \"anotheremail@example.com\" ); } \u6ce8\u610f\u6574\u4e2a\u5b9e\u4f8b\u5fc5\u987b\u662f\u53ef\u53d8\u7684\uff1bRust \u5e76 \u4e0d\u5141\u8bb8 \u53ea\u5c06\u67d0\u4e2a\u5b57\u6bb5\u6807\u8bb0\u4e3a\u53ef\u53d8\u3002 \u53e6\u5916\u9700\u8981\u6ce8\u610f\u540c\u5176\u4ed6\u4efb\u4f55\u8868\u8fbe\u5f0f\u4e00\u6837\uff0c\u53ef\u4ee5\u5728\u51fd\u6570\u4f53\u7684\u6700\u540e\u4e00\u4e2a\u8868\u8fbe\u5f0f\u4e2d\u6784\u9020\u4e00\u4e2a\u7ed3\u6784\u4f53\u7684\u65b0\u5b9e\u4f8b\uff0c\u6765\u9690\u5f0f\u5730\u8fd4\u56de\u8fd9\u4e2a\u5b9e\u4f8b\u3002 // \u521b\u5efa\u4e00\u4e2a\u7ed3\u6784\u4f53\u7684\u5b9e\u4f8b\u5e76\u8fd4\u56de\uff0c // \u6709\u70b9\u7c7b\u4f3c\u4e8e\u5176\u4ed6\u8bed\u8a00\u4e2d\u7684\u521d\u59cb\u5316\u4e00\u4e2a\u7ed3\u6784\u4f53\u3002 fn build_user ( email : String , username : String ) -> User { User { email : email , username : username , active : true , // \u9ed8\u8ba4\u503c\u4e3atrue sign_in_count : 1 , // \u9ed8\u8ba4\u503c\u4e3a1 } }","title":"\u5b9a\u4e49\u548c\u5b9e\u4f8b\u5316"},{"location":"struct/#_3","text":"\u56e0\u4e3a\u793a\u4f8b\u4e2d\u7684\u53c2\u6570\u540d\u4e0e\u5b57\u6bb5\u540d\u90fd\u5b8c\u5168\u76f8\u540c\uff0c\u5219\u53ef\u4ee5\u4f7f\u7528 \u5b57\u6bb5\u521d\u59cb\u5316\u7b80\u5199\u8bed\u6cd5 \uff08field init shorthand\uff09\u6765\u91cd\u5199 build_user \uff0c\u8fd9\u6837\u5176\u884c\u4e3a\u4e0e\u4e4b\u524d\u5b8c\u5168\u76f8\u540c\uff0c\u4e0d\u8fc7\u65e0\u9700\u91cd\u590d email \u548c username . fn build_user ( email : String , username : String ) -> User { User { email , // \u5b57\u6bb5\u521d\u59cb\u5316\u7b80\u5199\u8bed\u6cd5 username , // \u5b57\u6bb5\u521d\u59cb\u5316\u7b80\u5199\u8bed\u6cd5 active : true , sign_in_count : 1 , } }","title":"\u5b57\u6bb5\u521d\u59cb\u5316\u7b80\u5199"},{"location":"struct/#_4","text":"\u4f7f\u7528\u65e7\u5b9e\u4f8b\u7684\u5927\u90e8\u5206\u503c\u4f46\u6539\u53d8\u5176\u90e8\u5206\u503c\u6765\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u7ed3\u6784\u4f53\u5b9e\u4f8b\u901a\u5e38\u662f\u5f88\u6709\u7528\u7684\u3002\u8fd9\u53ef\u4ee5\u901a\u8fc7 \u7ed3\u6784\u4f53\u66f4\u65b0\u8bed\u6cd5 \uff08struct update syntax\uff09\u5b9e\u73b0\u3002 fn main () { // --snip-- let user2 = User { active : user1 . active , // \u4ece\u53e6\u4e00\u4e2a\u7ed3\u6784\u4f53\u7684\u5b57\u6bb5\u503c\u6765\u521d\u59cb\u5316 username : user1 . username , // \u4ece\u53e6\u4e00\u4e2a\u7ed3\u6784\u4f53\u7684\u5b57\u6bb5\u503c\u6765\u521d\u59cb\u5316 email : String :: from ( \"another@example.com\" ), sign_in_count : user1 . sign_in_count , }; } \u540c\u65f6\uff0c\u53ef\u4ee5\u4f7f\u7528 .. \u8bed\u6cd5\u6307\u5b9a\u4e86\u5269\u4f59\u672a\u663e\u5f0f\u8bbe\u7f6e\u503c\u7684\u5b57\u6bb5\u5e94\u6709\u4e0e\u7ed9\u5b9a\u5b9e\u4f8b\u5bf9\u5e94\u5b57\u6bb5\u76f8\u540c\u7684\u503c\u3002 fn main () { // --snip-- let user2 = User { // \u53ef\u4ee5\u9009\u62e9\u4ee5\u4efb\u4f55\u987a\u5e8f\u4e3a\u4efb\u610f\u5b57\u6bb5\u6307\u5b9a\u503c\uff0c\u800c\u4e0d\u7528\u8003\u8651\u7ed3\u6784\u4f53\u5b9a\u4e49\u4e2d\u5b57\u6bb5\u7684\u987a\u5e8f\u3002 email : String :: from ( \"another@example.com\" ), .. user1 // ..\u8bed\u6cd5\u6307\u5b9a\u5269\u4f59\u672a\u663e\u5f0f\u8bbe\u7f6e\u503c\u7684\u5b57\u6bb5 // ..user1 \u5fc5\u987b\u653e\u5728\u6700\u540e\uff0c\u4ee5\u6307\u5b9a\u5176\u4f59\u7684\u5b57\u6bb5\u5e94\u4ece user1 \u7684\u76f8\u5e94\u5b57\u6bb5\u4e2d\u83b7\u53d6\u5176\u503c }; } \u6ce8\u610f \u7ed3\u6784\u66f4\u65b0\u8bed\u6cd5\u5c31\u50cf\u5e26\u6709 = \u7684\u8d4b\u503c\uff0c\u56e0\u4e3a\u5b83\u79fb\u52a8\u4e86\u6570\u636e\uff0c\u5c31\u50cf\u5728\u201c \u53d8\u91cf\u4e0e\u6570\u636e\u4ea4\u4e92\u7684\u65b9\u5f0f\uff08\u4e00\uff09\uff1a\u79fb\u52a8 \u201d\u90e8\u5206\u8bb2\u5230\u7684\u4e00\u6837\u3002 \u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u5728\u521b\u5efa user2 \u540e\u4e0d\u80fd\u518d\u4f7f\u7528 user1 \uff0c\u56e0\u4e3a user1 \u7684 username \u5b57\u6bb5\u4e2d\u7684 String \u88ab\u79fb\u5230 user2 \u4e2d\u3002 \u5982\u679c\u6211\u4eec\u7ed9 user2 \u7684 email \u548c username \u90fd\u8d4b\u4e88\u65b0\u7684 String \u503c\uff0c\u4ece\u800c\u53ea\u4f7f\u7528 user1 \u7684 active \u548c sign_in_count \u503c\uff0c\u90a3\u4e48 user1 \u5728\u521b\u5efa user2 \u540e\u4ecd\u7136\u6709\u6548\u3002 active \u548c sign_in_count \u7684\u7c7b\u578b\u662f\u5b9e\u73b0 Copy trait \u7684\u7c7b\u578b\uff0c\u6240\u4ee5\u5728\u201c \u53d8\u91cf\u4e0e\u6570\u636e\u4ea4\u4e92\u7684\u65b9\u5f0f\uff08\u4e8c\uff09\uff1a\u514b\u9686 \u201d \u90e8\u5206\u8ba8\u8bba\u7684\u884c\u4e3a\u540c\u6837\u9002\u7528\u3002","title":"\u4ece\u5176\u4ed6\u5b9e\u4f8b\u521b\u5efa\u5b9e\u4f8b"},{"location":"struct/#_5","text":"\u5b9a\u4e49\u4e0e \u5143\u7ec4 \u7c7b\u4f3c\u7684\u7ed3\u6784\u4f53\uff0c\u79f0\u4e3a \u5143\u7ec4\u7ed3\u6784\u4f53 \uff08tuple structs\uff09\u3002 \u5143\u7ec4\u7ed3\u6784\u4f53\u6709\u7740\u7ed3\u6784\u4f53\u540d\u79f0\u63d0\u4f9b\u7684\u542b\u4e49\uff0c\u4f46\u6ca1\u6709\u5177\u4f53\u7684\u5b57\u6bb5\u540d\uff0c\u53ea\u6709\u5b57\u6bb5\u7684\u7c7b\u578b\u3002 \u5f53\u4f60\u60f3\u7ed9\u6574\u4e2a\u5143\u7ec4\u53d6\u4e00\u4e2a\u540d\u5b57\uff0c\u5e76\u4f7f\u5143\u7ec4\u6210\u4e3a\u4e0e\u5176\u4ed6\u5143\u7ec4\u4e0d\u540c\u7684\u7c7b\u578b\u65f6\uff0c\u5143\u7ec4\u7ed3\u6784\u4f53\u662f\u5f88\u6709\u7528\u7684\uff0c\u8fd9\u65f6\u50cf\u5e38\u89c4\u7ed3\u6784\u4f53\u90a3\u6837\u4e3a\u6bcf\u4e2a\u5b57\u6bb5\u547d\u540d\u5c31\u663e\u5f97\u591a\u4f59\u548c\u5f62\u5f0f\u5316\u4e86\u3002 \u8981\u5b9a\u4e49\u5143\u7ec4\u7ed3\u6784\u4f53\uff0c\u4ee5 struct \u5173\u952e\u5b57\u548c\u7ed3\u6784\u4f53\u540d\u5f00\u5934\u5e76\u540e\u8ddf\u5143\u7ec4\u4e2d\u7684\u7c7b\u578b\u3002 struct Color ( i32 , i32 , i32 ); struct Point ( i32 , i32 , i32 ); fn main () { let black = Color ( 0 , 0 , 0 ); let origin = Point ( 0 , 0 , 0 ); } \u6ce8\u610f black \u548c origin \u503c\u7684\u7c7b\u578b\u4e0d\u540c\uff0c\u56e0\u4e3a\u5b83\u4eec\u662f\u4e0d\u540c\u7684\u5143\u7ec4\u7ed3\u6784\u4f53\u7684\u5b9e\u4f8b\u3002 \u5b9a\u4e49\u7684\u6bcf\u4e00\u4e2a\u7ed3\u6784\u4f53\u6709\u5176\u81ea\u5df1\u7684\u7c7b\u578b\uff0c\u5373\u4f7f\u7ed3\u6784\u4f53\u4e2d\u7684\u5b57\u6bb5\u53ef\u80fd\u6709\u7740\u76f8\u540c\u7684\u7c7b\u578b \u3002 \u4f8b\u5982\uff0c\u4e00\u4e2a\u83b7\u53d6 Color \u7c7b\u578b\u53c2\u6570\u7684\u51fd\u6570\u4e0d\u80fd\u63a5\u53d7 Point \u4f5c\u4e3a\u53c2\u6570\uff0c\u5373\u4fbf\u8fd9\u4e24\u4e2a\u7c7b\u578b\u90fd\u7531\u4e09\u4e2a i32 \u503c\u7ec4\u6210\u3002 \u5728\u5176\u4ed6\u65b9\u9762\uff0c\u5143\u7ec4\u7ed3\u6784\u4f53\u5b9e\u4f8b\u7c7b\u4f3c\u4e8e\u5143\u7ec4\uff0c\u53ef\u4ee5\u5c06\u5b83\u4eec\u89e3\u6784\u4e3a\u5355\u72ec\u7684\u90e8\u5206\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528 . \u540e\u8ddf\u7d22\u5f15\u6765\u8bbf\u95ee\u5355\u72ec\u7684\u503c\u3002","title":"\u5143\u7ec4\u7ed3\u6784\u4f53"},{"location":"struct/#_6","text":"\u4e5f\u53ef\u4ee5\u5b9a\u4e49\u4e00\u4e2a\u6ca1\u6709\u4efb\u4f55\u5b57\u6bb5\u7684\u7ed3\u6784\u4f53\uff01\u5b83\u4eec\u88ab\u79f0\u4e3a \u7c7b\u5355\u5143\u7ed3\u6784\u4f53 \uff08unit-like structs\uff09\u56e0\u4e3a\u5b83\u4eec\u7c7b\u4f3c\u4e8e ()\uff0c\u5373\u201c \u5143\u7ec4\u7c7b\u578b \u201d\u4e00\u8282\u4e2d\u63d0\u5230\u7684 unit \u7c7b\u578b\u3002 \u7c7b\u5355\u5143\u7ed3\u6784\u4f53\u5e38\u5e38\u5728\u60f3\u8981\u5728\u67d0\u4e2a\u7c7b\u578b\u4e0a\u5b9e\u73b0 trait \u4f46\u4e0d\u9700\u8981\u5728\u7c7b\u578b\u4e2d\u5b58\u50a8\u6570\u636e\u7684\u65f6\u5019\u53d1\u6325\u4f5c\u7528\u3002 // \u7c7b\u5355\u5143\u7ed3\u6784\u4f53 struct AlwaysEqual ; // \u4e0d\u9700\u8981\u82b1\u62ec\u53f7\u6216\u5706\u62ec\u53f7\uff01 fn main () { // \u4ee5\u7c7b\u4f3c\u7684\u65b9\u5f0f\u5728 subject \u53d8\u91cf\u4e2d\u83b7\u5f97 AlwaysEqual \u7684\u5b9e\u4f8b let subject = AlwaysEqual ; // \u4f7f\u7528\u5b9a\u4e49\u7684\u540d\u79f0\uff0c\u4e0d\u9700\u8981\u4efb\u4f55\u82b1\u62ec\u53f7\u6216\u5706\u62ec\u53f7\u3002 // \u60f3\u8c61\u4e00\u4e0b\uff0c\u5b9e\u73b0\u8fd9\u4e2a\u7c7b\u578b\u7684\u884c\u4e3a\uff0c\u5373\u6bcf\u4e2a\u5b9e\u4f8b\u59cb\u7ec8\u7b49\u4e8e\u6bcf\u4e00\u4e2a\u5176\u4ed6\u7c7b\u578b\u7684\u5b9e\u4f8b\uff0c\u4e5f\u8bb8\u662f\u4e3a\u4e86\u83b7\u5f97\u4e00\u4e2a\u5df2\u77e5\u7684\u7ed3\u679c\u4ee5\u4fbf\u8fdb\u884c\u6d4b\u8bd5\u3002 } \u7ed3\u6784\u4f53\u6570\u636e\u7684\u6240\u6709\u6743 \u5728\u793a\u4f8b User \u7ed3\u6784\u4f53\u7684\u5b9a\u4e49\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u4e86\u81ea\u8eab\u62e5\u6709\u6240\u6709\u6743\u7684 String \u7c7b\u578b\u800c\u4e0d\u662f &str \u5b57\u7b26\u4e32 slice \u7c7b\u578b\u3002\u8fd9\u662f\u4e00\u4e2a\u6709\u610f\u800c\u4e3a\u4e4b\u7684\u9009\u62e9\uff0c\u56e0\u4e3a\u6211\u4eec\u60f3\u8981\u8fd9\u4e2a\u7ed3\u6784\u4f53\u62e5\u6709\u5b83\u6240\u6709\u7684\u6570\u636e\uff0c\u4e3a\u6b64\u53ea\u8981\u6574\u4e2a\u7ed3\u6784\u4f53\u662f\u6709\u6548\u7684\u8bdd\u5176\u6570\u636e\u4e5f\u662f\u6709\u6548\u7684\u3002 \u53ef\u4ee5\u4f7f\u7ed3\u6784\u4f53\u5b58\u50a8\u88ab\u5176\u4ed6\u5bf9\u8c61\u62e5\u6709\u7684\u6570\u636e\u7684\u5f15\u7528\uff0c\u4e0d\u8fc7\u8fd9\u4e48\u505a\u7684\u8bdd\u9700\u8981\u7528\u4e0a \u751f\u547d\u5468\u671f \uff08lifetimes\uff09\uff0c\u8fd9\u662f\u4e00\u4e2a \u7b2c\u5341\u7ae0 \u4f1a\u8ba8\u8bba\u7684 Rust \u529f\u80fd\u3002 \u751f\u547d\u5468\u671f\u786e\u4fdd\u7ed3\u6784\u4f53\u5f15\u7528\u7684\u6570\u636e\u6709\u6548\u6027\u8ddf\u7ed3\u6784\u4f53\u672c\u8eab\u4fdd\u6301\u4e00\u81f4\u3002\u5982\u679c\u4f60\u5c1d\u8bd5\u5728\u7ed3\u6784\u4f53\u4e2d\u5b58\u50a8\u4e00\u4e2a\u5f15\u7528\u800c\u4e0d\u6307\u5b9a\u751f\u547d\u5468\u671f\u5c06\u662f\u65e0\u6548\u7684\uff0c\u6bd4\u5982\u8fd9\u6837\uff1a struct User { active : bool , username : & str , email : & str , sign_in_count : u64 , } fn main () { let user1 = User { email : \"someone@example.com\" , username : \"someusername123\" , active : true , sign_in_count : 1 , }; } \u7f16\u8bd1\u5668\u4f1a\u62b1\u6028\u5b83\u9700\u8981\u751f\u547d\u5468\u671f\u6807\u8bc6\u7b26\uff1a $ cargo run Compiling structs v0.1.0 ( file:///projects/structs ) error [ E0106 ] : missing lifetime specifier --> src/main.rs:3:15 | 3 | username: & str, | ^ expected named lifetime parameter | help: consider introducing a named lifetime parameter | 1 ~ struct User< 'a> { 2 | active: bool, 3 ~ username: &' a str, | error [ E0106 ] : missing lifetime specifier --> src/main.rs:4:12 | 4 | email: & str, | ^ expected named lifetime parameter | help: consider introducing a named lifetime parameter | 1 ~ struct User< 'a> { 2 | active: bool, 3 | username: &str, 4 ~ email: &' a str, | For more information about this error, try ` rustc --explain E0106 ` . error: could not compile ` structs ` due to 2 previous errors \u7b2c\u5341\u7ae0 \u4f1a\u8bb2\u5230\u5982\u4f55\u4fee\u590d\u8fd9\u4e2a\u95ee\u9898\u4ee5\u4fbf\u5728\u7ed3\u6784\u4f53\u4e2d\u5b58\u50a8\u5f15\u7528\uff0c\u4e0d\u8fc7\u73b0\u5728\uff0c\u4f1a\u4f7f\u7528\u50cf String \u8fd9\u7c7b\u62e5\u6709\u6240\u6709\u6743\u7684\u7c7b\u578b\u6765\u66ff\u4ee3 &str \u8fd9\u6837\u7684\u5f15\u7528\u4ee5\u4fee\u6b63\u8fd9\u4e2a\u9519\u8bef\u3002","title":"\u7c7b\u5355\u5143\u7ed3\u6784\u4f53"},{"location":"struct/#_7","text":"\u4e3a\u4e86\u7406\u89e3\u4f55\u65f6\u4f1a\u9700\u8981\u4f7f\u7528\u7ed3\u6784\u4f53\uff0c\u8fd9\u91cc\u7f16\u5199\u4e00\u4e2a\u8ba1\u7b97\u957f\u65b9\u5f62\u9762\u79ef\u7684\u7a0b\u5e8f\u3002 \u4f7f\u7528 Cargo \u65b0\u5efa\u4e00\u4e2a\u53eb\u505a rectangles \u7684\u4e8c\u8fdb\u5236\u7a0b\u5e8f\uff0c\u5b83\u83b7\u53d6\u4ee5\u50cf\u7d20\u4e3a\u5355\u4f4d\u7684\u957f\u65b9\u5f62\u7684\u5bbd\u5ea6\u548c\u9ad8\u5ea6\uff0c\u5e76\u8ba1\u7b97\u51fa\u957f\u65b9\u5f62\u7684\u9762\u79ef\u3002 fn main () { let width1 = 30 ; let height1 = 50 ; println! ( \"\u77e9\u5f62\u7684\u9762\u79ef\u662f{}\u4e2a\u50cf\u7d20\" , area ( width1 , height1 )) } fn area ( width : u32 , height : u32 ) -> u32 { width * height } \u4fee\u6539\u8fd9\u6bb5\u4ee3\u7801\u6765\u4f7f\u5b83\u7684\u610f\u4e49\u66f4\u52a0\u660e\u786e: // \u51fd\u6570 area \u672c\u5e94\u8be5\u8ba1\u7b97\u4e00\u4e2a\u957f\u65b9\u5f62\u7684\u9762\u79ef\uff0c\u4e0d\u8fc7\u51fd\u6570\u5374\u6709\u4e24\u4e2a\u53c2\u6570\u3002 // \u8fd9\u4e24\u4e2a\u53c2\u6570\u662f\u76f8\u5173\u8054\u7684\uff0c\u4e0d\u8fc7\u7a0b\u5e8f\u672c\u8eab\u5374\u6ca1\u6709\u8868\u73b0\u51fa\u8fd9\u4e00\u70b9\u3002 // \u5c06\u957f\u5ea6\u548c\u5bbd\u5ea6\u7ec4\u5408\u5728\u4e00\u8d77\u5c06\u66f4\u6613\u61c2\u4e5f\u66f4\u6613\u5904\u7406\u3002 fn area ( width : u32 , height : u32 ) -> u32 { // ... }","title":"\u793a\u4f8b\u7a0b\u5e8f"},{"location":"struct/#_8","text":"\u4f7f\u7528\u5143\u7ec4\u7684\u53e6\u4e00\u4e2a\u7a0b\u5e8f\u7248\u672c: fn main () { let rect = ( 30 , 50 ); println! ( \"\u77e9\u5f62\u7684\u9762\u79ef\u662f{}\u4e2a\u50cf\u7d20\" , area ( rect )) } // \u5143\u7ec4\u5e2e\u52a9\u6211\u4eec\u589e\u52a0\u4e86\u4e00\u4e9b\u7ed3\u6784\u6027\uff0c\u5e76\u4e14\u73b0\u5728\u53ea\u9700\u4f20\u4e00\u4e2a\u53c2\u6570\u3002 // \u4e0d\u8fc7\u5728\u53e6\u4e00\u65b9\u9762\uff0c\u8fd9\u4e2a\u7248\u672c\u5374\u6709\u4e00\u70b9\u4e0d\u660e\u786e\u4e86\uff1a\u5143\u7ec4\u5e76\u6ca1\u6709\u7ed9\u51fa\u5143\u7d20\u7684\u540d\u79f0\uff0c\u6240\u4ee5\u8ba1\u7b97\u53d8\u5f97\u66f4\u8d39\u89e3\u4e86\uff0c\u56e0\u4e3a\u4e0d\u5f97\u4e0d\u4f7f\u7528\u7d22\u5f15\u6765\u83b7\u53d6\u5143\u7ec4\u7684\u6bcf\u4e00\u90e8\u5206\uff1a fn area ( dimensions : ( u32 , u32 )) -> u32 { dimensions . 0 * dimensions . 1 }","title":"\u5143\u7ec4\u91cd\u6784"},{"location":"struct/#_9","text":"\u53ef\u4ee5\u4f7f\u7528\u7ed3\u6784\u4f53\u4e3a\u6570\u636e\u547d\u540d\u6765\u4e3a\u5176\u8d4b\u4e88\u610f\u4e49\u3002\u5c06\u6211\u4eec\u6b63\u5728\u4f7f\u7528\u7684\u5143\u7ec4\u8f6c\u6362\u6210\u4e00\u4e2a\u6709\u6574\u4f53\u540d\u79f0\u800c\u4e14\u6bcf\u4e2a\u90e8\u5206\u4e5f\u6709\u5bf9\u5e94\u540d\u5b57\u7684\u7ed3\u6784\u4f53\uff0c // \u5b9a\u4e49\u4e00\u4e2a\u77e9\u5f62\u7684\u7ed3\u6784\u4f53 // \u5728\u5927\u62ec\u53f7\u4e2d\u5b9a\u4e49\u4e86\u5b57\u6bb5 width \u548c height\uff0c\u7c7b\u578b\u90fd\u662f u32\u3002 struct Rectangle { width : u32 , height : u32 , } fn main () { // \u521b\u5efa\u4e86\u4e00\u4e2a\u5177\u4f53\u7684 Rectangle \u5b9e\u4f8b let rect1 = Rectangle { width : 30 , height : 50 , }; println! ( \"\u77e9\u5f62\u7684\u9762\u79ef\u662f{}\u4e2a\u50cf\u7d20\" , area ( & rect1 )); } // \u8ba1\u7b97\u4e00\u4e2a\u77e9\u5f62\u7684\u9762\u79ef // \u88ab\u5b9a\u4e49\u4e3a\u63a5\u6536\u4e00\u4e2a\u540d\u53eb rectangle \u7684\u53c2\u6570\uff0c\u5176\u7c7b\u578b\u662f\u4e00\u4e2a\u7ed3\u6784\u4f53 Rectangle \u5b9e\u4f8b\u7684\u4e0d\u53ef\u53d8\u501f\u7528(\u5f15\u7528)\u3002 // \u501f\u7528\u7ed3\u6784\u4f53\u800c\u4e0d\u662f\u83b7\u53d6\u5b83\u7684\u6240\u6709\u6743\uff0c\u8fd9\u6837 main \u51fd\u6570\u5c31\u53ef\u4ee5\u4fdd\u6301 rect1 \u7684\u6240\u6709\u6743\u5e76\u7ee7\u7eed\u4f7f\u7528\u5b83\uff0c\u6240\u4ee5\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u5728\u51fd\u6570\u7b7e\u540d\u548c\u8c03\u7528\u7684\u5730\u65b9\u4f1a\u6709 &\u3002 fn area ( rectangle : & Rectangle ) -> u32 { // \u8bbf\u95ee Rectangle \u5b9e\u4f8b\u7684 width \u548c height \u5b57\u6bb5 // \u6ce8\u610f\uff0c\u8bbf\u95ee\u5bf9\u7ed3\u6784\u4f53\u7684\u5f15\u7528\u7684\u5b57\u6bb5\u4e0d\u4f1a\u79fb\u52a8\u5b57\u6bb5\u7684\u6240\u6709\u6743, \u6240\u4ee5\u4f1a\u7ecf\u5e38\u770b\u5230\u5bf9\u7ed3\u6784\u4f53\u7684\u5f15\u7528 rectangle . width * rectangle . height } \u4f7f\u7528 Rectangle \u7684 width \u548c height \u5b57\u6bb5\uff0c\u8ba1\u7b97 Rectangle \u7684\u9762\u79ef\u3002\u8fd9\u8868\u660e\u5bbd\u9ad8\u662f\u76f8\u4e92\u8054\u7cfb\u7684\uff0c\u5e76\u4e3a\u8fd9\u4e9b\u503c\u63d0\u4f9b\u4e86\u63cf\u8ff0\u6027\u7684\u540d\u79f0\u800c\u4e0d\u662f\u4f7f\u7528\u5143\u7ec4\u7684\u7d22\u5f15\u503c 0 \u548c 1 \u3002 \u7ed3\u6784\u4f53\u80dc\u5728\u66f4\u6e05\u6670\u660e\u4e86 \u3002","title":"\u7ed3\u6784\u4f53\u91cd\u6784"},{"location":"struct/#trait","text":"\u5728\u8c03\u8bd5\u7a0b\u5e8f\u65f6\u6253\u5370\u51fa Rectangle \u5b9e\u4f8b\u6765\u67e5\u770b\u5176\u6240\u6709\u5b57\u6bb5\u7684\u503c\u975e\u5e38\u6709\u7528\u3002\u5982\u679c\u80fd\u50cf\u524d\u9762\u90a3\u6837\u5c1d\u8bd5\u4f7f\u7528 println! \u5b8f \u5c31\u597d\u4e86\u3002\u4f46\u8fd9\u5e76\u4e0d\u884c\u3002 struct Rectangle { width : u32 , height : u32 , } fn main () { let rect1 = Rectangle { width : 30 , height : 50 , }; println! ( \"\u77e9\u5f62\u662f{}\" , rect1 ); } \u51fa\u73b0\u5e26\u6709\u5982\u4e0b\u6838\u5fc3\u4fe1\u606f\u7684\u9519\u8bef\uff1a error [ E0277 ] : ` Rectangle ` doesn ' t implement ` std::fmt::Display ` println! \u5b8f \u80fd\u5904\u7406\u5f88\u591a\u7c7b\u578b\u7684\u683c\u5f0f\uff0c\u4e0d\u8fc7\uff0c {} \u9ed8\u8ba4\u544a\u8bc9 println! \u4f7f\u7528\u88ab\u79f0\u4e3a Display \u7684\u683c\u5f0f\uff1a \u610f\u5728\u63d0\u4f9b\u7ed9\u76f4\u63a5\u7ec8\u7aef\u7528\u6237\u67e5\u770b\u7684\u8f93\u51fa \u3002 \u76ee\u524d\u4e3a\u6b62\u89c1\u8fc7\u7684\u57fa\u672c\u7c7b\u578b\u90fd\u9ed8\u8ba4\u5b9e\u73b0\u4e86 Display \u683c\u5f0f\uff0c\u56e0\u4e3a\u5b83\u5c31\u662f\u5411\u7528\u6237\u5c55\u793a 1 \u6216\u5176\u4ed6\u4efb\u4f55 \u57fa\u672c\u7c7b\u578b \u7684\u552f\u4e00\u65b9\u5f0f\u3002 \u4e0d\u8fc7\u5bf9\u4e8e\u7ed3\u6784\u4f53\uff0c println! \u5e94\u8be5\u7528\u6765\u8f93\u51fa\u7684\u683c\u5f0f\u662f\u4e0d\u660e\u786e\u7684\uff0c\u56e0\u4e3a\u8fd9\u6709\u66f4\u591a\u663e\u793a\u7684\u53ef\u80fd\u6027\uff1a\u662f\u5426\u9700\u8981\u9017\u53f7\uff1f\u9700\u8981\u6253\u5370\u51fa\u5927\u62ec\u53f7\u5417\uff1f\u6240\u6709\u5b57\u6bb5\u90fd\u5e94\u8be5\u663e\u793a\u5417\uff1f \u7531\u4e8e\u8fd9\u79cd\u4e0d\u786e\u5b9a\u6027\uff0cRust \u4e0d\u4f1a\u5c1d\u8bd5\u731c\u6d4b\u6211\u4eec\u7684\u610f\u56fe\uff0c\u6240\u4ee5\u7ed3\u6784\u4f53\u5e76\u6ca1\u6709\u63d0\u4f9b\u4e00\u4e2a Display \u5b9e\u73b0\u6765\u4f7f\u7528 println! \u4e0e {} \u5360\u4f4d\u7b26\u3002 \u5982\u679c\u6211\u4eec\u7ee7\u7eed\u9605\u8bfb\u9519\u8bef\uff0c\u5c06\u4f1a\u53d1\u73b0\u8fd9\u4e2a\u6709\u5e2e\u52a9\u7684\u4fe1\u606f\uff1a help: the trait ` std::fmt::Display ` is not implemented for ` Rectangle ` note: in format strings you may be able to use ` { :? } ` ( or { :#? } for pretty-print ) instead \u73b0\u5728 println! \u5b8f\u8c03\u7528\u770b\u8d77\u6765\u50cf println!(\"rect1 is {:?}\", rect1); \u8fd9\u6837\u3002\u5728 {} \u4e2d\u52a0\u5165 :? \u6307\u793a\u7b26\u544a\u8bc9 println! \u6211\u4eec\u60f3\u8981\u4f7f\u7528\u53eb\u505a Debug \u7684\u8f93\u51fa\u683c\u5f0f\u3002 Debug \u662f\u4e00\u4e2a trait \uff0c\u5b83\u5141\u8bb8\u6211\u4eec\u4ee5\u4e00\u79cd\u5bf9\u5f00\u53d1\u8005\u6709\u5e2e\u52a9\u7684\u65b9\u5f0f\u6253\u5370\u7ed3\u6784\u4f53\uff0c\u4ee5\u4fbf\u5f53\u6211\u4eec\u8c03\u8bd5\u4ee3\u7801\u65f6\u80fd\u770b\u5230\u5b83\u7684\u503c\u3002 struct Rectangle { width : u32 , height : u32 , } fn main () { let rect1 = Rectangle { width : 30 , height : 50 , }; println! ( \"\u77e9\u5f62\u662f{:?}\" , rect1 ); // \u6dfb\u52a0 :? \u5c1d\u8bd5\u4f7f\u7528Debug\u7684\u8f93\u51fa\u683c\u5f0f } \u8fd9\u6837\u8c03\u6574\u540e\u518d\u6b21\u8fd0\u884c\u7a0b\u5e8f\u3002\u89c1\u9b3c\u4e86\uff01\u4ecd\u7136\u80fd\u770b\u5230\u4e00\u4e2a\u9519\u8bef\uff1a error [ E0277 ] : ` Rectangle ` doesn ' t implement ` Debug ` \u4e0d\u8fc7\u7f16\u8bd1\u5668\u53c8\u4e00\u6b21\u7ed9\u51fa\u4e86\u4e00\u4e2a\u6709\u5e2e\u52a9\u7684\u4fe1\u606f\uff1a help: the trait ` Debug ` is not implemented for ` Rectangle ` note: add ` #[derive(Debug)]` to `Rectangle` or manually `impl Debug for Rectangle`","title":"\u6d3e\u751fTrait"},{"location":"struct/#debug","text":"Rust \u786e\u5b9e \u5305\u542b\u4e86\u6253\u5370\u51fa\u8c03\u8bd5\u4fe1\u606f\u7684\u529f\u80fd\uff0c\u4e0d\u8fc7\u6211\u4eec\u5fc5\u987b\u4e3a\u7ed3\u6784\u4f53 \u663e\u5f0f \u9009\u62e9\u8fd9\u4e2a\u529f\u80fd\u3002\u4e3a\u6b64\uff0c\u5728\u7ed3\u6784\u4f53\u5b9a\u4e49\u4e4b\u524d\u52a0\u4e0a\u5916\u90e8\u5c5e\u6027 #[derive(Debug)] // \u6dfb\u52a0\u6253\u5370\u8c03\u8bd5\u7684\u529f\u80fd #[derive(Debug)] struct Rectangle { width : u32 , height : u32 , } fn main () { let rect1 = Rectangle { width : 30 , height : 50 , }; println! ( \"\u77e9\u5f62\u662f{:?}\" , rect1 ); // \u5c1d\u8bd5\u4f7f\u7528Debug\u7684\u8f93\u51fa\u683c\u5f0f } \u518d\u8fd0\u884c\u8fd9\u4e2a\u7a0b\u5e8f\u65f6\uff0c\u5c31\u4e0d\u4f1a\u6709\u4efb\u4f55\u9519\u8bef\uff0c\u5e76\u4f1a\u51fa\u73b0\u5982\u4e0b\u8f93\u51fa\uff1a $ cargo run Compiling rectangles v0.1.0 ( file:///projects/rectangles ) Finished dev [ unoptimized + debuginfo ] target ( s ) in 0 .48s Running ` target/debug/rectangles ` \u77e9\u5f62\u662fRectangle { width: 30 , height: 50 } \u8fd9\u5e76\u4e0d\u662f\u6700\u6f02\u4eae\u7684\u8f93\u51fa\uff0c\u4e0d\u8fc7\u5b83\u663e\u793a\u8fd9\u4e2a\u5b9e\u4f8b\u7684\u6240\u6709\u5b57\u6bb5\uff0c\u6beb\u65e0\u7591\u95ee\u8fd9\u5bf9\u8c03\u8bd5\u6709\u5e2e\u52a9\u3002 \u5f53\u6211\u4eec\u6709\u4e00\u4e2a\u66f4\u5927\u7684\u7ed3\u6784\u4f53\u65f6\uff0c\u80fd\u6709\u66f4 \u6613\u8bfb \u4e00\u70b9\u7684\u8f93\u51fa\u5c31\u597d\u4e86\uff0c\u4e3a\u6b64\u53ef\u4ee5\u4f7f\u7528 {:#?} \u66ff\u6362 println! \u5b57\u7b26\u4e32\u4e2d\u7684 {:?} \u3002 #[derive(Debug)] struct Rectangle { width : u32 , height : u32 , } fn main () { let rect1 = Rectangle { width : 30 , height : 50 , }; println! ( \"\u77e9\u5f62\u662f{:#?}\" , rect1 ); // \u5c1d\u8bd5\u4f7f\u7528Debug\u7684\u8f93\u51fa\u683c\u5f0f } \u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\u4f7f\u7528 {:#?} \u98ce\u683c\u5c06\u4f1a\u8f93\u51fa\uff1a $ cargo run Compiling rectangles v0 . 1.0 ( file : ///projects/rectangles) Finished dev [ unoptimized + debuginfo ] target ( s ) in 0.48 s Running ` target / debug / rectangles ` \u77e9\u5f62\u662f Rectangle { width : 30 , height : 50 , }","title":"Debug\u8f93\u51fa\u7ed3\u6784\u4f53"},{"location":"struct/#dbg","text":"\u53e6\u4e00\u79cd\u4f7f\u7528 Debug \u683c\u5f0f\u6253\u5370\u6570\u503c\u7684\u65b9\u6cd5\u662f\u4f7f\u7528 dbg! \u5b8f \u3002 dbg! \u5b8f \u53ef\u4ee5\u63a5\u6536\u4e00\u4e2a \u8868\u8fbe\u5f0f \u7684\u6240\u6709\u6743\uff0c\u6253\u5370\u51fa\u4ee3\u7801\u4e2d\u8c03\u7528 dbg! \u5b8f\u65f6\u6240\u5728\u7684\u6587\u4ef6\u548c\u884c\u53f7\uff0c\u4ee5\u53ca\u8be5\u8868\u8fbe\u5f0f\u7684\u7ed3\u679c\u503c\uff0c\u5e76\u8fd4\u56de\u8be5\u503c\u7684\u6240\u6709\u6743\u3002 \uff08\u4e0e println! \u5b8f\u76f8\u53cd\uff0c\u5176\u63a5\u6536\u7684\u662f\u5f15\u7528\uff09 \u6ce8\u610f \u8c03\u7528 dbg! \u5b8f \u4f1a\u6253\u5370\u5230\u6807\u51c6\u9519\u8bef\u63a7\u5236\u53f0\u6d41\uff08stderr\uff09\uff0c\u4e0e println! \u4e0d\u540c\uff0c\u540e\u8005\u4f1a\u6253\u5370\u5230\u6807\u51c6\u8f93\u51fa\u63a7\u5236\u53f0\u6d41\uff08stdout\uff09\u3002\u6211\u4eec\u5c06\u5728 \u7b2c\u5341\u4e8c\u7ae0 \u201c\u5c06\u9519\u8bef\u4fe1\u606f\u5199\u5165\u6807\u51c6\u9519\u8bef\u800c\u4e0d\u662f\u6807\u51c6\u8f93\u51fa\u201d \u4e00\u8282 \u4e2d\u66f4\u591a\u5730\u8ba8\u8bba stderr \u548c stdout \u3002 #[derive(Debug)] struct Rectangle { width : u32 , height : u32 , } fn main () { let scale = 2 ; let rect1 = Rectangle { // \u53ef\u4ee5\u628a dbg! \u653e\u5728\u8868\u8fbe\u5f0f 30 * scale \u5468\u56f4\uff0c\u56e0\u4e3a dbg! \u4f1a\u8fd4\u56de\u8868\u8fbe\u5f0f\u7684\u503c\u7684\u6240\u6709\u6743\uff0c // \u6240\u4ee5 width \u5b57\u6bb5\u5c06\u83b7\u5f97\u76f8\u540c\u7684\u503c\uff0c\u5c31\u50cf\u6211\u4eec\u5728\u90a3\u91cc\u6ca1\u6709 dbg! \u8c03\u7528\u4e00\u6837\u3002 width : dbg ! ( scale * 30 ), height : 50 , }; // \u4e0d\u5e0c\u671b dbg! \u62e5\u6709 rect1 \u7684\u6240\u6709\u6743\uff0c\u6240\u4ee5\u5728\u8fd9\u91cc\u8c03\u7528 dbg! \u65f6\u4ec5\u4f20\u9012\u4e00\u4e2a\u5f15\u7528\u3002 dbg! ( & rect1 ); } $ cargo run Compiling rectangles v0 . 1.0 ( file : ///projects/rectangles) Finished dev [ unoptimized + debuginfo ] target ( s ) in 0.61 s Running ` target / debug / rectangles ` [ src / main . rs : 10 ] scale * 30 = 60 [ src / main . rs : 14 ] & rect1 = Rectangle { width : 60 , height : 50 , } \u8fd9\u4e2a\u8f93\u51fa\u4f7f\u7528\u4e86\u66f4\u4e3a\u6613\u8bfb\u7684 Debug \u683c\u5f0f\u3002\u5f53\u4f60\u8bd5\u56fe\u5f04\u6e05\u695a\u4f60\u7684\u4ee3\u7801\u5728\u505a\u4ec0\u4e48\u65f6\uff0c dbg! \u5b8f \u53ef\u80fd\u771f\u7684\u5f88\u6709\u5e2e\u52a9!","title":"dbg!\u5b8f"},{"location":"struct/#_10","text":"\u65b9\u6cd5\uff08method\uff09 \u4e0e\u51fd\u6570\u7c7b\u4f3c\uff1a \u5b83\u4eec\u4f7f\u7528 fn \u5173\u952e\u5b57\u548c\u540d\u79f0\u58f0\u660e\uff0c\u53ef\u4ee5\u62e5\u6709\u53c2\u6570\u548c\u8fd4\u56de\u503c\uff0c\u540c\u65f6\u5305\u542b\u5728\u67d0\u5904\u8c03\u7528\u8be5\u65b9\u6cd5\u65f6\u4f1a\u6267\u884c\u7684\u4ee3\u7801 \u3002 \u4e0d\u8fc7\u65b9\u6cd5\u4e0e\u51fd\u6570\u662f\u4e0d\u540c\u7684\uff0c\u56e0\u4e3a\u5b83\u4eec\u5728\u7ed3\u6784\u4f53\u7684\u4e0a\u4e0b\u6587\u4e2d\u88ab\u5b9a\u4e49\uff08\u6216\u8005\u662f \u679a\u4e3e \u6216 trait \u5bf9\u8c61\u7684\u4e0a\u4e0b\u6587\uff09\uff0c\u5e76\u4e14\u5b83\u4eec\u7b2c\u4e00\u4e2a\u53c2\u6570\u603b\u662f self \uff0c\u5b83\u4ee3\u8868\u8c03\u7528\u8be5\u65b9\u6cd5\u7684\u7ed3\u6784\u4f53\u5b9e\u4f8b\u3002","title":"\u65b9\u6cd5"},{"location":"struct/#_11","text":"\u628a\u524d\u9762\u5b9e\u73b0\u7684\u83b7\u53d6\u4e00\u4e2a Rectangle \u5b9e\u4f8b\u4f5c\u4e3a\u53c2\u6570\u7684 area \u51fd\u6570\uff0c\u6539\u5199\u6210\u4e00\u4e2a\u5b9a\u4e49\u4e8e Rectangle \u7ed3\u6784\u4f53\u4e0a\u7684 area \u65b9\u6cd5: #[derive(Debug)] struct Rectangle { width : u32 , height : u32 , } // impl \u662f implementation \u7684\u7f29\u5199 // impl \u5757\u4e2d\u7684\u6240\u6709\u5185\u5bb9\u90fd\u5c06\u4e0e Rectangle \u7c7b\u578b\u76f8\u5173\u8054 impl Rectangle { // \u5b9a\u4e49 \u4e0e Rectangle \u76f8\u5173\u8054\u7684 area\u65b9\u6cd5 // \u4f7f\u7528 &self \u6765\u66ff\u4ee3 rectangle: &Rectangle // &self \u5b9e\u9645\u4e0a\u662f self: &Self \u7684\u7f29\u5199 // \u8fd9\u91cc\u9009\u62e9 `&self` \u7684\u7406\u7531\u8ddf\u5728\u51fd\u6570\u7248\u672c\u4e2d\u4f7f\u7528 `&Rectangle` \u662f\u76f8\u540c\u7684\uff1a\u5e76\u4e0d\u60f3\u83b7\u53d6\u6240\u6709\u6743\uff0c\u53ea\u5e0c\u671b\u80fd\u591f\u8bfb\u53d6\u7ed3\u6784\u4f53\u4e2d\u7684\u6570\u636e\uff0c\u800c\u4e0d\u662f\u5199\u5165\u3002 // \u5982\u679c\u60f3\u8981\u5728\u65b9\u6cd5\u4e2d\u6539\u53d8\u8c03\u7528\u65b9\u6cd5\u7684\u5b9e\u4f8b\uff0c\u9700\u8981\u5c06\u7b2c\u4e00\u4e2a\u53c2\u6570\u6539\u4e3a &mut self\u3002 // \u901a\u8fc7\u4ec5\u4ec5\u4f7f\u7528 self \u4f5c\u4e3a\u7b2c\u4e00\u4e2a\u53c2\u6570\u6765\u4f7f\u65b9\u6cd5\u83b7\u53d6\u5b9e\u4f8b\u7684\u6240\u6709\u6743\u662f\u5f88\u5c11\u89c1\u7684\uff1b\u8fd9\u79cd\u6280\u672f\u901a\u5e38\u7528\u5728\u5f53\u65b9\u6cd5\u5c06 self \u8f6c\u6362\u6210\u522b\u7684\u5b9e\u4f8b\u7684\u65f6\u5019\uff0c\u8fd9\u65f6\u60f3\u8981\u9632\u6b62\u8c03\u7528\u8005\u5728\u8f6c\u6362\u4e4b\u540e\u4f7f\u7528\u539f\u59cb\u7684\u5b9e\u4f8b\u3002 fn area ( & self ) -> u32 { self . width * self . height } } fn main () { let rect1 = Rectangle { width : 30 , height : 50 , }; println! ( \"\u77e9\u5f62\u7684\u9762\u79ef\u662f: {} \u50cf\u7d20\" , rect1 . area ()) // \u8c03\u7528Rectangle\u7684\u5173\u8054\u65b9\u6cd5area } \u5728\u4e00\u4e2a impl \u5757\u4e2d\uff0cSelf \u7c7b\u578b\u662f impl \u5757\u7684\u7c7b\u578b\u7684\u522b\u540d\u3002\u65b9\u6cd5\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u5fc5\u987b\u6709\u4e00\u4e2a\u540d\u4e3a self \u7684Self \u7c7b\u578b\u7684\u53c2\u6570 \uff0c\u6240\u4ee5 Rust \u8ba9\u4f60\u5728\u7b2c\u4e00\u4e2a\u53c2\u6570\u4f4d\u7f6e\u4e0a\u53ea\u7528 self \u8fd9\u4e2a\u540d\u5b57\u6765\u7f29\u5199\u3002 \u6ce8\u610f \u6211\u4eec\u4ecd\u7136\u9700\u8981\u5728 self \u524d\u9762\u4f7f\u7528 & \u6765\u8868\u793a\u8fd9\u4e2a\u65b9\u6cd5\u501f\u7528\u4e86 Self \u5b9e\u4f8b\uff0c\u5c31\u50cf\u6211\u4eec\u5728 rectangle: &Rectangle \u4e2d\u505a\u7684\u90a3\u6837\u3002 \u65b9\u6cd5\u53ef\u4ee5\u9009\u62e9\u83b7\u5f97 self \u7684\u6240\u6709\u6743\uff0c\u6216\u8005\u50cf\u8fd9\u91cc\u4e00\u6837 \u4e0d\u53ef\u53d8\u5730\u501f\u7528 self \uff0c\u6216\u8005 \u53ef\u53d8\u5730\u501f\u7528 self \uff0c\u5c31\u8ddf\u5176\u4ed6\u53c2\u6570\u4e00\u6837\u3002 \u4f7f\u7528 \u65b9\u6cd5 \u66ff\u4ee3 \u51fd\u6570 \uff0c\u9664\u4e86\u53ef\u4f7f\u7528\u65b9\u6cd5\u8bed\u6cd5\u548c\u4e0d\u9700\u8981\u5728\u6bcf\u4e2a\u51fd\u6570\u7b7e\u540d\u4e2d\u91cd\u590d self \u7684\u7c7b\u578b\u4e4b\u5916\uff0c\u5176\u4e3b\u8981\u597d\u5904\u5728\u4e8e\u7ec4\u7ec7\u6027\u3002 \u6211\u4eec\u5c06\u67d0\u4e2a\u7c7b\u578b\u5b9e\u4f8b\u80fd\u505a\u7684\u6240\u6709\u4e8b\u60c5\u90fd\u4e00\u8d77\u653e\u5165 impl \u5757\u4e2d\uff0c\u800c\u4e0d\u662f\u8ba9\u5c06\u6765\u7684\u7528\u6237\u5728\u6211\u4eec\u7684\u5e93\u4e2d\u5230\u5904\u5bfb\u627e Rectangle \u7684\u529f\u80fd\u3002","title":"\u5b9a\u4e49\u65b9\u6cd5"},{"location":"struct/#_12","text":"\u6211\u4eec\u53ef\u4ee5\u9009\u62e9\u5c06\u65b9\u6cd5\u7684\u540d\u79f0\u4e0e\u7ed3\u6784\u4e2d\u7684\u4e00\u4e2a\u5b57\u6bb5\u76f8\u540c\u3002\u4f8b\u5982\uff0c\u6211\u4eec\u53ef\u4ee5\u5728 Rectangle \u4e0a\u5b9a\u4e49\u4e00\u4e2a\u65b9\u6cd5\uff0c\u5e76\u547d\u540d\u4e3a width\uff1a struct Rectangle { width : u32 , height : u32 , } impl Rectangle { fn width ( & self ) -> bool { self . width > 0 } } fn main () { let rect1 = Rectangle { width : 30 , height : 50 , }; println! ( \"\u77e9\u5f62\u7684\u5bbd\u5ea6\u4e0d\u4e3a\u96f6: {}\" , rect1 . width ()) } \u7f16\u7a0b\u65f6 \u53ef\u4ee5\u51fa\u4e8e\u4efb\u4f55\u76ee\u7684\uff0c\u5728\u540c\u540d\u7684\u65b9\u6cd5\u4e2d\u4f7f\u7528\u540c\u540d\u7684\u5b57\u6bb5 \u5728 main \u4e2d\uff0c\u5f53\u6211\u4eec\u5728 rect1.width \u540e\u9762\u52a0\u4e0a\u62ec\u53f7\u65f6\u3002Rust \u77e5\u9053\u6211\u4eec\u6307\u7684\u662f\u65b9\u6cd5 width \u3002\u5f53\u6211\u4eec\u4e0d\u4f7f\u7528\u5706\u62ec\u53f7\u65f6\uff0cRust \u77e5\u9053\u6211\u4eec\u6307\u7684\u662f\u5b57\u6bb5 width \u3002 \u901a\u5e38\uff0c\u4f46\u5e76\u4e0d\u603b\u662f\u5982\u6b64\uff0c\u4e0e\u5b57\u6bb5\u540c\u540d\u7684\u65b9\u6cd5\u5c06\u88ab\u5b9a\u4e49\u4e3a\u53ea\u8fd4\u56de\u5b57\u6bb5\u4e2d\u7684\u503c\uff0c\u800c\u4e0d\u505a\u5176\u4ed6\u4e8b\u60c5\u3002\u8fd9\u6837\u7684\u65b9\u6cd5\u88ab\u79f0\u4e3a getters \uff0c Rust \u5e76\u4e0d\u50cf\u5176\u4ed6\u4e00\u4e9b\u8bed\u8a00\u90a3\u6837\u4e3a\u7ed3\u6784\u5b57\u6bb5\u81ea\u52a8\u5b9e\u73b0\u5b83\u4eec\u3002 Getters \u5f88\u6709\u7528\uff0c\u56e0\u4e3a\u4f60\u53ef\u4ee5\u628a\u5b57\u6bb5\u53d8\u6210\u79c1\u6709\u7684\uff0c\u4f46\u65b9\u6cd5\u662f\u516c\u5171\u7684\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u628a\u5bf9\u5b57\u6bb5\u7684\u53ea\u8bfb\u8bbf\u95ee\u4f5c\u4e3a\u8be5\u7c7b\u578b\u516c\u5171 API \u7684\u4e00\u90e8\u5206\u3002 \u6211\u4eec\u5c06\u5728 \u7b2c\u4e03\u7ae0 \u4e2d\u8ba8\u8bba\u4ec0\u4e48\u662f\u516c\u6709\u548c\u79c1\u6709\uff0c\u4ee5\u53ca\u5982\u4f55\u5c06\u4e00\u4e2a\u5b57\u6bb5\u6216\u65b9\u6cd5\u6307\u5b9a\u4e3a\u516c\u6709\u6216\u79c1\u6709\u3002","title":"\u6ce8\u610f"},{"location":"struct/#_13","text":"\u901a\u8fc7\u5b9e\u73b0 Rectangle \u7ed3\u6784\u4f53\u4e0a\u7684\u53e6\u4e00\u65b9\u6cd5\u6765\u7ec3\u4e60\u4f7f\u7528\u65b9\u6cd5 \u8ba9\u4e00\u4e2a Rectangle \u7684\u5b9e\u4f8b\u83b7\u53d6\u53e6\u4e00\u4e2a Rectangle \u5b9e\u4f8b\uff0c\u5982\u679c self \uff08\u7b2c\u4e00\u4e2a Rectangle \uff09\u80fd\u5b8c\u5168\u5305\u542b\u7b2c\u4e8c\u4e2a\u957f\u65b9\u5f62\u5219\u8fd4\u56de true\uff1b\u5426\u5219\u8fd4\u56de false\u3002 fn main () { let rect1 = Rectangle { width : 30 , height : 50 , }; let rect2 = Rectangle { width : 10 , height : 40 , }; let rect3 = Rectangle { width : 60 , height : 45 , }; println! ( \"\u77e9\u5f62rect1\u53ef\u4ee5\u5305\u542brect2: {}\" , rect1 . can_hold ( & rect2 )); println! ( \"\u77e9\u5f62rect2\u53ef\u4ee5\u5305\u542brect3: {}\" , rect2 . can_hold ( & rect3 )); } \u540c\u65f6\u5e0c\u671b\u770b\u5230\u5982\u4e0b\u8f93\u51fa\uff0c\u56e0\u4e3a rect2 \u7684\u4e24\u4e2a\u7ef4\u5ea6\u90fd\u5c0f\u4e8e rect1\uff0c\u800c rect3 \u6bd4 rect1 \u8981\u5bbd\uff1a \u77e9\u5f62rect1\u53ef\u4ee5\u5305\u542brect2: true \u77e9\u5f62rect2\u53ef\u4ee5\u5305\u542brect3: false impl Rectangle { fn width ( & self ) -> bool { self . width > 0 } fn area ( & self ) -> u32 { self . width * self . height } // \u5e0c\u671b main \u4fdd\u6301 other \u7684\u6240\u6709\u6743\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u5728\u8c03\u7528\u8fd9\u4e2a\u65b9\u6cd5\u540e\u7ee7\u7eed\u4f7f\u7528\u5b83\u3002 // can_hold \u7684\u8fd4\u56de\u503c\u662f\u4e00\u4e2a\u5e03\u5c14\u503c\uff0c\u5176\u5b9e\u73b0\u4f1a\u5206\u522b\u68c0\u67e5 self \u7684\u5bbd\u9ad8\u662f\u5426\u90fd\u5927\u4e8e\u53e6\u4e00\u4e2a Rectangle\u3002 fn can_hold ( & self , other : & Rectangle ) -> bool { self . width > other . width && self . height > other . height } }","title":"\u53c2\u6570\u65b9\u6cd5"},{"location":"struct/#_14","text":"\u6240\u6709\u5728 impl \u5757\u4e2d\u5b9a\u4e49\u7684\u51fd\u6570\u88ab\u79f0\u4e3a \u5173\u8054\u51fd\u6570 \uff08associated functions\uff09\uff0c\u56e0\u4e3a\u5b83\u4eec\u4e0e impl \u540e\u9762\u547d\u540d\u7684\u7c7b\u578b\u76f8\u5173\u3002 \u53ef\u4ee5\u5b9a\u4e49\u4e0d\u4ee5 self \u4e3a\u7b2c\u4e00\u53c2\u6570\u7684\u5173\u8054\u51fd\u6570\uff08\u56e0\u6b64\u4e0d\u662f\u65b9\u6cd5\uff09\uff0c\u56e0\u4e3a\u5b83\u4eec\u5e76\u4e0d\u4f5c\u7528\u4e8e\u4e00\u4e2a\u7ed3\u6784\u4f53\u7684\u5b9e\u4f8b\u3002\u6211\u4eec\u5df2\u7ecf\u4f7f\u7528\u4e86\u4e00\u4e2a\u8fd9\u6837\u7684\u51fd\u6570\uff1a \u5728 String \u7c7b\u578b\u4e0a\u5b9a\u4e49\u7684 String::from \u51fd\u6570 \u3002 \u4e0d\u662f\u65b9\u6cd5\u7684\u5173\u8054\u51fd\u6570\u7ecf\u5e38\u88ab\u7528\u4f5c\u8fd4\u56de\u4e00\u4e2a\u7ed3\u6784\u4f53\u65b0\u5b9e\u4f8b\u7684\u6784\u9020\u51fd\u6570 \u3002\u8fd9\u4e9b\u51fd\u6570\u7684\u540d\u79f0\u901a\u5e38\u4e3a new \uff0c\u4f46 new \u5e76\u4e0d\u662f\u4e00\u4e2a\u5173\u952e\u5b57\u3002 \u4f8b\u5982\u6211\u4eec\u53ef\u4ee5\u63d0\u4f9b\u4e00\u4e2a\u53eb\u505a square \u5173\u8054\u51fd\u6570\uff0c\u5b83\u63a5\u53d7\u4e00\u4e2a\u7ef4\u5ea6\u53c2\u6570\u5e76\u4e14\u540c\u65f6\u4f5c\u4e3a\u5bbd\u548c\u9ad8\uff0c\u8fd9\u6837\u53ef\u4ee5\u66f4\u8f7b\u677e\u7684\u521b\u5efa\u4e00\u4e2a\u6b63\u65b9\u5f62 Rectangle \u800c\u4e0d\u5fc5\u6307\u5b9a\u4e24\u6b21\u540c\u6837\u7684\u503c\uff1a impl Rectangle { // \u521b\u5efa\u4e00\u4e2a\u6b63\u65b9\u5f62\u7684\u5173\u8054\u51fd\u6570\uff0c\u4e0d\u662f\u65b9\u6cd5\uff01\uff01\uff01 // \u5173\u952e\u5b57 Self \u5728\u51fd\u6570\u7684\u8fd4\u56de\u7c7b\u578b\u4e2d\u4ee3\u6307\u5728 impl \u5173\u952e\u5b57\u540e\u51fa\u73b0\u7684\u7c7b\u578b\uff0c\u5728\u8fd9\u91cc\u662f Rectangle fn square ( size : u32 ) -> Self { Self { width : size , height : size , } } } \u4f7f\u7528\u7ed3\u6784\u4f53\u540d\u548c :: \u8bed\u6cd5\u6765\u8c03\u7528\u8fd9\u4e2a\u5173\u8054\u51fd\u6570\uff1a\u6bd4\u5982 let sq = Rectangle::square(3); \u3002 \u8fd9\u4e2a\u51fd\u6570\u4f4d\u4e8e\u7ed3\u6784\u4f53\u7684\u547d\u540d\u7a7a\u95f4\u4e2d\uff1a :: \u8bed\u6cd5\u7528\u4e8e \u5173\u8054\u51fd\u6570 \u548c \u6a21\u5757\u521b\u5efa\u7684\u547d\u540d\u7a7a\u95f4 \u3002 \u7b2c\u4e03\u7ae0 \u4f1a\u8bb2\u5230\u6a21\u5757\u3002","title":"\u5173\u8054\u51fd\u6570"},{"location":"struct/#impl","text":"\u6bcf\u4e2a\u7ed3\u6784\u4f53\u90fd\u5141\u8bb8\u62e5\u6709\u591a\u4e2a impl \u5757\u3002\u4f8b\u5982\uff0c\u4e0b\u9762\u793a\u4f8b\u4e2d\u7684\u4ee3\u7801\u7b49\u540c\u4e8e\u4e0a\u9762\u793a\u4f8b\u4e2d\u4ee3\u7801\uff0c\u4f46\u6bcf\u4e2a\u65b9\u6cd5\u6709\u5176\u81ea\u5df1\u7684 impl \u5757\u3002 impl Rectangle { fn area ( & self ) -> u32 { self . width * self . height } } impl Rectangle { fn can_hold ( & self , other : & Rectangle ) -> bool { self . width > other . width && self . height > other . height } } \u8fd9\u91cc\u6ca1\u6709\u7406\u7531\u5c06\u8fd9\u4e9b\u65b9\u6cd5\u5206\u6563\u5728\u591a\u4e2a impl \u5757\u4e2d\uff0c\u4e0d\u8fc7\u8fd9\u662f\u6709\u6548\u7684\u8bed\u6cd5\u3002 \u7b2c\u5341\u7ae0 \u8ba8\u8bba\u6cdb\u578b\u548c trait \u65f6\u4f1a\u770b\u5230\u5b9e\u7528\u7684\u591a impl \u5757\u7684\u7528\u4f8b\u3002","title":"\u591a\u4e2a impl \u5757"},{"location":"struct/#_15","text":"\u7ed3\u6784\u4f53\u8ba9\u4f60\u53ef\u4ee5\u521b\u5efa\u51fa\u5728\u4f60\u7684\u9886\u57df\u4e2d\u6709\u610f\u4e49\u7684\u81ea\u5b9a\u4e49\u7c7b\u578b \u3002 \u901a\u8fc7\u7ed3\u6784\u4f53\uff0c\u6211\u4eec\u53ef\u4ee5 \u5c06\u76f8\u5173\u8054\u7684\u6570\u636e\u7247\u6bb5\u8054\u7cfb\u8d77\u6765\u5e76\u547d\u540d\u5b83\u4eec\uff0c\u8fd9\u6837\u53ef\u4ee5\u4f7f\u5f97\u4ee3\u7801\u66f4\u52a0\u6e05\u6670 \u3002 \u5728 impl \u5757\u4e2d\uff0c\u4f60\u53ef\u4ee5\u5b9a\u4e49\u4e0e\u4f60\u7684\u7c7b\u578b\u76f8\u5173\u8054\u7684\u51fd\u6570\uff0c\u800c\u65b9\u6cd5\u662f\u4e00\u79cd\u76f8\u5173\u8054\u7684\u51fd\u6570\uff0c\u8ba9\u4f60\u6307\u5b9a\u7ed3\u6784\u4f53\u7684 \u5b9e\u4f8b \u6240\u5177\u6709\u7684\u884c\u4e3a\u3002 \u4f46\u7ed3\u6784\u4f53\u5e76\u4e0d\u662f\u521b\u5efa\u81ea\u5b9a\u4e49\u7c7b\u578b\u7684\u552f\u4e00\u65b9\u6cd5\uff1a Rust \u7684\u679a\u4e3e\u529f\u80fd\u4e5f\u53ef\u4ee5\uff01","title":"\u603b\u7ed3"}]}