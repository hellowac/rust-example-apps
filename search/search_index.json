{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u7b80\u4ecb \u8fd9\u662f\u6211\u7684\u5b66\u4e60Rust\u4e4b\u65c5\u7684\u5b9e\u4f8bAPP\u5408\u96c6 github\u5730\u5740: https://github.com/hellowac/rust-example-apps","title":"\u7b80\u4ecb"},{"location":"#_1","text":"\u8fd9\u662f\u6211\u7684\u5b66\u4e60Rust\u4e4b\u65c5\u7684\u5b9e\u4f8bAPP\u5408\u96c6 github\u5730\u5740: https://github.com/hellowac/rust-example-apps","title":"\u7b80\u4ecb"},{"location":"an-io-project/","text":"\u6784\u5efa\u4e00\u4e2a\u547d\u4ee4\u884c\u7a0b\u5e8f \u672c\u7ae0\u65e2\u662f\u4e00\u4e2a\u76ee\u524d\u6240\u5b66\u7684\u5f88\u591a\u6280\u80fd\u7684\u6982\u62ec\uff0c\u4e5f\u662f\u4e00\u4e2a\u66f4\u591a\u6807\u51c6\u5e93\u529f\u80fd\u7684\u63a2\u7d22\u3002\u6211\u4eec\u5c06\u6784\u5efa\u4e00\u4e2a\u4e0e\u6587\u4ef6\u548c\u547d\u4ee4\u884c\u8f93\u5165/\u8f93\u51fa\u4ea4\u4e92\u7684\u547d\u4ee4\u884c\u5de5\u5177\u6765\u7ec3\u4e60\u73b0\u5728\u4e00\u4e9b\u4f60\u5df2\u7ecf\u638c\u63e1\u7684 Rust \u6280\u80fd\u3002 Rust \u7684 \u8fd0\u884c\u901f\u5ea6 \u3001 \u5b89\u5168\u6027 \u3001 \u5355\u4e8c\u8fdb\u5236\u6587\u4ef6\u8f93\u51fa \u548c \u8de8\u5e73\u53f0\u652f\u6301 \u4f7f\u5176\u6210\u4e3a\u521b\u5efa\u547d\u4ee4\u884c\u7a0b\u5e8f\u7684\u7edd\u4f73\u9009\u62e9\uff0c\u6240\u4ee5\u6211\u4eec\u7684\u9879\u76ee\u5c06\u521b\u5efa\u4e00\u4e2a\u6211\u4eec\u81ea\u5df1\u7248\u672c\u7684\u7ecf\u5178\u547d\u4ee4\u884c\u5de5\u5177\uff1a grep \u3002 grep \u662f \u201cGlobally search a Regular Expression and Print.\u201d \u7684\u9996\u5b57\u6bcd\u7f29\u5199\u3002 grep \u6700\u7b80\u5355\u7684\u4f7f\u7528\u573a\u666f\u662f\u5728\u7279\u5b9a\u6587\u4ef6\u4e2d\u641c\u7d22\u6307\u5b9a\u5b57\u7b26\u4e32\u3002 \u4e3a\u6b64\uff0c grep \u83b7\u53d6\u4e00\u4e2a\u6587\u4ef6\u540d\u548c\u4e00\u4e2a\u5b57\u7b26\u4e32\u4f5c\u4e3a\u53c2\u6570\uff0c\u63a5\u7740\u8bfb\u53d6\u6587\u4ef6\u5e76\u627e\u5230\u5176\u4e2d\u5305\u542b\u5b57\u7b26\u4e32\u53c2\u6570\u7684\u884c\uff0c\u7136\u540e\u6253\u5370\u51fa\u8fd9\u4e9b\u884c\u3002 \u5728\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u4f1a\u5c55\u793a\u5982\u4f55\u8ba9\u6211\u4eec\u7684\u547d\u4ee4\u884c\u5de5\u5177\u5229\u7528\u5f88\u591a\u547d\u4ee4\u884c\u5de5\u5177\u4e2d\u7528\u5230\u7684\u7ec8\u7aef\u529f\u80fd\u3002\u8bfb\u53d6\u73af\u5883\u53d8\u91cf\u6765\u4f7f\u5f97\u7528\u6237\u53ef\u4ee5\u914d\u7f6e\u5de5\u5177\u7684\u884c\u4e3a\u3002 \u6253\u5370\u5230 \u6807\u51c6\u9519\u8bef\u63a7\u5236\u6d41 \uff08stderr\uff09 \u800c\u4e0d\u662f \u6807\u51c6\u8f93\u51fa \uff08stdout\uff09\uff0c\u4f8b\u5982\u8fd9\u6837\u7528\u6237\u53ef\u4ee5\u9009\u62e9\u5c06\u6210\u529f\u8f93\u51fa\u91cd\u5b9a\u5411\u5230\u6587\u4ef6\u4e2d\u7684\u540c\u65f6\u4ecd\u7136\u5728\u5c4f\u5e55\u4e0a\u663e\u793a\u9519\u8bef\u4fe1\u606f\u3002 \u4e00\u4f4d Rust \u793e\u533a\u7684\u6210\u5458\uff0cAndrew Gallant\uff0c\u5df2\u7ecf\u521b\u5efa\u4e86\u4e00\u4e2a\u529f\u80fd\u5b8c\u6574\u4e14\u975e\u5e38\u5feb\u901f\u7684 grep \u7248\u672c\uff0c\u53eb\u505a ripgrep \u3002\u76f8\u6bd4\u4e4b\u4e0b\uff0c\u6211\u4eec\u7684 grep \u7248\u672c\u5c06\u975e\u5e38\u7b80\u5355\uff0c\u672c\u7ae0\u5c06\u6559\u4f1a\u4f60\u4e00\u4e9b\u5e2e\u52a9\u7406\u89e3\u50cf ripgrep \u8fd9\u6837\u771f\u5b9e\u9879\u76ee\u7684\u80cc\u666f\u77e5\u8bc6\u3002 \u6211\u4eec\u7684 grep \u9879\u76ee\u5c06\u4f1a\u7ed3\u5408\u4e4b\u524d\u6240\u5b66\u7684\u4e00\u4e9b\u5185\u5bb9\uff1a \u4ee3\u7801\u7ec4\u7ec7 \uff08\u4f7f\u7528 \u7b2c\u4e03\u7ae0 \u5b66\u4e60\u7684\u6a21\u5757\uff09 vector \u548c \u5b57\u7b26\u4e32 \uff08\u7b2c\u516b\u7ae0\uff0c\u96c6\u5408\uff09 \u9519\u8bef\u5904\u7406 \uff08\u7b2c\u4e5d\u7ae0\uff09 \u5408\u7406\u7684\u4f7f\u7528 trait \u548c \u751f\u547d\u5468\u671f \uff08\u7b2c\u5341\u7ae0\uff09 \u6d4b\u8bd5 \uff08\u7b2c\u5341\u4e00\u7ae0\uff09 \u53e6\u5916\u8fd8\u4f1a\u7b80\u8981\u7684\u8bb2\u5230 \u95ed\u5305 \u3001 \u8fed\u4ee3\u5668 \u548c trait \u5bf9\u8c61 \uff0c\u4ed6\u4eec\u5206\u522b\u4f1a\u5728 \u7b2c\u5341\u4e09\u7ae0 \u548c \u7b2c\u5341\u4e03\u7ae0 \u4e2d\u8be6\u7ec6\u4ecb\u7ecd\u3002 \u63a5\u53d7\u547d\u4ee4\u884c\u53c2\u6570 \u7248\u672c1 : use std :: env ; use std :: fs ; fn main () { let args : Vec < String > = env :: args (). collect (); let query = & args [ 1 ]; let filename = & args [ 2 ]; println! ( \"{:?}\" , args ); println! ( \"\u641c\u7d22\u7684\u5b57\u7b26\u4e32\u4e3a {}\" , query ); println! ( \"\u641c\u7d22\u7684\u6587\u4ef6 {} \" , filename ); let contents = fs :: read_to_string ( filename ). expect ( \"\u8bfb\u53d6\u6587\u4ef6\u5931\u8d25\" ); println! ( \"\u6587\u4ef6\u5185\u5bb9: \\n {}\" , contents ) } \u7248\u672c2 : use std :: env ; use std :: fs ; fn main () { let args : Vec < String > = env :: args (). collect (); let ( query , filename ) = parse_config ( & args ); println! ( \"{:?}\" , args ); println! ( \"\u641c\u7d22\u7684\u5b57\u7b26\u4e32\u4e3a {}\" , query ); println! ( \"\u641c\u7d22\u7684\u6587\u4ef6 {} \" , filename ); let contents = fs :: read_to_string ( filename ). expect ( \"\u8bfb\u53d6\u6587\u4ef6\u5931\u8d25\" ); println! ( \"\u6587\u4ef6\u5185\u5bb9: \\n {}\" , contents ) } fn parse_config ( args : & [ String ]) -> ( & str , & str ) { let query = & args [ 1 ]; let filename = & args [ 2 ]; ( query , filename ) } \u7248\u672c3 : use std :: env ; use std :: fs ; fn main () { let args : Vec < String > = env :: args (). collect (); let config = parse_config ( & args ); println! ( \"{:?}\" , args ); println! ( \"\u641c\u7d22\u7684\u5b57\u7b26\u4e32\u4e3a {}\" , config . query ); println! ( \"\u641c\u7d22\u7684\u6587\u4ef6 {} \" , config . filename ); let contents = fs :: read_to_string ( config . filename ). expect ( \"\u8bfb\u53d6\u6587\u4ef6\u5931\u8d25\" ); println! ( \"\u6587\u4ef6\u5185\u5bb9: \\n {}\" , contents ) } struct Config { query : String , filename : String , } fn parse_config ( args : & [ String ]) -> Config { let query = args [ 1 ]. clone (); let filename = args [ 2 ]. clone (); Config { query , filename } } \u8bfb\u53d6\u6587\u4ef6 use std :: env ; use std :: fs ; fn main () { let args : Vec < String > = env :: args (). collect (); let config = Config :: new ( & args ); println! ( \"{:?}\" , args ); println! ( \"\u641c\u7d22\u7684\u5b57\u7b26\u4e32\u4e3a {}\" , config . query ); println! ( \"\u641c\u7d22\u7684\u6587\u4ef6 {} \" , config . filename ); let contents = fs :: read_to_string ( config . filename ). expect ( \"\u8bfb\u53d6\u6587\u4ef6\u5931\u8d25\" ); println! ( \"\u6587\u4ef6\u5185\u5bb9: \\n {}\" , contents ) } struct Config { query : String , filename : String , } impl Config { fn new ( args : & [ String ]) -> Config { let query = args [ 1 ]. clone (); let filename = args [ 2 ]. clone (); Config { query , filename } } } \u7248\u672c5 : use std :: env ; use std :: fs ; use std :: process ; fn main () { let args : Vec < String > = env :: args (). collect (); let config = Config :: new ( & args ). unwrap_or_else ( | err | { println! ( \"\u89e3\u6790\u53c2\u6570\u9519\u8bef: {}\" , err ); process :: exit ( 1 ); }); println! ( \"{:?}\" , args ); println! ( \"\u641c\u7d22\u7684\u5b57\u7b26\u4e32\u4e3a {}\" , config . query ); println! ( \"\u641c\u7d22\u7684\u6587\u4ef6 {} \" , config . filename ); let contents = fs :: read_to_string ( config . filename ). expect ( \"\u8bfb\u53d6\u6587\u4ef6\u5931\u8d25\" ); println! ( \"\u6587\u4ef6\u5185\u5bb9: \\n {}\" , contents ) } struct Config { query : String , filename : String , } impl Config { fn new ( args : & [ String ]) -> Result < Config , &' static str > { if args . len () < 3 { return Err ( \"\u53c2\u6570\u4e0d\u591f\" ); } let query = args [ 1 ]. clone (); let filename = args [ 2 ]. clone (); Ok ( Config { query , filename }) } } \u91cd\u6784\u6539\u8fdb\u6a21\u5757\u6027\u548c\u9519\u8bef\u5904\u7406 \u7248\u672c6 : use std :: env ; use std :: fs ; use std :: process ; fn main () { let args : Vec < String > = env :: args (). collect (); let config = Config :: new ( & args ). unwrap_or_else ( | err | { println! ( \"\u89e3\u6790\u53c2\u6570\u9519\u8bef: {}\" , err ); process :: exit ( 1 ); }); println! ( \"{:?}\" , args ); println! ( \"\u641c\u7d22\u7684\u5b57\u7b26\u4e32\u4e3a: {}\" , config . query ); println! ( \"\u641c\u7d22\u7684\u6587\u4ef6: {} \" , config . filename ); run ( config ); } fn run ( config : Config ) { let contents = fs :: read_to_string ( config . filename ). expect ( \"\u8bfb\u53d6\u6587\u4ef6\u5931\u8d25\" ); println! ( \"\u6587\u4ef6\u5185\u5bb9: \\n {}\" , contents ) } struct Config { query : String , filename : String , } impl Config { fn new ( args : & [ String ]) -> Result < Config , &' static str > { if args . len () < 3 { return Err ( \"\u53c2\u6570\u4e0d\u591f\" ); } let query = args [ 1 ]. clone (); let filename = args [ 2 ]. clone (); Ok ( Config { query , filename }) } } \u7248\u672c7 : use std :: env ; use std :: error :: Error ; use std :: fs ; use std :: process ; fn main () { let args : Vec < String > = env :: args (). collect (); let config = Config :: new ( & args ). unwrap_or_else ( | err | { println! ( \"\u89e3\u6790\u53c2\u6570\u9519\u8bef: {}\" , err ); process :: exit ( 1 ); }); println! ( \"{:?}\" , args ); println! ( \"\u641c\u7d22\u7684\u5b57\u7b26\u4e32\u4e3a: {}\" , config . query ); println! ( \"\u641c\u7d22\u7684\u6587\u4ef6: {} \" , config . filename ); if let Err ( e ) = run ( config ) { println! ( \"\u7a0b\u5e8f\u9519\u8bef: {}\" , e ); process :: exit ( 1 ); } } fn run ( config : Config ) -> Result < (), Box < dyn Error >> { let contents = fs :: read_to_string ( config . filename ) ? ; println! ( \"\u6587\u4ef6\u5185\u5bb9: \\n {}\" , contents ); Ok (()) } struct Config { query : String , filename : String , } impl Config { fn new ( args : & [ String ]) -> Result < Config , &' static str > { if args . len () < 3 { return Err ( \"\u53c2\u6570\u4e0d\u591f\" ); } let query = args [ 1 ]. clone (); let filename = args [ 2 ]. clone (); Ok ( Config { query , filename }) } } \u91c7\u7528\u6d4b\u8bd5\u9a71\u52a8\u5f00\u53d1\u5b8c\u5584\u5e93\u7684\u529f\u80fd \u7248\u672c8 : // src/lib.rs \u6587\u4ef6 use std :: error :: Error ; use std :: fs ; pub struct Config { pub query : String , pub filename : String , } impl Config { pub fn new ( args : & [ String ]) -> Result < Config , &' static str > { if args . len () < 3 { return Err ( \"\u53c2\u6570\u4e0d\u591f\" ); } let query = args [ 1 ]. clone (); let filename = args [ 2 ]. clone (); Ok ( Config { query , filename }) } } pub fn run ( config : Config ) -> Result < (), Box < dyn Error >> { let contents = fs :: read_to_string ( config . filename ) ? ; // println!(\"\u6587\u4ef6\u5185\u5bb9: \\n{}\", contents); for line in search ( & config . query , & contents ) { println! ( \"{}\" , line ); } Ok (()) } pub fn search <' a > ( query : & str , contents : & ' a str ) -> Vec <&' a str > { let mut results = Vec :: new (); for line in contents . lines () { if line . contains ( query ) { results . push ( line ); } } results } #[cfg(test)] mod tests { use super :: * ; #[test] fn one_result () { let query = \"duct\" ; // \u8fd9\u544a\u8bc9 Rust \u4e0d\u8981\u5728\u5b57\u7b26\u4e32\u5b57\u9762\u503c\u5185\u5bb9\u7684\u5f00\u5934\u52a0\u5165\u6362\u884c\u7b26 let contents = \"\\ Rust: safe, fast, productive. Pick three.\" ; assert_eq! ( vec! [ \"safe, fast, productive.\" ], search ( query , contents )); } } // src/main.rs use std :: env ; use std :: process ; use minigrep :: run ; use minigrep :: Config ; fn main () { let args : Vec < String > = env :: args (). collect (); let config = Config :: new ( & args ). unwrap_or_else ( | err | { println! ( \"\u89e3\u6790\u53c2\u6570\u9519\u8bef: {}\" , err ); process :: exit ( 1 ); }); println! ( \"{:?}\" , args ); println! ( \"\u641c\u7d22\u7684\u5b57\u7b26\u4e32\u4e3a: {}\" , config . query ); println! ( \"\u641c\u7d22\u7684\u6587\u4ef6: {} \" , config . filename ); if let Err ( e ) = run ( config ) { println! ( \"\u7a0b\u5e8f\u9519\u8bef: {}\" , e ); process :: exit ( 1 ); } } \u5904\u7406\u73af\u5883\u53d8\u91cf \u7248\u672c9: // src/lib.rs use std :: env ; use std :: error :: Error ; use std :: fs ; pub struct Config { pub query : String , pub filename : String , pub case_sensitive : bool , } impl Config { pub fn new ( args : & [ String ]) -> Result < Config , &' static str > { if args . len () < 3 { return Err ( \"\u53c2\u6570\u4e0d\u591f\" ); } let query = args [ 1 ]. clone (); let filename = args [ 2 ]. clone (); let case_sensitive = env :: var ( \"CASE_INSENSITIVE\" ). is_err (); Ok ( Config { query , filename , case_sensitive , }) } } pub fn run ( config : Config ) -> Result < (), Box < dyn Error >> { let contents = fs :: read_to_string ( config . filename ) ? ; // println!(\"\u6587\u4ef6\u5185\u5bb9: \\n{}\", contents); let results = if config . case_sensitive { search ( & config . query , & contents ) } else { search_case_insensitive ( & config . query , & contents ) }; for line in results { println! ( \"{}\" , line ); } Ok (()) } pub fn search <' a > ( query : & str , contents : & ' a str ) -> Vec <&' a str > { let mut results = Vec :: new (); for line in contents . lines () { if line . contains ( query ) { results . push ( line ); } } results } pub fn search_case_insensitive <' a > ( query : & str , contents : & ' a str ) -> Vec <&' a str > { let mut results = Vec :: new (); let query = query . to_lowercase (); for line in contents . lines () { if line . to_lowercase (). contains ( & query ) { results . push ( line ); } } results } #[cfg(test)] mod tests { use super :: * ; #[test] fn one_result () { let query = \"duct\" ; // \u8fd9\u544a\u8bc9 Rust \u4e0d\u8981\u5728\u5b57\u7b26\u4e32\u5b57\u9762\u503c\u5185\u5bb9\u7684\u5f00\u5934\u52a0\u5165\u6362\u884c\u7b26 let contents = \"\\ Rust: safe, fast, productive. Pick three.\" ; assert_eq! ( vec! [ \"safe, fast, productive.\" ], search ( query , contents )); } #[test] fn case_sensitive () { let query = \"duct\" ; let contents = \"\\ Rust: safe, fast, productive. Pick three. Duct tape.\" ; assert_eq! ( vec! [ \"safe, fast, productive.\" ], search ( query , contents )); } #[test] fn case_insensitive () { let query = \"rUsT\" ; let contents = \"\\ Rust: safe, fast, productive. Pick three. Trust me.\" ; assert_eq! ( vec! [ \"Rust:\" , \"Trust me.\" ], search_case_insensitive ( query , contents ) ); } } // src/main.rs use std :: env ; use std :: process ; use minigrep :: run ; use minigrep :: Config ; fn main () { let args : Vec < String > = env :: args (). collect (); let config = Config :: new ( & args ). unwrap_or_else ( | err | { println! ( \"\u89e3\u6790\u53c2\u6570\u9519\u8bef: {}\" , err ); process :: exit ( 1 ); }); println! ( \"{:?}\" , args ); println! ( \"\u641c\u7d22\u7684\u5b57\u7b26\u4e32\u4e3a: {}\" , config . query ); println! ( \"\u641c\u7d22\u7684\u6587\u4ef6: {} \" , config . filename ); if let Err ( e ) = run ( config ) { println! ( \"\u7a0b\u5e8f\u9519\u8bef: {}\" , e ); process :: exit ( 1 ); } } \u8f93\u51fa\u91cd\u5b9a\u5411\u5230\u6807\u51c6\u9519\u8bef \u7248\u672c10: // src/main.rs use std :: env ; use std :: process ; use minigrep :: run ; use minigrep :: Config ; fn main () { let args : Vec < String > = env :: args (). collect (); let config = Config :: new ( & args ). unwrap_or_else ( | err | { eprintln! ( \"\u89e3\u6790\u53c2\u6570\u9519\u8bef: {}\" , err ); process :: exit ( 1 ); }); // println!(\"{:?}\", args); // println!(\"\u641c\u7d22\u7684\u5b57\u7b26\u4e32\u4e3a: {}\", config.query); // println!(\"\u641c\u7d22\u7684\u6587\u4ef6: {} \", config.filename); if let Err ( e ) = run ( config ) { eprintln! ( \"\u7a0b\u5e8f\u9519\u8bef: {}\" , e ); process :: exit ( 1 ); } }","title":"\u6784\u5efa\u4e00\u4e2a\u547d\u4ee4\u884c\u7a0b\u5e8f"},{"location":"an-io-project/#_1","text":"\u672c\u7ae0\u65e2\u662f\u4e00\u4e2a\u76ee\u524d\u6240\u5b66\u7684\u5f88\u591a\u6280\u80fd\u7684\u6982\u62ec\uff0c\u4e5f\u662f\u4e00\u4e2a\u66f4\u591a\u6807\u51c6\u5e93\u529f\u80fd\u7684\u63a2\u7d22\u3002\u6211\u4eec\u5c06\u6784\u5efa\u4e00\u4e2a\u4e0e\u6587\u4ef6\u548c\u547d\u4ee4\u884c\u8f93\u5165/\u8f93\u51fa\u4ea4\u4e92\u7684\u547d\u4ee4\u884c\u5de5\u5177\u6765\u7ec3\u4e60\u73b0\u5728\u4e00\u4e9b\u4f60\u5df2\u7ecf\u638c\u63e1\u7684 Rust \u6280\u80fd\u3002 Rust \u7684 \u8fd0\u884c\u901f\u5ea6 \u3001 \u5b89\u5168\u6027 \u3001 \u5355\u4e8c\u8fdb\u5236\u6587\u4ef6\u8f93\u51fa \u548c \u8de8\u5e73\u53f0\u652f\u6301 \u4f7f\u5176\u6210\u4e3a\u521b\u5efa\u547d\u4ee4\u884c\u7a0b\u5e8f\u7684\u7edd\u4f73\u9009\u62e9\uff0c\u6240\u4ee5\u6211\u4eec\u7684\u9879\u76ee\u5c06\u521b\u5efa\u4e00\u4e2a\u6211\u4eec\u81ea\u5df1\u7248\u672c\u7684\u7ecf\u5178\u547d\u4ee4\u884c\u5de5\u5177\uff1a grep \u3002 grep \u662f \u201cGlobally search a Regular Expression and Print.\u201d \u7684\u9996\u5b57\u6bcd\u7f29\u5199\u3002 grep \u6700\u7b80\u5355\u7684\u4f7f\u7528\u573a\u666f\u662f\u5728\u7279\u5b9a\u6587\u4ef6\u4e2d\u641c\u7d22\u6307\u5b9a\u5b57\u7b26\u4e32\u3002 \u4e3a\u6b64\uff0c grep \u83b7\u53d6\u4e00\u4e2a\u6587\u4ef6\u540d\u548c\u4e00\u4e2a\u5b57\u7b26\u4e32\u4f5c\u4e3a\u53c2\u6570\uff0c\u63a5\u7740\u8bfb\u53d6\u6587\u4ef6\u5e76\u627e\u5230\u5176\u4e2d\u5305\u542b\u5b57\u7b26\u4e32\u53c2\u6570\u7684\u884c\uff0c\u7136\u540e\u6253\u5370\u51fa\u8fd9\u4e9b\u884c\u3002 \u5728\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u4f1a\u5c55\u793a\u5982\u4f55\u8ba9\u6211\u4eec\u7684\u547d\u4ee4\u884c\u5de5\u5177\u5229\u7528\u5f88\u591a\u547d\u4ee4\u884c\u5de5\u5177\u4e2d\u7528\u5230\u7684\u7ec8\u7aef\u529f\u80fd\u3002\u8bfb\u53d6\u73af\u5883\u53d8\u91cf\u6765\u4f7f\u5f97\u7528\u6237\u53ef\u4ee5\u914d\u7f6e\u5de5\u5177\u7684\u884c\u4e3a\u3002 \u6253\u5370\u5230 \u6807\u51c6\u9519\u8bef\u63a7\u5236\u6d41 \uff08stderr\uff09 \u800c\u4e0d\u662f \u6807\u51c6\u8f93\u51fa \uff08stdout\uff09\uff0c\u4f8b\u5982\u8fd9\u6837\u7528\u6237\u53ef\u4ee5\u9009\u62e9\u5c06\u6210\u529f\u8f93\u51fa\u91cd\u5b9a\u5411\u5230\u6587\u4ef6\u4e2d\u7684\u540c\u65f6\u4ecd\u7136\u5728\u5c4f\u5e55\u4e0a\u663e\u793a\u9519\u8bef\u4fe1\u606f\u3002 \u4e00\u4f4d Rust \u793e\u533a\u7684\u6210\u5458\uff0cAndrew Gallant\uff0c\u5df2\u7ecf\u521b\u5efa\u4e86\u4e00\u4e2a\u529f\u80fd\u5b8c\u6574\u4e14\u975e\u5e38\u5feb\u901f\u7684 grep \u7248\u672c\uff0c\u53eb\u505a ripgrep \u3002\u76f8\u6bd4\u4e4b\u4e0b\uff0c\u6211\u4eec\u7684 grep \u7248\u672c\u5c06\u975e\u5e38\u7b80\u5355\uff0c\u672c\u7ae0\u5c06\u6559\u4f1a\u4f60\u4e00\u4e9b\u5e2e\u52a9\u7406\u89e3\u50cf ripgrep \u8fd9\u6837\u771f\u5b9e\u9879\u76ee\u7684\u80cc\u666f\u77e5\u8bc6\u3002 \u6211\u4eec\u7684 grep \u9879\u76ee\u5c06\u4f1a\u7ed3\u5408\u4e4b\u524d\u6240\u5b66\u7684\u4e00\u4e9b\u5185\u5bb9\uff1a \u4ee3\u7801\u7ec4\u7ec7 \uff08\u4f7f\u7528 \u7b2c\u4e03\u7ae0 \u5b66\u4e60\u7684\u6a21\u5757\uff09 vector \u548c \u5b57\u7b26\u4e32 \uff08\u7b2c\u516b\u7ae0\uff0c\u96c6\u5408\uff09 \u9519\u8bef\u5904\u7406 \uff08\u7b2c\u4e5d\u7ae0\uff09 \u5408\u7406\u7684\u4f7f\u7528 trait \u548c \u751f\u547d\u5468\u671f \uff08\u7b2c\u5341\u7ae0\uff09 \u6d4b\u8bd5 \uff08\u7b2c\u5341\u4e00\u7ae0\uff09 \u53e6\u5916\u8fd8\u4f1a\u7b80\u8981\u7684\u8bb2\u5230 \u95ed\u5305 \u3001 \u8fed\u4ee3\u5668 \u548c trait \u5bf9\u8c61 \uff0c\u4ed6\u4eec\u5206\u522b\u4f1a\u5728 \u7b2c\u5341\u4e09\u7ae0 \u548c \u7b2c\u5341\u4e03\u7ae0 \u4e2d\u8be6\u7ec6\u4ecb\u7ecd\u3002","title":"\u6784\u5efa\u4e00\u4e2a\u547d\u4ee4\u884c\u7a0b\u5e8f"},{"location":"an-io-project/#_2","text":"\u7248\u672c1 : use std :: env ; use std :: fs ; fn main () { let args : Vec < String > = env :: args (). collect (); let query = & args [ 1 ]; let filename = & args [ 2 ]; println! ( \"{:?}\" , args ); println! ( \"\u641c\u7d22\u7684\u5b57\u7b26\u4e32\u4e3a {}\" , query ); println! ( \"\u641c\u7d22\u7684\u6587\u4ef6 {} \" , filename ); let contents = fs :: read_to_string ( filename ). expect ( \"\u8bfb\u53d6\u6587\u4ef6\u5931\u8d25\" ); println! ( \"\u6587\u4ef6\u5185\u5bb9: \\n {}\" , contents ) } \u7248\u672c2 : use std :: env ; use std :: fs ; fn main () { let args : Vec < String > = env :: args (). collect (); let ( query , filename ) = parse_config ( & args ); println! ( \"{:?}\" , args ); println! ( \"\u641c\u7d22\u7684\u5b57\u7b26\u4e32\u4e3a {}\" , query ); println! ( \"\u641c\u7d22\u7684\u6587\u4ef6 {} \" , filename ); let contents = fs :: read_to_string ( filename ). expect ( \"\u8bfb\u53d6\u6587\u4ef6\u5931\u8d25\" ); println! ( \"\u6587\u4ef6\u5185\u5bb9: \\n {}\" , contents ) } fn parse_config ( args : & [ String ]) -> ( & str , & str ) { let query = & args [ 1 ]; let filename = & args [ 2 ]; ( query , filename ) } \u7248\u672c3 : use std :: env ; use std :: fs ; fn main () { let args : Vec < String > = env :: args (). collect (); let config = parse_config ( & args ); println! ( \"{:?}\" , args ); println! ( \"\u641c\u7d22\u7684\u5b57\u7b26\u4e32\u4e3a {}\" , config . query ); println! ( \"\u641c\u7d22\u7684\u6587\u4ef6 {} \" , config . filename ); let contents = fs :: read_to_string ( config . filename ). expect ( \"\u8bfb\u53d6\u6587\u4ef6\u5931\u8d25\" ); println! ( \"\u6587\u4ef6\u5185\u5bb9: \\n {}\" , contents ) } struct Config { query : String , filename : String , } fn parse_config ( args : & [ String ]) -> Config { let query = args [ 1 ]. clone (); let filename = args [ 2 ]. clone (); Config { query , filename } }","title":"\u63a5\u53d7\u547d\u4ee4\u884c\u53c2\u6570"},{"location":"an-io-project/#_3","text":"use std :: env ; use std :: fs ; fn main () { let args : Vec < String > = env :: args (). collect (); let config = Config :: new ( & args ); println! ( \"{:?}\" , args ); println! ( \"\u641c\u7d22\u7684\u5b57\u7b26\u4e32\u4e3a {}\" , config . query ); println! ( \"\u641c\u7d22\u7684\u6587\u4ef6 {} \" , config . filename ); let contents = fs :: read_to_string ( config . filename ). expect ( \"\u8bfb\u53d6\u6587\u4ef6\u5931\u8d25\" ); println! ( \"\u6587\u4ef6\u5185\u5bb9: \\n {}\" , contents ) } struct Config { query : String , filename : String , } impl Config { fn new ( args : & [ String ]) -> Config { let query = args [ 1 ]. clone (); let filename = args [ 2 ]. clone (); Config { query , filename } } } \u7248\u672c5 : use std :: env ; use std :: fs ; use std :: process ; fn main () { let args : Vec < String > = env :: args (). collect (); let config = Config :: new ( & args ). unwrap_or_else ( | err | { println! ( \"\u89e3\u6790\u53c2\u6570\u9519\u8bef: {}\" , err ); process :: exit ( 1 ); }); println! ( \"{:?}\" , args ); println! ( \"\u641c\u7d22\u7684\u5b57\u7b26\u4e32\u4e3a {}\" , config . query ); println! ( \"\u641c\u7d22\u7684\u6587\u4ef6 {} \" , config . filename ); let contents = fs :: read_to_string ( config . filename ). expect ( \"\u8bfb\u53d6\u6587\u4ef6\u5931\u8d25\" ); println! ( \"\u6587\u4ef6\u5185\u5bb9: \\n {}\" , contents ) } struct Config { query : String , filename : String , } impl Config { fn new ( args : & [ String ]) -> Result < Config , &' static str > { if args . len () < 3 { return Err ( \"\u53c2\u6570\u4e0d\u591f\" ); } let query = args [ 1 ]. clone (); let filename = args [ 2 ]. clone (); Ok ( Config { query , filename }) } }","title":"\u8bfb\u53d6\u6587\u4ef6"},{"location":"an-io-project/#_4","text":"\u7248\u672c6 : use std :: env ; use std :: fs ; use std :: process ; fn main () { let args : Vec < String > = env :: args (). collect (); let config = Config :: new ( & args ). unwrap_or_else ( | err | { println! ( \"\u89e3\u6790\u53c2\u6570\u9519\u8bef: {}\" , err ); process :: exit ( 1 ); }); println! ( \"{:?}\" , args ); println! ( \"\u641c\u7d22\u7684\u5b57\u7b26\u4e32\u4e3a: {}\" , config . query ); println! ( \"\u641c\u7d22\u7684\u6587\u4ef6: {} \" , config . filename ); run ( config ); } fn run ( config : Config ) { let contents = fs :: read_to_string ( config . filename ). expect ( \"\u8bfb\u53d6\u6587\u4ef6\u5931\u8d25\" ); println! ( \"\u6587\u4ef6\u5185\u5bb9: \\n {}\" , contents ) } struct Config { query : String , filename : String , } impl Config { fn new ( args : & [ String ]) -> Result < Config , &' static str > { if args . len () < 3 { return Err ( \"\u53c2\u6570\u4e0d\u591f\" ); } let query = args [ 1 ]. clone (); let filename = args [ 2 ]. clone (); Ok ( Config { query , filename }) } } \u7248\u672c7 : use std :: env ; use std :: error :: Error ; use std :: fs ; use std :: process ; fn main () { let args : Vec < String > = env :: args (). collect (); let config = Config :: new ( & args ). unwrap_or_else ( | err | { println! ( \"\u89e3\u6790\u53c2\u6570\u9519\u8bef: {}\" , err ); process :: exit ( 1 ); }); println! ( \"{:?}\" , args ); println! ( \"\u641c\u7d22\u7684\u5b57\u7b26\u4e32\u4e3a: {}\" , config . query ); println! ( \"\u641c\u7d22\u7684\u6587\u4ef6: {} \" , config . filename ); if let Err ( e ) = run ( config ) { println! ( \"\u7a0b\u5e8f\u9519\u8bef: {}\" , e ); process :: exit ( 1 ); } } fn run ( config : Config ) -> Result < (), Box < dyn Error >> { let contents = fs :: read_to_string ( config . filename ) ? ; println! ( \"\u6587\u4ef6\u5185\u5bb9: \\n {}\" , contents ); Ok (()) } struct Config { query : String , filename : String , } impl Config { fn new ( args : & [ String ]) -> Result < Config , &' static str > { if args . len () < 3 { return Err ( \"\u53c2\u6570\u4e0d\u591f\" ); } let query = args [ 1 ]. clone (); let filename = args [ 2 ]. clone (); Ok ( Config { query , filename }) } }","title":"\u91cd\u6784\u6539\u8fdb\u6a21\u5757\u6027\u548c\u9519\u8bef\u5904\u7406"},{"location":"an-io-project/#_5","text":"\u7248\u672c8 : // src/lib.rs \u6587\u4ef6 use std :: error :: Error ; use std :: fs ; pub struct Config { pub query : String , pub filename : String , } impl Config { pub fn new ( args : & [ String ]) -> Result < Config , &' static str > { if args . len () < 3 { return Err ( \"\u53c2\u6570\u4e0d\u591f\" ); } let query = args [ 1 ]. clone (); let filename = args [ 2 ]. clone (); Ok ( Config { query , filename }) } } pub fn run ( config : Config ) -> Result < (), Box < dyn Error >> { let contents = fs :: read_to_string ( config . filename ) ? ; // println!(\"\u6587\u4ef6\u5185\u5bb9: \\n{}\", contents); for line in search ( & config . query , & contents ) { println! ( \"{}\" , line ); } Ok (()) } pub fn search <' a > ( query : & str , contents : & ' a str ) -> Vec <&' a str > { let mut results = Vec :: new (); for line in contents . lines () { if line . contains ( query ) { results . push ( line ); } } results } #[cfg(test)] mod tests { use super :: * ; #[test] fn one_result () { let query = \"duct\" ; // \u8fd9\u544a\u8bc9 Rust \u4e0d\u8981\u5728\u5b57\u7b26\u4e32\u5b57\u9762\u503c\u5185\u5bb9\u7684\u5f00\u5934\u52a0\u5165\u6362\u884c\u7b26 let contents = \"\\ Rust: safe, fast, productive. Pick three.\" ; assert_eq! ( vec! [ \"safe, fast, productive.\" ], search ( query , contents )); } } // src/main.rs use std :: env ; use std :: process ; use minigrep :: run ; use minigrep :: Config ; fn main () { let args : Vec < String > = env :: args (). collect (); let config = Config :: new ( & args ). unwrap_or_else ( | err | { println! ( \"\u89e3\u6790\u53c2\u6570\u9519\u8bef: {}\" , err ); process :: exit ( 1 ); }); println! ( \"{:?}\" , args ); println! ( \"\u641c\u7d22\u7684\u5b57\u7b26\u4e32\u4e3a: {}\" , config . query ); println! ( \"\u641c\u7d22\u7684\u6587\u4ef6: {} \" , config . filename ); if let Err ( e ) = run ( config ) { println! ( \"\u7a0b\u5e8f\u9519\u8bef: {}\" , e ); process :: exit ( 1 ); } }","title":"\u91c7\u7528\u6d4b\u8bd5\u9a71\u52a8\u5f00\u53d1\u5b8c\u5584\u5e93\u7684\u529f\u80fd"},{"location":"an-io-project/#_6","text":"\u7248\u672c9: // src/lib.rs use std :: env ; use std :: error :: Error ; use std :: fs ; pub struct Config { pub query : String , pub filename : String , pub case_sensitive : bool , } impl Config { pub fn new ( args : & [ String ]) -> Result < Config , &' static str > { if args . len () < 3 { return Err ( \"\u53c2\u6570\u4e0d\u591f\" ); } let query = args [ 1 ]. clone (); let filename = args [ 2 ]. clone (); let case_sensitive = env :: var ( \"CASE_INSENSITIVE\" ). is_err (); Ok ( Config { query , filename , case_sensitive , }) } } pub fn run ( config : Config ) -> Result < (), Box < dyn Error >> { let contents = fs :: read_to_string ( config . filename ) ? ; // println!(\"\u6587\u4ef6\u5185\u5bb9: \\n{}\", contents); let results = if config . case_sensitive { search ( & config . query , & contents ) } else { search_case_insensitive ( & config . query , & contents ) }; for line in results { println! ( \"{}\" , line ); } Ok (()) } pub fn search <' a > ( query : & str , contents : & ' a str ) -> Vec <&' a str > { let mut results = Vec :: new (); for line in contents . lines () { if line . contains ( query ) { results . push ( line ); } } results } pub fn search_case_insensitive <' a > ( query : & str , contents : & ' a str ) -> Vec <&' a str > { let mut results = Vec :: new (); let query = query . to_lowercase (); for line in contents . lines () { if line . to_lowercase (). contains ( & query ) { results . push ( line ); } } results } #[cfg(test)] mod tests { use super :: * ; #[test] fn one_result () { let query = \"duct\" ; // \u8fd9\u544a\u8bc9 Rust \u4e0d\u8981\u5728\u5b57\u7b26\u4e32\u5b57\u9762\u503c\u5185\u5bb9\u7684\u5f00\u5934\u52a0\u5165\u6362\u884c\u7b26 let contents = \"\\ Rust: safe, fast, productive. Pick three.\" ; assert_eq! ( vec! [ \"safe, fast, productive.\" ], search ( query , contents )); } #[test] fn case_sensitive () { let query = \"duct\" ; let contents = \"\\ Rust: safe, fast, productive. Pick three. Duct tape.\" ; assert_eq! ( vec! [ \"safe, fast, productive.\" ], search ( query , contents )); } #[test] fn case_insensitive () { let query = \"rUsT\" ; let contents = \"\\ Rust: safe, fast, productive. Pick three. Trust me.\" ; assert_eq! ( vec! [ \"Rust:\" , \"Trust me.\" ], search_case_insensitive ( query , contents ) ); } } // src/main.rs use std :: env ; use std :: process ; use minigrep :: run ; use minigrep :: Config ; fn main () { let args : Vec < String > = env :: args (). collect (); let config = Config :: new ( & args ). unwrap_or_else ( | err | { println! ( \"\u89e3\u6790\u53c2\u6570\u9519\u8bef: {}\" , err ); process :: exit ( 1 ); }); println! ( \"{:?}\" , args ); println! ( \"\u641c\u7d22\u7684\u5b57\u7b26\u4e32\u4e3a: {}\" , config . query ); println! ( \"\u641c\u7d22\u7684\u6587\u4ef6: {} \" , config . filename ); if let Err ( e ) = run ( config ) { println! ( \"\u7a0b\u5e8f\u9519\u8bef: {}\" , e ); process :: exit ( 1 ); } }","title":"\u5904\u7406\u73af\u5883\u53d8\u91cf"},{"location":"an-io-project/#_7","text":"\u7248\u672c10: // src/main.rs use std :: env ; use std :: process ; use minigrep :: run ; use minigrep :: Config ; fn main () { let args : Vec < String > = env :: args (). collect (); let config = Config :: new ( & args ). unwrap_or_else ( | err | { eprintln! ( \"\u89e3\u6790\u53c2\u6570\u9519\u8bef: {}\" , err ); process :: exit ( 1 ); }); // println!(\"{:?}\", args); // println!(\"\u641c\u7d22\u7684\u5b57\u7b26\u4e32\u4e3a: {}\", config.query); // println!(\"\u641c\u7d22\u7684\u6587\u4ef6: {} \", config.filename); if let Err ( e ) = run ( config ) { eprintln! ( \"\u7a0b\u5e8f\u9519\u8bef: {}\" , e ); process :: exit ( 1 ); } }","title":"\u8f93\u51fa\u91cd\u5b9a\u5411\u5230\u6807\u51c6\u9519\u8bef"},{"location":"closures/","text":"\u8fed\u4ee3\u5668\u4e0e\u95ed\u5305 \u95ed\u5305 \u4f7f\u7528\u95ed\u5305\u521b\u5efa\u884c\u4e3a\u7684\u62bd\u8c61 \u7248\u672c1: // src/main.rs use std :: thread ; use std :: time :: Duration ; fn simulated_expensive_calculation ( intensity : u32 ) -> u32 { println! ( \"\u6162\u6162\u8ba1\u7b97...\" ); thread :: sleep ( Duration :: from_secs ( 2 )); intensity } fn main () { let simulated_user_specified_value = 10 ; let simulated_random_number = 7 ; generate_workout ( simulated_user_specified_value , simulated_random_number ); } fn generate_workout ( intensity : u32 , random_number : u32 ) { if intensity < 25 { println! ( \"\u4eca\u5929, \u505a {} \u4e2a\u4fef\u5367\u6491!\" , simulated_expensive_calculation ( intensity ) ); println! ( \"\u4e0b\u4e00\u6b65\uff0c\u505a {} \u4e2a\u4ef0\u5367\u8d77\u5750\uff01\" , simulated_expensive_calculation ( intensity ) ); } else { if random_number == 3 { println! ( \"\u4eca\u5929\u4f11\u606f\u4e00\u4e0b\uff01 \u8bb0\u5f97\u4fdd\u6301\u6c34\u5206\uff01\" ) } else { println! ( \"\u4eca\u5929\uff0c\u8dd1 {} \u5206\u949f\uff01\" , simulated_expensive_calculation ( intensity ) ); } } } \u4f7f\u7528\u51fd\u6570\u91cd\u6784 \u5c06\u91cd\u590d\u7684 simulated_expensive_calculation \u51fd\u6570\u8c03\u7528\u63d0\u53d6\u5230\u4e00\u4e2a\u53d8\u91cf\u4e2d // src/main.rs // snap.... fn generate_workout ( intensity : u32 , random_number : u32 ) { let expensive_result = simulated_expensive_calculation ( intensity ); if intensity < 25 { println! ( \"\u4eca\u5929, \u505a {} \u4e2a\u4fef\u5367\u6491!\" , expensive_result ); println! ( \"\u4e0b\u4e00\u6b65\uff0c\u505a {} \u4e2a\u4ef0\u5367\u8d77\u5750\uff01\" , expensive_result ); } else { if random_number == 3 { println! ( \"\u4eca\u5929\u4f11\u606f\u4e00\u4e0b\uff01 \u8bb0\u5f97\u4fdd\u6301\u6c34\u5206\uff01\" ) } else { println! ( \"\u4eca\u5929\uff0c\u8dd1 {} \u5206\u949f\uff01\" , expensive_result ); } } } \u91cd\u6784 - \u4f7f\u7528\u95ed\u5305\u50a8\u5b58\u4ee3\u7801 \u95ed\u5305\u4e0d\u8981\u6c42\u50cf fn \u51fd\u6570\u90a3\u6837\u5728\u53c2\u6570\u548c\u8fd4\u56de\u503c\u4e0a\u6ce8\u660e\u7c7b\u578b\u3002 \u51fd\u6570\u4e2d\u9700\u8981\u7c7b\u578b\u6ce8\u89e3\u662f\u56e0\u4e3a\u4ed6\u4eec\u662f\u66b4\u9732\u7ed9\u7528\u6237\u7684\u663e\u5f0f\u63a5\u53e3\u7684\u4e00\u90e8\u5206\u3002 \u4e25\u683c\u7684\u5b9a\u4e49\u8fd9\u4e9b\u63a5\u53e3\u5bf9\u4e8e\u4fdd\u8bc1\u6240\u6709\u4eba\u90fd\u8ba4\u540c\u51fd\u6570\u4f7f\u7528\u548c\u8fd4\u56de\u503c\u7684\u7c7b\u578b\u6765\u8bf4\u662f\u5f88\u91cd\u8981\u7684\u3002 \u4f46\u662f\u95ed\u5305\u5e76\u4e0d\u7528\u4e8e\u8fd9\u6837\u66b4\u9732\u5728\u5916\u7684\u63a5\u53e3\uff1a\u4ed6\u4eec\u50a8\u5b58\u5728\u53d8\u91cf\u4e2d\u5e76\u88ab\u4f7f\u7528\uff0c\u4e0d\u7528\u547d\u540d\u4ed6\u4eec\u6216\u66b4\u9732\u7ed9\u5e93\u7684\u7528\u6237\u8c03\u7528\u3002 \u95ed\u5305\u901a\u5e38\u5f88\u77ed\uff0c\u5e76\u53ea\u5173\u8054\u4e8e\u5c0f\u8303\u56f4\u7684\u4e0a\u4e0b\u6587\u800c\u975e\u4efb\u610f\u60c5\u5883\u3002 \u5728\u8fd9\u4e9b\u6709\u9650\u5236\u7684\u4e0a\u4e0b\u6587\u4e2d\uff0c\u7f16\u8bd1\u5668\u80fd\u53ef\u9760\u7684\u63a8\u65ad\u53c2\u6570\u548c\u8fd4\u56de\u503c\u7684\u7c7b\u578b\uff0c\u7c7b\u4f3c\u4e8e\u5b83\u662f\u5982\u4f55\u80fd\u591f\u63a8\u65ad\u5927\u90e8\u5206\u53d8\u91cf\u7684\u7c7b\u578b\u4e00\u6837\u3002 // src/main.rs // snap.... fn generate_workout ( intensity : u32 , random_number : u32 ) { // \u95ed\u5305\u91cd\u6784\u4ee3\u7801 let expensive_closure = | num | { println! ( \"\u6162\u6162\u8ba1\u7b97...\" ); thread :: sleep ( Duration :: from_secs ( 2 )); num }; if intensity < 25 { println! ( \"\u4eca\u5929, \u505a {} \u4e2a\u4fef\u5367\u6491!\" , expensive_closure ( intensity )); println! ( \"\u4e0b\u4e00\u6b65\uff0c\u505a {} \u4e2a\u4ef0\u5367\u8d77\u5750\uff01\" , expensive_closure ( intensity )); } else { if random_number == 3 { println! ( \"\u4eca\u5929\u4f11\u606f\u4e00\u4e0b\uff01 \u8bb0\u5f97\u4fdd\u6301\u6c34\u5206\uff01\" ) } else { println! ( \"\u4eca\u5929\uff0c\u8dd1 {} \u5206\u949f\uff01\" , expensive_closure ( intensity )); } } } \u95ed\u5305 - \u7c7b\u578b\u63a8\u65ad\u548c\u6ce8\u89e3 \u6709\u4e86\u7c7b\u578b\u6ce8\u89e3\u95ed\u5305\u7684\u8bed\u6cd5\u5c31\u66f4\u7c7b\u4f3c\u51fd\u6570\u4e86\u3002 \u5982\u4e0b\u662f\u4e00\u4e2a\u5bf9\u5176\u53c2\u6570\u52a0\u4e00\u7684\u51fd\u6570\u7684\u5b9a\u4e49\u4e0e\u62e5\u6709\u76f8\u540c\u884c\u4e3a\u95ed\u5305\u8bed\u6cd5\u7684\u7eb5\u5411\u5bf9\u6bd4\u3002 \u8fd9\u91cc\u589e\u52a0\u4e86\u4e00\u4e9b\u7a7a\u683c\u6765\u5bf9\u9f50\u76f8\u5e94\u90e8\u5206\u3002 \u8fd9\u5c55\u793a\u4e86\u95ed\u5305\u8bed\u6cd5\u5982\u4f55\u7c7b\u4f3c\u4e8e\u51fd\u6570\u8bed\u6cd5\uff0c\u9664\u4e86\u4f7f\u7528\u7ad6\u7ebf\u800c\u4e0d\u662f\u62ec\u53f7\u4ee5\u53ca\u51e0\u4e2a\u53ef\u9009\u7684\u8bed\u6cd5\u4e4b\u5916\uff1a fn add_one_v1 ( x : u32 ) -> u32 { x + 1 } // \u5c55\u793a\u4e86\u4e00\u4e2a\u51fd\u6570\u5b9a\u4e49 let add_one_v2 = | x : u32 | -> u32 { x + 1 }; // \u5c55\u793a\u4e86\u4e00\u4e2a\u5b8c\u6574\u6807\u6ce8\u7684\u95ed\u5305\u5b9a\u4e49 let add_one_v3 = | x | { x + 1 }; // \u5b9a\u4e49\u4e2d\u7701\u7565\u4e86\u7c7b\u578b\u6ce8\u89e3 let add_one_v4 = | x | x + 1 ; // \u53bb\u6389\u4e86\u53ef\u9009\u7684\u5927\u62ec\u53f7\uff0c\u56e0\u4e3a\u95ed\u5305\u4f53\u53ea\u6709\u4e00\u884c \u8c03\u7528\u95ed\u5305\u662f add_one_v3 \u548c add_one_v4 \u80fd\u591f\u7f16\u8bd1\u7684\u5fc5\u8981\u6761\u4ef6\uff0c\u56e0\u4e3a\u7c7b\u578b\u5c06\u4ece\u5176\u7528\u6cd5\u4e2d\u63a8\u65ad\u51fa\u6765\u3002 \u95ed\u5305\u5b9a\u4e49\u4f1a\u4e3a\u6bcf\u4e2a\u53c2\u6570\u548c\u8fd4\u56de\u503c\u63a8\u65ad\u4e00\u4e2a\u5177\u4f53\u7c7b\u578b\u3002 \u5982\u679c\u5c1d\u8bd5\u8c03\u7528\u95ed\u5305\u4e24\u6b21\uff0c\u7b2c\u4e00\u6b21\u4f7f\u7528 String \u7c7b\u578b\u4f5c\u4e3a\u53c2\u6570\u800c\u7b2c\u4e8c\u6b21\u4f7f\u7528 u32 \uff0c\u5219\u4f1a\u5f97\u5230\u4e00\u4e2a\u9519\u8bef\uff1a // \u5c1d\u8bd5\u8c03\u7528\u4e00\u4e2a\u88ab\u63a8\u65ad\u4e3a\u4e24\u4e2a\u4e0d\u540c\u7c7b\u578b\u7684\u95ed\u5305 fn main () { let example_closure = | x | x ; let s = example_closure ( String :: from ( \"hello\" )); // \u7528\u6cd5\u4e3aString let n = example_closure ( 5 ); // \u7528\u6cd5\u4e3au32 } \u4f7f\u7528\u5e26\u6709\u6cdb\u578b\u548c Fn trait \u7684\u95ed\u5305 \u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u5b58\u653e\u95ed\u5305\u548c\u8c03\u7528\u95ed\u5305\u7ed3\u679c\u7684\u7ed3\u6784\u4f53\u3002\u8be5\u7ed3\u6784\u4f53\u53ea\u4f1a\u5728\u9700\u8981\u7ed3\u679c\u65f6\u6267\u884c\u95ed\u5305\uff0c\u5e76\u4f1a\u7f13\u5b58\u7ed3\u679c\u503c\uff0c\u8fd9\u6837\u4f59\u4e0b\u7684\u4ee3\u7801\u5c31\u4e0d\u5fc5\u518d\u8d1f\u8d23\u4fdd\u5b58\u7ed3\u679c\u5e76\u53ef\u4ee5\u590d\u7528\u8be5\u503c\u3002\u4f60\u53ef\u80fd\u89c1\u8fc7\u8fd9\u79cd\u6a21\u5f0f\u88ab\u79f0 memoization \u6216 lazy evaluation \uff08\u60f0\u6027\u6c42\u503c\uff09\u3002 \u4e3a\u4e86\u8ba9\u7ed3\u6784\u4f53\u5b58\u653e\u95ed\u5305\uff0c\u6211\u4eec\u9700\u8981\u6307\u5b9a\u95ed\u5305\u7684\u7c7b\u578b\uff0c\u56e0\u4e3a\u7ed3\u6784\u4f53\u5b9a\u4e49\u9700\u8981\u77e5\u9053\u5176\u6bcf\u4e00\u4e2a\u5b57\u6bb5\u7684\u7c7b\u578b\u3002\u6bcf\u4e00\u4e2a\u95ed\u5305\u5b9e\u4f8b\u6709\u5176\u81ea\u5df1\u72ec\u6709\u7684\u533f\u540d\u7c7b\u578b\uff1a\u4e5f\u5c31\u662f\u8bf4\uff0c\u5373\u4fbf\u4e24\u4e2a\u95ed\u5305\u6709\u7740\u76f8\u540c\u7684\u7b7e\u540d\uff0c\u4ed6\u4eec\u7684\u7c7b\u578b\u4ecd\u7136\u53ef\u4ee5\u88ab\u8ba4\u4e3a\u662f\u4e0d\u540c\u3002\u4e3a\u4e86\u5b9a\u4e49\u4f7f\u7528\u95ed\u5305\u7684\u7ed3\u6784\u4f53\u3001\u679a\u4e3e\u6216\u51fd\u6570\u53c2\u6570\uff0c\u9700\u8981\u50cf\u7b2c\u5341\u7ae0\u8ba8\u8bba\u7684\u90a3\u6837\u4f7f\u7528\u6cdb\u578b\u548c trait bound \u3002 Fn \u7cfb\u5217 trait \u7531\u6807\u51c6\u5e93\u63d0\u4f9b\u3002\u6240\u6709\u7684\u95ed\u5305\u90fd\u5b9e\u73b0\u4e86 trait Fn \u3001 FnMut \u6216 FnOnce \u4e2d\u7684\u4e00\u4e2a\u3002\u5728 \u201c\u95ed\u5305\u4f1a\u6355\u83b7\u5176\u73af\u5883\u201d \u90e8\u5206\u6211\u4eec\u4f1a\u8ba8\u8bba\u8fd9\u4e9b trait \u7684\u533a\u522b\uff1b\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\u53ef\u4ee5\u4f7f\u7528 Fn trait \u3002 \u4e3a\u4e86\u6ee1\u8db3 Fn trait bound \u6211\u4eec\u589e\u52a0\u4e86\u4ee3\u8868\u95ed\u5305\u6240\u5fc5\u987b\u7684\u53c2\u6570\u548c\u8fd4\u56de\u503c\u7c7b\u578b\u7684\u7c7b\u578b\u3002\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u95ed\u5305\u6709\u4e00\u4e2a u32 \u7684\u53c2\u6570\u5e76\u8fd4\u56de\u4e00\u4e2a u32 \uff0c\u8fd9\u6837\u6240\u6307\u5b9a\u7684 trait bound \u5c31\u662f Fn(u32) -> u32 \u3002 \u793a\u4f8b\u5c55\u793a\u4e86\u5b58\u653e\u4e86\u95ed\u5305\u548c\u4e00\u4e2a Option \u7ed3\u679c\u503c\u7684 Cacher \u7ed3\u6784\u4f53\u7684\u5b9a\u4e49\uff1a // \u5b9a\u4e49\u4e00\u4e2a Cacher \u7ed3\u6784\u4f53\u6765\u5728 calculation \u4e2d\u5b58\u653e\u95ed\u5305\u5e76\u5728 value \u4e2d\u5b58\u653e Option \u503c struct Cacher < T > where T : Fn ( u32 ) -> u32 , { calculation : T , value : Option < u32 > , } \u7ed3\u6784\u4f53 Cacher \u6709\u4e00\u4e2a\u6cdb\u578b T \u7684\u5b57\u6bb5 calculation \u3002 T \u7684 trait bound \u6307\u5b9a\u4e86 T \u662f\u4e00\u4e2a\u4f7f\u7528 Fn \u7684\u95ed\u5305\u3002 \u4efb\u4f55\u6211\u4eec\u5e0c\u671b\u50a8\u5b58\u5230 Cacher \u5b9e\u4f8b\u7684 calculation \u5b57\u6bb5\u7684\u95ed\u5305\u5fc5\u987b\u6709\u4e00\u4e2a u32 \u53c2\u6570\uff08\u7531 Fn \u4e4b\u540e\u7684\u62ec\u53f7\u7684\u5185\u5bb9\u6307\u5b9a\uff09\u5e76\u5fc5\u987b\u8fd4\u56de\u4e00\u4e2a u32 \uff08\u7531 -> \u4e4b\u540e\u7684\u5185\u5bb9\uff09\u3002 \u6ce8\u610f \uff1a \u51fd\u6570\u4e5f\u90fd\u5b9e\u73b0\u4e86\u8fd9\u4e09\u4e2a Fn trait \u3002\u5982\u679c\u4e0d\u9700\u8981\u6355\u83b7\u73af\u5883\u4e2d\u7684\u503c\uff0c\u5219\u53ef\u4ee5\u4f7f\u7528\u5b9e\u73b0\u4e86 Fn trait \u7684\u51fd\u6570\u800c\u4e0d\u662f\u95ed\u5305\u3002 \u5b57\u6bb5 value \u662f Option<u32> \u7c7b\u578b\u7684\u3002\u5728\u6267\u884c\u95ed\u5305\u4e4b\u524d\uff0c value \u5c06\u662f None \u3002\u5982\u679c\u4f7f\u7528 Cacher \u7684\u4ee3\u7801\u8bf7\u6c42\u95ed\u5305\u7684\u7ed3\u679c\uff0c\u8fd9\u65f6\u4f1a\u6267\u884c\u95ed\u5305\u5e76\u5c06\u7ed3\u679c\u50a8\u5b58\u5728 value \u5b57\u6bb5\u7684 Some \u6210\u5458\u4e2d\u3002\u63a5\u7740\u5982\u679c\u4ee3\u7801\u518d\u6b21\u8bf7\u6c42\u95ed\u5305\u7684\u7ed3\u679c\uff0c\u8fd9\u65f6\u4e0d\u518d\u6267\u884c\u95ed\u5305\uff0c\u800c\u662f\u4f1a\u8fd4\u56de\u5b58\u653e\u5728 Some \u6210\u5458\u4e2d\u7684\u7ed3\u679c\u3002 \u521a\u624d\u8ba8\u8bba\u7684\u6709\u5173 value \u5b57\u6bb5\u903b\u8f91\u5b9a\u4e49\u4e8e\u793a\u4f8b\uff1a struct Cacher < T > where T : Fn ( u32 ) -> u32 , { calculation : T , value : Option < u32 > , } impl < T > Cacher < T > where T : Fn ( u32 ) -> u32 , { fn new ( calculation : T ) -> Cacher < T > { Cacher { calculation , value : None , } } fn value ( & mut self , arg : u32 ) -> u32 { match self . value { Some ( v ) => v , None => { let v = ( self . calculation )( arg ); self . value = Some ( v ); v } } } } Cacher \u7ed3\u6784\u4f53\u7684\u5b57\u6bb5\u662f\u79c1\u6709\u7684\uff0c\u56e0\u4e3a\u6211\u4eec\u5e0c\u671b Cacher \u7ba1\u7406\u8fd9\u4e9b\u503c\u800c\u4e0d\u662f\u4efb\u7531\u8c03\u7528\u4ee3\u7801\u6f5c\u5728\u7684\u76f4\u63a5\u6539\u53d8\u4ed6\u4eec\u3002 \u5f53\u8c03\u7528\u4ee3\u7801\u9700\u8981\u95ed\u5305\u7684\u6267\u884c\u7ed3\u679c\u65f6\uff0c\u4e0d\u540c\u4e8e\u76f4\u63a5\u8c03\u7528\u95ed\u5305\uff0c\u5b83\u4f1a\u8c03\u7528 value \u65b9\u6cd5\u3002 \u8fd9\u4e2a\u65b9\u6cd5\u4f1a\u68c0\u67e5 self.value \u662f\u5426\u5df2\u7ecf\u6709\u4e86\u4e00\u4e2a Some \u7684\u7ed3\u679c\u503c\uff1b \u5982\u679c\u6709\uff0c\u5b83\u8fd4\u56de Some \u4e2d\u7684\u503c\u5e76\u4e0d\u4f1a\u518d\u6b21\u6267\u884c\u95ed\u5305\u3002 \u5982\u679c self.value \u662f None \uff0c\u5219\u4f1a\u8c03\u7528 self.calculation \u4e2d\u50a8\u5b58\u7684\u95ed\u5305\uff0c\u5c06\u7ed3\u679c\u4fdd\u5b58\u5230 self.value \u4ee5\u4fbf\u5c06\u6765\u4f7f\u7528\uff0c\u5e76\u540c\u65f6\u8fd4\u56de\u7ed3\u679c\u503c\u3002 // snap... fn generate_workout ( intensity : u32 , random_number : u32 ) { let mut expensive_result = Cacher :: new ( | num | { println! ( \"\u6162\u6162\u8ba1\u7b97...\" ); thread :: sleep ( Duration :: from_secs ( 2 )); num }); if intensity < 25 { println! ( \"\u4eca\u5929, \u505a {} \u4e2a\u4fef\u5367\u6491!\" , expensive_result . value ( intensity )); println! ( \"\u4e0b\u4e00\u6b65\uff0c\u505a {} \u4e2a\u4ef0\u5367\u8d77\u5750\uff01\" , expensive_result . value ( intensity ) ); } else { if random_number == 3 { println! ( \"\u4eca\u5929\u4f11\u606f\u4e00\u4e0b\uff01 \u8bb0\u5f97\u4fdd\u6301\u6c34\u5206\uff01\" ) } else { println! ( \"\u4eca\u5929\uff0c\u8dd1 {} \u5206\u949f\uff01\" , expensive_result . value ( intensity )); } } } \u4e0d\u540c\u4e8e\u76f4\u63a5\u5c06\u95ed\u5305\u4fdd\u5b58\u8fdb\u4e00\u4e2a\u53d8\u91cf\uff0c\u6211\u4eec\u4fdd\u5b58\u4e00\u4e2a\u65b0\u7684 Cacher \u5b9e\u4f8b\u6765\u5b58\u653e\u95ed\u5305\u3002\u63a5\u7740\uff0c\u5728\u6bcf\u4e00\u4e2a\u9700\u8981\u7ed3\u679c\u7684\u5730\u65b9\uff0c\u8c03\u7528 Cacher \u5b9e\u4f8b\u7684 value \u65b9\u6cd5\u3002\u53ef\u4ee5\u8c03\u7528 value \u65b9\u6cd5\u4efb\u610f\u591a\u6b21\uff0c\u6216\u8005\u4e00\u6b21\u4e5f\u4e0d\u8c03\u7528\uff0c\u800c\u6162\u8ba1\u7b97\u6700\u591a\u53ea\u4f1a\u8fd0\u884c\u4e00\u6b21\u3002 Cacher \u5b9e\u73b0\u7684\u9650\u5236 \u503c\u7f13\u5b58\u662f\u4e00\u79cd\u66f4\u52a0\u5e7f\u6cdb\u7684\u5b9e\u7528\u884c\u4e3a\uff0c\u6211\u4eec\u53ef\u80fd\u5e0c\u671b\u5728\u4ee3\u7801\u4e2d\u7684\u5176\u4ed6\u95ed\u5305\u4e2d\u4e5f\u4f7f\u7528\u4ed6\u4eec\u3002\u7136\u800c\uff0c\u76ee\u524d Cacher \u7684\u5b9e\u73b0\u5b58\u5728\u4e24\u4e2a\u5c0f\u95ee\u9898\uff0c\u8fd9\u4f7f\u5f97\u5728\u4e0d\u540c\u4e0a\u4e0b\u6587\u4e2d\u590d\u7528\u53d8\u5f97\u5f88\u56f0\u96be\u3002 \u7b2c\u4e00\u4e2a\u95ee\u9898\u662f Cacher \u5b9e\u4f8b\u5047\u8bbe\u5bf9\u4e8e value \u65b9\u6cd5\u7684\u4efb\u4f55 arg \u53c2\u6570\u503c\u603b\u662f\u4f1a\u8fd4\u56de\u76f8\u540c\u7684\u503c\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u8fd9\u4e2a Cacher \u7684\u6d4b\u8bd5\u4f1a\u5931\u8d25\uff1a #[cfg(test)] mod tests { use super :: * ; #[test] fn call_with_different_values () { let mut c = Cacher :: new ( | a | a ); let v1 = c . value ( 1 ); let v2 = c . value ( 2 ); assert_eq! ( v2 , 2 ); } } \u8fd9\u4e2a\u6d4b\u8bd5\u4f7f\u7528\u8fd4\u56de\u4f20\u9012\u7ed9\u5b83\u7684\u503c\u7684\u95ed\u5305\u521b\u5efa\u4e86\u4e00\u4e2a\u65b0\u7684 Cacher \u5b9e\u4f8b\u3002\u4f7f\u7528\u4e3a 1 \u7684 arg \u548c\u4e3a 2 \u7684 arg \u8c03\u7528 Cacher \u5b9e\u4f8b\u7684 value \u65b9\u6cd5\uff0c\u540c\u65f6\u6211\u4eec\u671f\u671b\u4f7f\u7528\u4e3a 2 \u7684 arg \u8c03\u7528 value \u4f1a\u8fd4\u56de 2 \u3002 \u4f7f\u7528\u793a\u4f8b\u7684 Cacher \u5b9e\u73b0\u8fd0\u884c\u6d4b\u8bd5\uff0c\u5b83\u4f1a\u5728 assert_eq! \u5931\u8d25\u5e76\u663e\u793a\u5982\u4e0b\u4fe1\u606f\uff1a $ cargo test Compiling cacher v0.1.0 ( file:///projects/cacher ) Finished test [ unoptimized + debuginfo ] target ( s ) in 0 .72s Running unittests ( target/debug/deps/cacher-074d7c200c000afa ) running 1 test test tests::call_with_different_values ... FAILED failures: ---- tests::call_with_different_values stdout ---- thread 'main' panicked at 'assertion failed: `(left == right)` left: `1`, right: `2`' , src/lib.rs:43:9 note: run with ` RUST_BACKTRACE = 1 ` environment variable to display a backtrace failures: tests::call_with_different_values test result: FAILED. 0 passed ; 1 failed ; 0 ignored ; 0 measured ; 0 filtered out ; finished in 0 .00s error: test failed, to rerun pass '--lib' \u8fd9\u91cc\u7684\u95ee\u9898\u662f\u7b2c\u4e00\u6b21\u4f7f\u7528 1 \u8c03\u7528 c.value \uff0c Cacher \u5b9e\u4f8b\u5c06 Some(1) \u4fdd\u5b58\u8fdb self.value \u3002\u5728\u8fd9\u4e4b\u540e\uff0c\u65e0\u8bba\u4f20\u9012\u4ec0\u4e48\u503c\u8c03\u7528 value \uff0c\u5b83\u603b\u662f\u4f1a\u8fd4\u56de 1 \u3002 \u5c1d\u8bd5\u4fee\u6539 Cacher \u5b58\u653e\u4e00\u4e2a\u54c8\u5e0c map \u800c\u4e0d\u662f\u5355\u72ec\u4e00\u4e2a\u503c\u3002\u54c8\u5e0c map \u7684 key \u5c06\u662f\u4f20\u9012\u8fdb\u6765\u7684 arg \u503c\uff0c\u800c value \u5219\u662f\u5bf9\u5e94 key \u8c03\u7528\u95ed\u5305\u7684\u7ed3\u679c\u503c\u3002\u76f8\u6bd4\u4e4b\u524d\u68c0\u67e5 self.value \u76f4\u63a5\u662f Some \u8fd8\u662f None \u503c\uff0c\u73b0\u5728 value \u51fd\u6570\u4f1a\u5728\u54c8\u5e0c map \u4e2d\u5bfb\u627e arg \uff0c\u5982\u679c\u627e\u5230\u7684\u8bdd\u5c31\u8fd4\u56de\u5176\u5bf9\u5e94\u7684\u503c\u3002\u5982\u679c\u4e0d\u5b58\u5728\uff0c Cacher \u4f1a\u8c03\u7528\u95ed\u5305\u5e76\u5c06\u7ed3\u679c\u503c\u4fdd\u5b58\u5728\u54c8\u5e0c map \u5bf9\u5e94 arg \u503c\u7684\u4f4d\u7f6e\u3002 \u5f53\u524d Cacher \u5b9e\u73b0\u7684\u7b2c\u4e8c\u4e2a\u95ee\u9898\u662f\u5b83\u7684\u5e94\u7528\u88ab\u9650\u5236\u4e3a\u53ea\u63a5\u53d7\u83b7\u53d6\u4e00\u4e2a u32 \u503c\u5e76\u8fd4\u56de\u4e00\u4e2a u32 \u503c\u7684\u95ed\u5305\u3002\u6bd4\u5982\u8bf4\uff0c\u6211\u4eec\u53ef\u80fd\u9700\u8981\u80fd\u591f\u7f13\u5b58\u4e00\u4e2a\u83b7\u53d6\u5b57\u7b26\u4e32 slice \u5e76\u8fd4\u56de usize \u503c\u7684\u95ed\u5305\u7684\u7ed3\u679c\u3002\u8bf7\u5c1d\u8bd5\u5f15\u5165\u66f4\u591a\u6cdb\u578b\u53c2\u6570\u6765\u589e\u52a0 Cacher \u529f\u80fd\u7684\u7075\u6d3b\u6027\u3002 \u9488\u5bf9\u95ee\u98982\u7684\u5b8c\u5584 use std :: collections :: HashMap ; struct Cacher < T > where T : Fn ( u32 ) -> u32 , { calculation : T , map : HashMap < u32 , u32 > , // \u4f7f\u7528hash map \u5b58\u50a8 } impl < T > Cacher < T > where T : Fn ( u32 ) -> u32 , { fn new ( calculation : T ) -> Cacher < T > { Cacher { calculation , map : HashMap :: new (), } } fn value ( & mut self , arg : u32 ) -> u32 { let value = self . map . get ( & arg ); if let Some ( v ) = value { * v } else { let v = ( self . calculation )( arg ); self . map . insert ( arg , v ); v } } } // \u6d4b\u8bd5\u53ef\u4ee5\u901a\u8fc7 #[test] fn call_with_different_values () { let mut c = Cacher :: new ( | a | a ); let v1 = c . value ( 1 ); let v2 = c . value ( 2 ); assert_eq! ( v1 , 1 ); assert_eq! ( v2 , 2 ); } \u95ed\u5305\u4f1a\u6355\u83b7\u5176\u73af\u5883 \u95ed\u5305\u8fd8\u6709\u53e6\u4e00\u4e2a\u51fd\u6570\u6240\u6ca1\u6709\u7684\u529f\u80fd\uff1a \u4ed6\u4eec\u53ef\u4ee5\u6355\u83b7\u5176\u73af\u5883\u5e76\u8bbf\u95ee\u5176\u88ab\u5b9a\u4e49\u7684\u4f5c\u7528\u57df\u7684\u53d8\u91cf\u3002 fn main () { let x = 4 ; let equal_to_x = | z | z == x ; let y = 4 ; assert! ( equal_to_x ( y )); } \u8fd9\u91cc\uff0c\u5373\u4fbf x \u5e76\u4e0d\u662f equal_to_x \u7684\u4e00\u4e2a\u53c2\u6570\uff0c equal_to_x \u95ed\u5305\u4e5f\u88ab\u5141\u8bb8\u4f7f\u7528\u53d8\u91cf x \uff0c\u56e0\u4e3a\u5b83\u4e0e equal_to_x \u5b9a\u4e49\u4e8e\u76f8\u540c\u7684\u4f5c\u7528\u57df\u3002 \u5f53\u95ed\u5305\u4ece\u73af\u5883\u4e2d\u6355\u83b7\u4e00\u4e2a\u503c\uff0c\u95ed\u5305\u4f1a\u5728\u95ed\u5305\u4f53\u4e2d\u50a8\u5b58\u8fd9\u4e2a\u503c\u4ee5\u4f9b\u4f7f\u7528\u3002 \u8fd9\u4f1a\u4f7f\u7528\u5185\u5b58\u5e76\u4ea7\u751f\u989d\u5916\u7684\u5f00\u9500\uff0c\u5728\u66f4\u4e00\u822c\u7684\u573a\u666f\u4e2d\uff0c\u5f53\u6211\u4eec\u4e0d\u9700\u8981\u95ed\u5305\u6765\u6355\u83b7\u73af\u5883\u65f6\uff0c\u6211\u4eec\u4e0d\u5e0c\u671b\u4ea7\u751f\u8fd9\u4e9b\u5f00\u9500\u3002 \u56e0\u4e3a\u51fd\u6570\u4ece\u672a\u5141\u8bb8\u6355\u83b7\u73af\u5883\uff0c\u5b9a\u4e49\u548c\u4f7f\u7528\u51fd\u6570\u4e5f\u5c31\u4ece\u4e0d\u4f1a\u6709\u8fd9\u4e9b\u989d\u5916\u5f00\u9500\u3002 \u95ed\u5305\u53ef\u4ee5\u901a\u8fc7\u4e09\u79cd\u65b9\u5f0f\u6355\u83b7\u5176\u73af\u5883\uff0c\u4ed6\u4eec\u76f4\u63a5\u5bf9\u5e94\u51fd\u6570\u7684\u4e09\u79cd\u83b7\u53d6\u53c2\u6570\u7684\u65b9\u5f0f\uff1a \u83b7\u53d6\u6240\u6709\u6743 \uff0c \u53ef\u53d8\u501f\u7528 \u548c \u4e0d\u53ef\u53d8\u501f\u7528 \u3002 \u8fd9\u4e09\u79cd\u6355\u83b7\u503c\u7684\u65b9\u5f0f\u88ab\u7f16\u7801\u4e3a\u5982\u4e0b\u4e09\u4e2a Fn trait \uff1a FnOnce \u6d88\u8d39\u4ece\u5468\u56f4\u4f5c\u7528\u57df\u6355\u83b7\u7684\u53d8\u91cf\uff0c\u95ed\u5305\u5468\u56f4\u7684\u4f5c\u7528\u57df\u88ab\u79f0\u4e3a\u5176 \u73af\u5883 \uff0c environment \u3002\u4e3a\u4e86\u6d88\u8d39\u6355\u83b7\u5230\u7684\u53d8\u91cf\uff0c\u95ed\u5305\u5fc5\u987b\u83b7\u53d6\u5176\u6240\u6709\u6743\u5e76\u5728\u5b9a\u4e49\u95ed\u5305\u65f6\u5c06\u5176\u79fb\u52a8\u8fdb\u95ed\u5305\u3002\u5176\u540d\u79f0\u7684 Once \u90e8\u5206\u4ee3\u8868\u4e86\u95ed\u5305\u4e0d\u80fd\u591a\u6b21\u83b7\u53d6\u76f8\u540c\u53d8\u91cf\u7684\u6240\u6709\u6743\u7684\u4e8b\u5b9e\uff0c\u6240\u4ee5\u5b83\u53ea\u80fd\u88ab\u8c03\u7528\u4e00\u6b21\u3002 FnMut \u83b7\u53d6\u53ef\u53d8\u7684\u501f\u7528\u503c\u6240\u4ee5\u53ef\u4ee5\u6539\u53d8\u5176\u73af\u5883 Fn \u4ece\u5176\u73af\u5883\u83b7\u53d6\u4e0d\u53ef\u53d8\u7684\u501f\u7528\u503c \u5f53\u521b\u5efa\u4e00\u4e2a\u95ed\u5305\u65f6\uff0cRust \u6839\u636e\u5176\u5982\u4f55\u4f7f\u7528\u73af\u5883\u4e2d\u53d8\u91cf\u6765\u63a8\u65ad\u6211\u4eec\u5e0c\u671b\u5982\u4f55\u5f15\u7528\u73af\u5883\u3002 \u7531\u4e8e\u6240\u6709\u95ed\u5305\u90fd\u53ef\u4ee5\u88ab\u8c03\u7528\u81f3\u5c11\u4e00\u6b21\uff0c\u6240\u4ee5\u6240\u6709\u95ed\u5305\u90fd\u5b9e\u73b0\u4e86 FnOnce \u3002 \u90a3\u4e9b\u5e76\u6ca1\u6709\u79fb\u52a8\u88ab\u6355\u83b7\u53d8\u91cf\u7684\u6240\u6709\u6743\u5230\u95ed\u5305\u5185\u7684\u95ed\u5305\u4e5f\u5b9e\u73b0\u4e86 FnMut \uff0c\u800c\u4e0d\u9700\u8981\u5bf9\u88ab\u6355\u83b7\u7684\u53d8\u91cf\u8fdb\u884c\u53ef\u53d8\u8bbf\u95ee\u7684\u95ed\u5305\u5219\u4e5f\u5b9e\u73b0\u4e86 Fn \u3002 \u5728\u4e0a\u9762\u793a\u4f8b\u4e2d\uff0c equal_to_x \u95ed\u5305\u4e0d\u53ef\u53d8\u7684\u501f\u7528\u4e86 x \uff08\u6240\u4ee5 equal_to_x \u5177\u6709 Fn trait \uff09\uff0c\u56e0\u4e3a\u95ed\u5305\u4f53\u53ea\u9700\u8981\u8bfb\u53d6 x \u7684\u503c\u3002 \u5982\u679c\u5e0c\u671b\u5f3a\u5236\u95ed\u5305\u83b7\u53d6\u5176\u4f7f\u7528\u7684\u73af\u5883\u503c\u7684\u6240\u6709\u6743\uff0c\u53ef\u4ee5\u5728\u53c2\u6570\u5217\u8868\u524d\u4f7f\u7528 move \u5173\u952e\u5b57\u3002\u8fd9\u4e2a\u6280\u5de7\u5728\u5c06\u95ed\u5305\u4f20\u9012\u7ed9\u65b0\u7ebf\u7a0b\u4ee5\u4fbf\u5c06\u6570\u636e\u79fb\u52a8\u5230\u65b0\u7ebf\u7a0b\u4e2d\u65f6\u6700\u4e3a\u5b9e\u7528\u3002 \u6ce8\u610f \uff1a \u5373\u4f7f\u5176\u6355\u83b7\u7684\u503c\u5df2\u7ecf\u88ab\u79fb\u52a8\u4e86\uff0c move \u95ed\u5305\u4ecd\u9700\u8981\u5b9e\u73b0 Fn \u6216 FnMut \u3002\u8fd9\u662f\u56e0\u4e3a\u95ed\u5305\u6240\u5b9e\u73b0\u7684 trait \u662f\u7531\u95ed\u5305\u6240\u6355\u83b7\u4e86\u4ec0\u4e48\u503c\u800c\u4e0d\u662f\u5982\u4f55\u6355\u83b7\u6240\u51b3\u5b9a\u7684\u3002\u800c move \u5173\u952e\u5b57\u4ec5\u4ee3\u8868\u4e86\u540e\u8005\u3002 \u4fee\u6539\u4e86\u793a\u4f8b\u4e2d\u7684\u4ee3\u7801\uff08\u4f5c\u4e3a\u6f14\u793a\uff09\uff0c\u5728\u95ed\u5305\u5b9a\u4e49\u4e2d\u589e\u52a0 move \u5173\u952e\u5b57\u5e76\u4f7f\u7528 vector \u4ee3\u66ff\u6574\u578b\uff0c\u56e0\u4e3a\u6574\u578b\u53ef\u4ee5\u88ab\u62f7\u8d1d\u800c\u4e0d\u662f\u79fb\u52a8\uff1b\u6ce8\u610f\u8fd9\u4e9b\u4ee3\u7801\u8fd8\u4e0d\u80fd\u7f16\u8bd1\uff1a fn main () { let x = vec! [ 1 , 2 , 3 ]; let equal_to_x = move | z | z == x ; println! ( \"\u4e0d\u80fd\u5728\u8fd9\u513f\u4f7f\u7528 x: {:?}\" , x ); let y = vec! [ 1 , 2 , 3 ]; assert! ( equal_to_x ( y )); } \u8fd9\u4e2a\u4f8b\u5b50\u5e76\u4e0d\u80fd\u7f16\u8bd1\uff0c\u4f1a\u4ea7\u751f\u4ee5\u4e0b\u9519\u8bef\uff1a $ cargo run Compiling equal-to-x v0.1.0 ( file:///projects/equal-to-x ) error [ E0382 ] : borrow of moved value: ` x ` --> src/main.rs:6:40 | 2 | let x = vec! [ 1 , 2 , 3 ] ; | - move occurs because ` x ` has type ` Vec<i32> ` , which does not implement the ` Copy ` trait 3 | 4 | let equal_to_x = move | z | z == x ; | -------- - variable moved due to use in closure | | | value moved into closure here 5 | 6 | println! ( \"can't use x here: {:?}\" , x ) ; | ^ value borrowed here after move For more information about this error, try ` rustc --explain E0382 ` . error: could not compile ` equal-to-x ` due to previous error x \u88ab\u79fb\u52a8\u8fdb\u4e86\u95ed\u5305\uff0c\u56e0\u4e3a\u95ed\u5305\u4f7f\u7528 move \u5173\u952e\u5b57\u5b9a\u4e49\u3002\u63a5\u7740\u95ed\u5305\u83b7\u53d6\u4e86 x \u7684\u6240\u6709\u6743\uff0c\u540c\u65f6 main \u5c31\u4e0d\u518d\u5141\u8bb8\u5728 println! \u8bed\u53e5\u4e2d\u4f7f\u7528 x \u4e86\u3002\u53bb\u6389 println! \u5373\u53ef\u4fee\u590d\u95ee\u9898\u3002 \u5927\u90e8\u5206\u9700\u8981\u6307\u5b9a\u4e00\u4e2a Fn \u7cfb\u5217 trait bound \u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u4ece Fn \u5f00\u59cb\uff0c\u800c\u7f16\u8bd1\u5668\u4f1a\u6839\u636e\u95ed\u5305\u4f53\u4e2d\u7684\u60c5\u51b5\u544a\u8bc9\u4f60\u662f\u5426\u9700\u8981 FnMut \u6216 FnOnce \u3002 \u8fed\u4ee3\u5668 \u8fed\u4ee3\u5668 \uff08iterator\uff09\u8d1f\u8d23\u904d\u5386\u5e8f\u5217\u4e2d\u7684\u6bcf\u4e00\u9879\u548c\u51b3\u5b9a\u5e8f\u5217\u4f55\u65f6\u7ed3\u675f\u7684\u903b\u8f91\u3002\u5f53\u4f7f\u7528\u8fed\u4ee3\u5668\u65f6\uff0c\u6211\u4eec\u65e0\u9700\u91cd\u65b0\u5b9e\u73b0\u8fd9\u4e9b\u903b\u8f91\u3002 \u5728 Rust \u4e2d\uff0c\u8fed\u4ee3\u5668\u662f \u60f0\u6027\u7684 \uff08lazy\uff09\uff0c\u8fd9\u610f\u5473\u7740\u5728\u8c03\u7528\u65b9\u6cd5\u4f7f\u7528\u8fed\u4ee3\u5668\u4e4b\u524d\u5b83\u90fd\u4e0d\u4f1a\u6709\u6548\u679c\u3002\u4f8b\u5982\uff0c\u793a\u4f8b\u4ee3\u7801\u901a\u8fc7\u8c03\u7528\u5b9a\u4e49\u4e8e Vec \u4e0a\u7684 iter \u65b9\u6cd5\u5728\u4e00\u4e2a vector v1 \u4e0a\u521b\u5efa\u4e86\u4e00\u4e2a\u8fed\u4ee3\u5668\u3002\u8fd9\u6bb5\u4ee3\u7801\u672c\u8eab\u6ca1\u6709\u4efb\u4f55\u7528\u5904\uff1a let v1 = vec! [ 1 , 2 , 3 ]; let v1_iter = v1 . iter (); \u4e00\u65e6\u521b\u5efa\u8fed\u4ee3\u5668\u4e4b\u540e\uff0c\u53ef\u4ee5\u9009\u62e9\u7528\u591a\u79cd\u65b9\u5f0f\u5229\u7528\u5b83\u3002 \u8fed\u4ee3\u5668\u88ab\u50a8\u5b58\u5728 v1_iter \u53d8\u91cf\u4e2d\uff0c\u800c\u8fd9\u65f6\u6ca1\u6709\u8fdb\u884c\u8fed\u4ee3\u3002\u4e00\u65e6 for \u5faa\u73af\u5f00\u59cb\u4f7f\u7528 v1_iter \uff0c\u63a5\u7740\u8fed\u4ee3\u5668\u4e2d\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\u88ab\u7528\u4e8e\u5faa\u73af\u7684\u4e00\u6b21\u8fed\u4ee3\uff0c\u8fd9\u4f1a\u6253\u5370\u51fa\u5176\u6bcf\u4e00\u4e2a\u503c\uff1a fn main () { let v1 = vec! [ 1 , 2 , 3 ]; let v1_iter = v1 . iter (); for val in v1_iter { println! ( \"Got: {}\" , val ); } } \u5728\u6807\u51c6\u5e93\u4e2d\u6ca1\u6709\u63d0\u4f9b\u8fed\u4ee3\u5668\u7684\u8bed\u8a00\u4e2d\uff0c\u6211\u4eec\u53ef\u80fd\u4f1a\u4f7f\u7528\u4e00\u4e2a\u4ece 0 \u5f00\u59cb\u7684\u7d22\u5f15\u53d8\u91cf\uff0c\u4f7f\u7528\u8fd9\u4e2a\u53d8\u91cf\u7d22\u5f15 vector \u4e2d\u7684\u503c\uff0c\u5e76\u5faa\u73af\u589e\u52a0\u5176\u503c\u76f4\u5230\u8fbe\u5230 vector \u7684\u5143\u7d20\u6570\u91cf\u3002 \u8fed\u4ee3\u5668\u4e3a\u6211\u4eec\u5904\u7406\u4e86\u6240\u6709\u8fd9\u4e9b\u903b\u8f91\uff0c\u8fd9\u51cf\u5c11\u4e86\u91cd\u590d\u4ee3\u7801\u5e76\u6d88\u9664\u4e86\u6f5c\u5728\u7684\u6df7\u4e71\u3002\u53e6\u5916\uff0c\u8fed\u4ee3\u5668\u7684\u5b9e\u73b0\u65b9\u5f0f\u63d0\u4f9b\u4e86\u5bf9\u591a\u79cd\u4e0d\u540c\u7684\u5e8f\u5217\u4f7f\u7528\u76f8\u540c\u903b\u8f91\u7684\u7075\u6d3b\u6027\uff0c\u800c\u4e0d\u4ec5\u4ec5\u662f\u50cf vector \u8fd9\u6837\u53ef\u7d22\u5f15\u7684\u6570\u636e\u7ed3\u6784.\u8ba9\u6211\u4eec\u770b\u770b\u8fed\u4ee3\u5668\u662f\u5982\u4f55\u505a\u5230\u8fd9\u4e9b\u7684\u3002 Iterator trait \u548c next \u65b9\u6cd5 \u8fed\u4ee3\u5668\u90fd\u5b9e\u73b0\u4e86\u4e00\u4e2a\u53eb\u505a Iterator \u7684\u5b9a\u4e49\u4e8e\u6807\u51c6\u5e93\u7684 trait\u3002\u8fd9\u4e2a trait \u7684\u5b9a\u4e49\u770b\u8d77\u6765\u50cf\u8fd9\u6837\uff1a pub trait Iterator { type Item ; fn next ( & mut self ) -> Option < Self :: Item > ; // \u6b64\u5904\u7701\u7565\u4e86\u65b9\u6cd5\u7684\u9ed8\u8ba4\u5b9e\u73b0 } \u6ce8\u610f\u8fd9\u91cc\u6709\u4e00\u4e2a\u6211\u4eec\u8fd8\u672a\u8bb2\u5230\u7684\u65b0\u8bed\u6cd5\uff1a type Item \u548c Self::Item \uff0c\u4ed6\u4eec\u5b9a\u4e49\u4e86 trait \u7684 \u5173\u8054\u7c7b\u578b \uff08associated type\uff09\u3002 \u7b2c\u5341\u4e5d\u7ae0\u4f1a\u6df1\u5165\u8bb2\u89e3\u5173\u8054\u7c7b\u578b\uff0c\u4e0d\u8fc7\u73b0\u5728\u53ea\u9700\u77e5\u9053\u8fd9\u6bb5\u4ee3\u7801\u8868\u660e\u5b9e\u73b0 Iterator trait \u8981\u6c42\u540c\u65f6\u5b9a\u4e49\u4e00\u4e2a Item \u7c7b\u578b\uff0c\u8fd9\u4e2a Item \u7c7b\u578b\u88ab\u7528\u4f5c next \u65b9\u6cd5\u7684\u8fd4\u56de\u503c\u7c7b\u578b\u3002 \u6362\u53e5\u8bdd\u8bf4\uff0c Item \u7c7b\u578b\u5c06\u662f\u8fed\u4ee3\u5668\u8fd4\u56de\u5143\u7d20\u7684\u7c7b\u578b\u3002 next \u662f Iterator \u5b9e\u73b0\u8005\u88ab\u8981\u6c42\u5b9a\u4e49\u7684\u552f\u4e00\u65b9\u6cd5\u3002 next \u4e00\u6b21\u8fd4\u56de\u8fed\u4ee3\u5668\u4e2d\u7684\u4e00\u4e2a\u9879\uff0c\u5c01\u88c5\u5728 Some \u4e2d\uff0c\u5f53\u8fed\u4ee3\u5668\u7ed3\u675f\u65f6\uff0c\u5b83\u8fd4\u56de None \u3002 \u53ef\u4ee5\u76f4\u63a5\u8c03\u7528\u8fed\u4ee3\u5668\u7684 next \u65b9\u6cd5\uff1b\u793a\u4f8b\u6709\u4e00\u4e2a\u6d4b\u8bd5\u5c55\u793a\u4e86\u91cd\u590d\u8c03\u7528\u7531 vector \u521b\u5efa\u7684\u8fed\u4ee3\u5668\u7684 next \u65b9\u6cd5\u6240\u5f97\u5230\u7684\u503c\uff1a #[test] fn iterator_demonstration () { let v1 = vec! [ 1 , 2 , 3 ]; let mut v1_iter = v1 . iter (); assert_eq! ( v1_iter . next (), Some ( & 1 )); assert_eq! ( v1_iter . next (), Some ( & 2 )); assert_eq! ( v1_iter . next (), Some ( & 3 )); assert_eq! ( v1_iter . next (), None ); } \u6ce8\u610f v1_iter \u9700\u8981\u662f\u53ef\u53d8\u7684\uff1a\u5728\u8fed\u4ee3\u5668\u4e0a\u8c03\u7528 next \u65b9\u6cd5\u6539\u53d8\u4e86\u8fed\u4ee3\u5668\u4e2d\u7528\u6765\u8bb0\u5f55\u5e8f\u5217\u4f4d\u7f6e\u7684\u72b6\u6001\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u4ee3\u7801 \u6d88\u8d39 \uff08consume\uff09\u4e86\uff0c\u6216\u4f7f\u7528\u4e86\u8fed\u4ee3\u5668\u3002\u6bcf\u4e00\u4e2a next \u8c03\u7528\u90fd\u4f1a\u4ece\u8fed\u4ee3\u5668\u4e2d\u6d88\u8d39\u4e00\u4e2a\u9879\u3002\u4f7f\u7528 for \u5faa\u73af\u65f6\u65e0\u9700\u4f7f v1_iter \u53ef\u53d8\u56e0\u4e3a for \u5faa\u73af\u4f1a\u83b7\u53d6 v1_iter \u7684\u6240\u6709\u6743\u5e76\u5728\u540e\u53f0\u4f7f v1_iter \u53ef\u53d8\u3002 \u53e6\u5916\u9700\u8981\u6ce8\u610f\u5230\u4ece next \u8c03\u7528\u4e2d\u5f97\u5230\u7684\u503c\u662f vector \u7684\u4e0d\u53ef\u53d8\u5f15\u7528\u3002 iter \u65b9\u6cd5\u751f\u6210\u4e00\u4e2a\u4e0d\u53ef\u53d8\u5f15\u7528\u7684\u8fed\u4ee3\u5668\u3002\u5982\u679c\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u83b7\u53d6 v1 \u6240\u6709\u6743\u5e76\u8fd4\u56de\u62e5\u6709\u6240\u6709\u6743\u7684\u8fed\u4ee3\u5668\uff0c\u5219\u53ef\u4ee5\u8c03\u7528 into_iter \u800c\u4e0d\u662f iter \u3002\u7c7b\u4f3c\u7684\uff0c\u5982\u679c\u6211\u4eec\u5e0c\u671b\u8fed\u4ee3\u53ef\u53d8\u5f15\u7528\uff0c\u5219\u53ef\u4ee5\u8c03\u7528 iter_mut \u800c\u4e0d\u662f iter \u3002 \u6d88\u8d39\u8fed\u4ee3\u5668\u7684\u65b9\u6cd5 Iterator trait \u6709\u4e00\u7cfb\u5217\u4e0d\u540c\u7684\u7531\u6807\u51c6\u5e93\u63d0\u4f9b\u9ed8\u8ba4\u5b9e\u73b0\u7684\u65b9\u6cd5\uff1b\u4f60\u53ef\u4ee5\u5728 Iterator trait \u7684 \u6807\u51c6\u5e93 API \u6587\u6863\u4e2d\u627e\u5230\u6240\u6709\u8fd9\u4e9b\u65b9\u6cd5\u3002\u4e00\u4e9b\u65b9\u6cd5\u5728\u5176\u5b9a\u4e49\u4e2d\u8c03\u7528\u4e86 next \u65b9\u6cd5\uff0c\u8fd9\u4e5f\u5c31\u662f\u4e3a\u4ec0\u4e48\u5728\u5b9e\u73b0 Iterator trait \u65f6\u8981\u6c42\u5b9e\u73b0 next \u65b9\u6cd5\u7684\u539f\u56e0\u3002 \u8fd9\u4e9b\u8c03\u7528 next \u65b9\u6cd5\u7684\u65b9\u6cd5\u88ab\u79f0\u4e3a \u6d88\u8d39\u9002\u914d\u5668 \uff08consuming adaptors\uff09\uff0c\u56e0\u4e3a\u8c03\u7528\u4ed6\u4eec\u4f1a\u6d88\u8017\u8fed\u4ee3\u5668\u3002\u4e00\u4e2a\u6d88\u8d39\u9002\u914d\u5668\u7684\u4f8b\u5b50\u662f sum \u65b9\u6cd5\u3002\u8fd9\u4e2a\u65b9\u6cd5\u83b7\u53d6\u8fed\u4ee3\u5668\u7684\u6240\u6709\u6743\u5e76\u53cd\u590d\u8c03\u7528 next \u6765\u904d\u5386\u8fed\u4ee3\u5668\uff0c\u56e0\u800c\u4f1a\u6d88\u8d39\u8fed\u4ee3\u5668\u3002\u5f53\u5176\u904d\u5386\u6bcf\u4e00\u4e2a\u9879\u65f6\uff0c\u5b83\u5c06\u6bcf\u4e00\u4e2a\u9879\u52a0\u603b\u5230\u4e00\u4e2a\u603b\u548c\u5e76\u5728\u8fed\u4ee3\u5b8c\u6210\u65f6\u8fd4\u56de\u603b\u548c\u3002 \u793a\u4f8b\u6709\u4e00\u4e2a\u5c55\u793a sum \u65b9\u6cd5\u4f7f\u7528\u7684\u6d4b\u8bd5\uff1a // \u8c03\u7528 sum \u65b9\u6cd5\u83b7\u53d6\u8fed\u4ee3\u5668\u6240\u6709\u9879\u7684\u603b\u548c #[test] fn iterator_sum () { let v1 = vec! [ 1 , 2 , 3 ]; let v1_iter = v1 . iter (); let total : i32 = v1_iter . sum (); assert_eq! ( total , 6 ); } \u8c03\u7528 sum \u4e4b\u540e\u4e0d\u518d\u5141\u8bb8\u4f7f\u7528 v1_iter \u56e0\u4e3a\u8c03\u7528 sum \u65f6\u5b83\u4f1a\u83b7\u53d6\u8fed\u4ee3\u5668\u7684\u6240\u6709\u6743\u3002 \u4ea7\u751f\u5176\u4ed6\u8fed\u4ee3\u5668\u7684\u65b9\u6cd5 Iterator trait \u4e2d\u5b9a\u4e49\u4e86\u53e6\u4e00\u7c7b\u65b9\u6cd5\uff0c\u88ab\u79f0\u4e3a \u8fed\u4ee3\u5668\u9002\u914d\u5668 \uff08iterator adaptors\uff09\uff0c \u4ed6\u4eec\u5141\u8bb8\u6211\u4eec\u5c06\u5f53\u524d\u8fed\u4ee3\u5668\u53d8\u4e3a\u4e0d\u540c\u7c7b\u578b\u7684\u8fed\u4ee3\u5668\u3002\u53ef\u4ee5\u94fe\u5f0f\u8c03\u7528\u591a\u4e2a\u8fed\u4ee3\u5668\u9002\u914d\u5668\u3002\u4e0d\u8fc7\u56e0\u4e3a\u6240\u6709\u7684\u8fed\u4ee3\u5668\u90fd\u662f\u60f0\u6027\u7684\uff0c\u5fc5\u987b\u8c03\u7528\u4e00\u4e2a\u6d88\u8d39\u9002\u914d\u5668\u65b9\u6cd5\u4ee5\u4fbf\u83b7\u53d6\u8fed\u4ee3\u5668\u9002\u914d\u5668\u8c03\u7528\u7684\u7ed3\u679c\u3002 \u793a\u4f8b\u5c55\u793a\u4e86\u4e00\u4e2a\u8c03\u7528\u8fed\u4ee3\u5668\u9002\u914d\u5668\u65b9\u6cd5 map \u7684\u4f8b\u5b50\uff0c\u8be5 map \u65b9\u6cd5\u4f7f\u7528\u95ed\u5305\u6765\u8c03\u7528\u6bcf\u4e2a\u5143\u7d20\u4ee5\u751f\u6210\u65b0\u7684\u8fed\u4ee3\u5668\u3002 \u8fd9\u91cc\u7684\u95ed\u5305\u521b\u5efa\u4e86\u4e00\u4e2a\u65b0\u7684\u8fed\u4ee3\u5668\uff0c\u5bf9\u5176\u4e2d vector \u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u90fd\u88ab\u52a0 1 \u3002\u4e0d\u8fc7\u8fd9\u4e9b\u4ee3\u7801\u4f1a\u4ea7\u751f\u4e00\u4e2a\u8b66\u544a\uff1a // \u8c03\u7528\u8fed\u4ee3\u5668\u9002\u914d\u5668 map \u6765\u521b\u5efa\u4e00\u4e2a\u65b0\u8fed\u4ee3\u5668 fn main () { let v1 : Vec < i32 > = vec! [ 1 , 2 , 3 ]; v1 . iter (). map ( | x | x + 1 ); } \u5f97\u5230\u7684\u8b66\u544a\u662f\uff1a $ cargo run Compiling iterators v0.1.0 ( file:///projects/iterators ) warning: unused ` Map ` that must be used --> src/main.rs:4:5 | 4 | v1.iter () .map ( | x | x + 1 ) ; | ^^^^^^^^^^^^^^^^^^^^^^^^^ | = note: ` #[warn(unused_must_use)]` on by default = note: iterators are lazy and do nothing unless consumed warning: ` iterators ` ( bin \"iterators\" ) generated 1 warning Finished dev [ unoptimized + debuginfo ] target ( s ) in 0 .47s Running ` target/debug/iterators ` \u793a\u4f8b\u4e2d\u7684\u4ee3\u7801\u5b9e\u9645\u4e0a\u5e76\u6ca1\u6709\u505a\u4efb\u4f55\u4e8b\uff1b\u6240\u6307\u5b9a\u7684\u95ed\u5305\u4ece\u672a\u88ab\u8c03\u7528\u8fc7\u3002\u8b66\u544a\u63d0\u9192\u4e86\u6211\u4eec\u4e3a\u4ec0\u4e48\uff1a \u8fed\u4ee3\u5668\u9002\u914d\u5668\u662f\u60f0\u6027\u7684\uff0c\u800c\u8fd9\u91cc\u6211\u4eec\u9700\u8981\u6d88\u8d39\u8fed\u4ee3\u5668\u3002 \u4e3a\u4e86\u4fee\u590d\u8fd9\u4e2a\u8b66\u544a\u5e76\u6d88\u8d39\u8fed\u4ee3\u5668\u83b7\u53d6\u6709\u7528\u7684\u7ed3\u679c\uff0c\u6211\u4eec\u5c06\u4f7f\u7528\u7b2c\u5341\u4e8c\u7ae0\u793a\u4f8b\u7ed3\u5408 env::args \u4f7f\u7528\u7684 collect \u65b9\u6cd5\u3002\u8fd9\u4e2a\u65b9\u6cd5\u6d88\u8d39\u8fed\u4ee3\u5668\u5e76\u5c06\u7ed3\u679c\u6536\u96c6\u5230\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\u4e2d\u3002 \u5728\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5c06\u904d\u5386\u7531 map \u8c03\u7528\u751f\u6210\u7684\u8fed\u4ee3\u5668\u7684\u7ed3\u679c\u6536\u96c6\u5230\u4e00\u4e2a vector \u4e2d\uff0c\u5b83\u5c06\u4f1a\u542b\u6709\u539f\u59cb vector \u4e2d\u6bcf\u4e2a\u5143\u7d20\u52a0 1 \u7684\u7ed3\u679c\uff1a // \u8c03\u7528 map \u65b9\u6cd5\u521b\u5efa\u4e00\u4e2a\u65b0\u8fed\u4ee3\u5668\uff0c\u63a5\u7740\u8c03\u7528 collect \u65b9\u6cd5\u6d88\u8d39\u65b0\u8fed\u4ee3\u5668\u5e76\u521b\u5efa\u4e00\u4e2a vector let v1 : Vec < i32 > = vec! [ 1 , 2 , 3 ]; let v2 : Vec < _ > = v1 . iter (). map ( | x | x + 1 ). collect (); // \u6d88\u8d39\u751f\u6210\u7684\u8fed\u4ee3\u5668 assert_eq! ( v2 , vec! [ 2 , 3 , 4 ]); \u56e0\u4e3a map \u83b7\u53d6\u4e00\u4e2a\u95ed\u5305\uff0c\u53ef\u4ee5\u6307\u5b9a\u4efb\u4f55\u5e0c\u671b\u5728\u904d\u5386\u7684\u6bcf\u4e2a\u5143\u7d20\u4e0a\u6267\u884c\u7684\u64cd\u4f5c\u3002\u8fd9\u662f\u4e00\u4e2a\u5c55\u793a\u5982\u4f55\u4f7f\u7528\u95ed\u5305\u6765\u81ea\u5b9a\u4e49\u884c\u4e3a\u540c\u65f6\u53c8\u590d\u7528 Iterator trait \u63d0\u4f9b\u7684\u8fed\u4ee3\u884c\u4e3a\u7684\u7edd\u4f73\u4f8b\u5b50\u3002 \u4f7f\u7528\u95ed\u5305\u83b7\u53d6\u73af\u5883 \u73b0\u5728\u6211\u4eec\u4ecb\u7ecd\u4e86\u8fed\u4ee3\u5668\uff0c\u8ba9\u6211\u4eec\u5c55\u793a\u4e00\u4e2a\u901a\u8fc7\u4f7f\u7528 filter \u8fed\u4ee3\u5668\u9002\u914d\u5668\u548c\u6355\u83b7\u73af\u5883\u7684\u95ed\u5305\u7684\u5e38\u89c4\u7528\u4f8b\u3002\u8fed\u4ee3\u5668\u7684 filter \u65b9\u6cd5\u83b7\u53d6\u4e00\u4e2a\u4f7f\u7528\u8fed\u4ee3\u5668\u7684\u6bcf\u4e00\u4e2a\u9879\u5e76\u8fd4\u56de\u5e03\u5c14\u503c\u7684\u95ed\u5305\u3002\u5982\u679c\u95ed\u5305\u8fd4\u56de true \uff0c\u5176\u503c\u5c06\u4f1a\u5305\u542b\u5728 filter \u63d0\u4f9b\u7684\u65b0\u8fed\u4ee3\u5668\u4e2d\u3002\u5982\u679c\u95ed\u5305\u8fd4\u56de false \uff0c\u5176\u503c\u4e0d\u4f1a\u5305\u542b\u5728\u7ed3\u679c\u8fed\u4ee3\u5668\u4e2d\u3002 \u793a\u4f8b\u5c55\u793a\u4e86\u4f7f\u7528 filter \u548c\u4e00\u4e2a\u6355\u83b7\u73af\u5883\u4e2d\u53d8\u91cf shoe_size \u7684\u95ed\u5305\uff0c\u8fd9\u6837\u95ed\u5305\u5c31\u53ef\u4ee5\u904d\u5386\u4e00\u4e2a Shoe \u7ed3\u6784\u4f53\u96c6\u5408\u4ee5\u4fbf\u53ea\u8fd4\u56de\u6307\u5b9a\u5927\u5c0f\u7684\u978b\u5b50\uff1a // \u4f7f\u7528 filter \u65b9\u6cd5\u548c\u4e00\u4e2a\u6355\u83b7 shoe_size \u7684\u95ed\u5305 #[derive(PartialEq, Debug)] struct Shoe { size : u32 , style : String , } fn shoes_in_size ( shoes : Vec < Shoe > , shoe_size : u32 ) -> Vec < Shoe > { shoes . into_iter (). filter ( | s | s . size == shoe_size ). collect () } #[cfg(test)] mod tests { use super :: * ; #[test] fn filters_by_size () { let shoes = vec! [ Shoe { size : 10 , style : String :: from ( \"sneaker\" ), }, Shoe { size : 13 , style : String :: from ( \"sandal\" ), }, Shoe { size : 10 , style : String :: from ( \"boot\" ), }, ]; let in_my_size = shoes_in_size ( shoes , 10 ); assert_eq! ( in_my_size , vec! [ Shoe { size : 10 , style : String :: from ( \"sneaker\" ) }, Shoe { size : 10 , style : String :: from ( \"boot\" ) }, ] ); } } shoes_in_my_size \u51fd\u6570\u83b7\u53d6\u4e00\u4e2a\u978b\u5b50 vector \u7684\u6240\u6709\u6743\u548c\u4e00\u4e2a\u978b\u5b50\u5927\u5c0f\u4f5c\u4e3a\u53c2\u6570\u3002\u5b83\u8fd4\u56de\u4e00\u4e2a\u53ea\u5305\u542b\u6307\u5b9a\u5927\u5c0f\u978b\u5b50\u7684 vector \u3002 shoes_in_my_size \u51fd\u6570\u4f53\u4e2d\u8c03\u7528\u4e86 into_iter \u6765\u521b\u5efa\u4e00\u4e2a\u83b7\u53d6 vector \u6240\u6709\u6743\u7684\u8fed\u4ee3\u5668\u3002\u63a5\u7740\u8c03\u7528 filter \u5c06\u8fd9\u4e2a\u8fed\u4ee3\u5668\u9002\u914d\u6210\u4e00\u4e2a\u53ea\u542b\u6709\u90a3\u4e9b\u95ed\u5305\u8fd4\u56de true \u7684\u5143\u7d20\u7684\u65b0\u8fed\u4ee3\u5668\u3002 \u95ed\u5305\u4ece\u73af\u5883\u4e2d\u6355\u83b7\u4e86 shoe_size \u53d8\u91cf\u5e76\u4f7f\u7528\u5176\u503c\u4e0e\u6bcf\u4e00\u53ea\u978b\u7684\u5927\u5c0f\u4f5c\u6bd4\u8f83\uff0c\u53ea\u4fdd\u7559\u6307\u5b9a\u5927\u5c0f\u7684\u978b\u5b50\u3002\u6700\u7ec8\uff0c\u8c03\u7528 collect \u5c06\u8fed\u4ee3\u5668\u9002\u914d\u5668\u8fd4\u56de\u7684\u503c\u6536\u96c6\u8fdb\u4e00\u4e2a vector \u5e76\u8fd4\u56de\u3002 \u8fd9\u4e2a\u6d4b\u8bd5\u5c55\u793a\u5f53\u8c03\u7528 shoes_in_my_size \u65f6\uff0c\u6211\u4eec\u53ea\u4f1a\u5f97\u5230\u4e0e\u6307\u5b9a\u503c\u76f8\u540c\u5927\u5c0f\u7684\u978b\u5b50\u3002 \u5b9e\u73b0 Iterator trait \u6765\u521b\u5efa\u81ea\u5b9a\u4e49\u8fed\u4ee3\u5668 \u5df2\u7ecf\u5c55\u793a\u4e86\u53ef\u4ee5\u901a\u8fc7\u5728 vector \u4e0a\u8c03\u7528 iter \u3001 into_iter \u6216 iter_mut \u6765\u521b\u5efa\u4e00\u4e2a\u8fed\u4ee3\u5668\u3002\u4e5f\u53ef\u4ee5\u7528\u6807\u51c6\u5e93\u4e2d\u5176\u4ed6\u7684\u96c6\u5408\u7c7b\u578b\u521b\u5efa\u8fed\u4ee3\u5668\uff0c\u6bd4\u5982 \u54c8\u5e0c map \u3002\u53e6\u5916\uff0c\u53ef\u4ee5\u5b9e\u73b0 Iterator trait \u6765\u521b\u5efa\u4efb\u4f55\u6211\u4eec\u5e0c\u671b\u7684\u8fed\u4ee3\u5668\u3002\u6b63\u5982\u4e4b\u524d\u63d0\u5230\u7684\uff0c\u5b9a\u4e49\u4e2d\u552f\u4e00\u8981\u6c42\u63d0\u4f9b\u7684\u65b9\u6cd5\u5c31\u662f next \u65b9\u6cd5\u3002\u4e00\u65e6\u5b9a\u4e49\u4e86\u5b83\uff0c\u5c31\u53ef\u4ee5\u4f7f\u7528\u6240\u6709\u5176\u4ed6\u7531 Iterator trait \u63d0\u4f9b\u7684\u62e5\u6709\u9ed8\u8ba4\u5b9e\u73b0\u7684\u65b9\u6cd5\u6765\u521b\u5efa\u81ea\u5b9a\u4e49\u8fed\u4ee3\u5668\u4e86\uff01 \u4f5c\u4e3a\u5c55\u793a\uff0c\u8ba9\u6211\u4eec\u521b\u5efa\u4e00\u4e2a\u53ea\u4f1a\u4ece 1 \u6570\u5230 5 \u7684\u8fed\u4ee3\u5668\u3002\u9996\u5148\uff0c\u521b\u5efa\u4e00\u4e2a\u7ed3\u6784\u4f53\u6765\u5b58\u653e\u4e00\u4e9b\u503c\uff0c\u63a5\u7740\u5b9e\u73b0 Iterator trait \u5c06\u8fd9\u4e2a\u7ed3\u6784\u4f53\u653e\u5165\u8fed\u4ee3\u5668\u4e2d\u5e76\u5728\u6b64\u5b9e\u73b0\u4e2d\u4f7f\u7528\u5176\u503c\u3002 \u793a\u4f8b\u6709\u4e00\u4e2a Counter \u7ed3\u6784\u4f53\u5b9a\u4e49\u548c\u4e00\u4e2a\u521b\u5efa Counter \u5b9e\u4f8b\u7684\u5173\u8054\u51fd\u6570 new \uff1a // \u5b9a\u4e49 Counter \u7ed3\u6784\u4f53\u548c\u4e00\u4e2a\u521b\u5efa count \u521d\u503c\u4e3a 0 \u7684 Counter \u5b9e\u4f8b\u7684 new \u51fd\u6570 struct Counter { count : u32 , } impl Counter { fn new () -> Counter { Counter { count : 0 } } } \u63a5\u4e0b\u6765\u5c06\u4e3a Counter \u7c7b\u578b\u5b9e\u73b0 Iterator trait \uff0c\u901a\u8fc7\u5b9a\u4e49 next \u65b9\u6cd5\u6765\u6307\u5b9a\u4f7f\u7528\u8fed\u4ee3\u5668\u65f6\u7684\u884c\u4e3a\uff0c\u5982\u4e0b\u6240\u793a\uff1a // \u5728 Counter \u7ed3\u6784\u4f53\u4e0a\u5b9e\u73b0 Iterator trait impl Iterator for Counter { type Item = u32 ; // \u8fd9\u91cc\u5c06\u8fed\u4ee3\u5668\u7684\u5173\u8054\u7c7b\u578b Item \u8bbe\u7f6e\u4e3a u32\uff0c\u610f\u5473\u7740\u8fed\u4ee3\u5668\u4f1a\u8fd4\u56de u32 \u503c\u96c6\u5408\u3002 fn next ( & mut self ) -> Option < Self :: Item > { // \u5e0c\u671b\u8fed\u4ee3\u5668\u5bf9\u5176\u5185\u90e8\u72b6\u6001\u52a0\u4e00\uff0c\u8fd9\u4e5f\u5c31\u662f\u4e3a\u4f55\u5c06 count \u521d\u59cb\u5316\u4e3a 0\uff1a // \u6211\u4eec\u5e0c\u671b\u8fed\u4ee3\u5668\u9996\u5148\u8fd4\u56de 1\u3002 // \u5982\u679c count \u503c\u5c0f\u4e8e 6\uff0cnext \u4f1a\u8fd4\u56de\u5c01\u88c5\u5728 Some \u4e2d\u7684\u5f53\u524d\u503c\uff0c // \u4e0d\u8fc7\u5982\u679c count \u5927\u4e8e\u6216\u7b49\u4e8e 6\uff0c\u8fed\u4ee3\u5668\u4f1a\u8fd4\u56de None\u3002 if self . count < 5 { self . count += 1 ; Some ( self . count ) } else { None } } } \u4f7f\u7528 Counter \u8fed\u4ee3\u5668\u7684 next \u65b9\u6cd5 \u4e00\u65e6\u5b9e\u73b0\u4e86 Iterator trait \uff0c\u6211\u4eec\u5c31\u6709\u4e86\u4e00\u4e2a\u8fed\u4ee3\u5668\uff01\u4e0b\u9762\u793a\u4f8b\u5c55\u793a\u4e86\u4e00\u4e2a\u6d4b\u8bd5\u7528\u6765\u6f14\u793a\u4f7f\u7528 Counter \u7ed3\u6784\u4f53\u7684\u8fed\u4ee3\u5668\u529f\u80fd\uff0c\u901a\u8fc7\u76f4\u63a5\u8c03\u7528 next \u65b9\u6cd5\uff0c\u6b63\u5982\u4ece vector \u521b\u5efa\u7684\u8fed\u4ee3\u5668\u90a3\u6837\uff1a #[test] fn calling_next_directly () { let mut counter = Counter :: new (); assert_eq! ( counter . next (), Some ( 1 )); assert_eq! ( counter . next (), Some ( 2 )); assert_eq! ( counter . next (), Some ( 3 )); assert_eq! ( counter . next (), Some ( 4 )); assert_eq! ( counter . next (), Some ( 5 )); assert_eq! ( counter . next (), None ); } \u4f7f\u7528\u81ea\u5b9a\u4e49\u8fed\u4ee3\u5668\u4e2d\u5176\u4ed6 Iterator trait \u65b9\u6cd5 \u901a\u8fc7\u5b9a\u4e49 next \u65b9\u6cd5\u5b9e\u73b0 Iterator trait \uff0c\u6211\u4eec\u73b0\u5728\u5c31\u53ef\u4ee5\u4f7f\u7528\u4efb\u4f55\u6807\u51c6\u5e93\u5b9a\u4e49\u7684\u62e5\u6709\u9ed8\u8ba4\u5b9e\u73b0\u7684 Iterator trait \u65b9\u6cd5\u4e86\uff0c\u56e0\u4e3a\u4ed6\u4eec\u90fd\u4f7f\u7528\u4e86 next \u65b9\u6cd5\u7684\u529f\u80fd\u3002 \u4f8b\u5982\uff0c\u51fa\u4e8e\u67d0\u79cd\u539f\u56e0\u6211\u4eec\u5e0c\u671b\u83b7\u53d6 Counter \u5b9e\u4f8b\u4ea7\u751f\u7684\u503c\uff0c\u5c06\u8fd9\u4e9b\u503c\u4e0e\u53e6\u4e00\u4e2a Counter \u5b9e\u4f8b\u5728\u7701\u7565\u4e86\u7b2c\u4e00\u4e2a\u503c\u4e4b\u540e\u4ea7\u751f\u7684\u503c\u914d\u5bf9\uff0c\u5c06\u6bcf\u4e00\u5bf9\u503c\u76f8\u4e58\uff0c\u53ea\u4fdd\u7559\u90a3\u4e9b\u53ef\u4ee5\u88ab\u4e09\u6574\u9664\u7684\u7ed3\u679c\uff0c\u7136\u540e\u5c06\u6240\u6709\u4fdd\u7559\u7684\u7ed3\u679c\u76f8\u52a0\uff0c\u8fd9\u53ef\u4ee5\u5982\u4e0b\u793a\u4f8b\u4e2d\u7684\u6d4b\u8bd5\u8fd9\u6837\u505a\uff1a // \u4f7f\u7528\u81ea\u5b9a\u4e49\u7684 Counter \u8fed\u4ee3\u5668\u7684\u591a\u79cd\u65b9\u6cd5 #[test] fn using_other_iterator_trait_methods () { let sum : u32 = Counter :: new () . zip ( Counter :: new (). skip ( 1 )) . map ( | ( a , b ) | a * b ) . filter ( | x | x % 3 == 0 ) . sum (); assert_eq! ( 18 , sum ); } \u6ce8\u610f zip \u53ea\u4ea7\u751f\u56db\u5bf9\u503c\uff1b\u7406\u8bba\u4e0a\u7b2c\u4e94\u5bf9\u503c (5, None) \u4ece\u672a\u88ab\u4ea7\u751f\uff0c\u56e0\u4e3a zip \u5728\u4efb\u4e00\u8f93\u5165\u8fed\u4ee3\u5668\u8fd4\u56de None \u65f6\u4e5f\u8fd4\u56de None \u3002 \u6240\u6709\u8fd9\u4e9b\u65b9\u6cd5\u8c03\u7528\u90fd\u662f\u53ef\u80fd\u7684\uff0c\u56e0\u4e3a\u6211\u4eec\u6307\u5b9a\u4e86 next \u65b9\u6cd5\u5982\u4f55\u5de5\u4f5c\uff0c\u800c\u6807\u51c6\u5e93\u5219\u63d0\u4f9b\u4e86\u5176\u5b83\u8c03\u7528 next \u7684\u65b9\u6cd5\u7684\u9ed8\u8ba4\u5b9e\u73b0\u3002 \u81ea\u5b9a\u4e49\u7684\u4e00\u4e2a\u5b9e\u73b0 \u8df3\u8fc7\u6307\u5b9a\u7684 value \u7684\u5b9e\u73b0\u3002 struct Counter { count : u32 , skip_value : Option < u32 > , } impl Counter { fn new () -> Counter { Counter { count : 0 , skip_value : None , } } fn skip_value ( & mut self , skip : u32 ) { self . skip_value = Some ( skip ); } } impl Iterator for Counter { type Item = u32 ; fn next ( & mut self ) -> Option < Self :: Item > { if self . count < 5 { self . count += 1 ; if let Some ( skip_value ) = self . skip_value { if self . count == skip_value { self . count += 1 ; if self . count > 5 { return None ; } } } Some ( self . count ) } else { None } } } #[test] fn using_other_iterator_trait_methods () { let sum : u32 = Counter :: new () . zip ( Counter :: new (). skip ( 1 )) . map ( | ( a , b ) | a * b ) . filter ( | x | x % 3 == 0 ) . sum (); assert_eq! ( 18 , sum ); } #[test] fn skip_special_value () { let mut counter = Counter :: new (); counter . skip_value ( 5 ); let sum : u32 = counter . sum (); assert_eq! ( 1 + 2 + 3 + 4 , sum ); } \u8fd9\u6bb5\u5b9e\u73b0\u4f1a\u8df3\u8fc7\u6307\u5b9a\u7684 value \u3002 \u6539\u8fdbI/O\u9879\u76ee \u6709\u4e86\u8fd9\u4e9b\u5173\u4e8e\u8fed\u4ee3\u5668\u7684\u65b0\u77e5\u8bc6\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u8fed\u4ee3\u5668\u6765\u6539\u8fdb\u7b2c\u5341\u4e8c\u7ae0\u4e2d I/O \u9879\u76ee\u7684\u5b9e\u73b0\u6765\u4f7f\u5f97\u4ee3\u7801\u66f4\u7b80\u6d01\u660e\u4e86\u3002\u8ba9\u6211\u4eec\u770b\u770b\u8fed\u4ee3\u5668\u5982\u4f55\u80fd\u591f\u6539\u8fdb Config::new \u51fd\u6570\u548c search \u51fd\u6570\u7684\u5b9e\u73b0\u3002 \u4f7f\u7528\u8fed\u4ee3\u5668\u5e76\u53bb\u6389 clone \u5728\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u589e\u52a0\u4e86\u4e00\u4e9b\u4ee3\u7801\u83b7\u53d6\u4e00\u4e2a String slice \u5e76\u521b\u5efa\u4e00\u4e2a Config \u7ed3\u6784\u4f53\u7684\u5b9e\u4f8b\uff0c\u4ed6\u4eec\u7d22\u5f15 slice \u4e2d\u7684\u503c\u5e76\u514b\u9686\u8fd9\u4e9b\u503c\u4ee5\u4fbf Config \u7ed3\u6784\u4f53\u53ef\u4ee5\u62e5\u6709\u8fd9\u4e9b\u503c\u3002\u5728\u793a\u4f8b\u4e2d\u91cd\u73b0\u4e86\u7b2c\u5341\u4e8c\u7ae0\u7ed3\u5c3e\u793a\u4f8b\u4e2d Config::new \u51fd\u6570\u7684\u5b9e\u73b0\uff1a impl Config { pub fn new ( args : & [ String ]) -> Result < Config , &' static str > { if args . len () < 3 { return Err ( \"not enough arguments\" ); } let query = args [ 1 ]. clone (); let filename = args [ 2 ]. clone (); let case_sensitive = env :: var ( \"CASE_INSENSITIVE\" ). is_err (); Ok ( Config { query , filename , case_sensitive , }) } } \u8d77\u521d\u8fd9\u91cc\u9700\u8981 clone \u7684\u539f\u56e0\u662f\u53c2\u6570 args \u4e2d\u6709\u4e00\u4e2a String \u5143\u7d20\u7684 slice \uff0c\u800c new \u51fd\u6570\u5e76\u4e0d\u62e5\u6709 args \u3002\u4e3a\u4e86\u80fd\u591f\u8fd4\u56de Config \u5b9e\u4f8b\u7684\u6240\u6709\u6743\uff0c\u6211\u4eec\u9700\u8981\u514b\u9686 Config \u4e2d\u5b57\u6bb5 query \u548c filename \u7684\u503c\uff0c\u8fd9\u6837 Config \u5b9e\u4f8b\u5c31\u80fd\u62e5\u6709\u8fd9\u4e9b\u503c\u3002 \u5728\u5b66\u4e60\u4e86\u8fed\u4ee3\u5668\u4e4b\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06 new \u51fd\u6570\u6539\u4e3a\u83b7\u53d6\u4e00\u4e2a\u6709\u6240\u6709\u6743\u7684\u8fed\u4ee3\u5668\u4f5c\u4e3a\u53c2\u6570\u800c\u4e0d\u662f\u501f\u7528 slice \u3002\u6211\u4eec\u5c06\u4f7f\u7528\u8fed\u4ee3\u5668\u529f\u80fd\u4e4b\u524d\u68c0\u67e5 slice \u957f\u5ea6\u548c\u7d22\u5f15\u7279\u5b9a\u4f4d\u7f6e\u7684\u4ee3\u7801\u3002\u8fd9\u4f1a\u660e\u786e Config::new \u7684\u5de5\u4f5c\u56e0\u4e3a\u8fed\u4ee3\u5668\u4f1a\u8d1f\u8d23\u8bbf\u95ee\u8fd9\u4e9b\u503c\u3002 \u4e00\u65e6 Config::new \u83b7\u53d6\u4e86\u8fed\u4ee3\u5668\u7684\u6240\u6709\u6743\u5e76\u4e0d\u518d\u4f7f\u7528\u501f\u7528\u7684\u7d22\u5f15\u64cd\u4f5c\uff0c\u5c31\u53ef\u4ee5\u5c06\u8fed\u4ee3\u5668\u4e2d\u7684 String \u503c\u79fb\u52a8\u5230 Config \u4e2d\uff0c\u800c\u4e0d\u662f\u8c03\u7528 clone \u5206\u914d\u65b0\u7684\u7a7a\u95f4\u3002 \u76f4\u63a5\u4f7f\u7528 env::args \u8fd4\u56de\u7684\u8fed\u4ee3\u5668 \u6253\u5f00 I/O \u9879\u76ee\u7684 src/main.rs \u6587\u4ef6\uff0c\u5b83\u770b\u8d77\u6765\u5e94\u8be5\u50cf\u8fd9\u6837\uff1a fn main () { let args : Vec < String > = env :: args (). collect (); let config = Config :: new ( & args ). unwrap_or_else ( | err | { eprintln! ( \"Problem parsing arguments: {}\" , err ); process :: exit ( 1 ); }); // --snip-- } \u4fee\u6539\u7b2c\u5341\u4e8c\u7ae0\u7ed3\u5c3e\u793a\u4f8b\u4e2d\u7684 main \u51fd\u6570\u7684\u5f00\u5934\u4e3a\u793a\u4f8b\u4e2d\u7684\u4ee3\u7801\u3002\u5728\u66f4\u65b0 Config::new \u4e4b\u524d\u8fd9\u4e9b\u4ee3\u7801\u8fd8\u4e0d\u80fd\u7f16\u8bd1\uff1a fn main () { let config = Config :: new ( env :: args ()). unwrap_or_else ( | err | { eprintln! ( \"Problem parsing arguments: {}\" , err ); process :: exit ( 1 ); }); // --snip-- } env::args \u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u8fed\u4ee3\u5668\uff01\u4e0d\u540c\u4e8e\u5c06\u8fed\u4ee3\u5668\u7684\u503c\u6536\u96c6\u5230\u4e00\u4e2a vector \u4e2d\u63a5\u7740\u4f20\u9012\u4e00\u4e2a slice \u7ed9 Config::new \uff0c\u73b0\u5728\u6211\u4eec\u76f4\u63a5\u5c06 env::args \u8fd4\u56de\u7684\u8fed\u4ee3\u5668\u7684\u6240\u6709\u6743\u4f20\u9012\u7ed9 Config::new \u3002 \u63a5\u4e0b\u6765\u9700\u8981\u66f4\u65b0 Config::new \u7684\u5b9a\u4e49\u3002\u5728 I/O \u9879\u76ee\u7684 src/lib.rs \u4e2d\uff0c\u5c06 Config::new \u7684\u7b7e\u540d\u6539\u4e3a\u5982\u793a\u4f8b\u6240\u793a\u3002\u8fd9\u4ecd\u7136\u4e0d\u80fd\u7f16\u8bd1\u56e0\u4e3a\u6211\u4eec\u8fd8\u9700\u66f4\u65b0\u51fd\u6570\u4f53\uff1a // \u4ee5\u8fed\u4ee3\u5668\u4f5c\u4e3a\u53c2\u6570\u66f4\u65b0 Config::new \u7684\u7b7e\u540d impl Config { pub fn new ( mut args : env :: Args ) -> Result < Config , &' static str > { // --snip-- env::args \u51fd\u6570\u7684\u6807\u51c6\u5e93\u6587\u6863\u663e\u793a\uff0c\u5b83\u8fd4\u56de\u7684\u8fed\u4ee3\u5668\u7684\u7c7b\u578b\u4e3a std::env::Args \u3002\u6211\u4eec\u5df2\u7ecf\u66f4\u65b0\u4e86 Config :: new \u51fd\u6570\u7684\u7b7e\u540d\uff0c\u56e0\u6b64\u53c2\u6570 args \u7684\u7c7b\u578b\u4e3a std::env::Args \u800c\u4e0d\u662f &[String] \u3002\u56e0\u4e3a\u6211\u4eec\u62e5\u6709 args \u7684\u6240\u6709\u6743\uff0c\u5e76\u4e14\u5c06\u901a\u8fc7\u5bf9\u5176\u8fdb\u884c\u8fed\u4ee3\u6765\u6539\u53d8 args \uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5c06 mut \u5173\u952e\u5b57\u6dfb\u52a0\u5230 args \u53c2\u6570\u7684\u89c4\u8303\u4e2d\u4ee5\u4f7f\u5176\u53ef\u53d8\u3002 \u4f7f\u7528 Iterator trait \u4ee3\u66ff\u7d22\u5f15 \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5c06\u4fee\u6539 Config::new \u7684\u5185\u5bb9\u3002\u6807\u51c6\u5e93\u6587\u6863\u8fd8\u63d0\u5230 std::env::Args \u5b9e\u73b0\u4e86 Iterator trait \uff0c\u56e0\u6b64\u6211\u4eec\u77e5\u9053\u53ef\u4ee5\u5bf9\u5176\u8c03\u7528 next \u65b9\u6cd5\uff01\u793a\u4f8b\u66f4\u65b0\u4e86\u4e2d\u7684\u4ee3\u7801\uff0c\u4ee5\u4f7f\u7528 next \u65b9\u6cd5\uff1a impl Config { pub fn new ( mut args : env :: Args ) -> Result < Config , &' static str > { args . next (); let query = match args . next () { Some ( arg ) => arg , None => return Err ( \"Didn't get a query string\" ), }; let filename = match args . next () { Some ( arg ) => arg , None => return Err ( \"Didn't get a file name\" ), }; let case_sensitive = env :: var ( \"CASE_INSENSITIVE\" ). is_err (); Ok ( Config { query , filename , case_sensitive , }) } } \u8bf7\u8bb0\u4f4f env::args \u8fd4\u56de\u503c\u7684\u7b2c\u4e00\u4e2a\u503c\u662f\u7a0b\u5e8f\u7684\u540d\u79f0\u3002\u6211\u4eec\u5e0c\u671b\u5ffd\u7565\u5b83\u5e76\u83b7\u53d6\u4e0b\u4e00\u4e2a\u503c\uff0c\u6240\u4ee5\u9996\u5148\u8c03\u7528 next \u5e76\u4e0d\u5bf9\u8fd4\u56de\u503c\u505a\u4efb\u4f55\u64cd\u4f5c\u3002\u4e4b\u540e\u5bf9\u5e0c\u671b\u653e\u5165 Config \u4e2d\u5b57\u6bb5 query \u8c03\u7528 next \u3002\u5982\u679c next \u8fd4\u56de Some \uff0c\u4f7f\u7528 match \u6765\u63d0\u53d6\u5176\u503c\u3002\u5982\u679c\u5b83\u8fd4\u56de None \uff0c\u5219\u610f\u5473\u7740\u6ca1\u6709\u63d0\u4f9b\u8db3\u591f\u7684\u53c2\u6570\u5e76\u901a\u8fc7 Err \u503c\u63d0\u65e9\u8fd4\u56de\u3002\u5bf9 filename \u503c\u8fdb\u884c\u540c\u6837\u7684\u64cd\u4f5c\u3002 \u4f7f\u7528\u8fed\u4ee3\u5668\u9002\u914d\u5668\u6765\u4f7f\u4ee3\u7801\u66f4\u7b80\u660e I/O \u9879\u76ee\u4e2d\u5176\u4ed6\u53ef\u4ee5\u5229\u7528\u8fed\u4ee3\u5668\u7684\u5730\u65b9\u662f search \u51fd\u6570\uff0c\u793a\u4f8b\u4e2d\u91cd\u73b0\u4e86\u7b2c\u5341\u4e8c\u7ae0\u7ed3\u5c3e\u793a\u4f8b\u4e2d\u6b64\u51fd\u6570\u7684\u5b9a\u4e49\uff1a pub fn search <' a > ( query : & str , contents : & ' a str ) -> Vec <&' a str > { let mut results = Vec :: new (); for line in contents . lines () { if line . contains ( query ) { results . push ( line ); } } results } \u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528\u8fed\u4ee3\u5668\u9002\u914d\u5668\u65b9\u6cd5\u6765\u7f16\u5199\u66f4\u7b80\u660e\u7684\u4ee3\u7801\u3002\u8fd9\u4e5f\u907f\u514d\u4e86\u4e00\u4e2a\u53ef\u53d8\u7684\u4e2d\u95f4 results vector \u7684\u4f7f\u7528\u3002 \u51fd\u6570\u5f0f\u7f16\u7a0b\u98ce\u683c\u503e\u5411\u4e8e\u6700\u5c0f\u5316\u53ef\u53d8\u72b6\u6001\u7684\u6570\u91cf\u6765\u4f7f\u4ee3\u7801\u66f4\u7b80\u6d01\u3002\u53bb\u6389\u53ef\u53d8\u72b6\u6001\u53ef\u80fd\u4f1a\u4f7f\u5f97\u5c06\u6765\u8fdb\u884c\u5e76\u884c\u641c\u7d22\u7684\u589e\u5f3a\u53d8\u5f97\u66f4\u5bb9\u6613\uff0c\u56e0\u4e3a\u6211\u4eec\u4e0d\u5fc5\u7ba1\u7406 results vector \u7684\u5e76\u53d1\u8bbf\u95ee\u3002 \u793a\u4f8b\u5c55\u793a\u4e86\u8be5\u53d8\u5316\uff1a // \u5728 search \u51fd\u6570\u5b9e\u73b0\u4e2d\u4f7f\u7528\u8fed\u4ee3\u5668\u9002\u914d\u5668 pub fn search <' a > ( query : & str , contents : & ' a str ) -> Vec <&' a str > { contents . lines () . filter ( | line | line . contains ( query )) . collect () } \u56de\u5fc6 search \u51fd\u6570\u7684\u76ee\u7684\u662f\u8fd4\u56de\u6240\u6709 contents \u4e2d\u5305\u542b query \u7684\u884c\u3002\u7c7b\u4f3c\u4e8e\u793a\u4f8b\u4e2d\u7684 filter \u4f8b\u5b50\uff0c\u53ef\u4ee5\u4f7f\u7528 filter \u9002\u914d\u5668\u53ea\u4fdd\u7559 line.contains(query) \u8fd4\u56de true \u7684\u90a3\u4e9b\u884c\u3002\u63a5\u7740\u4f7f\u7528 collect \u5c06\u5339\u914d\u884c\u6536\u96c6\u5230\u53e6\u4e00\u4e2a vector \u4e2d\u3002\u8fd9\u6837\u5c31\u5bb9\u6613\u591a\u4e86\uff01\u5c1d\u8bd5\u5bf9 search_case_insensitive \u51fd\u6570\u505a\u51fa\u540c\u6837\u7684\u4f7f\u7528\u8fed\u4ee3\u5668\u65b9\u6cd5\u7684\u4fee\u6539\u5427\u3002 \u63a5\u4e0b\u6765\u7684\u903b\u8f91\u95ee\u9898\u5c31\u662f\u5728\u4ee3\u7801\u4e2d\u5e94\u8be5\u9009\u62e9\u54ea\u79cd\u98ce\u683c\uff1a\u662f\u4f7f\u7528\u793a\u4f8b\u4e2d\u7684\u539f\u59cb\u5b9e\u73b0\u8fd8\u662f\u4f7f\u7528\u8fed\u4ee3\u5668\u7684\u7248\u672c\uff1f\u5927\u90e8\u5206 Rust \u7a0b\u5e8f\u5458\u503e\u5411\u4e8e\u4f7f\u7528\u8fed\u4ee3\u5668\u98ce\u683c\u3002\u5f00\u59cb\u8fd9\u6709\u70b9\u96be\u4ee5\u7406\u89e3\uff0c\u4e0d\u8fc7\u4e00\u65e6\u4f60\u5bf9\u4e0d\u540c\u8fed\u4ee3\u5668\u7684\u5de5\u4f5c\u65b9\u5f0f\u6709\u4e86\u611f\u89c9\u4e4b\u540e\uff0c\u8fed\u4ee3\u5668\u53ef\u80fd\u4f1a\u66f4\u5bb9\u6613\u7406\u89e3\u3002\u76f8\u6bd4\u6446\u5f04\u4e0d\u540c\u7684\u5faa\u73af\u5e76\u521b\u5efa\u65b0 vector \uff0c\uff08\u8fed\u4ee3\u5668\uff09\u4ee3\u7801\u5219\u66f4\u5173\u6ce8\u5faa\u73af\u7684\u76ee\u7684\u3002\u8fd9\u62bd\u8c61\u6389\u90a3\u4e9b\u8001\u751f\u5e38\u8c08\u7684\u4ee3\u7801\uff0c\u8fd9\u6837\u5c31\u66f4\u5bb9\u6613\u770b\u6e05\u4ee3\u7801\u6240\u7279\u6709\u7684\u6982\u5ff5\uff0c\u6bd4\u5982\u8fed\u4ee3\u5668\u4e2d\u6bcf\u4e2a\u5143\u7d20\u5fc5\u987b\u9762\u5bf9\u7684\u8fc7\u6ee4\u6761\u4ef6\u3002 \u4e0d\u8fc7\u8fd9\u4e24\u79cd\u5b9e\u73b0\u771f\u7684\u5b8c\u5168\u7b49\u540c\u5417\uff1f\u76f4\u89c9\u4e0a\u7684\u5047\u8bbe\u662f\u66f4\u5e95\u5c42\u7684\u5faa\u73af\u4f1a\u66f4\u5feb\u4e00\u4e9b\u3002\u8ba9\u6211\u4eec\u804a\u804a\u6027\u80fd\u5427\u3002 \u5ffd\u7565\u5927\u5c0f\u5199\u51fd\u6570\u4f7f\u7528\u8fed\u4ee3\u5668\u7248\u672c for\u5faa\u73af\u7248\u672c: pub fn search_case_insensitive <' a > ( query : & str , contents : & ' a str ) -> Vec <&' a str > { let mut results = Vec :: new (); let query = query . to_lowercase (); for line in contents . lines () { if line . to_lowercase (). contains ( & query ) { results . push ( line ); } } results } \u8fed\u4ee3\u5668\u7248\u672c: pub fn search_case_insensitive <' a > ( query : & str , contents : & ' a str ) -> Vec <&' a str > { let query = query . to_lowercase (); // \u4f7f\u7528\u8fed\u4ee3\u5668\u7248\u672c contents . lines () . filter ( | line | line . to_lowercase (). contains ( & query )) . collect () } \u6027\u80fd\u6bd4\u8f83-\u5faa\u73af\u548c\u8fed\u4ee3\u5668 \u4e3a\u4e86\u51b3\u5b9a\u4f7f\u7528\u54ea\u4e2a\u5b9e\u73b0\uff0c\u6211\u4eec\u9700\u8981\u77e5\u9053\u54ea\u4e2a\u7248\u672c\u7684 search \u51fd\u6570\u66f4\u5feb\u4e00\u4e9b\uff1a\u662f\u76f4\u63a5\u4f7f\u7528 for \u5faa\u73af\u7684\u7248\u672c\u8fd8\u662f\u4f7f\u7528\u8fed\u4ee3\u5668\u7684\u7248\u672c\u3002 \u6211\u4eec\u8fd0\u884c\u4e86\u4e00\u4e2a\u6027\u80fd\u6d4b\u8bd5\uff0c\u901a\u8fc7\u5c06\u963f\u745f\u00b7\u67ef\u5357\u00b7\u9053\u5c14\u7684\u201c\u798f\u5c14\u6469\u65af\u63a2\u6848\u96c6\u201d\u7684\u5168\u90e8\u5185\u5bb9\u52a0\u8f7d\u8fdb String \u5e76\u5bfb\u627e\u5176\u4e2d\u7684\u5355\u8bcd \u201cthe\u201d\u3002\u5982\u4e0b\u662f for \u5faa\u73af\u7248\u672c\u548c\u8fed\u4ee3\u5668\u7248\u672c\u7684 search \u51fd\u6570\u7684\u6027\u80fd\u6d4b\u8bd5\u7ed3\u679c\uff1a test bench_search_for .. . bench : 19 , 620 , 300 ns / iter ( +/- 915 , 700 ) test bench_search_iter .. . bench : 19 , 234 , 900 ns / iter ( +/- 657 , 200 ) \u7ed3\u679c\u8fed\u4ee3\u5668\u7248\u672c\u8fd8\u8981\u7a0d\u5fae\u5feb\u4e00\u70b9\uff01\u8fd9\u91cc\u6211\u4eec\u5c06\u4e0d\u4f1a\u67e5\u770b\u6027\u80fd\u6d4b\u8bd5\u7684\u4ee3\u7801\uff0c\u6211\u4eec\u7684\u76ee\u7684\u5e76\u4e0d\u662f\u4e3a\u4e86\u8bc1\u660e\u4ed6\u4eec\u662f\u5b8c\u5168\u7b49\u540c\u7684\uff0c\u800c\u662f\u5f97\u51fa\u4e00\u4e2a\u600e\u6837\u6bd4\u8f83\u8fd9\u4e24\u79cd\u5b9e\u73b0\u65b9\u5f0f\u6027\u80fd\u7684\u57fa\u672c\u601d\u8def\u3002 \u5bf9\u4e8e\u4e00\u4e2a\u66f4\u5168\u9762\u7684\u6027\u80fd\u6d4b\u8bd5\uff0c\u5c06\u4f1a\u68c0\u67e5\u4e0d\u540c\u957f\u5ea6\u7684\u6587\u672c\u3001\u4e0d\u540c\u7684\u641c\u7d22\u5355\u8bcd\u3001\u4e0d\u540c\u957f\u5ea6\u7684\u5355\u8bcd\u548c\u6240\u6709\u5176\u4ed6\u7684\u53ef\u53d8\u60c5\u51b5\u3002\u8fd9\u91cc\u6240\u8981\u8868\u8fbe\u7684\u662f\uff1a \u8fed\u4ee3\u5668\uff0c\u4f5c\u4e3a\u4e00\u4e2a\u9ad8\u7ea7\u7684\u62bd\u8c61\uff0c\u88ab\u7f16\u8bd1\u6210\u4e86\u4e0e\u624b\u5199\u7684\u5e95\u5c42\u4ee3\u7801\u5927\u4f53\u4e00\u81f4\u6027\u80fd\u4ee3\u7801\u3002 \u8fed\u4ee3\u5668\u662f Rust \u7684 \u96f6\u6210\u672c\u62bd\u8c61 \uff08zero-cost abstractions\uff09\u4e4b\u4e00\uff0c\u5b83 \u610f\u5473\u7740\u62bd\u8c61\u5e76\u4e0d\u4f1a\u5f15\u5165\u8fd0\u884c\u65f6\u5f00\u9500 \uff0c\u5b83\u4e0e\u672c\u8d3e\u5c3c\u00b7\u65af\u7279\u52b3\u65af\u7279\u5362\u666e\uff08C++ \u7684\u8bbe\u8ba1\u548c\u5b9e\u73b0\u8005\uff09\u5728 \u201cFoundations of C++\u201d\uff082012\uff09 \u4e2d\u6240\u5b9a\u4e49\u7684 \u96f6\u5f00\u9500 \uff08zero-overhead\uff09\u5982\u51fa\u4e00\u8f99\uff1a In general, C++ implementations obey the zero-overhead principle: What you don\u2019t use, you don\u2019t pay for. And further: What you do use, you couldn\u2019t hand code any better. - Bjarne Stroustrup \"Foundations of C++\" \u4ece\u6574\u4f53\u6765\u8bf4\uff0cC++ \u7684\u5b9e\u73b0\u9075\u5faa\u4e86\u96f6\u5f00\u9500\u539f\u5219\uff1a\u4f60\u4e0d\u9700\u8981\u7684\uff0c\u65e0\u9700\u4e3a\u4ed6\u4eec\u4e70\u5355\u3002\u66f4\u6709\u751a\u8005\u7684\u662f\uff1a\u4f60\u9700\u8981\u7684\u65f6\u5019\uff0c\u4e5f\u4e0d\u53ef\u80fd\u627e\u5230\u5176\u4ed6\u66f4\u597d\u7684\u4ee3\u7801\u4e86\u3002 - \u672c\u8d3e\u5c3c\u00b7\u65af\u7279\u52b3\u65af\u7279\u5362\u666e \"Foundations of C++\" \u4f5c\u4e3a\u53e6\u4e00\u4e2a\u4f8b\u5b50\uff0c\u8fd9\u91cc\u6709\u4e00\u4e9b\u53d6\u81ea\u4e8e\u97f3\u9891\u89e3\u7801\u5668\u7684\u4ee3\u7801\u3002\u89e3\u7801\u7b97\u6cd5\u4f7f\u7528 \u7ebf\u6027\u9884\u6d4b\u6570\u5b66\u8fd0\u7b97 \uff08linear prediction mathematical operation\uff09\u6765\u6839\u636e\u4e4b\u524d\u6837\u672c\u7684\u7ebf\u6027\u51fd\u6570\u9884\u6d4b\u5c06\u6765\u7684\u503c\u3002\u8fd9\u4e9b\u4ee3\u7801\u4f7f\u7528\u8fed\u4ee3\u5668\u94fe\u6765\u5bf9\u4f5c\u7528\u57df\u4e2d\u7684\u4e09\u4e2a\u53d8\u91cf\u8fdb\u884c\u4e86\u67d0\u79cd\u6570\u5b66\u8ba1\u7b97\uff1a\u4e00\u4e2a\u53eb buffer \u7684\u6570\u636e slice \u3001\u4e00\u4e2a\u6709 12 \u4e2a\u5143\u7d20\u7684\u6570\u7ec4 coefficients \u3001\u548c\u4e00\u4e2a\u4ee3\u8868\u4f4d\u79fb\u4f4d\u6570\u7684 qlp_shift \u3002\u4f8b\u5b50\u4e2d\u58f0\u660e\u4e86\u8fd9\u4e9b\u53d8\u91cf\u4f46\u5e76\u6ca1\u6709\u63d0\u4f9b\u4efb\u4f55\u503c\uff1b\u867d\u7136\u8fd9\u4e9b\u4ee3\u7801\u5728\u5176\u4e0a\u4e0b\u6587\u4e4b\u5916\u6ca1\u6709\u4ec0\u4e48\u610f\u4e49\uff0c\u4e0d\u8fc7\u4ecd\u662f\u4e00\u4e2a\u7b80\u660e\u7684\u73b0\u5b9e\u4e2d\u7684\u4f8b\u5b50\uff0c\u6765\u5c55\u793a Rust \u5982\u4f55\u5c06\u9ad8\u7ea7\u6982\u5ff5\u8f6c\u6362\u4e3a\u5e95\u5c42\u4ee3\u7801\uff1a let buffer : & mut [ i32 ]; let coefficients : [ i64 ; 12 ]; let qlp_shift : i16 ; for i in 12 .. buffer . len () { let prediction = coefficients . iter () . zip ( & buffer [ i - 12 .. i ]) . map ( | ( & c , & s ) | c * s as i64 ) . sum :: < i64 > () >> qlp_shift ; let delta = buffer [ i ]; buffer [ i ] = prediction as i32 + delta ; } \u4e3a\u4e86\u8ba1\u7b97 prediction \u7684\u503c\uff0c\u8fd9\u4e9b\u4ee3\u7801\u904d\u5386\u4e86 coefficients \u4e2d\u7684 12 \u4e2a\u503c\uff0c\u4f7f\u7528 zip \u65b9\u6cd5\u5c06\u7cfb\u6570\u4e0e buffer \u7684\u524d 12 \u4e2a\u503c\u7ec4\u5408\u5728\u4e00\u8d77\u3002\u63a5\u7740\u5c06\u6bcf\u4e00\u5bf9\u503c\u76f8\u4e58\uff0c\u518d\u5c06\u6240\u6709\u7ed3\u679c\u76f8\u52a0\uff0c\u7136\u540e\u5c06\u603b\u548c\u53f3\u79fb qlp_shift \u4f4d\u3002 \u50cf\u97f3\u9891\u89e3\u7801\u5668\u8fd9\u6837\u7684\u7a0b\u5e8f\u901a\u5e38\u6700\u770b\u91cd \u8ba1\u7b97\u7684\u6027\u80fd \u3002\u8fd9\u91cc\uff0c\u6211\u4eec\u521b\u5efa\u4e86\u4e00\u4e2a\u8fed\u4ee3\u5668\uff0c\u4f7f\u7528\u4e86\u4e24\u4e2a\u9002\u914d\u5668\uff0c\u63a5\u7740\u6d88\u8d39\u4e86\u5176\u503c\u3002Rust \u4ee3\u7801\u5c06\u4f1a\u88ab\u7f16\u8bd1\u4e3a\u4ec0\u4e48\u6837\u7684\u6c47\u7f16\u4ee3\u7801\u5462\uff1f\u597d\u5427\uff0c\u5728\u7f16\u5199\u672c\u4e66\u7684\u8fd9\u4e2a\u65f6\u5019\uff0c \u5b83\u88ab\u7f16\u8bd1\u6210\u4e0e\u624b\u5199\u7684\u76f8\u540c\u7684\u6c47\u7f16\u4ee3\u7801 \u3002\u904d\u5386 coefficients \u7684\u503c\u5b8c\u5168\u7528\u4e0d\u5230\u5faa\u73af\uff1aRust \u77e5\u9053\u8fd9\u91cc\u4f1a\u8fed\u4ee3 12 \u6b21\uff0c\u6240\u4ee5\u5b83\u201c \u5c55\u5f00 \u201d\uff08unroll\uff09\u4e86\u5faa\u73af\u3002\u5c55\u5f00\u662f\u4e00\u79cd\u79fb\u9664\u5faa\u73af\u63a7\u5236\u4ee3\u7801\u7684\u5f00\u9500\u5e76\u66ff\u6362\u4e3a\u6bcf\u4e2a\u8fed\u4ee3\u4e2d\u7684\u91cd\u590d\u4ee3\u7801\u7684\u4f18\u5316\u3002 \u6240\u6709\u7684\u7cfb\u6570\u90fd\u88ab\u50a8\u5b58\u5728\u4e86\u5bc4\u5b58\u5668\u4e2d\uff0c\u8fd9\u610f\u5473\u7740\u8bbf\u95ee\u4ed6\u4eec\u975e\u5e38\u5feb\u3002\u8fd9\u91cc\u4e5f\u6ca1\u6709\u8fd0\u884c\u65f6\u6570\u7ec4\u8bbf\u95ee\u8fb9\u754c\u68c0\u67e5\u3002 \u6240\u6709\u8fd9\u4e9b Rust \u80fd\u591f\u63d0\u4f9b\u7684\u4f18\u5316\u4f7f\u5f97\u7ed3\u679c\u4ee3\u7801\u6781\u4e3a\u9ad8\u6548\u3002\u73b0\u5728\u77e5\u9053\u8fd9\u4e9b\u4e86\uff0c\u8bf7\u653e\u5fc3\u5927\u80c6\u7684\u4f7f\u7528\u8fed\u4ee3\u5668\u548c\u95ed\u5305\u5427\uff01\u4ed6\u4eec\u4f7f\u5f97\u4ee3\u7801\u770b\u8d77\u6765\u66f4\u9ad8\u7ea7\uff0c\u4f46\u5e76\u4e0d\u4e3a\u6b64\u5f15\u5165\u8fd0\u884c\u65f6\u6027\u80fd\u635f\u5931\u3002 \u603b\u7ed3 \u95ed\u5305\u548c\u8fed\u4ee3\u5668\u662f Rust \u53d7\u51fd\u6570\u5f0f\u7f16\u7a0b\u8bed\u8a00\u89c2\u5ff5\u6240\u542f\u53d1\u7684\u529f\u80fd\u3002 \u4ed6\u4eec\u5bf9 Rust \u4ee5\u5e95\u5c42\u7684\u6027\u80fd\u6765\u660e\u786e\u7684\u8868\u8fbe\u9ad8\u7ea7\u6982\u5ff5\u7684\u80fd\u529b\u6709\u5f88\u5927\u8d21\u732e\u3002\u95ed\u5305\u548c\u8fed\u4ee3\u5668\u7684\u5b9e\u73b0\u8fbe\u5230\u4e86\u4e0d\u5f71\u54cd\u8fd0\u884c\u65f6\u6027\u80fd\u7684\u7a0b\u5ea6\u3002\u8fd9\u6b63\u662f Rust \u7aed\u529b\u63d0\u4f9b\u96f6\u6210\u672c\u62bd\u8c61\u7684\u76ee\u6807\u7684\u4e00\u90e8\u5206\u3002 \u73b0\u5728\u6211\u4eec\u6539\u8fdb\u4e86\u6211\u4eec I/O \u9879\u76ee\u7684\uff08\u4ee3\u7801\uff09\u8868\u73b0\u529b\uff0c\u8ba9\u6211\u4eec\u770b\u4e00\u770b\u66f4\u591a cargo \u7684\u529f\u80fd\uff0c\u4ed6\u4eec\u5c06\u5e2e\u52a9\u6211\u4eec\u51c6\u5907\u597d\u5c06\u9879\u76ee\u5206\u4eab\u7ed9\u4e16\u754c\u3002","title":"\u8fed\u4ee3\u5668\u4e0e\u95ed\u5305"},{"location":"closures/#_1","text":"","title":"\u8fed\u4ee3\u5668\u4e0e\u95ed\u5305"},{"location":"closures/#_2","text":"","title":"\u95ed\u5305"},{"location":"closures/#_3","text":"\u7248\u672c1: // src/main.rs use std :: thread ; use std :: time :: Duration ; fn simulated_expensive_calculation ( intensity : u32 ) -> u32 { println! ( \"\u6162\u6162\u8ba1\u7b97...\" ); thread :: sleep ( Duration :: from_secs ( 2 )); intensity } fn main () { let simulated_user_specified_value = 10 ; let simulated_random_number = 7 ; generate_workout ( simulated_user_specified_value , simulated_random_number ); } fn generate_workout ( intensity : u32 , random_number : u32 ) { if intensity < 25 { println! ( \"\u4eca\u5929, \u505a {} \u4e2a\u4fef\u5367\u6491!\" , simulated_expensive_calculation ( intensity ) ); println! ( \"\u4e0b\u4e00\u6b65\uff0c\u505a {} \u4e2a\u4ef0\u5367\u8d77\u5750\uff01\" , simulated_expensive_calculation ( intensity ) ); } else { if random_number == 3 { println! ( \"\u4eca\u5929\u4f11\u606f\u4e00\u4e0b\uff01 \u8bb0\u5f97\u4fdd\u6301\u6c34\u5206\uff01\" ) } else { println! ( \"\u4eca\u5929\uff0c\u8dd1 {} \u5206\u949f\uff01\" , simulated_expensive_calculation ( intensity ) ); } } }","title":"\u4f7f\u7528\u95ed\u5305\u521b\u5efa\u884c\u4e3a\u7684\u62bd\u8c61"},{"location":"closures/#_4","text":"\u5c06\u91cd\u590d\u7684 simulated_expensive_calculation \u51fd\u6570\u8c03\u7528\u63d0\u53d6\u5230\u4e00\u4e2a\u53d8\u91cf\u4e2d // src/main.rs // snap.... fn generate_workout ( intensity : u32 , random_number : u32 ) { let expensive_result = simulated_expensive_calculation ( intensity ); if intensity < 25 { println! ( \"\u4eca\u5929, \u505a {} \u4e2a\u4fef\u5367\u6491!\" , expensive_result ); println! ( \"\u4e0b\u4e00\u6b65\uff0c\u505a {} \u4e2a\u4ef0\u5367\u8d77\u5750\uff01\" , expensive_result ); } else { if random_number == 3 { println! ( \"\u4eca\u5929\u4f11\u606f\u4e00\u4e0b\uff01 \u8bb0\u5f97\u4fdd\u6301\u6c34\u5206\uff01\" ) } else { println! ( \"\u4eca\u5929\uff0c\u8dd1 {} \u5206\u949f\uff01\" , expensive_result ); } } }","title":"\u4f7f\u7528\u51fd\u6570\u91cd\u6784"},{"location":"closures/#-","text":"\u95ed\u5305\u4e0d\u8981\u6c42\u50cf fn \u51fd\u6570\u90a3\u6837\u5728\u53c2\u6570\u548c\u8fd4\u56de\u503c\u4e0a\u6ce8\u660e\u7c7b\u578b\u3002 \u51fd\u6570\u4e2d\u9700\u8981\u7c7b\u578b\u6ce8\u89e3\u662f\u56e0\u4e3a\u4ed6\u4eec\u662f\u66b4\u9732\u7ed9\u7528\u6237\u7684\u663e\u5f0f\u63a5\u53e3\u7684\u4e00\u90e8\u5206\u3002 \u4e25\u683c\u7684\u5b9a\u4e49\u8fd9\u4e9b\u63a5\u53e3\u5bf9\u4e8e\u4fdd\u8bc1\u6240\u6709\u4eba\u90fd\u8ba4\u540c\u51fd\u6570\u4f7f\u7528\u548c\u8fd4\u56de\u503c\u7684\u7c7b\u578b\u6765\u8bf4\u662f\u5f88\u91cd\u8981\u7684\u3002 \u4f46\u662f\u95ed\u5305\u5e76\u4e0d\u7528\u4e8e\u8fd9\u6837\u66b4\u9732\u5728\u5916\u7684\u63a5\u53e3\uff1a\u4ed6\u4eec\u50a8\u5b58\u5728\u53d8\u91cf\u4e2d\u5e76\u88ab\u4f7f\u7528\uff0c\u4e0d\u7528\u547d\u540d\u4ed6\u4eec\u6216\u66b4\u9732\u7ed9\u5e93\u7684\u7528\u6237\u8c03\u7528\u3002 \u95ed\u5305\u901a\u5e38\u5f88\u77ed\uff0c\u5e76\u53ea\u5173\u8054\u4e8e\u5c0f\u8303\u56f4\u7684\u4e0a\u4e0b\u6587\u800c\u975e\u4efb\u610f\u60c5\u5883\u3002 \u5728\u8fd9\u4e9b\u6709\u9650\u5236\u7684\u4e0a\u4e0b\u6587\u4e2d\uff0c\u7f16\u8bd1\u5668\u80fd\u53ef\u9760\u7684\u63a8\u65ad\u53c2\u6570\u548c\u8fd4\u56de\u503c\u7684\u7c7b\u578b\uff0c\u7c7b\u4f3c\u4e8e\u5b83\u662f\u5982\u4f55\u80fd\u591f\u63a8\u65ad\u5927\u90e8\u5206\u53d8\u91cf\u7684\u7c7b\u578b\u4e00\u6837\u3002 // src/main.rs // snap.... fn generate_workout ( intensity : u32 , random_number : u32 ) { // \u95ed\u5305\u91cd\u6784\u4ee3\u7801 let expensive_closure = | num | { println! ( \"\u6162\u6162\u8ba1\u7b97...\" ); thread :: sleep ( Duration :: from_secs ( 2 )); num }; if intensity < 25 { println! ( \"\u4eca\u5929, \u505a {} \u4e2a\u4fef\u5367\u6491!\" , expensive_closure ( intensity )); println! ( \"\u4e0b\u4e00\u6b65\uff0c\u505a {} \u4e2a\u4ef0\u5367\u8d77\u5750\uff01\" , expensive_closure ( intensity )); } else { if random_number == 3 { println! ( \"\u4eca\u5929\u4f11\u606f\u4e00\u4e0b\uff01 \u8bb0\u5f97\u4fdd\u6301\u6c34\u5206\uff01\" ) } else { println! ( \"\u4eca\u5929\uff0c\u8dd1 {} \u5206\u949f\uff01\" , expensive_closure ( intensity )); } } }","title":"\u91cd\u6784 - \u4f7f\u7528\u95ed\u5305\u50a8\u5b58\u4ee3\u7801"},{"location":"closures/#-_1","text":"\u6709\u4e86\u7c7b\u578b\u6ce8\u89e3\u95ed\u5305\u7684\u8bed\u6cd5\u5c31\u66f4\u7c7b\u4f3c\u51fd\u6570\u4e86\u3002 \u5982\u4e0b\u662f\u4e00\u4e2a\u5bf9\u5176\u53c2\u6570\u52a0\u4e00\u7684\u51fd\u6570\u7684\u5b9a\u4e49\u4e0e\u62e5\u6709\u76f8\u540c\u884c\u4e3a\u95ed\u5305\u8bed\u6cd5\u7684\u7eb5\u5411\u5bf9\u6bd4\u3002 \u8fd9\u91cc\u589e\u52a0\u4e86\u4e00\u4e9b\u7a7a\u683c\u6765\u5bf9\u9f50\u76f8\u5e94\u90e8\u5206\u3002 \u8fd9\u5c55\u793a\u4e86\u95ed\u5305\u8bed\u6cd5\u5982\u4f55\u7c7b\u4f3c\u4e8e\u51fd\u6570\u8bed\u6cd5\uff0c\u9664\u4e86\u4f7f\u7528\u7ad6\u7ebf\u800c\u4e0d\u662f\u62ec\u53f7\u4ee5\u53ca\u51e0\u4e2a\u53ef\u9009\u7684\u8bed\u6cd5\u4e4b\u5916\uff1a fn add_one_v1 ( x : u32 ) -> u32 { x + 1 } // \u5c55\u793a\u4e86\u4e00\u4e2a\u51fd\u6570\u5b9a\u4e49 let add_one_v2 = | x : u32 | -> u32 { x + 1 }; // \u5c55\u793a\u4e86\u4e00\u4e2a\u5b8c\u6574\u6807\u6ce8\u7684\u95ed\u5305\u5b9a\u4e49 let add_one_v3 = | x | { x + 1 }; // \u5b9a\u4e49\u4e2d\u7701\u7565\u4e86\u7c7b\u578b\u6ce8\u89e3 let add_one_v4 = | x | x + 1 ; // \u53bb\u6389\u4e86\u53ef\u9009\u7684\u5927\u62ec\u53f7\uff0c\u56e0\u4e3a\u95ed\u5305\u4f53\u53ea\u6709\u4e00\u884c \u8c03\u7528\u95ed\u5305\u662f add_one_v3 \u548c add_one_v4 \u80fd\u591f\u7f16\u8bd1\u7684\u5fc5\u8981\u6761\u4ef6\uff0c\u56e0\u4e3a\u7c7b\u578b\u5c06\u4ece\u5176\u7528\u6cd5\u4e2d\u63a8\u65ad\u51fa\u6765\u3002 \u95ed\u5305\u5b9a\u4e49\u4f1a\u4e3a\u6bcf\u4e2a\u53c2\u6570\u548c\u8fd4\u56de\u503c\u63a8\u65ad\u4e00\u4e2a\u5177\u4f53\u7c7b\u578b\u3002 \u5982\u679c\u5c1d\u8bd5\u8c03\u7528\u95ed\u5305\u4e24\u6b21\uff0c\u7b2c\u4e00\u6b21\u4f7f\u7528 String \u7c7b\u578b\u4f5c\u4e3a\u53c2\u6570\u800c\u7b2c\u4e8c\u6b21\u4f7f\u7528 u32 \uff0c\u5219\u4f1a\u5f97\u5230\u4e00\u4e2a\u9519\u8bef\uff1a // \u5c1d\u8bd5\u8c03\u7528\u4e00\u4e2a\u88ab\u63a8\u65ad\u4e3a\u4e24\u4e2a\u4e0d\u540c\u7c7b\u578b\u7684\u95ed\u5305 fn main () { let example_closure = | x | x ; let s = example_closure ( String :: from ( \"hello\" )); // \u7528\u6cd5\u4e3aString let n = example_closure ( 5 ); // \u7528\u6cd5\u4e3au32 }","title":"\u95ed\u5305 - \u7c7b\u578b\u63a8\u65ad\u548c\u6ce8\u89e3"},{"location":"closures/#fn-trait","text":"\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u5b58\u653e\u95ed\u5305\u548c\u8c03\u7528\u95ed\u5305\u7ed3\u679c\u7684\u7ed3\u6784\u4f53\u3002\u8be5\u7ed3\u6784\u4f53\u53ea\u4f1a\u5728\u9700\u8981\u7ed3\u679c\u65f6\u6267\u884c\u95ed\u5305\uff0c\u5e76\u4f1a\u7f13\u5b58\u7ed3\u679c\u503c\uff0c\u8fd9\u6837\u4f59\u4e0b\u7684\u4ee3\u7801\u5c31\u4e0d\u5fc5\u518d\u8d1f\u8d23\u4fdd\u5b58\u7ed3\u679c\u5e76\u53ef\u4ee5\u590d\u7528\u8be5\u503c\u3002\u4f60\u53ef\u80fd\u89c1\u8fc7\u8fd9\u79cd\u6a21\u5f0f\u88ab\u79f0 memoization \u6216 lazy evaluation \uff08\u60f0\u6027\u6c42\u503c\uff09\u3002 \u4e3a\u4e86\u8ba9\u7ed3\u6784\u4f53\u5b58\u653e\u95ed\u5305\uff0c\u6211\u4eec\u9700\u8981\u6307\u5b9a\u95ed\u5305\u7684\u7c7b\u578b\uff0c\u56e0\u4e3a\u7ed3\u6784\u4f53\u5b9a\u4e49\u9700\u8981\u77e5\u9053\u5176\u6bcf\u4e00\u4e2a\u5b57\u6bb5\u7684\u7c7b\u578b\u3002\u6bcf\u4e00\u4e2a\u95ed\u5305\u5b9e\u4f8b\u6709\u5176\u81ea\u5df1\u72ec\u6709\u7684\u533f\u540d\u7c7b\u578b\uff1a\u4e5f\u5c31\u662f\u8bf4\uff0c\u5373\u4fbf\u4e24\u4e2a\u95ed\u5305\u6709\u7740\u76f8\u540c\u7684\u7b7e\u540d\uff0c\u4ed6\u4eec\u7684\u7c7b\u578b\u4ecd\u7136\u53ef\u4ee5\u88ab\u8ba4\u4e3a\u662f\u4e0d\u540c\u3002\u4e3a\u4e86\u5b9a\u4e49\u4f7f\u7528\u95ed\u5305\u7684\u7ed3\u6784\u4f53\u3001\u679a\u4e3e\u6216\u51fd\u6570\u53c2\u6570\uff0c\u9700\u8981\u50cf\u7b2c\u5341\u7ae0\u8ba8\u8bba\u7684\u90a3\u6837\u4f7f\u7528\u6cdb\u578b\u548c trait bound \u3002 Fn \u7cfb\u5217 trait \u7531\u6807\u51c6\u5e93\u63d0\u4f9b\u3002\u6240\u6709\u7684\u95ed\u5305\u90fd\u5b9e\u73b0\u4e86 trait Fn \u3001 FnMut \u6216 FnOnce \u4e2d\u7684\u4e00\u4e2a\u3002\u5728 \u201c\u95ed\u5305\u4f1a\u6355\u83b7\u5176\u73af\u5883\u201d \u90e8\u5206\u6211\u4eec\u4f1a\u8ba8\u8bba\u8fd9\u4e9b trait \u7684\u533a\u522b\uff1b\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\u53ef\u4ee5\u4f7f\u7528 Fn trait \u3002 \u4e3a\u4e86\u6ee1\u8db3 Fn trait bound \u6211\u4eec\u589e\u52a0\u4e86\u4ee3\u8868\u95ed\u5305\u6240\u5fc5\u987b\u7684\u53c2\u6570\u548c\u8fd4\u56de\u503c\u7c7b\u578b\u7684\u7c7b\u578b\u3002\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u95ed\u5305\u6709\u4e00\u4e2a u32 \u7684\u53c2\u6570\u5e76\u8fd4\u56de\u4e00\u4e2a u32 \uff0c\u8fd9\u6837\u6240\u6307\u5b9a\u7684 trait bound \u5c31\u662f Fn(u32) -> u32 \u3002 \u793a\u4f8b\u5c55\u793a\u4e86\u5b58\u653e\u4e86\u95ed\u5305\u548c\u4e00\u4e2a Option \u7ed3\u679c\u503c\u7684 Cacher \u7ed3\u6784\u4f53\u7684\u5b9a\u4e49\uff1a // \u5b9a\u4e49\u4e00\u4e2a Cacher \u7ed3\u6784\u4f53\u6765\u5728 calculation \u4e2d\u5b58\u653e\u95ed\u5305\u5e76\u5728 value \u4e2d\u5b58\u653e Option \u503c struct Cacher < T > where T : Fn ( u32 ) -> u32 , { calculation : T , value : Option < u32 > , } \u7ed3\u6784\u4f53 Cacher \u6709\u4e00\u4e2a\u6cdb\u578b T \u7684\u5b57\u6bb5 calculation \u3002 T \u7684 trait bound \u6307\u5b9a\u4e86 T \u662f\u4e00\u4e2a\u4f7f\u7528 Fn \u7684\u95ed\u5305\u3002 \u4efb\u4f55\u6211\u4eec\u5e0c\u671b\u50a8\u5b58\u5230 Cacher \u5b9e\u4f8b\u7684 calculation \u5b57\u6bb5\u7684\u95ed\u5305\u5fc5\u987b\u6709\u4e00\u4e2a u32 \u53c2\u6570\uff08\u7531 Fn \u4e4b\u540e\u7684\u62ec\u53f7\u7684\u5185\u5bb9\u6307\u5b9a\uff09\u5e76\u5fc5\u987b\u8fd4\u56de\u4e00\u4e2a u32 \uff08\u7531 -> \u4e4b\u540e\u7684\u5185\u5bb9\uff09\u3002 \u6ce8\u610f \uff1a \u51fd\u6570\u4e5f\u90fd\u5b9e\u73b0\u4e86\u8fd9\u4e09\u4e2a Fn trait \u3002\u5982\u679c\u4e0d\u9700\u8981\u6355\u83b7\u73af\u5883\u4e2d\u7684\u503c\uff0c\u5219\u53ef\u4ee5\u4f7f\u7528\u5b9e\u73b0\u4e86 Fn trait \u7684\u51fd\u6570\u800c\u4e0d\u662f\u95ed\u5305\u3002 \u5b57\u6bb5 value \u662f Option<u32> \u7c7b\u578b\u7684\u3002\u5728\u6267\u884c\u95ed\u5305\u4e4b\u524d\uff0c value \u5c06\u662f None \u3002\u5982\u679c\u4f7f\u7528 Cacher \u7684\u4ee3\u7801\u8bf7\u6c42\u95ed\u5305\u7684\u7ed3\u679c\uff0c\u8fd9\u65f6\u4f1a\u6267\u884c\u95ed\u5305\u5e76\u5c06\u7ed3\u679c\u50a8\u5b58\u5728 value \u5b57\u6bb5\u7684 Some \u6210\u5458\u4e2d\u3002\u63a5\u7740\u5982\u679c\u4ee3\u7801\u518d\u6b21\u8bf7\u6c42\u95ed\u5305\u7684\u7ed3\u679c\uff0c\u8fd9\u65f6\u4e0d\u518d\u6267\u884c\u95ed\u5305\uff0c\u800c\u662f\u4f1a\u8fd4\u56de\u5b58\u653e\u5728 Some \u6210\u5458\u4e2d\u7684\u7ed3\u679c\u3002 \u521a\u624d\u8ba8\u8bba\u7684\u6709\u5173 value \u5b57\u6bb5\u903b\u8f91\u5b9a\u4e49\u4e8e\u793a\u4f8b\uff1a struct Cacher < T > where T : Fn ( u32 ) -> u32 , { calculation : T , value : Option < u32 > , } impl < T > Cacher < T > where T : Fn ( u32 ) -> u32 , { fn new ( calculation : T ) -> Cacher < T > { Cacher { calculation , value : None , } } fn value ( & mut self , arg : u32 ) -> u32 { match self . value { Some ( v ) => v , None => { let v = ( self . calculation )( arg ); self . value = Some ( v ); v } } } } Cacher \u7ed3\u6784\u4f53\u7684\u5b57\u6bb5\u662f\u79c1\u6709\u7684\uff0c\u56e0\u4e3a\u6211\u4eec\u5e0c\u671b Cacher \u7ba1\u7406\u8fd9\u4e9b\u503c\u800c\u4e0d\u662f\u4efb\u7531\u8c03\u7528\u4ee3\u7801\u6f5c\u5728\u7684\u76f4\u63a5\u6539\u53d8\u4ed6\u4eec\u3002 \u5f53\u8c03\u7528\u4ee3\u7801\u9700\u8981\u95ed\u5305\u7684\u6267\u884c\u7ed3\u679c\u65f6\uff0c\u4e0d\u540c\u4e8e\u76f4\u63a5\u8c03\u7528\u95ed\u5305\uff0c\u5b83\u4f1a\u8c03\u7528 value \u65b9\u6cd5\u3002 \u8fd9\u4e2a\u65b9\u6cd5\u4f1a\u68c0\u67e5 self.value \u662f\u5426\u5df2\u7ecf\u6709\u4e86\u4e00\u4e2a Some \u7684\u7ed3\u679c\u503c\uff1b \u5982\u679c\u6709\uff0c\u5b83\u8fd4\u56de Some \u4e2d\u7684\u503c\u5e76\u4e0d\u4f1a\u518d\u6b21\u6267\u884c\u95ed\u5305\u3002 \u5982\u679c self.value \u662f None \uff0c\u5219\u4f1a\u8c03\u7528 self.calculation \u4e2d\u50a8\u5b58\u7684\u95ed\u5305\uff0c\u5c06\u7ed3\u679c\u4fdd\u5b58\u5230 self.value \u4ee5\u4fbf\u5c06\u6765\u4f7f\u7528\uff0c\u5e76\u540c\u65f6\u8fd4\u56de\u7ed3\u679c\u503c\u3002 // snap... fn generate_workout ( intensity : u32 , random_number : u32 ) { let mut expensive_result = Cacher :: new ( | num | { println! ( \"\u6162\u6162\u8ba1\u7b97...\" ); thread :: sleep ( Duration :: from_secs ( 2 )); num }); if intensity < 25 { println! ( \"\u4eca\u5929, \u505a {} \u4e2a\u4fef\u5367\u6491!\" , expensive_result . value ( intensity )); println! ( \"\u4e0b\u4e00\u6b65\uff0c\u505a {} \u4e2a\u4ef0\u5367\u8d77\u5750\uff01\" , expensive_result . value ( intensity ) ); } else { if random_number == 3 { println! ( \"\u4eca\u5929\u4f11\u606f\u4e00\u4e0b\uff01 \u8bb0\u5f97\u4fdd\u6301\u6c34\u5206\uff01\" ) } else { println! ( \"\u4eca\u5929\uff0c\u8dd1 {} \u5206\u949f\uff01\" , expensive_result . value ( intensity )); } } } \u4e0d\u540c\u4e8e\u76f4\u63a5\u5c06\u95ed\u5305\u4fdd\u5b58\u8fdb\u4e00\u4e2a\u53d8\u91cf\uff0c\u6211\u4eec\u4fdd\u5b58\u4e00\u4e2a\u65b0\u7684 Cacher \u5b9e\u4f8b\u6765\u5b58\u653e\u95ed\u5305\u3002\u63a5\u7740\uff0c\u5728\u6bcf\u4e00\u4e2a\u9700\u8981\u7ed3\u679c\u7684\u5730\u65b9\uff0c\u8c03\u7528 Cacher \u5b9e\u4f8b\u7684 value \u65b9\u6cd5\u3002\u53ef\u4ee5\u8c03\u7528 value \u65b9\u6cd5\u4efb\u610f\u591a\u6b21\uff0c\u6216\u8005\u4e00\u6b21\u4e5f\u4e0d\u8c03\u7528\uff0c\u800c\u6162\u8ba1\u7b97\u6700\u591a\u53ea\u4f1a\u8fd0\u884c\u4e00\u6b21\u3002","title":"\u4f7f\u7528\u5e26\u6709\u6cdb\u578b\u548c Fn trait \u7684\u95ed\u5305"},{"location":"closures/#cacher","text":"\u503c\u7f13\u5b58\u662f\u4e00\u79cd\u66f4\u52a0\u5e7f\u6cdb\u7684\u5b9e\u7528\u884c\u4e3a\uff0c\u6211\u4eec\u53ef\u80fd\u5e0c\u671b\u5728\u4ee3\u7801\u4e2d\u7684\u5176\u4ed6\u95ed\u5305\u4e2d\u4e5f\u4f7f\u7528\u4ed6\u4eec\u3002\u7136\u800c\uff0c\u76ee\u524d Cacher \u7684\u5b9e\u73b0\u5b58\u5728\u4e24\u4e2a\u5c0f\u95ee\u9898\uff0c\u8fd9\u4f7f\u5f97\u5728\u4e0d\u540c\u4e0a\u4e0b\u6587\u4e2d\u590d\u7528\u53d8\u5f97\u5f88\u56f0\u96be\u3002 \u7b2c\u4e00\u4e2a\u95ee\u9898\u662f Cacher \u5b9e\u4f8b\u5047\u8bbe\u5bf9\u4e8e value \u65b9\u6cd5\u7684\u4efb\u4f55 arg \u53c2\u6570\u503c\u603b\u662f\u4f1a\u8fd4\u56de\u76f8\u540c\u7684\u503c\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u8fd9\u4e2a Cacher \u7684\u6d4b\u8bd5\u4f1a\u5931\u8d25\uff1a #[cfg(test)] mod tests { use super :: * ; #[test] fn call_with_different_values () { let mut c = Cacher :: new ( | a | a ); let v1 = c . value ( 1 ); let v2 = c . value ( 2 ); assert_eq! ( v2 , 2 ); } } \u8fd9\u4e2a\u6d4b\u8bd5\u4f7f\u7528\u8fd4\u56de\u4f20\u9012\u7ed9\u5b83\u7684\u503c\u7684\u95ed\u5305\u521b\u5efa\u4e86\u4e00\u4e2a\u65b0\u7684 Cacher \u5b9e\u4f8b\u3002\u4f7f\u7528\u4e3a 1 \u7684 arg \u548c\u4e3a 2 \u7684 arg \u8c03\u7528 Cacher \u5b9e\u4f8b\u7684 value \u65b9\u6cd5\uff0c\u540c\u65f6\u6211\u4eec\u671f\u671b\u4f7f\u7528\u4e3a 2 \u7684 arg \u8c03\u7528 value \u4f1a\u8fd4\u56de 2 \u3002 \u4f7f\u7528\u793a\u4f8b\u7684 Cacher \u5b9e\u73b0\u8fd0\u884c\u6d4b\u8bd5\uff0c\u5b83\u4f1a\u5728 assert_eq! \u5931\u8d25\u5e76\u663e\u793a\u5982\u4e0b\u4fe1\u606f\uff1a $ cargo test Compiling cacher v0.1.0 ( file:///projects/cacher ) Finished test [ unoptimized + debuginfo ] target ( s ) in 0 .72s Running unittests ( target/debug/deps/cacher-074d7c200c000afa ) running 1 test test tests::call_with_different_values ... FAILED failures: ---- tests::call_with_different_values stdout ---- thread 'main' panicked at 'assertion failed: `(left == right)` left: `1`, right: `2`' , src/lib.rs:43:9 note: run with ` RUST_BACKTRACE = 1 ` environment variable to display a backtrace failures: tests::call_with_different_values test result: FAILED. 0 passed ; 1 failed ; 0 ignored ; 0 measured ; 0 filtered out ; finished in 0 .00s error: test failed, to rerun pass '--lib' \u8fd9\u91cc\u7684\u95ee\u9898\u662f\u7b2c\u4e00\u6b21\u4f7f\u7528 1 \u8c03\u7528 c.value \uff0c Cacher \u5b9e\u4f8b\u5c06 Some(1) \u4fdd\u5b58\u8fdb self.value \u3002\u5728\u8fd9\u4e4b\u540e\uff0c\u65e0\u8bba\u4f20\u9012\u4ec0\u4e48\u503c\u8c03\u7528 value \uff0c\u5b83\u603b\u662f\u4f1a\u8fd4\u56de 1 \u3002 \u5c1d\u8bd5\u4fee\u6539 Cacher \u5b58\u653e\u4e00\u4e2a\u54c8\u5e0c map \u800c\u4e0d\u662f\u5355\u72ec\u4e00\u4e2a\u503c\u3002\u54c8\u5e0c map \u7684 key \u5c06\u662f\u4f20\u9012\u8fdb\u6765\u7684 arg \u503c\uff0c\u800c value \u5219\u662f\u5bf9\u5e94 key \u8c03\u7528\u95ed\u5305\u7684\u7ed3\u679c\u503c\u3002\u76f8\u6bd4\u4e4b\u524d\u68c0\u67e5 self.value \u76f4\u63a5\u662f Some \u8fd8\u662f None \u503c\uff0c\u73b0\u5728 value \u51fd\u6570\u4f1a\u5728\u54c8\u5e0c map \u4e2d\u5bfb\u627e arg \uff0c\u5982\u679c\u627e\u5230\u7684\u8bdd\u5c31\u8fd4\u56de\u5176\u5bf9\u5e94\u7684\u503c\u3002\u5982\u679c\u4e0d\u5b58\u5728\uff0c Cacher \u4f1a\u8c03\u7528\u95ed\u5305\u5e76\u5c06\u7ed3\u679c\u503c\u4fdd\u5b58\u5728\u54c8\u5e0c map \u5bf9\u5e94 arg \u503c\u7684\u4f4d\u7f6e\u3002 \u5f53\u524d Cacher \u5b9e\u73b0\u7684\u7b2c\u4e8c\u4e2a\u95ee\u9898\u662f\u5b83\u7684\u5e94\u7528\u88ab\u9650\u5236\u4e3a\u53ea\u63a5\u53d7\u83b7\u53d6\u4e00\u4e2a u32 \u503c\u5e76\u8fd4\u56de\u4e00\u4e2a u32 \u503c\u7684\u95ed\u5305\u3002\u6bd4\u5982\u8bf4\uff0c\u6211\u4eec\u53ef\u80fd\u9700\u8981\u80fd\u591f\u7f13\u5b58\u4e00\u4e2a\u83b7\u53d6\u5b57\u7b26\u4e32 slice \u5e76\u8fd4\u56de usize \u503c\u7684\u95ed\u5305\u7684\u7ed3\u679c\u3002\u8bf7\u5c1d\u8bd5\u5f15\u5165\u66f4\u591a\u6cdb\u578b\u53c2\u6570\u6765\u589e\u52a0 Cacher \u529f\u80fd\u7684\u7075\u6d3b\u6027\u3002","title":"Cacher \u5b9e\u73b0\u7684\u9650\u5236"},{"location":"closures/#2","text":"use std :: collections :: HashMap ; struct Cacher < T > where T : Fn ( u32 ) -> u32 , { calculation : T , map : HashMap < u32 , u32 > , // \u4f7f\u7528hash map \u5b58\u50a8 } impl < T > Cacher < T > where T : Fn ( u32 ) -> u32 , { fn new ( calculation : T ) -> Cacher < T > { Cacher { calculation , map : HashMap :: new (), } } fn value ( & mut self , arg : u32 ) -> u32 { let value = self . map . get ( & arg ); if let Some ( v ) = value { * v } else { let v = ( self . calculation )( arg ); self . map . insert ( arg , v ); v } } } // \u6d4b\u8bd5\u53ef\u4ee5\u901a\u8fc7 #[test] fn call_with_different_values () { let mut c = Cacher :: new ( | a | a ); let v1 = c . value ( 1 ); let v2 = c . value ( 2 ); assert_eq! ( v1 , 1 ); assert_eq! ( v2 , 2 ); }","title":"\u9488\u5bf9\u95ee\u98982\u7684\u5b8c\u5584"},{"location":"closures/#_5","text":"\u95ed\u5305\u8fd8\u6709\u53e6\u4e00\u4e2a\u51fd\u6570\u6240\u6ca1\u6709\u7684\u529f\u80fd\uff1a \u4ed6\u4eec\u53ef\u4ee5\u6355\u83b7\u5176\u73af\u5883\u5e76\u8bbf\u95ee\u5176\u88ab\u5b9a\u4e49\u7684\u4f5c\u7528\u57df\u7684\u53d8\u91cf\u3002 fn main () { let x = 4 ; let equal_to_x = | z | z == x ; let y = 4 ; assert! ( equal_to_x ( y )); } \u8fd9\u91cc\uff0c\u5373\u4fbf x \u5e76\u4e0d\u662f equal_to_x \u7684\u4e00\u4e2a\u53c2\u6570\uff0c equal_to_x \u95ed\u5305\u4e5f\u88ab\u5141\u8bb8\u4f7f\u7528\u53d8\u91cf x \uff0c\u56e0\u4e3a\u5b83\u4e0e equal_to_x \u5b9a\u4e49\u4e8e\u76f8\u540c\u7684\u4f5c\u7528\u57df\u3002 \u5f53\u95ed\u5305\u4ece\u73af\u5883\u4e2d\u6355\u83b7\u4e00\u4e2a\u503c\uff0c\u95ed\u5305\u4f1a\u5728\u95ed\u5305\u4f53\u4e2d\u50a8\u5b58\u8fd9\u4e2a\u503c\u4ee5\u4f9b\u4f7f\u7528\u3002 \u8fd9\u4f1a\u4f7f\u7528\u5185\u5b58\u5e76\u4ea7\u751f\u989d\u5916\u7684\u5f00\u9500\uff0c\u5728\u66f4\u4e00\u822c\u7684\u573a\u666f\u4e2d\uff0c\u5f53\u6211\u4eec\u4e0d\u9700\u8981\u95ed\u5305\u6765\u6355\u83b7\u73af\u5883\u65f6\uff0c\u6211\u4eec\u4e0d\u5e0c\u671b\u4ea7\u751f\u8fd9\u4e9b\u5f00\u9500\u3002 \u56e0\u4e3a\u51fd\u6570\u4ece\u672a\u5141\u8bb8\u6355\u83b7\u73af\u5883\uff0c\u5b9a\u4e49\u548c\u4f7f\u7528\u51fd\u6570\u4e5f\u5c31\u4ece\u4e0d\u4f1a\u6709\u8fd9\u4e9b\u989d\u5916\u5f00\u9500\u3002 \u95ed\u5305\u53ef\u4ee5\u901a\u8fc7\u4e09\u79cd\u65b9\u5f0f\u6355\u83b7\u5176\u73af\u5883\uff0c\u4ed6\u4eec\u76f4\u63a5\u5bf9\u5e94\u51fd\u6570\u7684\u4e09\u79cd\u83b7\u53d6\u53c2\u6570\u7684\u65b9\u5f0f\uff1a \u83b7\u53d6\u6240\u6709\u6743 \uff0c \u53ef\u53d8\u501f\u7528 \u548c \u4e0d\u53ef\u53d8\u501f\u7528 \u3002 \u8fd9\u4e09\u79cd\u6355\u83b7\u503c\u7684\u65b9\u5f0f\u88ab\u7f16\u7801\u4e3a\u5982\u4e0b\u4e09\u4e2a Fn trait \uff1a FnOnce \u6d88\u8d39\u4ece\u5468\u56f4\u4f5c\u7528\u57df\u6355\u83b7\u7684\u53d8\u91cf\uff0c\u95ed\u5305\u5468\u56f4\u7684\u4f5c\u7528\u57df\u88ab\u79f0\u4e3a\u5176 \u73af\u5883 \uff0c environment \u3002\u4e3a\u4e86\u6d88\u8d39\u6355\u83b7\u5230\u7684\u53d8\u91cf\uff0c\u95ed\u5305\u5fc5\u987b\u83b7\u53d6\u5176\u6240\u6709\u6743\u5e76\u5728\u5b9a\u4e49\u95ed\u5305\u65f6\u5c06\u5176\u79fb\u52a8\u8fdb\u95ed\u5305\u3002\u5176\u540d\u79f0\u7684 Once \u90e8\u5206\u4ee3\u8868\u4e86\u95ed\u5305\u4e0d\u80fd\u591a\u6b21\u83b7\u53d6\u76f8\u540c\u53d8\u91cf\u7684\u6240\u6709\u6743\u7684\u4e8b\u5b9e\uff0c\u6240\u4ee5\u5b83\u53ea\u80fd\u88ab\u8c03\u7528\u4e00\u6b21\u3002 FnMut \u83b7\u53d6\u53ef\u53d8\u7684\u501f\u7528\u503c\u6240\u4ee5\u53ef\u4ee5\u6539\u53d8\u5176\u73af\u5883 Fn \u4ece\u5176\u73af\u5883\u83b7\u53d6\u4e0d\u53ef\u53d8\u7684\u501f\u7528\u503c \u5f53\u521b\u5efa\u4e00\u4e2a\u95ed\u5305\u65f6\uff0cRust \u6839\u636e\u5176\u5982\u4f55\u4f7f\u7528\u73af\u5883\u4e2d\u53d8\u91cf\u6765\u63a8\u65ad\u6211\u4eec\u5e0c\u671b\u5982\u4f55\u5f15\u7528\u73af\u5883\u3002 \u7531\u4e8e\u6240\u6709\u95ed\u5305\u90fd\u53ef\u4ee5\u88ab\u8c03\u7528\u81f3\u5c11\u4e00\u6b21\uff0c\u6240\u4ee5\u6240\u6709\u95ed\u5305\u90fd\u5b9e\u73b0\u4e86 FnOnce \u3002 \u90a3\u4e9b\u5e76\u6ca1\u6709\u79fb\u52a8\u88ab\u6355\u83b7\u53d8\u91cf\u7684\u6240\u6709\u6743\u5230\u95ed\u5305\u5185\u7684\u95ed\u5305\u4e5f\u5b9e\u73b0\u4e86 FnMut \uff0c\u800c\u4e0d\u9700\u8981\u5bf9\u88ab\u6355\u83b7\u7684\u53d8\u91cf\u8fdb\u884c\u53ef\u53d8\u8bbf\u95ee\u7684\u95ed\u5305\u5219\u4e5f\u5b9e\u73b0\u4e86 Fn \u3002 \u5728\u4e0a\u9762\u793a\u4f8b\u4e2d\uff0c equal_to_x \u95ed\u5305\u4e0d\u53ef\u53d8\u7684\u501f\u7528\u4e86 x \uff08\u6240\u4ee5 equal_to_x \u5177\u6709 Fn trait \uff09\uff0c\u56e0\u4e3a\u95ed\u5305\u4f53\u53ea\u9700\u8981\u8bfb\u53d6 x \u7684\u503c\u3002 \u5982\u679c\u5e0c\u671b\u5f3a\u5236\u95ed\u5305\u83b7\u53d6\u5176\u4f7f\u7528\u7684\u73af\u5883\u503c\u7684\u6240\u6709\u6743\uff0c\u53ef\u4ee5\u5728\u53c2\u6570\u5217\u8868\u524d\u4f7f\u7528 move \u5173\u952e\u5b57\u3002\u8fd9\u4e2a\u6280\u5de7\u5728\u5c06\u95ed\u5305\u4f20\u9012\u7ed9\u65b0\u7ebf\u7a0b\u4ee5\u4fbf\u5c06\u6570\u636e\u79fb\u52a8\u5230\u65b0\u7ebf\u7a0b\u4e2d\u65f6\u6700\u4e3a\u5b9e\u7528\u3002 \u6ce8\u610f \uff1a \u5373\u4f7f\u5176\u6355\u83b7\u7684\u503c\u5df2\u7ecf\u88ab\u79fb\u52a8\u4e86\uff0c move \u95ed\u5305\u4ecd\u9700\u8981\u5b9e\u73b0 Fn \u6216 FnMut \u3002\u8fd9\u662f\u56e0\u4e3a\u95ed\u5305\u6240\u5b9e\u73b0\u7684 trait \u662f\u7531\u95ed\u5305\u6240\u6355\u83b7\u4e86\u4ec0\u4e48\u503c\u800c\u4e0d\u662f\u5982\u4f55\u6355\u83b7\u6240\u51b3\u5b9a\u7684\u3002\u800c move \u5173\u952e\u5b57\u4ec5\u4ee3\u8868\u4e86\u540e\u8005\u3002 \u4fee\u6539\u4e86\u793a\u4f8b\u4e2d\u7684\u4ee3\u7801\uff08\u4f5c\u4e3a\u6f14\u793a\uff09\uff0c\u5728\u95ed\u5305\u5b9a\u4e49\u4e2d\u589e\u52a0 move \u5173\u952e\u5b57\u5e76\u4f7f\u7528 vector \u4ee3\u66ff\u6574\u578b\uff0c\u56e0\u4e3a\u6574\u578b\u53ef\u4ee5\u88ab\u62f7\u8d1d\u800c\u4e0d\u662f\u79fb\u52a8\uff1b\u6ce8\u610f\u8fd9\u4e9b\u4ee3\u7801\u8fd8\u4e0d\u80fd\u7f16\u8bd1\uff1a fn main () { let x = vec! [ 1 , 2 , 3 ]; let equal_to_x = move | z | z == x ; println! ( \"\u4e0d\u80fd\u5728\u8fd9\u513f\u4f7f\u7528 x: {:?}\" , x ); let y = vec! [ 1 , 2 , 3 ]; assert! ( equal_to_x ( y )); } \u8fd9\u4e2a\u4f8b\u5b50\u5e76\u4e0d\u80fd\u7f16\u8bd1\uff0c\u4f1a\u4ea7\u751f\u4ee5\u4e0b\u9519\u8bef\uff1a $ cargo run Compiling equal-to-x v0.1.0 ( file:///projects/equal-to-x ) error [ E0382 ] : borrow of moved value: ` x ` --> src/main.rs:6:40 | 2 | let x = vec! [ 1 , 2 , 3 ] ; | - move occurs because ` x ` has type ` Vec<i32> ` , which does not implement the ` Copy ` trait 3 | 4 | let equal_to_x = move | z | z == x ; | -------- - variable moved due to use in closure | | | value moved into closure here 5 | 6 | println! ( \"can't use x here: {:?}\" , x ) ; | ^ value borrowed here after move For more information about this error, try ` rustc --explain E0382 ` . error: could not compile ` equal-to-x ` due to previous error x \u88ab\u79fb\u52a8\u8fdb\u4e86\u95ed\u5305\uff0c\u56e0\u4e3a\u95ed\u5305\u4f7f\u7528 move \u5173\u952e\u5b57\u5b9a\u4e49\u3002\u63a5\u7740\u95ed\u5305\u83b7\u53d6\u4e86 x \u7684\u6240\u6709\u6743\uff0c\u540c\u65f6 main \u5c31\u4e0d\u518d\u5141\u8bb8\u5728 println! \u8bed\u53e5\u4e2d\u4f7f\u7528 x \u4e86\u3002\u53bb\u6389 println! \u5373\u53ef\u4fee\u590d\u95ee\u9898\u3002 \u5927\u90e8\u5206\u9700\u8981\u6307\u5b9a\u4e00\u4e2a Fn \u7cfb\u5217 trait bound \u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u4ece Fn \u5f00\u59cb\uff0c\u800c\u7f16\u8bd1\u5668\u4f1a\u6839\u636e\u95ed\u5305\u4f53\u4e2d\u7684\u60c5\u51b5\u544a\u8bc9\u4f60\u662f\u5426\u9700\u8981 FnMut \u6216 FnOnce \u3002","title":"\u95ed\u5305\u4f1a\u6355\u83b7\u5176\u73af\u5883"},{"location":"closures/#_6","text":"\u8fed\u4ee3\u5668 \uff08iterator\uff09\u8d1f\u8d23\u904d\u5386\u5e8f\u5217\u4e2d\u7684\u6bcf\u4e00\u9879\u548c\u51b3\u5b9a\u5e8f\u5217\u4f55\u65f6\u7ed3\u675f\u7684\u903b\u8f91\u3002\u5f53\u4f7f\u7528\u8fed\u4ee3\u5668\u65f6\uff0c\u6211\u4eec\u65e0\u9700\u91cd\u65b0\u5b9e\u73b0\u8fd9\u4e9b\u903b\u8f91\u3002 \u5728 Rust \u4e2d\uff0c\u8fed\u4ee3\u5668\u662f \u60f0\u6027\u7684 \uff08lazy\uff09\uff0c\u8fd9\u610f\u5473\u7740\u5728\u8c03\u7528\u65b9\u6cd5\u4f7f\u7528\u8fed\u4ee3\u5668\u4e4b\u524d\u5b83\u90fd\u4e0d\u4f1a\u6709\u6548\u679c\u3002\u4f8b\u5982\uff0c\u793a\u4f8b\u4ee3\u7801\u901a\u8fc7\u8c03\u7528\u5b9a\u4e49\u4e8e Vec \u4e0a\u7684 iter \u65b9\u6cd5\u5728\u4e00\u4e2a vector v1 \u4e0a\u521b\u5efa\u4e86\u4e00\u4e2a\u8fed\u4ee3\u5668\u3002\u8fd9\u6bb5\u4ee3\u7801\u672c\u8eab\u6ca1\u6709\u4efb\u4f55\u7528\u5904\uff1a let v1 = vec! [ 1 , 2 , 3 ]; let v1_iter = v1 . iter (); \u4e00\u65e6\u521b\u5efa\u8fed\u4ee3\u5668\u4e4b\u540e\uff0c\u53ef\u4ee5\u9009\u62e9\u7528\u591a\u79cd\u65b9\u5f0f\u5229\u7528\u5b83\u3002 \u8fed\u4ee3\u5668\u88ab\u50a8\u5b58\u5728 v1_iter \u53d8\u91cf\u4e2d\uff0c\u800c\u8fd9\u65f6\u6ca1\u6709\u8fdb\u884c\u8fed\u4ee3\u3002\u4e00\u65e6 for \u5faa\u73af\u5f00\u59cb\u4f7f\u7528 v1_iter \uff0c\u63a5\u7740\u8fed\u4ee3\u5668\u4e2d\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\u88ab\u7528\u4e8e\u5faa\u73af\u7684\u4e00\u6b21\u8fed\u4ee3\uff0c\u8fd9\u4f1a\u6253\u5370\u51fa\u5176\u6bcf\u4e00\u4e2a\u503c\uff1a fn main () { let v1 = vec! [ 1 , 2 , 3 ]; let v1_iter = v1 . iter (); for val in v1_iter { println! ( \"Got: {}\" , val ); } } \u5728\u6807\u51c6\u5e93\u4e2d\u6ca1\u6709\u63d0\u4f9b\u8fed\u4ee3\u5668\u7684\u8bed\u8a00\u4e2d\uff0c\u6211\u4eec\u53ef\u80fd\u4f1a\u4f7f\u7528\u4e00\u4e2a\u4ece 0 \u5f00\u59cb\u7684\u7d22\u5f15\u53d8\u91cf\uff0c\u4f7f\u7528\u8fd9\u4e2a\u53d8\u91cf\u7d22\u5f15 vector \u4e2d\u7684\u503c\uff0c\u5e76\u5faa\u73af\u589e\u52a0\u5176\u503c\u76f4\u5230\u8fbe\u5230 vector \u7684\u5143\u7d20\u6570\u91cf\u3002 \u8fed\u4ee3\u5668\u4e3a\u6211\u4eec\u5904\u7406\u4e86\u6240\u6709\u8fd9\u4e9b\u903b\u8f91\uff0c\u8fd9\u51cf\u5c11\u4e86\u91cd\u590d\u4ee3\u7801\u5e76\u6d88\u9664\u4e86\u6f5c\u5728\u7684\u6df7\u4e71\u3002\u53e6\u5916\uff0c\u8fed\u4ee3\u5668\u7684\u5b9e\u73b0\u65b9\u5f0f\u63d0\u4f9b\u4e86\u5bf9\u591a\u79cd\u4e0d\u540c\u7684\u5e8f\u5217\u4f7f\u7528\u76f8\u540c\u903b\u8f91\u7684\u7075\u6d3b\u6027\uff0c\u800c\u4e0d\u4ec5\u4ec5\u662f\u50cf vector \u8fd9\u6837\u53ef\u7d22\u5f15\u7684\u6570\u636e\u7ed3\u6784.\u8ba9\u6211\u4eec\u770b\u770b\u8fed\u4ee3\u5668\u662f\u5982\u4f55\u505a\u5230\u8fd9\u4e9b\u7684\u3002","title":"\u8fed\u4ee3\u5668"},{"location":"closures/#iterator-trait-next","text":"\u8fed\u4ee3\u5668\u90fd\u5b9e\u73b0\u4e86\u4e00\u4e2a\u53eb\u505a Iterator \u7684\u5b9a\u4e49\u4e8e\u6807\u51c6\u5e93\u7684 trait\u3002\u8fd9\u4e2a trait \u7684\u5b9a\u4e49\u770b\u8d77\u6765\u50cf\u8fd9\u6837\uff1a pub trait Iterator { type Item ; fn next ( & mut self ) -> Option < Self :: Item > ; // \u6b64\u5904\u7701\u7565\u4e86\u65b9\u6cd5\u7684\u9ed8\u8ba4\u5b9e\u73b0 } \u6ce8\u610f\u8fd9\u91cc\u6709\u4e00\u4e2a\u6211\u4eec\u8fd8\u672a\u8bb2\u5230\u7684\u65b0\u8bed\u6cd5\uff1a type Item \u548c Self::Item \uff0c\u4ed6\u4eec\u5b9a\u4e49\u4e86 trait \u7684 \u5173\u8054\u7c7b\u578b \uff08associated type\uff09\u3002 \u7b2c\u5341\u4e5d\u7ae0\u4f1a\u6df1\u5165\u8bb2\u89e3\u5173\u8054\u7c7b\u578b\uff0c\u4e0d\u8fc7\u73b0\u5728\u53ea\u9700\u77e5\u9053\u8fd9\u6bb5\u4ee3\u7801\u8868\u660e\u5b9e\u73b0 Iterator trait \u8981\u6c42\u540c\u65f6\u5b9a\u4e49\u4e00\u4e2a Item \u7c7b\u578b\uff0c\u8fd9\u4e2a Item \u7c7b\u578b\u88ab\u7528\u4f5c next \u65b9\u6cd5\u7684\u8fd4\u56de\u503c\u7c7b\u578b\u3002 \u6362\u53e5\u8bdd\u8bf4\uff0c Item \u7c7b\u578b\u5c06\u662f\u8fed\u4ee3\u5668\u8fd4\u56de\u5143\u7d20\u7684\u7c7b\u578b\u3002 next \u662f Iterator \u5b9e\u73b0\u8005\u88ab\u8981\u6c42\u5b9a\u4e49\u7684\u552f\u4e00\u65b9\u6cd5\u3002 next \u4e00\u6b21\u8fd4\u56de\u8fed\u4ee3\u5668\u4e2d\u7684\u4e00\u4e2a\u9879\uff0c\u5c01\u88c5\u5728 Some \u4e2d\uff0c\u5f53\u8fed\u4ee3\u5668\u7ed3\u675f\u65f6\uff0c\u5b83\u8fd4\u56de None \u3002 \u53ef\u4ee5\u76f4\u63a5\u8c03\u7528\u8fed\u4ee3\u5668\u7684 next \u65b9\u6cd5\uff1b\u793a\u4f8b\u6709\u4e00\u4e2a\u6d4b\u8bd5\u5c55\u793a\u4e86\u91cd\u590d\u8c03\u7528\u7531 vector \u521b\u5efa\u7684\u8fed\u4ee3\u5668\u7684 next \u65b9\u6cd5\u6240\u5f97\u5230\u7684\u503c\uff1a #[test] fn iterator_demonstration () { let v1 = vec! [ 1 , 2 , 3 ]; let mut v1_iter = v1 . iter (); assert_eq! ( v1_iter . next (), Some ( & 1 )); assert_eq! ( v1_iter . next (), Some ( & 2 )); assert_eq! ( v1_iter . next (), Some ( & 3 )); assert_eq! ( v1_iter . next (), None ); } \u6ce8\u610f v1_iter \u9700\u8981\u662f\u53ef\u53d8\u7684\uff1a\u5728\u8fed\u4ee3\u5668\u4e0a\u8c03\u7528 next \u65b9\u6cd5\u6539\u53d8\u4e86\u8fed\u4ee3\u5668\u4e2d\u7528\u6765\u8bb0\u5f55\u5e8f\u5217\u4f4d\u7f6e\u7684\u72b6\u6001\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u4ee3\u7801 \u6d88\u8d39 \uff08consume\uff09\u4e86\uff0c\u6216\u4f7f\u7528\u4e86\u8fed\u4ee3\u5668\u3002\u6bcf\u4e00\u4e2a next \u8c03\u7528\u90fd\u4f1a\u4ece\u8fed\u4ee3\u5668\u4e2d\u6d88\u8d39\u4e00\u4e2a\u9879\u3002\u4f7f\u7528 for \u5faa\u73af\u65f6\u65e0\u9700\u4f7f v1_iter \u53ef\u53d8\u56e0\u4e3a for \u5faa\u73af\u4f1a\u83b7\u53d6 v1_iter \u7684\u6240\u6709\u6743\u5e76\u5728\u540e\u53f0\u4f7f v1_iter \u53ef\u53d8\u3002 \u53e6\u5916\u9700\u8981\u6ce8\u610f\u5230\u4ece next \u8c03\u7528\u4e2d\u5f97\u5230\u7684\u503c\u662f vector \u7684\u4e0d\u53ef\u53d8\u5f15\u7528\u3002 iter \u65b9\u6cd5\u751f\u6210\u4e00\u4e2a\u4e0d\u53ef\u53d8\u5f15\u7528\u7684\u8fed\u4ee3\u5668\u3002\u5982\u679c\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u83b7\u53d6 v1 \u6240\u6709\u6743\u5e76\u8fd4\u56de\u62e5\u6709\u6240\u6709\u6743\u7684\u8fed\u4ee3\u5668\uff0c\u5219\u53ef\u4ee5\u8c03\u7528 into_iter \u800c\u4e0d\u662f iter \u3002\u7c7b\u4f3c\u7684\uff0c\u5982\u679c\u6211\u4eec\u5e0c\u671b\u8fed\u4ee3\u53ef\u53d8\u5f15\u7528\uff0c\u5219\u53ef\u4ee5\u8c03\u7528 iter_mut \u800c\u4e0d\u662f iter \u3002","title":"Iterator trait \u548c next \u65b9\u6cd5"},{"location":"closures/#_7","text":"Iterator trait \u6709\u4e00\u7cfb\u5217\u4e0d\u540c\u7684\u7531\u6807\u51c6\u5e93\u63d0\u4f9b\u9ed8\u8ba4\u5b9e\u73b0\u7684\u65b9\u6cd5\uff1b\u4f60\u53ef\u4ee5\u5728 Iterator trait \u7684 \u6807\u51c6\u5e93 API \u6587\u6863\u4e2d\u627e\u5230\u6240\u6709\u8fd9\u4e9b\u65b9\u6cd5\u3002\u4e00\u4e9b\u65b9\u6cd5\u5728\u5176\u5b9a\u4e49\u4e2d\u8c03\u7528\u4e86 next \u65b9\u6cd5\uff0c\u8fd9\u4e5f\u5c31\u662f\u4e3a\u4ec0\u4e48\u5728\u5b9e\u73b0 Iterator trait \u65f6\u8981\u6c42\u5b9e\u73b0 next \u65b9\u6cd5\u7684\u539f\u56e0\u3002 \u8fd9\u4e9b\u8c03\u7528 next \u65b9\u6cd5\u7684\u65b9\u6cd5\u88ab\u79f0\u4e3a \u6d88\u8d39\u9002\u914d\u5668 \uff08consuming adaptors\uff09\uff0c\u56e0\u4e3a\u8c03\u7528\u4ed6\u4eec\u4f1a\u6d88\u8017\u8fed\u4ee3\u5668\u3002\u4e00\u4e2a\u6d88\u8d39\u9002\u914d\u5668\u7684\u4f8b\u5b50\u662f sum \u65b9\u6cd5\u3002\u8fd9\u4e2a\u65b9\u6cd5\u83b7\u53d6\u8fed\u4ee3\u5668\u7684\u6240\u6709\u6743\u5e76\u53cd\u590d\u8c03\u7528 next \u6765\u904d\u5386\u8fed\u4ee3\u5668\uff0c\u56e0\u800c\u4f1a\u6d88\u8d39\u8fed\u4ee3\u5668\u3002\u5f53\u5176\u904d\u5386\u6bcf\u4e00\u4e2a\u9879\u65f6\uff0c\u5b83\u5c06\u6bcf\u4e00\u4e2a\u9879\u52a0\u603b\u5230\u4e00\u4e2a\u603b\u548c\u5e76\u5728\u8fed\u4ee3\u5b8c\u6210\u65f6\u8fd4\u56de\u603b\u548c\u3002 \u793a\u4f8b\u6709\u4e00\u4e2a\u5c55\u793a sum \u65b9\u6cd5\u4f7f\u7528\u7684\u6d4b\u8bd5\uff1a // \u8c03\u7528 sum \u65b9\u6cd5\u83b7\u53d6\u8fed\u4ee3\u5668\u6240\u6709\u9879\u7684\u603b\u548c #[test] fn iterator_sum () { let v1 = vec! [ 1 , 2 , 3 ]; let v1_iter = v1 . iter (); let total : i32 = v1_iter . sum (); assert_eq! ( total , 6 ); } \u8c03\u7528 sum \u4e4b\u540e\u4e0d\u518d\u5141\u8bb8\u4f7f\u7528 v1_iter \u56e0\u4e3a\u8c03\u7528 sum \u65f6\u5b83\u4f1a\u83b7\u53d6\u8fed\u4ee3\u5668\u7684\u6240\u6709\u6743\u3002","title":"\u6d88\u8d39\u8fed\u4ee3\u5668\u7684\u65b9\u6cd5"},{"location":"closures/#_8","text":"Iterator trait \u4e2d\u5b9a\u4e49\u4e86\u53e6\u4e00\u7c7b\u65b9\u6cd5\uff0c\u88ab\u79f0\u4e3a \u8fed\u4ee3\u5668\u9002\u914d\u5668 \uff08iterator adaptors\uff09\uff0c \u4ed6\u4eec\u5141\u8bb8\u6211\u4eec\u5c06\u5f53\u524d\u8fed\u4ee3\u5668\u53d8\u4e3a\u4e0d\u540c\u7c7b\u578b\u7684\u8fed\u4ee3\u5668\u3002\u53ef\u4ee5\u94fe\u5f0f\u8c03\u7528\u591a\u4e2a\u8fed\u4ee3\u5668\u9002\u914d\u5668\u3002\u4e0d\u8fc7\u56e0\u4e3a\u6240\u6709\u7684\u8fed\u4ee3\u5668\u90fd\u662f\u60f0\u6027\u7684\uff0c\u5fc5\u987b\u8c03\u7528\u4e00\u4e2a\u6d88\u8d39\u9002\u914d\u5668\u65b9\u6cd5\u4ee5\u4fbf\u83b7\u53d6\u8fed\u4ee3\u5668\u9002\u914d\u5668\u8c03\u7528\u7684\u7ed3\u679c\u3002 \u793a\u4f8b\u5c55\u793a\u4e86\u4e00\u4e2a\u8c03\u7528\u8fed\u4ee3\u5668\u9002\u914d\u5668\u65b9\u6cd5 map \u7684\u4f8b\u5b50\uff0c\u8be5 map \u65b9\u6cd5\u4f7f\u7528\u95ed\u5305\u6765\u8c03\u7528\u6bcf\u4e2a\u5143\u7d20\u4ee5\u751f\u6210\u65b0\u7684\u8fed\u4ee3\u5668\u3002 \u8fd9\u91cc\u7684\u95ed\u5305\u521b\u5efa\u4e86\u4e00\u4e2a\u65b0\u7684\u8fed\u4ee3\u5668\uff0c\u5bf9\u5176\u4e2d vector \u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u90fd\u88ab\u52a0 1 \u3002\u4e0d\u8fc7\u8fd9\u4e9b\u4ee3\u7801\u4f1a\u4ea7\u751f\u4e00\u4e2a\u8b66\u544a\uff1a // \u8c03\u7528\u8fed\u4ee3\u5668\u9002\u914d\u5668 map \u6765\u521b\u5efa\u4e00\u4e2a\u65b0\u8fed\u4ee3\u5668 fn main () { let v1 : Vec < i32 > = vec! [ 1 , 2 , 3 ]; v1 . iter (). map ( | x | x + 1 ); } \u5f97\u5230\u7684\u8b66\u544a\u662f\uff1a $ cargo run Compiling iterators v0.1.0 ( file:///projects/iterators ) warning: unused ` Map ` that must be used --> src/main.rs:4:5 | 4 | v1.iter () .map ( | x | x + 1 ) ; | ^^^^^^^^^^^^^^^^^^^^^^^^^ | = note: ` #[warn(unused_must_use)]` on by default = note: iterators are lazy and do nothing unless consumed warning: ` iterators ` ( bin \"iterators\" ) generated 1 warning Finished dev [ unoptimized + debuginfo ] target ( s ) in 0 .47s Running ` target/debug/iterators ` \u793a\u4f8b\u4e2d\u7684\u4ee3\u7801\u5b9e\u9645\u4e0a\u5e76\u6ca1\u6709\u505a\u4efb\u4f55\u4e8b\uff1b\u6240\u6307\u5b9a\u7684\u95ed\u5305\u4ece\u672a\u88ab\u8c03\u7528\u8fc7\u3002\u8b66\u544a\u63d0\u9192\u4e86\u6211\u4eec\u4e3a\u4ec0\u4e48\uff1a \u8fed\u4ee3\u5668\u9002\u914d\u5668\u662f\u60f0\u6027\u7684\uff0c\u800c\u8fd9\u91cc\u6211\u4eec\u9700\u8981\u6d88\u8d39\u8fed\u4ee3\u5668\u3002 \u4e3a\u4e86\u4fee\u590d\u8fd9\u4e2a\u8b66\u544a\u5e76\u6d88\u8d39\u8fed\u4ee3\u5668\u83b7\u53d6\u6709\u7528\u7684\u7ed3\u679c\uff0c\u6211\u4eec\u5c06\u4f7f\u7528\u7b2c\u5341\u4e8c\u7ae0\u793a\u4f8b\u7ed3\u5408 env::args \u4f7f\u7528\u7684 collect \u65b9\u6cd5\u3002\u8fd9\u4e2a\u65b9\u6cd5\u6d88\u8d39\u8fed\u4ee3\u5668\u5e76\u5c06\u7ed3\u679c\u6536\u96c6\u5230\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\u4e2d\u3002 \u5728\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5c06\u904d\u5386\u7531 map \u8c03\u7528\u751f\u6210\u7684\u8fed\u4ee3\u5668\u7684\u7ed3\u679c\u6536\u96c6\u5230\u4e00\u4e2a vector \u4e2d\uff0c\u5b83\u5c06\u4f1a\u542b\u6709\u539f\u59cb vector \u4e2d\u6bcf\u4e2a\u5143\u7d20\u52a0 1 \u7684\u7ed3\u679c\uff1a // \u8c03\u7528 map \u65b9\u6cd5\u521b\u5efa\u4e00\u4e2a\u65b0\u8fed\u4ee3\u5668\uff0c\u63a5\u7740\u8c03\u7528 collect \u65b9\u6cd5\u6d88\u8d39\u65b0\u8fed\u4ee3\u5668\u5e76\u521b\u5efa\u4e00\u4e2a vector let v1 : Vec < i32 > = vec! [ 1 , 2 , 3 ]; let v2 : Vec < _ > = v1 . iter (). map ( | x | x + 1 ). collect (); // \u6d88\u8d39\u751f\u6210\u7684\u8fed\u4ee3\u5668 assert_eq! ( v2 , vec! [ 2 , 3 , 4 ]); \u56e0\u4e3a map \u83b7\u53d6\u4e00\u4e2a\u95ed\u5305\uff0c\u53ef\u4ee5\u6307\u5b9a\u4efb\u4f55\u5e0c\u671b\u5728\u904d\u5386\u7684\u6bcf\u4e2a\u5143\u7d20\u4e0a\u6267\u884c\u7684\u64cd\u4f5c\u3002\u8fd9\u662f\u4e00\u4e2a\u5c55\u793a\u5982\u4f55\u4f7f\u7528\u95ed\u5305\u6765\u81ea\u5b9a\u4e49\u884c\u4e3a\u540c\u65f6\u53c8\u590d\u7528 Iterator trait \u63d0\u4f9b\u7684\u8fed\u4ee3\u884c\u4e3a\u7684\u7edd\u4f73\u4f8b\u5b50\u3002","title":"\u4ea7\u751f\u5176\u4ed6\u8fed\u4ee3\u5668\u7684\u65b9\u6cd5"},{"location":"closures/#_9","text":"\u73b0\u5728\u6211\u4eec\u4ecb\u7ecd\u4e86\u8fed\u4ee3\u5668\uff0c\u8ba9\u6211\u4eec\u5c55\u793a\u4e00\u4e2a\u901a\u8fc7\u4f7f\u7528 filter \u8fed\u4ee3\u5668\u9002\u914d\u5668\u548c\u6355\u83b7\u73af\u5883\u7684\u95ed\u5305\u7684\u5e38\u89c4\u7528\u4f8b\u3002\u8fed\u4ee3\u5668\u7684 filter \u65b9\u6cd5\u83b7\u53d6\u4e00\u4e2a\u4f7f\u7528\u8fed\u4ee3\u5668\u7684\u6bcf\u4e00\u4e2a\u9879\u5e76\u8fd4\u56de\u5e03\u5c14\u503c\u7684\u95ed\u5305\u3002\u5982\u679c\u95ed\u5305\u8fd4\u56de true \uff0c\u5176\u503c\u5c06\u4f1a\u5305\u542b\u5728 filter \u63d0\u4f9b\u7684\u65b0\u8fed\u4ee3\u5668\u4e2d\u3002\u5982\u679c\u95ed\u5305\u8fd4\u56de false \uff0c\u5176\u503c\u4e0d\u4f1a\u5305\u542b\u5728\u7ed3\u679c\u8fed\u4ee3\u5668\u4e2d\u3002 \u793a\u4f8b\u5c55\u793a\u4e86\u4f7f\u7528 filter \u548c\u4e00\u4e2a\u6355\u83b7\u73af\u5883\u4e2d\u53d8\u91cf shoe_size \u7684\u95ed\u5305\uff0c\u8fd9\u6837\u95ed\u5305\u5c31\u53ef\u4ee5\u904d\u5386\u4e00\u4e2a Shoe \u7ed3\u6784\u4f53\u96c6\u5408\u4ee5\u4fbf\u53ea\u8fd4\u56de\u6307\u5b9a\u5927\u5c0f\u7684\u978b\u5b50\uff1a // \u4f7f\u7528 filter \u65b9\u6cd5\u548c\u4e00\u4e2a\u6355\u83b7 shoe_size \u7684\u95ed\u5305 #[derive(PartialEq, Debug)] struct Shoe { size : u32 , style : String , } fn shoes_in_size ( shoes : Vec < Shoe > , shoe_size : u32 ) -> Vec < Shoe > { shoes . into_iter (). filter ( | s | s . size == shoe_size ). collect () } #[cfg(test)] mod tests { use super :: * ; #[test] fn filters_by_size () { let shoes = vec! [ Shoe { size : 10 , style : String :: from ( \"sneaker\" ), }, Shoe { size : 13 , style : String :: from ( \"sandal\" ), }, Shoe { size : 10 , style : String :: from ( \"boot\" ), }, ]; let in_my_size = shoes_in_size ( shoes , 10 ); assert_eq! ( in_my_size , vec! [ Shoe { size : 10 , style : String :: from ( \"sneaker\" ) }, Shoe { size : 10 , style : String :: from ( \"boot\" ) }, ] ); } } shoes_in_my_size \u51fd\u6570\u83b7\u53d6\u4e00\u4e2a\u978b\u5b50 vector \u7684\u6240\u6709\u6743\u548c\u4e00\u4e2a\u978b\u5b50\u5927\u5c0f\u4f5c\u4e3a\u53c2\u6570\u3002\u5b83\u8fd4\u56de\u4e00\u4e2a\u53ea\u5305\u542b\u6307\u5b9a\u5927\u5c0f\u978b\u5b50\u7684 vector \u3002 shoes_in_my_size \u51fd\u6570\u4f53\u4e2d\u8c03\u7528\u4e86 into_iter \u6765\u521b\u5efa\u4e00\u4e2a\u83b7\u53d6 vector \u6240\u6709\u6743\u7684\u8fed\u4ee3\u5668\u3002\u63a5\u7740\u8c03\u7528 filter \u5c06\u8fd9\u4e2a\u8fed\u4ee3\u5668\u9002\u914d\u6210\u4e00\u4e2a\u53ea\u542b\u6709\u90a3\u4e9b\u95ed\u5305\u8fd4\u56de true \u7684\u5143\u7d20\u7684\u65b0\u8fed\u4ee3\u5668\u3002 \u95ed\u5305\u4ece\u73af\u5883\u4e2d\u6355\u83b7\u4e86 shoe_size \u53d8\u91cf\u5e76\u4f7f\u7528\u5176\u503c\u4e0e\u6bcf\u4e00\u53ea\u978b\u7684\u5927\u5c0f\u4f5c\u6bd4\u8f83\uff0c\u53ea\u4fdd\u7559\u6307\u5b9a\u5927\u5c0f\u7684\u978b\u5b50\u3002\u6700\u7ec8\uff0c\u8c03\u7528 collect \u5c06\u8fed\u4ee3\u5668\u9002\u914d\u5668\u8fd4\u56de\u7684\u503c\u6536\u96c6\u8fdb\u4e00\u4e2a vector \u5e76\u8fd4\u56de\u3002 \u8fd9\u4e2a\u6d4b\u8bd5\u5c55\u793a\u5f53\u8c03\u7528 shoes_in_my_size \u65f6\uff0c\u6211\u4eec\u53ea\u4f1a\u5f97\u5230\u4e0e\u6307\u5b9a\u503c\u76f8\u540c\u5927\u5c0f\u7684\u978b\u5b50\u3002","title":"\u4f7f\u7528\u95ed\u5305\u83b7\u53d6\u73af\u5883"},{"location":"closures/#iterator-trait","text":"\u5df2\u7ecf\u5c55\u793a\u4e86\u53ef\u4ee5\u901a\u8fc7\u5728 vector \u4e0a\u8c03\u7528 iter \u3001 into_iter \u6216 iter_mut \u6765\u521b\u5efa\u4e00\u4e2a\u8fed\u4ee3\u5668\u3002\u4e5f\u53ef\u4ee5\u7528\u6807\u51c6\u5e93\u4e2d\u5176\u4ed6\u7684\u96c6\u5408\u7c7b\u578b\u521b\u5efa\u8fed\u4ee3\u5668\uff0c\u6bd4\u5982 \u54c8\u5e0c map \u3002\u53e6\u5916\uff0c\u53ef\u4ee5\u5b9e\u73b0 Iterator trait \u6765\u521b\u5efa\u4efb\u4f55\u6211\u4eec\u5e0c\u671b\u7684\u8fed\u4ee3\u5668\u3002\u6b63\u5982\u4e4b\u524d\u63d0\u5230\u7684\uff0c\u5b9a\u4e49\u4e2d\u552f\u4e00\u8981\u6c42\u63d0\u4f9b\u7684\u65b9\u6cd5\u5c31\u662f next \u65b9\u6cd5\u3002\u4e00\u65e6\u5b9a\u4e49\u4e86\u5b83\uff0c\u5c31\u53ef\u4ee5\u4f7f\u7528\u6240\u6709\u5176\u4ed6\u7531 Iterator trait \u63d0\u4f9b\u7684\u62e5\u6709\u9ed8\u8ba4\u5b9e\u73b0\u7684\u65b9\u6cd5\u6765\u521b\u5efa\u81ea\u5b9a\u4e49\u8fed\u4ee3\u5668\u4e86\uff01 \u4f5c\u4e3a\u5c55\u793a\uff0c\u8ba9\u6211\u4eec\u521b\u5efa\u4e00\u4e2a\u53ea\u4f1a\u4ece 1 \u6570\u5230 5 \u7684\u8fed\u4ee3\u5668\u3002\u9996\u5148\uff0c\u521b\u5efa\u4e00\u4e2a\u7ed3\u6784\u4f53\u6765\u5b58\u653e\u4e00\u4e9b\u503c\uff0c\u63a5\u7740\u5b9e\u73b0 Iterator trait \u5c06\u8fd9\u4e2a\u7ed3\u6784\u4f53\u653e\u5165\u8fed\u4ee3\u5668\u4e2d\u5e76\u5728\u6b64\u5b9e\u73b0\u4e2d\u4f7f\u7528\u5176\u503c\u3002 \u793a\u4f8b\u6709\u4e00\u4e2a Counter \u7ed3\u6784\u4f53\u5b9a\u4e49\u548c\u4e00\u4e2a\u521b\u5efa Counter \u5b9e\u4f8b\u7684\u5173\u8054\u51fd\u6570 new \uff1a // \u5b9a\u4e49 Counter \u7ed3\u6784\u4f53\u548c\u4e00\u4e2a\u521b\u5efa count \u521d\u503c\u4e3a 0 \u7684 Counter \u5b9e\u4f8b\u7684 new \u51fd\u6570 struct Counter { count : u32 , } impl Counter { fn new () -> Counter { Counter { count : 0 } } } \u63a5\u4e0b\u6765\u5c06\u4e3a Counter \u7c7b\u578b\u5b9e\u73b0 Iterator trait \uff0c\u901a\u8fc7\u5b9a\u4e49 next \u65b9\u6cd5\u6765\u6307\u5b9a\u4f7f\u7528\u8fed\u4ee3\u5668\u65f6\u7684\u884c\u4e3a\uff0c\u5982\u4e0b\u6240\u793a\uff1a // \u5728 Counter \u7ed3\u6784\u4f53\u4e0a\u5b9e\u73b0 Iterator trait impl Iterator for Counter { type Item = u32 ; // \u8fd9\u91cc\u5c06\u8fed\u4ee3\u5668\u7684\u5173\u8054\u7c7b\u578b Item \u8bbe\u7f6e\u4e3a u32\uff0c\u610f\u5473\u7740\u8fed\u4ee3\u5668\u4f1a\u8fd4\u56de u32 \u503c\u96c6\u5408\u3002 fn next ( & mut self ) -> Option < Self :: Item > { // \u5e0c\u671b\u8fed\u4ee3\u5668\u5bf9\u5176\u5185\u90e8\u72b6\u6001\u52a0\u4e00\uff0c\u8fd9\u4e5f\u5c31\u662f\u4e3a\u4f55\u5c06 count \u521d\u59cb\u5316\u4e3a 0\uff1a // \u6211\u4eec\u5e0c\u671b\u8fed\u4ee3\u5668\u9996\u5148\u8fd4\u56de 1\u3002 // \u5982\u679c count \u503c\u5c0f\u4e8e 6\uff0cnext \u4f1a\u8fd4\u56de\u5c01\u88c5\u5728 Some \u4e2d\u7684\u5f53\u524d\u503c\uff0c // \u4e0d\u8fc7\u5982\u679c count \u5927\u4e8e\u6216\u7b49\u4e8e 6\uff0c\u8fed\u4ee3\u5668\u4f1a\u8fd4\u56de None\u3002 if self . count < 5 { self . count += 1 ; Some ( self . count ) } else { None } } }","title":"\u5b9e\u73b0 Iterator trait \u6765\u521b\u5efa\u81ea\u5b9a\u4e49\u8fed\u4ee3\u5668"},{"location":"closures/#counter-next","text":"\u4e00\u65e6\u5b9e\u73b0\u4e86 Iterator trait \uff0c\u6211\u4eec\u5c31\u6709\u4e86\u4e00\u4e2a\u8fed\u4ee3\u5668\uff01\u4e0b\u9762\u793a\u4f8b\u5c55\u793a\u4e86\u4e00\u4e2a\u6d4b\u8bd5\u7528\u6765\u6f14\u793a\u4f7f\u7528 Counter \u7ed3\u6784\u4f53\u7684\u8fed\u4ee3\u5668\u529f\u80fd\uff0c\u901a\u8fc7\u76f4\u63a5\u8c03\u7528 next \u65b9\u6cd5\uff0c\u6b63\u5982\u4ece vector \u521b\u5efa\u7684\u8fed\u4ee3\u5668\u90a3\u6837\uff1a #[test] fn calling_next_directly () { let mut counter = Counter :: new (); assert_eq! ( counter . next (), Some ( 1 )); assert_eq! ( counter . next (), Some ( 2 )); assert_eq! ( counter . next (), Some ( 3 )); assert_eq! ( counter . next (), Some ( 4 )); assert_eq! ( counter . next (), Some ( 5 )); assert_eq! ( counter . next (), None ); }","title":"\u4f7f\u7528 Counter \u8fed\u4ee3\u5668\u7684 next \u65b9\u6cd5"},{"location":"closures/#iterator-trait_1","text":"\u901a\u8fc7\u5b9a\u4e49 next \u65b9\u6cd5\u5b9e\u73b0 Iterator trait \uff0c\u6211\u4eec\u73b0\u5728\u5c31\u53ef\u4ee5\u4f7f\u7528\u4efb\u4f55\u6807\u51c6\u5e93\u5b9a\u4e49\u7684\u62e5\u6709\u9ed8\u8ba4\u5b9e\u73b0\u7684 Iterator trait \u65b9\u6cd5\u4e86\uff0c\u56e0\u4e3a\u4ed6\u4eec\u90fd\u4f7f\u7528\u4e86 next \u65b9\u6cd5\u7684\u529f\u80fd\u3002 \u4f8b\u5982\uff0c\u51fa\u4e8e\u67d0\u79cd\u539f\u56e0\u6211\u4eec\u5e0c\u671b\u83b7\u53d6 Counter \u5b9e\u4f8b\u4ea7\u751f\u7684\u503c\uff0c\u5c06\u8fd9\u4e9b\u503c\u4e0e\u53e6\u4e00\u4e2a Counter \u5b9e\u4f8b\u5728\u7701\u7565\u4e86\u7b2c\u4e00\u4e2a\u503c\u4e4b\u540e\u4ea7\u751f\u7684\u503c\u914d\u5bf9\uff0c\u5c06\u6bcf\u4e00\u5bf9\u503c\u76f8\u4e58\uff0c\u53ea\u4fdd\u7559\u90a3\u4e9b\u53ef\u4ee5\u88ab\u4e09\u6574\u9664\u7684\u7ed3\u679c\uff0c\u7136\u540e\u5c06\u6240\u6709\u4fdd\u7559\u7684\u7ed3\u679c\u76f8\u52a0\uff0c\u8fd9\u53ef\u4ee5\u5982\u4e0b\u793a\u4f8b\u4e2d\u7684\u6d4b\u8bd5\u8fd9\u6837\u505a\uff1a // \u4f7f\u7528\u81ea\u5b9a\u4e49\u7684 Counter \u8fed\u4ee3\u5668\u7684\u591a\u79cd\u65b9\u6cd5 #[test] fn using_other_iterator_trait_methods () { let sum : u32 = Counter :: new () . zip ( Counter :: new (). skip ( 1 )) . map ( | ( a , b ) | a * b ) . filter ( | x | x % 3 == 0 ) . sum (); assert_eq! ( 18 , sum ); } \u6ce8\u610f zip \u53ea\u4ea7\u751f\u56db\u5bf9\u503c\uff1b\u7406\u8bba\u4e0a\u7b2c\u4e94\u5bf9\u503c (5, None) \u4ece\u672a\u88ab\u4ea7\u751f\uff0c\u56e0\u4e3a zip \u5728\u4efb\u4e00\u8f93\u5165\u8fed\u4ee3\u5668\u8fd4\u56de None \u65f6\u4e5f\u8fd4\u56de None \u3002 \u6240\u6709\u8fd9\u4e9b\u65b9\u6cd5\u8c03\u7528\u90fd\u662f\u53ef\u80fd\u7684\uff0c\u56e0\u4e3a\u6211\u4eec\u6307\u5b9a\u4e86 next \u65b9\u6cd5\u5982\u4f55\u5de5\u4f5c\uff0c\u800c\u6807\u51c6\u5e93\u5219\u63d0\u4f9b\u4e86\u5176\u5b83\u8c03\u7528 next \u7684\u65b9\u6cd5\u7684\u9ed8\u8ba4\u5b9e\u73b0\u3002","title":"\u4f7f\u7528\u81ea\u5b9a\u4e49\u8fed\u4ee3\u5668\u4e2d\u5176\u4ed6 Iterator trait \u65b9\u6cd5"},{"location":"closures/#_10","text":"\u8df3\u8fc7\u6307\u5b9a\u7684 value \u7684\u5b9e\u73b0\u3002 struct Counter { count : u32 , skip_value : Option < u32 > , } impl Counter { fn new () -> Counter { Counter { count : 0 , skip_value : None , } } fn skip_value ( & mut self , skip : u32 ) { self . skip_value = Some ( skip ); } } impl Iterator for Counter { type Item = u32 ; fn next ( & mut self ) -> Option < Self :: Item > { if self . count < 5 { self . count += 1 ; if let Some ( skip_value ) = self . skip_value { if self . count == skip_value { self . count += 1 ; if self . count > 5 { return None ; } } } Some ( self . count ) } else { None } } } #[test] fn using_other_iterator_trait_methods () { let sum : u32 = Counter :: new () . zip ( Counter :: new (). skip ( 1 )) . map ( | ( a , b ) | a * b ) . filter ( | x | x % 3 == 0 ) . sum (); assert_eq! ( 18 , sum ); } #[test] fn skip_special_value () { let mut counter = Counter :: new (); counter . skip_value ( 5 ); let sum : u32 = counter . sum (); assert_eq! ( 1 + 2 + 3 + 4 , sum ); } \u8fd9\u6bb5\u5b9e\u73b0\u4f1a\u8df3\u8fc7\u6307\u5b9a\u7684 value \u3002","title":"\u81ea\u5b9a\u4e49\u7684\u4e00\u4e2a\u5b9e\u73b0"},{"location":"closures/#io","text":"\u6709\u4e86\u8fd9\u4e9b\u5173\u4e8e\u8fed\u4ee3\u5668\u7684\u65b0\u77e5\u8bc6\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u8fed\u4ee3\u5668\u6765\u6539\u8fdb\u7b2c\u5341\u4e8c\u7ae0\u4e2d I/O \u9879\u76ee\u7684\u5b9e\u73b0\u6765\u4f7f\u5f97\u4ee3\u7801\u66f4\u7b80\u6d01\u660e\u4e86\u3002\u8ba9\u6211\u4eec\u770b\u770b\u8fed\u4ee3\u5668\u5982\u4f55\u80fd\u591f\u6539\u8fdb Config::new \u51fd\u6570\u548c search \u51fd\u6570\u7684\u5b9e\u73b0\u3002","title":"\u6539\u8fdbI/O\u9879\u76ee"},{"location":"closures/#clone","text":"\u5728\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u589e\u52a0\u4e86\u4e00\u4e9b\u4ee3\u7801\u83b7\u53d6\u4e00\u4e2a String slice \u5e76\u521b\u5efa\u4e00\u4e2a Config \u7ed3\u6784\u4f53\u7684\u5b9e\u4f8b\uff0c\u4ed6\u4eec\u7d22\u5f15 slice \u4e2d\u7684\u503c\u5e76\u514b\u9686\u8fd9\u4e9b\u503c\u4ee5\u4fbf Config \u7ed3\u6784\u4f53\u53ef\u4ee5\u62e5\u6709\u8fd9\u4e9b\u503c\u3002\u5728\u793a\u4f8b\u4e2d\u91cd\u73b0\u4e86\u7b2c\u5341\u4e8c\u7ae0\u7ed3\u5c3e\u793a\u4f8b\u4e2d Config::new \u51fd\u6570\u7684\u5b9e\u73b0\uff1a impl Config { pub fn new ( args : & [ String ]) -> Result < Config , &' static str > { if args . len () < 3 { return Err ( \"not enough arguments\" ); } let query = args [ 1 ]. clone (); let filename = args [ 2 ]. clone (); let case_sensitive = env :: var ( \"CASE_INSENSITIVE\" ). is_err (); Ok ( Config { query , filename , case_sensitive , }) } } \u8d77\u521d\u8fd9\u91cc\u9700\u8981 clone \u7684\u539f\u56e0\u662f\u53c2\u6570 args \u4e2d\u6709\u4e00\u4e2a String \u5143\u7d20\u7684 slice \uff0c\u800c new \u51fd\u6570\u5e76\u4e0d\u62e5\u6709 args \u3002\u4e3a\u4e86\u80fd\u591f\u8fd4\u56de Config \u5b9e\u4f8b\u7684\u6240\u6709\u6743\uff0c\u6211\u4eec\u9700\u8981\u514b\u9686 Config \u4e2d\u5b57\u6bb5 query \u548c filename \u7684\u503c\uff0c\u8fd9\u6837 Config \u5b9e\u4f8b\u5c31\u80fd\u62e5\u6709\u8fd9\u4e9b\u503c\u3002 \u5728\u5b66\u4e60\u4e86\u8fed\u4ee3\u5668\u4e4b\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06 new \u51fd\u6570\u6539\u4e3a\u83b7\u53d6\u4e00\u4e2a\u6709\u6240\u6709\u6743\u7684\u8fed\u4ee3\u5668\u4f5c\u4e3a\u53c2\u6570\u800c\u4e0d\u662f\u501f\u7528 slice \u3002\u6211\u4eec\u5c06\u4f7f\u7528\u8fed\u4ee3\u5668\u529f\u80fd\u4e4b\u524d\u68c0\u67e5 slice \u957f\u5ea6\u548c\u7d22\u5f15\u7279\u5b9a\u4f4d\u7f6e\u7684\u4ee3\u7801\u3002\u8fd9\u4f1a\u660e\u786e Config::new \u7684\u5de5\u4f5c\u56e0\u4e3a\u8fed\u4ee3\u5668\u4f1a\u8d1f\u8d23\u8bbf\u95ee\u8fd9\u4e9b\u503c\u3002 \u4e00\u65e6 Config::new \u83b7\u53d6\u4e86\u8fed\u4ee3\u5668\u7684\u6240\u6709\u6743\u5e76\u4e0d\u518d\u4f7f\u7528\u501f\u7528\u7684\u7d22\u5f15\u64cd\u4f5c\uff0c\u5c31\u53ef\u4ee5\u5c06\u8fed\u4ee3\u5668\u4e2d\u7684 String \u503c\u79fb\u52a8\u5230 Config \u4e2d\uff0c\u800c\u4e0d\u662f\u8c03\u7528 clone \u5206\u914d\u65b0\u7684\u7a7a\u95f4\u3002","title":"\u4f7f\u7528\u8fed\u4ee3\u5668\u5e76\u53bb\u6389 clone"},{"location":"closures/#envargs","text":"\u6253\u5f00 I/O \u9879\u76ee\u7684 src/main.rs \u6587\u4ef6\uff0c\u5b83\u770b\u8d77\u6765\u5e94\u8be5\u50cf\u8fd9\u6837\uff1a fn main () { let args : Vec < String > = env :: args (). collect (); let config = Config :: new ( & args ). unwrap_or_else ( | err | { eprintln! ( \"Problem parsing arguments: {}\" , err ); process :: exit ( 1 ); }); // --snip-- } \u4fee\u6539\u7b2c\u5341\u4e8c\u7ae0\u7ed3\u5c3e\u793a\u4f8b\u4e2d\u7684 main \u51fd\u6570\u7684\u5f00\u5934\u4e3a\u793a\u4f8b\u4e2d\u7684\u4ee3\u7801\u3002\u5728\u66f4\u65b0 Config::new \u4e4b\u524d\u8fd9\u4e9b\u4ee3\u7801\u8fd8\u4e0d\u80fd\u7f16\u8bd1\uff1a fn main () { let config = Config :: new ( env :: args ()). unwrap_or_else ( | err | { eprintln! ( \"Problem parsing arguments: {}\" , err ); process :: exit ( 1 ); }); // --snip-- } env::args \u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u8fed\u4ee3\u5668\uff01\u4e0d\u540c\u4e8e\u5c06\u8fed\u4ee3\u5668\u7684\u503c\u6536\u96c6\u5230\u4e00\u4e2a vector \u4e2d\u63a5\u7740\u4f20\u9012\u4e00\u4e2a slice \u7ed9 Config::new \uff0c\u73b0\u5728\u6211\u4eec\u76f4\u63a5\u5c06 env::args \u8fd4\u56de\u7684\u8fed\u4ee3\u5668\u7684\u6240\u6709\u6743\u4f20\u9012\u7ed9 Config::new \u3002 \u63a5\u4e0b\u6765\u9700\u8981\u66f4\u65b0 Config::new \u7684\u5b9a\u4e49\u3002\u5728 I/O \u9879\u76ee\u7684 src/lib.rs \u4e2d\uff0c\u5c06 Config::new \u7684\u7b7e\u540d\u6539\u4e3a\u5982\u793a\u4f8b\u6240\u793a\u3002\u8fd9\u4ecd\u7136\u4e0d\u80fd\u7f16\u8bd1\u56e0\u4e3a\u6211\u4eec\u8fd8\u9700\u66f4\u65b0\u51fd\u6570\u4f53\uff1a // \u4ee5\u8fed\u4ee3\u5668\u4f5c\u4e3a\u53c2\u6570\u66f4\u65b0 Config::new \u7684\u7b7e\u540d impl Config { pub fn new ( mut args : env :: Args ) -> Result < Config , &' static str > { // --snip-- env::args \u51fd\u6570\u7684\u6807\u51c6\u5e93\u6587\u6863\u663e\u793a\uff0c\u5b83\u8fd4\u56de\u7684\u8fed\u4ee3\u5668\u7684\u7c7b\u578b\u4e3a std::env::Args \u3002\u6211\u4eec\u5df2\u7ecf\u66f4\u65b0\u4e86 Config :: new \u51fd\u6570\u7684\u7b7e\u540d\uff0c\u56e0\u6b64\u53c2\u6570 args \u7684\u7c7b\u578b\u4e3a std::env::Args \u800c\u4e0d\u662f &[String] \u3002\u56e0\u4e3a\u6211\u4eec\u62e5\u6709 args \u7684\u6240\u6709\u6743\uff0c\u5e76\u4e14\u5c06\u901a\u8fc7\u5bf9\u5176\u8fdb\u884c\u8fed\u4ee3\u6765\u6539\u53d8 args \uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5c06 mut \u5173\u952e\u5b57\u6dfb\u52a0\u5230 args \u53c2\u6570\u7684\u89c4\u8303\u4e2d\u4ee5\u4f7f\u5176\u53ef\u53d8\u3002","title":"\u76f4\u63a5\u4f7f\u7528 env::args \u8fd4\u56de\u7684\u8fed\u4ee3\u5668"},{"location":"closures/#iterator-trait_2","text":"\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5c06\u4fee\u6539 Config::new \u7684\u5185\u5bb9\u3002\u6807\u51c6\u5e93\u6587\u6863\u8fd8\u63d0\u5230 std::env::Args \u5b9e\u73b0\u4e86 Iterator trait \uff0c\u56e0\u6b64\u6211\u4eec\u77e5\u9053\u53ef\u4ee5\u5bf9\u5176\u8c03\u7528 next \u65b9\u6cd5\uff01\u793a\u4f8b\u66f4\u65b0\u4e86\u4e2d\u7684\u4ee3\u7801\uff0c\u4ee5\u4f7f\u7528 next \u65b9\u6cd5\uff1a impl Config { pub fn new ( mut args : env :: Args ) -> Result < Config , &' static str > { args . next (); let query = match args . next () { Some ( arg ) => arg , None => return Err ( \"Didn't get a query string\" ), }; let filename = match args . next () { Some ( arg ) => arg , None => return Err ( \"Didn't get a file name\" ), }; let case_sensitive = env :: var ( \"CASE_INSENSITIVE\" ). is_err (); Ok ( Config { query , filename , case_sensitive , }) } } \u8bf7\u8bb0\u4f4f env::args \u8fd4\u56de\u503c\u7684\u7b2c\u4e00\u4e2a\u503c\u662f\u7a0b\u5e8f\u7684\u540d\u79f0\u3002\u6211\u4eec\u5e0c\u671b\u5ffd\u7565\u5b83\u5e76\u83b7\u53d6\u4e0b\u4e00\u4e2a\u503c\uff0c\u6240\u4ee5\u9996\u5148\u8c03\u7528 next \u5e76\u4e0d\u5bf9\u8fd4\u56de\u503c\u505a\u4efb\u4f55\u64cd\u4f5c\u3002\u4e4b\u540e\u5bf9\u5e0c\u671b\u653e\u5165 Config \u4e2d\u5b57\u6bb5 query \u8c03\u7528 next \u3002\u5982\u679c next \u8fd4\u56de Some \uff0c\u4f7f\u7528 match \u6765\u63d0\u53d6\u5176\u503c\u3002\u5982\u679c\u5b83\u8fd4\u56de None \uff0c\u5219\u610f\u5473\u7740\u6ca1\u6709\u63d0\u4f9b\u8db3\u591f\u7684\u53c2\u6570\u5e76\u901a\u8fc7 Err \u503c\u63d0\u65e9\u8fd4\u56de\u3002\u5bf9 filename \u503c\u8fdb\u884c\u540c\u6837\u7684\u64cd\u4f5c\u3002","title":"\u4f7f\u7528 Iterator trait \u4ee3\u66ff\u7d22\u5f15"},{"location":"closures/#_11","text":"I/O \u9879\u76ee\u4e2d\u5176\u4ed6\u53ef\u4ee5\u5229\u7528\u8fed\u4ee3\u5668\u7684\u5730\u65b9\u662f search \u51fd\u6570\uff0c\u793a\u4f8b\u4e2d\u91cd\u73b0\u4e86\u7b2c\u5341\u4e8c\u7ae0\u7ed3\u5c3e\u793a\u4f8b\u4e2d\u6b64\u51fd\u6570\u7684\u5b9a\u4e49\uff1a pub fn search <' a > ( query : & str , contents : & ' a str ) -> Vec <&' a str > { let mut results = Vec :: new (); for line in contents . lines () { if line . contains ( query ) { results . push ( line ); } } results } \u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528\u8fed\u4ee3\u5668\u9002\u914d\u5668\u65b9\u6cd5\u6765\u7f16\u5199\u66f4\u7b80\u660e\u7684\u4ee3\u7801\u3002\u8fd9\u4e5f\u907f\u514d\u4e86\u4e00\u4e2a\u53ef\u53d8\u7684\u4e2d\u95f4 results vector \u7684\u4f7f\u7528\u3002 \u51fd\u6570\u5f0f\u7f16\u7a0b\u98ce\u683c\u503e\u5411\u4e8e\u6700\u5c0f\u5316\u53ef\u53d8\u72b6\u6001\u7684\u6570\u91cf\u6765\u4f7f\u4ee3\u7801\u66f4\u7b80\u6d01\u3002\u53bb\u6389\u53ef\u53d8\u72b6\u6001\u53ef\u80fd\u4f1a\u4f7f\u5f97\u5c06\u6765\u8fdb\u884c\u5e76\u884c\u641c\u7d22\u7684\u589e\u5f3a\u53d8\u5f97\u66f4\u5bb9\u6613\uff0c\u56e0\u4e3a\u6211\u4eec\u4e0d\u5fc5\u7ba1\u7406 results vector \u7684\u5e76\u53d1\u8bbf\u95ee\u3002 \u793a\u4f8b\u5c55\u793a\u4e86\u8be5\u53d8\u5316\uff1a // \u5728 search \u51fd\u6570\u5b9e\u73b0\u4e2d\u4f7f\u7528\u8fed\u4ee3\u5668\u9002\u914d\u5668 pub fn search <' a > ( query : & str , contents : & ' a str ) -> Vec <&' a str > { contents . lines () . filter ( | line | line . contains ( query )) . collect () } \u56de\u5fc6 search \u51fd\u6570\u7684\u76ee\u7684\u662f\u8fd4\u56de\u6240\u6709 contents \u4e2d\u5305\u542b query \u7684\u884c\u3002\u7c7b\u4f3c\u4e8e\u793a\u4f8b\u4e2d\u7684 filter \u4f8b\u5b50\uff0c\u53ef\u4ee5\u4f7f\u7528 filter \u9002\u914d\u5668\u53ea\u4fdd\u7559 line.contains(query) \u8fd4\u56de true \u7684\u90a3\u4e9b\u884c\u3002\u63a5\u7740\u4f7f\u7528 collect \u5c06\u5339\u914d\u884c\u6536\u96c6\u5230\u53e6\u4e00\u4e2a vector \u4e2d\u3002\u8fd9\u6837\u5c31\u5bb9\u6613\u591a\u4e86\uff01\u5c1d\u8bd5\u5bf9 search_case_insensitive \u51fd\u6570\u505a\u51fa\u540c\u6837\u7684\u4f7f\u7528\u8fed\u4ee3\u5668\u65b9\u6cd5\u7684\u4fee\u6539\u5427\u3002 \u63a5\u4e0b\u6765\u7684\u903b\u8f91\u95ee\u9898\u5c31\u662f\u5728\u4ee3\u7801\u4e2d\u5e94\u8be5\u9009\u62e9\u54ea\u79cd\u98ce\u683c\uff1a\u662f\u4f7f\u7528\u793a\u4f8b\u4e2d\u7684\u539f\u59cb\u5b9e\u73b0\u8fd8\u662f\u4f7f\u7528\u8fed\u4ee3\u5668\u7684\u7248\u672c\uff1f\u5927\u90e8\u5206 Rust \u7a0b\u5e8f\u5458\u503e\u5411\u4e8e\u4f7f\u7528\u8fed\u4ee3\u5668\u98ce\u683c\u3002\u5f00\u59cb\u8fd9\u6709\u70b9\u96be\u4ee5\u7406\u89e3\uff0c\u4e0d\u8fc7\u4e00\u65e6\u4f60\u5bf9\u4e0d\u540c\u8fed\u4ee3\u5668\u7684\u5de5\u4f5c\u65b9\u5f0f\u6709\u4e86\u611f\u89c9\u4e4b\u540e\uff0c\u8fed\u4ee3\u5668\u53ef\u80fd\u4f1a\u66f4\u5bb9\u6613\u7406\u89e3\u3002\u76f8\u6bd4\u6446\u5f04\u4e0d\u540c\u7684\u5faa\u73af\u5e76\u521b\u5efa\u65b0 vector \uff0c\uff08\u8fed\u4ee3\u5668\uff09\u4ee3\u7801\u5219\u66f4\u5173\u6ce8\u5faa\u73af\u7684\u76ee\u7684\u3002\u8fd9\u62bd\u8c61\u6389\u90a3\u4e9b\u8001\u751f\u5e38\u8c08\u7684\u4ee3\u7801\uff0c\u8fd9\u6837\u5c31\u66f4\u5bb9\u6613\u770b\u6e05\u4ee3\u7801\u6240\u7279\u6709\u7684\u6982\u5ff5\uff0c\u6bd4\u5982\u8fed\u4ee3\u5668\u4e2d\u6bcf\u4e2a\u5143\u7d20\u5fc5\u987b\u9762\u5bf9\u7684\u8fc7\u6ee4\u6761\u4ef6\u3002 \u4e0d\u8fc7\u8fd9\u4e24\u79cd\u5b9e\u73b0\u771f\u7684\u5b8c\u5168\u7b49\u540c\u5417\uff1f\u76f4\u89c9\u4e0a\u7684\u5047\u8bbe\u662f\u66f4\u5e95\u5c42\u7684\u5faa\u73af\u4f1a\u66f4\u5feb\u4e00\u4e9b\u3002\u8ba9\u6211\u4eec\u804a\u804a\u6027\u80fd\u5427\u3002","title":"\u4f7f\u7528\u8fed\u4ee3\u5668\u9002\u914d\u5668\u6765\u4f7f\u4ee3\u7801\u66f4\u7b80\u660e"},{"location":"closures/#_12","text":"for\u5faa\u73af\u7248\u672c: pub fn search_case_insensitive <' a > ( query : & str , contents : & ' a str ) -> Vec <&' a str > { let mut results = Vec :: new (); let query = query . to_lowercase (); for line in contents . lines () { if line . to_lowercase (). contains ( & query ) { results . push ( line ); } } results } \u8fed\u4ee3\u5668\u7248\u672c: pub fn search_case_insensitive <' a > ( query : & str , contents : & ' a str ) -> Vec <&' a str > { let query = query . to_lowercase (); // \u4f7f\u7528\u8fed\u4ee3\u5668\u7248\u672c contents . lines () . filter ( | line | line . to_lowercase (). contains ( & query )) . collect () }","title":"\u5ffd\u7565\u5927\u5c0f\u5199\u51fd\u6570\u4f7f\u7528\u8fed\u4ee3\u5668\u7248\u672c"},{"location":"closures/#-_2","text":"\u4e3a\u4e86\u51b3\u5b9a\u4f7f\u7528\u54ea\u4e2a\u5b9e\u73b0\uff0c\u6211\u4eec\u9700\u8981\u77e5\u9053\u54ea\u4e2a\u7248\u672c\u7684 search \u51fd\u6570\u66f4\u5feb\u4e00\u4e9b\uff1a\u662f\u76f4\u63a5\u4f7f\u7528 for \u5faa\u73af\u7684\u7248\u672c\u8fd8\u662f\u4f7f\u7528\u8fed\u4ee3\u5668\u7684\u7248\u672c\u3002 \u6211\u4eec\u8fd0\u884c\u4e86\u4e00\u4e2a\u6027\u80fd\u6d4b\u8bd5\uff0c\u901a\u8fc7\u5c06\u963f\u745f\u00b7\u67ef\u5357\u00b7\u9053\u5c14\u7684\u201c\u798f\u5c14\u6469\u65af\u63a2\u6848\u96c6\u201d\u7684\u5168\u90e8\u5185\u5bb9\u52a0\u8f7d\u8fdb String \u5e76\u5bfb\u627e\u5176\u4e2d\u7684\u5355\u8bcd \u201cthe\u201d\u3002\u5982\u4e0b\u662f for \u5faa\u73af\u7248\u672c\u548c\u8fed\u4ee3\u5668\u7248\u672c\u7684 search \u51fd\u6570\u7684\u6027\u80fd\u6d4b\u8bd5\u7ed3\u679c\uff1a test bench_search_for .. . bench : 19 , 620 , 300 ns / iter ( +/- 915 , 700 ) test bench_search_iter .. . bench : 19 , 234 , 900 ns / iter ( +/- 657 , 200 ) \u7ed3\u679c\u8fed\u4ee3\u5668\u7248\u672c\u8fd8\u8981\u7a0d\u5fae\u5feb\u4e00\u70b9\uff01\u8fd9\u91cc\u6211\u4eec\u5c06\u4e0d\u4f1a\u67e5\u770b\u6027\u80fd\u6d4b\u8bd5\u7684\u4ee3\u7801\uff0c\u6211\u4eec\u7684\u76ee\u7684\u5e76\u4e0d\u662f\u4e3a\u4e86\u8bc1\u660e\u4ed6\u4eec\u662f\u5b8c\u5168\u7b49\u540c\u7684\uff0c\u800c\u662f\u5f97\u51fa\u4e00\u4e2a\u600e\u6837\u6bd4\u8f83\u8fd9\u4e24\u79cd\u5b9e\u73b0\u65b9\u5f0f\u6027\u80fd\u7684\u57fa\u672c\u601d\u8def\u3002 \u5bf9\u4e8e\u4e00\u4e2a\u66f4\u5168\u9762\u7684\u6027\u80fd\u6d4b\u8bd5\uff0c\u5c06\u4f1a\u68c0\u67e5\u4e0d\u540c\u957f\u5ea6\u7684\u6587\u672c\u3001\u4e0d\u540c\u7684\u641c\u7d22\u5355\u8bcd\u3001\u4e0d\u540c\u957f\u5ea6\u7684\u5355\u8bcd\u548c\u6240\u6709\u5176\u4ed6\u7684\u53ef\u53d8\u60c5\u51b5\u3002\u8fd9\u91cc\u6240\u8981\u8868\u8fbe\u7684\u662f\uff1a \u8fed\u4ee3\u5668\uff0c\u4f5c\u4e3a\u4e00\u4e2a\u9ad8\u7ea7\u7684\u62bd\u8c61\uff0c\u88ab\u7f16\u8bd1\u6210\u4e86\u4e0e\u624b\u5199\u7684\u5e95\u5c42\u4ee3\u7801\u5927\u4f53\u4e00\u81f4\u6027\u80fd\u4ee3\u7801\u3002 \u8fed\u4ee3\u5668\u662f Rust \u7684 \u96f6\u6210\u672c\u62bd\u8c61 \uff08zero-cost abstractions\uff09\u4e4b\u4e00\uff0c\u5b83 \u610f\u5473\u7740\u62bd\u8c61\u5e76\u4e0d\u4f1a\u5f15\u5165\u8fd0\u884c\u65f6\u5f00\u9500 \uff0c\u5b83\u4e0e\u672c\u8d3e\u5c3c\u00b7\u65af\u7279\u52b3\u65af\u7279\u5362\u666e\uff08C++ \u7684\u8bbe\u8ba1\u548c\u5b9e\u73b0\u8005\uff09\u5728 \u201cFoundations of C++\u201d\uff082012\uff09 \u4e2d\u6240\u5b9a\u4e49\u7684 \u96f6\u5f00\u9500 \uff08zero-overhead\uff09\u5982\u51fa\u4e00\u8f99\uff1a In general, C++ implementations obey the zero-overhead principle: What you don\u2019t use, you don\u2019t pay for. And further: What you do use, you couldn\u2019t hand code any better. - Bjarne Stroustrup \"Foundations of C++\" \u4ece\u6574\u4f53\u6765\u8bf4\uff0cC++ \u7684\u5b9e\u73b0\u9075\u5faa\u4e86\u96f6\u5f00\u9500\u539f\u5219\uff1a\u4f60\u4e0d\u9700\u8981\u7684\uff0c\u65e0\u9700\u4e3a\u4ed6\u4eec\u4e70\u5355\u3002\u66f4\u6709\u751a\u8005\u7684\u662f\uff1a\u4f60\u9700\u8981\u7684\u65f6\u5019\uff0c\u4e5f\u4e0d\u53ef\u80fd\u627e\u5230\u5176\u4ed6\u66f4\u597d\u7684\u4ee3\u7801\u4e86\u3002 - \u672c\u8d3e\u5c3c\u00b7\u65af\u7279\u52b3\u65af\u7279\u5362\u666e \"Foundations of C++\" \u4f5c\u4e3a\u53e6\u4e00\u4e2a\u4f8b\u5b50\uff0c\u8fd9\u91cc\u6709\u4e00\u4e9b\u53d6\u81ea\u4e8e\u97f3\u9891\u89e3\u7801\u5668\u7684\u4ee3\u7801\u3002\u89e3\u7801\u7b97\u6cd5\u4f7f\u7528 \u7ebf\u6027\u9884\u6d4b\u6570\u5b66\u8fd0\u7b97 \uff08linear prediction mathematical operation\uff09\u6765\u6839\u636e\u4e4b\u524d\u6837\u672c\u7684\u7ebf\u6027\u51fd\u6570\u9884\u6d4b\u5c06\u6765\u7684\u503c\u3002\u8fd9\u4e9b\u4ee3\u7801\u4f7f\u7528\u8fed\u4ee3\u5668\u94fe\u6765\u5bf9\u4f5c\u7528\u57df\u4e2d\u7684\u4e09\u4e2a\u53d8\u91cf\u8fdb\u884c\u4e86\u67d0\u79cd\u6570\u5b66\u8ba1\u7b97\uff1a\u4e00\u4e2a\u53eb buffer \u7684\u6570\u636e slice \u3001\u4e00\u4e2a\u6709 12 \u4e2a\u5143\u7d20\u7684\u6570\u7ec4 coefficients \u3001\u548c\u4e00\u4e2a\u4ee3\u8868\u4f4d\u79fb\u4f4d\u6570\u7684 qlp_shift \u3002\u4f8b\u5b50\u4e2d\u58f0\u660e\u4e86\u8fd9\u4e9b\u53d8\u91cf\u4f46\u5e76\u6ca1\u6709\u63d0\u4f9b\u4efb\u4f55\u503c\uff1b\u867d\u7136\u8fd9\u4e9b\u4ee3\u7801\u5728\u5176\u4e0a\u4e0b\u6587\u4e4b\u5916\u6ca1\u6709\u4ec0\u4e48\u610f\u4e49\uff0c\u4e0d\u8fc7\u4ecd\u662f\u4e00\u4e2a\u7b80\u660e\u7684\u73b0\u5b9e\u4e2d\u7684\u4f8b\u5b50\uff0c\u6765\u5c55\u793a Rust \u5982\u4f55\u5c06\u9ad8\u7ea7\u6982\u5ff5\u8f6c\u6362\u4e3a\u5e95\u5c42\u4ee3\u7801\uff1a let buffer : & mut [ i32 ]; let coefficients : [ i64 ; 12 ]; let qlp_shift : i16 ; for i in 12 .. buffer . len () { let prediction = coefficients . iter () . zip ( & buffer [ i - 12 .. i ]) . map ( | ( & c , & s ) | c * s as i64 ) . sum :: < i64 > () >> qlp_shift ; let delta = buffer [ i ]; buffer [ i ] = prediction as i32 + delta ; } \u4e3a\u4e86\u8ba1\u7b97 prediction \u7684\u503c\uff0c\u8fd9\u4e9b\u4ee3\u7801\u904d\u5386\u4e86 coefficients \u4e2d\u7684 12 \u4e2a\u503c\uff0c\u4f7f\u7528 zip \u65b9\u6cd5\u5c06\u7cfb\u6570\u4e0e buffer \u7684\u524d 12 \u4e2a\u503c\u7ec4\u5408\u5728\u4e00\u8d77\u3002\u63a5\u7740\u5c06\u6bcf\u4e00\u5bf9\u503c\u76f8\u4e58\uff0c\u518d\u5c06\u6240\u6709\u7ed3\u679c\u76f8\u52a0\uff0c\u7136\u540e\u5c06\u603b\u548c\u53f3\u79fb qlp_shift \u4f4d\u3002 \u50cf\u97f3\u9891\u89e3\u7801\u5668\u8fd9\u6837\u7684\u7a0b\u5e8f\u901a\u5e38\u6700\u770b\u91cd \u8ba1\u7b97\u7684\u6027\u80fd \u3002\u8fd9\u91cc\uff0c\u6211\u4eec\u521b\u5efa\u4e86\u4e00\u4e2a\u8fed\u4ee3\u5668\uff0c\u4f7f\u7528\u4e86\u4e24\u4e2a\u9002\u914d\u5668\uff0c\u63a5\u7740\u6d88\u8d39\u4e86\u5176\u503c\u3002Rust \u4ee3\u7801\u5c06\u4f1a\u88ab\u7f16\u8bd1\u4e3a\u4ec0\u4e48\u6837\u7684\u6c47\u7f16\u4ee3\u7801\u5462\uff1f\u597d\u5427\uff0c\u5728\u7f16\u5199\u672c\u4e66\u7684\u8fd9\u4e2a\u65f6\u5019\uff0c \u5b83\u88ab\u7f16\u8bd1\u6210\u4e0e\u624b\u5199\u7684\u76f8\u540c\u7684\u6c47\u7f16\u4ee3\u7801 \u3002\u904d\u5386 coefficients \u7684\u503c\u5b8c\u5168\u7528\u4e0d\u5230\u5faa\u73af\uff1aRust \u77e5\u9053\u8fd9\u91cc\u4f1a\u8fed\u4ee3 12 \u6b21\uff0c\u6240\u4ee5\u5b83\u201c \u5c55\u5f00 \u201d\uff08unroll\uff09\u4e86\u5faa\u73af\u3002\u5c55\u5f00\u662f\u4e00\u79cd\u79fb\u9664\u5faa\u73af\u63a7\u5236\u4ee3\u7801\u7684\u5f00\u9500\u5e76\u66ff\u6362\u4e3a\u6bcf\u4e2a\u8fed\u4ee3\u4e2d\u7684\u91cd\u590d\u4ee3\u7801\u7684\u4f18\u5316\u3002 \u6240\u6709\u7684\u7cfb\u6570\u90fd\u88ab\u50a8\u5b58\u5728\u4e86\u5bc4\u5b58\u5668\u4e2d\uff0c\u8fd9\u610f\u5473\u7740\u8bbf\u95ee\u4ed6\u4eec\u975e\u5e38\u5feb\u3002\u8fd9\u91cc\u4e5f\u6ca1\u6709\u8fd0\u884c\u65f6\u6570\u7ec4\u8bbf\u95ee\u8fb9\u754c\u68c0\u67e5\u3002 \u6240\u6709\u8fd9\u4e9b Rust \u80fd\u591f\u63d0\u4f9b\u7684\u4f18\u5316\u4f7f\u5f97\u7ed3\u679c\u4ee3\u7801\u6781\u4e3a\u9ad8\u6548\u3002\u73b0\u5728\u77e5\u9053\u8fd9\u4e9b\u4e86\uff0c\u8bf7\u653e\u5fc3\u5927\u80c6\u7684\u4f7f\u7528\u8fed\u4ee3\u5668\u548c\u95ed\u5305\u5427\uff01\u4ed6\u4eec\u4f7f\u5f97\u4ee3\u7801\u770b\u8d77\u6765\u66f4\u9ad8\u7ea7\uff0c\u4f46\u5e76\u4e0d\u4e3a\u6b64\u5f15\u5165\u8fd0\u884c\u65f6\u6027\u80fd\u635f\u5931\u3002","title":"\u6027\u80fd\u6bd4\u8f83-\u5faa\u73af\u548c\u8fed\u4ee3\u5668"},{"location":"closures/#_13","text":"\u95ed\u5305\u548c\u8fed\u4ee3\u5668\u662f Rust \u53d7\u51fd\u6570\u5f0f\u7f16\u7a0b\u8bed\u8a00\u89c2\u5ff5\u6240\u542f\u53d1\u7684\u529f\u80fd\u3002 \u4ed6\u4eec\u5bf9 Rust \u4ee5\u5e95\u5c42\u7684\u6027\u80fd\u6765\u660e\u786e\u7684\u8868\u8fbe\u9ad8\u7ea7\u6982\u5ff5\u7684\u80fd\u529b\u6709\u5f88\u5927\u8d21\u732e\u3002\u95ed\u5305\u548c\u8fed\u4ee3\u5668\u7684\u5b9e\u73b0\u8fbe\u5230\u4e86\u4e0d\u5f71\u54cd\u8fd0\u884c\u65f6\u6027\u80fd\u7684\u7a0b\u5ea6\u3002\u8fd9\u6b63\u662f Rust \u7aed\u529b\u63d0\u4f9b\u96f6\u6210\u672c\u62bd\u8c61\u7684\u76ee\u6807\u7684\u4e00\u90e8\u5206\u3002 \u73b0\u5728\u6211\u4eec\u6539\u8fdb\u4e86\u6211\u4eec I/O \u9879\u76ee\u7684\uff08\u4ee3\u7801\uff09\u8868\u73b0\u529b\uff0c\u8ba9\u6211\u4eec\u770b\u4e00\u770b\u66f4\u591a cargo \u7684\u529f\u80fd\uff0c\u4ed6\u4eec\u5c06\u5e2e\u52a9\u6211\u4eec\u51c6\u5907\u597d\u5c06\u9879\u76ee\u5206\u4eab\u7ed9\u4e16\u754c\u3002","title":"\u603b\u7ed3"},{"location":"common-collections/","text":"\u5e38\u89c1\u96c6\u5408 Rust \u6807\u51c6\u5e93\u4e2d\u5305\u542b\u4e00\u7cfb\u5217\u88ab\u79f0\u4e3a \u96c6\u5408 \uff08collections\uff09\u7684\u975e\u5e38\u6709\u7528\u7684\u6570\u636e\u7ed3\u6784\u3002 \u5927\u90e8\u5206\u5176\u4ed6\u6570\u636e\u7c7b\u578b\u90fd\u4ee3\u8868\u4e00\u4e2a\u7279\u5b9a\u7684\u503c\uff0c\u4e0d\u8fc7\u96c6\u5408\u53ef\u4ee5\u5305\u542b\u591a\u4e2a\u503c\u3002 \u4e0d\u540c\u4e8e\u5185\u5efa\u7684\u6570\u7ec4\u548c\u5143\u7ec4\u7c7b\u578b\uff0c\u8fd9\u4e9b\u96c6\u5408\u6307\u5411\u7684\u6570\u636e\u662f\u50a8\u5b58\u5728\u5806\u4e0a\u7684\uff0c\u8fd9\u610f\u5473\u7740\u6570\u636e\u7684\u6570\u91cf\u4e0d\u5fc5\u5728\u7f16\u8bd1\u65f6\u5c31\u5df2\u77e5\uff0c\u5e76\u4e14\u8fd8\u53ef\u4ee5\u968f\u7740\u7a0b\u5e8f\u7684\u8fd0\u884c\u589e\u957f\u6216\u7f29\u5c0f\u3002 \u6bcf\u79cd\u96c6\u5408\u90fd\u6709\u7740\u4e0d\u540c\u529f\u80fd\u548c\u6210\u672c\uff0c\u800c\u6839\u636e\u5f53\u524d\u60c5\u51b5\u9009\u62e9\u5408\u9002\u7684\u96c6\u5408\uff0c\u8fd9\u662f\u4e00\u9879\u5e94\u5f53\u9010\u6e10\u638c\u63e1\u7684\u6280\u80fd\u3002 vector \u5141\u8bb8\u6211\u4eec\u4e00\u4e2a\u6328\u7740\u4e00\u4e2a\u5730\u50a8\u5b58\u4e00\u7cfb\u5217\u6570\u91cf\u53ef\u53d8\u7684\u503c \u5b57\u7b26\u4e32 \uff08string\uff09\u662f\u5b57\u7b26\u7684\u96c6\u5408\u3002\u4e4b\u524d\u89c1\u8fc7 String \u7c7b\u578b\u3002 \u54c8\u5e0c map \uff08hash map\uff09\u5141\u8bb8\u6211\u4eec\u5c06\u503c\u4e0e\u4e00\u4e2a\u7279\u5b9a\u7684\u952e\uff08key\uff09\u76f8\u5173\u8054\u3002\u8fd9\u662f\u4e00\u4e2a\u53eb\u505a map \u7684\u66f4\u901a\u7528\u7684\u6570\u636e\u7ed3\u6784\u7684\u7279\u5b9a\u5b9e\u73b0\u3002 \u5bf9\u4e8e\u6807\u51c6\u5e93\u63d0\u4f9b\u7684\u5176\u4ed6\u7c7b\u578b\u7684\u96c6\u5408\uff0c\u8bf7\u67e5\u770b \u6587\u6863 \u3002 Vector \u5217\u8868 Vec<T> \uff0c\u4e5f\u88ab\u79f0\u4e3a vector \u3002 vector \u5141\u8bb8\u5728\u4e00\u4e2a\u5355\u72ec\u7684\u6570\u636e\u7ed3\u6784\u4e2d\u50a8\u5b58\u591a\u4e8e\u4e00\u4e2a\u7684\u503c\uff0c\u5b83\u5728\u5185\u5b58\u4e2d\u5f7c\u6b64\u76f8\u90bb\u5730\u6392\u5217\u6240\u6709\u7684\u503c\u3002 vector \u53ea\u80fd\u50a8\u5b58\u76f8\u540c\u7c7b\u578b\u7684\u503c\u3002\u5b83\u4eec\u5728\u62e5\u6709 \u4e00\u7cfb\u5217\u9879 \u7684\u573a\u666f\u4e0b\u975e\u5e38\u5b9e\u7528\uff0c\u4f8b\u5982\u6587\u4ef6\u4e2d\u7684\u6587\u672c\u884c\u6216\u662f\u8d2d\u7269\u8f66\u4e2d\u5546\u54c1\u7684\u4ef7\u683c\u3002 \u65b0\u5efa vector // \u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u7a7a vector\uff0c\u53ef\u4ee5\u8c03\u7528 Vec::new \u51fd\u6570 let v : Vec < i32 > = Vec :: new (); // \u544a\u8bc9 Rust v \u8fd9\u4e2a Vec<T> \u5c06\u5b58\u653e i32 \u7c7b\u578b\u7684\u5143\u7d20\u3002 // \u6ce8\u610f\u589e\u52a0\u4e86\u4e00\u4e2a\u7c7b\u578b\u6ce8\u89e3, \u56e0\u4e3a\u6ca1\u6709\u5411\u8fd9\u4e2a vector \u4e2d\u63d2\u5165\u4efb\u4f55\u503c\uff0cRust \u5e76\u4e0d\u77e5\u9053\u6211\u4eec\u60f3\u8981\u50a8\u5b58\u4ec0\u4e48\u7c7b\u578b\u7684\u5143\u7d20\u3002 // vector \u662f\u7528\u6cdb\u578b\u5b9e\u73b0\u7684\uff0c\u7b2c\u5341\u7ae0\u4f1a\u6d89\u53ca\u5230\u5982\u4f55\u5bf9\u4f60\u81ea\u5df1\u7684\u7c7b\u578b\u4f7f\u7528\u5b83\u4eec\u3002 \u73b0\u5728\uff0c\u6240\u9700\u8981\u77e5\u9053\u7684\u5c31\u662f Vec<T> \u662f\u4e00\u4e2a\u7531\u6807\u51c6\u5e93\u63d0\u4f9b\u7684\u7c7b\u578b\uff0c\u5b83\u53ef\u4ee5\u5b58\u653e\u4efb\u4f55\u7c7b\u578b\uff0c\u800c\u5f53 Vec \u5b58\u653e\u67d0\u4e2a\u7279\u5b9a\u7c7b\u578b\u65f6\uff0c\u90a3\u4e2a\u7c7b\u578b\u4f4d\u4e8e\u5c16\u62ec\u53f7\u4e2d\u3002 \u901a\u5e38\uff0c\u4f1a\u7528\u521d\u59cb\u503c\u6765\u521b\u5efa\u4e00\u4e2a Vec<T> \u800c Rust \u4f1a\u63a8\u65ad\u51fa\u50a8\u5b58\u503c\u7684\u7c7b\u578b\uff0c\u6240\u4ee5\u5f88\u5c11\u4f1a\u9700\u8981\u8fd9\u4e9b\u7c7b\u578b\u6ce8\u89e3\u3002 \u4e3a\u4e86\u65b9\u4fbf Rust \u63d0\u4f9b\u4e86 vec! \u5b8f\uff0c\u8fd9\u4e2a\u5b8f\u4f1a\u6839\u636e\u6211\u4eec\u63d0\u4f9b\u7684\u503c\u6765\u521b\u5efa\u4e00\u4e2a\u65b0\u7684 vector \u3002 // \u65b0\u5efa\u4e00\u4e2a\u62e5\u6709\u503c 1\u30012 \u548c 3 \u7684 Vec<i32> let v = vec! [ 1 , 2 , 3 ]; \u56e0\u4e3a\u63d0\u4f9b\u4e86 i32 \u7c7b\u578b\u7684\u521d\u59cb\u503c\uff0cRust \u53ef\u4ee5\u63a8\u65ad\u51fa v \u7684\u7c7b\u578b\u662f Vec<i32> \uff0c\u56e0\u6b64\u7c7b\u578b\u6ce8\u89e3\u5c31\u4e0d\u662f\u5fc5\u987b\u7684\u3002 \u66f4\u65b0 vector \u4f7f\u7528 push \u65b9\u6cd5\u53ef\u4ee5\u5411\u5176\u589e\u52a0\u5143\u7d20\uff1a // \u5982\u679c\u60f3\u8981\u80fd\u591f\u6539\u53d8\u5b83\u7684\u503c\uff0c\u5fc5\u987b\u4f7f\u7528 mut \u5173\u952e\u5b57\u4f7f\u5176\u53ef\u53d8 let mut v = Vec :: new (); v . push ( 5 ); // \u589e\u52a0\u5143\u7d20 v . push ( 6 ); // \u589e\u52a0\u5143\u7d20 v . push ( 7 ); v . push ( 8 ); // \u653e\u5165\u5176\u4e2d\u7684\u6240\u6709\u503c\u90fd\u662f i32 \u7c7b\u578b\u7684\uff0c\u800c\u4e14 Rust \u4e5f\u6839\u636e\u6570\u636e\u505a\u51fa\u5982\u6b64\u5224\u65ad\uff0c\u6240\u4ee5\u4e0d\u9700\u8981 Vec<i32> \u6ce8\u89e3\u3002 \u4e22\u5f03 vector \u7c7b\u4f3c\u4e8e\u4efb\u4f55\u5176\u4ed6\u7684 struct \uff0c vector \u5728\u5176\u79bb\u5f00\u4f5c\u7528\u57df\u65f6\u4f1a\u88ab\u91ca\u653e { let v = vec! [ 1 , 2 , 3 , 4 ]; // \u5904\u7406\u53d8\u91cf v } // <- \u8fd9\u91cc v \u79bb\u5f00\u4f5c\u7528\u57df\u5e76\u88ab\u4e22\u5f03 \u5f53 vector \u88ab\u4e22\u5f03\u65f6\uff0c\u6240\u6709\u5176\u5185\u5bb9\u4e5f\u4f1a\u88ab\u4e22\u5f03\uff0c\u8fd9\u610f\u5473\u7740\u8fd9\u91cc\u5b83\u5305\u542b\u7684\u6574\u6570\u5c06\u88ab\u6e05\u7406\u3002 \u8fd9\u53ef\u80fd\u770b\u8d77\u6765\u975e\u5e38\u76f4\u89c2\uff0c\u4e0d\u8fc7\u4e00\u65e6\u5f00\u59cb\u4f7f\u7528 vector \u5143\u7d20\u7684\u5f15\u7528\uff0c\u60c5\u51b5\u5c31\u53d8\u5f97\u6709\u4e9b\u590d\u6742\u4e86\u3002 \u8bfb\u53d6 vector \u6709\u4e24\u79cd\u65b9\u6cd5\u5f15\u7528 vector \u4e2d\u50a8\u5b58\u7684\u503c\u3002 \u7d22\u5f15\u8bed\u6cd5 \u6216\u8005 get \u65b9\u6cd5 fn main () { let v = vec! [ 1 , 2 , 3 , 4 , 5 ]; // \u4f7f\u7528\u7d22\u5f15\u503c 2 \u6765\u83b7\u53d6\u7b2c\u4e09\u4e2a\u5143\u7d20\uff0c\u7d22\u5f15\u662f\u4ece 0 \u5f00\u59cb\u7684\u3002 // \u4f7f\u7528 & \u548c [] \u8fd4\u56de\u4e00\u4e2a\u5f15\u7528 let third : & i32 = & v [ 2 ]; println! ( \"\u7b2c\u4e09\u4e2a\u6570\u662f {}\" , third ); // \u4f7f\u7528 get \u65b9\u6cd5\u4ee5\u7d22\u5f15\u4f5c\u4e3a\u53c2\u6570\u6765\u8fd4\u56de\u4e00\u4e2a Option<&T>\u3002 match v . get ( 2 ) { Some ( third ) => println! ( \"\u7b2c\u4e09\u4e2a\u5143\u7d20\u662f {}\" , third ), None => println! ( \"\u8fd9\u513f\u6ca1\u6709\u5143\u7d20\" ), } } Rust \u63d0\u4f9b\u4e86\u4e24\u79cd\u5f15\u7528\u5143\u7d20\u7684\u65b9\u6cd5\u7684\u539f\u56e0\u662f\u5f53 \u5c1d\u8bd5\u4f7f\u7528\u73b0\u6709\u5143\u7d20\u8303\u56f4\u4e4b\u5916\u7684\u7d22\u5f15\u503c\u65f6\u53ef\u4ee5\u9009\u62e9\u8ba9\u7a0b\u5e8f\u5982\u4f55\u8fd0\u884c\u3002 // \u5c1d\u8bd5\u5728\u5f53\u6709\u4e00\u4e2a 5 \u4e2a\u5143\u7d20\u7684 vector \u63a5\u7740\u8bbf\u95ee\u7d22\u5f15 100 \u4f4d\u7f6e\u7684\u5143\u7d20\u4f1a\u53d1\u751f\u4ec0\u4e48 let v = vec! [ 1 , 2 , 3 , 4 , 5 ]; let does_not_exist = & v [ 100 ]; // \u5f53\u5f15\u7528\u4e00\u4e2a\u4e0d\u5b58\u5728\u7684\u5143\u7d20\u65f6 Rust \u4f1a\u9020\u6210 panic let does_not_exist = v . get ( 100 ); // \u5f53 get \u65b9\u6cd5\u88ab\u4f20\u9012\u4e86\u4e00\u4e2a\u6570\u7ec4\u5916\u7684\u7d22\u5f15\u65f6\uff0c\u5b83\u4e0d\u4f1a panic \u800c\u662f\u8fd4\u56de None\u3002 // \u5f53\u5076\u5c14\u51fa\u73b0\u8d85\u8fc7 vector \u8303\u56f4\u7684\u8bbf\u95ee\u5c5e\u4e8e\u6b63\u5e38\u60c5\u51b5\u7684\u65f6\u5019\u53ef\u4ee5\u8003\u8651\u4f7f\u7528\u5b83\u3002 // \u63a5\u7740\u4f60\u7684\u4ee3\u7801\u53ef\u4ee5\u6709\u5904\u7406 Some(&element) \u6216 None \u7684\u903b\u8f91\uff0c \u4e00\u65e6\u7a0b\u5e8f\u83b7\u53d6\u4e86\u4e00\u4e2a\u6709\u6548\u7684\u5f15\u7528\uff0c\u501f\u7528\u68c0\u67e5\u5668\u5c06\u4f1a\u6267\u884c\u6240\u6709\u6743\u548c\u501f\u7528\u89c4\u5219\u6765\u786e\u4fdd vector \u5185\u5bb9\u7684\u8fd9\u4e2a\u5f15\u7528\u548c\u4efb\u4f55\u5176\u4ed6\u5f15\u7528\u4fdd\u6301\u6709\u6548\u3002 \u56de\u5fc6\u4e00\u4e0b\u4e0d\u80fd\u5728\u76f8\u540c\u4f5c\u7528\u57df\u4e2d\u540c\u65f6\u5b58\u5728\u53ef\u53d8\u548c\u4e0d\u53ef\u53d8\u5f15\u7528\u7684\u89c4\u5219\u3002 \u8fd9\u4e2a\u89c4\u5219\u9002\u7528\u4e8e\u4e0b\u9762\u7684\u793a\u4f8b\uff1a // \u5728\u62e5\u6709 vector \u4e2d\u9879\u7684\u5f15\u7528\u7684\u540c\u65f6\u5411\u5176\u589e\u52a0\u4e00\u4e2a\u5143\u7d20 let mut v = vec! [ 1 , 2 , 3 , 4 , 5 ]; let first = & v [ 0 ]; v . push ( 6 ); println! ( \"\u7b2c\u4e00\u4e2a\u5143\u7d20\u662f: {}\" , first ); // \u5f53\u6211\u4eec\u83b7\u53d6\u4e86 vector \u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u4e0d\u53ef\u53d8\u5f15\u7528 // \u5e76\u5c1d\u8bd5\u5728 vector \u672b\u5c3e\u589e\u52a0\u4e00\u4e2a\u5143\u7d20\u7684\u65f6\u5019\uff0c\u5982\u679c\u5c1d\u8bd5\u5728\u51fd\u6570\u7684\u540e\u9762\u5f15\u7528\u8fd9\u4e2a\u5143\u7d20\u662f\u884c\u4e0d\u901a\u7684 \u7f16\u8bd1\u4f1a\u7ed9\u51fa\u8fd9\u4e2a\u9519\u8bef $ cargo run Compiling collections v0 . 1.0 ( file : ///projects/collections) error [ E0502 ] : cannot borrow ` v ` as mutable because it is also borrowed as immutable - -> src / main . rs : 6 : 5 | 4 | let first = & v [ 0 ]; | - immutable borrow occurs here 5 | 6 | v . push ( 6 ); | ^^^^^^^^^ mutable borrow occurs here 7 | 8 | println! ( \"The first element is: {}\" , first ); | ----- immutable borrow later used here For more information about this error , try ` rustc -- explain E0502 ` . error : could not compile ` collections ` due to previous error \u4e3a\u4ec0\u4e48\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u5f15\u7528\u4f1a\u5173\u5fc3 vector \u7ed3\u5c3e\u7684\u53d8\u5316\uff1f \u4e0d\u80fd\u8fd9\u4e48\u505a\u7684\u539f\u56e0\u662f\u7531\u4e8e vector \u7684\u5de5\u4f5c\u65b9\u5f0f\uff1a \u5728 vector \u7684\u7ed3\u5c3e\u589e\u52a0\u65b0\u5143\u7d20\u65f6\uff0c\u5728\u6ca1\u6709\u8db3\u591f\u7a7a\u95f4\u5c06\u6240\u6709\u5143\u7d20\u4f9d\u6b21\u76f8\u90bb\u5b58\u653e\u7684\u60c5\u51b5\u4e0b\uff0c\u53ef\u80fd\u4f1a\u8981\u6c42\u5206\u914d\u65b0\u5185\u5b58\u5e76\u5c06\u8001\u7684\u5143\u7d20\u62f7\u8d1d\u5230\u65b0\u7684\u7a7a\u95f4\u4e2d\u3002 \u8fd9\u65f6\uff0c \u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u5f15\u7528\u5c31\u6307\u5411\u4e86\u88ab\u91ca\u653e\u7684\u5185\u5b58\u3002 \u501f\u7528\u89c4\u5219\u963b\u6b62\u7a0b\u5e8f\u9677\u5165\u8fd9\u79cd\u72b6\u51b5\u3002 \u5173\u4e8e Vec<T> \u7c7b\u578b\u7684\u66f4\u591a\u5b9e\u73b0\u7ec6\u8282\uff0c\u8bf7\u67e5\u770b \u201c The Rust onomicon \u201d \u904d\u5386 vector \u5982\u679c\u60f3\u8981\u4f9d\u6b21\u8bbf\u95ee vector \u4e2d\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\uff0c\u53ef\u4ee5\u904d\u5386\u5176\u6240\u6709\u7684\u5143\u7d20\u800c\u65e0\u9700\u901a\u8fc7\u7d22\u5f15\u4e00\u6b21\u4e00\u4e2a\u7684\u8bbf\u95ee\u3002 // \u901a\u8fc7 for \u5faa\u73af\u904d\u5386 vector \u7684\u5143\u7d20\u5e76\u6253\u5370 let v = vec! [ 100 , 32 , 57 ]; for i in & v { println! ( \"{}\" , i ); } // \u4e5f\u53ef\u4ee5\u904d\u5386\u53ef\u53d8 vector \u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\u7684\u53ef\u53d8\u5f15\u7528\u4ee5\u4fbf\u80fd\u6539\u53d8\u4ed6\u4eec let mut v = vec! [ 100 , 32 , 57 ]; for i in & mut v { // \u4e3a\u4e86\u4fee\u6539\u53ef\u53d8\u5f15\u7528\u6240\u6307\u5411\u7684\u503c\uff0c\u5728\u4f7f\u7528 += \u8fd0\u7b97\u7b26\u4e4b\u524d\u5fc5\u987b\u4f7f\u7528\u89e3\u5f15\u7528\u8fd0\u7b97\u7b26\uff08*\uff09\u83b7\u53d6 i \u4e2d\u7684\u503c\u3002 * i += 50 ; } \u679a\u4e3e\u6765\u50a8\u5b58\u591a\u79cd\u7c7b\u578b vector \u53ea\u80fd\u50a8\u5b58\u76f8\u540c\u7c7b\u578b\u7684\u503c\u3002\u8fd9\u662f\u5f88\u4e0d\u65b9\u4fbf\u7684\uff1b \u7edd\u5bf9\u4f1a\u6709\u9700\u8981\u50a8\u5b58\u4e00\u7cfb\u5217\u4e0d\u540c\u7c7b\u578b\u7684\u503c\u7684\u7528\u4f8b \u3002 \u5e78\u8fd0\u7684\u662f\uff0c\u679a\u4e3e\u7684\u6210\u5458\u90fd\u88ab\u5b9a\u4e49\u4e3a\u76f8\u540c\u7684\u679a\u4e3e\u7c7b\u578b\uff0c\u6240\u4ee5\u5f53\u9700\u8981\u5728 vector \u4e2d\u50a8\u5b58\u4e0d\u540c\u7c7b\u578b\u503c\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u5b9a\u4e49\u5e76\u4f7f\u7528\u4e00\u4e2a\u679a\u4e3e\uff01 \u4f8b\u5982\uff0c\u5047\u5982\u6211\u4eec\u60f3\u8981\u4ece\u7535\u5b50\u8868\u683c\u7684\u4e00\u884c\u4e2d\u83b7\u53d6\u503c\uff0c\u800c\u8fd9\u4e00\u884c\u7684\u6709\u4e9b\u5217\u5305\u542b\u6570\u5b57\uff0c\u6709\u4e9b\u5305\u542b\u6d6e\u70b9\u503c\uff0c\u8fd8\u6709\u4e9b\u662f\u5b57\u7b26\u4e32\u3002 \u6211\u4eec\u53ef\u4ee5\u5b9a\u4e49\u4e00\u4e2a\u679a\u4e3e\uff0c\u5176\u6210\u5458\u4f1a\u5b58\u653e\u8fd9\u4e9b\u4e0d\u540c\u7c7b\u578b\u7684\u503c\uff0c\u540c\u65f6\u6240\u6709\u8fd9\u4e9b\u679a\u4e3e\u6210\u5458\u90fd\u4f1a\u88ab\u5f53\u4f5c\u76f8\u540c\u7c7b\u578b\uff0c\u90a3\u4e2a\u679a\u4e3e\u7684\u7c7b\u578b\u3002 \u63a5\u7740\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u50a8\u5b58\u679a\u4e3e\u503c\u7684 vector\uff0c\u8fd9\u6837\u6700\u7ec8\u5c31\u80fd\u591f\u50a8\u5b58\u4e0d\u540c\u7c7b\u578b\u7684\u503c\u4e86\u3002 fn main () { enum SpreadsheetCell { Int ( i32 ), Float ( f64 ), Text ( String ), } let row = vec! [ SpreadsheetCell :: Int ( 3 ), SpreadsheetCell :: Text ( String :: from ( \"blue\" )), SpreadsheetCell :: Float ( 10.12 ), ]; } Rust \u5728\u7f16\u8bd1\u65f6\u5c31\u5fc5\u987b\u51c6\u786e\u7684\u77e5\u9053 vector \u4e2d\u7c7b\u578b\u7684\u539f\u56e0\u5728\u4e8e\u5b83\u9700\u8981\u77e5\u9053\u50a8\u5b58\u6bcf\u4e2a\u5143\u7d20\u5230\u5e95\u9700\u8981\u591a\u5c11\u5185\u5b58\u3002 \u7b2c\u4e8c\u4e2a\u597d\u5904\u662f\u53ef\u4ee5\u51c6\u786e\u7684\u77e5\u9053\u8fd9\u4e2a vector \u4e2d\u5141\u8bb8\u4ec0\u4e48\u7c7b\u578b\u3002 \u5982\u679c Rust \u5141\u8bb8 vector \u5b58\u653e\u4efb\u610f\u7c7b\u578b\uff0c\u90a3\u4e48\u5f53\u5bf9 vector \u5143\u7d20\u6267\u884c\u64cd\u4f5c\u65f6\u4e00\u4e2a\u6216\u591a\u4e2a\u7c7b\u578b\u7684\u503c\u5c31\u6709\u53ef\u80fd\u4f1a\u9020\u6210\u9519\u8bef\u3002 \u4f7f\u7528\u679a\u4e3e\u5916\u52a0 match \u610f\u5473\u7740 Rust \u80fd\u5728\u7f16\u8bd1\u65f6\u5c31\u4fdd\u8bc1\u603b\u662f\u4f1a\u5904\u7406\u6240\u6709\u53ef\u80fd\u7684\u60c5\u51b5. \u5982\u679c\u5728\u7f16\u5199\u7a0b\u5e8f\u65f6\u4e0d\u80fd\u786e\u5207\u65e0\u9057\u5730\u77e5\u9053\u8fd0\u884c\u65f6\u4f1a\u50a8\u5b58\u8fdb vector \u7684\u6240\u6709\u7c7b\u578b\uff0c\u679a\u4e3e\u6280\u672f\u5c31\u884c\u4e0d\u901a\u4e86\u3002\u76f8\u53cd\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 trait \u5bf9\u8c61\uff0c\u7b2c\u5341\u4e03\u7ae0\u4f1a\u8bb2\u5230\u5b83\u3002 \u73b0\u5728\u6211\u4eec\u4e86\u89e3\u4e86\u4e00\u4e9b\u4f7f\u7528 vector \u7684\u6700\u5e38\u89c1\u7684\u65b9\u5f0f\uff0c\u8bf7\u4e00\u5b9a\u53bb\u770b\u770b\u6807\u51c6\u5e93\u4e2d Vec \u5b9a\u4e49\u7684\u5f88\u591a\u5176\u4ed6\u5b9e\u7528\u65b9\u6cd5\u7684 API \u6587\u6863 \u3002 \u4f8b\u5982\uff0c\u9664\u4e86 push \u4e4b\u5916\u8fd8\u6709\u4e00\u4e2a pop \u65b9\u6cd5\uff0c\u5b83\u4f1a\u79fb\u9664\u5e76\u8fd4\u56de vector \u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u3002 \u5b57\u7b26\u4e32\u548cUTF-8 \u5b57\u7b26\u4e32 \u662f\u65b0\u664b Rustacean \u4eec\u901a\u5e38\u4f1a\u88ab\u56f0\u4f4f\u7684\u9886\u57df\uff0c\u8fd9\u662f\u7531\u4e8e\u4e09\u65b9\u9762\u7406\u7531\u7684\u7ed3\u5408\uff1a Rust \u503e\u5411\u4e8e\u786e\u4fdd\u66b4\u9732\u51fa\u53ef\u80fd\u7684\u9519\u8bef\uff0c\u5b57\u7b26\u4e32\u662f\u6bd4\u5f88\u591a\u7a0b\u5e8f\u5458\u6240\u60f3\u8c61\u7684\u8981\u66f4\u4e3a\u590d\u6742\u7684\u6570\u636e\u7ed3\u6784\uff0c\u4ee5\u53ca UTF-8 \u3002\u6240\u6709\u8fd9\u4e9b\u8981\u7d20\u7ed3\u5408\u8d77\u6765\u5bf9\u4e8e\u6765\u81ea\u5176\u4ed6\u8bed\u8a00\u80cc\u666f\u7684\u7a0b\u5e8f\u5458\u5c31\u53ef\u80fd\u663e\u5f97\u5f88\u56f0\u96be\u4e86\u3002 \u5728\u96c6\u5408\u7ae0\u8282\u4e2d\u8ba8\u8bba\u5b57\u7b26\u4e32\u7684\u539f\u56e0\u662f\uff0c\u5b57\u7b26\u4e32\u5c31\u662f\u4f5c\u4e3a\u5b57\u8282\u7684\u96c6\u5408\u5916\u52a0\u4e00\u4e9b\u65b9\u6cd5\u5b9e\u73b0\u7684\uff0c\u5f53\u8fd9\u4e9b\u5b57\u8282\u88ab\u89e3\u91ca\u4e3a\u6587\u672c\u65f6\uff0c\u8fd9\u4e9b\u65b9\u6cd5\u63d0\u4f9b\u4e86\u5b9e\u7528\u7684\u529f\u80fd\u3002 \u4ec0\u4e48\u662f\u5b57\u7b26\u4e32\uff1f \u5b57\u7b26\u4e32 \u3002Rust \u7684\u6838\u5fc3\u8bed\u8a00\u4e2d\u53ea\u6709\u4e00\u79cd\u5b57\u7b26\u4e32\u7c7b\u578b\uff1a \u5b57\u7b26\u4e32slice str \uff0c\u5b83\u901a\u5e38\u4ee5\u88ab \u501f\u7528 \u7684\u5f62\u5f0f\u51fa\u73b0\uff0c &str \u3002\u7b2c\u56db\u7ae0\u8bb2\u5230\u4e86 \u5b57\u7b26\u4e32 slices \uff1a \u5b83\u4eec\u662f\u4e00\u4e9b\u5bf9\u50a8\u5b58\u5728\u522b\u5904\u7684 UTF-8 \u7f16\u7801\u5b57\u7b26\u4e32\u6570\u636e\u7684\u5f15\u7528 \u3002 \u4e3e\u4f8b\u6765\u8bf4\uff0c\u7531\u4e8e\u5b57\u7b26\u4e32 \u5b57\u9762\u503c \u88ab\u50a8\u5b58\u5728\u7a0b\u5e8f\u7684\u4e8c\u8fdb\u5236\u8f93\u51fa\u4e2d\uff0c\u56e0\u6b64\u5b57\u7b26\u4e32\u5b57\u9762\u503c\u4e5f\u662f \u5b57\u7b26\u4e32slices \u3002 \u79f0\u4f5c String \u7684\u7c7b\u578b\u662f\u7531\u6807\u51c6\u5e93\u63d0\u4f9b\u7684\uff0c\u800c\u6ca1\u6709\u5199\u8fdb\u6838\u5fc3\u8bed\u8a00\u90e8\u5206\uff0c\u5b83\u662f \u53ef\u589e\u957f\u7684 \u3001 \u53ef\u53d8\u7684 \u3001 \u6709\u6240\u6709\u6743\u7684 \u3001 UTF-8 \u7f16\u7801\u7684\u5b57\u7b26\u4e32\u7c7b\u578b \u3002 \u5f53 Rustacean \u4eec\u8c08\u5230 Rust \u7684 \u201c \u5b57\u7b26\u4e32 \u201d\u65f6\uff0c\u5b83\u4eec\u901a\u5e38\u6307\u7684\u662f String \u6216 \u5b57\u7b26\u4e32slice &str \u7c7b\u578b \uff0c\u800c\u4e0d\u7279\u6307\u5176\u4e2d\u67d0\u4e00\u4e2a\u3002 \u867d\u7136\u672c\u90e8\u5206\u5185\u5bb9\u5927\u591a\u662f\u5173\u4e8e String \u7684\uff0c\u4e0d\u8fc7\u8fd9\u4e24\u4e2a\u7c7b\u578b\u5728 Rust \u6807\u51c6\u5e93\u4e2d\u90fd\u88ab\u5e7f\u6cdb\u4f7f\u7528\uff0c String \u548c \u5b57\u7b26\u4e32 slices \u90fd\u662f UTF-8 \u7f16\u7801\u7684\u3002 \u65b0\u5efa\u5b57\u7b26\u4e32 // \u4ee5 new \u51fd\u6570\u521b\u5efa\u5b57\u7b26\u4e32\u5f00\u59cb // \u65b0\u5efa\u4e00\u4e2a\u7a7a\u7684 String let mut s = String :: new (); \u901a\u5e38\u5b57\u7b26\u4e32\u4f1a\u6709\u521d\u59cb\u6570\u636e\uff0c\u56e0\u4e3a\u5e0c\u671b\u4e00\u5f00\u59cb\u5c31\u6709\u8fd9\u4e2a\u5b57\u7b26\u4e32\u3002\u4e3a\u6b64\uff0c\u53ef\u4ee5\u4f7f\u7528 to_string \u65b9\u6cd5\uff0c\u5b83\u80fd\u7528\u4e8e\u4efb\u4f55\u5b9e\u73b0\u4e86 Display trait \u7684\u7c7b\u578b\uff0c\u5b57\u7b26\u4e32\u5b57\u9762\u503c\u4e5f\u5b9e\u73b0\u4e86\u5b83\u3002 let data = \"initial contents\" ; let s = data . to_string (); // \u8be5\u65b9\u6cd5\u4e5f\u53ef\u76f4\u63a5\u7528\u4e8e\u5b57\u7b26\u4e32\u5b57\u9762\u503c\uff1a // \u4f1a\u521b\u5efa\u5305\u542b initial contents \u7684\u5b57\u7b26\u4e32\u3002 let s = \"initial contents\" . to_string (); // \u4e5f\u53ef\u4ee5\u4f7f\u7528 String::from \u51fd\u6570\u6765\u4ece\u5b57\u7b26\u4e32\u5b57\u9762\u503c\u521b\u5efa String let s = String :: from ( \"initial contents\" ); \u56e0\u4e3a\u5b57\u7b26\u4e32\u5e94\u7528\u5e7f\u6cdb\uff0c\u8fd9\u91cc\u6709\u5f88\u591a\u4e0d\u540c\u7684\u7528\u4e8e\u5b57\u7b26\u4e32\u7684\u901a\u7528 API \u53ef\u4f9b\u9009\u62e9\u3002\u5176\u4e2d\u4e00\u4e9b\u53ef\u80fd\u770b\u8d77\u6765\u591a\u4f59\uff0c\u4e0d\u8fc7\u90fd\u6709\u5176\u7528\u6b66\u4e4b\u5730\uff01\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c String::from \u548c .to_string \u6700\u7ec8\u505a\u4e86\u5b8c\u5168\u76f8\u540c\u7684\u5de5\u4f5c\uff0c\u6240\u4ee5\u5982\u4f55\u9009\u62e9\u5c31\u662f \u4ee3\u7801\u98ce\u683c\u4e0e\u53ef\u8bfb\u6027 \u7684\u95ee\u9898\u4e86\u3002 // \u5b57\u7b26\u4e32\u662f UTF-8 \u7f16\u7801\u7684\uff0c\u6240\u4ee5\u53ef\u4ee5\u5305\u542b\u4efb\u4f55\u53ef\u4ee5\u6b63\u786e\u7f16\u7801\u7684\u6570\u636e let hello = String :: from ( \"\u0627\u0644\u0633\u0644\u0627\u0645 \u0639\u0644\u064a\u0643\u0645\" ); let hello = String :: from ( \"Dobr\u00fd den\" ); let hello = String :: from ( \"Hello\" ); let hello = String :: from ( \"\u05e9\u05b8\u05c1\u05dc\u05d5\u05b9\u05dd\" ); let hello = String :: from ( \"\u0928\u092e\u0938\u094d\u0924\u0947\" ); let hello = String :: from ( \"\u3053\u3093\u306b\u3061\u306f\" ); let hello = String :: from ( \"\uc548\ub155\ud558\uc138\uc694\" ); let hello = String :: from ( \"\u4f60\u597d\" ); let hello = String :: from ( \"Ol\u00e1\" ); let hello = String :: from ( \"\u0417\u0434\u0440\u0430\u0432\u0441\u0442\u0432\u0443\u0439\u0442\u0435\" ); let hello = String :: from ( \"Hola\" ); // \u6240\u6709\u8fd9\u4e9b\u90fd\u662f\u6709\u6548\u7684 String \u503c \u66f4\u65b0\u5b57\u7b26\u4e32 String \u7684\u5927\u5c0f\u53ef\u4ee5\u589e\u52a0\uff0c\u5176\u5185\u5bb9\u4e5f\u53ef\u4ee5\u6539\u53d8\uff0c\u5c31\u50cf\u53ef\u4ee5\u653e\u5165\u66f4\u591a\u6570\u636e\u6765\u6539\u53d8 Vec \u7684\u5185\u5bb9\u4e00\u6837\u3002 \u53e6\u5916\uff0c\u53ef\u4ee5\u65b9\u4fbf\u7684\u4f7f\u7528 + \u8fd0\u7b97\u7b26\u6216 format! \u5b8f\u6765\u62fc\u63a5 String \u503c\u3002 push_str \u548c push // \u901a\u8fc7 push_str \u65b9\u6cd5\u6765\u9644\u52a0\u5b57\u7b26\u4e32 slice\uff0c\u4ece\u800c\u4f7f String \u53d8\u957f let mut s = String :: from ( \"foo\" ); s . push_str ( \"bar\" ); // s \u5c06\u4f1a\u5305\u542b foobar\u3002push_str \u65b9\u6cd5\u91c7\u7528\u5b57\u7b26\u4e32 slice\uff0c\u56e0\u4e3a\u6211\u4eec\u5e76\u4e0d\u9700\u8981\u83b7\u53d6\u53c2\u6570\u7684\u6240\u6709\u6743\u3002 // \u5c06\u5b57\u7b26\u4e32 slice \u7684\u5185\u5bb9\u9644\u52a0\u5230 String \u540e\u4f7f\u7528\u5b83 let mut s1 = String :: from ( \"foo\" ); let s2 = \"bar\" ; s1 . push_str ( s2 ); // \u5982\u679c push_str \u65b9\u6cd5\u83b7\u53d6\u4e86 s2 \u7684\u6240\u6709\u6743\uff0c\u5c31\u4e0d\u80fd\u5728\u6700\u540e\u4e00\u884c\u6253\u5370\u51fa\u5176\u503c\u4e86 println! ( \"s2 is {}\" , s2 ); // push \u65b9\u6cd5\u88ab\u5b9a\u4e49\u4e3a\u83b7\u53d6\u4e00\u4e2a\u5355\u72ec\u7684\u5b57\u7b26\u4f5c\u4e3a\u53c2\u6570\uff0c\u5e76\u9644\u52a0\u5230 String \u4e2d // \u4f7f\u7528 push \u5c06\u4e00\u4e2a\u5b57\u7b26\u52a0\u5165 String \u503c\u4e2d let mut s = String :: from ( \"lo\" ); // \u6dfb\u52a0mut\u5173\u952e\u5b57\u4f7f\u5176\u53ef\u53d8\u3002 s . push ( 'l' ); + \u8fd0\u7b97\u7b26\u6216 format! \u5b8f \u901a\u5e38\u4f1a\u5e0c\u671b\u5c06\u4e24\u4e2a\u5df2\u77e5\u7684\u5b57\u7b26\u4e32\u5408\u5e76\u5728\u4e00\u8d77\u3002\u4e00\u79cd\u529e\u6cd5\u662f\u50cf\u8fd9\u6837\u4f7f\u7528 + \u8fd0\u7b97\u7b26 // \u4f7f\u7528 + \u8fd0\u7b97\u7b26\u5c06\u4e24\u4e2a String \u503c\u5408\u5e76\u5230\u4e00\u4e2a\u65b0\u7684 String \u503c\u4e2d fn main () { let s1 = String :: from ( \"Hello, \" ); let s2 = String :: from ( \"world!\" ); let s3 = s1 + & s2 ; // \u6ce8\u610f s1 \u88ab\u79fb\u52a8\u4e86\uff0c\u4e0d\u80fd\u7ee7\u7eed\u4f7f\u7528 // \u4f7f\u7528\u4e86 &\uff0c\u610f\u5473\u7740\u6211\u4eec\u4f7f\u7528\u7b2c\u4e8c\u4e2a\u5b57\u7b26\u4e32\u7684 \u5f15\u7528 \u4e0e\u7b2c\u4e00\u4e2a\u5b57\u7b26\u4e32\u76f8\u52a0\u3002 // \u56e0\u4e3a add \u51fd\u6570\u7684 s \u53c2\u6570\uff1a\u53ea\u80fd\u5c06 &str \u548c String \u76f8\u52a0\uff0c\u4e0d\u80fd\u5c06\u4e24\u4e2a String \u503c\u76f8\u52a0\u3002 // println!(\"a is {s1}\"); // \u53d6\u6d88\u6ce8\u91ca\uff0c\u4f1a\u7f16\u8bd1\u4e0d\u901a\u8fc7\uff0cs1\u5df2\u7ecf\u79fb\u52a8\u4e86\uff0c\u4e0d\u53ef\u4f7f\u7528 println! ( \"c is {s3}\" ); // s3 \u5219\u6ca1\u95ee\u9898 } s1 \u5728\u76f8\u52a0\u540e\u4e0d\u518d\u6709\u6548\u7684\u539f\u56e0\uff0c\u548c\u4f7f\u7528 s2 \u7684\u5f15\u7528\u7684\u539f\u56e0\uff0c\u4e0e\u4f7f\u7528 + \u8fd0\u7b97\u7b26\u65f6\u8c03\u7528\u7684\u51fd\u6570\u7b7e\u540d\u6709\u5173\u3002 + \u8fd0\u7b97\u7b26\u4f7f\u7528\u4e86 add \u51fd\u6570\uff0c\u8fd9\u4e2a\u51fd\u6570\u7b7e\u540d\u770b\u8d77\u6765\u50cf\u8fd9\u6837\uff1a fn add ( self , s : & str ) -> String { // \u8fd9\u5e76\u4e0d\u662f\u6807\u51c6\u5e93\u4e2d\u5b9e\u9645\u7684\u7b7e\u540d\uff1b\u6807\u51c6\u5e93\u4e2d\u7684 add \u4f7f\u7528\u6cdb\u578b\u5b9a\u4e49\u3002 \u8fd9\u91cc\u6211\u4eec\u770b\u5230\u7684 add \u7684\u7b7e\u540d\u4f7f\u7528\u5177\u4f53\u7c7b\u578b\u4ee3\u66ff\u4e86\u6cdb\u578b\uff0c\u8fd9\u4e5f\u6b63\u662f\u5f53\u4f7f\u7528 String \u503c\u8c03\u7528\u8fd9\u4e2a\u65b9\u6cd5\u4f1a\u53d1\u751f\u7684\u3002\u7b2c\u5341\u7ae0\u4f1a\u8ba8\u8bba\u6cdb\u578b\u3002 \u6b63\u5982 add \u7684\u7b2c\u4e8c\u4e2a\u53c2\u6570\u6240\u6307\u5b9a\u7684\uff0c &s2 \u7684\u7c7b\u578b\u662f &String \u800c\u4e0d\u662f &str \u3002\u90a3\u4e48\u4e3a\u4ec0\u4e48\u793a\u4f8b\u8fd8\u80fd\u7f16\u8bd1\u5462\uff1f \u4e4b\u6240\u4ee5\u80fd\u591f\u5728 add \u8c03\u7528\u4e2d\u4f7f\u7528 &s2 \u662f\u56e0\u4e3a &String \u53ef\u4ee5\u88ab \u5f3a\u8f6c \uff08coerced\uff09\u6210 &str \u3002\u5f53 add \u51fd\u6570\u88ab\u8c03\u7528\u65f6\uff0cRust \u4f7f\u7528\u4e86\u4e00\u4e2a\u88ab\u79f0\u4e3a Deref \u5f3a\u5236\u8f6c\u6362 \uff08deref coercion\uff09\u7684\u6280\u672f\uff0c \u53ef\u4ee5\u5c06\u5176\u7406\u89e3\u4e3a\u5b83\u628a &s2 \u53d8\u6210\u4e86 &s2[..] \u3002 \u7b2c\u5341\u4e94\u7ae0 \u4f1a\u66f4\u6df1\u5165\u7684\u8ba8\u8bba Deref \u5f3a\u5236\u8f6c\u6362\u3002 \u56e0\u4e3a add \u6ca1\u6709\u83b7\u53d6\u53c2\u6570\u7684\u6240\u6709\u6743\uff0c\u6240\u4ee5 s2 \u5728\u8fd9\u4e2a\u64cd\u4f5c\u540e\u4ecd\u7136\u662f\u6709\u6548\u7684 String \u3002 \u5176\u6b21\uff0c\u53ef\u4ee5\u53d1\u73b0\u7b7e\u540d\u4e2d add \u83b7\u53d6\u4e86 self \u7684\u6240\u6709\u6743\uff0c\u56e0\u4e3a self \u6ca1\u6709 \u4f7f\u7528 & \u3002\u8fd9\u610f\u5473\u7740\u793a\u4f8b\u4e2d\u7684 s1 \u7684\u6240\u6709\u6743\u5c06\u88ab\u79fb\u52a8\u5230 add \u8c03\u7528\u4e2d\uff0c\u4e4b\u540e\u5c31\u4e0d\u518d\u6709\u6548\u3002 \u6240\u4ee5\u867d\u7136 let s3 = s1 + &s2; \u770b\u8d77\u6765\u5c31\u50cf\u5b83\u4f1a\u590d\u5236\u4e24\u4e2a\u5b57\u7b26\u4e32\u5e76\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u5b57\u7b26\u4e32\uff0c\u800c\u5b9e\u9645\u4e0a\u8fd9\u4e2a\u8bed\u53e5\u4f1a\u83b7\u53d6 s1 \u7684\u6240\u6709\u6743\uff0c\u9644\u52a0\u4e0a\u4ece s2 \u4e2d\u62f7\u8d1d\u7684\u5185\u5bb9\uff0c \u5e76\u8fd4\u56de\u7ed3\u679c\u7684\u6240\u6709\u6743 \u3002 \u6362\u53e5\u8bdd\u8bf4\uff0c\u5b83\u770b\u8d77\u6765\u597d\u50cf\u751f\u6210\u4e86\u5f88\u591a\u62f7\u8d1d\uff0c\u4e0d\u8fc7\u5b9e\u9645\u4e0a\u5e76\u6ca1\u6709\uff1a \u8fd9\u4e2a\u5b9e\u73b0\u6bd4\u62f7\u8d1d\u8981\u66f4\u9ad8\u6548 \u3002 // \u7ea7\u8054\u591a\u4e2a\u5b57\u7b26\u4e32\uff0c+ \u7684\u884c\u4e3a\u5c31\u663e\u5f97\u7b28\u91cd\u4e86 let s1 = String :: from ( \"tic\" ); let s2 = String :: from ( \"tac\" ); let s3 = String :: from ( \"toe\" ); let s = s1 + \"-\" + & s2 + \"-\" + & s3 ; // \u8fd9\u65f6 s \u7684\u5185\u5bb9\u4f1a\u662f \u201ctic-tac-toe\u201d // \u5bf9\u4e8e\u66f4\u4e3a\u590d\u6742\u7684\u5b57\u7b26\u4e32\u94fe\u63a5\uff0c\u53ef\u4ee5\u4f7f\u7528 format! \u5b8f let s = format! ( \"{}-{}-{}\" , s1 , s2 , s3 ); format! \u4e0e println! \u7684\u5de5\u4f5c\u539f\u7406\u76f8\u540c\uff0c\u4e0d\u8fc7\u4e0d\u540c\u4e8e\u5c06\u8f93\u51fa\u6253\u5370\u5230\u5c4f\u5e55\u4e0a\uff0c\u5b83\u8fd4\u56de\u4e00\u4e2a\u5e26\u6709\u7ed3\u679c\u5185\u5bb9\u7684 String \u3002\u8fd9\u4e2a\u7248\u672c\u5c31\u597d\u7406\u89e3\u7684\u591a\uff0c\u5b8f format! \u751f\u6210\u7684\u4ee3\u7801\u4f7f\u7528\u5f15\u7528\u6240\u4ee5\u4e0d\u4f1a\u83b7\u53d6\u4efb\u4f55\u53c2\u6570\u7684\u6240\u6709\u6743\u3002 \u7d22\u5f15\u5b57\u7b26\u4e32 Rust \u7684\u5b57\u7b26\u4e32\u4e0d\u652f\u6301\u7d22\u5f15\u3002 \u5982\u4e0b\u4f7f\u7528\u7d22\u5f15\u8bbf\u95ee\u5b57\u7b26\u4e32\u4f1a\u62a5\u7f16\u8bd1\u9519\u8bef\uff1a let s1 = String :: from ( \"hello\" ); let h = s1 [ 0 ]; // \u5c1d\u8bd5\u5bf9\u5b57\u7b26\u4e32\u4f7f\u7528\u7d22\u5f15\u8bed\u6cd5 \u4f1a\u5bfc\u81f4\u5982\u4e0b\u9519\u8bef\uff1a $ cargo run Compiling collections v0 . 1.0 ( file : ///projects/collections) error [ E0277 ] : the type ` String ` cannot be indexed by ` { integer } ` - -> src / main . rs : 3 : 13 | 3 | let h = s1 [ 0 ]; | ^^^^^ ` String ` cannot be indexed by ` { integer } ` | = help : the trait ` Index < { integer } > ` is not implemented for ` String ` For more information about this error , try ` rustc -- explain E0277 ` . error : could not compile ` collections ` due to previous error \u4e3a\u4ec0\u4e48\u4e0d\u652f\u6301\u5462\uff1f\u90a3\u4e48\u5c31\u8981\u56de\u7b54 Rust\u662f\u5982\u4f55\u5728\u5185\u5b58\u4e2d\u50a8\u5b58\u5b57\u7b26\u4e32\u7684 \u3002\u770b\u4e0b\u9762\ud83d\udc47\ud83c\udffb \u5185\u90e8\u8868\u73b0 String \u662f\u4e00\u4e2a Vec<u8> \u7684\u5c01\u88c5\u3002 let hello = String :: from ( \"Hola\" ); // \u5728\u8fd9\u91cc\uff0clen \u7684\u503c\u662f 4 \uff0c // \u8fd9\u610f\u5473\u7740\u50a8\u5b58\u5b57\u7b26\u4e32 \u201cHola\u201d \u7684 Vec \u7684\u957f\u5ea6\u662f\u56db\u4e2a\u5b57\u8282\uff1a // \u8fd9\u91cc\u6bcf\u4e00\u4e2a\u5b57\u6bcd\u7684 UTF-8 \u7f16\u7801\u90fd\u5360\u7528\u4e00\u4e2a\u5b57\u8282\u3002 \u8fd9\u4e2a\u5462? // \u5b57\u7b26\u4e32\u4e2d\u7684\u9996\u5b57\u6bcd\u662f\u897f\u91cc\u5c14\u5b57\u6bcd\u7684 Ze \u800c\u4e0d\u662f\u963f\u62c9\u4f2f\u6570\u5b57 3 let hello = String :: from ( \"\u0417\u0434\u0440\u0430\u0432\u0441\u0442\u0432\u0443\u0439\u0442\u0435\" ); // \u5f53\u95ee\u53ca\u8fd9\u4e2a\u5b57\u7b26\u662f\u591a\u957f\u7684\u65f6\u5019\u6709\u4eba\u53ef\u80fd\u4f1a\u8bf4\u662f 12\u3002 // \u7136\u800c\uff0cRust \u7684\u56de\u7b54\u662f 24\u3002 \u8fd9\u662f\u4f7f\u7528 UTF-8 \u7f16\u7801 \u201c\u0417\u0434\u0440\u0430\u0432\u0441\u0442\u0432\u0443\u0439\u0442\u0435\u201d \u6240\u9700\u8981\u7684\u5b57\u8282\u6570\uff0c\u8fd9\u662f\u56e0\u4e3a\u6bcf\u4e2a Unicode \u6807\u91cf\u503c\u9700\u8981 \u4e24\u4e2a\u5b57\u8282 \u5b58\u50a8\u3002 \u56e0\u6b64\u4e00\u4e2a\u5b57\u7b26\u4e32\u5b57\u8282\u503c\u7684\u7d22\u5f15\u5e76\u4e0d\u603b\u662f\u5bf9\u5e94\u4e00\u4e2a\u6709\u6548\u7684 Unicode \u6807\u91cf\u503c\u3002 \u4f5c\u4e3a\u6f14\u793a\uff0c\u8003\u8651\u5982\u4e0b\u65e0\u6548\u7684 Rust \u4ee3\u7801\uff1a let hello = \"\u0417\u0434\u0440\u0430\u0432\u0441\u0442\u0432\u0443\u0439\u0442\u0435\" ; let answer = & hello [ 0 ]; // \u5df2\u7ecf\u77e5\u9053 answer \u4e0d\u662f\u7b2c\u4e00\u4e2a\u5b57\u7b26 \u0417\u3002 \u5f53\u4f7f\u7528 UTF-8 \u7f16\u7801\u65f6\uff0c \u0417 \u7684\u7b2c\u4e00\u4e2a\u5b57\u8282 208 \uff0c\u7b2c\u4e8c\u4e2a\u662f 151 \uff0c\u6240\u4ee5 answer \u5b9e\u9645\u4e0a\u5e94\u8be5\u662f 208 \uff0c\u4e0d\u8fc7 208 \u81ea\u8eab\u5e76\u4e0d\u662f\u4e00\u4e2a\u6709\u6548\u7684\u5b57\u6bcd\u3002 \u8fd4\u56de 208 \u53ef\u4e0d\u662f\u4e00\u4e2a\u8bf7\u6c42\u5b57\u7b26\u4e32\u7b2c\u4e00\u4e2a\u5b57\u6bcd\u7684\u4eba\u6240\u5e0c\u671b\u770b\u5230\u7684\uff0c\u4e0d\u8fc7\u5b83\u662f Rust \u5728\u5b57\u8282\u7d22\u5f15 0 \u4f4d\u7f6e\u6240\u80fd\u63d0\u4f9b\u7684\u552f\u4e00\u6570\u636e\u3002 \u7528\u6237\u901a\u5e38\u4e0d\u4f1a\u60f3\u8981\u4e00\u4e2a\u5b57\u8282\u503c\u88ab\u8fd4\u56de\uff0c\u5373\u4fbf\u8fd9\u4e2a\u5b57\u7b26\u4e32\u53ea\u6709\u62c9\u4e01\u5b57\u6bcd\uff1a \u5373\u4fbf &\"hello\"[0] \u662f\u8fd4\u56de\u5b57\u8282\u503c\u7684\u6709\u6548\u4ee3\u7801\uff0c\u5b83\u4e5f\u5e94\u5f53\u8fd4\u56de 104 \u800c\u4e0d\u662f h \u3002 \u4e3a\u4e86\u907f\u514d\u8fd4\u56de\u610f\u5916\u7684\u503c\u5e76\u9020\u6210\u4e0d\u80fd\u7acb\u523b\u53d1\u73b0\u7684 bug\uff0cRust \u6839\u672c\u4e0d\u4f1a\u7f16\u8bd1\u8fd9\u4e9b\u4ee3\u7801\uff0c\u5e76\u5728\u5f00\u53d1\u8fc7\u7a0b\u4e2d\u53ca\u65e9\u675c\u7edd\u4e86\u8bef\u4f1a\u7684\u53d1\u751f\u3002 \u5b57\u8282\u3001\u6807\u91cf\u503c\u548c\u5b57\u5f62\u7c07 \u4ece Rust \u7684\u89d2\u5ea6\u6765\u8bb2\uff0c\u4e8b\u5b9e\u4e0a\u6709\u4e09\u79cd\u76f8\u5173\u65b9\u5f0f\u53ef\u4ee5\u7406\u89e3\u5b57\u7b26\u4e32\uff1a \u5b57\u8282 \u3001 \u6807\u91cf\u503c \u548c \u5b57\u5f62\u7c07 \uff08\u6700\u63a5\u8fd1\u4eba\u4eec\u773c\u4e2d \u5b57\u6bcd \u7684\u6982\u5ff5\uff09\u3002 \u6bd4\u5982\u8fd9\u4e2a\u7528\u68b5\u6587\u4e66\u5199\u7684\u5370\u5ea6\u8bed\u5355\u8bcd \u201c\u0928\u092e\u0938\u094d\u0924\u0947\u201d \uff0c\u6700\u7ec8\u5b83\u50a8\u5b58\u5728 vector \u4e2d\u7684 u8 \u503c\u770b\u8d77\u6765\u50cf\u8fd9\u6837\uff1a [ 224 , 164 , 168 , 224 , 164 , 174 , 224 , 164 , 184 , 224 , 165 , 141 , 224 , 164 , 164 , 224 , 165 , 135 ] \u8fd9\u91cc\u6709 18 \u4e2a\u5b57\u8282\uff0c\u4e5f\u5c31\u662f\u8ba1\u7b97\u673a\u6700\u7ec8\u4f1a\u50a8\u5b58\u7684\u6570\u636e\u3002\u5982\u679c\u4ece Unicode \u6807\u91cf\u503c\u7684\u89d2\u5ea6\u7406\u89e3\u5b83\u4eec\uff0c\u4e5f\u5c31\u50cf Rust \u7684 char \u7c7b\u578b\u90a3\u6837\uff0c\u8fd9\u4e9b\u5b57\u8282\u770b\u8d77\u6765\u50cf\u8fd9\u6837\uff1a [ '\u0928' , '\u092e' , '\u0938' , '\u094d' , '\u0924' , '\u0947' ] // \u8fd9\u91cc\u6709\u516d\u4e2a char\uff0c\u4e0d\u8fc7\u7b2c\u56db\u4e2a\u548c\u7b2c\u516d\u4e2a\u90fd\u4e0d\u662f\u5b57\u6bcd\uff0c\u5b83\u4eec\u662f\u53d1\u97f3\u7b26\u53f7\u672c\u8eab\u5e76\u6ca1\u6709\u4efb\u4f55\u610f\u4e49\u3002 // \u6700\u540e\uff0c\u5982\u679c\u4ee5\u5b57\u5f62\u7c07\u7684\u89d2\u5ea6\u7406\u89e3\uff0c\u5c31\u4f1a\u5f97\u5230\u4eba\u4eec\u6240\u8bf4\u7684\u6784\u6210\u8fd9\u4e2a\u5355\u8bcd\u7684\u56db\u4e2a\u5b57\u6bcd\uff1a [ \"\u0928\" , \"\u092e\" , \"\u0938\u094d\" , \"\u0924\u0947\" ] Rust \u63d0\u4f9b\u4e86\u591a\u79cd\u4e0d\u540c\u7684\u65b9\u5f0f\u6765\u89e3\u91ca\u8ba1\u7b97\u673a\u50a8\u5b58\u7684\u539f\u59cb\u5b57\u7b26\u4e32\u6570\u636e\uff0c\u8fd9\u6837\u7a0b\u5e8f\u5c31\u53ef\u4ee5\u9009\u62e9\u5b83\u9700\u8981\u7684\u8868\u73b0\u65b9\u5f0f\uff0c\u800c\u65e0\u6240\u8c13\u662f\u4f55\u79cd\u4eba\u7c7b\u8bed\u8a00\u3002 \u6700\u540e\u4e00\u4e2a Rust \u4e0d\u5141\u8bb8\u4f7f\u7528\u7d22\u5f15\u83b7\u53d6 String \u5b57\u7b26\u7684\u539f\u56e0\u662f\uff0c \u7d22\u5f15\u64cd\u4f5c\u9884\u671f\u603b\u662f\u9700\u8981\u5e38\u6570\u65f6\u95f4 (O(1)) \u3002\u4f46\u662f\u5bf9\u4e8e String \u4e0d\u53ef\u80fd\u4fdd\u8bc1\u8fd9\u6837\u7684\u6027\u80fd\uff0c \u56e0\u4e3a Rust \u5fc5\u987b\u4ece\u5f00\u5934\u5230\u7d22\u5f15\u4f4d\u7f6e\u904d\u5386\u6765\u786e\u5b9a\u6709\u591a\u5c11\u6709\u6548\u7684\u5b57\u7b26\u3002 \u5b57\u7b26\u4e32 slice \u7d22\u5f15\u5b57\u7b26\u4e32\u901a\u5e38\u662f\u4e00\u4e2a\u574f\u70b9\u5b50\uff0c \u56e0\u4e3a\u5b57\u7b26\u4e32\u7d22\u5f15\u5e94\u8be5\u8fd4\u56de\u7684\u7c7b\u578b\u662f\u4e0d\u660e\u786e\u7684\uff1a\u5b57\u8282\u503c\u3001\u5b57\u7b26\u3001\u5b57\u5f62\u7c07\u6216\u8005\u5b57\u7b26\u4e32 slice\u3002 \u4e3a\u4e86\u66f4\u660e\u786e\u7d22\u5f15\u5e76\u8868\u660e\u4f60\u9700\u8981\u4e00\u4e2a\u5b57\u7b26\u4e32 slice \uff0c\u76f8\u6bd4\u4f7f\u7528 [] \u548c \u5355\u4e2a\u503c \u7684\u7d22\u5f15\uff0c\u53ef\u4ee5\u4f7f\u7528 [] \u548c\u4e00\u4e2a range \u6765\u521b\u5efa\u542b\u7279\u5b9a\u5b57\u8282\u7684\u5b57\u7b26\u4e32 slice \uff1a let hello = \"\u0417\u0434\u0440\u0430\u0432\u0441\u0442\u0432\u0443\u0439\u0442\u0435\" ; let s = & hello [ 0 .. 4 ]; // s \u4f1a\u662f\u4e00\u4e2a &str\uff0c\u5b83\u5305\u542b\u5b57\u7b26\u4e32\u7684\u5934\u56db\u4e2a\u5b57\u8282\u3002 // \u65e9\u4e9b\u65f6\u5019\uff0c\u63d0\u5230\u4e86\u8fd9\u4e9b\u5b57\u6bcd\u90fd\u662f\u4e24\u4e2a\u5b57\u8282\u957f\u7684\uff0c // \u6240\u4ee5\u8fd9\u610f\u5473\u7740 s \u5c06\u4f1a\u662f \u201c\u0417\u0434\u201d\u3002 \u5982\u679c\u83b7\u53d6 &hello[0..1] \u4f1a\u53d1\u751f\u4ec0\u4e48\u5462\uff1f \u7b54\u6848\u662f\uff1aRust \u5728\u8fd0\u884c\u65f6\u4f1a panic \uff0c\u5c31\u8ddf\u8bbf\u95ee vector \u4e2d\u7684\u65e0\u6548\u7d22\u5f15\u65f6\u4e00\u6837\uff1a $ cargo run Compiling collections v0 . 1.0 ( file : ///projects/collections) Finished dev [ unoptimized + debuginfo ] target ( s ) in 0.43 s Running ` target / debug / collections ` thread ' main ' panicked at ' byte index 1 is not a char boundary ; it is inside '\u0417' ( bytes 0 .. 2 ) of `\u0417\u0434\u0440\u0430\u0432\u0441\u0442\u0432\u0443\u0439\u0442\u0435` ' , src / main . rs : 4 : 14 note : run with ` RUST_BACKTRACE = 1 ` environment variable to display a backtrace \u5e94\u8be5\u5c0f\u5fc3\u8c28\u614e\u7684\u4f7f\u7528\u8fd9\u4e2a\u64cd\u4f5c\uff0c\u56e0\u4e3a\u8fd9\u4e48\u505a\u53ef\u80fd\u4f1a\u4f7f\u4f60\u7684\u7a0b\u5e8f\u5d29\u6e83\u3002 \u904d\u5386\u5b57\u7b26\u4e32 \u64cd\u4f5c\u5b57\u7b26\u4e32\u6bcf\u4e00\u90e8\u5206\u7684\u6700\u597d\u7684\u65b9\u6cd5\u662f\u660e\u786e\u8868\u793a\u9700\u8981 \u5b57\u7b26 \u8fd8\u662f \u5b57\u8282 \u3002\u5bf9\u4e8e\u5355\u72ec\u7684 Unicode \u6807\u91cf\u503c\u4f7f\u7528 chars \u65b9\u6cd5\u3002 \u5bf9 \u201c\u0928\u092e\u0938\u094d\u0924\u0947\u201d \u8c03\u7528 chars \u65b9\u6cd5\u4f1a\u5c06\u5176\u5206\u5f00\u5e76\u8fd4\u56de\u516d\u4e2a char \u7c7b\u578b\u7684\u503c\uff0c\u63a5\u7740\u5c31\u53ef\u4ee5\u904d\u5386\u5176\u7ed3\u679c\u6765\u8bbf\u95ee\u6bcf\u4e00\u4e2a\u5143\u7d20\u4e86\uff1a for c in \"\u0928\u092e\u0938\u094d\u0924\u0947\" . chars () { println! ( \"{}\" , c ); } \u4f1a\u6253\u5370\u51fa\u5982\u4e0b\u5185\u5bb9\uff1a \u0928 \u092e \u0938 \u094d \u0924 \u0947 \u53e6\u5916 bytes \u65b9\u6cd5\u8fd4\u56de\u6bcf\u4e00\u4e2a \u539f\u59cb\u5b57\u8282 \uff0c\u8fd9\u53ef\u80fd\u4f1a\u9002\u5408\u4f60\u7684\u4f7f\u7528\u573a\u666f\uff1a for b in \"\u0928\u092e\u0938\u094d\u0924\u0947\" . bytes () { println! ( \"{}\" , b ); } \u4f1a\u6253\u5370\u51fa\u7ec4\u6210 String \u7684 18 \u4e2a\u5b57\u8282\uff1a 224 164 // --snip-- 165 135 \u8bf7\u8bb0\u4f4f\u6709\u6548\u7684 Unicode \u6807\u91cf\u503c\u53ef\u80fd\u4f1a\u7531\u4e0d\u6b62\u4e00\u4e2a\u5b57\u8282\u7ec4\u6210\u3002 \u4ece\u5b57\u7b26\u4e32\u4e2d\u83b7\u53d6\u5b57\u5f62\u7c07\u662f\u5f88\u590d\u6742\u7684\uff0c\u6240\u4ee5\u6807\u51c6\u5e93\u5e76\u6ca1\u6709\u63d0\u4f9b\u8fd9\u4e2a\u529f\u80fd\u3002 crates.io \u4e0a\u6709\u4e9b\u63d0\u4f9b\u8fd9\u6837\u529f\u80fd\u7684 crate \u3002 \u5b57\u7b26\u4e32\u5e76\u4e0d\u7b80\u5355 \u603b\u800c\u8a00\u4e4b\uff0c\u5b57\u7b26\u4e32\u8fd8\u662f\u5f88\u590d\u6742\u7684\u3002 \u4e0d\u540c\u7684\u8bed\u8a00\u9009\u62e9\u4e86\u4e0d\u540c\u7684\u5411\u7a0b\u5e8f\u5458\u5c55\u793a\u5176\u590d\u6742\u6027\u7684\u65b9\u5f0f \u3002 Rust \u9009\u62e9\u4e86\u4ee5\u51c6\u786e\u7684\u65b9\u5f0f\u5904\u7406 String \u6570\u636e\u4f5c\u4e3a\u6240\u6709 Rust \u7a0b\u5e8f\u7684\u9ed8\u8ba4\u884c\u4e3a\uff0c\u8fd9\u610f\u5473\u7740\u7a0b\u5e8f\u5458\u4eec\u5fc5\u987b\u66f4\u591a\u7684\u601d\u8003\u5982\u4f55\u9884\u5148\u5904\u7406 UTF-8 \u6570\u636e\u3002 \u8fd9\u79cd\u6743\u8861\u53d6\u820d\u76f8\u6bd4\u5176\u4ed6\u8bed\u8a00\u66f4\u591a\u7684\u66b4\u9732\u51fa\u4e86\u5b57\u7b26\u4e32\u7684\u590d\u6742\u6027\uff0c\u4e0d\u8fc7\u4e5f\u4f7f\u4f60\u5728\u5f00\u53d1\u751f\u547d\u5468\u671f\u540e\u671f\u514d\u4e8e\u5904\u7406\u6d89\u53ca\u975e ASCII \u5b57\u7b26\u7684\u9519\u8bef\u3002 HashMap \u952e\u503c\u5bf9 \u96c6\u5408\u7c7b\u578b \u54c8\u5e0c map \uff08hash map\uff09\u3002 HashMap<K, V> \u7c7b\u578b\u50a8\u5b58\u4e86\u4e00\u4e2a\u952e\u7c7b\u578b K \u5bf9\u5e94\u4e00\u4e2a\u503c\u7c7b\u578b V \u7684\u6620\u5c04\u3002 \u5b83\u901a\u8fc7\u4e00\u4e2a \u54c8\u5e0c\u51fd\u6570 \uff08hashing function\uff09\u6765\u5b9e\u73b0\u6620\u5c04\uff0c\u51b3\u5b9a\u5982\u4f55\u5c06\u952e\u548c\u503c\u653e\u5165\u5185\u5b58\u4e2d\u3002 \u5f88\u591a\u7f16\u7a0b\u8bed\u8a00\u652f\u6301\u8fd9\u79cd\u6570\u636e\u7ed3\u6784\uff0c\u4e0d\u8fc7\u901a\u5e38\u6709\u4e0d\u540c\u7684\u540d\u5b57\uff1a \u54c8\u5e0c \u3001 map \u3001 \u5bf9\u8c61 \u3001 \u54c8\u5e0c\u8868 \u6216\u8005 \u5173\u8054\u6570\u7ec4 \uff0c \u54c8\u5e0c map \u53ef\u4ee5\u7528\u4e8e\u9700\u8981\u4efb\u4f55\u7c7b\u578b\u4f5c\u4e3a\u952e\u6765\u5bfb\u627e\u6570\u636e\u7684\u60c5\u51b5\uff0c\u800c\u4e0d\u662f\u50cf vector \u90a3\u6837\u901a\u8fc7\u7d22\u5f15\u3002 \u65b0\u5efa\u54c8\u5e0c map // \u7528 new \u521b\u5efa\u4e00\u4e2a\u7a7a\u7684 HashMap\uff0c\u5e76\u4f7f\u7528 insert \u589e\u52a0\u5143\u7d20\u3002 use std :: collections :: HashMap ; // \u5fc5\u987b\u9996\u5148 use \u6807\u51c6\u5e93\u4e2d\u96c6\u5408\u90e8\u5206\u7684 HashMap // HashMap \u662f\u6700\u4e0d\u5e38\u7528\u7684\uff0c\u6240\u4ee5\u5e76\u6ca1\u6709\u88ab prelude \u81ea\u52a8\u5f15\u7528\u3002 // \u6807\u51c6\u5e93\u4e2d\u5bf9 HashMap \u7684\u652f\u6301\u4e5f\u76f8\u5bf9\u8f83\u5c11\uff0c\u4f8b\u5982\uff0c\u5e76\u6ca1\u6709\u5185\u5efa\u7684\u6784\u5efa\u5b8f\u3002 let mut scores = HashMap :: new (); scores . insert ( String :: from ( \"Blue\" ), 10 ); scores . insert ( String :: from ( \"Yellow\" ), 50 ); \u50cf vector \u4e00\u6837\uff0c\u54c8\u5e0c map \u5c06\u5b83\u4eec\u7684\u6570\u636e\u50a8\u5b58\u5728\u5806\u4e0a\uff0c\u8fd9\u4e2a HashMap \u7684\u952e\u7c7b\u578b\u662f String \u800c\u503c\u7c7b\u578b\u662f i32 \u3002 \u7c7b\u4f3c\u4e8e vector \uff0c \u54c8\u5e0c map \u662f\u540c\u8d28\u7684\uff1a \u6240\u6709\u7684\u952e\u5fc5\u987b\u662f\u76f8\u540c\u7c7b\u578b\uff0c\u503c\u4e5f\u5fc5\u987b\u90fd\u662f\u76f8\u540c\u7c7b\u578b\u3002 \u53e6\u4e00\u4e2a\u6784\u5efa\u54c8\u5e0c map \u7684\u65b9\u6cd5\u662f\u5728\u4e00\u4e2a\u5143\u7ec4\u7684 vector \u4e0a\u4f7f\u7528 \u8fed\u4ee3\u5668 \uff08iterator\uff09\u548c collect \u65b9\u6cd5\uff0c\u5176\u4e2d\u6bcf\u4e2a\u5143\u7ec4\u5305\u542b\u4e00\u4e2a\u952e\u503c\u5bf9\u3002 \u4f1a\u5728\u7b2c\u5341\u4e09\u7ae0\u7684 \u201c \u4f7f\u7528\u8fed\u4ee3\u5668\u5904\u7406\u4e00\u7cfb\u5217\u5143\u7d20 \u201d \u90e8\u5206 \u4ecb\u7ecd\u8fed\u4ee3\u5668\u53ca\u5176\u5173\u8054\u65b9\u6cd5 \u3002 collect \u65b9\u6cd5\u53ef\u4ee5\u5c06\u6570\u636e\u6536\u96c6\u8fdb\u4e00\u7cfb\u5217\u7684\u96c6\u5408\u7c7b\u578b\uff0c\u5305\u62ec HashMap \u3002 use std :: collections :: HashMap ; let teams = vec! [ String :: from ( \"Blue\" ), String :: from ( \"Yellow\" )]; let initial_scores = vec! [ 10 , 50 ]; // \u8fd9\u91cc HashMap<_, _> \u7c7b\u578b\u6ce8\u89e3\u662f\u5fc5\u8981\u7684\uff0c\u56e0\u4e3a\u53ef\u80fd collect \u4e3a\u5f88\u591a\u4e0d\u540c\u7684\u6570\u636e\u7ed3\u6784\uff0c\u800c\u9664\u975e\u663e\u5f0f\u6307\u5b9a\u5426\u5219 Rust \u65e0\u4ece\u5f97\u77e5\u4f60\u9700\u8981\u7684\u7c7b\u578b\u3002 // \u4f46\u662f\u5bf9\u4e8e\u952e\u548c\u503c\u7684\u7c7b\u578b\u53c2\u6570\u6765\u8bf4\uff0c\u53ef\u4ee5\u4f7f\u7528\u4e0b\u5212\u7ebf\u5360\u4f4d\uff0c\u800c Rust \u80fd\u591f\u6839\u636e vector \u4e2d\u6570\u636e\u7684\u7c7b\u578b\u63a8\u65ad\u51fa HashMap \u6240\u5305\u542b\u7684\u7c7b\u578b\u3002 // \u952e\uff08key\uff09\u7c7b\u578b\u662f String\uff0c // \u503c\uff08value\uff09\u7c7b\u578b\u662f i32\uff0c let mut scores : HashMap < _ , _ > = teams . into_iter (). zip ( initial_scores . into_iter ()). collect (); \u54c8\u5e0c map \u548c\u6240\u6709\u6743 \u5bf9\u4e8e\u50cf i32 \u8fd9\u6837\u7684\u5b9e\u73b0\u4e86 Copy trait \u7684\u7c7b\u578b\uff0c\u5176\u503c\u53ef\u4ee5\u62f7\u8d1d\u8fdb \u54c8\u5e0c map \u3002\u5bf9\u4e8e\u50cf String \u8fd9\u6837\u62e5\u6709\u6240\u6709\u6743\u7684\u503c\uff0c\u5176\u503c\u5c06\u88ab \u79fb\u52a8 \u800c \u54c8\u5e0c map \u4f1a\u6210\u4e3a\u8fd9\u4e9b\u503c\u7684\u6240\u6709\u8005\uff0c use std :: collections :: HashMap ; let field_name = String :: from ( \"Favorite color\" ); let field_value = String :: from ( \"Blue\" ); let mut map = HashMap :: new (); map . insert ( field_name , field_value ); // \u8fd9\u91cc field_name \u548c field_value \u4e0d\u518d\u6709\u6548\uff0c // \u5c1d\u8bd5\u4f7f\u7528\u5b83\u4eec\u770b\u770b\u4f1a\u51fa\u73b0\u4ec0\u4e48\u7f16\u8bd1\u9519\u8bef\uff01 // \u5f53 insert \u8c03\u7528\u5c06 field_name \u548c field_value \u79fb\u52a8\u5230\u54c8\u5e0c map \u4e2d\u540e\uff0c\u5c06\u4e0d\u80fd\u4f7f\u7528\u8fd9\u4e24\u4e2a\u7ed1\u5b9a\u3002 \u5982\u679c\u5c06\u503c\u7684\u5f15\u7528\u63d2\u5165\u54c8\u5e0c map\uff0c\u8fd9\u4e9b\u503c\u672c\u8eab\u5c06\u4e0d\u4f1a\u88ab\u79fb\u52a8\u8fdb\u54c8\u5e0c map\u3002\u4f46\u662f\u8fd9\u4e9b\u5f15\u7528\u6307\u5411\u7684\u503c\u5fc5\u987b\u81f3\u5c11\u5728\u54c8\u5e0c map \u6709\u6548\u65f6\u4e5f\u662f\u6709\u6548\u7684\u3002 \u7b2c\u5341\u7ae0 \u201c \u751f\u547d\u5468\u671f\u4e0e\u5f15\u7528\u6709\u6548\u6027 \u201d \u90e8\u5206\u5c06\u4f1a\u66f4\u591a\u7684\u8ba8\u8bba\u8fd9\u4e2a\u95ee\u9898\u3002 \u8bbf\u95ee\u54c8\u5e0c map \u53ef\u4ee5\u901a\u8fc7 get \u65b9\u6cd5\u5e76\u63d0\u4f9b\u5bf9\u5e94\u7684\u952e\u6765\u4ece\u54c8\u5e0c map \u4e2d\u83b7\u53d6\u503c use std :: collections :: HashMap ; let mut scores = HashMap :: new (); scores . insert ( String :: from ( \"Blue\" ), 10 ); scores . insert ( String :: from ( \"Yellow\" ), 50 ); let team_name = String :: from ( \"Blue\" ); let score = scores . get ( & team_name ); // score \u662f\u4e0e\u84dd\u961f\u5206\u6570\u76f8\u5173\u7684\u503c\uff0c\u5e94\u4e3a Some(10)\u3002 // \u56e0\u4e3a get \u8fd4\u56de Option<V>\uff0c\u6240\u4ee5\u7ed3\u679c\u88ab\u88c5\u8fdb Some\uff1b // \u5982\u679c\u67d0\u4e2a\u952e\u5728\u54c8\u5e0c map \u4e2d\u6ca1\u6709\u5bf9\u5e94\u7684\u503c\uff0cget \u4f1a\u8fd4\u56de None\u3002 // \u8fd9\u65f6\u5c31\u8981\u7528\u67d0\u79cd\u7b2c\u516d\u7ae0\u63d0\u5230\u7684\u65b9\u6cd5\u4e4b\u4e00\u6765\u5904\u7406 Option\u3002 // if let \u65b9\u5f0f\ud83d\udc47\ud83c\udffb if let Some ( value ) = score { println! ( \"value is {value}\" ) } else { println! ( \"not value\" ) } // match \u65b9\u5f0f\ud83d\udc47\ud83c\udffb match score { Some ( value ) => { println! ( \"value is {value}\" ) } // None => { // println!(\"not value\") // } _ => println! ( \"not value\" ), } \u53ef\u4ee5\u4f7f\u7528\u4e0e vector \u7c7b\u4f3c\u7684\u65b9\u5f0f\u6765\u904d\u5386\u54c8\u5e0c map \u4e2d\u7684\u6bcf\u4e00\u4e2a\u952e\u503c\u5bf9\uff0c\u4e5f\u5c31\u662f for \u5faa\u73af\uff1a use std :: collections :: HashMap ; let mut scores = HashMap :: new (); scores . insert ( String :: from ( \"Blue\" ), 10 ); scores . insert ( String :: from ( \"Yellow\" ), 50 ); for ( key , value ) in & scores { println! ( \"{}: {}\" , key , value ); } // \u8fd9\u4f1a\u4ee5\u4efb\u610f\u987a\u5e8f\u6253\u5370\u51fa\u6bcf\u4e00\u4e2a\u952e\u503c\u5bf9\uff1a // Blue:10 // Yellow:50 \u66f4\u65b0\u54c8\u5e0c map \u5c3d\u7ba1\u952e\u503c\u5bf9\u7684\u6570\u91cf\u662f\u53ef\u4ee5\u589e\u957f\u7684\uff0c\u4e0d\u8fc7\u4efb\u4f55\u65f6\u5019\uff0c\u6bcf\u4e2a\u952e\u53ea\u80fd\u5173\u8054\u4e00\u4e2a\u503c\u3002 \u5f53\u6211\u4eec\u60f3\u8981\u6539\u53d8\u54c8\u5e0c map \u4e2d\u7684\u6570\u636e\u65f6\uff0c\u5fc5\u987b\u51b3\u5b9a\u5982\u4f55\u5904\u7406\u4e00\u4e2a\u952e\u5df2\u7ecf\u6709\u503c\u4e86\u7684\u60c5\u51b5\u3002 \u53ef\u4ee5\u9009\u62e9\u5b8c\u5168\u65e0\u89c6\u65e7\u503c\u5e76\u7528\u65b0\u503c\u4ee3\u66ff\u65e7\u503c\u3002 \u53ef\u4ee5\u9009\u62e9\u4fdd\u7559\u65e7\u503c\u800c\u5ffd\u7565\u65b0\u503c\uff0c\u5e76\u53ea\u5728\u952e \u6ca1\u6709 \u5bf9\u5e94\u503c\u65f6\u589e\u52a0\u65b0\u503c\u3002 \u6216\u8005\u53ef\u4ee5\u7ed3\u5408\u65b0\u65e7\u4e24\u503c\u3002 \u8986\u76d6\u4e00\u4e2a\u503c \u5982\u679c\u63d2\u5165\u4e86\u4e00\u4e2a\u952e\u503c\u5bf9\uff0c\u63a5\u7740\u7528\u76f8\u540c\u7684\u952e\u63d2\u5165\u4e00\u4e2a\u4e0d\u540c\u7684\u503c\uff0c\u4e0e\u8fd9\u4e2a\u952e\u76f8\u5173\u8054\u7684\u65e7\u503c\u5c06\u88ab\u66ff\u6362\u3002 use std :: collections :: HashMap ; let mut scores = HashMap :: new (); scores . insert ( String :: from ( \"Blue\" ), 10 ); scores . insert ( String :: from ( \"Blue\" ), 25 ); println! ( \"{:?}\" , scores ); // \u8fd9\u4f1a\u6253\u5370\u51fa {\"Blue\": 25}\u3002\u539f\u59cb\u7684\u503c 10 \u5219\u88ab\u8986\u76d6\u4e86\u3002 \u53ea\u5728\u952e\u6ca1\u6709\u5bf9\u5e94\u503c\u65f6\u63d2\u5165 \u7ecf\u5e38\u4f1a\u68c0\u67e5\u67d0\u4e2a\u7279\u5b9a\u7684\u952e\u662f\u5426\u6709\u503c\uff0c\u5982\u679c\u6ca1\u6709\u5c31\u63d2\u5165\u4e00\u4e2a\u503c\u3002 \u4e3a\u6b64 \u54c8\u5e0c map \u6709\u4e00\u4e2a\u7279\u6709\u7684 API\uff0c\u53eb\u505a entry \uff0c\u5b83\u83b7\u53d6\u6211\u4eec\u60f3\u8981\u68c0\u67e5\u7684\u952e\u4f5c\u4e3a\u53c2\u6570\u3002 entry \u51fd\u6570\u7684\u8fd4\u56de\u503c\u662f\u4e00\u4e2a\u679a\u4e3e\uff0c Entry \uff0c\u5b83\u4ee3\u8868\u4e86\u53ef\u80fd\u5b58\u5728\u4e5f\u53ef\u80fd\u4e0d\u5b58\u5728\u7684\u503c\u3002 use std :: collections :: HashMap ; let mut scores = HashMap :: new (); scores . insert ( String :: from ( \"Blue\" ), 10 ); scores . entry ( String :: from ( \"Yellow\" )). or_insert ( 50 ); scores . entry ( String :: from ( \"Blue\" )). or_insert ( 50 ); println! ( \"{:?}\" , scores ); // \u4f1a\u6253\u5370\u51fa {\"Yellow\": 50, \"Blue\": 10}\u3002 Entry \u7684 or_insert \u65b9\u6cd5\u5728\u952e\u5bf9\u5e94\u7684\u503c\u5b58\u5728\u65f6\u5c31\u8fd4\u56de\u8fd9\u4e2a\u503c\u7684\u53ef\u53d8\u5f15\u7528\uff0c\u5982\u679c\u4e0d\u5b58\u5728\u5219\u5c06\u53c2\u6570\u4f5c\u4e3a\u65b0\u503c\u63d2\u5165\u5e76\u8fd4\u56de\u65b0\u503c\u7684\u53ef\u53d8\u5f15\u7528\u3002 \u8fd9\u6bd4\u7f16\u5199\u81ea\u5df1\u7684\u903b\u8f91\u8981\u7b80\u660e\u7684\u591a\uff0c\u53e6\u5916\u4e5f\u4e0e\u501f\u7528\u68c0\u67e5\u5668\u7ed3\u5408\u5f97\u66f4\u597d\u3002 \u6839\u636e\u65e7\u503c\u66f4\u65b0\u4e00\u4e2a\u503c \u53e6\u4e00\u4e2a\u5e38\u89c1\u7684\u54c8\u5e0c map \u7684\u5e94\u7528\u573a\u666f\u662f\u627e\u5230\u4e00\u4e2a\u952e\u5bf9\u5e94\u7684\u503c\u5e76\u6839\u636e\u65e7\u7684\u503c\u66f4\u65b0\u5b83\u3002 \u793a\u4f8b\u4e2d\u7684\u4ee3\u7801\u8ba1\u6570\u4e00\u4e9b\u6587\u672c\u4e2d\u6bcf\u4e00\u4e2a\u5355\u8bcd\u5206\u522b\u51fa\u73b0\u4e86\u591a\u5c11\u6b21\u3002 use std :: collections :: HashMap ; let text = \"hello world wonderful world\" ; let mut map = HashMap :: new (); // split_whitespace \u65b9\u6cd5\u4f1a\u8fed\u4ee3 text \u7684\u503c\u7531\u7a7a\u683c\u5206\u9694\u7684\u5b50 slice. for word in text . split_whitespace () { // or_insert \u65b9\u6cd5\u8fd4\u56de\u8fd9\u4e2a\u952e\u7684\u503c\u7684\u4e00\u4e2a\u53ef\u53d8\u5f15\u7528\uff08&mut V\uff09\u3002 let count = map . entry ( word ). or_insert ( 0 ); // \u8fd9\u91cc\u5c06\u8fd9\u4e2a\u53ef\u53d8\u5f15\u7528\u50a8\u5b58\u5728 count \u53d8\u91cf\u4e2d\uff0c\u6240\u4ee5\u4e3a\u4e86\u8d4b\u503c\u5fc5\u987b\u9996\u5148\u4f7f\u7528\u661f\u53f7\uff08*\uff09\u89e3\u5f15\u7528 count\u3002 * count += 1 ; // \u8fd9\u4e2a\u53ef\u53d8\u5f15\u7528\u5728 for \u5faa\u73af\u7684\u7ed3\u5c3e\u79bb\u5f00\u4f5c\u7528\u57df\uff0c\u8fd9\u6837\u6240\u6709\u8fd9\u4e9b\u6539\u53d8\u90fd\u662f\u5b89\u5168\u7684\u5e76\u7b26\u5408\u501f\u7528\u89c4\u5219\u3002 } println! ( \"{:?}\" , map ); // \u4f1a\u6253\u5370\u51fa {\"world\": 2, \"hello\": 1, \"wonderful\": 1}\u3002 \u54c8\u5e0c\u51fd\u6570 HashMap \u9ed8\u8ba4\u4f7f\u7528\u4e00\u79cd\u53eb\u505a SipHash \u7684\u54c8\u5e0c\u51fd\u6570\uff0c\u5b83\u53ef\u4ee5\u62b5\u5fa1\u6d89\u53ca \u54c8\u5e0c\u8868 \uff08hash table\uff091 \u7684\u62d2\u7edd\u670d\u52a1\uff08Denial of Service, DoS\uff09\u653b\u51fb\u3002 \u7136\u800c\u8fd9\u5e76\u4e0d\u662f\u53ef\u7528\u7684\u6700\u5feb\u7684\u7b97\u6cd5\uff0c\u4e0d\u8fc7\u4e3a\u4e86\u66f4\u9ad8\u7684\u5b89\u5168\u6027\u503c\u5f97\u4ed8\u51fa\u4e00\u4e9b\u6027\u80fd\u7684\u4ee3\u4ef7\u3002 \u5982\u679c\u6027\u80fd\u76d1\u6d4b\u663e\u793a\u6b64\u54c8\u5e0c\u51fd\u6570\u975e\u5e38\u6162\uff0c\u4ee5\u81f4\u4e8e\u4f60\u65e0\u6cd5\u63a5\u53d7\uff0c\u53ef\u4ee5\u6307\u5b9a\u4e00\u4e2a\u4e0d\u540c\u7684 hasher \u6765\u5207\u6362\u4e3a\u5176\u5b83\u51fd\u6570\u3002 hasher \u662f\u4e00\u4e2a\u5b9e\u73b0\u4e86 BuildHasher trait \u7684\u7c7b\u578b\u3002 \u7b2c\u5341\u7ae0\u4f1a\u8ba8\u8bba trait \u548c\u5982\u4f55\u5b9e\u73b0\u5b83\u4eec\u3002\u5e76\u4e0d\u9700\u8981\u4ece\u5934\u5f00\u59cb\u5b9e\u73b0\u4f60\u81ea\u5df1\u7684 hasher \uff1b crates.io \u6709\u5176\u4ed6\u4eba\u5206\u4eab\u7684\u5b9e\u73b0\u4e86\u8bb8\u591a\u5e38\u7528\u54c8\u5e0c\u7b97\u6cd5\u7684 hasher \u7684\u5e93\u3002 \u53c2\u8003: https://en.wikipedia.org/wiki/SipHash \u603b\u7ed3 vector \u3001 \u5b57\u7b26\u4e32 \u548c \u54c8\u5e0c map \u4f1a\u5728\u4f60\u7684\u7a0b\u5e8f\u9700\u8981 \u50a8\u5b58 \u3001 \u8bbf\u95ee \u548c \u4fee\u6539\u6570\u636e \u65f6\u5e2e\u52a9\u4f60\u3002\u8fd9\u91cc\u6709\u4e00\u4e9b\u4f60\u5e94\u8be5\u80fd\u591f\u89e3\u51b3\u7684\u7ec3\u4e60\u95ee\u9898\uff1a \u7ed9\u5b9a\u4e00\u7cfb\u5217\u6570\u5b57\uff0c\u4f7f\u7528 vector \u5e76\u8fd4\u56de\u8fd9\u4e2a\u5217\u8868\u7684\u4e2d\u4f4d\u6570\uff08\u6392\u5217\u6570\u7ec4\u540e\u4f4d\u4e8e\u4e2d\u95f4\u7684\u503c\uff09\u548c\u4f17\u6570\uff08mode\uff0c\u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684\u503c\uff1b\u8fd9\u91cc\u54c8\u5e0c map \u4f1a\u5f88\u6709\u5e2e\u52a9\uff09\u3002 \u5c06\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a Pig Latin \uff0c\u4e5f\u5c31\u662f\u6bcf\u4e00\u4e2a\u5355\u8bcd\u7684\u7b2c\u4e00\u4e2a\u8f85\u97f3\u5b57\u6bcd\u88ab\u79fb\u52a8\u5230\u5355\u8bcd\u7684\u7ed3\u5c3e\u5e76\u589e\u52a0 \u201cay\u201d\uff0c\u6240\u4ee5 \u201cfirst\u201d \u4f1a\u53d8\u6210 \u201cirst-fay\u201d\u3002\u5143\u97f3\u5b57\u6bcd\u5f00\u5934\u7684\u5355\u8bcd\u5219\u5728\u7ed3\u5c3e\u589e\u52a0 \u201chay\u201d\uff08\u201capple\u201d \u4f1a\u53d8\u6210 \u201capple-hay\u201d\uff09\u3002\u7262\u8bb0 UTF-8 \u7f16\u7801\uff01 \u4f7f\u7528 \u54c8\u5e0c map \u548c vector \uff0c\u521b\u5efa\u4e00\u4e2a\u6587\u672c\u63a5\u53e3\u6765\u5141\u8bb8\u7528\u6237\u5411\u516c\u53f8\u7684\u90e8\u95e8\u4e2d\u589e\u52a0\u5458\u5de5\u7684\u540d\u5b57\u3002\u4f8b\u5982\uff0c\u201cAdd Sally to Engineering\u201d \u6216 \u201cAdd Amir to Sales\u201d\u3002\u63a5\u7740\u8ba9\u7528\u6237\u83b7\u53d6\u4e00\u4e2a\u90e8\u95e8\u7684\u6240\u6709\u5458\u5de5\u7684\u5217\u8868\uff0c\u6216\u8005\u516c\u53f8\u6bcf\u4e2a\u90e8\u95e8\u7684\u6240\u6709\u5458\u5de5\u6309\u7167\u5b57\u5178\u5e8f\u6392\u5217\u7684\u5217\u8868\u3002 \u6807\u51c6\u5e93 API \u6587\u6863\u4e2d\u63cf\u8ff0\u7684\u8fd9\u4e9b\u7c7b\u578b\u7684\u65b9\u6cd5\u5c06\u6709\u52a9\u4e8e\u4f60\u8fdb\u884c\u8fd9\u4e9b\u7ec3\u4e60\uff01 \u7ec3\u4e60-\u6211\u7684\u7b54\u6848 \u8fd4\u56de\u5217\u8868\u7684\u4e2d\u4f4d\u6570 fn main () { let mut numbers = vec! []; // \u751f\u6210100\u4e2a\u968f\u673a\u6570 for _ in 0 .. 100 { let rand_number = thread_rng (). gen_range ( 0 .. 100 ); // \u968f\u673a\u6570\u4ece0-100\u4e2d\u53d6\u5f97\u3002 numbers . push ( rand_number ); } numbers . sort (); // \u4ece\u5c0f\u5230\u5927\u6392\u5e8f numbers . reverse (); // \u9006\u5e8f println! ( \"\u751f\u6210\u7684\u968f\u673a\u6570\u5217\u662f: {:?}\" , & numbers ); let mid_idx = numbers . len () / 2 ; // \u627e\u5230\u4e2d\u4f4d\u6570\u5750\u6807 println! ( \"\u4e2d\u4f4d\u6570\u662f: {}\" , numbers [ mid_idx ]); // \u6253\u5370\u4e2d\u4f4d\u6570 let max_word = max_count_word ( & numbers ); // \u83b7\u53d6\u51fa\u73b0\u6700\u591a\u6b21\u6570\u7684\u968f\u673a\u6570 // \u4f7f\u7528if let \u5224\u65ad\u5e76\u6253\u5370\u51fa\u73b0\u6700\u591a\u6b21\u6570\u7684\u968f\u673a\u6570 if let Some ( value ) = max_word { println! ( \"\u4f17\u6570\u662f: {}\" , value ); } else { println! ( \"\u672a\u53d1\u73b0\u4f17\u6570!\" ); } } fn max_count_word ( vec : & Vec < i32 > ) -> Option <& i32 > { let mut word_count = HashMap :: new (); // \u7edf\u8ba1\u6bcf\u4e2a\u968f\u673a\u6570\u51fa\u73b0\u7684\u6b21\u6570 for word in vec { let count = word_count . entry ( word ). or_insert ( 0 ); * count += 1 ; } let mut max_count = 0 ; let mut max_count_key = None ; // \u627e\u5230\u51fa\u73b0\u6700\u591a\u6b21\u7684\u968f\u673a\u6570; for ( k , v ) in word_count { if v > max_count { max_count = v ; max_count_key = Some ( k ); } } // \u8fd4\u56de\u51fa\u73b0\u6700\u591a\u6b21\u7684\u968f\u673a\u6570 max_count_key } \u5b57\u7b26\u4e32\u8f6c\u6362 fn main () { let vowel_chars = [ 'a' , 'e' , 'i' , 'o' , 'u' ]; // \u4ece\u63a7\u5236\u53f0\u83b7\u53d6\u5355\u8bcd let word = get_word_from_line (); println! ( \"\u83b7\u53d6\u7684\u5355\u8bcd\u662f: {}\" , & word ); let mut fixed_word = String :: from ( \"\" ); // \u975e\u5143\u97f3\u5f00\u5934\u5355\u8bcd\u7684\u7b2c\u4e00\u4e2a\u5b57\u6bcd let mut not_vowel_char : Option < char > = None ; let mut other_chars = String :: from ( \"\" ); for ( idx , c ) in word . chars (). enumerate () { // \u83b7\u53d6\u7b2c\u4e00\u4e2a\u5b57\u7b26\u5e76\u4e14\u4e0d\u662f\u5143\u97f3\u5b57\u6bcd\u5f00\u5934\u7684\u5355\u8bcd\u7684\u7b2c\u4e00\u4e2a\u5b57\u6bcd if idx == 0 && ! vowel_chars . contains ( & c ) { not_vowel_char = Some ( c ); continue ; } else { other_chars . push ( c ); }; } // \u975e\u5143\u97f3\u5b57\u6bcd\u5f00\u5934\u7684\u60c5\u51b5 if let Some ( not_vowel_c ) = not_vowel_char { fixed_word = format! ( \"{}-{}ay\" , other_chars , not_vowel_c ); // \u4f7f\u7528format!\u5b8f\u683c\u5f0f\u5316\u5b57\u7b26 // \u5143\u97f3\u5b57\u6bcd\u5f00\u5934\u7684\u60c5\u51b5 } else { fixed_word = format! ( \"{}-hay\" , other_chars ); // \u4f7f\u7528format!\u5b8f\u683c\u5f0f\u5316\u5b57\u7b26 } println! ( \"\u4fee\u6539\u540e\u7684\u5b57\u7b26\u4e3a: {}\" , fixed_word ); } fn get_word_from_line () -> String { let mut word = String :: new (); println! ( \"\u8bf7\u8f93\u5165\u4e00\u4e2a\u5355\u8bcd:\" ); loop { match io :: stdin (). read_line ( & mut word ) { Ok ( _ ) => break , Err ( _ ) => continue , } } word = match word . trim (). parse () { Ok ( w ) => w , Err ( _ ) => String :: from ( \"\" ), }; word } \u589e\u52a0\u5458\u5de5\u540d\u5b57 // \u6700\u540e\u4e00\u9898\u4e0d\u7b80\u5355 // \u77e5\u8bc6\u70b9\uff1a // 1. \u4ece\u547d\u4ee4\u884c\u89e3\u6790\u5b57\u7b26\u4e32\u8f93\u5165 // 2. \u5224\u65ad\u5b57\u7b26\u4e32\u76f8\u7b49 // 3. \u751f\u547d\u5468\u671f\u63a7\u5236 fn main () { let mut dep_map = HashMap :: new (); let mut continue_add = true ; // \u5faa\u73af\u6dfb\u52a0\u4eba\u5458\u5230\u90e8\u95e8 while continue_add { println! ( \"\u8bf7\u8f93\u5165\u8981\u6dfb\u52a0\u7684\u4eba\u5458\u548c\u90e8\u95e8(add who to where):\" ); let add_text = get_input_text (); // Add Sally to Engineering let mut name : Option < String > = None ; let mut department : Option < String > = None ; for ( idx , word ) in add_text . split_whitespace (). enumerate () { let text : String = match word . parse () { Ok ( name ) => { println! ( \"\u89e3\u6790\u7684\u5355\u8bcd\u4e3a: {name}\" ); name } Err ( _ ) => { println! ( \"\u89e3\u6790\u8f93\u5165\u5931\u8d25\" ); break ; } }; match idx { 1 => name = Some ( String :: from ( text )), // \u7d22\u5f15\u4e3a1\u4e3a\u540d\u79f0\uff1b 3 => department = Some ( String :: from ( text )), // \u7d22\u5f15\u4e3a3\u4e3a\u90e8\u95e8\uff1b _ => (), } } // \u589e\u52a0\u90e8\u95e8\u5230\u516c\u53f8 if let Some ( name ) = name { if let Some ( department ) = department { let persons = dep_map . entry ( department ). or_insert ( Vec :: from ([])); persons . push ( name ); } } println! ( \"\u662f\u5426\u7ee7\u7eed\u589e\u52a0(y/n):\" ); continue_add = get_answer (); } println! ( \"\u8bf7\u8f93\u5165\u8981\u83b7\u53d6\u7684\u5458\u5de5\u5217\u8868\u7684\u90e8\u95e8(where):\" ); let dep_name = get_input_text (); let mut persons = dep_map . get_mut ( & dep_name ); // \u83b7\u53d6\u53ef\u4ee5\u6539\u53d8\u7684vec\u96c6\u5408 if let Some ( persons ) = persons { println! ( \"{} \u90e8\u95e8\u7684\u5458\u5de5\u6709:\" , & dep_name ); persons . sort (); // \u6839\u636e\u5b57\u6bcd\u8868\u6392\u5e8f for person in persons { println! ( \" \\t {}\" , person ); } } else { println! ( \"{}\u90e8\u95e8\u6ca1\u6709\u5458\u5de5\u5b58\u5728!\" , & dep_name ) } dbg! ( dep_map ); } fn get_answer () -> bool { let mut word = String :: new (); loop { match io :: stdin (). read_line ( & mut word ) { Ok ( _ ) => { let chars_count = word . trim (). chars (). count (); dbg! ( chars_count ); dbg! ( word . trim (). chars ()); if chars_count == 1 && word . trim (). chars (). eq ( \"y\" . chars ()) { return true ; } return false ; } Err ( _ ) => { println! ( \"\u8bf7\u8f93\u5165y\u6216\u8005n!\" ); continue ; } } } } fn get_input_text () -> String { let mut word = String :: new (); loop { match io :: stdin (). read_line ( & mut word ) { Ok ( _ ) => break , Err ( _ ) => continue , } } word = match word . trim (). parse () { Ok ( w ) => w , Err ( _ ) => String :: from ( \"\" ), }; word }","title":"\u5e38\u89c1\u96c6\u5408"},{"location":"common-collections/#_1","text":"Rust \u6807\u51c6\u5e93\u4e2d\u5305\u542b\u4e00\u7cfb\u5217\u88ab\u79f0\u4e3a \u96c6\u5408 \uff08collections\uff09\u7684\u975e\u5e38\u6709\u7528\u7684\u6570\u636e\u7ed3\u6784\u3002 \u5927\u90e8\u5206\u5176\u4ed6\u6570\u636e\u7c7b\u578b\u90fd\u4ee3\u8868\u4e00\u4e2a\u7279\u5b9a\u7684\u503c\uff0c\u4e0d\u8fc7\u96c6\u5408\u53ef\u4ee5\u5305\u542b\u591a\u4e2a\u503c\u3002 \u4e0d\u540c\u4e8e\u5185\u5efa\u7684\u6570\u7ec4\u548c\u5143\u7ec4\u7c7b\u578b\uff0c\u8fd9\u4e9b\u96c6\u5408\u6307\u5411\u7684\u6570\u636e\u662f\u50a8\u5b58\u5728\u5806\u4e0a\u7684\uff0c\u8fd9\u610f\u5473\u7740\u6570\u636e\u7684\u6570\u91cf\u4e0d\u5fc5\u5728\u7f16\u8bd1\u65f6\u5c31\u5df2\u77e5\uff0c\u5e76\u4e14\u8fd8\u53ef\u4ee5\u968f\u7740\u7a0b\u5e8f\u7684\u8fd0\u884c\u589e\u957f\u6216\u7f29\u5c0f\u3002 \u6bcf\u79cd\u96c6\u5408\u90fd\u6709\u7740\u4e0d\u540c\u529f\u80fd\u548c\u6210\u672c\uff0c\u800c\u6839\u636e\u5f53\u524d\u60c5\u51b5\u9009\u62e9\u5408\u9002\u7684\u96c6\u5408\uff0c\u8fd9\u662f\u4e00\u9879\u5e94\u5f53\u9010\u6e10\u638c\u63e1\u7684\u6280\u80fd\u3002 vector \u5141\u8bb8\u6211\u4eec\u4e00\u4e2a\u6328\u7740\u4e00\u4e2a\u5730\u50a8\u5b58\u4e00\u7cfb\u5217\u6570\u91cf\u53ef\u53d8\u7684\u503c \u5b57\u7b26\u4e32 \uff08string\uff09\u662f\u5b57\u7b26\u7684\u96c6\u5408\u3002\u4e4b\u524d\u89c1\u8fc7 String \u7c7b\u578b\u3002 \u54c8\u5e0c map \uff08hash map\uff09\u5141\u8bb8\u6211\u4eec\u5c06\u503c\u4e0e\u4e00\u4e2a\u7279\u5b9a\u7684\u952e\uff08key\uff09\u76f8\u5173\u8054\u3002\u8fd9\u662f\u4e00\u4e2a\u53eb\u505a map \u7684\u66f4\u901a\u7528\u7684\u6570\u636e\u7ed3\u6784\u7684\u7279\u5b9a\u5b9e\u73b0\u3002 \u5bf9\u4e8e\u6807\u51c6\u5e93\u63d0\u4f9b\u7684\u5176\u4ed6\u7c7b\u578b\u7684\u96c6\u5408\uff0c\u8bf7\u67e5\u770b \u6587\u6863 \u3002","title":"\u5e38\u89c1\u96c6\u5408"},{"location":"common-collections/#vector","text":"Vec<T> \uff0c\u4e5f\u88ab\u79f0\u4e3a vector \u3002 vector \u5141\u8bb8\u5728\u4e00\u4e2a\u5355\u72ec\u7684\u6570\u636e\u7ed3\u6784\u4e2d\u50a8\u5b58\u591a\u4e8e\u4e00\u4e2a\u7684\u503c\uff0c\u5b83\u5728\u5185\u5b58\u4e2d\u5f7c\u6b64\u76f8\u90bb\u5730\u6392\u5217\u6240\u6709\u7684\u503c\u3002 vector \u53ea\u80fd\u50a8\u5b58\u76f8\u540c\u7c7b\u578b\u7684\u503c\u3002\u5b83\u4eec\u5728\u62e5\u6709 \u4e00\u7cfb\u5217\u9879 \u7684\u573a\u666f\u4e0b\u975e\u5e38\u5b9e\u7528\uff0c\u4f8b\u5982\u6587\u4ef6\u4e2d\u7684\u6587\u672c\u884c\u6216\u662f\u8d2d\u7269\u8f66\u4e2d\u5546\u54c1\u7684\u4ef7\u683c\u3002","title":"Vector \u5217\u8868"},{"location":"common-collections/#vector_1","text":"// \u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u7a7a vector\uff0c\u53ef\u4ee5\u8c03\u7528 Vec::new \u51fd\u6570 let v : Vec < i32 > = Vec :: new (); // \u544a\u8bc9 Rust v \u8fd9\u4e2a Vec<T> \u5c06\u5b58\u653e i32 \u7c7b\u578b\u7684\u5143\u7d20\u3002 // \u6ce8\u610f\u589e\u52a0\u4e86\u4e00\u4e2a\u7c7b\u578b\u6ce8\u89e3, \u56e0\u4e3a\u6ca1\u6709\u5411\u8fd9\u4e2a vector \u4e2d\u63d2\u5165\u4efb\u4f55\u503c\uff0cRust \u5e76\u4e0d\u77e5\u9053\u6211\u4eec\u60f3\u8981\u50a8\u5b58\u4ec0\u4e48\u7c7b\u578b\u7684\u5143\u7d20\u3002 // vector \u662f\u7528\u6cdb\u578b\u5b9e\u73b0\u7684\uff0c\u7b2c\u5341\u7ae0\u4f1a\u6d89\u53ca\u5230\u5982\u4f55\u5bf9\u4f60\u81ea\u5df1\u7684\u7c7b\u578b\u4f7f\u7528\u5b83\u4eec\u3002 \u73b0\u5728\uff0c\u6240\u9700\u8981\u77e5\u9053\u7684\u5c31\u662f Vec<T> \u662f\u4e00\u4e2a\u7531\u6807\u51c6\u5e93\u63d0\u4f9b\u7684\u7c7b\u578b\uff0c\u5b83\u53ef\u4ee5\u5b58\u653e\u4efb\u4f55\u7c7b\u578b\uff0c\u800c\u5f53 Vec \u5b58\u653e\u67d0\u4e2a\u7279\u5b9a\u7c7b\u578b\u65f6\uff0c\u90a3\u4e2a\u7c7b\u578b\u4f4d\u4e8e\u5c16\u62ec\u53f7\u4e2d\u3002 \u901a\u5e38\uff0c\u4f1a\u7528\u521d\u59cb\u503c\u6765\u521b\u5efa\u4e00\u4e2a Vec<T> \u800c Rust \u4f1a\u63a8\u65ad\u51fa\u50a8\u5b58\u503c\u7684\u7c7b\u578b\uff0c\u6240\u4ee5\u5f88\u5c11\u4f1a\u9700\u8981\u8fd9\u4e9b\u7c7b\u578b\u6ce8\u89e3\u3002 \u4e3a\u4e86\u65b9\u4fbf Rust \u63d0\u4f9b\u4e86 vec! \u5b8f\uff0c\u8fd9\u4e2a\u5b8f\u4f1a\u6839\u636e\u6211\u4eec\u63d0\u4f9b\u7684\u503c\u6765\u521b\u5efa\u4e00\u4e2a\u65b0\u7684 vector \u3002 // \u65b0\u5efa\u4e00\u4e2a\u62e5\u6709\u503c 1\u30012 \u548c 3 \u7684 Vec<i32> let v = vec! [ 1 , 2 , 3 ]; \u56e0\u4e3a\u63d0\u4f9b\u4e86 i32 \u7c7b\u578b\u7684\u521d\u59cb\u503c\uff0cRust \u53ef\u4ee5\u63a8\u65ad\u51fa v \u7684\u7c7b\u578b\u662f Vec<i32> \uff0c\u56e0\u6b64\u7c7b\u578b\u6ce8\u89e3\u5c31\u4e0d\u662f\u5fc5\u987b\u7684\u3002","title":"\u65b0\u5efa vector"},{"location":"common-collections/#vector_2","text":"\u4f7f\u7528 push \u65b9\u6cd5\u53ef\u4ee5\u5411\u5176\u589e\u52a0\u5143\u7d20\uff1a // \u5982\u679c\u60f3\u8981\u80fd\u591f\u6539\u53d8\u5b83\u7684\u503c\uff0c\u5fc5\u987b\u4f7f\u7528 mut \u5173\u952e\u5b57\u4f7f\u5176\u53ef\u53d8 let mut v = Vec :: new (); v . push ( 5 ); // \u589e\u52a0\u5143\u7d20 v . push ( 6 ); // \u589e\u52a0\u5143\u7d20 v . push ( 7 ); v . push ( 8 ); // \u653e\u5165\u5176\u4e2d\u7684\u6240\u6709\u503c\u90fd\u662f i32 \u7c7b\u578b\u7684\uff0c\u800c\u4e14 Rust \u4e5f\u6839\u636e\u6570\u636e\u505a\u51fa\u5982\u6b64\u5224\u65ad\uff0c\u6240\u4ee5\u4e0d\u9700\u8981 Vec<i32> \u6ce8\u89e3\u3002","title":"\u66f4\u65b0 vector"},{"location":"common-collections/#vector_3","text":"\u7c7b\u4f3c\u4e8e\u4efb\u4f55\u5176\u4ed6\u7684 struct \uff0c vector \u5728\u5176\u79bb\u5f00\u4f5c\u7528\u57df\u65f6\u4f1a\u88ab\u91ca\u653e { let v = vec! [ 1 , 2 , 3 , 4 ]; // \u5904\u7406\u53d8\u91cf v } // <- \u8fd9\u91cc v \u79bb\u5f00\u4f5c\u7528\u57df\u5e76\u88ab\u4e22\u5f03 \u5f53 vector \u88ab\u4e22\u5f03\u65f6\uff0c\u6240\u6709\u5176\u5185\u5bb9\u4e5f\u4f1a\u88ab\u4e22\u5f03\uff0c\u8fd9\u610f\u5473\u7740\u8fd9\u91cc\u5b83\u5305\u542b\u7684\u6574\u6570\u5c06\u88ab\u6e05\u7406\u3002 \u8fd9\u53ef\u80fd\u770b\u8d77\u6765\u975e\u5e38\u76f4\u89c2\uff0c\u4e0d\u8fc7\u4e00\u65e6\u5f00\u59cb\u4f7f\u7528 vector \u5143\u7d20\u7684\u5f15\u7528\uff0c\u60c5\u51b5\u5c31\u53d8\u5f97\u6709\u4e9b\u590d\u6742\u4e86\u3002","title":"\u4e22\u5f03 vector"},{"location":"common-collections/#vector_4","text":"\u6709\u4e24\u79cd\u65b9\u6cd5\u5f15\u7528 vector \u4e2d\u50a8\u5b58\u7684\u503c\u3002 \u7d22\u5f15\u8bed\u6cd5 \u6216\u8005 get \u65b9\u6cd5 fn main () { let v = vec! [ 1 , 2 , 3 , 4 , 5 ]; // \u4f7f\u7528\u7d22\u5f15\u503c 2 \u6765\u83b7\u53d6\u7b2c\u4e09\u4e2a\u5143\u7d20\uff0c\u7d22\u5f15\u662f\u4ece 0 \u5f00\u59cb\u7684\u3002 // \u4f7f\u7528 & \u548c [] \u8fd4\u56de\u4e00\u4e2a\u5f15\u7528 let third : & i32 = & v [ 2 ]; println! ( \"\u7b2c\u4e09\u4e2a\u6570\u662f {}\" , third ); // \u4f7f\u7528 get \u65b9\u6cd5\u4ee5\u7d22\u5f15\u4f5c\u4e3a\u53c2\u6570\u6765\u8fd4\u56de\u4e00\u4e2a Option<&T>\u3002 match v . get ( 2 ) { Some ( third ) => println! ( \"\u7b2c\u4e09\u4e2a\u5143\u7d20\u662f {}\" , third ), None => println! ( \"\u8fd9\u513f\u6ca1\u6709\u5143\u7d20\" ), } } Rust \u63d0\u4f9b\u4e86\u4e24\u79cd\u5f15\u7528\u5143\u7d20\u7684\u65b9\u6cd5\u7684\u539f\u56e0\u662f\u5f53 \u5c1d\u8bd5\u4f7f\u7528\u73b0\u6709\u5143\u7d20\u8303\u56f4\u4e4b\u5916\u7684\u7d22\u5f15\u503c\u65f6\u53ef\u4ee5\u9009\u62e9\u8ba9\u7a0b\u5e8f\u5982\u4f55\u8fd0\u884c\u3002 // \u5c1d\u8bd5\u5728\u5f53\u6709\u4e00\u4e2a 5 \u4e2a\u5143\u7d20\u7684 vector \u63a5\u7740\u8bbf\u95ee\u7d22\u5f15 100 \u4f4d\u7f6e\u7684\u5143\u7d20\u4f1a\u53d1\u751f\u4ec0\u4e48 let v = vec! [ 1 , 2 , 3 , 4 , 5 ]; let does_not_exist = & v [ 100 ]; // \u5f53\u5f15\u7528\u4e00\u4e2a\u4e0d\u5b58\u5728\u7684\u5143\u7d20\u65f6 Rust \u4f1a\u9020\u6210 panic let does_not_exist = v . get ( 100 ); // \u5f53 get \u65b9\u6cd5\u88ab\u4f20\u9012\u4e86\u4e00\u4e2a\u6570\u7ec4\u5916\u7684\u7d22\u5f15\u65f6\uff0c\u5b83\u4e0d\u4f1a panic \u800c\u662f\u8fd4\u56de None\u3002 // \u5f53\u5076\u5c14\u51fa\u73b0\u8d85\u8fc7 vector \u8303\u56f4\u7684\u8bbf\u95ee\u5c5e\u4e8e\u6b63\u5e38\u60c5\u51b5\u7684\u65f6\u5019\u53ef\u4ee5\u8003\u8651\u4f7f\u7528\u5b83\u3002 // \u63a5\u7740\u4f60\u7684\u4ee3\u7801\u53ef\u4ee5\u6709\u5904\u7406 Some(&element) \u6216 None \u7684\u903b\u8f91\uff0c \u4e00\u65e6\u7a0b\u5e8f\u83b7\u53d6\u4e86\u4e00\u4e2a\u6709\u6548\u7684\u5f15\u7528\uff0c\u501f\u7528\u68c0\u67e5\u5668\u5c06\u4f1a\u6267\u884c\u6240\u6709\u6743\u548c\u501f\u7528\u89c4\u5219\u6765\u786e\u4fdd vector \u5185\u5bb9\u7684\u8fd9\u4e2a\u5f15\u7528\u548c\u4efb\u4f55\u5176\u4ed6\u5f15\u7528\u4fdd\u6301\u6709\u6548\u3002 \u56de\u5fc6\u4e00\u4e0b\u4e0d\u80fd\u5728\u76f8\u540c\u4f5c\u7528\u57df\u4e2d\u540c\u65f6\u5b58\u5728\u53ef\u53d8\u548c\u4e0d\u53ef\u53d8\u5f15\u7528\u7684\u89c4\u5219\u3002 \u8fd9\u4e2a\u89c4\u5219\u9002\u7528\u4e8e\u4e0b\u9762\u7684\u793a\u4f8b\uff1a // \u5728\u62e5\u6709 vector \u4e2d\u9879\u7684\u5f15\u7528\u7684\u540c\u65f6\u5411\u5176\u589e\u52a0\u4e00\u4e2a\u5143\u7d20 let mut v = vec! [ 1 , 2 , 3 , 4 , 5 ]; let first = & v [ 0 ]; v . push ( 6 ); println! ( \"\u7b2c\u4e00\u4e2a\u5143\u7d20\u662f: {}\" , first ); // \u5f53\u6211\u4eec\u83b7\u53d6\u4e86 vector \u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u4e0d\u53ef\u53d8\u5f15\u7528 // \u5e76\u5c1d\u8bd5\u5728 vector \u672b\u5c3e\u589e\u52a0\u4e00\u4e2a\u5143\u7d20\u7684\u65f6\u5019\uff0c\u5982\u679c\u5c1d\u8bd5\u5728\u51fd\u6570\u7684\u540e\u9762\u5f15\u7528\u8fd9\u4e2a\u5143\u7d20\u662f\u884c\u4e0d\u901a\u7684 \u7f16\u8bd1\u4f1a\u7ed9\u51fa\u8fd9\u4e2a\u9519\u8bef $ cargo run Compiling collections v0 . 1.0 ( file : ///projects/collections) error [ E0502 ] : cannot borrow ` v ` as mutable because it is also borrowed as immutable - -> src / main . rs : 6 : 5 | 4 | let first = & v [ 0 ]; | - immutable borrow occurs here 5 | 6 | v . push ( 6 ); | ^^^^^^^^^ mutable borrow occurs here 7 | 8 | println! ( \"The first element is: {}\" , first ); | ----- immutable borrow later used here For more information about this error , try ` rustc -- explain E0502 ` . error : could not compile ` collections ` due to previous error \u4e3a\u4ec0\u4e48\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u5f15\u7528\u4f1a\u5173\u5fc3 vector \u7ed3\u5c3e\u7684\u53d8\u5316\uff1f \u4e0d\u80fd\u8fd9\u4e48\u505a\u7684\u539f\u56e0\u662f\u7531\u4e8e vector \u7684\u5de5\u4f5c\u65b9\u5f0f\uff1a \u5728 vector \u7684\u7ed3\u5c3e\u589e\u52a0\u65b0\u5143\u7d20\u65f6\uff0c\u5728\u6ca1\u6709\u8db3\u591f\u7a7a\u95f4\u5c06\u6240\u6709\u5143\u7d20\u4f9d\u6b21\u76f8\u90bb\u5b58\u653e\u7684\u60c5\u51b5\u4e0b\uff0c\u53ef\u80fd\u4f1a\u8981\u6c42\u5206\u914d\u65b0\u5185\u5b58\u5e76\u5c06\u8001\u7684\u5143\u7d20\u62f7\u8d1d\u5230\u65b0\u7684\u7a7a\u95f4\u4e2d\u3002 \u8fd9\u65f6\uff0c \u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u5f15\u7528\u5c31\u6307\u5411\u4e86\u88ab\u91ca\u653e\u7684\u5185\u5b58\u3002 \u501f\u7528\u89c4\u5219\u963b\u6b62\u7a0b\u5e8f\u9677\u5165\u8fd9\u79cd\u72b6\u51b5\u3002 \u5173\u4e8e Vec<T> \u7c7b\u578b\u7684\u66f4\u591a\u5b9e\u73b0\u7ec6\u8282\uff0c\u8bf7\u67e5\u770b \u201c The Rust onomicon \u201d","title":"\u8bfb\u53d6 vector"},{"location":"common-collections/#vector_5","text":"\u5982\u679c\u60f3\u8981\u4f9d\u6b21\u8bbf\u95ee vector \u4e2d\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\uff0c\u53ef\u4ee5\u904d\u5386\u5176\u6240\u6709\u7684\u5143\u7d20\u800c\u65e0\u9700\u901a\u8fc7\u7d22\u5f15\u4e00\u6b21\u4e00\u4e2a\u7684\u8bbf\u95ee\u3002 // \u901a\u8fc7 for \u5faa\u73af\u904d\u5386 vector \u7684\u5143\u7d20\u5e76\u6253\u5370 let v = vec! [ 100 , 32 , 57 ]; for i in & v { println! ( \"{}\" , i ); } // \u4e5f\u53ef\u4ee5\u904d\u5386\u53ef\u53d8 vector \u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\u7684\u53ef\u53d8\u5f15\u7528\u4ee5\u4fbf\u80fd\u6539\u53d8\u4ed6\u4eec let mut v = vec! [ 100 , 32 , 57 ]; for i in & mut v { // \u4e3a\u4e86\u4fee\u6539\u53ef\u53d8\u5f15\u7528\u6240\u6307\u5411\u7684\u503c\uff0c\u5728\u4f7f\u7528 += \u8fd0\u7b97\u7b26\u4e4b\u524d\u5fc5\u987b\u4f7f\u7528\u89e3\u5f15\u7528\u8fd0\u7b97\u7b26\uff08*\uff09\u83b7\u53d6 i \u4e2d\u7684\u503c\u3002 * i += 50 ; }","title":"\u904d\u5386 vector"},{"location":"common-collections/#_2","text":"vector \u53ea\u80fd\u50a8\u5b58\u76f8\u540c\u7c7b\u578b\u7684\u503c\u3002\u8fd9\u662f\u5f88\u4e0d\u65b9\u4fbf\u7684\uff1b \u7edd\u5bf9\u4f1a\u6709\u9700\u8981\u50a8\u5b58\u4e00\u7cfb\u5217\u4e0d\u540c\u7c7b\u578b\u7684\u503c\u7684\u7528\u4f8b \u3002 \u5e78\u8fd0\u7684\u662f\uff0c\u679a\u4e3e\u7684\u6210\u5458\u90fd\u88ab\u5b9a\u4e49\u4e3a\u76f8\u540c\u7684\u679a\u4e3e\u7c7b\u578b\uff0c\u6240\u4ee5\u5f53\u9700\u8981\u5728 vector \u4e2d\u50a8\u5b58\u4e0d\u540c\u7c7b\u578b\u503c\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u5b9a\u4e49\u5e76\u4f7f\u7528\u4e00\u4e2a\u679a\u4e3e\uff01 \u4f8b\u5982\uff0c\u5047\u5982\u6211\u4eec\u60f3\u8981\u4ece\u7535\u5b50\u8868\u683c\u7684\u4e00\u884c\u4e2d\u83b7\u53d6\u503c\uff0c\u800c\u8fd9\u4e00\u884c\u7684\u6709\u4e9b\u5217\u5305\u542b\u6570\u5b57\uff0c\u6709\u4e9b\u5305\u542b\u6d6e\u70b9\u503c\uff0c\u8fd8\u6709\u4e9b\u662f\u5b57\u7b26\u4e32\u3002 \u6211\u4eec\u53ef\u4ee5\u5b9a\u4e49\u4e00\u4e2a\u679a\u4e3e\uff0c\u5176\u6210\u5458\u4f1a\u5b58\u653e\u8fd9\u4e9b\u4e0d\u540c\u7c7b\u578b\u7684\u503c\uff0c\u540c\u65f6\u6240\u6709\u8fd9\u4e9b\u679a\u4e3e\u6210\u5458\u90fd\u4f1a\u88ab\u5f53\u4f5c\u76f8\u540c\u7c7b\u578b\uff0c\u90a3\u4e2a\u679a\u4e3e\u7684\u7c7b\u578b\u3002 \u63a5\u7740\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u50a8\u5b58\u679a\u4e3e\u503c\u7684 vector\uff0c\u8fd9\u6837\u6700\u7ec8\u5c31\u80fd\u591f\u50a8\u5b58\u4e0d\u540c\u7c7b\u578b\u7684\u503c\u4e86\u3002 fn main () { enum SpreadsheetCell { Int ( i32 ), Float ( f64 ), Text ( String ), } let row = vec! [ SpreadsheetCell :: Int ( 3 ), SpreadsheetCell :: Text ( String :: from ( \"blue\" )), SpreadsheetCell :: Float ( 10.12 ), ]; } Rust \u5728\u7f16\u8bd1\u65f6\u5c31\u5fc5\u987b\u51c6\u786e\u7684\u77e5\u9053 vector \u4e2d\u7c7b\u578b\u7684\u539f\u56e0\u5728\u4e8e\u5b83\u9700\u8981\u77e5\u9053\u50a8\u5b58\u6bcf\u4e2a\u5143\u7d20\u5230\u5e95\u9700\u8981\u591a\u5c11\u5185\u5b58\u3002 \u7b2c\u4e8c\u4e2a\u597d\u5904\u662f\u53ef\u4ee5\u51c6\u786e\u7684\u77e5\u9053\u8fd9\u4e2a vector \u4e2d\u5141\u8bb8\u4ec0\u4e48\u7c7b\u578b\u3002 \u5982\u679c Rust \u5141\u8bb8 vector \u5b58\u653e\u4efb\u610f\u7c7b\u578b\uff0c\u90a3\u4e48\u5f53\u5bf9 vector \u5143\u7d20\u6267\u884c\u64cd\u4f5c\u65f6\u4e00\u4e2a\u6216\u591a\u4e2a\u7c7b\u578b\u7684\u503c\u5c31\u6709\u53ef\u80fd\u4f1a\u9020\u6210\u9519\u8bef\u3002 \u4f7f\u7528\u679a\u4e3e\u5916\u52a0 match \u610f\u5473\u7740 Rust \u80fd\u5728\u7f16\u8bd1\u65f6\u5c31\u4fdd\u8bc1\u603b\u662f\u4f1a\u5904\u7406\u6240\u6709\u53ef\u80fd\u7684\u60c5\u51b5. \u5982\u679c\u5728\u7f16\u5199\u7a0b\u5e8f\u65f6\u4e0d\u80fd\u786e\u5207\u65e0\u9057\u5730\u77e5\u9053\u8fd0\u884c\u65f6\u4f1a\u50a8\u5b58\u8fdb vector \u7684\u6240\u6709\u7c7b\u578b\uff0c\u679a\u4e3e\u6280\u672f\u5c31\u884c\u4e0d\u901a\u4e86\u3002\u76f8\u53cd\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 trait \u5bf9\u8c61\uff0c\u7b2c\u5341\u4e03\u7ae0\u4f1a\u8bb2\u5230\u5b83\u3002 \u73b0\u5728\u6211\u4eec\u4e86\u89e3\u4e86\u4e00\u4e9b\u4f7f\u7528 vector \u7684\u6700\u5e38\u89c1\u7684\u65b9\u5f0f\uff0c\u8bf7\u4e00\u5b9a\u53bb\u770b\u770b\u6807\u51c6\u5e93\u4e2d Vec \u5b9a\u4e49\u7684\u5f88\u591a\u5176\u4ed6\u5b9e\u7528\u65b9\u6cd5\u7684 API \u6587\u6863 \u3002 \u4f8b\u5982\uff0c\u9664\u4e86 push \u4e4b\u5916\u8fd8\u6709\u4e00\u4e2a pop \u65b9\u6cd5\uff0c\u5b83\u4f1a\u79fb\u9664\u5e76\u8fd4\u56de vector \u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u3002","title":"\u679a\u4e3e\u6765\u50a8\u5b58\u591a\u79cd\u7c7b\u578b"},{"location":"common-collections/#utf-8","text":"\u5b57\u7b26\u4e32 \u662f\u65b0\u664b Rustacean \u4eec\u901a\u5e38\u4f1a\u88ab\u56f0\u4f4f\u7684\u9886\u57df\uff0c\u8fd9\u662f\u7531\u4e8e\u4e09\u65b9\u9762\u7406\u7531\u7684\u7ed3\u5408\uff1a Rust \u503e\u5411\u4e8e\u786e\u4fdd\u66b4\u9732\u51fa\u53ef\u80fd\u7684\u9519\u8bef\uff0c\u5b57\u7b26\u4e32\u662f\u6bd4\u5f88\u591a\u7a0b\u5e8f\u5458\u6240\u60f3\u8c61\u7684\u8981\u66f4\u4e3a\u590d\u6742\u7684\u6570\u636e\u7ed3\u6784\uff0c\u4ee5\u53ca UTF-8 \u3002\u6240\u6709\u8fd9\u4e9b\u8981\u7d20\u7ed3\u5408\u8d77\u6765\u5bf9\u4e8e\u6765\u81ea\u5176\u4ed6\u8bed\u8a00\u80cc\u666f\u7684\u7a0b\u5e8f\u5458\u5c31\u53ef\u80fd\u663e\u5f97\u5f88\u56f0\u96be\u4e86\u3002 \u5728\u96c6\u5408\u7ae0\u8282\u4e2d\u8ba8\u8bba\u5b57\u7b26\u4e32\u7684\u539f\u56e0\u662f\uff0c\u5b57\u7b26\u4e32\u5c31\u662f\u4f5c\u4e3a\u5b57\u8282\u7684\u96c6\u5408\u5916\u52a0\u4e00\u4e9b\u65b9\u6cd5\u5b9e\u73b0\u7684\uff0c\u5f53\u8fd9\u4e9b\u5b57\u8282\u88ab\u89e3\u91ca\u4e3a\u6587\u672c\u65f6\uff0c\u8fd9\u4e9b\u65b9\u6cd5\u63d0\u4f9b\u4e86\u5b9e\u7528\u7684\u529f\u80fd\u3002","title":"\u5b57\u7b26\u4e32\u548cUTF-8"},{"location":"common-collections/#_3","text":"\u5b57\u7b26\u4e32 \u3002Rust \u7684\u6838\u5fc3\u8bed\u8a00\u4e2d\u53ea\u6709\u4e00\u79cd\u5b57\u7b26\u4e32\u7c7b\u578b\uff1a \u5b57\u7b26\u4e32slice str \uff0c\u5b83\u901a\u5e38\u4ee5\u88ab \u501f\u7528 \u7684\u5f62\u5f0f\u51fa\u73b0\uff0c &str \u3002\u7b2c\u56db\u7ae0\u8bb2\u5230\u4e86 \u5b57\u7b26\u4e32 slices \uff1a \u5b83\u4eec\u662f\u4e00\u4e9b\u5bf9\u50a8\u5b58\u5728\u522b\u5904\u7684 UTF-8 \u7f16\u7801\u5b57\u7b26\u4e32\u6570\u636e\u7684\u5f15\u7528 \u3002 \u4e3e\u4f8b\u6765\u8bf4\uff0c\u7531\u4e8e\u5b57\u7b26\u4e32 \u5b57\u9762\u503c \u88ab\u50a8\u5b58\u5728\u7a0b\u5e8f\u7684\u4e8c\u8fdb\u5236\u8f93\u51fa\u4e2d\uff0c\u56e0\u6b64\u5b57\u7b26\u4e32\u5b57\u9762\u503c\u4e5f\u662f \u5b57\u7b26\u4e32slices \u3002 \u79f0\u4f5c String \u7684\u7c7b\u578b\u662f\u7531\u6807\u51c6\u5e93\u63d0\u4f9b\u7684\uff0c\u800c\u6ca1\u6709\u5199\u8fdb\u6838\u5fc3\u8bed\u8a00\u90e8\u5206\uff0c\u5b83\u662f \u53ef\u589e\u957f\u7684 \u3001 \u53ef\u53d8\u7684 \u3001 \u6709\u6240\u6709\u6743\u7684 \u3001 UTF-8 \u7f16\u7801\u7684\u5b57\u7b26\u4e32\u7c7b\u578b \u3002 \u5f53 Rustacean \u4eec\u8c08\u5230 Rust \u7684 \u201c \u5b57\u7b26\u4e32 \u201d\u65f6\uff0c\u5b83\u4eec\u901a\u5e38\u6307\u7684\u662f String \u6216 \u5b57\u7b26\u4e32slice &str \u7c7b\u578b \uff0c\u800c\u4e0d\u7279\u6307\u5176\u4e2d\u67d0\u4e00\u4e2a\u3002 \u867d\u7136\u672c\u90e8\u5206\u5185\u5bb9\u5927\u591a\u662f\u5173\u4e8e String \u7684\uff0c\u4e0d\u8fc7\u8fd9\u4e24\u4e2a\u7c7b\u578b\u5728 Rust \u6807\u51c6\u5e93\u4e2d\u90fd\u88ab\u5e7f\u6cdb\u4f7f\u7528\uff0c String \u548c \u5b57\u7b26\u4e32 slices \u90fd\u662f UTF-8 \u7f16\u7801\u7684\u3002","title":"\u4ec0\u4e48\u662f\u5b57\u7b26\u4e32\uff1f"},{"location":"common-collections/#_4","text":"// \u4ee5 new \u51fd\u6570\u521b\u5efa\u5b57\u7b26\u4e32\u5f00\u59cb // \u65b0\u5efa\u4e00\u4e2a\u7a7a\u7684 String let mut s = String :: new (); \u901a\u5e38\u5b57\u7b26\u4e32\u4f1a\u6709\u521d\u59cb\u6570\u636e\uff0c\u56e0\u4e3a\u5e0c\u671b\u4e00\u5f00\u59cb\u5c31\u6709\u8fd9\u4e2a\u5b57\u7b26\u4e32\u3002\u4e3a\u6b64\uff0c\u53ef\u4ee5\u4f7f\u7528 to_string \u65b9\u6cd5\uff0c\u5b83\u80fd\u7528\u4e8e\u4efb\u4f55\u5b9e\u73b0\u4e86 Display trait \u7684\u7c7b\u578b\uff0c\u5b57\u7b26\u4e32\u5b57\u9762\u503c\u4e5f\u5b9e\u73b0\u4e86\u5b83\u3002 let data = \"initial contents\" ; let s = data . to_string (); // \u8be5\u65b9\u6cd5\u4e5f\u53ef\u76f4\u63a5\u7528\u4e8e\u5b57\u7b26\u4e32\u5b57\u9762\u503c\uff1a // \u4f1a\u521b\u5efa\u5305\u542b initial contents \u7684\u5b57\u7b26\u4e32\u3002 let s = \"initial contents\" . to_string (); // \u4e5f\u53ef\u4ee5\u4f7f\u7528 String::from \u51fd\u6570\u6765\u4ece\u5b57\u7b26\u4e32\u5b57\u9762\u503c\u521b\u5efa String let s = String :: from ( \"initial contents\" ); \u56e0\u4e3a\u5b57\u7b26\u4e32\u5e94\u7528\u5e7f\u6cdb\uff0c\u8fd9\u91cc\u6709\u5f88\u591a\u4e0d\u540c\u7684\u7528\u4e8e\u5b57\u7b26\u4e32\u7684\u901a\u7528 API \u53ef\u4f9b\u9009\u62e9\u3002\u5176\u4e2d\u4e00\u4e9b\u53ef\u80fd\u770b\u8d77\u6765\u591a\u4f59\uff0c\u4e0d\u8fc7\u90fd\u6709\u5176\u7528\u6b66\u4e4b\u5730\uff01\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c String::from \u548c .to_string \u6700\u7ec8\u505a\u4e86\u5b8c\u5168\u76f8\u540c\u7684\u5de5\u4f5c\uff0c\u6240\u4ee5\u5982\u4f55\u9009\u62e9\u5c31\u662f \u4ee3\u7801\u98ce\u683c\u4e0e\u53ef\u8bfb\u6027 \u7684\u95ee\u9898\u4e86\u3002 // \u5b57\u7b26\u4e32\u662f UTF-8 \u7f16\u7801\u7684\uff0c\u6240\u4ee5\u53ef\u4ee5\u5305\u542b\u4efb\u4f55\u53ef\u4ee5\u6b63\u786e\u7f16\u7801\u7684\u6570\u636e let hello = String :: from ( \"\u0627\u0644\u0633\u0644\u0627\u0645 \u0639\u0644\u064a\u0643\u0645\" ); let hello = String :: from ( \"Dobr\u00fd den\" ); let hello = String :: from ( \"Hello\" ); let hello = String :: from ( \"\u05e9\u05b8\u05c1\u05dc\u05d5\u05b9\u05dd\" ); let hello = String :: from ( \"\u0928\u092e\u0938\u094d\u0924\u0947\" ); let hello = String :: from ( \"\u3053\u3093\u306b\u3061\u306f\" ); let hello = String :: from ( \"\uc548\ub155\ud558\uc138\uc694\" ); let hello = String :: from ( \"\u4f60\u597d\" ); let hello = String :: from ( \"Ol\u00e1\" ); let hello = String :: from ( \"\u0417\u0434\u0440\u0430\u0432\u0441\u0442\u0432\u0443\u0439\u0442\u0435\" ); let hello = String :: from ( \"Hola\" ); // \u6240\u6709\u8fd9\u4e9b\u90fd\u662f\u6709\u6548\u7684 String \u503c","title":"\u65b0\u5efa\u5b57\u7b26\u4e32"},{"location":"common-collections/#_5","text":"String \u7684\u5927\u5c0f\u53ef\u4ee5\u589e\u52a0\uff0c\u5176\u5185\u5bb9\u4e5f\u53ef\u4ee5\u6539\u53d8\uff0c\u5c31\u50cf\u53ef\u4ee5\u653e\u5165\u66f4\u591a\u6570\u636e\u6765\u6539\u53d8 Vec \u7684\u5185\u5bb9\u4e00\u6837\u3002 \u53e6\u5916\uff0c\u53ef\u4ee5\u65b9\u4fbf\u7684\u4f7f\u7528 + \u8fd0\u7b97\u7b26\u6216 format! \u5b8f\u6765\u62fc\u63a5 String \u503c\u3002","title":"\u66f4\u65b0\u5b57\u7b26\u4e32"},{"location":"common-collections/#push_str-push","text":"// \u901a\u8fc7 push_str \u65b9\u6cd5\u6765\u9644\u52a0\u5b57\u7b26\u4e32 slice\uff0c\u4ece\u800c\u4f7f String \u53d8\u957f let mut s = String :: from ( \"foo\" ); s . push_str ( \"bar\" ); // s \u5c06\u4f1a\u5305\u542b foobar\u3002push_str \u65b9\u6cd5\u91c7\u7528\u5b57\u7b26\u4e32 slice\uff0c\u56e0\u4e3a\u6211\u4eec\u5e76\u4e0d\u9700\u8981\u83b7\u53d6\u53c2\u6570\u7684\u6240\u6709\u6743\u3002 // \u5c06\u5b57\u7b26\u4e32 slice \u7684\u5185\u5bb9\u9644\u52a0\u5230 String \u540e\u4f7f\u7528\u5b83 let mut s1 = String :: from ( \"foo\" ); let s2 = \"bar\" ; s1 . push_str ( s2 ); // \u5982\u679c push_str \u65b9\u6cd5\u83b7\u53d6\u4e86 s2 \u7684\u6240\u6709\u6743\uff0c\u5c31\u4e0d\u80fd\u5728\u6700\u540e\u4e00\u884c\u6253\u5370\u51fa\u5176\u503c\u4e86 println! ( \"s2 is {}\" , s2 ); // push \u65b9\u6cd5\u88ab\u5b9a\u4e49\u4e3a\u83b7\u53d6\u4e00\u4e2a\u5355\u72ec\u7684\u5b57\u7b26\u4f5c\u4e3a\u53c2\u6570\uff0c\u5e76\u9644\u52a0\u5230 String \u4e2d // \u4f7f\u7528 push \u5c06\u4e00\u4e2a\u5b57\u7b26\u52a0\u5165 String \u503c\u4e2d let mut s = String :: from ( \"lo\" ); // \u6dfb\u52a0mut\u5173\u952e\u5b57\u4f7f\u5176\u53ef\u53d8\u3002 s . push ( 'l' );","title":"push_str \u548c push"},{"location":"common-collections/#format","text":"\u901a\u5e38\u4f1a\u5e0c\u671b\u5c06\u4e24\u4e2a\u5df2\u77e5\u7684\u5b57\u7b26\u4e32\u5408\u5e76\u5728\u4e00\u8d77\u3002\u4e00\u79cd\u529e\u6cd5\u662f\u50cf\u8fd9\u6837\u4f7f\u7528 + \u8fd0\u7b97\u7b26 // \u4f7f\u7528 + \u8fd0\u7b97\u7b26\u5c06\u4e24\u4e2a String \u503c\u5408\u5e76\u5230\u4e00\u4e2a\u65b0\u7684 String \u503c\u4e2d fn main () { let s1 = String :: from ( \"Hello, \" ); let s2 = String :: from ( \"world!\" ); let s3 = s1 + & s2 ; // \u6ce8\u610f s1 \u88ab\u79fb\u52a8\u4e86\uff0c\u4e0d\u80fd\u7ee7\u7eed\u4f7f\u7528 // \u4f7f\u7528\u4e86 &\uff0c\u610f\u5473\u7740\u6211\u4eec\u4f7f\u7528\u7b2c\u4e8c\u4e2a\u5b57\u7b26\u4e32\u7684 \u5f15\u7528 \u4e0e\u7b2c\u4e00\u4e2a\u5b57\u7b26\u4e32\u76f8\u52a0\u3002 // \u56e0\u4e3a add \u51fd\u6570\u7684 s \u53c2\u6570\uff1a\u53ea\u80fd\u5c06 &str \u548c String \u76f8\u52a0\uff0c\u4e0d\u80fd\u5c06\u4e24\u4e2a String \u503c\u76f8\u52a0\u3002 // println!(\"a is {s1}\"); // \u53d6\u6d88\u6ce8\u91ca\uff0c\u4f1a\u7f16\u8bd1\u4e0d\u901a\u8fc7\uff0cs1\u5df2\u7ecf\u79fb\u52a8\u4e86\uff0c\u4e0d\u53ef\u4f7f\u7528 println! ( \"c is {s3}\" ); // s3 \u5219\u6ca1\u95ee\u9898 } s1 \u5728\u76f8\u52a0\u540e\u4e0d\u518d\u6709\u6548\u7684\u539f\u56e0\uff0c\u548c\u4f7f\u7528 s2 \u7684\u5f15\u7528\u7684\u539f\u56e0\uff0c\u4e0e\u4f7f\u7528 + \u8fd0\u7b97\u7b26\u65f6\u8c03\u7528\u7684\u51fd\u6570\u7b7e\u540d\u6709\u5173\u3002 + \u8fd0\u7b97\u7b26\u4f7f\u7528\u4e86 add \u51fd\u6570\uff0c\u8fd9\u4e2a\u51fd\u6570\u7b7e\u540d\u770b\u8d77\u6765\u50cf\u8fd9\u6837\uff1a fn add ( self , s : & str ) -> String { // \u8fd9\u5e76\u4e0d\u662f\u6807\u51c6\u5e93\u4e2d\u5b9e\u9645\u7684\u7b7e\u540d\uff1b\u6807\u51c6\u5e93\u4e2d\u7684 add \u4f7f\u7528\u6cdb\u578b\u5b9a\u4e49\u3002 \u8fd9\u91cc\u6211\u4eec\u770b\u5230\u7684 add \u7684\u7b7e\u540d\u4f7f\u7528\u5177\u4f53\u7c7b\u578b\u4ee3\u66ff\u4e86\u6cdb\u578b\uff0c\u8fd9\u4e5f\u6b63\u662f\u5f53\u4f7f\u7528 String \u503c\u8c03\u7528\u8fd9\u4e2a\u65b9\u6cd5\u4f1a\u53d1\u751f\u7684\u3002\u7b2c\u5341\u7ae0\u4f1a\u8ba8\u8bba\u6cdb\u578b\u3002 \u6b63\u5982 add \u7684\u7b2c\u4e8c\u4e2a\u53c2\u6570\u6240\u6307\u5b9a\u7684\uff0c &s2 \u7684\u7c7b\u578b\u662f &String \u800c\u4e0d\u662f &str \u3002\u90a3\u4e48\u4e3a\u4ec0\u4e48\u793a\u4f8b\u8fd8\u80fd\u7f16\u8bd1\u5462\uff1f \u4e4b\u6240\u4ee5\u80fd\u591f\u5728 add \u8c03\u7528\u4e2d\u4f7f\u7528 &s2 \u662f\u56e0\u4e3a &String \u53ef\u4ee5\u88ab \u5f3a\u8f6c \uff08coerced\uff09\u6210 &str \u3002\u5f53 add \u51fd\u6570\u88ab\u8c03\u7528\u65f6\uff0cRust \u4f7f\u7528\u4e86\u4e00\u4e2a\u88ab\u79f0\u4e3a Deref \u5f3a\u5236\u8f6c\u6362 \uff08deref coercion\uff09\u7684\u6280\u672f\uff0c \u53ef\u4ee5\u5c06\u5176\u7406\u89e3\u4e3a\u5b83\u628a &s2 \u53d8\u6210\u4e86 &s2[..] \u3002 \u7b2c\u5341\u4e94\u7ae0 \u4f1a\u66f4\u6df1\u5165\u7684\u8ba8\u8bba Deref \u5f3a\u5236\u8f6c\u6362\u3002 \u56e0\u4e3a add \u6ca1\u6709\u83b7\u53d6\u53c2\u6570\u7684\u6240\u6709\u6743\uff0c\u6240\u4ee5 s2 \u5728\u8fd9\u4e2a\u64cd\u4f5c\u540e\u4ecd\u7136\u662f\u6709\u6548\u7684 String \u3002 \u5176\u6b21\uff0c\u53ef\u4ee5\u53d1\u73b0\u7b7e\u540d\u4e2d add \u83b7\u53d6\u4e86 self \u7684\u6240\u6709\u6743\uff0c\u56e0\u4e3a self \u6ca1\u6709 \u4f7f\u7528 & \u3002\u8fd9\u610f\u5473\u7740\u793a\u4f8b\u4e2d\u7684 s1 \u7684\u6240\u6709\u6743\u5c06\u88ab\u79fb\u52a8\u5230 add \u8c03\u7528\u4e2d\uff0c\u4e4b\u540e\u5c31\u4e0d\u518d\u6709\u6548\u3002 \u6240\u4ee5\u867d\u7136 let s3 = s1 + &s2; \u770b\u8d77\u6765\u5c31\u50cf\u5b83\u4f1a\u590d\u5236\u4e24\u4e2a\u5b57\u7b26\u4e32\u5e76\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u5b57\u7b26\u4e32\uff0c\u800c\u5b9e\u9645\u4e0a\u8fd9\u4e2a\u8bed\u53e5\u4f1a\u83b7\u53d6 s1 \u7684\u6240\u6709\u6743\uff0c\u9644\u52a0\u4e0a\u4ece s2 \u4e2d\u62f7\u8d1d\u7684\u5185\u5bb9\uff0c \u5e76\u8fd4\u56de\u7ed3\u679c\u7684\u6240\u6709\u6743 \u3002 \u6362\u53e5\u8bdd\u8bf4\uff0c\u5b83\u770b\u8d77\u6765\u597d\u50cf\u751f\u6210\u4e86\u5f88\u591a\u62f7\u8d1d\uff0c\u4e0d\u8fc7\u5b9e\u9645\u4e0a\u5e76\u6ca1\u6709\uff1a \u8fd9\u4e2a\u5b9e\u73b0\u6bd4\u62f7\u8d1d\u8981\u66f4\u9ad8\u6548 \u3002 // \u7ea7\u8054\u591a\u4e2a\u5b57\u7b26\u4e32\uff0c+ \u7684\u884c\u4e3a\u5c31\u663e\u5f97\u7b28\u91cd\u4e86 let s1 = String :: from ( \"tic\" ); let s2 = String :: from ( \"tac\" ); let s3 = String :: from ( \"toe\" ); let s = s1 + \"-\" + & s2 + \"-\" + & s3 ; // \u8fd9\u65f6 s \u7684\u5185\u5bb9\u4f1a\u662f \u201ctic-tac-toe\u201d // \u5bf9\u4e8e\u66f4\u4e3a\u590d\u6742\u7684\u5b57\u7b26\u4e32\u94fe\u63a5\uff0c\u53ef\u4ee5\u4f7f\u7528 format! \u5b8f let s = format! ( \"{}-{}-{}\" , s1 , s2 , s3 ); format! \u4e0e println! \u7684\u5de5\u4f5c\u539f\u7406\u76f8\u540c\uff0c\u4e0d\u8fc7\u4e0d\u540c\u4e8e\u5c06\u8f93\u51fa\u6253\u5370\u5230\u5c4f\u5e55\u4e0a\uff0c\u5b83\u8fd4\u56de\u4e00\u4e2a\u5e26\u6709\u7ed3\u679c\u5185\u5bb9\u7684 String \u3002\u8fd9\u4e2a\u7248\u672c\u5c31\u597d\u7406\u89e3\u7684\u591a\uff0c\u5b8f format! \u751f\u6210\u7684\u4ee3\u7801\u4f7f\u7528\u5f15\u7528\u6240\u4ee5\u4e0d\u4f1a\u83b7\u53d6\u4efb\u4f55\u53c2\u6570\u7684\u6240\u6709\u6743\u3002","title":"+ \u8fd0\u7b97\u7b26\u6216 format! \u5b8f"},{"location":"common-collections/#_6","text":"Rust \u7684\u5b57\u7b26\u4e32\u4e0d\u652f\u6301\u7d22\u5f15\u3002 \u5982\u4e0b\u4f7f\u7528\u7d22\u5f15\u8bbf\u95ee\u5b57\u7b26\u4e32\u4f1a\u62a5\u7f16\u8bd1\u9519\u8bef\uff1a let s1 = String :: from ( \"hello\" ); let h = s1 [ 0 ]; // \u5c1d\u8bd5\u5bf9\u5b57\u7b26\u4e32\u4f7f\u7528\u7d22\u5f15\u8bed\u6cd5 \u4f1a\u5bfc\u81f4\u5982\u4e0b\u9519\u8bef\uff1a $ cargo run Compiling collections v0 . 1.0 ( file : ///projects/collections) error [ E0277 ] : the type ` String ` cannot be indexed by ` { integer } ` - -> src / main . rs : 3 : 13 | 3 | let h = s1 [ 0 ]; | ^^^^^ ` String ` cannot be indexed by ` { integer } ` | = help : the trait ` Index < { integer } > ` is not implemented for ` String ` For more information about this error , try ` rustc -- explain E0277 ` . error : could not compile ` collections ` due to previous error \u4e3a\u4ec0\u4e48\u4e0d\u652f\u6301\u5462\uff1f\u90a3\u4e48\u5c31\u8981\u56de\u7b54 Rust\u662f\u5982\u4f55\u5728\u5185\u5b58\u4e2d\u50a8\u5b58\u5b57\u7b26\u4e32\u7684 \u3002\u770b\u4e0b\u9762\ud83d\udc47\ud83c\udffb","title":"\u7d22\u5f15\u5b57\u7b26\u4e32"},{"location":"common-collections/#_7","text":"String \u662f\u4e00\u4e2a Vec<u8> \u7684\u5c01\u88c5\u3002 let hello = String :: from ( \"Hola\" ); // \u5728\u8fd9\u91cc\uff0clen \u7684\u503c\u662f 4 \uff0c // \u8fd9\u610f\u5473\u7740\u50a8\u5b58\u5b57\u7b26\u4e32 \u201cHola\u201d \u7684 Vec \u7684\u957f\u5ea6\u662f\u56db\u4e2a\u5b57\u8282\uff1a // \u8fd9\u91cc\u6bcf\u4e00\u4e2a\u5b57\u6bcd\u7684 UTF-8 \u7f16\u7801\u90fd\u5360\u7528\u4e00\u4e2a\u5b57\u8282\u3002 \u8fd9\u4e2a\u5462? // \u5b57\u7b26\u4e32\u4e2d\u7684\u9996\u5b57\u6bcd\u662f\u897f\u91cc\u5c14\u5b57\u6bcd\u7684 Ze \u800c\u4e0d\u662f\u963f\u62c9\u4f2f\u6570\u5b57 3 let hello = String :: from ( \"\u0417\u0434\u0440\u0430\u0432\u0441\u0442\u0432\u0443\u0439\u0442\u0435\" ); // \u5f53\u95ee\u53ca\u8fd9\u4e2a\u5b57\u7b26\u662f\u591a\u957f\u7684\u65f6\u5019\u6709\u4eba\u53ef\u80fd\u4f1a\u8bf4\u662f 12\u3002 // \u7136\u800c\uff0cRust \u7684\u56de\u7b54\u662f 24\u3002 \u8fd9\u662f\u4f7f\u7528 UTF-8 \u7f16\u7801 \u201c\u0417\u0434\u0440\u0430\u0432\u0441\u0442\u0432\u0443\u0439\u0442\u0435\u201d \u6240\u9700\u8981\u7684\u5b57\u8282\u6570\uff0c\u8fd9\u662f\u56e0\u4e3a\u6bcf\u4e2a Unicode \u6807\u91cf\u503c\u9700\u8981 \u4e24\u4e2a\u5b57\u8282 \u5b58\u50a8\u3002 \u56e0\u6b64\u4e00\u4e2a\u5b57\u7b26\u4e32\u5b57\u8282\u503c\u7684\u7d22\u5f15\u5e76\u4e0d\u603b\u662f\u5bf9\u5e94\u4e00\u4e2a\u6709\u6548\u7684 Unicode \u6807\u91cf\u503c\u3002 \u4f5c\u4e3a\u6f14\u793a\uff0c\u8003\u8651\u5982\u4e0b\u65e0\u6548\u7684 Rust \u4ee3\u7801\uff1a let hello = \"\u0417\u0434\u0440\u0430\u0432\u0441\u0442\u0432\u0443\u0439\u0442\u0435\" ; let answer = & hello [ 0 ]; // \u5df2\u7ecf\u77e5\u9053 answer \u4e0d\u662f\u7b2c\u4e00\u4e2a\u5b57\u7b26 \u0417\u3002 \u5f53\u4f7f\u7528 UTF-8 \u7f16\u7801\u65f6\uff0c \u0417 \u7684\u7b2c\u4e00\u4e2a\u5b57\u8282 208 \uff0c\u7b2c\u4e8c\u4e2a\u662f 151 \uff0c\u6240\u4ee5 answer \u5b9e\u9645\u4e0a\u5e94\u8be5\u662f 208 \uff0c\u4e0d\u8fc7 208 \u81ea\u8eab\u5e76\u4e0d\u662f\u4e00\u4e2a\u6709\u6548\u7684\u5b57\u6bcd\u3002 \u8fd4\u56de 208 \u53ef\u4e0d\u662f\u4e00\u4e2a\u8bf7\u6c42\u5b57\u7b26\u4e32\u7b2c\u4e00\u4e2a\u5b57\u6bcd\u7684\u4eba\u6240\u5e0c\u671b\u770b\u5230\u7684\uff0c\u4e0d\u8fc7\u5b83\u662f Rust \u5728\u5b57\u8282\u7d22\u5f15 0 \u4f4d\u7f6e\u6240\u80fd\u63d0\u4f9b\u7684\u552f\u4e00\u6570\u636e\u3002 \u7528\u6237\u901a\u5e38\u4e0d\u4f1a\u60f3\u8981\u4e00\u4e2a\u5b57\u8282\u503c\u88ab\u8fd4\u56de\uff0c\u5373\u4fbf\u8fd9\u4e2a\u5b57\u7b26\u4e32\u53ea\u6709\u62c9\u4e01\u5b57\u6bcd\uff1a \u5373\u4fbf &\"hello\"[0] \u662f\u8fd4\u56de\u5b57\u8282\u503c\u7684\u6709\u6548\u4ee3\u7801\uff0c\u5b83\u4e5f\u5e94\u5f53\u8fd4\u56de 104 \u800c\u4e0d\u662f h \u3002 \u4e3a\u4e86\u907f\u514d\u8fd4\u56de\u610f\u5916\u7684\u503c\u5e76\u9020\u6210\u4e0d\u80fd\u7acb\u523b\u53d1\u73b0\u7684 bug\uff0cRust \u6839\u672c\u4e0d\u4f1a\u7f16\u8bd1\u8fd9\u4e9b\u4ee3\u7801\uff0c\u5e76\u5728\u5f00\u53d1\u8fc7\u7a0b\u4e2d\u53ca\u65e9\u675c\u7edd\u4e86\u8bef\u4f1a\u7684\u53d1\u751f\u3002","title":"\u5185\u90e8\u8868\u73b0"},{"location":"common-collections/#_8","text":"\u4ece Rust \u7684\u89d2\u5ea6\u6765\u8bb2\uff0c\u4e8b\u5b9e\u4e0a\u6709\u4e09\u79cd\u76f8\u5173\u65b9\u5f0f\u53ef\u4ee5\u7406\u89e3\u5b57\u7b26\u4e32\uff1a \u5b57\u8282 \u3001 \u6807\u91cf\u503c \u548c \u5b57\u5f62\u7c07 \uff08\u6700\u63a5\u8fd1\u4eba\u4eec\u773c\u4e2d \u5b57\u6bcd \u7684\u6982\u5ff5\uff09\u3002 \u6bd4\u5982\u8fd9\u4e2a\u7528\u68b5\u6587\u4e66\u5199\u7684\u5370\u5ea6\u8bed\u5355\u8bcd \u201c\u0928\u092e\u0938\u094d\u0924\u0947\u201d \uff0c\u6700\u7ec8\u5b83\u50a8\u5b58\u5728 vector \u4e2d\u7684 u8 \u503c\u770b\u8d77\u6765\u50cf\u8fd9\u6837\uff1a [ 224 , 164 , 168 , 224 , 164 , 174 , 224 , 164 , 184 , 224 , 165 , 141 , 224 , 164 , 164 , 224 , 165 , 135 ] \u8fd9\u91cc\u6709 18 \u4e2a\u5b57\u8282\uff0c\u4e5f\u5c31\u662f\u8ba1\u7b97\u673a\u6700\u7ec8\u4f1a\u50a8\u5b58\u7684\u6570\u636e\u3002\u5982\u679c\u4ece Unicode \u6807\u91cf\u503c\u7684\u89d2\u5ea6\u7406\u89e3\u5b83\u4eec\uff0c\u4e5f\u5c31\u50cf Rust \u7684 char \u7c7b\u578b\u90a3\u6837\uff0c\u8fd9\u4e9b\u5b57\u8282\u770b\u8d77\u6765\u50cf\u8fd9\u6837\uff1a [ '\u0928' , '\u092e' , '\u0938' , '\u094d' , '\u0924' , '\u0947' ] // \u8fd9\u91cc\u6709\u516d\u4e2a char\uff0c\u4e0d\u8fc7\u7b2c\u56db\u4e2a\u548c\u7b2c\u516d\u4e2a\u90fd\u4e0d\u662f\u5b57\u6bcd\uff0c\u5b83\u4eec\u662f\u53d1\u97f3\u7b26\u53f7\u672c\u8eab\u5e76\u6ca1\u6709\u4efb\u4f55\u610f\u4e49\u3002 // \u6700\u540e\uff0c\u5982\u679c\u4ee5\u5b57\u5f62\u7c07\u7684\u89d2\u5ea6\u7406\u89e3\uff0c\u5c31\u4f1a\u5f97\u5230\u4eba\u4eec\u6240\u8bf4\u7684\u6784\u6210\u8fd9\u4e2a\u5355\u8bcd\u7684\u56db\u4e2a\u5b57\u6bcd\uff1a [ \"\u0928\" , \"\u092e\" , \"\u0938\u094d\" , \"\u0924\u0947\" ] Rust \u63d0\u4f9b\u4e86\u591a\u79cd\u4e0d\u540c\u7684\u65b9\u5f0f\u6765\u89e3\u91ca\u8ba1\u7b97\u673a\u50a8\u5b58\u7684\u539f\u59cb\u5b57\u7b26\u4e32\u6570\u636e\uff0c\u8fd9\u6837\u7a0b\u5e8f\u5c31\u53ef\u4ee5\u9009\u62e9\u5b83\u9700\u8981\u7684\u8868\u73b0\u65b9\u5f0f\uff0c\u800c\u65e0\u6240\u8c13\u662f\u4f55\u79cd\u4eba\u7c7b\u8bed\u8a00\u3002 \u6700\u540e\u4e00\u4e2a Rust \u4e0d\u5141\u8bb8\u4f7f\u7528\u7d22\u5f15\u83b7\u53d6 String \u5b57\u7b26\u7684\u539f\u56e0\u662f\uff0c \u7d22\u5f15\u64cd\u4f5c\u9884\u671f\u603b\u662f\u9700\u8981\u5e38\u6570\u65f6\u95f4 (O(1)) \u3002\u4f46\u662f\u5bf9\u4e8e String \u4e0d\u53ef\u80fd\u4fdd\u8bc1\u8fd9\u6837\u7684\u6027\u80fd\uff0c \u56e0\u4e3a Rust \u5fc5\u987b\u4ece\u5f00\u5934\u5230\u7d22\u5f15\u4f4d\u7f6e\u904d\u5386\u6765\u786e\u5b9a\u6709\u591a\u5c11\u6709\u6548\u7684\u5b57\u7b26\u3002","title":"\u5b57\u8282\u3001\u6807\u91cf\u503c\u548c\u5b57\u5f62\u7c07"},{"location":"common-collections/#slice","text":"\u7d22\u5f15\u5b57\u7b26\u4e32\u901a\u5e38\u662f\u4e00\u4e2a\u574f\u70b9\u5b50\uff0c \u56e0\u4e3a\u5b57\u7b26\u4e32\u7d22\u5f15\u5e94\u8be5\u8fd4\u56de\u7684\u7c7b\u578b\u662f\u4e0d\u660e\u786e\u7684\uff1a\u5b57\u8282\u503c\u3001\u5b57\u7b26\u3001\u5b57\u5f62\u7c07\u6216\u8005\u5b57\u7b26\u4e32 slice\u3002 \u4e3a\u4e86\u66f4\u660e\u786e\u7d22\u5f15\u5e76\u8868\u660e\u4f60\u9700\u8981\u4e00\u4e2a\u5b57\u7b26\u4e32 slice \uff0c\u76f8\u6bd4\u4f7f\u7528 [] \u548c \u5355\u4e2a\u503c \u7684\u7d22\u5f15\uff0c\u53ef\u4ee5\u4f7f\u7528 [] \u548c\u4e00\u4e2a range \u6765\u521b\u5efa\u542b\u7279\u5b9a\u5b57\u8282\u7684\u5b57\u7b26\u4e32 slice \uff1a let hello = \"\u0417\u0434\u0440\u0430\u0432\u0441\u0442\u0432\u0443\u0439\u0442\u0435\" ; let s = & hello [ 0 .. 4 ]; // s \u4f1a\u662f\u4e00\u4e2a &str\uff0c\u5b83\u5305\u542b\u5b57\u7b26\u4e32\u7684\u5934\u56db\u4e2a\u5b57\u8282\u3002 // \u65e9\u4e9b\u65f6\u5019\uff0c\u63d0\u5230\u4e86\u8fd9\u4e9b\u5b57\u6bcd\u90fd\u662f\u4e24\u4e2a\u5b57\u8282\u957f\u7684\uff0c // \u6240\u4ee5\u8fd9\u610f\u5473\u7740 s \u5c06\u4f1a\u662f \u201c\u0417\u0434\u201d\u3002 \u5982\u679c\u83b7\u53d6 &hello[0..1] \u4f1a\u53d1\u751f\u4ec0\u4e48\u5462\uff1f \u7b54\u6848\u662f\uff1aRust \u5728\u8fd0\u884c\u65f6\u4f1a panic \uff0c\u5c31\u8ddf\u8bbf\u95ee vector \u4e2d\u7684\u65e0\u6548\u7d22\u5f15\u65f6\u4e00\u6837\uff1a $ cargo run Compiling collections v0 . 1.0 ( file : ///projects/collections) Finished dev [ unoptimized + debuginfo ] target ( s ) in 0.43 s Running ` target / debug / collections ` thread ' main ' panicked at ' byte index 1 is not a char boundary ; it is inside '\u0417' ( bytes 0 .. 2 ) of `\u0417\u0434\u0440\u0430\u0432\u0441\u0442\u0432\u0443\u0439\u0442\u0435` ' , src / main . rs : 4 : 14 note : run with ` RUST_BACKTRACE = 1 ` environment variable to display a backtrace \u5e94\u8be5\u5c0f\u5fc3\u8c28\u614e\u7684\u4f7f\u7528\u8fd9\u4e2a\u64cd\u4f5c\uff0c\u56e0\u4e3a\u8fd9\u4e48\u505a\u53ef\u80fd\u4f1a\u4f7f\u4f60\u7684\u7a0b\u5e8f\u5d29\u6e83\u3002","title":"\u5b57\u7b26\u4e32 slice"},{"location":"common-collections/#_9","text":"\u64cd\u4f5c\u5b57\u7b26\u4e32\u6bcf\u4e00\u90e8\u5206\u7684\u6700\u597d\u7684\u65b9\u6cd5\u662f\u660e\u786e\u8868\u793a\u9700\u8981 \u5b57\u7b26 \u8fd8\u662f \u5b57\u8282 \u3002\u5bf9\u4e8e\u5355\u72ec\u7684 Unicode \u6807\u91cf\u503c\u4f7f\u7528 chars \u65b9\u6cd5\u3002 \u5bf9 \u201c\u0928\u092e\u0938\u094d\u0924\u0947\u201d \u8c03\u7528 chars \u65b9\u6cd5\u4f1a\u5c06\u5176\u5206\u5f00\u5e76\u8fd4\u56de\u516d\u4e2a char \u7c7b\u578b\u7684\u503c\uff0c\u63a5\u7740\u5c31\u53ef\u4ee5\u904d\u5386\u5176\u7ed3\u679c\u6765\u8bbf\u95ee\u6bcf\u4e00\u4e2a\u5143\u7d20\u4e86\uff1a for c in \"\u0928\u092e\u0938\u094d\u0924\u0947\" . chars () { println! ( \"{}\" , c ); } \u4f1a\u6253\u5370\u51fa\u5982\u4e0b\u5185\u5bb9\uff1a \u0928 \u092e \u0938 \u094d \u0924 \u0947 \u53e6\u5916 bytes \u65b9\u6cd5\u8fd4\u56de\u6bcf\u4e00\u4e2a \u539f\u59cb\u5b57\u8282 \uff0c\u8fd9\u53ef\u80fd\u4f1a\u9002\u5408\u4f60\u7684\u4f7f\u7528\u573a\u666f\uff1a for b in \"\u0928\u092e\u0938\u094d\u0924\u0947\" . bytes () { println! ( \"{}\" , b ); } \u4f1a\u6253\u5370\u51fa\u7ec4\u6210 String \u7684 18 \u4e2a\u5b57\u8282\uff1a 224 164 // --snip-- 165 135 \u8bf7\u8bb0\u4f4f\u6709\u6548\u7684 Unicode \u6807\u91cf\u503c\u53ef\u80fd\u4f1a\u7531\u4e0d\u6b62\u4e00\u4e2a\u5b57\u8282\u7ec4\u6210\u3002 \u4ece\u5b57\u7b26\u4e32\u4e2d\u83b7\u53d6\u5b57\u5f62\u7c07\u662f\u5f88\u590d\u6742\u7684\uff0c\u6240\u4ee5\u6807\u51c6\u5e93\u5e76\u6ca1\u6709\u63d0\u4f9b\u8fd9\u4e2a\u529f\u80fd\u3002 crates.io \u4e0a\u6709\u4e9b\u63d0\u4f9b\u8fd9\u6837\u529f\u80fd\u7684 crate \u3002","title":"\u904d\u5386\u5b57\u7b26\u4e32"},{"location":"common-collections/#_10","text":"\u603b\u800c\u8a00\u4e4b\uff0c\u5b57\u7b26\u4e32\u8fd8\u662f\u5f88\u590d\u6742\u7684\u3002 \u4e0d\u540c\u7684\u8bed\u8a00\u9009\u62e9\u4e86\u4e0d\u540c\u7684\u5411\u7a0b\u5e8f\u5458\u5c55\u793a\u5176\u590d\u6742\u6027\u7684\u65b9\u5f0f \u3002 Rust \u9009\u62e9\u4e86\u4ee5\u51c6\u786e\u7684\u65b9\u5f0f\u5904\u7406 String \u6570\u636e\u4f5c\u4e3a\u6240\u6709 Rust \u7a0b\u5e8f\u7684\u9ed8\u8ba4\u884c\u4e3a\uff0c\u8fd9\u610f\u5473\u7740\u7a0b\u5e8f\u5458\u4eec\u5fc5\u987b\u66f4\u591a\u7684\u601d\u8003\u5982\u4f55\u9884\u5148\u5904\u7406 UTF-8 \u6570\u636e\u3002 \u8fd9\u79cd\u6743\u8861\u53d6\u820d\u76f8\u6bd4\u5176\u4ed6\u8bed\u8a00\u66f4\u591a\u7684\u66b4\u9732\u51fa\u4e86\u5b57\u7b26\u4e32\u7684\u590d\u6742\u6027\uff0c\u4e0d\u8fc7\u4e5f\u4f7f\u4f60\u5728\u5f00\u53d1\u751f\u547d\u5468\u671f\u540e\u671f\u514d\u4e8e\u5904\u7406\u6d89\u53ca\u975e ASCII \u5b57\u7b26\u7684\u9519\u8bef\u3002","title":"\u5b57\u7b26\u4e32\u5e76\u4e0d\u7b80\u5355"},{"location":"common-collections/#hashmap","text":"\u96c6\u5408\u7c7b\u578b \u54c8\u5e0c map \uff08hash map\uff09\u3002 HashMap<K, V> \u7c7b\u578b\u50a8\u5b58\u4e86\u4e00\u4e2a\u952e\u7c7b\u578b K \u5bf9\u5e94\u4e00\u4e2a\u503c\u7c7b\u578b V \u7684\u6620\u5c04\u3002 \u5b83\u901a\u8fc7\u4e00\u4e2a \u54c8\u5e0c\u51fd\u6570 \uff08hashing function\uff09\u6765\u5b9e\u73b0\u6620\u5c04\uff0c\u51b3\u5b9a\u5982\u4f55\u5c06\u952e\u548c\u503c\u653e\u5165\u5185\u5b58\u4e2d\u3002 \u5f88\u591a\u7f16\u7a0b\u8bed\u8a00\u652f\u6301\u8fd9\u79cd\u6570\u636e\u7ed3\u6784\uff0c\u4e0d\u8fc7\u901a\u5e38\u6709\u4e0d\u540c\u7684\u540d\u5b57\uff1a \u54c8\u5e0c \u3001 map \u3001 \u5bf9\u8c61 \u3001 \u54c8\u5e0c\u8868 \u6216\u8005 \u5173\u8054\u6570\u7ec4 \uff0c \u54c8\u5e0c map \u53ef\u4ee5\u7528\u4e8e\u9700\u8981\u4efb\u4f55\u7c7b\u578b\u4f5c\u4e3a\u952e\u6765\u5bfb\u627e\u6570\u636e\u7684\u60c5\u51b5\uff0c\u800c\u4e0d\u662f\u50cf vector \u90a3\u6837\u901a\u8fc7\u7d22\u5f15\u3002","title":"HashMap \u952e\u503c\u5bf9"},{"location":"common-collections/#map","text":"// \u7528 new \u521b\u5efa\u4e00\u4e2a\u7a7a\u7684 HashMap\uff0c\u5e76\u4f7f\u7528 insert \u589e\u52a0\u5143\u7d20\u3002 use std :: collections :: HashMap ; // \u5fc5\u987b\u9996\u5148 use \u6807\u51c6\u5e93\u4e2d\u96c6\u5408\u90e8\u5206\u7684 HashMap // HashMap \u662f\u6700\u4e0d\u5e38\u7528\u7684\uff0c\u6240\u4ee5\u5e76\u6ca1\u6709\u88ab prelude \u81ea\u52a8\u5f15\u7528\u3002 // \u6807\u51c6\u5e93\u4e2d\u5bf9 HashMap \u7684\u652f\u6301\u4e5f\u76f8\u5bf9\u8f83\u5c11\uff0c\u4f8b\u5982\uff0c\u5e76\u6ca1\u6709\u5185\u5efa\u7684\u6784\u5efa\u5b8f\u3002 let mut scores = HashMap :: new (); scores . insert ( String :: from ( \"Blue\" ), 10 ); scores . insert ( String :: from ( \"Yellow\" ), 50 ); \u50cf vector \u4e00\u6837\uff0c\u54c8\u5e0c map \u5c06\u5b83\u4eec\u7684\u6570\u636e\u50a8\u5b58\u5728\u5806\u4e0a\uff0c\u8fd9\u4e2a HashMap \u7684\u952e\u7c7b\u578b\u662f String \u800c\u503c\u7c7b\u578b\u662f i32 \u3002 \u7c7b\u4f3c\u4e8e vector \uff0c \u54c8\u5e0c map \u662f\u540c\u8d28\u7684\uff1a \u6240\u6709\u7684\u952e\u5fc5\u987b\u662f\u76f8\u540c\u7c7b\u578b\uff0c\u503c\u4e5f\u5fc5\u987b\u90fd\u662f\u76f8\u540c\u7c7b\u578b\u3002 \u53e6\u4e00\u4e2a\u6784\u5efa\u54c8\u5e0c map \u7684\u65b9\u6cd5\u662f\u5728\u4e00\u4e2a\u5143\u7ec4\u7684 vector \u4e0a\u4f7f\u7528 \u8fed\u4ee3\u5668 \uff08iterator\uff09\u548c collect \u65b9\u6cd5\uff0c\u5176\u4e2d\u6bcf\u4e2a\u5143\u7ec4\u5305\u542b\u4e00\u4e2a\u952e\u503c\u5bf9\u3002 \u4f1a\u5728\u7b2c\u5341\u4e09\u7ae0\u7684 \u201c \u4f7f\u7528\u8fed\u4ee3\u5668\u5904\u7406\u4e00\u7cfb\u5217\u5143\u7d20 \u201d \u90e8\u5206 \u4ecb\u7ecd\u8fed\u4ee3\u5668\u53ca\u5176\u5173\u8054\u65b9\u6cd5 \u3002 collect \u65b9\u6cd5\u53ef\u4ee5\u5c06\u6570\u636e\u6536\u96c6\u8fdb\u4e00\u7cfb\u5217\u7684\u96c6\u5408\u7c7b\u578b\uff0c\u5305\u62ec HashMap \u3002 use std :: collections :: HashMap ; let teams = vec! [ String :: from ( \"Blue\" ), String :: from ( \"Yellow\" )]; let initial_scores = vec! [ 10 , 50 ]; // \u8fd9\u91cc HashMap<_, _> \u7c7b\u578b\u6ce8\u89e3\u662f\u5fc5\u8981\u7684\uff0c\u56e0\u4e3a\u53ef\u80fd collect \u4e3a\u5f88\u591a\u4e0d\u540c\u7684\u6570\u636e\u7ed3\u6784\uff0c\u800c\u9664\u975e\u663e\u5f0f\u6307\u5b9a\u5426\u5219 Rust \u65e0\u4ece\u5f97\u77e5\u4f60\u9700\u8981\u7684\u7c7b\u578b\u3002 // \u4f46\u662f\u5bf9\u4e8e\u952e\u548c\u503c\u7684\u7c7b\u578b\u53c2\u6570\u6765\u8bf4\uff0c\u53ef\u4ee5\u4f7f\u7528\u4e0b\u5212\u7ebf\u5360\u4f4d\uff0c\u800c Rust \u80fd\u591f\u6839\u636e vector \u4e2d\u6570\u636e\u7684\u7c7b\u578b\u63a8\u65ad\u51fa HashMap \u6240\u5305\u542b\u7684\u7c7b\u578b\u3002 // \u952e\uff08key\uff09\u7c7b\u578b\u662f String\uff0c // \u503c\uff08value\uff09\u7c7b\u578b\u662f i32\uff0c let mut scores : HashMap < _ , _ > = teams . into_iter (). zip ( initial_scores . into_iter ()). collect ();","title":"\u65b0\u5efa\u54c8\u5e0c map"},{"location":"common-collections/#map_1","text":"\u5bf9\u4e8e\u50cf i32 \u8fd9\u6837\u7684\u5b9e\u73b0\u4e86 Copy trait \u7684\u7c7b\u578b\uff0c\u5176\u503c\u53ef\u4ee5\u62f7\u8d1d\u8fdb \u54c8\u5e0c map \u3002\u5bf9\u4e8e\u50cf String \u8fd9\u6837\u62e5\u6709\u6240\u6709\u6743\u7684\u503c\uff0c\u5176\u503c\u5c06\u88ab \u79fb\u52a8 \u800c \u54c8\u5e0c map \u4f1a\u6210\u4e3a\u8fd9\u4e9b\u503c\u7684\u6240\u6709\u8005\uff0c use std :: collections :: HashMap ; let field_name = String :: from ( \"Favorite color\" ); let field_value = String :: from ( \"Blue\" ); let mut map = HashMap :: new (); map . insert ( field_name , field_value ); // \u8fd9\u91cc field_name \u548c field_value \u4e0d\u518d\u6709\u6548\uff0c // \u5c1d\u8bd5\u4f7f\u7528\u5b83\u4eec\u770b\u770b\u4f1a\u51fa\u73b0\u4ec0\u4e48\u7f16\u8bd1\u9519\u8bef\uff01 // \u5f53 insert \u8c03\u7528\u5c06 field_name \u548c field_value \u79fb\u52a8\u5230\u54c8\u5e0c map \u4e2d\u540e\uff0c\u5c06\u4e0d\u80fd\u4f7f\u7528\u8fd9\u4e24\u4e2a\u7ed1\u5b9a\u3002 \u5982\u679c\u5c06\u503c\u7684\u5f15\u7528\u63d2\u5165\u54c8\u5e0c map\uff0c\u8fd9\u4e9b\u503c\u672c\u8eab\u5c06\u4e0d\u4f1a\u88ab\u79fb\u52a8\u8fdb\u54c8\u5e0c map\u3002\u4f46\u662f\u8fd9\u4e9b\u5f15\u7528\u6307\u5411\u7684\u503c\u5fc5\u987b\u81f3\u5c11\u5728\u54c8\u5e0c map \u6709\u6548\u65f6\u4e5f\u662f\u6709\u6548\u7684\u3002 \u7b2c\u5341\u7ae0 \u201c \u751f\u547d\u5468\u671f\u4e0e\u5f15\u7528\u6709\u6548\u6027 \u201d \u90e8\u5206\u5c06\u4f1a\u66f4\u591a\u7684\u8ba8\u8bba\u8fd9\u4e2a\u95ee\u9898\u3002","title":"\u54c8\u5e0c map \u548c\u6240\u6709\u6743"},{"location":"common-collections/#map_2","text":"\u53ef\u4ee5\u901a\u8fc7 get \u65b9\u6cd5\u5e76\u63d0\u4f9b\u5bf9\u5e94\u7684\u952e\u6765\u4ece\u54c8\u5e0c map \u4e2d\u83b7\u53d6\u503c use std :: collections :: HashMap ; let mut scores = HashMap :: new (); scores . insert ( String :: from ( \"Blue\" ), 10 ); scores . insert ( String :: from ( \"Yellow\" ), 50 ); let team_name = String :: from ( \"Blue\" ); let score = scores . get ( & team_name ); // score \u662f\u4e0e\u84dd\u961f\u5206\u6570\u76f8\u5173\u7684\u503c\uff0c\u5e94\u4e3a Some(10)\u3002 // \u56e0\u4e3a get \u8fd4\u56de Option<V>\uff0c\u6240\u4ee5\u7ed3\u679c\u88ab\u88c5\u8fdb Some\uff1b // \u5982\u679c\u67d0\u4e2a\u952e\u5728\u54c8\u5e0c map \u4e2d\u6ca1\u6709\u5bf9\u5e94\u7684\u503c\uff0cget \u4f1a\u8fd4\u56de None\u3002 // \u8fd9\u65f6\u5c31\u8981\u7528\u67d0\u79cd\u7b2c\u516d\u7ae0\u63d0\u5230\u7684\u65b9\u6cd5\u4e4b\u4e00\u6765\u5904\u7406 Option\u3002 // if let \u65b9\u5f0f\ud83d\udc47\ud83c\udffb if let Some ( value ) = score { println! ( \"value is {value}\" ) } else { println! ( \"not value\" ) } // match \u65b9\u5f0f\ud83d\udc47\ud83c\udffb match score { Some ( value ) => { println! ( \"value is {value}\" ) } // None => { // println!(\"not value\") // } _ => println! ( \"not value\" ), } \u53ef\u4ee5\u4f7f\u7528\u4e0e vector \u7c7b\u4f3c\u7684\u65b9\u5f0f\u6765\u904d\u5386\u54c8\u5e0c map \u4e2d\u7684\u6bcf\u4e00\u4e2a\u952e\u503c\u5bf9\uff0c\u4e5f\u5c31\u662f for \u5faa\u73af\uff1a use std :: collections :: HashMap ; let mut scores = HashMap :: new (); scores . insert ( String :: from ( \"Blue\" ), 10 ); scores . insert ( String :: from ( \"Yellow\" ), 50 ); for ( key , value ) in & scores { println! ( \"{}: {}\" , key , value ); } // \u8fd9\u4f1a\u4ee5\u4efb\u610f\u987a\u5e8f\u6253\u5370\u51fa\u6bcf\u4e00\u4e2a\u952e\u503c\u5bf9\uff1a // Blue:10 // Yellow:50","title":"\u8bbf\u95ee\u54c8\u5e0c map"},{"location":"common-collections/#map_3","text":"\u5c3d\u7ba1\u952e\u503c\u5bf9\u7684\u6570\u91cf\u662f\u53ef\u4ee5\u589e\u957f\u7684\uff0c\u4e0d\u8fc7\u4efb\u4f55\u65f6\u5019\uff0c\u6bcf\u4e2a\u952e\u53ea\u80fd\u5173\u8054\u4e00\u4e2a\u503c\u3002 \u5f53\u6211\u4eec\u60f3\u8981\u6539\u53d8\u54c8\u5e0c map \u4e2d\u7684\u6570\u636e\u65f6\uff0c\u5fc5\u987b\u51b3\u5b9a\u5982\u4f55\u5904\u7406\u4e00\u4e2a\u952e\u5df2\u7ecf\u6709\u503c\u4e86\u7684\u60c5\u51b5\u3002 \u53ef\u4ee5\u9009\u62e9\u5b8c\u5168\u65e0\u89c6\u65e7\u503c\u5e76\u7528\u65b0\u503c\u4ee3\u66ff\u65e7\u503c\u3002 \u53ef\u4ee5\u9009\u62e9\u4fdd\u7559\u65e7\u503c\u800c\u5ffd\u7565\u65b0\u503c\uff0c\u5e76\u53ea\u5728\u952e \u6ca1\u6709 \u5bf9\u5e94\u503c\u65f6\u589e\u52a0\u65b0\u503c\u3002 \u6216\u8005\u53ef\u4ee5\u7ed3\u5408\u65b0\u65e7\u4e24\u503c\u3002","title":"\u66f4\u65b0\u54c8\u5e0c map"},{"location":"common-collections/#_11","text":"\u5982\u679c\u63d2\u5165\u4e86\u4e00\u4e2a\u952e\u503c\u5bf9\uff0c\u63a5\u7740\u7528\u76f8\u540c\u7684\u952e\u63d2\u5165\u4e00\u4e2a\u4e0d\u540c\u7684\u503c\uff0c\u4e0e\u8fd9\u4e2a\u952e\u76f8\u5173\u8054\u7684\u65e7\u503c\u5c06\u88ab\u66ff\u6362\u3002 use std :: collections :: HashMap ; let mut scores = HashMap :: new (); scores . insert ( String :: from ( \"Blue\" ), 10 ); scores . insert ( String :: from ( \"Blue\" ), 25 ); println! ( \"{:?}\" , scores ); // \u8fd9\u4f1a\u6253\u5370\u51fa {\"Blue\": 25}\u3002\u539f\u59cb\u7684\u503c 10 \u5219\u88ab\u8986\u76d6\u4e86\u3002","title":"\u8986\u76d6\u4e00\u4e2a\u503c"},{"location":"common-collections/#_12","text":"\u7ecf\u5e38\u4f1a\u68c0\u67e5\u67d0\u4e2a\u7279\u5b9a\u7684\u952e\u662f\u5426\u6709\u503c\uff0c\u5982\u679c\u6ca1\u6709\u5c31\u63d2\u5165\u4e00\u4e2a\u503c\u3002 \u4e3a\u6b64 \u54c8\u5e0c map \u6709\u4e00\u4e2a\u7279\u6709\u7684 API\uff0c\u53eb\u505a entry \uff0c\u5b83\u83b7\u53d6\u6211\u4eec\u60f3\u8981\u68c0\u67e5\u7684\u952e\u4f5c\u4e3a\u53c2\u6570\u3002 entry \u51fd\u6570\u7684\u8fd4\u56de\u503c\u662f\u4e00\u4e2a\u679a\u4e3e\uff0c Entry \uff0c\u5b83\u4ee3\u8868\u4e86\u53ef\u80fd\u5b58\u5728\u4e5f\u53ef\u80fd\u4e0d\u5b58\u5728\u7684\u503c\u3002 use std :: collections :: HashMap ; let mut scores = HashMap :: new (); scores . insert ( String :: from ( \"Blue\" ), 10 ); scores . entry ( String :: from ( \"Yellow\" )). or_insert ( 50 ); scores . entry ( String :: from ( \"Blue\" )). or_insert ( 50 ); println! ( \"{:?}\" , scores ); // \u4f1a\u6253\u5370\u51fa {\"Yellow\": 50, \"Blue\": 10}\u3002 Entry \u7684 or_insert \u65b9\u6cd5\u5728\u952e\u5bf9\u5e94\u7684\u503c\u5b58\u5728\u65f6\u5c31\u8fd4\u56de\u8fd9\u4e2a\u503c\u7684\u53ef\u53d8\u5f15\u7528\uff0c\u5982\u679c\u4e0d\u5b58\u5728\u5219\u5c06\u53c2\u6570\u4f5c\u4e3a\u65b0\u503c\u63d2\u5165\u5e76\u8fd4\u56de\u65b0\u503c\u7684\u53ef\u53d8\u5f15\u7528\u3002 \u8fd9\u6bd4\u7f16\u5199\u81ea\u5df1\u7684\u903b\u8f91\u8981\u7b80\u660e\u7684\u591a\uff0c\u53e6\u5916\u4e5f\u4e0e\u501f\u7528\u68c0\u67e5\u5668\u7ed3\u5408\u5f97\u66f4\u597d\u3002","title":"\u53ea\u5728\u952e\u6ca1\u6709\u5bf9\u5e94\u503c\u65f6\u63d2\u5165"},{"location":"common-collections/#_13","text":"\u53e6\u4e00\u4e2a\u5e38\u89c1\u7684\u54c8\u5e0c map \u7684\u5e94\u7528\u573a\u666f\u662f\u627e\u5230\u4e00\u4e2a\u952e\u5bf9\u5e94\u7684\u503c\u5e76\u6839\u636e\u65e7\u7684\u503c\u66f4\u65b0\u5b83\u3002 \u793a\u4f8b\u4e2d\u7684\u4ee3\u7801\u8ba1\u6570\u4e00\u4e9b\u6587\u672c\u4e2d\u6bcf\u4e00\u4e2a\u5355\u8bcd\u5206\u522b\u51fa\u73b0\u4e86\u591a\u5c11\u6b21\u3002 use std :: collections :: HashMap ; let text = \"hello world wonderful world\" ; let mut map = HashMap :: new (); // split_whitespace \u65b9\u6cd5\u4f1a\u8fed\u4ee3 text \u7684\u503c\u7531\u7a7a\u683c\u5206\u9694\u7684\u5b50 slice. for word in text . split_whitespace () { // or_insert \u65b9\u6cd5\u8fd4\u56de\u8fd9\u4e2a\u952e\u7684\u503c\u7684\u4e00\u4e2a\u53ef\u53d8\u5f15\u7528\uff08&mut V\uff09\u3002 let count = map . entry ( word ). or_insert ( 0 ); // \u8fd9\u91cc\u5c06\u8fd9\u4e2a\u53ef\u53d8\u5f15\u7528\u50a8\u5b58\u5728 count \u53d8\u91cf\u4e2d\uff0c\u6240\u4ee5\u4e3a\u4e86\u8d4b\u503c\u5fc5\u987b\u9996\u5148\u4f7f\u7528\u661f\u53f7\uff08*\uff09\u89e3\u5f15\u7528 count\u3002 * count += 1 ; // \u8fd9\u4e2a\u53ef\u53d8\u5f15\u7528\u5728 for \u5faa\u73af\u7684\u7ed3\u5c3e\u79bb\u5f00\u4f5c\u7528\u57df\uff0c\u8fd9\u6837\u6240\u6709\u8fd9\u4e9b\u6539\u53d8\u90fd\u662f\u5b89\u5168\u7684\u5e76\u7b26\u5408\u501f\u7528\u89c4\u5219\u3002 } println! ( \"{:?}\" , map ); // \u4f1a\u6253\u5370\u51fa {\"world\": 2, \"hello\": 1, \"wonderful\": 1}\u3002","title":"\u6839\u636e\u65e7\u503c\u66f4\u65b0\u4e00\u4e2a\u503c"},{"location":"common-collections/#_14","text":"HashMap \u9ed8\u8ba4\u4f7f\u7528\u4e00\u79cd\u53eb\u505a SipHash \u7684\u54c8\u5e0c\u51fd\u6570\uff0c\u5b83\u53ef\u4ee5\u62b5\u5fa1\u6d89\u53ca \u54c8\u5e0c\u8868 \uff08hash table\uff091 \u7684\u62d2\u7edd\u670d\u52a1\uff08Denial of Service, DoS\uff09\u653b\u51fb\u3002 \u7136\u800c\u8fd9\u5e76\u4e0d\u662f\u53ef\u7528\u7684\u6700\u5feb\u7684\u7b97\u6cd5\uff0c\u4e0d\u8fc7\u4e3a\u4e86\u66f4\u9ad8\u7684\u5b89\u5168\u6027\u503c\u5f97\u4ed8\u51fa\u4e00\u4e9b\u6027\u80fd\u7684\u4ee3\u4ef7\u3002 \u5982\u679c\u6027\u80fd\u76d1\u6d4b\u663e\u793a\u6b64\u54c8\u5e0c\u51fd\u6570\u975e\u5e38\u6162\uff0c\u4ee5\u81f4\u4e8e\u4f60\u65e0\u6cd5\u63a5\u53d7\uff0c\u53ef\u4ee5\u6307\u5b9a\u4e00\u4e2a\u4e0d\u540c\u7684 hasher \u6765\u5207\u6362\u4e3a\u5176\u5b83\u51fd\u6570\u3002 hasher \u662f\u4e00\u4e2a\u5b9e\u73b0\u4e86 BuildHasher trait \u7684\u7c7b\u578b\u3002 \u7b2c\u5341\u7ae0\u4f1a\u8ba8\u8bba trait \u548c\u5982\u4f55\u5b9e\u73b0\u5b83\u4eec\u3002\u5e76\u4e0d\u9700\u8981\u4ece\u5934\u5f00\u59cb\u5b9e\u73b0\u4f60\u81ea\u5df1\u7684 hasher \uff1b crates.io \u6709\u5176\u4ed6\u4eba\u5206\u4eab\u7684\u5b9e\u73b0\u4e86\u8bb8\u591a\u5e38\u7528\u54c8\u5e0c\u7b97\u6cd5\u7684 hasher \u7684\u5e93\u3002 \u53c2\u8003: https://en.wikipedia.org/wiki/SipHash","title":"\u54c8\u5e0c\u51fd\u6570"},{"location":"common-collections/#_15","text":"vector \u3001 \u5b57\u7b26\u4e32 \u548c \u54c8\u5e0c map \u4f1a\u5728\u4f60\u7684\u7a0b\u5e8f\u9700\u8981 \u50a8\u5b58 \u3001 \u8bbf\u95ee \u548c \u4fee\u6539\u6570\u636e \u65f6\u5e2e\u52a9\u4f60\u3002\u8fd9\u91cc\u6709\u4e00\u4e9b\u4f60\u5e94\u8be5\u80fd\u591f\u89e3\u51b3\u7684\u7ec3\u4e60\u95ee\u9898\uff1a \u7ed9\u5b9a\u4e00\u7cfb\u5217\u6570\u5b57\uff0c\u4f7f\u7528 vector \u5e76\u8fd4\u56de\u8fd9\u4e2a\u5217\u8868\u7684\u4e2d\u4f4d\u6570\uff08\u6392\u5217\u6570\u7ec4\u540e\u4f4d\u4e8e\u4e2d\u95f4\u7684\u503c\uff09\u548c\u4f17\u6570\uff08mode\uff0c\u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684\u503c\uff1b\u8fd9\u91cc\u54c8\u5e0c map \u4f1a\u5f88\u6709\u5e2e\u52a9\uff09\u3002 \u5c06\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a Pig Latin \uff0c\u4e5f\u5c31\u662f\u6bcf\u4e00\u4e2a\u5355\u8bcd\u7684\u7b2c\u4e00\u4e2a\u8f85\u97f3\u5b57\u6bcd\u88ab\u79fb\u52a8\u5230\u5355\u8bcd\u7684\u7ed3\u5c3e\u5e76\u589e\u52a0 \u201cay\u201d\uff0c\u6240\u4ee5 \u201cfirst\u201d \u4f1a\u53d8\u6210 \u201cirst-fay\u201d\u3002\u5143\u97f3\u5b57\u6bcd\u5f00\u5934\u7684\u5355\u8bcd\u5219\u5728\u7ed3\u5c3e\u589e\u52a0 \u201chay\u201d\uff08\u201capple\u201d \u4f1a\u53d8\u6210 \u201capple-hay\u201d\uff09\u3002\u7262\u8bb0 UTF-8 \u7f16\u7801\uff01 \u4f7f\u7528 \u54c8\u5e0c map \u548c vector \uff0c\u521b\u5efa\u4e00\u4e2a\u6587\u672c\u63a5\u53e3\u6765\u5141\u8bb8\u7528\u6237\u5411\u516c\u53f8\u7684\u90e8\u95e8\u4e2d\u589e\u52a0\u5458\u5de5\u7684\u540d\u5b57\u3002\u4f8b\u5982\uff0c\u201cAdd Sally to Engineering\u201d \u6216 \u201cAdd Amir to Sales\u201d\u3002\u63a5\u7740\u8ba9\u7528\u6237\u83b7\u53d6\u4e00\u4e2a\u90e8\u95e8\u7684\u6240\u6709\u5458\u5de5\u7684\u5217\u8868\uff0c\u6216\u8005\u516c\u53f8\u6bcf\u4e2a\u90e8\u95e8\u7684\u6240\u6709\u5458\u5de5\u6309\u7167\u5b57\u5178\u5e8f\u6392\u5217\u7684\u5217\u8868\u3002 \u6807\u51c6\u5e93 API \u6587\u6863\u4e2d\u63cf\u8ff0\u7684\u8fd9\u4e9b\u7c7b\u578b\u7684\u65b9\u6cd5\u5c06\u6709\u52a9\u4e8e\u4f60\u8fdb\u884c\u8fd9\u4e9b\u7ec3\u4e60\uff01","title":"\u603b\u7ed3"},{"location":"common-collections/#-","text":"","title":"\u7ec3\u4e60-\u6211\u7684\u7b54\u6848"},{"location":"common-collections/#_16","text":"fn main () { let mut numbers = vec! []; // \u751f\u6210100\u4e2a\u968f\u673a\u6570 for _ in 0 .. 100 { let rand_number = thread_rng (). gen_range ( 0 .. 100 ); // \u968f\u673a\u6570\u4ece0-100\u4e2d\u53d6\u5f97\u3002 numbers . push ( rand_number ); } numbers . sort (); // \u4ece\u5c0f\u5230\u5927\u6392\u5e8f numbers . reverse (); // \u9006\u5e8f println! ( \"\u751f\u6210\u7684\u968f\u673a\u6570\u5217\u662f: {:?}\" , & numbers ); let mid_idx = numbers . len () / 2 ; // \u627e\u5230\u4e2d\u4f4d\u6570\u5750\u6807 println! ( \"\u4e2d\u4f4d\u6570\u662f: {}\" , numbers [ mid_idx ]); // \u6253\u5370\u4e2d\u4f4d\u6570 let max_word = max_count_word ( & numbers ); // \u83b7\u53d6\u51fa\u73b0\u6700\u591a\u6b21\u6570\u7684\u968f\u673a\u6570 // \u4f7f\u7528if let \u5224\u65ad\u5e76\u6253\u5370\u51fa\u73b0\u6700\u591a\u6b21\u6570\u7684\u968f\u673a\u6570 if let Some ( value ) = max_word { println! ( \"\u4f17\u6570\u662f: {}\" , value ); } else { println! ( \"\u672a\u53d1\u73b0\u4f17\u6570!\" ); } } fn max_count_word ( vec : & Vec < i32 > ) -> Option <& i32 > { let mut word_count = HashMap :: new (); // \u7edf\u8ba1\u6bcf\u4e2a\u968f\u673a\u6570\u51fa\u73b0\u7684\u6b21\u6570 for word in vec { let count = word_count . entry ( word ). or_insert ( 0 ); * count += 1 ; } let mut max_count = 0 ; let mut max_count_key = None ; // \u627e\u5230\u51fa\u73b0\u6700\u591a\u6b21\u7684\u968f\u673a\u6570; for ( k , v ) in word_count { if v > max_count { max_count = v ; max_count_key = Some ( k ); } } // \u8fd4\u56de\u51fa\u73b0\u6700\u591a\u6b21\u7684\u968f\u673a\u6570 max_count_key }","title":"\u8fd4\u56de\u5217\u8868\u7684\u4e2d\u4f4d\u6570"},{"location":"common-collections/#_17","text":"fn main () { let vowel_chars = [ 'a' , 'e' , 'i' , 'o' , 'u' ]; // \u4ece\u63a7\u5236\u53f0\u83b7\u53d6\u5355\u8bcd let word = get_word_from_line (); println! ( \"\u83b7\u53d6\u7684\u5355\u8bcd\u662f: {}\" , & word ); let mut fixed_word = String :: from ( \"\" ); // \u975e\u5143\u97f3\u5f00\u5934\u5355\u8bcd\u7684\u7b2c\u4e00\u4e2a\u5b57\u6bcd let mut not_vowel_char : Option < char > = None ; let mut other_chars = String :: from ( \"\" ); for ( idx , c ) in word . chars (). enumerate () { // \u83b7\u53d6\u7b2c\u4e00\u4e2a\u5b57\u7b26\u5e76\u4e14\u4e0d\u662f\u5143\u97f3\u5b57\u6bcd\u5f00\u5934\u7684\u5355\u8bcd\u7684\u7b2c\u4e00\u4e2a\u5b57\u6bcd if idx == 0 && ! vowel_chars . contains ( & c ) { not_vowel_char = Some ( c ); continue ; } else { other_chars . push ( c ); }; } // \u975e\u5143\u97f3\u5b57\u6bcd\u5f00\u5934\u7684\u60c5\u51b5 if let Some ( not_vowel_c ) = not_vowel_char { fixed_word = format! ( \"{}-{}ay\" , other_chars , not_vowel_c ); // \u4f7f\u7528format!\u5b8f\u683c\u5f0f\u5316\u5b57\u7b26 // \u5143\u97f3\u5b57\u6bcd\u5f00\u5934\u7684\u60c5\u51b5 } else { fixed_word = format! ( \"{}-hay\" , other_chars ); // \u4f7f\u7528format!\u5b8f\u683c\u5f0f\u5316\u5b57\u7b26 } println! ( \"\u4fee\u6539\u540e\u7684\u5b57\u7b26\u4e3a: {}\" , fixed_word ); } fn get_word_from_line () -> String { let mut word = String :: new (); println! ( \"\u8bf7\u8f93\u5165\u4e00\u4e2a\u5355\u8bcd:\" ); loop { match io :: stdin (). read_line ( & mut word ) { Ok ( _ ) => break , Err ( _ ) => continue , } } word = match word . trim (). parse () { Ok ( w ) => w , Err ( _ ) => String :: from ( \"\" ), }; word }","title":"\u5b57\u7b26\u4e32\u8f6c\u6362"},{"location":"common-collections/#_18","text":"// \u6700\u540e\u4e00\u9898\u4e0d\u7b80\u5355 // \u77e5\u8bc6\u70b9\uff1a // 1. \u4ece\u547d\u4ee4\u884c\u89e3\u6790\u5b57\u7b26\u4e32\u8f93\u5165 // 2. \u5224\u65ad\u5b57\u7b26\u4e32\u76f8\u7b49 // 3. \u751f\u547d\u5468\u671f\u63a7\u5236 fn main () { let mut dep_map = HashMap :: new (); let mut continue_add = true ; // \u5faa\u73af\u6dfb\u52a0\u4eba\u5458\u5230\u90e8\u95e8 while continue_add { println! ( \"\u8bf7\u8f93\u5165\u8981\u6dfb\u52a0\u7684\u4eba\u5458\u548c\u90e8\u95e8(add who to where):\" ); let add_text = get_input_text (); // Add Sally to Engineering let mut name : Option < String > = None ; let mut department : Option < String > = None ; for ( idx , word ) in add_text . split_whitespace (). enumerate () { let text : String = match word . parse () { Ok ( name ) => { println! ( \"\u89e3\u6790\u7684\u5355\u8bcd\u4e3a: {name}\" ); name } Err ( _ ) => { println! ( \"\u89e3\u6790\u8f93\u5165\u5931\u8d25\" ); break ; } }; match idx { 1 => name = Some ( String :: from ( text )), // \u7d22\u5f15\u4e3a1\u4e3a\u540d\u79f0\uff1b 3 => department = Some ( String :: from ( text )), // \u7d22\u5f15\u4e3a3\u4e3a\u90e8\u95e8\uff1b _ => (), } } // \u589e\u52a0\u90e8\u95e8\u5230\u516c\u53f8 if let Some ( name ) = name { if let Some ( department ) = department { let persons = dep_map . entry ( department ). or_insert ( Vec :: from ([])); persons . push ( name ); } } println! ( \"\u662f\u5426\u7ee7\u7eed\u589e\u52a0(y/n):\" ); continue_add = get_answer (); } println! ( \"\u8bf7\u8f93\u5165\u8981\u83b7\u53d6\u7684\u5458\u5de5\u5217\u8868\u7684\u90e8\u95e8(where):\" ); let dep_name = get_input_text (); let mut persons = dep_map . get_mut ( & dep_name ); // \u83b7\u53d6\u53ef\u4ee5\u6539\u53d8\u7684vec\u96c6\u5408 if let Some ( persons ) = persons { println! ( \"{} \u90e8\u95e8\u7684\u5458\u5de5\u6709:\" , & dep_name ); persons . sort (); // \u6839\u636e\u5b57\u6bcd\u8868\u6392\u5e8f for person in persons { println! ( \" \\t {}\" , person ); } } else { println! ( \"{}\u90e8\u95e8\u6ca1\u6709\u5458\u5de5\u5b58\u5728!\" , & dep_name ) } dbg! ( dep_map ); } fn get_answer () -> bool { let mut word = String :: new (); loop { match io :: stdin (). read_line ( & mut word ) { Ok ( _ ) => { let chars_count = word . trim (). chars (). count (); dbg! ( chars_count ); dbg! ( word . trim (). chars ()); if chars_count == 1 && word . trim (). chars (). eq ( \"y\" . chars ()) { return true ; } return false ; } Err ( _ ) => { println! ( \"\u8bf7\u8f93\u5165y\u6216\u8005n!\" ); continue ; } } } } fn get_input_text () -> String { let mut word = String :: new (); loop { match io :: stdin (). read_line ( & mut word ) { Ok ( _ ) => break , Err ( _ ) => continue , } } word = match word . trim (). parse () { Ok ( w ) => w , Err ( _ ) => String :: from ( \"\" ), }; word }","title":"\u589e\u52a0\u5458\u5de5\u540d\u5b57"},{"location":"common-programing-concepts/","text":"\u5e38\u89c1\u7f16\u7a0b\u6982\u5ff5 \u53d8\u91cf\u548c\u53ef\u53d8\u6027 \u53d8\u91cf\u9ed8\u8ba4\u662f\u4e0d\u53ef\u6539\u53d8\u7684\uff08immutable\uff09\u3002 \u5f53\u53d8\u91cf\u4e0d\u53ef\u53d8\u65f6\uff0c\u4e00\u65e6\u503c\u88ab\u7ed1\u5b9a\u4e00\u4e2a\u540d\u79f0\u4e0a\uff0c\u4f60\u5c31\u4e0d\u80fd\u6539\u53d8\u8fd9\u4e2a\u503c\u3002 \u6587\u4ef6\u540d: src/main.rs fn main () { let x = 5 ; println! ( \"The value of x is: {x}\" ); x = 6 ; // \u9519\u8bef, \u4e0d\u80fd\u5bf9\u4e0d\u53ef\u53d8\u53d8\u91cf x \u4e8c\u6b21\u8d4b\u503c\uff08cannot assign twice to immutable variable `x` \uff09 println! ( \"The value of x is: {x}\" ); } \u4e0d\u8fc7\u53ef\u53d8\u6027\u4e5f\u662f\u975e\u5e38\u6709\u7528\u7684\uff0c\u53ef\u4ee5\u7528\u6765\u66f4\u65b9\u4fbf\u5730\u7f16\u5199\u4ee3\u7801\u3002\u5c3d\u7ba1\u53d8\u91cf\u9ed8\u8ba4\u662f\u4e0d\u53ef\u53d8\u7684\uff0c\u4f60\u4ecd\u7136\u53ef\u4ee5\u5728\u53d8\u91cf\u540d\u524d\u6dfb\u52a0 mut \u6765\u4f7f\u5176\u53ef\u53d8: fn main () { let mut x = 5 ; // \u6dfb\u52a0mut\uff0c\u4f7f\u5176\u53ef\u53d8\u3002\uff08\u8fdb\u884c\u591a\u6b21\u8d4b\u503c\uff09 println! ( \"The value of x is: {x}\" ); x = 6 ; println! ( \"The value of x is: {x}\" ); } \u5e38\u91cf \u7c7b\u4f3c\u4e8e\u4e0d\u53ef\u53d8\u53d8\u91cf\uff0c\u5e38\u91cf(constants) \u662f\u7ed1\u5b9a\u5230\u4e00\u4e2a\u540d\u79f0\u7684\u4e0d\u5141\u8bb8\u6539\u53d8\u7684\u503c\uff0c\u4e0d\u8fc7\u5e38\u91cf\u4e0e\u53d8\u91cf\u8fd8\u662f\u6709\u4e00\u4e9b\u533a\u522b\u3002 \u4e0d\u5141\u8bb8\u5bf9\u5e38\u91cf\u4f7f\u7528 mut\u3002\u5e38\u91cf\u4e0d\u5149\u9ed8\u8ba4\u4e0d\u80fd\u53d8\uff0c\u5b83\u603b\u662f\u4e0d\u80fd\u53d8\u3002 \u5e38\u91cf\u4f7f\u7528 const \u5173\u952e\u5b57\u800c\u4e0d\u662f let \uff0c\u5e76\u4e14 \u5fc5\u987b \u6ce8\u660e\u503c\u7684\u7c7b\u578b\u3002 \u5e38\u91cf\u53ef\u4ee5\u5728\u4efb\u4f55\u4f5c\u7528\u57df\u4e2d\u58f0\u660e\uff0c\u5305\u62ec\u5168\u5c40\u4f5c\u7528\u57df\uff0c\u8fd9\u5728\u4e00\u4e2a\u503c\u9700\u8981\u88ab\u5f88\u591a\u90e8\u5206\u7684\u4ee3\u7801\u7528\u5230\u65f6\u5f88\u6709\u7528\u3002 \u5e38\u91cf\u53ea\u80fd\u88ab\u8bbe\u7f6e\u4e3a\u5e38\u91cf\u8868\u8fbe\u5f0f\uff0c\u800c\u4e0d\u53ef\u4ee5\u662f\u5176\u4ed6\u4efb\u4f55\u53ea\u80fd\u5728\u8fd0\u884c\u65f6\u8ba1\u7b97\u51fa\u7684\u503c\u3002 \u4f8b\u5982\uff1a const THREE_HOURS_IN_SECONDS : u32 = 60 * 60 * 3 ; Rust \u5bf9\u5e38\u91cf\u7684\u547d\u540d\u7ea6\u5b9a\u662f\u5728\u5355\u8bcd\u4e4b\u95f4\u4f7f\u7528\u5168\u5927\u5199\u52a0\u4e0b\u5212\u7ebf \u6709\u5173\u58f0\u660e\u5e38\u91cf\u65f6\u53ef\u4ee5\u4f7f\u7528\u54ea\u4e9b\u64cd\u4f5c\u7684\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605 Rust Reference \u7684\u5e38\u91cf\u6c42\u503c\u90e8\u5206 \u3002 \u9690\u85cf \u53ef\u4ee5\u5b9a\u4e49\u4e00\u4e2a\u4e0e\u4e4b\u524d\u53d8\u91cf\u540c\u540d\u7684\u65b0\u53d8\u91cf\u3002\u79f0\u4e4b\u4e3a\u7b2c\u4e00\u4e2a\u53d8\u91cf\u88ab\u7b2c\u4e8c\u4e2a \u9690\u85cf \uff08Shadowing\uff09\u4e86, \u8fd9\u610f\u5473\u7740\u5728\u4f7f\u7528\u53d8\u91cf\u7684\u540d\u79f0\u65f6\uff0c\u7f16\u8bd1\u5668\u5c06\u770b\u5230\u7b2c\u4e8c\u4e2a\u53d8\u91cf\u3002 \u5b9e\u9645\u4e0a\uff0c\u7b2c\u4e8c\u4e2a\u53d8\u91cf\u201c\u906e\u853d\u201d\u4e86\u7b2c\u4e00\u4e2a\u53d8\u91cf\uff0c\u6b64\u65f6\u4efb\u4f55\u4f7f\u7528\u8be5\u53d8\u91cf\u540d\u7684\u884c\u4e3a\u4e2d\u90fd\u4f1a\u89c6\u4e3a\u662f\u5728\u4f7f\u7528\u7b2c\u4e8c\u4e2a\u53d8\u91cf\uff0c\u76f4\u5230\u7b2c\u4e8c\u4e2a\u53d8\u91cf\u81ea\u5df1\u4e5f\u88ab\u9690\u85cf\u6216\u7b2c\u4e8c\u4e2a\u53d8\u91cf\u7684\u4f5c\u7528\u57df\u7ed3\u675f\u3002 \u53ef\u4ee5\u7528\u76f8\u540c\u53d8\u91cf\u540d\u79f0\u6765\u9690\u85cf\u4e00\u4e2a\u53d8\u91cf\uff0c\u4ee5\u53ca\u91cd\u590d\u4f7f\u7528 let \u5173\u952e\u5b57\u6765\u591a\u6b21\u9690\u85cf\uff0c\u5982\u4e0b\u6240\u793a\uff1a fn main () { let x = 5 ; // \u9996\u5148\u5c06 x \u7ed1\u5b9a\u5230\u503c 5 \u4e0a let x = x + 1 ; // \u63a5\u7740\u901a\u8fc7 let x = \u521b\u5efa\u4e86\u4e00\u4e2a\u65b0\u53d8\u91cf x\uff0c\u83b7\u53d6\u521d\u59cb\u503c\u5e76\u52a0 1\uff0c\u8fd9\u6837 x \u7684\u503c\u5c31\u53d8\u6210 6 \u4e86 { // \u7136\u540e\uff0c\u5728\u4f7f\u7528\u82b1\u62ec\u53f7\u521b\u5efa\u7684\u5185\u90e8\u4f5c\u7528\u57df\u5185 let x = x * 2 ; // \u7b2c\u4e09\u4e2a let \u8bed\u53e5\u4e5f\u9690\u85cf\u4e86 x \u5e76\u521b\u5efa\u4e86\u4e00\u4e2a\u65b0\u7684\u53d8\u91cf\uff0c\u5c06\u4e4b\u524d\u7684\u503c\u4e58\u4ee5 2\uff0cx \u5f97\u5230\u7684\u503c\u662f 12 println! ( \"The value of x in the inner scope is: {x}\" ); } // \u5f53\u8be5\u4f5c\u7528\u57df\u7ed3\u675f\u65f6\uff0c\u5185\u90e8 shadowing \u7684\u4f5c\u7528\u57df\u4e5f\u7ed3\u675f\u4e86\uff0cx \u53c8\u8fd4\u56de\u5230 6 println! ( \"The value of x is: {x}\" ); } \u9690\u85cf\u4e0e\u5c06\u53d8\u91cf\u6807\u8bb0\u4e3a mut \u662f\u6709\u533a\u522b\u7684\u3002\u5f53\u4e0d\u5c0f\u5fc3\u5c1d\u8bd5\u5bf9\u53d8\u91cf\u91cd\u65b0\u8d4b\u503c\u65f6\uff0c\u5982\u679c\u6ca1\u6709\u4f7f\u7528 let \u5173\u952e\u5b57\uff0c\u5c31\u4f1a\u5bfc\u81f4\u7f16\u8bd1\u65f6\u9519\u8bef\u3002 \u901a\u8fc7\u4f7f\u7528 let\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u8fd9\u4e2a\u503c\u8fdb\u884c\u4e00\u4e9b\u8ba1\u7b97\uff0c\u4e0d\u8fc7\u8ba1\u7b97\u5b8c\u4e4b\u540e\u53d8\u91cf\u4ecd\u7136\u662f\u4e0d\u53ef\u53d8\u7684\u3002 mut \u4e0e\u9690\u85cf\u7684\u53e6\u4e00\u4e2a\u533a\u522b\u662f\uff0c\u5f53\u518d\u6b21\u4f7f\u7528 let \u65f6\uff0c\u5b9e\u9645\u4e0a\u521b\u5efa\u4e86\u4e00\u4e2a\u65b0\u53d8\u91cf\uff0c\u6211\u4eec\u53ef\u4ee5\u6539\u53d8\u503c\u7684\u7c7b\u578b\uff0c\u5e76\u4e14\u590d\u7528\u8fd9\u4e2a\u540d\u5b57\u3002 \u4f8b\u5982\uff0c\u5047\u8bbe\u7a0b\u5e8f\u8bf7\u6c42\u7528\u6237\u8f93\u5165\u7a7a\u683c\u5b57\u7b26\u6765\u8bf4\u660e\u5e0c\u671b\u5728\u6587\u672c\u4e4b\u95f4\u663e\u793a\u591a\u5c11\u4e2a\u7a7a\u683c\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u60f3\u5c06\u8f93\u5165\u5b58\u50a8\u6210\u6570\u5b57\uff08\u591a\u5c11\u4e2a\u7a7a\u683c\uff09\uff1a let spaces = \" \" ; // \u7b2c\u4e00\u4e2a spaces \u53d8\u91cf\u662f\u5b57\u7b26\u4e32\u7c7b\u578b let spaces = spaces . len (); // \u7b2c\u4e8c\u4e2a spaces \u53d8\u91cf\u662f\u6570\u5b57\u7c7b\u578b \u9690\u85cf\u4f7f\u6211\u4eec\u4e0d\u5fc5\u4f7f\u7528\u4e0d\u540c\u7684\u540d\u5b57\uff0c\u5982 spaces_str \u548c spaces_num\uff1b \u76f8\u53cd\uff0c\u6211\u4eec\u53ef\u4ee5\u590d\u7528 spaces \u8fd9\u4e2a\u66f4\u7b80\u5355\u7684\u540d\u5b57\u3002\u7136\u800c\uff0c\u5982\u679c\u5c1d\u8bd5\u4f7f\u7528 mut \uff0c\u5c06\u4f1a\u5f97\u5230\u4e00\u4e2a\u7f16\u8bd1\u65f6\u9519\u8bef\uff0c\u5982\u4e0b\u6240\u793a\uff1a let mut spaces = \" \" ; // string\u7c7b\u578b spaces = spaces . len (); // int \u7c7b\u578b \u9519\u8bef\u63d0\u793a: $ cargo run Compiling variables v0 . 1.0 ( file : ///projects/variables) error [ E0308 ] : mismatched types - -> src / main . rs : 3 : 14 | 2 | let mut spaces = \" \" ; | ----- expected due to this value 3 | spaces = spaces . len (); | ^^^^^^^^^^^^ expected ` & str ` , found ` usize ` For more information about this error , try ` rustc -- explain E0308 ` . error : could not compile ` variables ` due to previous error \u4e0d\u80fd\u6539\u53d8\u53d8\u91cf\u7684\u7c7b\u578b \u6570\u636e\u7c7b\u578b \u5728 Rust \u4e2d\uff0c\u6bcf\u4e00\u4e2a\u503c\u90fd\u5c5e\u4e8e\u67d0\u4e00\u4e2a \u6570\u636e\u7c7b\u578b\uff08data type\uff09\uff0c\u8fd9\u544a\u8bc9 Rust \u5b83\u88ab\u6307\u5b9a\u4e3a\u4f55\u79cd\u6570\u636e\uff0c\u4ee5\u4fbf\u660e\u786e\u6570\u636e\u5904\u7406\u65b9\u5f0f\u3002 \u6211\u4eec\u5c06\u770b\u5230\u4e24\u7c7b\u6570\u636e\u7c7b\u578b\u5b50\u96c6\uff1a \u6807\u91cf \uff08scalar\uff09\u548c \u590d\u5408 \uff08compound\uff09\u3002 Rust \u662f \u9759\u6001\u7c7b\u578b\uff08statically typed\uff09\u8bed\u8a00\uff0c\u4e5f\u5c31\u662f\u8bf4\u5728\u7f16\u8bd1\u65f6\u5c31\u5fc5\u987b\u77e5\u9053\u6240\u6709\u53d8\u91cf\u7684\u7c7b\u578b\u3002 \u4f7f\u7528 parse \u5c06 String \u8f6c\u6362\u4e3a\u6570\u5b57\u65f6\uff0c\u5fc5\u987b\u589e\u52a0\u7c7b\u578b\u6ce8\u89e3\uff0c\u50cf\u8fd9\u6837\uff1a let guess : u32 = \"42\" . parse (). expect ( \"Not a number!\" ); \u5982\u679c\u4e0d\u50cf\u4e0a\u9762\u8fd9\u6837\u6dfb\u52a0\u7c7b\u578b\u6ce8\u89e3 : u32\uff0cRust \u4f1a\u663e\u793a\u5982\u4e0b\u9519\u8bef\uff0c\u8fd9\u8bf4\u660e\u7f16\u8bd1\u5668\u9700\u8981\u6211\u4eec\u63d0\u4f9b\u66f4\u591a\u4fe1\u606f\uff0c\u6765\u4e86\u89e3\u6211\u4eec\u60f3\u8981\u7684\u7c7b\u578b\uff1a $ cargo build Compiling no_type_annotations v0.1.0 ( file:///projects/no_type_annotations ) error [ E0282 ] : type annotations needed --> src/main.rs:2:9 | 2 | let guess = \"42\" .parse () .expect ( \"Not a number!\" ) ; | ^^^^^ consider giving ` guess ` a type For more information about this error, try ` rustc --explain E0282 ` . error: could not compile ` no_type_annotations ` due to previous error \u6807\u91cf\u7c7b\u578b \u6807\u91cf \uff08scalar\uff09\u7c7b\u578b\u4ee3\u8868\u4e00\u4e2a\u5355\u72ec\u7684\u503c\u3002Rust \u6709\u56db\u79cd\u57fa\u672c\u7684\u6807\u91cf\u7c7b\u578b\uff1a \u6574\u578b \u3001 \u6d6e\u70b9\u578b \u3001 \u5e03\u5c14\u7c7b\u578b \u548c \u5b57\u7b26\u7c7b\u578b \u3002 \u6574\u578b \u6574\u6570 \u662f\u4e00\u4e2a\u6ca1\u6709\u5c0f\u6570\u90e8\u5206\u7684\u6570\u5b57\u3002 \u957f\u5ea6 \u6709\u7b26\u53f7 \u65e0\u7b26\u53f7 8-bit i8 u8 16-bit i16 u16 32-bit i32 u32 64-bit i64 u64 128-bit i128 u128 arch isize usize isize \u548c usize \u7c7b\u578b\u4f9d\u8d56\u8fd0\u884c\u7a0b\u5e8f\u7684\u8ba1\u7b97\u673a\u67b6\u6784\uff1a64 \u4f4d\u67b6\u6784\u4e0a\u5b83\u4eec\u662f 64 \u4f4d\u7684\uff0c 32 \u4f4d\u67b6\u6784\u4e0a\u5b83\u4eec\u662f 32 \u4f4d\u7684\u3002 \u53ef\u4ee5\u4f7f\u7528\u4e0b\u9762\u8868\u683c\u4e2d\u7684\u4efb\u4f55\u4e00\u79cd\u5f62\u5f0f\u7f16\u5199\u6570\u5b57\u5b57\u9762\u503c\u3002 \u8bf7\u6ce8\u610f\u53ef\u4ee5\u662f\u591a\u79cd\u6570\u5b57\u7c7b\u578b\u7684\u6570\u5b57\u5b57\u9762\u503c\u5141\u8bb8\u4f7f\u7528\u7c7b\u578b\u540e\u7f00\uff0c\u4f8b\u5982 57u8 \u6765\u6307\u5b9a\u7c7b\u578b\uff0c\u540c\u65f6\u4e5f\u5141\u8bb8\u4f7f\u7528 _ \u505a\u4e3a\u5206\u9694\u7b26\u4ee5\u65b9\u4fbf\u8bfb\u6570\uff0c\u4f8b\u5982 1_000 \uff0c\u5b83\u7684\u503c\u4e0e\u4f60\u6307\u5b9a\u7684 1000 \u76f8\u540c\u3002 \u6570\u5b57\u5b57\u9762\u503c \u4f8b\u5b50 Decimal (\u5341\u8fdb\u5236) 98_222 Hex (\u5341\u516d\u8fdb\u5236) 0xff Octal (\u516b\u8fdb\u5236) 0o77 Binary (\u4e8c\u8fdb\u5236) 0b1111_0000 Byte (\u5355\u5b57\u8282\u5b57\u7b26)(\u4ec5\u9650\u4e8eu8) b'A' Rust \u7684\u9ed8\u8ba4\u7c7b\u578b\u901a\u5e38\u662f\u4e2a\u4e0d\u9519\u7684\u8d77\u70b9\uff0c\u6570\u5b57\u7c7b\u578b\u9ed8\u8ba4\u662f i32 \u3002 isize \u6216 usize \u4e3b\u8981\u4f5c\u4e3a\u67d0\u4e9b\u96c6\u5408\u7684\u7d22\u5f15\u3002 \u5176\u4ed6 \u53c2\u8003: \u6574\u5f62\u6ea2\u51fa \u6d6e\u70b9\u578b Rust \u4e5f\u6709\u4e24\u4e2a\u539f\u751f\u7684 \u6d6e\u70b9\u6570\uff08floating-point numbers\uff09\u7c7b\u578b\uff0c\u5b83\u4eec\u662f\u5e26\u5c0f\u6570\u70b9\u7684\u6570\u5b57\u3002Rust \u7684\u6d6e\u70b9\u6570\u7c7b\u578b\u662f f32 \u548c f64\uff0c\u5206\u522b\u5360 32 \u4f4d\u548c 64 \u4f4d\u3002\u9ed8\u8ba4\u7c7b\u578b\u662f f64\uff0c\u56e0\u4e3a\u5728\u73b0\u4ee3 CPU \u4e2d\uff0c\u5b83\u4e0e f32 \u901f\u5ea6\u51e0\u4e4e\u4e00\u6837\uff0c\u4e0d\u8fc7\u7cbe\u5ea6\u66f4\u9ad8\u3002\u6240\u6709\u7684\u6d6e\u70b9\u578b\u90fd\u662f\u6709\u7b26\u53f7\u7684\u3002 \u8fd9\u662f\u4e00\u4e2a\u5c55\u793a\u6d6e\u70b9\u6570\u7684\u5b9e\u4f8b\uff1a \u6587\u4ef6\u540d: src/main.rs fn main () { let x = 2.0 ; // f64 let y : f32 = 3.0 ; // f32 } \u6d6e\u70b9\u6570\u91c7\u7528 IEEE-754 \u6807\u51c6\u8868\u793a\u3002f32 \u662f\u5355\u7cbe\u5ea6\u6d6e\u70b9\u6570\uff0cf64 \u662f\u53cc\u7cbe\u5ea6\u6d6e\u70b9\u6570\u3002 \u6570\u503c\u8fd0\u7b97 Rust \u4e2d\u7684\u6240\u6709\u6570\u5b57\u7c7b\u578b\u90fd\u652f\u6301\u57fa\u672c\u6570\u5b66\u8fd0\u7b97\uff1a\u52a0\u6cd5\u3001\u51cf\u6cd5\u3001\u4e58\u6cd5\u3001\u9664\u6cd5\u548c\u53d6\u4f59\u3002\u6574\u6570\u9664\u6cd5\u4f1a\u5411\u4e0b\u820d\u5165\u5230\u6700\u63a5\u8fd1\u7684\u6574\u6570\u3002\u4e0b\u9762\u7684\u4ee3\u7801\u5c55\u793a\u4e86\u5982\u4f55\u5728 let \u8bed\u53e5\u4e2d\u4f7f\u7528\u5b83\u4eec\uff1a \u6587\u4ef6\u540d: src/main.rs fn main () { // \u52a0\u6cd5 let sum = 5 + 10 ; // \u51cf\u6cd5 let difference = 95.5 - 4.3 ; // \u4e58\u6cd5 let product = 4 * 30 ; // \u9664\u6cd5 let quotient = 56.7 / 32.2 ; let floored = 2 / 3 ; // \u7ed3\u679c\u4e3a0 // \u53d6\u4f59 let remainder = 43 % 5 ; } \u8fd9\u4e9b\u8bed\u53e5\u4e2d\u7684\u6bcf\u4e2a\u8868\u8fbe\u5f0f\u4f7f\u7528\u4e86\u4e00\u4e2a\u6570\u5b66\u8fd0\u7b97\u7b26\u5e76\u8ba1\u7b97\u51fa\u4e86\u4e00\u4e2a\u503c\uff0c\u7136\u540e\u7ed1\u5b9a\u7ed9\u4e00\u4e2a\u53d8\u91cf\u3002 \u9644\u5f55 B \u5305\u542b Rust \u63d0\u4f9b\u7684\u6240\u6709\u8fd0\u7b97\u7b26\u7684\u5217\u8868\u3002 \u5e03\u5c14\u578b \u6b63\u5982\u5176\u4ed6\u5927\u90e8\u5206\u7f16\u7a0b\u8bed\u8a00\u4e00\u6837\uff0cRust \u4e2d\u7684\u5e03\u5c14\u7c7b\u578b\u6709\u4e24\u4e2a\u53ef\u80fd\u7684\u503c\uff1atrue \u548c false\u3002Rust \u4e2d\u7684\u5e03\u5c14\u7c7b\u578b\u4f7f\u7528 bool \u8868\u793a\u3002\u4f8b\u5982\uff1a fn main () { let t = true ; let f : bool = false ; // with explicit type annotation } \u5b57\u7b26\u7c7b\u578b Rust\u7684 char \u7c7b\u578b\u662f\u8bed\u8a00\u4e2d\u6700\u539f\u751f\u7684\u5b57\u6bcd\u7c7b\u578b\u3002\u4e0b\u9762\u662f\u4e00\u4e9b\u58f0\u660e char \u503c\u7684\u4f8b\u5b50\uff1a \u6587\u4ef6\u540d: src/main.rs fn main () { let c = 'z' ; let z : char = '\u2124' ; // with explicit type annotation let heart_eyed_cat = '\ud83d\ude3b' ; } \u6ce8\u610f\uff0c\u8fd9\u91cc\u7528\u5355\u5f15\u53f7\u58f0\u660e char \u5b57\u9762\u91cf\uff0c\u800c\u4e0e\u4e4b\u76f8\u53cd\u7684\u662f\uff0c\u4f7f\u7528 \u53cc\u5f15\u53f7 \u58f0\u660e\u5b57\u7b26\u4e32\u5b57\u9762\u91cf\u3002Rust \u7684 char \u7c7b\u578b\u7684\u5927\u5c0f\u4e3a\u56db\u4e2a\u5b57\u8282(four bytes)\uff0c\u5e76\u4ee3\u8868\u4e86\u4e00\u4e2a Unicode \u6807\u91cf\u503c\uff08Unicode Scalar Value\uff09\uff0c\u8fd9\u610f\u5473\u7740\u5b83\u53ef\u4ee5\u6bd4 ASCII \u8868\u793a\u66f4\u591a\u5185\u5bb9\u3002 \u5728 Rust \u4e2d\uff0c\u5e26\u53d8\u97f3\u7b26\u53f7\u7684\u5b57\u6bcd\uff08Accented letters\uff09\uff0c\u4e2d\u6587\u3001\u65e5\u6587\u3001\u97e9\u6587\u7b49\u5b57\u7b26\uff0cemoji\uff08\u7ed8\u6587\u5b57\uff09\u4ee5\u53ca\u96f6\u957f\u5ea6\u7684\u7a7a\u767d\u5b57\u7b26\u90fd\u662f\u6709\u6548\u7684 char \u503c\u3002 Unicode \u6807\u91cf\u503c\u5305\u542b\u4ece U+0000 \u5230 U+D7FF \u548c U+E000 \u5230 U+10FFFF \u5728\u5185\u7684\u503c \u3002 \u4e0d\u8fc7\uff0c\u201c\u5b57\u7b26\u201d \u5e76\u4e0d\u662f\u4e00\u4e2a Unicode \u4e2d\u7684\u6982\u5ff5\uff0c\u6240\u4ee5\u4eba\u76f4\u89c9\u4e0a\u7684 \u201c\u5b57\u7b26\u201d \u53ef\u80fd\u4e0e Rust \u4e2d\u7684 char \u5e76\u4e0d\u7b26\u5408\u3002 \u7b2c\u516b\u7ae0\u7684 \u201c \u4f7f\u7528\u5b57\u7b26\u4e32\u5b58\u50a8 UTF-8 \u7f16\u7801\u7684\u6587\u672c \u201d \u4e2d\u5c06\u8be6\u7ec6\u8ba8\u8bba\u8fd9\u4e2a\u4e3b\u9898\u3002 \u590d\u5408\u7c7b\u578b \u590d\u5408\u7c7b\u578b \uff08Compound types\uff09\u53ef\u4ee5\u5c06\u591a\u4e2a\u503c\u7ec4\u5408\u6210\u4e00\u4e2a\u7c7b\u578b\u3002Rust \u6709\u4e24\u4e2a\u539f\u751f\u7684\u590d\u5408\u7c7b\u578b\uff1a \u5143\u7ec4 \uff08tuple\uff09\u548c \u6570\u7ec4 \uff08array\uff09\u3002 \u5143\u7ec4\u7c7b\u578b \u5143\u7ec4\u662f\u4e00\u4e2a\u5c06\u591a\u4e2a\u5176\u4ed6\u7c7b\u578b\u7684\u503c\u7ec4\u5408\u8fdb\u4e00\u4e2a\u590d\u5408\u7c7b\u578b\u7684\u4e3b\u8981\u65b9\u5f0f\u3002 \u5143\u7ec4\u957f\u5ea6\u56fa\u5b9a\uff1a\u4e00\u65e6\u58f0\u660e\uff0c\u5176\u957f\u5ea6\u4e0d\u4f1a\u589e\u5927\u6216\u7f29\u5c0f\u3002 \u4f7f\u7528\u5305\u542b\u5728\u5706\u62ec\u53f7\u4e2d\u7684\u9017\u53f7\u5206\u9694\u7684\u503c\u5217\u8868\u6765\u521b\u5efa\u4e00\u4e2a\u5143\u7ec4\u3002 \u5143\u7ec4\u4e2d\u7684\u6bcf\u4e00\u4e2a\u4f4d\u7f6e\u90fd\u6709\u4e00\u4e2a\u7c7b\u578b\uff0c\u800c\u4e14\u8fd9\u4e9b\u4e0d\u540c\u503c\u7684\u7c7b\u578b\u4e5f\u4e0d\u5fc5\u662f\u76f8\u540c\u7684\u3002\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\u4f7f\u7528\u4e86\u53ef\u9009\u7684\u7c7b\u578b\u6ce8\u89e3\uff1a fn main () { let tup : ( i32 , f64 , u8 ) = ( 500 , 6.4 , 1 ); } tup \u53d8\u91cf\u7ed1\u5b9a\u5230\u6574\u4e2a\u5143\u7ec4\u4e0a\uff0c\u56e0\u4e3a\u5143\u7ec4\u662f\u4e00\u4e2a\u5355\u72ec\u7684\u590d\u5408\u5143\u7d20\u3002 \u4e3a\u4e86\u4ece\u5143\u7ec4\u4e2d\u83b7\u53d6\u5355\u4e2a\u503c\uff0c\u53ef\u4ee5\u4f7f\u7528 \u6a21\u5f0f\u5339\u914d \uff08pattern matching\uff09\u6765 \u89e3\u6784 \uff08destructure\uff09\u5143\u7ec4\u503c\uff0c\u50cf\u8fd9\u6837\uff1a fn main () { let tup = ( 500 , 6.4 , 1 ); // \u7a0b\u5e8f\u9996\u5148\u521b\u5efa\u4e86\u4e00\u4e2a\u5143\u7ec4\u5e76\u7ed1\u5b9a\u5230 tup \u53d8\u91cf\u4e0a let ( x , y , z ) = tup ; // \u63a5\u7740\u4f7f\u7528\u4e86 let \u548c\u4e00\u4e2a\u6a21\u5f0f\u5c06 tup \u5206\u6210\u4e86\u4e09\u4e2a\u4e0d\u540c\u7684\u53d8\u91cf\uff0cx\u3001y \u548c z\u3002 // \u8fd9\u53eb\u505a \u89e3\u6784\uff08destructuring\uff09\u56e0\u4e3a\u5b83\u5c06\u4e00\u4e2a\u5143\u7ec4\u62c6\u6210\u4e86\u4e09\u4e2a\u90e8\u5206\u3002 println! ( \"The value of y is: {y}\" ); // \u6700\u540e\uff0c\u7a0b\u5e8f\u6253\u5370\u51fa\u4e86 y \u7684\u503c\uff0c\u4e5f\u5c31\u662f 6.4\u3002 } \u4e5f\u53ef\u4ee5\u4f7f\u7528\u70b9\u53f7\uff08.\uff09\u540e\u8ddf\u503c\u7684\u7d22\u5f15\u6765\u76f4\u63a5\u8bbf\u95ee\u5b83\u4eec\u3002\u4f8b\u5982\uff1a \u6587\u4ef6\u540d: src/main.rs fn main () { let x : ( i32 , f64 , u8 ) = ( 500 , 6.4 , 1 ); let five_hundred = x . 0 ; let six_point_four = x . 1 ; let one = x . 2 ; } \u4e0d\u5e26\u4efb\u4f55\u503c\u7684\u5143\u7ec4\u6709\u4e2a\u7279\u6b8a\u7684\u540d\u79f0\uff0c\u53eb\u505a \u5355\u5143 \uff08unit\uff09 \u5143\u7ec4\u3002\u8fd9\u79cd\u503c\u4ee5\u53ca\u5bf9\u5e94\u7684\u7c7b\u578b\u90fd\u5199\u4f5c () \uff0c \u8868\u793a\u7a7a\u503c\u6216\u7a7a\u7684\u8fd4\u56de\u7c7b\u578b \u3002\u5982\u679c\u8868\u8fbe\u5f0f\u4e0d\u8fd4\u56de\u4efb\u4f55\u5176\u4ed6\u503c\uff0c\u5219\u4f1a\u9690\u5f0f\u8fd4\u56de\u5355\u5143\u503c\u3002 \u6570\u7ec4\u7c7b\u578b \u53e6\u4e00\u4e2a\u5305\u542b\u591a\u4e2a\u503c\u7684\u65b9\u5f0f\u662f \u6570\u7ec4 \uff08array\uff09\u3002\u4e0e\u5143\u7ec4\u4e0d\u540c\uff0c \u6570\u7ec4\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u7684\u7c7b\u578b\u5fc5\u987b\u76f8\u540c \u3002Rust \u4e2d\u7684\u6570\u7ec4\u4e0e\u4e00\u4e9b\u5176\u4ed6\u8bed\u8a00\u4e2d\u7684\u6570\u7ec4\u4e0d\u540c\uff0c Rust\u4e2d\u7684\u6570\u7ec4\u957f\u5ea6\u662f\u56fa\u5b9a\u7684 \u3002 \u5c06\u6570\u7ec4\u7684\u503c\u5199\u6210\u5728\u65b9\u62ec\u53f7\u5185\uff0c\u7528\u9017\u53f7\u5206\u9694\uff1a fn main () { let a = [ 1 , 2 , 3 , 4 , 5 ]; } \u5f53\u4f60\u60f3\u8981\u5728 \u6808 \uff08stack\uff09\u800c\u4e0d\u662f\u5728 \u5806 \uff08heap\uff09\u4e0a\u4e3a\u6570\u636e\u5206\u914d\u7a7a\u95f4\uff0c\u6216\u8005\u662f\u60f3\u8981\u786e\u4fdd\u603b\u662f\u6709\u56fa\u5b9a\u6570\u91cf\u7684\u5143\u7d20\u65f6\uff0c\u6570\u7ec4\u975e\u5e38\u6709\u7528\u3002 \u4f46\u662f\u6570\u7ec4\u5e76\u4e0d\u5982 vector \u7c7b\u578b\u7075\u6d3b\u3002 vector \u7c7b\u578b\u662f\u6807\u51c6\u5e93\u63d0\u4f9b\u7684\u4e00\u4e2a \u5141\u8bb8 \u589e\u957f\u548c\u7f29\u5c0f\u957f\u5ea6\u7684\u7c7b\u4f3c\u6570\u7ec4\u7684\u96c6\u5408\u7c7b\u578b\u3002 \u5f53\u4e0d\u786e\u5b9a\u662f\u5e94\u8be5\u4f7f\u7528\u6570\u7ec4\u8fd8\u662f vector \u7684\u65f6\u5019\uff0c\u90a3\u4e48\u5f88\u53ef\u80fd\u5e94\u8be5\u4f7f\u7528 vector \u3002 \u7b2c\u516b\u7ae0 \u4f1a\u8be6\u7ec6\u8ba8\u8bba vector \u3002 \u7136\u800c\uff0c\u5f53\u4f60\u786e\u5b9a\u5143\u7d20\u4e2a\u6570\u4e0d\u4f1a\u6539\u53d8\u65f6\uff0c\u6570\u7ec4\u4f1a\u66f4\u6709\u7528\u3002\u4f8b\u5982\uff0c\u5f53\u4f60\u5728\u4e00\u4e2a\u7a0b\u5e8f\u4e2d\u4f7f\u7528\u6708\u4efd\u540d\u5b57\u65f6\uff0c\u4f60\u66f4\u5e94\u8d8b\u5411\u4e8e\u4f7f\u7528\u6570\u7ec4\u800c\u4e0d\u662f vector\uff0c\u56e0\u4e3a\u4f60\u786e\u5b9a\u53ea\u4f1a\u670912\u4e2a\u5143\u7d20\u3002 let months = [ \"January\" , \"February\" , \"March\" , \"April\" , \"May\" , \"June\" , \"July\" , \"August\" , \"September\" , \"October\" , \"November\" , \"December\" ]; \u53ef\u4ee5\u50cf\u8fd9\u6837\u7f16\u5199\u6570\u7ec4\u7684\u7c7b\u578b\uff1a\u5728\u65b9\u62ec\u53f7\u4e2d\u5305\u542b\u6bcf\u4e2a\u5143\u7d20\u7684\u7c7b\u578b\uff0c\u540e\u8ddf\u5206\u53f7\uff0c\u518d\u540e\u8ddf\u6570\u7ec4\u5143\u7d20\u7684\u6570\u91cf\u3002 let a : [ i32 ; 5 ] = [ 1 , 2 , 3 , 4 , 5 ]; // i32 \u662f\u6bcf\u4e2a\u5143\u7d20\u7684\u7c7b\u578b\u3002\u5206\u53f7\u4e4b\u540e\uff0c\u6570\u5b57 5 \u8868\u660e\u8be5\u6570\u7ec4\u5305\u542b\u4e94\u4e2a\u5143\u7d20\u3002 let a = [ 3 ; 5 ]; // \u901a\u8fc7\u5728\u65b9\u62ec\u53f7\u4e2d\u6307\u5b9a\u521d\u59cb\u503c\u52a0\u5206\u53f7\u518d\u52a0\u5143\u7d20\u4e2a\u6570\u7684\u65b9\u5f0f\u6765\u521b\u5efa\u4e00\u4e2a\u6bcf\u4e2a\u5143\u7d20\u90fd\u4e3a\u76f8\u540c\u503c\u7684\u6570\u7ec4\uff1a // \u53d8\u91cf\u540d\u4e3a a \u7684\u6570\u7ec4\u5c06\u5305\u542b 5 \u4e2a\u5143\u7d20\uff0c\u8fd9\u4e9b\u5143\u7d20\u7684\u503c\u6700\u521d\u90fd\u5c06\u88ab\u8bbe\u7f6e\u4e3a 3\u3002 // \u8fd9\u79cd\u5199\u6cd5\u4e0e let a = [3, 3, 3, 3, 3]; \u6548\u679c\u76f8\u540c\uff0c\u4f46\u66f4\u7b80\u6d01\u3002 \u8bbf\u95ee\u6570\u7ec4\u5143\u7d20 \u6570\u7ec4\u662f\u53ef\u4ee5\u5728\u6808(stack)\u4e0a\u5206\u914d\u7684\u5df2\u77e5\u56fa\u5b9a\u5927\u5c0f\u7684\u5355\u4e2a\u5185\u5b58\u5757\u3002\u53ef\u4ee5\u4f7f\u7528\u7d22\u5f15\u6765\u8bbf\u95ee\u6570\u7ec4\u7684\u5143\u7d20\uff0c\u50cf\u8fd9\u6837\uff1a fn main () { let a = [ 1 , 2 , 3 , 4 , 5 ]; let first = a [ 0 ]; let second = a [ 1 ]; } \u6570\u7ec4\u8d8a\u754c\u8bbf\u95ee \u8ba9\u6211\u4eec\u770b\u770b\u5982\u679c\u6211\u4eec\u8bbf\u95ee\u6570\u7ec4\u7ed3\u5c3e\u4e4b\u540e\u7684\u5143\u7d20\u4f1a\u53d1\u751f\u4ec0\u4e48\u5462\uff1f\u6bd4\u5982\u4f60\u6267\u884c\u4ee5\u4e0b\u4ee3\u7801\uff0c\u5b83\u4f7f\u7528\u7c7b\u4f3c\u4e8e\u7b2c 2 \u7ae0\u4e2d\u7684\u731c\u6570\u5b57\u6e38\u620f\u7684\u4ee3\u7801\u4ece\u7528\u6237\u90a3\u91cc\u83b7\u53d6\u6570\u7ec4\u7d22\u5f15\uff1a use std :: io ; fn main () { let a = [ 1 , 2 , 3 , 4 , 5 ]; println! ( \"\u8bf7\u8f93\u5165\u6570\u7ec4\u7d22\u5f15\" ); let mut index = String :: new (); io :: stdin () . read_line ( & mut index ) . expect ( \"\u8bfb\u53d6\u6570\u636e\u5931\u8d25\" ); let index : usize = index . trim () . parse () . expect ( \"\u8bf7\u8f93\u5165\u6570\u5b57\" ); let element = a [ index ]; println! ( \"\u6570\u7ec4\u4e2d\u7d22\u5f15\u4e3a {index} \u7684\u503c\u65f6: {element}\" ); } \u6b64\u4ee3\u7801\u7f16\u8bd1\u6210\u529f\u3002\u5982\u679c\u60a8\u4f7f\u7528 cargo run \u8fd0\u884c\u6b64\u4ee3\u7801\u5e76\u8f93\u5165 0\u30011\u30012\u30013 \u6216 4\uff0c\u7a0b\u5e8f\u5c06\u5728\u6570\u7ec4\u4e2d\u7684\u7d22\u5f15\u5904\u6253\u5370\u51fa\u76f8\u5e94\u7684\u503c\u3002\u5982\u679c\u4f60\u8f93\u5165\u4e00\u4e2a\u8d85\u8fc7\u6570\u7ec4\u672b\u7aef\u7684\u6570\u5b57\uff0c\u5982 10\uff0c\u4f60\u4f1a\u770b\u5230\u8fd9\u6837\u7684\u8f93\u51fa\uff1a thread 'main' panicked at 'index out of bounds: the len is 5 but the index is 10' , src/main.rs:19:19 note: run with ` RUST_BACKTRACE = 1 ` environment variable to display a backtrace \u7a0b\u5e8f\u5728\u7d22\u5f15\u64cd\u4f5c\u4e2d\u4f7f\u7528\u4e00\u4e2a\u65e0\u6548\u7684\u503c\u65f6\u5bfc\u81f4 \u8fd0\u884c\u65f6 \u9519\u8bef\u3002 \u7a0b\u5e8f\u5e26\u7740\u9519\u8bef\u4fe1\u606f\u9000\u51fa\uff0c\u5e76\u4e14\u6ca1\u6709\u6267\u884c\u6700\u540e\u7684 println! \u8bed\u53e5\u3002 \u5f53\u5c1d\u8bd5\u7528\u7d22\u5f15\u8bbf\u95ee\u4e00\u4e2a\u5143\u7d20\u65f6\uff0cRust \u4f1a\u68c0\u67e5\u6307\u5b9a\u7684\u7d22\u5f15\u662f\u5426\u5c0f\u4e8e\u6570\u7ec4\u7684\u957f\u5ea6\u3002 \u5982\u679c\u7d22\u5f15\u8d85\u51fa\u4e86\u6570\u7ec4\u957f\u5ea6\uff0cRust \u4f1a panic\uff0c\u8fd9\u662f Rust \u672f\u8bed\uff0c \u5b83\u7528\u4e8e\u7a0b\u5e8f\u56e0\u4e3a\u9519\u8bef\u800c\u9000\u51fa\u7684\u60c5\u51b5 \u3002 \u8fd9\u79cd\u68c0\u67e5\u5fc5\u987b\u5728\u8fd0\u884c\u65f6\u8fdb\u884c\uff0c\u7279\u522b\u662f\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u56e0\u4e3a\u7f16\u8bd1\u5668\u4e0d\u53ef\u80fd\u77e5\u9053\u7528\u6237\u5728\u4ee5\u540e\u8fd0\u884c\u4ee3\u7801\u65f6\u5c06\u8f93\u5165\u4ec0\u4e48\u503c\u3002 \u8fd9\u662f\u7b2c\u4e00\u4e2a\u5728\u5b9e\u6218\u4e2d\u9047\u5230\u7684 Rust \u5b89\u5168\u539f\u5219\u7684\u4f8b\u5b50\u3002 \u5728\u5f88\u591a\u5e95\u5c42\u8bed\u8a00\u4e2d\uff0c\u5e76\u6ca1\u6709\u8fdb\u884c\u8fd9\u7c7b\u68c0\u67e5\uff0c\u8fd9\u6837\u5f53\u63d0\u4f9b\u4e86\u4e00\u4e2a\u4e0d\u6b63\u786e\u7684\u7d22\u5f15\u65f6\uff0c\u5c31\u4f1a\u8bbf\u95ee\u65e0\u6548\u7684\u5185\u5b58\u3002 \u901a\u8fc7\u7acb\u5373\u9000\u51fa\u800c\u4e0d\u662f\u5141\u8bb8\u5185\u5b58\u8bbf\u95ee\u5e76\u7ee7\u7eed\u6267\u884c\uff0cRust \u8ba9\u4f60\u907f\u5f00\u6b64\u7c7b\u9519\u8bef\u3002 \u7b2c\u4e5d\u7ae0 \u4f1a\u66f4\u8be6\u7ec6\u5730\u8ba8\u8bba Rust \u7684\u9519\u8bef\u5904\u7406\u673a\u5236\uff0c\u4ee5\u53ca\u5982\u4f55\u7f16\u5199\u53ef\u8bfb\u6027\u5f3a\u800c\u53c8\u5b89\u5168\u7684\u4ee3\u7801\uff0c\u4f7f\u7a0b\u5e8f\u65e2\u4e0d\u4f1a panic \u4e5f\u4e0d\u4f1a\u5bfc\u81f4\u975e\u6cd5\u5185\u5b58\u8bbf\u95ee\u3002 \u51fd\u6570 \u51fd\u6570\u5728 Rust \u4ee3\u7801\u4e2d\u975e\u5e38\u666e\u904d\u3002\u4f60\u5df2\u7ecf\u89c1\u8fc7\u8bed\u8a00\u4e2d\u6700\u91cd\u8981\u7684\u51fd\u6570\u4e4b\u4e00\uff1a main \u51fd\u6570\uff0c\u5b83\u662f\u5f88\u591a\u7a0b\u5e8f\u7684\u5165\u53e3\u70b9\u3002\u4f60\u4e5f\u89c1\u8fc7 fn \u5173\u952e\u5b57\uff0c\u5b83\u7528\u6765\u58f0\u660e\u65b0\u51fd\u6570\u3002 Rust \u4ee3\u7801\u4e2d\u7684\u51fd\u6570\u548c\u53d8\u91cf\u540d\u4f7f\u7528 snake case \u89c4\u8303\u98ce\u683c\u3002\u5728 snake case \u4e2d\uff0c \u6240\u6709\u5b57\u6bcd\u90fd\u662f\u5c0f\u5199\u5e76\u4f7f\u7528\u4e0b\u5212\u7ebf\u5206\u9694\u5355\u8bcd \u3002\u8fd9\u662f\u4e00\u4e2a\u5305\u542b\u51fd\u6570\u5b9a\u4e49\u793a\u4f8b\u7684\u7a0b\u5e8f\uff1a \u6587\u4ef6\u540d: src/main.rs fn main () { println! ( \"Hello, world!\" ); another_function (); } // \u901a\u8fc7\u8f93\u5165 fn \u540e\u9762\u8ddf\u7740\u51fd\u6570\u540d\u548c\u4e00\u5bf9\u5706\u62ec\u53f7\u6765\u5b9a\u4e49\u51fd\u6570\u3002\u5927\u62ec\u53f7\u544a\u8bc9\u7f16\u8bd1\u5668\u54ea\u91cc\u662f\u51fd\u6570\u4f53\u7684\u5f00\u59cb\u548c\u7ed3\u5c3e\u3002 fn another_function () { println! ( \"Another function.\" ); } // main \u51fd\u6570\u4e2d\u7684\u4ee3\u7801\u4f1a\u6309\u987a\u5e8f\u6267\u884c\u3002\u9996\u5148\uff0c\u6253\u5370 \u201cHello, world!\u201d \u4fe1\u606f\uff0c\u7136\u540e\u8c03\u7528 another_function \u51fd\u6570\u5e76\u6253\u5370\u5b83\u7684\u4fe1\u606f\u3002 \u53ef\u4ee5\u4f7f\u7528\u51fd\u6570\u540d\u540e\u8ddf\u5706\u62ec\u53f7\u6765\u8c03\u7528\u6211\u4eec\u5b9a\u4e49\u8fc7\u7684\u4efb\u610f\u51fd\u6570\u3002 \u56e0\u4e3a\u7a0b\u5e8f\u4e2d\u5df2\u5b9a\u4e49 another_function \u51fd\u6570\uff0c\u6240\u4ee5\u53ef\u4ee5\u5728 main \u51fd\u6570\u4e2d\u8c03\u7528\u5b83\u3002\u6ce8\u610f\uff0c \u6e90\u7801\u4e2d another_function \u5b9a\u4e49\u5728 main \u51fd\u6570 \u4e4b\u540e\uff1b\u4e5f\u53ef\u4ee5\u5b9a\u4e49\u5728\u4e4b\u524d \u3002 Rust \u4e0d\u5173\u5fc3\u51fd\u6570\u5b9a\u4e49\u6240\u5728\u7684\u4f4d\u7f6e\uff0c\u53ea\u8981\u51fd\u6570\u88ab\u8c03\u7528\u65f6\u51fa\u73b0\u5728\u8c03\u7528\u4e4b\u5904\u53ef\u89c1\u7684\u4f5c\u7528\u57df\u5185\u5c31\u884c\u3002 \u53c2\u6570 \u6211\u4eec\u53ef\u4ee5\u5b9a\u4e49\u4e3a\u62e5\u6709 \u53c2\u6570 \uff08parameters\uff09\u7684\u51fd\u6570\uff0c\u53c2\u6570\u662f\u7279\u6b8a\u53d8\u91cf\uff0c\u662f\u51fd\u6570\u7b7e\u540d\u7684\u4e00\u90e8\u5206\u3002\u5f53\u51fd\u6570\u62e5\u6709\u53c2\u6570\uff08\u5f62\u53c2\uff09\u65f6\uff0c\u53ef\u4ee5\u4e3a\u8fd9\u4e9b\u53c2\u6570\u63d0\u4f9b\u5177\u4f53\u7684\u503c\uff08\u5b9e\u53c2\uff09\u3002 \u6280\u672f\u4e0a\u8bb2\uff0c\u8fd9\u4e9b\u5177\u4f53\u503c\u88ab\u79f0\u4e3a\u53c2\u6570\uff08arguments\uff09\uff0c\u4f46\u662f\u5728\u65e5\u5e38\u4ea4\u6d41\u4e2d\uff0c\u4eba\u4eec\u503e\u5411\u4e8e\u4e0d\u533a\u5206\u4f7f\u7528 parameter \u548c argument \u6765\u8868\u793a\u51fd\u6570\u5b9a\u4e49\u4e2d\u7684\u53d8\u91cf\u6216\u8c03\u7528\u51fd\u6570\u65f6\u4f20\u5165\u7684\u5177\u4f53\u503c\u3002 \u5728\u8fd9\u7248 another_function \u4e2d\uff0c\u6211\u4eec\u589e\u52a0\u4e86\u4e00\u4e2a\u53c2\u6570\uff1a fn main () { another_function ( 5 ); // \u6211\u4eec\u5c06 5 \u4f20\u7ed9 another_function \u65f6\uff0c // println! \u5b8f\u4f1a\u628a 5 \u653e\u5728\u683c\u5f0f\u5b57\u7b26\u4e32\u4e2d\u5305\u542b x \u7684\u90a3\u5bf9\u82b1\u62ec\u53f7\u7684\u4f4d\u7f6e\u3002 } // another_function \u7684\u58f0\u660e\u4e2d\u6709\u4e00\u4e2a\u547d\u540d\u4e3a x \u7684\u53c2\u6570\u3002 // x \u7684\u7c7b\u578b\u88ab\u6307\u5b9a\u4e3a i32\u3002 fn another_function ( x : i32 ) { println! ( \"The value of x is: {x}\" ); } \u5728\u51fd\u6570\u7b7e\u540d\u4e2d\uff0c \u5fc5\u987b \u58f0\u660e\u6bcf\u4e2a\u53c2\u6570\u7684\u7c7b\u578b\u3002 \u8fd9\u662f Rust \u8bbe\u8ba1\u4e2d\u4e00\u4e2a\u7ecf\u8fc7\u614e\u91cd\u8003\u8651\u7684\u51b3\u5b9a\uff1a \u8981\u6c42\u5728\u51fd\u6570\u5b9a\u4e49\u4e2d\u63d0\u4f9b\u7c7b\u578b\u6ce8\u89e3 \uff0c\u610f\u5473\u7740\u7f16\u8bd1\u5668\u518d\u4e5f\u4e0d\u9700\u8981\u4f60\u5728\u4ee3\u7801\u7684\u5176\u4ed6\u5730\u65b9\u6ce8\u660e\u7c7b\u578b\u6765\u6307\u51fa\u4f60\u7684\u610f\u56fe\u3002 \u800c\u4e14\uff0c\u5728\u77e5\u9053\u51fd\u6570\u9700\u8981\u4ec0\u4e48\u7c7b\u578b\u540e\uff0c\u7f16\u8bd1\u5668\u5c31\u80fd\u591f\u7ed9\u51fa\u66f4\u6709\u7528\u7684\u9519\u8bef\u6d88\u606f\u3002 \u5f53\u5b9a\u4e49\u591a\u4e2a\u53c2\u6570\u65f6\uff0c\u4f7f\u7528\u9017\u53f7\u5206\u9694\uff0c\u50cf\u8fd9\u6837\uff1a fn main () { print_labeled_measurement ( 5 , 'h' ); } // \u5b83\u6709\u4e24\u4e2a\u53c2\u6570\u3002\u7b2c\u4e00\u4e2a\u53c2\u6570\u540d\u4e3a value\uff0c \u7c7b\u578b\u662f i32\u3002 // \u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f unit_label \uff0c\u7c7b\u578b\u662f char\u3002 fn print_labeled_measurement ( value : i32 , unit_label : char ) { println! ( \"The measurement is: {value}{unit_label}\" ); } \u8bed\u53e5\u548c\u8868\u8fbe\u5f0f \u51fd\u6570\u4f53\u7531\u4e00\u7cfb\u5217\u7684 \u8bed\u53e5 \u548c\u4e00\u4e2a\u53ef\u9009\u7684 \u7ed3\u5c3e\u8868\u8fbe\u5f0f \u6784\u6210\u3002 \u76ee\u524d\u4e3a\u6b62\uff0c\u6211\u4eec\u63d0\u5230\u7684\u51fd\u6570\u8fd8\u4e0d\u5305\u542b\u7ed3\u5c3e\u8868\u8fbe\u5f0f\uff0c\u4e0d\u8fc7\u4f60\u5df2\u7ecf\u89c1\u8fc7\u4f5c\u4e3a\u8bed\u53e5\u4e00\u90e8\u5206\u7684\u8868\u8fbe\u5f0f\u3002 \u56e0\u4e3a Rust \u662f\u4e00\u95e8\u57fa\u4e8e \u8868\u8fbe\u5f0f \uff08expression-based\uff09\u7684\u8bed\u8a00\uff0c\u8fd9\u662f\u4e00\u4e2a\u9700\u8981\u7406\u89e3\u7684\uff08\u4e0d\u540c\u4e8e\u5176\u4ed6\u8bed\u8a00\uff09\u91cd\u8981\u533a\u522b\u3002 \u5176\u4ed6\u8bed\u8a00\u5e76\u6ca1\u6709\u8fd9\u6837\u7684\u533a\u522b\uff0c\u6240\u4ee5\u8ba9\u6211\u4eec\u770b\u770b\u8bed\u53e5\u4e0e\u8868\u8fbe\u5f0f\u6709\u4ec0\u4e48\u533a\u522b\u4ee5\u53ca\u8fd9\u4e9b\u533a\u522b\u662f\u5982\u4f55\u5f71\u54cd\u51fd\u6570\u4f53\u7684\u3002 \u8bed\u53e5 \uff08Statements\uff09\u662f\u6267\u884c\u4e00\u4e9b\u64cd\u4f5c\u4f46\u4e0d\u8fd4\u56de\u503c\u7684\u6307\u4ee4 \u3002 \u8868\u8fbe\u5f0f \uff08Expressions\uff09\u8ba1\u7b97\u5e76\u4ea7\u751f\u4e00\u4e2a\u503c\u3002 \u8ba9\u6211\u4eec\u770b\u4e00\u4e9b\u4f8b\u5b50\u3002 \u5b9e\u9645\u4e0a\uff0c\u6211\u4eec\u5df2\u7ecf\u4f7f\u7528\u8fc7\u8bed\u53e5\u548c\u8868\u8fbe\u5f0f\u3002\u4f7f\u7528 let \u5173\u952e\u5b57\u521b\u5efa\u53d8\u91cf\u5e76\u7ed1\u5b9a\u4e00\u4e2a\u503c\u662f\u4e00\u4e2a\u8bed\u53e5\u3002\u5728\u4e0b\u9762\u793a\u4f8b \u4e2d\uff0c let y = 6; \u662f\u4e00\u4e2a\u8bed\u53e5\u3002 fn main () { let y = 6 ; } // \u51fd\u6570\u5b9a\u4e49\u4e5f\u662f\u8bed\u53e5\uff0c\u4e0a\u9762\u6574\u4e2a\u4f8b\u5b50\u672c\u8eab\u5c31\u662f\u4e00\u4e2a\u8bed\u53e5\u3002 \u8bed\u53e5\u4e0d\u8fd4\u56de\u503c\u3002\u56e0\u6b64\uff0c\u4e0d\u80fd\u628a let \u8bed\u53e5\u8d4b\u503c\u7ed9\u53e6\u4e00\u4e2a\u53d8\u91cf\uff0c\u6bd4\u5982\u4e0b\u9762\u7684\u4f8b\u5b50\u5c1d\u8bd5\u505a\u7684\uff0c\u4f1a\u4ea7\u751f\u4e00\u4e2a\u9519\u8bef\uff1a fn main () { let x = ( let y = 6 ); } \u5f53\u8fd0\u884c\u8fd9\u4e2a\u7a0b\u5e8f\u65f6\uff0c\u4f1a\u5f97\u5230\u5982\u4e0b\u9519\u8bef\uff1a $ cargo run Compiling functions v0.1.0 ( file:///projects/functions ) error: expected expression, found statement ( ` let ` ) --> src/main.rs:2:14 | 2 | let x = ( let y = 6 ) ; | ^^^^^^^^^ | = note: variable declaration using ` let ` is a statement error [ E0658 ] : ` let ` expressions in this position are unstable --> src/main.rs:2:14 | 2 | let x = ( let y = 6 ) ; | ^^^^^^^^^ | = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information warning: unnecessary parentheses around assigned value --> src/main.rs:2:13 | 2 | let x = ( let y = 6 ) ; | ^ ^ | = note: ` #[warn(unused_parens)]` on by default help: remove these parentheses | 2 - let x = ( let y = 6 ) ; 2 + let x = let y = 6 ; | For more information about this error, try ` rustc --explain E0658 ` . warning: ` functions ` ( bin \"functions\" ) generated 1 warning error: could not compile ` functions ` due to 2 previous errors ; 1 warning emitted let y = 6 \u8bed\u53e5\u5e76\u4e0d\u8fd4\u56de\u503c\uff0c\u6240\u4ee5\u6ca1\u6709\u53ef\u4ee5\u7ed1\u5b9a\u5230 x \u4e0a\u7684\u503c\u3002 \u8fd9\u4e0e\u5176\u4ed6\u8bed\u8a00\u4e0d\u540c\uff0c\u4f8b\u5982 C \u548c Ruby\uff0c\u5b83\u4eec\u7684\u8d4b\u503c\u8bed\u53e5\u4f1a\u8fd4\u56de\u6240\u8d4b\u7684\u503c\u3002 \u5728\u8fd9\u4e9b\u8bed\u8a00\u4e2d\uff0c\u53ef\u4ee5\u8fd9\u4e48\u5199 x = y = 6\uff0c\u8fd9\u6837 x \u548c y \u7684\u503c\u90fd\u662f 6\uff1bRust \u4e2d\u4e0d\u80fd\u8fd9\u6837\u5199\u3002 \u8868\u8fbe\u5f0f\u4f1a\u8ba1\u7b97\u51fa\u4e00\u4e2a\u503c\uff0c\u5e76\u4e14\u4f60\u5c06\u7f16\u5199\u7684\u5927\u90e8\u5206 Rust \u4ee3\u7801\u662f\u7531\u8868\u8fbe\u5f0f\u7ec4\u6210\u7684\u3002 \u8003\u8651\u4e00\u4e2a\u6570\u5b66\u8fd0\u7b97\uff0c\u6bd4\u5982 5 + 6\uff0c\u8fd9\u662f\u4e00\u4e2a\u8868\u8fbe\u5f0f\u5e76\u8ba1\u7b97\u51fa\u503c 11\u3002 \u8868\u8fbe\u5f0f\u53ef\u4ee5\u662f\u8bed\u53e5\u7684\u4e00\u90e8\u5206\uff1a\u5728\u4e0a\u9762\u4e2d\uff0c\u8bed\u53e5 let y = 6; \u4e2d\u7684 6 \u662f\u4e00\u4e2a\u8868\u8fbe\u5f0f\uff0c\u5b83\u8ba1\u7b97\u51fa\u7684\u503c\u662f 6\u3002 \u51fd\u6570\u8c03\u7528\u662f\u4e00\u4e2a\u8868\u8fbe\u5f0f \u3002 \u5b8f\u8c03\u7528\u662f\u4e00\u4e2a\u8868\u8fbe\u5f0f \u3002 \u7528\u5927\u62ec\u53f7\u521b\u5efa\u7684\u4e00\u4e2a\u65b0\u7684\u5757\u4f5c\u7528\u57df\u4e5f\u662f\u4e00\u4e2a\u8868\u8fbe\u5f0f \uff0c\u4f8b\u5982\uff1a fn main () { let y = { let x = 3 ; x + 1 }; // \u662f\u4e00\u4e2a\u4ee3\u7801\u5757\uff0c\u5b83\u7684\u503c\u662f 4 // \u8fd9\u4e2a\u503c\u4f5c\u4e3a let \u8bed\u53e5\u7684\u4e00\u90e8\u5206\u88ab\u7ed1\u5b9a\u5230 y \u4e0a\u3002 // \u6ce8\u610f x+1 \u8fd9\u4e00\u884c\u5728\u7ed3\u5c3e\u6ca1\u6709\u5206\u53f7\uff0c\u4e0e\u4f60\u89c1\u8fc7\u7684\u5927\u90e8\u5206\u4ee3\u7801\u884c\u4e0d\u540c\u3002 // \u8868\u8fbe\u5f0f\u7684\u7ed3\u5c3e\u6ca1\u6709\u5206\u53f7\u3002 // \u5982\u679c\u5728\u8868\u8fbe\u5f0f\u7684\u7ed3\u5c3e\u52a0\u4e0a\u5206\u53f7\uff0c\u5b83\u5c31\u53d8\u6210\u4e86\u8bed\u53e5\uff0c\u800c\u8bed\u53e5\u4e0d\u4f1a\u8fd4\u56de\u503c\u3002 // \u5728\u63a5\u4e0b\u6765\u63a2\u7d22\u5177\u6709\u8fd4\u56de\u503c\u7684\u51fd\u6570\u548c\u8868\u8fbe\u5f0f\u65f6\u8981\u8c28\u8bb0\u8fd9\u4e00\u70b9\u3002 println! ( \"The value of y is: {y}\" ); } \u5177\u6709\u8fd4\u56de\u503c\u7684\u51fd\u6570 \u51fd\u6570\u53ef\u4ee5\u5411\u8c03\u7528\u5b83\u7684\u4ee3\u7801\u8fd4\u56de\u503c\u3002\u6211\u4eec \u5e76\u4e0d\u5bf9\u8fd4\u56de\u503c\u547d\u540d\uff0c\u4f46\u8981\u5728\u7bad\u5934\uff08->\uff09\u540e\u58f0\u660e\u5b83\u7684\u7c7b\u578b \u3002 \u5728 Rust \u4e2d\uff0c \u51fd\u6570\u7684\u8fd4\u56de\u503c\u7b49\u540c\u4e8e\u51fd\u6570\u4f53\u6700\u540e\u4e00\u4e2a\u8868\u8fbe\u5f0f\u7684\u503c \u3002 \u4f7f\u7528 return \u5173\u952e\u5b57\u548c\u6307\u5b9a\u503c\uff0c\u53ef\u4ece\u51fd\u6570\u4e2d\u63d0\u524d\u8fd4\u56de\uff1b \u4f46\u5927\u90e8\u5206\u51fd\u6570\u9690\u5f0f\u7684\u8fd4\u56de\u6700\u540e\u7684\u8868\u8fbe\u5f0f\u3002 \u8fd9\u662f\u4e00\u4e2a\u6709\u8fd4\u56de\u503c\u7684\u51fd\u6570\u7684\u4f8b\u5b50\uff1a // \u5728 five \u51fd\u6570\u4e2d\u6ca1\u6709\u51fd\u6570\u8c03\u7528\u3001\u5b8f\u3001\u751a\u81f3\u6ca1\u6709 let \u8bed\u53e5 \u2014\u2014 \u53ea\u6709\u6570\u5b57 5\u3002 // \u8fd9\u5728 Rust \u4e2d\u662f\u4e00\u4e2a\u5b8c\u5168\u6709\u6548\u7684\u51fd\u6570\u3002 // \u6ce8\u610f\uff0c\u4e5f\u6307\u5b9a\u4e86\u51fd\u6570\u8fd4\u56de\u503c\u7684\u7c7b\u578b\uff0c\u5c31\u662f -> i32\u3002 fn five () -> i32 { 5 // five \u51fd\u6570\u6ca1\u6709\u53c2\u6570\u5e76\u5b9a\u4e49\u4e86\u8fd4\u56de\u503c\u7c7b\u578b\uff0c\u4e0d\u8fc7\u51fd\u6570\u4f53\u53ea\u6709\u5355\u5355\u4e00\u4e2a 5 \u4e5f\u6ca1\u6709\u5206\u53f7\uff0c\u56e0\u4e3a\u8fd9\u662f\u4e00\u4e2a\u8868\u8fbe\u5f0f\uff0c\u6211\u4eec\u60f3\u8981\u8fd4\u56de\u5b83\u7684\u503c\u3002 } fn main () { // \u8fd9\u4e00\u884c\u8868\u660e\u6211\u4eec\u4f7f\u7528\u51fd\u6570\u7684\u8fd4\u56de\u503c\u521d\u59cb\u5316\u4e00\u4e2a\u53d8\u91cf\u3002 // \u56e0\u4e3a five \u51fd\u6570\u8fd4\u56de 5\uff0c\u8fd9\u4e00\u884c\u4e0e\u4ee3\u7801 let x = 5; \u76f8\u540c let x = five (); println! ( \"The value of x is: {x}\" ); } \u8ba9\u6211\u4eec\u770b\u770b\u53e6\u4e00\u4e2a\u4f8b\u5b50\uff1a fn main () { let x = plus_one ( 5 ); println! ( \"The value of x is: {x}\" ); } fn plus_one ( x : i32 ) -> i32 { x + 1 // \u5982\u679c\u5728\u5305\u542b x + 1 \u7684\u884c\u5c3e\u52a0\u4e0a\u4e00\u4e2a\u5206\u53f7\uff0c\u628a\u5b83\u4ece\u8868\u8fbe\u5f0f\u53d8\u6210\u8bed\u53e5\uff0c\u6211\u4eec\u5c06\u770b\u5230\u4e00\u4e2a\u9519\u8bef\u3002 } \u6ce8\u91ca \u7a0b\u5e8f\u5458\u5728\u6e90\u7801\u4e2d\u7559\u4e0b \u6ce8\u91ca \uff08comments\uff09\uff0c\u7f16\u8bd1\u5668\u4f1a\u5ffd\u7565\u5b83\u4eec\uff0c\u4e0d\u8fc7\u9605\u8bfb\u4ee3\u7801\u7684\u4eba\u53ef\u80fd\u89c9\u5f97\u6709\u7528\u3002 \u5355\u884c\u6ce8\u91ca \u60ef\u7528\u7684\u6ce8\u91ca\u6837\u5f0f\u662f\u4ee5\u4e24\u4e2a\u659c\u6760\u5f00\u59cb\u6ce8\u91ca\uff0c\u5e76\u6301\u7eed\u5230\u672c\u884c\u7684\u7ed3\u5c3e\u3002\u5bf9\u4e8e\u8d85\u8fc7\u4e00\u884c\u7684\u6ce8\u91ca\uff0c\u9700\u8981\u5728\u6bcf\u4e00\u884c\u524d\u90fd\u52a0\u4e0a // // So we\u2019re doing something complicated here, long enough that we need // multiple lines of comments to do it! Whew! Hopefully, this comment will // explain what\u2019s going on. \u6ce8\u91ca\u4e5f\u53ef\u4ee5\u653e\u5728\u5305\u542b\u4ee3\u7801\u7684\u884c\u7684\u672b\u5c3e\uff1a fn main () { let lucky_number = 7 ; // I\u2019m feeling lucky today } \u6587\u6863\u6ce8\u91ca \u63a7\u5236\u6d41 \u6839\u636e\u6761\u4ef6\u662f\u5426\u4e3a\u771f\u6765\u51b3\u5b9a\u662f\u5426\u6267\u884c\u67d0\u4e9b\u4ee3\u7801\uff0c\u4ee5\u53ca\u6839\u636e\u6761\u4ef6\u662f\u5426\u4e3a\u771f\u6765\u91cd\u590d\u8fd0\u884c\u4e00\u6bb5\u4ee3\u7801\u7684\u80fd\u529b\u662f\u5927\u90e8\u5206\u7f16\u7a0b\u8bed\u8a00\u7684\u57fa\u672c\u7ec4\u6210\u90e8\u5206\u3002 if\u8868\u8fbe\u5f0f if \u8868\u8fbe\u5f0f\u5141\u8bb8\u6839\u636e\u6761\u4ef6\u6267\u884c\u4e0d\u540c\u7684\u4ee3\u7801\u5206\u652f\u3002 fn main () { let number = 3 ; // \u6240\u6709\u7684 if \u8868\u8fbe\u5f0f\u90fd\u4ee5 if \u5173\u952e\u5b57\u5f00\u5934\uff0c\u5176\u540e\u8ddf\u4e00\u4e2a\u6761\u4ef6\u3002 if number < 5 { // \u5728\u6761\u4ef6\u4e3a\u771f\u65f6\u5e0c\u671b\u6267\u884c\u7684\u4ee3\u7801\u5757\u4f4d\u4e8e\u7d27\u8ddf\u6761\u4ef6\u4e4b\u540e\u7684\u5927\u62ec\u53f7\u4e2d\u3002 println! ( \"condition was true\" ); } else { // \u4e00\u4e2a\u53ef\u9009\u7684 else \u8868\u8fbe\u5f0f\u6765\u63d0\u4f9b\u4e00\u4e2a\u5728\u6761\u4ef6\u4e3a\u5047\u65f6\u5e94\u5f53\u6267\u884c\u7684\u4ee3\u7801\u5757 println! ( \"condition was false\" ); } } \u503c\u5f97\u6ce8\u610f\u7684\u662f\u4ee3\u7801\u4e2d\u7684\u6761\u4ef6 \u5fc5\u987b \u662f bool \u503c\u3002\u5982\u679c\u6761\u4ef6\u4e0d\u662f bool \u503c\uff0c\u6211\u4eec\u5c06\u5f97\u5230\u4e00\u4e2a\u9519\u8bef\u3002 fn main () { let number = 3 ; // \u4f1a\u62a5\uff0cexpected `bool`, found integer \u9519\u8bef\u3002 // Rust \u5e76\u4e0d\u4f1a\u5c1d\u8bd5\u81ea\u52a8\u5730\u5c06\u975e\u5e03\u5c14\u503c\u8f6c\u6362\u4e3a\u5e03\u5c14\u503c\u3002 // \u5fc5\u987b\u603b\u662f\u663e\u5f0f\u5730\u4f7f\u7528\u5e03\u5c14\u503c\u4f5c\u4e3a if \u7684\u6761\u4ef6\u3002 if number { println! ( \"number was three\" ); } } else if \u8868\u8fbe\u5f0f \u53ef\u4ee5\u5c06 else if \u8868\u8fbe\u5f0f\u4e0e if \u548c else \u7ec4\u5408\u6765\u5b9e\u73b0\u591a\u91cd\u6761\u4ef6\u3002 fn main () { let number = 6 ; // \u6309\u987a\u5e8f\u68c0\u67e5\u6bcf\u4e2a if \u8868\u8fbe\u5f0f\u5e76\u6267\u884c\u7b2c\u4e00\u4e2a\u6761\u4ef6\u4e3a\u771f\u7684\u4ee3\u7801\u5757\u3002 if number % 4 == 0 { println! ( \"number is divisible by 4\" ); } else if number % 3 == 0 { println! ( \"number is divisible by 3\" ); } else if number % 2 == 0 { println! ( \"number is divisible by 2\" ); } else { println! ( \"number is not divisible by 4, 3, or 2\" ); } // Rust \u53ea\u4f1a\u6267\u884c\u7b2c\u4e00\u4e2a\u6761\u4ef6\u4e3a\u771f\u7684\u4ee3\u7801\u5757\uff0c\u5e76\u4e14\u4e00\u65e6\u5b83\u627e\u5230\u4e00\u4e2a\u4ee5\u540e\uff0c\u751a\u81f3\u90fd\u4e0d\u4f1a\u68c0\u67e5\u5269\u4e0b\u7684\u6761\u4ef6\u4e86\u3002 } \u4f7f\u7528\u8fc7\u591a\u7684 else if \u8868\u8fbe\u5f0f\u4f1a\u4f7f\u4ee3\u7801\u663e\u5f97\u6742\u4e71\u65e0\u7ae0\uff0c\u6240\u4ee5\u5982\u679c\u6709\u591a\u4e8e\u4e00\u4e2a else if \u8868\u8fbe\u5f0f\uff0c\u6700\u597d\u91cd\u6784\u4ee3\u7801\u3002 \u4e3a\u6b64\uff0c\u7b2c\u516d\u7ae0\u4f1a\u4ecb\u7ecd\u4e00\u4e2a\u5f3a\u5927\u7684 Rust \u5206\u652f\u7ed3\u6784\uff08branching construct\uff09\uff0c\u53eb\u505a match \u3002 let\u4e2d\u7684if \u56e0\u4e3a if \u662f\u4e00\u4e2a\u8868\u8fbe\u5f0f\uff0c\u53ef\u4ee5\u5728 let \u8bed\u53e5\u7684\u53f3\u4fa7\u4f7f\u7528\u5b83\uff0c fn main () { let condition = true ; let number = if condition { 5 } else { 6 }; // \u5c06 if \u8868\u8fbe\u5f0f\u7684\u8fd4\u56de\u503c\u8d4b\u7ed9\u4e00\u4e2a\u53d8\u91cf // \u4ee3\u7801\u5757\u7684\u503c\u662f\u5176\u6700\u540e\u4e00\u4e2a\u8868\u8fbe\u5f0f\u7684\u503c\uff0c\u800c\u6570\u5b57\u672c\u8eab\u5c31\u662f\u4e00\u4e2a\u8868\u8fbe\u5f0f\u3002 println! ( \"The value of number is: {number}\" ); } \u7c7b\u578b\u9700\u7edf\u4e00 fn main () { let condition = true ; let number = if condition { 5 } else { \"six\" }; // \u7c7b\u578b\u4e0d\u7edf\u4e00\uff0c\u4f1a\u62a5\u9519\uff0cexpected integer, found `&str` println! ( \"The value of number is: {number}\" ); } \u5faa\u73af\u8868\u8fbe\u5f0f \u591a\u6b21\u6267\u884c\u540c\u4e00\u6bb5\u4ee3\u7801\u662f\u5f88\u5e38\u7528\u7684\uff0cRust \u4e3a\u6b64\u63d0\u4f9b\u4e86\u591a\u79cd \u5faa\u73af\uff08loops\uff09\u3002 loop \u5faa\u73af loop \u5173\u952e\u5b57\u544a\u8bc9 Rust \u4e00\u904d\u53c8\u4e00\u904d\u5730\u6267\u884c\u4e00\u6bb5\u4ee3\u7801\u76f4\u5230\u4f60\u660e\u786e\u8981\u6c42\u505c\u6b62\u3002 fn main () { loop { // \u4f1a\u770b\u5230\u8fde\u7eed\u7684\u53cd\u590d\u6253\u5370 again!\uff0c\u76f4\u5230\u6211\u4eec\u624b\u52a8\u505c\u6b62\u7a0b\u5e8f\u3002 // \u5927\u90e8\u5206\u7ec8\u7aef\u90fd\u652f\u6301\u4e00\u4e2a\u5feb\u6377\u952e\uff0cctrl-c\uff0c\u6765\u7ec8\u6b62\u4e00\u4e2a\u9677\u5165\u65e0\u9650\u5faa\u73af\u7684\u7a0b\u5e8f\u3002 println! ( \"again!\" ); } } break \u5173\u952e\u5b57\u6765\u544a\u8bc9\u7a0b\u5e8f\u4f55\u65f6\u505c\u6b62\u5faa\u73af\u3002 continue \u5173\u952e\u5b57\u544a\u8bc9\u7a0b\u5e8f\u8df3\u8fc7\u8fd9\u4e2a\u5faa\u73af\u8fed\u4ee3\u4e2d\u7684\u4efb\u4f55\u5269\u4f59\u4ee3\u7801\uff0c\u5e76\u8f6c\u5230\u4e0b\u4e00\u4e2a\u8fed\u4ee3\u3002 \u4ece\u5faa\u73af\u8fd4\u56de\u503c loop \u7684\u4e00\u4e2a\u7528\u4f8b\u662f\u91cd\u8bd5\u53ef\u80fd\u4f1a\u5931\u8d25\u7684\u64cd\u4f5c\uff0c\u6bd4\u5982\u68c0\u67e5\u7ebf\u7a0b\u662f\u5426\u5b8c\u6210\u4e86\u4efb\u52a1\u3002\u7136\u800c\u4f60\u53ef\u80fd\u4f1a\u9700\u8981\u5c06\u64cd\u4f5c\u7684\u7ed3\u679c\u4f20\u9012\u7ed9\u5176\u5b83\u7684\u4ee3\u7801\u3002\u5982\u679c\u5c06\u8fd4\u56de\u503c\u52a0\u5165\u4f60\u7528\u6765\u505c\u6b62\u5faa\u73af\u7684 break \u8868\u8fbe\u5f0f\uff0c\u5b83\u4f1a\u88ab\u505c\u6b62\u7684\u5faa\u73af\u8fd4\u56de\uff1a fn main () { // \u4e00\u4e2a\u540d\u4e3a counter \u7684\u53d8\u91cf\u5e76\u521d\u59cb\u5316\u4e3a 0 let mut counter = 0 ; // \u63a5\u7740\u58f0\u660e\u4e86\u4e00\u4e2a\u540d\u4e3a result \u6765\u5b58\u653e\u5faa\u73af\u7684\u8fd4\u56de\u503c\u3002 let result = loop { // \u5728\u5faa\u73af\u7684\u6bcf\u4e00\u6b21\u8fed\u4ee3\u4e2d\uff0c\u6211\u4eec\u5c06 counter \u53d8\u91cf\u52a0 1 counter += 1 ; // \u63a5\u7740\u68c0\u67e5\u8ba1\u6570\u662f\u5426\u7b49\u4e8e 10\u3002 if counter == 10 { // \u4f7f\u7528 break \u5173\u952e\u5b57\u8fd4\u56de\u503c counter * 2 break counter * 2 ; // \u901a\u8fc7\u5206\u53f7\u7ed3\u675f\u8d4b\u503c\u7ed9 result \u7684\u8bed\u53e5\u3002 } }; // \u6700\u540e\u6253\u5370\u51fa result \u7684\u503c\uff0c\u4e5f\u5c31\u662f 20\u3002 println! ( \"The result is {result}\" ); } \u5faa\u73af\u6807\u7b7e \u5982\u679c\u5b58\u5728\u5d4c\u5957\u5faa\u73af\uff0c break \u548c continue \u5e94\u7528\u4e8e\u6b64\u65f6\u6700\u5185\u5c42\u7684\u5faa\u73af\u3002\u4f60\u53ef\u4ee5\u9009\u62e9\u5728\u4e00\u4e2a\u5faa\u73af\u4e0a\u6307\u5b9a\u4e00\u4e2a \u5faa\u73af\u6807\u7b7e \uff08loop label\uff09\uff0c\u7136\u540e\u5c06\u6807\u7b7e\u4e0e break \u6216 continue \u4e00\u8d77\u4f7f\u7528\uff0c\u4f7f\u8fd9\u4e9b\u5173\u952e\u5b57\u5e94\u7528\u4e8e\u5df2\u6807\u8bb0\u7684\u5faa\u73af\u800c\u4e0d\u662f\u6700\u5185\u5c42\u7684\u5faa\u73af\u3002 fn main () { let mut count = 0 ; // \u5916\u5c42\u5faa\u73af\u6709\u4e00\u4e2a\u6807\u7b7e counting_up ' counting_up : loop { println! ( \"count = {count}\" ); let mut remaining = 10 ; // \u6ca1\u6709\u6807\u7b7e\u7684\u5185\u90e8\u5faa\u73af\u4ece 10 \u5411\u4e0b\u6570\u5230 9\u3002 loop { println! ( \"remaining = {remaining}\" ); if remaining == 9 { // \u6ca1\u6709\u6307\u5b9a\u6807\u7b7e\u7684 break \u5c06\u53ea\u9000\u51fa\u5185\u5c42\u5faa\u73af\u3002 break ; } if count == 2 { // break 'counting_up; \u8bed\u53e5\u5c06\u9000\u51fa\u5916\u5c42\u5faa\u73af\u3002 break 'counting_up ; } remaining -= 1 ; } count += 1 ; } println! ( \"End count = {count}\" ); } while \u5faa\u73af \u5f53\u6761\u4ef6\u4e3a\u771f\uff0c\u6267\u884c\u5faa\u73af\u3002\u5f53\u6761\u4ef6\u4e0d\u518d\u4e3a\u771f\uff0c\u8c03\u7528 break \u505c\u6b62\u5faa\u73af\u3002 \u6bd4\u5982\uff1a fn main () { let mut number = 3 ; // \u5f53\u6761\u4ef6\u4e3a\u771f\u65f6\uff0c\u4f7f\u7528 while \u5faa\u73af\u8fd0\u884c\u4ee3\u7801 // \u8fd9\u79cd\u7ed3\u6784\u6d88\u9664\u4e86\u5f88\u591a\u4f7f\u7528 loop\u3001if\u3001else \u548c break \u65f6\u6240\u5fc5\u987b\u7684\u5d4c\u5957\uff0c\u8fd9\u6837\u66f4\u52a0\u6e05\u6670\u3002 while number != 0 { println! ( \"{number}!\" ); number -= 1 ; } println! ( \"LIFTOFF!!!\" ); } for \u5faa\u73af \u53ef\u4ee5\u4f7f\u7528 for \u5faa\u73af\u6765\u5bf9\u4e00\u4e2a\u96c6\u5408\u7684\u6bcf\u4e2a\u5143\u7d20\u6267\u884c\u4e00\u4e9b\u4ee3\u7801\u3002 fn main () { let a = [ 10 , 20 , 30 , 40 , 50 ]; for element in a { println! ( \"the value is: {element}\" ); } } for \u5faa\u73af\u7684\u5b89\u5168\u6027\u548c\u7b80\u6d01\u6027\u4f7f\u5f97\u5b83\u6210\u4e3a Rust \u4e2d\u5728\u7528\u4e8e\u904d\u5386\u6570\u7ec4\u65f6\u662f\u4f7f\u7528\u6700\u591a\u7684\u5faa\u73af\u7ed3\u6784\u3002 \u53e6\u4e00\u4e2a\u4f8b\u5b50\uff1a fn main () { // \u904d\u5386\u6807\u51c6\u5e93\u63d0\u4f9b\u7684\u7c7b\u578bRange\u7c7b\u578b // \u7528\u6765\u751f\u6210\u4ece\u4e00\u4e2a\u6570\u5b57\u5f00\u59cb\u5230\u53e6\u4e00\u4e2a\u6570\u5b57\u4e4b\u524d\u7ed3\u675f\u7684\u6240\u6709\u6570\u5b57\u7684\u5e8f\u5217\u3002 // rev\uff0c\u7528\u6765\u53cd\u8f6c range for number in ( 1 .. 4 ). rev () { println! ( \"{number}!\" ); } println! ( \"LIFTOFF!!!\" ); }","title":"\u5e38\u89c1\u7f16\u7a0b\u6982\u5ff5"},{"location":"common-programing-concepts/#_1","text":"","title":"\u5e38\u89c1\u7f16\u7a0b\u6982\u5ff5"},{"location":"common-programing-concepts/#_2","text":"\u53d8\u91cf\u9ed8\u8ba4\u662f\u4e0d\u53ef\u6539\u53d8\u7684\uff08immutable\uff09\u3002 \u5f53\u53d8\u91cf\u4e0d\u53ef\u53d8\u65f6\uff0c\u4e00\u65e6\u503c\u88ab\u7ed1\u5b9a\u4e00\u4e2a\u540d\u79f0\u4e0a\uff0c\u4f60\u5c31\u4e0d\u80fd\u6539\u53d8\u8fd9\u4e2a\u503c\u3002 \u6587\u4ef6\u540d: src/main.rs fn main () { let x = 5 ; println! ( \"The value of x is: {x}\" ); x = 6 ; // \u9519\u8bef, \u4e0d\u80fd\u5bf9\u4e0d\u53ef\u53d8\u53d8\u91cf x \u4e8c\u6b21\u8d4b\u503c\uff08cannot assign twice to immutable variable `x` \uff09 println! ( \"The value of x is: {x}\" ); } \u4e0d\u8fc7\u53ef\u53d8\u6027\u4e5f\u662f\u975e\u5e38\u6709\u7528\u7684\uff0c\u53ef\u4ee5\u7528\u6765\u66f4\u65b9\u4fbf\u5730\u7f16\u5199\u4ee3\u7801\u3002\u5c3d\u7ba1\u53d8\u91cf\u9ed8\u8ba4\u662f\u4e0d\u53ef\u53d8\u7684\uff0c\u4f60\u4ecd\u7136\u53ef\u4ee5\u5728\u53d8\u91cf\u540d\u524d\u6dfb\u52a0 mut \u6765\u4f7f\u5176\u53ef\u53d8: fn main () { let mut x = 5 ; // \u6dfb\u52a0mut\uff0c\u4f7f\u5176\u53ef\u53d8\u3002\uff08\u8fdb\u884c\u591a\u6b21\u8d4b\u503c\uff09 println! ( \"The value of x is: {x}\" ); x = 6 ; println! ( \"The value of x is: {x}\" ); }","title":"\u53d8\u91cf\u548c\u53ef\u53d8\u6027"},{"location":"common-programing-concepts/#_3","text":"\u7c7b\u4f3c\u4e8e\u4e0d\u53ef\u53d8\u53d8\u91cf\uff0c\u5e38\u91cf(constants) \u662f\u7ed1\u5b9a\u5230\u4e00\u4e2a\u540d\u79f0\u7684\u4e0d\u5141\u8bb8\u6539\u53d8\u7684\u503c\uff0c\u4e0d\u8fc7\u5e38\u91cf\u4e0e\u53d8\u91cf\u8fd8\u662f\u6709\u4e00\u4e9b\u533a\u522b\u3002 \u4e0d\u5141\u8bb8\u5bf9\u5e38\u91cf\u4f7f\u7528 mut\u3002\u5e38\u91cf\u4e0d\u5149\u9ed8\u8ba4\u4e0d\u80fd\u53d8\uff0c\u5b83\u603b\u662f\u4e0d\u80fd\u53d8\u3002 \u5e38\u91cf\u4f7f\u7528 const \u5173\u952e\u5b57\u800c\u4e0d\u662f let \uff0c\u5e76\u4e14 \u5fc5\u987b \u6ce8\u660e\u503c\u7684\u7c7b\u578b\u3002 \u5e38\u91cf\u53ef\u4ee5\u5728\u4efb\u4f55\u4f5c\u7528\u57df\u4e2d\u58f0\u660e\uff0c\u5305\u62ec\u5168\u5c40\u4f5c\u7528\u57df\uff0c\u8fd9\u5728\u4e00\u4e2a\u503c\u9700\u8981\u88ab\u5f88\u591a\u90e8\u5206\u7684\u4ee3\u7801\u7528\u5230\u65f6\u5f88\u6709\u7528\u3002 \u5e38\u91cf\u53ea\u80fd\u88ab\u8bbe\u7f6e\u4e3a\u5e38\u91cf\u8868\u8fbe\u5f0f\uff0c\u800c\u4e0d\u53ef\u4ee5\u662f\u5176\u4ed6\u4efb\u4f55\u53ea\u80fd\u5728\u8fd0\u884c\u65f6\u8ba1\u7b97\u51fa\u7684\u503c\u3002 \u4f8b\u5982\uff1a const THREE_HOURS_IN_SECONDS : u32 = 60 * 60 * 3 ; Rust \u5bf9\u5e38\u91cf\u7684\u547d\u540d\u7ea6\u5b9a\u662f\u5728\u5355\u8bcd\u4e4b\u95f4\u4f7f\u7528\u5168\u5927\u5199\u52a0\u4e0b\u5212\u7ebf \u6709\u5173\u58f0\u660e\u5e38\u91cf\u65f6\u53ef\u4ee5\u4f7f\u7528\u54ea\u4e9b\u64cd\u4f5c\u7684\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605 Rust Reference \u7684\u5e38\u91cf\u6c42\u503c\u90e8\u5206 \u3002","title":"\u5e38\u91cf"},{"location":"common-programing-concepts/#_4","text":"\u53ef\u4ee5\u5b9a\u4e49\u4e00\u4e2a\u4e0e\u4e4b\u524d\u53d8\u91cf\u540c\u540d\u7684\u65b0\u53d8\u91cf\u3002\u79f0\u4e4b\u4e3a\u7b2c\u4e00\u4e2a\u53d8\u91cf\u88ab\u7b2c\u4e8c\u4e2a \u9690\u85cf \uff08Shadowing\uff09\u4e86, \u8fd9\u610f\u5473\u7740\u5728\u4f7f\u7528\u53d8\u91cf\u7684\u540d\u79f0\u65f6\uff0c\u7f16\u8bd1\u5668\u5c06\u770b\u5230\u7b2c\u4e8c\u4e2a\u53d8\u91cf\u3002 \u5b9e\u9645\u4e0a\uff0c\u7b2c\u4e8c\u4e2a\u53d8\u91cf\u201c\u906e\u853d\u201d\u4e86\u7b2c\u4e00\u4e2a\u53d8\u91cf\uff0c\u6b64\u65f6\u4efb\u4f55\u4f7f\u7528\u8be5\u53d8\u91cf\u540d\u7684\u884c\u4e3a\u4e2d\u90fd\u4f1a\u89c6\u4e3a\u662f\u5728\u4f7f\u7528\u7b2c\u4e8c\u4e2a\u53d8\u91cf\uff0c\u76f4\u5230\u7b2c\u4e8c\u4e2a\u53d8\u91cf\u81ea\u5df1\u4e5f\u88ab\u9690\u85cf\u6216\u7b2c\u4e8c\u4e2a\u53d8\u91cf\u7684\u4f5c\u7528\u57df\u7ed3\u675f\u3002 \u53ef\u4ee5\u7528\u76f8\u540c\u53d8\u91cf\u540d\u79f0\u6765\u9690\u85cf\u4e00\u4e2a\u53d8\u91cf\uff0c\u4ee5\u53ca\u91cd\u590d\u4f7f\u7528 let \u5173\u952e\u5b57\u6765\u591a\u6b21\u9690\u85cf\uff0c\u5982\u4e0b\u6240\u793a\uff1a fn main () { let x = 5 ; // \u9996\u5148\u5c06 x \u7ed1\u5b9a\u5230\u503c 5 \u4e0a let x = x + 1 ; // \u63a5\u7740\u901a\u8fc7 let x = \u521b\u5efa\u4e86\u4e00\u4e2a\u65b0\u53d8\u91cf x\uff0c\u83b7\u53d6\u521d\u59cb\u503c\u5e76\u52a0 1\uff0c\u8fd9\u6837 x \u7684\u503c\u5c31\u53d8\u6210 6 \u4e86 { // \u7136\u540e\uff0c\u5728\u4f7f\u7528\u82b1\u62ec\u53f7\u521b\u5efa\u7684\u5185\u90e8\u4f5c\u7528\u57df\u5185 let x = x * 2 ; // \u7b2c\u4e09\u4e2a let \u8bed\u53e5\u4e5f\u9690\u85cf\u4e86 x \u5e76\u521b\u5efa\u4e86\u4e00\u4e2a\u65b0\u7684\u53d8\u91cf\uff0c\u5c06\u4e4b\u524d\u7684\u503c\u4e58\u4ee5 2\uff0cx \u5f97\u5230\u7684\u503c\u662f 12 println! ( \"The value of x in the inner scope is: {x}\" ); } // \u5f53\u8be5\u4f5c\u7528\u57df\u7ed3\u675f\u65f6\uff0c\u5185\u90e8 shadowing \u7684\u4f5c\u7528\u57df\u4e5f\u7ed3\u675f\u4e86\uff0cx \u53c8\u8fd4\u56de\u5230 6 println! ( \"The value of x is: {x}\" ); } \u9690\u85cf\u4e0e\u5c06\u53d8\u91cf\u6807\u8bb0\u4e3a mut \u662f\u6709\u533a\u522b\u7684\u3002\u5f53\u4e0d\u5c0f\u5fc3\u5c1d\u8bd5\u5bf9\u53d8\u91cf\u91cd\u65b0\u8d4b\u503c\u65f6\uff0c\u5982\u679c\u6ca1\u6709\u4f7f\u7528 let \u5173\u952e\u5b57\uff0c\u5c31\u4f1a\u5bfc\u81f4\u7f16\u8bd1\u65f6\u9519\u8bef\u3002 \u901a\u8fc7\u4f7f\u7528 let\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u8fd9\u4e2a\u503c\u8fdb\u884c\u4e00\u4e9b\u8ba1\u7b97\uff0c\u4e0d\u8fc7\u8ba1\u7b97\u5b8c\u4e4b\u540e\u53d8\u91cf\u4ecd\u7136\u662f\u4e0d\u53ef\u53d8\u7684\u3002 mut \u4e0e\u9690\u85cf\u7684\u53e6\u4e00\u4e2a\u533a\u522b\u662f\uff0c\u5f53\u518d\u6b21\u4f7f\u7528 let \u65f6\uff0c\u5b9e\u9645\u4e0a\u521b\u5efa\u4e86\u4e00\u4e2a\u65b0\u53d8\u91cf\uff0c\u6211\u4eec\u53ef\u4ee5\u6539\u53d8\u503c\u7684\u7c7b\u578b\uff0c\u5e76\u4e14\u590d\u7528\u8fd9\u4e2a\u540d\u5b57\u3002 \u4f8b\u5982\uff0c\u5047\u8bbe\u7a0b\u5e8f\u8bf7\u6c42\u7528\u6237\u8f93\u5165\u7a7a\u683c\u5b57\u7b26\u6765\u8bf4\u660e\u5e0c\u671b\u5728\u6587\u672c\u4e4b\u95f4\u663e\u793a\u591a\u5c11\u4e2a\u7a7a\u683c\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u60f3\u5c06\u8f93\u5165\u5b58\u50a8\u6210\u6570\u5b57\uff08\u591a\u5c11\u4e2a\u7a7a\u683c\uff09\uff1a let spaces = \" \" ; // \u7b2c\u4e00\u4e2a spaces \u53d8\u91cf\u662f\u5b57\u7b26\u4e32\u7c7b\u578b let spaces = spaces . len (); // \u7b2c\u4e8c\u4e2a spaces \u53d8\u91cf\u662f\u6570\u5b57\u7c7b\u578b \u9690\u85cf\u4f7f\u6211\u4eec\u4e0d\u5fc5\u4f7f\u7528\u4e0d\u540c\u7684\u540d\u5b57\uff0c\u5982 spaces_str \u548c spaces_num\uff1b \u76f8\u53cd\uff0c\u6211\u4eec\u53ef\u4ee5\u590d\u7528 spaces \u8fd9\u4e2a\u66f4\u7b80\u5355\u7684\u540d\u5b57\u3002\u7136\u800c\uff0c\u5982\u679c\u5c1d\u8bd5\u4f7f\u7528 mut \uff0c\u5c06\u4f1a\u5f97\u5230\u4e00\u4e2a\u7f16\u8bd1\u65f6\u9519\u8bef\uff0c\u5982\u4e0b\u6240\u793a\uff1a let mut spaces = \" \" ; // string\u7c7b\u578b spaces = spaces . len (); // int \u7c7b\u578b \u9519\u8bef\u63d0\u793a: $ cargo run Compiling variables v0 . 1.0 ( file : ///projects/variables) error [ E0308 ] : mismatched types - -> src / main . rs : 3 : 14 | 2 | let mut spaces = \" \" ; | ----- expected due to this value 3 | spaces = spaces . len (); | ^^^^^^^^^^^^ expected ` & str ` , found ` usize ` For more information about this error , try ` rustc -- explain E0308 ` . error : could not compile ` variables ` due to previous error \u4e0d\u80fd\u6539\u53d8\u53d8\u91cf\u7684\u7c7b\u578b","title":"\u9690\u85cf"},{"location":"common-programing-concepts/#_5","text":"\u5728 Rust \u4e2d\uff0c\u6bcf\u4e00\u4e2a\u503c\u90fd\u5c5e\u4e8e\u67d0\u4e00\u4e2a \u6570\u636e\u7c7b\u578b\uff08data type\uff09\uff0c\u8fd9\u544a\u8bc9 Rust \u5b83\u88ab\u6307\u5b9a\u4e3a\u4f55\u79cd\u6570\u636e\uff0c\u4ee5\u4fbf\u660e\u786e\u6570\u636e\u5904\u7406\u65b9\u5f0f\u3002 \u6211\u4eec\u5c06\u770b\u5230\u4e24\u7c7b\u6570\u636e\u7c7b\u578b\u5b50\u96c6\uff1a \u6807\u91cf \uff08scalar\uff09\u548c \u590d\u5408 \uff08compound\uff09\u3002 Rust \u662f \u9759\u6001\u7c7b\u578b\uff08statically typed\uff09\u8bed\u8a00\uff0c\u4e5f\u5c31\u662f\u8bf4\u5728\u7f16\u8bd1\u65f6\u5c31\u5fc5\u987b\u77e5\u9053\u6240\u6709\u53d8\u91cf\u7684\u7c7b\u578b\u3002 \u4f7f\u7528 parse \u5c06 String \u8f6c\u6362\u4e3a\u6570\u5b57\u65f6\uff0c\u5fc5\u987b\u589e\u52a0\u7c7b\u578b\u6ce8\u89e3\uff0c\u50cf\u8fd9\u6837\uff1a let guess : u32 = \"42\" . parse (). expect ( \"Not a number!\" ); \u5982\u679c\u4e0d\u50cf\u4e0a\u9762\u8fd9\u6837\u6dfb\u52a0\u7c7b\u578b\u6ce8\u89e3 : u32\uff0cRust \u4f1a\u663e\u793a\u5982\u4e0b\u9519\u8bef\uff0c\u8fd9\u8bf4\u660e\u7f16\u8bd1\u5668\u9700\u8981\u6211\u4eec\u63d0\u4f9b\u66f4\u591a\u4fe1\u606f\uff0c\u6765\u4e86\u89e3\u6211\u4eec\u60f3\u8981\u7684\u7c7b\u578b\uff1a $ cargo build Compiling no_type_annotations v0.1.0 ( file:///projects/no_type_annotations ) error [ E0282 ] : type annotations needed --> src/main.rs:2:9 | 2 | let guess = \"42\" .parse () .expect ( \"Not a number!\" ) ; | ^^^^^ consider giving ` guess ` a type For more information about this error, try ` rustc --explain E0282 ` . error: could not compile ` no_type_annotations ` due to previous error","title":"\u6570\u636e\u7c7b\u578b"},{"location":"common-programing-concepts/#_6","text":"\u6807\u91cf \uff08scalar\uff09\u7c7b\u578b\u4ee3\u8868\u4e00\u4e2a\u5355\u72ec\u7684\u503c\u3002Rust \u6709\u56db\u79cd\u57fa\u672c\u7684\u6807\u91cf\u7c7b\u578b\uff1a \u6574\u578b \u3001 \u6d6e\u70b9\u578b \u3001 \u5e03\u5c14\u7c7b\u578b \u548c \u5b57\u7b26\u7c7b\u578b \u3002","title":"\u6807\u91cf\u7c7b\u578b"},{"location":"common-programing-concepts/#_7","text":"\u6574\u6570 \u662f\u4e00\u4e2a\u6ca1\u6709\u5c0f\u6570\u90e8\u5206\u7684\u6570\u5b57\u3002 \u957f\u5ea6 \u6709\u7b26\u53f7 \u65e0\u7b26\u53f7 8-bit i8 u8 16-bit i16 u16 32-bit i32 u32 64-bit i64 u64 128-bit i128 u128 arch isize usize isize \u548c usize \u7c7b\u578b\u4f9d\u8d56\u8fd0\u884c\u7a0b\u5e8f\u7684\u8ba1\u7b97\u673a\u67b6\u6784\uff1a64 \u4f4d\u67b6\u6784\u4e0a\u5b83\u4eec\u662f 64 \u4f4d\u7684\uff0c 32 \u4f4d\u67b6\u6784\u4e0a\u5b83\u4eec\u662f 32 \u4f4d\u7684\u3002 \u53ef\u4ee5\u4f7f\u7528\u4e0b\u9762\u8868\u683c\u4e2d\u7684\u4efb\u4f55\u4e00\u79cd\u5f62\u5f0f\u7f16\u5199\u6570\u5b57\u5b57\u9762\u503c\u3002 \u8bf7\u6ce8\u610f\u53ef\u4ee5\u662f\u591a\u79cd\u6570\u5b57\u7c7b\u578b\u7684\u6570\u5b57\u5b57\u9762\u503c\u5141\u8bb8\u4f7f\u7528\u7c7b\u578b\u540e\u7f00\uff0c\u4f8b\u5982 57u8 \u6765\u6307\u5b9a\u7c7b\u578b\uff0c\u540c\u65f6\u4e5f\u5141\u8bb8\u4f7f\u7528 _ \u505a\u4e3a\u5206\u9694\u7b26\u4ee5\u65b9\u4fbf\u8bfb\u6570\uff0c\u4f8b\u5982 1_000 \uff0c\u5b83\u7684\u503c\u4e0e\u4f60\u6307\u5b9a\u7684 1000 \u76f8\u540c\u3002 \u6570\u5b57\u5b57\u9762\u503c \u4f8b\u5b50 Decimal (\u5341\u8fdb\u5236) 98_222 Hex (\u5341\u516d\u8fdb\u5236) 0xff Octal (\u516b\u8fdb\u5236) 0o77 Binary (\u4e8c\u8fdb\u5236) 0b1111_0000 Byte (\u5355\u5b57\u8282\u5b57\u7b26)(\u4ec5\u9650\u4e8eu8) b'A' Rust \u7684\u9ed8\u8ba4\u7c7b\u578b\u901a\u5e38\u662f\u4e2a\u4e0d\u9519\u7684\u8d77\u70b9\uff0c\u6570\u5b57\u7c7b\u578b\u9ed8\u8ba4\u662f i32 \u3002 isize \u6216 usize \u4e3b\u8981\u4f5c\u4e3a\u67d0\u4e9b\u96c6\u5408\u7684\u7d22\u5f15\u3002 \u5176\u4ed6 \u53c2\u8003: \u6574\u5f62\u6ea2\u51fa","title":"\u6574\u578b"},{"location":"common-programing-concepts/#_8","text":"Rust \u4e5f\u6709\u4e24\u4e2a\u539f\u751f\u7684 \u6d6e\u70b9\u6570\uff08floating-point numbers\uff09\u7c7b\u578b\uff0c\u5b83\u4eec\u662f\u5e26\u5c0f\u6570\u70b9\u7684\u6570\u5b57\u3002Rust \u7684\u6d6e\u70b9\u6570\u7c7b\u578b\u662f f32 \u548c f64\uff0c\u5206\u522b\u5360 32 \u4f4d\u548c 64 \u4f4d\u3002\u9ed8\u8ba4\u7c7b\u578b\u662f f64\uff0c\u56e0\u4e3a\u5728\u73b0\u4ee3 CPU \u4e2d\uff0c\u5b83\u4e0e f32 \u901f\u5ea6\u51e0\u4e4e\u4e00\u6837\uff0c\u4e0d\u8fc7\u7cbe\u5ea6\u66f4\u9ad8\u3002\u6240\u6709\u7684\u6d6e\u70b9\u578b\u90fd\u662f\u6709\u7b26\u53f7\u7684\u3002 \u8fd9\u662f\u4e00\u4e2a\u5c55\u793a\u6d6e\u70b9\u6570\u7684\u5b9e\u4f8b\uff1a \u6587\u4ef6\u540d: src/main.rs fn main () { let x = 2.0 ; // f64 let y : f32 = 3.0 ; // f32 } \u6d6e\u70b9\u6570\u91c7\u7528 IEEE-754 \u6807\u51c6\u8868\u793a\u3002f32 \u662f\u5355\u7cbe\u5ea6\u6d6e\u70b9\u6570\uff0cf64 \u662f\u53cc\u7cbe\u5ea6\u6d6e\u70b9\u6570\u3002","title":"\u6d6e\u70b9\u578b"},{"location":"common-programing-concepts/#_9","text":"Rust \u4e2d\u7684\u6240\u6709\u6570\u5b57\u7c7b\u578b\u90fd\u652f\u6301\u57fa\u672c\u6570\u5b66\u8fd0\u7b97\uff1a\u52a0\u6cd5\u3001\u51cf\u6cd5\u3001\u4e58\u6cd5\u3001\u9664\u6cd5\u548c\u53d6\u4f59\u3002\u6574\u6570\u9664\u6cd5\u4f1a\u5411\u4e0b\u820d\u5165\u5230\u6700\u63a5\u8fd1\u7684\u6574\u6570\u3002\u4e0b\u9762\u7684\u4ee3\u7801\u5c55\u793a\u4e86\u5982\u4f55\u5728 let \u8bed\u53e5\u4e2d\u4f7f\u7528\u5b83\u4eec\uff1a \u6587\u4ef6\u540d: src/main.rs fn main () { // \u52a0\u6cd5 let sum = 5 + 10 ; // \u51cf\u6cd5 let difference = 95.5 - 4.3 ; // \u4e58\u6cd5 let product = 4 * 30 ; // \u9664\u6cd5 let quotient = 56.7 / 32.2 ; let floored = 2 / 3 ; // \u7ed3\u679c\u4e3a0 // \u53d6\u4f59 let remainder = 43 % 5 ; } \u8fd9\u4e9b\u8bed\u53e5\u4e2d\u7684\u6bcf\u4e2a\u8868\u8fbe\u5f0f\u4f7f\u7528\u4e86\u4e00\u4e2a\u6570\u5b66\u8fd0\u7b97\u7b26\u5e76\u8ba1\u7b97\u51fa\u4e86\u4e00\u4e2a\u503c\uff0c\u7136\u540e\u7ed1\u5b9a\u7ed9\u4e00\u4e2a\u53d8\u91cf\u3002 \u9644\u5f55 B \u5305\u542b Rust \u63d0\u4f9b\u7684\u6240\u6709\u8fd0\u7b97\u7b26\u7684\u5217\u8868\u3002","title":"\u6570\u503c\u8fd0\u7b97"},{"location":"common-programing-concepts/#_10","text":"\u6b63\u5982\u5176\u4ed6\u5927\u90e8\u5206\u7f16\u7a0b\u8bed\u8a00\u4e00\u6837\uff0cRust \u4e2d\u7684\u5e03\u5c14\u7c7b\u578b\u6709\u4e24\u4e2a\u53ef\u80fd\u7684\u503c\uff1atrue \u548c false\u3002Rust \u4e2d\u7684\u5e03\u5c14\u7c7b\u578b\u4f7f\u7528 bool \u8868\u793a\u3002\u4f8b\u5982\uff1a fn main () { let t = true ; let f : bool = false ; // with explicit type annotation }","title":"\u5e03\u5c14\u578b"},{"location":"common-programing-concepts/#_11","text":"Rust\u7684 char \u7c7b\u578b\u662f\u8bed\u8a00\u4e2d\u6700\u539f\u751f\u7684\u5b57\u6bcd\u7c7b\u578b\u3002\u4e0b\u9762\u662f\u4e00\u4e9b\u58f0\u660e char \u503c\u7684\u4f8b\u5b50\uff1a \u6587\u4ef6\u540d: src/main.rs fn main () { let c = 'z' ; let z : char = '\u2124' ; // with explicit type annotation let heart_eyed_cat = '\ud83d\ude3b' ; } \u6ce8\u610f\uff0c\u8fd9\u91cc\u7528\u5355\u5f15\u53f7\u58f0\u660e char \u5b57\u9762\u91cf\uff0c\u800c\u4e0e\u4e4b\u76f8\u53cd\u7684\u662f\uff0c\u4f7f\u7528 \u53cc\u5f15\u53f7 \u58f0\u660e\u5b57\u7b26\u4e32\u5b57\u9762\u91cf\u3002Rust \u7684 char \u7c7b\u578b\u7684\u5927\u5c0f\u4e3a\u56db\u4e2a\u5b57\u8282(four bytes)\uff0c\u5e76\u4ee3\u8868\u4e86\u4e00\u4e2a Unicode \u6807\u91cf\u503c\uff08Unicode Scalar Value\uff09\uff0c\u8fd9\u610f\u5473\u7740\u5b83\u53ef\u4ee5\u6bd4 ASCII \u8868\u793a\u66f4\u591a\u5185\u5bb9\u3002 \u5728 Rust \u4e2d\uff0c\u5e26\u53d8\u97f3\u7b26\u53f7\u7684\u5b57\u6bcd\uff08Accented letters\uff09\uff0c\u4e2d\u6587\u3001\u65e5\u6587\u3001\u97e9\u6587\u7b49\u5b57\u7b26\uff0cemoji\uff08\u7ed8\u6587\u5b57\uff09\u4ee5\u53ca\u96f6\u957f\u5ea6\u7684\u7a7a\u767d\u5b57\u7b26\u90fd\u662f\u6709\u6548\u7684 char \u503c\u3002 Unicode \u6807\u91cf\u503c\u5305\u542b\u4ece U+0000 \u5230 U+D7FF \u548c U+E000 \u5230 U+10FFFF \u5728\u5185\u7684\u503c \u3002 \u4e0d\u8fc7\uff0c\u201c\u5b57\u7b26\u201d \u5e76\u4e0d\u662f\u4e00\u4e2a Unicode \u4e2d\u7684\u6982\u5ff5\uff0c\u6240\u4ee5\u4eba\u76f4\u89c9\u4e0a\u7684 \u201c\u5b57\u7b26\u201d \u53ef\u80fd\u4e0e Rust \u4e2d\u7684 char \u5e76\u4e0d\u7b26\u5408\u3002 \u7b2c\u516b\u7ae0\u7684 \u201c \u4f7f\u7528\u5b57\u7b26\u4e32\u5b58\u50a8 UTF-8 \u7f16\u7801\u7684\u6587\u672c \u201d \u4e2d\u5c06\u8be6\u7ec6\u8ba8\u8bba\u8fd9\u4e2a\u4e3b\u9898\u3002","title":"\u5b57\u7b26\u7c7b\u578b"},{"location":"common-programing-concepts/#_12","text":"\u590d\u5408\u7c7b\u578b \uff08Compound types\uff09\u53ef\u4ee5\u5c06\u591a\u4e2a\u503c\u7ec4\u5408\u6210\u4e00\u4e2a\u7c7b\u578b\u3002Rust \u6709\u4e24\u4e2a\u539f\u751f\u7684\u590d\u5408\u7c7b\u578b\uff1a \u5143\u7ec4 \uff08tuple\uff09\u548c \u6570\u7ec4 \uff08array\uff09\u3002","title":"\u590d\u5408\u7c7b\u578b"},{"location":"common-programing-concepts/#_13","text":"\u5143\u7ec4\u662f\u4e00\u4e2a\u5c06\u591a\u4e2a\u5176\u4ed6\u7c7b\u578b\u7684\u503c\u7ec4\u5408\u8fdb\u4e00\u4e2a\u590d\u5408\u7c7b\u578b\u7684\u4e3b\u8981\u65b9\u5f0f\u3002 \u5143\u7ec4\u957f\u5ea6\u56fa\u5b9a\uff1a\u4e00\u65e6\u58f0\u660e\uff0c\u5176\u957f\u5ea6\u4e0d\u4f1a\u589e\u5927\u6216\u7f29\u5c0f\u3002 \u4f7f\u7528\u5305\u542b\u5728\u5706\u62ec\u53f7\u4e2d\u7684\u9017\u53f7\u5206\u9694\u7684\u503c\u5217\u8868\u6765\u521b\u5efa\u4e00\u4e2a\u5143\u7ec4\u3002 \u5143\u7ec4\u4e2d\u7684\u6bcf\u4e00\u4e2a\u4f4d\u7f6e\u90fd\u6709\u4e00\u4e2a\u7c7b\u578b\uff0c\u800c\u4e14\u8fd9\u4e9b\u4e0d\u540c\u503c\u7684\u7c7b\u578b\u4e5f\u4e0d\u5fc5\u662f\u76f8\u540c\u7684\u3002\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\u4f7f\u7528\u4e86\u53ef\u9009\u7684\u7c7b\u578b\u6ce8\u89e3\uff1a fn main () { let tup : ( i32 , f64 , u8 ) = ( 500 , 6.4 , 1 ); } tup \u53d8\u91cf\u7ed1\u5b9a\u5230\u6574\u4e2a\u5143\u7ec4\u4e0a\uff0c\u56e0\u4e3a\u5143\u7ec4\u662f\u4e00\u4e2a\u5355\u72ec\u7684\u590d\u5408\u5143\u7d20\u3002 \u4e3a\u4e86\u4ece\u5143\u7ec4\u4e2d\u83b7\u53d6\u5355\u4e2a\u503c\uff0c\u53ef\u4ee5\u4f7f\u7528 \u6a21\u5f0f\u5339\u914d \uff08pattern matching\uff09\u6765 \u89e3\u6784 \uff08destructure\uff09\u5143\u7ec4\u503c\uff0c\u50cf\u8fd9\u6837\uff1a fn main () { let tup = ( 500 , 6.4 , 1 ); // \u7a0b\u5e8f\u9996\u5148\u521b\u5efa\u4e86\u4e00\u4e2a\u5143\u7ec4\u5e76\u7ed1\u5b9a\u5230 tup \u53d8\u91cf\u4e0a let ( x , y , z ) = tup ; // \u63a5\u7740\u4f7f\u7528\u4e86 let \u548c\u4e00\u4e2a\u6a21\u5f0f\u5c06 tup \u5206\u6210\u4e86\u4e09\u4e2a\u4e0d\u540c\u7684\u53d8\u91cf\uff0cx\u3001y \u548c z\u3002 // \u8fd9\u53eb\u505a \u89e3\u6784\uff08destructuring\uff09\u56e0\u4e3a\u5b83\u5c06\u4e00\u4e2a\u5143\u7ec4\u62c6\u6210\u4e86\u4e09\u4e2a\u90e8\u5206\u3002 println! ( \"The value of y is: {y}\" ); // \u6700\u540e\uff0c\u7a0b\u5e8f\u6253\u5370\u51fa\u4e86 y \u7684\u503c\uff0c\u4e5f\u5c31\u662f 6.4\u3002 } \u4e5f\u53ef\u4ee5\u4f7f\u7528\u70b9\u53f7\uff08.\uff09\u540e\u8ddf\u503c\u7684\u7d22\u5f15\u6765\u76f4\u63a5\u8bbf\u95ee\u5b83\u4eec\u3002\u4f8b\u5982\uff1a \u6587\u4ef6\u540d: src/main.rs fn main () { let x : ( i32 , f64 , u8 ) = ( 500 , 6.4 , 1 ); let five_hundred = x . 0 ; let six_point_four = x . 1 ; let one = x . 2 ; } \u4e0d\u5e26\u4efb\u4f55\u503c\u7684\u5143\u7ec4\u6709\u4e2a\u7279\u6b8a\u7684\u540d\u79f0\uff0c\u53eb\u505a \u5355\u5143 \uff08unit\uff09 \u5143\u7ec4\u3002\u8fd9\u79cd\u503c\u4ee5\u53ca\u5bf9\u5e94\u7684\u7c7b\u578b\u90fd\u5199\u4f5c () \uff0c \u8868\u793a\u7a7a\u503c\u6216\u7a7a\u7684\u8fd4\u56de\u7c7b\u578b \u3002\u5982\u679c\u8868\u8fbe\u5f0f\u4e0d\u8fd4\u56de\u4efb\u4f55\u5176\u4ed6\u503c\uff0c\u5219\u4f1a\u9690\u5f0f\u8fd4\u56de\u5355\u5143\u503c\u3002","title":"\u5143\u7ec4\u7c7b\u578b"},{"location":"common-programing-concepts/#_14","text":"\u53e6\u4e00\u4e2a\u5305\u542b\u591a\u4e2a\u503c\u7684\u65b9\u5f0f\u662f \u6570\u7ec4 \uff08array\uff09\u3002\u4e0e\u5143\u7ec4\u4e0d\u540c\uff0c \u6570\u7ec4\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u7684\u7c7b\u578b\u5fc5\u987b\u76f8\u540c \u3002Rust \u4e2d\u7684\u6570\u7ec4\u4e0e\u4e00\u4e9b\u5176\u4ed6\u8bed\u8a00\u4e2d\u7684\u6570\u7ec4\u4e0d\u540c\uff0c Rust\u4e2d\u7684\u6570\u7ec4\u957f\u5ea6\u662f\u56fa\u5b9a\u7684 \u3002 \u5c06\u6570\u7ec4\u7684\u503c\u5199\u6210\u5728\u65b9\u62ec\u53f7\u5185\uff0c\u7528\u9017\u53f7\u5206\u9694\uff1a fn main () { let a = [ 1 , 2 , 3 , 4 , 5 ]; } \u5f53\u4f60\u60f3\u8981\u5728 \u6808 \uff08stack\uff09\u800c\u4e0d\u662f\u5728 \u5806 \uff08heap\uff09\u4e0a\u4e3a\u6570\u636e\u5206\u914d\u7a7a\u95f4\uff0c\u6216\u8005\u662f\u60f3\u8981\u786e\u4fdd\u603b\u662f\u6709\u56fa\u5b9a\u6570\u91cf\u7684\u5143\u7d20\u65f6\uff0c\u6570\u7ec4\u975e\u5e38\u6709\u7528\u3002 \u4f46\u662f\u6570\u7ec4\u5e76\u4e0d\u5982 vector \u7c7b\u578b\u7075\u6d3b\u3002 vector \u7c7b\u578b\u662f\u6807\u51c6\u5e93\u63d0\u4f9b\u7684\u4e00\u4e2a \u5141\u8bb8 \u589e\u957f\u548c\u7f29\u5c0f\u957f\u5ea6\u7684\u7c7b\u4f3c\u6570\u7ec4\u7684\u96c6\u5408\u7c7b\u578b\u3002 \u5f53\u4e0d\u786e\u5b9a\u662f\u5e94\u8be5\u4f7f\u7528\u6570\u7ec4\u8fd8\u662f vector \u7684\u65f6\u5019\uff0c\u90a3\u4e48\u5f88\u53ef\u80fd\u5e94\u8be5\u4f7f\u7528 vector \u3002 \u7b2c\u516b\u7ae0 \u4f1a\u8be6\u7ec6\u8ba8\u8bba vector \u3002 \u7136\u800c\uff0c\u5f53\u4f60\u786e\u5b9a\u5143\u7d20\u4e2a\u6570\u4e0d\u4f1a\u6539\u53d8\u65f6\uff0c\u6570\u7ec4\u4f1a\u66f4\u6709\u7528\u3002\u4f8b\u5982\uff0c\u5f53\u4f60\u5728\u4e00\u4e2a\u7a0b\u5e8f\u4e2d\u4f7f\u7528\u6708\u4efd\u540d\u5b57\u65f6\uff0c\u4f60\u66f4\u5e94\u8d8b\u5411\u4e8e\u4f7f\u7528\u6570\u7ec4\u800c\u4e0d\u662f vector\uff0c\u56e0\u4e3a\u4f60\u786e\u5b9a\u53ea\u4f1a\u670912\u4e2a\u5143\u7d20\u3002 let months = [ \"January\" , \"February\" , \"March\" , \"April\" , \"May\" , \"June\" , \"July\" , \"August\" , \"September\" , \"October\" , \"November\" , \"December\" ]; \u53ef\u4ee5\u50cf\u8fd9\u6837\u7f16\u5199\u6570\u7ec4\u7684\u7c7b\u578b\uff1a\u5728\u65b9\u62ec\u53f7\u4e2d\u5305\u542b\u6bcf\u4e2a\u5143\u7d20\u7684\u7c7b\u578b\uff0c\u540e\u8ddf\u5206\u53f7\uff0c\u518d\u540e\u8ddf\u6570\u7ec4\u5143\u7d20\u7684\u6570\u91cf\u3002 let a : [ i32 ; 5 ] = [ 1 , 2 , 3 , 4 , 5 ]; // i32 \u662f\u6bcf\u4e2a\u5143\u7d20\u7684\u7c7b\u578b\u3002\u5206\u53f7\u4e4b\u540e\uff0c\u6570\u5b57 5 \u8868\u660e\u8be5\u6570\u7ec4\u5305\u542b\u4e94\u4e2a\u5143\u7d20\u3002 let a = [ 3 ; 5 ]; // \u901a\u8fc7\u5728\u65b9\u62ec\u53f7\u4e2d\u6307\u5b9a\u521d\u59cb\u503c\u52a0\u5206\u53f7\u518d\u52a0\u5143\u7d20\u4e2a\u6570\u7684\u65b9\u5f0f\u6765\u521b\u5efa\u4e00\u4e2a\u6bcf\u4e2a\u5143\u7d20\u90fd\u4e3a\u76f8\u540c\u503c\u7684\u6570\u7ec4\uff1a // \u53d8\u91cf\u540d\u4e3a a \u7684\u6570\u7ec4\u5c06\u5305\u542b 5 \u4e2a\u5143\u7d20\uff0c\u8fd9\u4e9b\u5143\u7d20\u7684\u503c\u6700\u521d\u90fd\u5c06\u88ab\u8bbe\u7f6e\u4e3a 3\u3002 // \u8fd9\u79cd\u5199\u6cd5\u4e0e let a = [3, 3, 3, 3, 3]; \u6548\u679c\u76f8\u540c\uff0c\u4f46\u66f4\u7b80\u6d01\u3002","title":"\u6570\u7ec4\u7c7b\u578b"},{"location":"common-programing-concepts/#_15","text":"\u6570\u7ec4\u662f\u53ef\u4ee5\u5728\u6808(stack)\u4e0a\u5206\u914d\u7684\u5df2\u77e5\u56fa\u5b9a\u5927\u5c0f\u7684\u5355\u4e2a\u5185\u5b58\u5757\u3002\u53ef\u4ee5\u4f7f\u7528\u7d22\u5f15\u6765\u8bbf\u95ee\u6570\u7ec4\u7684\u5143\u7d20\uff0c\u50cf\u8fd9\u6837\uff1a fn main () { let a = [ 1 , 2 , 3 , 4 , 5 ]; let first = a [ 0 ]; let second = a [ 1 ]; }","title":"\u8bbf\u95ee\u6570\u7ec4\u5143\u7d20"},{"location":"common-programing-concepts/#_16","text":"\u8ba9\u6211\u4eec\u770b\u770b\u5982\u679c\u6211\u4eec\u8bbf\u95ee\u6570\u7ec4\u7ed3\u5c3e\u4e4b\u540e\u7684\u5143\u7d20\u4f1a\u53d1\u751f\u4ec0\u4e48\u5462\uff1f\u6bd4\u5982\u4f60\u6267\u884c\u4ee5\u4e0b\u4ee3\u7801\uff0c\u5b83\u4f7f\u7528\u7c7b\u4f3c\u4e8e\u7b2c 2 \u7ae0\u4e2d\u7684\u731c\u6570\u5b57\u6e38\u620f\u7684\u4ee3\u7801\u4ece\u7528\u6237\u90a3\u91cc\u83b7\u53d6\u6570\u7ec4\u7d22\u5f15\uff1a use std :: io ; fn main () { let a = [ 1 , 2 , 3 , 4 , 5 ]; println! ( \"\u8bf7\u8f93\u5165\u6570\u7ec4\u7d22\u5f15\" ); let mut index = String :: new (); io :: stdin () . read_line ( & mut index ) . expect ( \"\u8bfb\u53d6\u6570\u636e\u5931\u8d25\" ); let index : usize = index . trim () . parse () . expect ( \"\u8bf7\u8f93\u5165\u6570\u5b57\" ); let element = a [ index ]; println! ( \"\u6570\u7ec4\u4e2d\u7d22\u5f15\u4e3a {index} \u7684\u503c\u65f6: {element}\" ); } \u6b64\u4ee3\u7801\u7f16\u8bd1\u6210\u529f\u3002\u5982\u679c\u60a8\u4f7f\u7528 cargo run \u8fd0\u884c\u6b64\u4ee3\u7801\u5e76\u8f93\u5165 0\u30011\u30012\u30013 \u6216 4\uff0c\u7a0b\u5e8f\u5c06\u5728\u6570\u7ec4\u4e2d\u7684\u7d22\u5f15\u5904\u6253\u5370\u51fa\u76f8\u5e94\u7684\u503c\u3002\u5982\u679c\u4f60\u8f93\u5165\u4e00\u4e2a\u8d85\u8fc7\u6570\u7ec4\u672b\u7aef\u7684\u6570\u5b57\uff0c\u5982 10\uff0c\u4f60\u4f1a\u770b\u5230\u8fd9\u6837\u7684\u8f93\u51fa\uff1a thread 'main' panicked at 'index out of bounds: the len is 5 but the index is 10' , src/main.rs:19:19 note: run with ` RUST_BACKTRACE = 1 ` environment variable to display a backtrace \u7a0b\u5e8f\u5728\u7d22\u5f15\u64cd\u4f5c\u4e2d\u4f7f\u7528\u4e00\u4e2a\u65e0\u6548\u7684\u503c\u65f6\u5bfc\u81f4 \u8fd0\u884c\u65f6 \u9519\u8bef\u3002 \u7a0b\u5e8f\u5e26\u7740\u9519\u8bef\u4fe1\u606f\u9000\u51fa\uff0c\u5e76\u4e14\u6ca1\u6709\u6267\u884c\u6700\u540e\u7684 println! \u8bed\u53e5\u3002 \u5f53\u5c1d\u8bd5\u7528\u7d22\u5f15\u8bbf\u95ee\u4e00\u4e2a\u5143\u7d20\u65f6\uff0cRust \u4f1a\u68c0\u67e5\u6307\u5b9a\u7684\u7d22\u5f15\u662f\u5426\u5c0f\u4e8e\u6570\u7ec4\u7684\u957f\u5ea6\u3002 \u5982\u679c\u7d22\u5f15\u8d85\u51fa\u4e86\u6570\u7ec4\u957f\u5ea6\uff0cRust \u4f1a panic\uff0c\u8fd9\u662f Rust \u672f\u8bed\uff0c \u5b83\u7528\u4e8e\u7a0b\u5e8f\u56e0\u4e3a\u9519\u8bef\u800c\u9000\u51fa\u7684\u60c5\u51b5 \u3002 \u8fd9\u79cd\u68c0\u67e5\u5fc5\u987b\u5728\u8fd0\u884c\u65f6\u8fdb\u884c\uff0c\u7279\u522b\u662f\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u56e0\u4e3a\u7f16\u8bd1\u5668\u4e0d\u53ef\u80fd\u77e5\u9053\u7528\u6237\u5728\u4ee5\u540e\u8fd0\u884c\u4ee3\u7801\u65f6\u5c06\u8f93\u5165\u4ec0\u4e48\u503c\u3002 \u8fd9\u662f\u7b2c\u4e00\u4e2a\u5728\u5b9e\u6218\u4e2d\u9047\u5230\u7684 Rust \u5b89\u5168\u539f\u5219\u7684\u4f8b\u5b50\u3002 \u5728\u5f88\u591a\u5e95\u5c42\u8bed\u8a00\u4e2d\uff0c\u5e76\u6ca1\u6709\u8fdb\u884c\u8fd9\u7c7b\u68c0\u67e5\uff0c\u8fd9\u6837\u5f53\u63d0\u4f9b\u4e86\u4e00\u4e2a\u4e0d\u6b63\u786e\u7684\u7d22\u5f15\u65f6\uff0c\u5c31\u4f1a\u8bbf\u95ee\u65e0\u6548\u7684\u5185\u5b58\u3002 \u901a\u8fc7\u7acb\u5373\u9000\u51fa\u800c\u4e0d\u662f\u5141\u8bb8\u5185\u5b58\u8bbf\u95ee\u5e76\u7ee7\u7eed\u6267\u884c\uff0cRust \u8ba9\u4f60\u907f\u5f00\u6b64\u7c7b\u9519\u8bef\u3002 \u7b2c\u4e5d\u7ae0 \u4f1a\u66f4\u8be6\u7ec6\u5730\u8ba8\u8bba Rust \u7684\u9519\u8bef\u5904\u7406\u673a\u5236\uff0c\u4ee5\u53ca\u5982\u4f55\u7f16\u5199\u53ef\u8bfb\u6027\u5f3a\u800c\u53c8\u5b89\u5168\u7684\u4ee3\u7801\uff0c\u4f7f\u7a0b\u5e8f\u65e2\u4e0d\u4f1a panic \u4e5f\u4e0d\u4f1a\u5bfc\u81f4\u975e\u6cd5\u5185\u5b58\u8bbf\u95ee\u3002","title":"\u6570\u7ec4\u8d8a\u754c\u8bbf\u95ee"},{"location":"common-programing-concepts/#_17","text":"\u51fd\u6570\u5728 Rust \u4ee3\u7801\u4e2d\u975e\u5e38\u666e\u904d\u3002\u4f60\u5df2\u7ecf\u89c1\u8fc7\u8bed\u8a00\u4e2d\u6700\u91cd\u8981\u7684\u51fd\u6570\u4e4b\u4e00\uff1a main \u51fd\u6570\uff0c\u5b83\u662f\u5f88\u591a\u7a0b\u5e8f\u7684\u5165\u53e3\u70b9\u3002\u4f60\u4e5f\u89c1\u8fc7 fn \u5173\u952e\u5b57\uff0c\u5b83\u7528\u6765\u58f0\u660e\u65b0\u51fd\u6570\u3002 Rust \u4ee3\u7801\u4e2d\u7684\u51fd\u6570\u548c\u53d8\u91cf\u540d\u4f7f\u7528 snake case \u89c4\u8303\u98ce\u683c\u3002\u5728 snake case \u4e2d\uff0c \u6240\u6709\u5b57\u6bcd\u90fd\u662f\u5c0f\u5199\u5e76\u4f7f\u7528\u4e0b\u5212\u7ebf\u5206\u9694\u5355\u8bcd \u3002\u8fd9\u662f\u4e00\u4e2a\u5305\u542b\u51fd\u6570\u5b9a\u4e49\u793a\u4f8b\u7684\u7a0b\u5e8f\uff1a \u6587\u4ef6\u540d: src/main.rs fn main () { println! ( \"Hello, world!\" ); another_function (); } // \u901a\u8fc7\u8f93\u5165 fn \u540e\u9762\u8ddf\u7740\u51fd\u6570\u540d\u548c\u4e00\u5bf9\u5706\u62ec\u53f7\u6765\u5b9a\u4e49\u51fd\u6570\u3002\u5927\u62ec\u53f7\u544a\u8bc9\u7f16\u8bd1\u5668\u54ea\u91cc\u662f\u51fd\u6570\u4f53\u7684\u5f00\u59cb\u548c\u7ed3\u5c3e\u3002 fn another_function () { println! ( \"Another function.\" ); } // main \u51fd\u6570\u4e2d\u7684\u4ee3\u7801\u4f1a\u6309\u987a\u5e8f\u6267\u884c\u3002\u9996\u5148\uff0c\u6253\u5370 \u201cHello, world!\u201d \u4fe1\u606f\uff0c\u7136\u540e\u8c03\u7528 another_function \u51fd\u6570\u5e76\u6253\u5370\u5b83\u7684\u4fe1\u606f\u3002 \u53ef\u4ee5\u4f7f\u7528\u51fd\u6570\u540d\u540e\u8ddf\u5706\u62ec\u53f7\u6765\u8c03\u7528\u6211\u4eec\u5b9a\u4e49\u8fc7\u7684\u4efb\u610f\u51fd\u6570\u3002 \u56e0\u4e3a\u7a0b\u5e8f\u4e2d\u5df2\u5b9a\u4e49 another_function \u51fd\u6570\uff0c\u6240\u4ee5\u53ef\u4ee5\u5728 main \u51fd\u6570\u4e2d\u8c03\u7528\u5b83\u3002\u6ce8\u610f\uff0c \u6e90\u7801\u4e2d another_function \u5b9a\u4e49\u5728 main \u51fd\u6570 \u4e4b\u540e\uff1b\u4e5f\u53ef\u4ee5\u5b9a\u4e49\u5728\u4e4b\u524d \u3002 Rust \u4e0d\u5173\u5fc3\u51fd\u6570\u5b9a\u4e49\u6240\u5728\u7684\u4f4d\u7f6e\uff0c\u53ea\u8981\u51fd\u6570\u88ab\u8c03\u7528\u65f6\u51fa\u73b0\u5728\u8c03\u7528\u4e4b\u5904\u53ef\u89c1\u7684\u4f5c\u7528\u57df\u5185\u5c31\u884c\u3002","title":"\u51fd\u6570"},{"location":"common-programing-concepts/#_18","text":"\u6211\u4eec\u53ef\u4ee5\u5b9a\u4e49\u4e3a\u62e5\u6709 \u53c2\u6570 \uff08parameters\uff09\u7684\u51fd\u6570\uff0c\u53c2\u6570\u662f\u7279\u6b8a\u53d8\u91cf\uff0c\u662f\u51fd\u6570\u7b7e\u540d\u7684\u4e00\u90e8\u5206\u3002\u5f53\u51fd\u6570\u62e5\u6709\u53c2\u6570\uff08\u5f62\u53c2\uff09\u65f6\uff0c\u53ef\u4ee5\u4e3a\u8fd9\u4e9b\u53c2\u6570\u63d0\u4f9b\u5177\u4f53\u7684\u503c\uff08\u5b9e\u53c2\uff09\u3002 \u6280\u672f\u4e0a\u8bb2\uff0c\u8fd9\u4e9b\u5177\u4f53\u503c\u88ab\u79f0\u4e3a\u53c2\u6570\uff08arguments\uff09\uff0c\u4f46\u662f\u5728\u65e5\u5e38\u4ea4\u6d41\u4e2d\uff0c\u4eba\u4eec\u503e\u5411\u4e8e\u4e0d\u533a\u5206\u4f7f\u7528 parameter \u548c argument \u6765\u8868\u793a\u51fd\u6570\u5b9a\u4e49\u4e2d\u7684\u53d8\u91cf\u6216\u8c03\u7528\u51fd\u6570\u65f6\u4f20\u5165\u7684\u5177\u4f53\u503c\u3002 \u5728\u8fd9\u7248 another_function \u4e2d\uff0c\u6211\u4eec\u589e\u52a0\u4e86\u4e00\u4e2a\u53c2\u6570\uff1a fn main () { another_function ( 5 ); // \u6211\u4eec\u5c06 5 \u4f20\u7ed9 another_function \u65f6\uff0c // println! \u5b8f\u4f1a\u628a 5 \u653e\u5728\u683c\u5f0f\u5b57\u7b26\u4e32\u4e2d\u5305\u542b x \u7684\u90a3\u5bf9\u82b1\u62ec\u53f7\u7684\u4f4d\u7f6e\u3002 } // another_function \u7684\u58f0\u660e\u4e2d\u6709\u4e00\u4e2a\u547d\u540d\u4e3a x \u7684\u53c2\u6570\u3002 // x \u7684\u7c7b\u578b\u88ab\u6307\u5b9a\u4e3a i32\u3002 fn another_function ( x : i32 ) { println! ( \"The value of x is: {x}\" ); } \u5728\u51fd\u6570\u7b7e\u540d\u4e2d\uff0c \u5fc5\u987b \u58f0\u660e\u6bcf\u4e2a\u53c2\u6570\u7684\u7c7b\u578b\u3002 \u8fd9\u662f Rust \u8bbe\u8ba1\u4e2d\u4e00\u4e2a\u7ecf\u8fc7\u614e\u91cd\u8003\u8651\u7684\u51b3\u5b9a\uff1a \u8981\u6c42\u5728\u51fd\u6570\u5b9a\u4e49\u4e2d\u63d0\u4f9b\u7c7b\u578b\u6ce8\u89e3 \uff0c\u610f\u5473\u7740\u7f16\u8bd1\u5668\u518d\u4e5f\u4e0d\u9700\u8981\u4f60\u5728\u4ee3\u7801\u7684\u5176\u4ed6\u5730\u65b9\u6ce8\u660e\u7c7b\u578b\u6765\u6307\u51fa\u4f60\u7684\u610f\u56fe\u3002 \u800c\u4e14\uff0c\u5728\u77e5\u9053\u51fd\u6570\u9700\u8981\u4ec0\u4e48\u7c7b\u578b\u540e\uff0c\u7f16\u8bd1\u5668\u5c31\u80fd\u591f\u7ed9\u51fa\u66f4\u6709\u7528\u7684\u9519\u8bef\u6d88\u606f\u3002 \u5f53\u5b9a\u4e49\u591a\u4e2a\u53c2\u6570\u65f6\uff0c\u4f7f\u7528\u9017\u53f7\u5206\u9694\uff0c\u50cf\u8fd9\u6837\uff1a fn main () { print_labeled_measurement ( 5 , 'h' ); } // \u5b83\u6709\u4e24\u4e2a\u53c2\u6570\u3002\u7b2c\u4e00\u4e2a\u53c2\u6570\u540d\u4e3a value\uff0c \u7c7b\u578b\u662f i32\u3002 // \u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f unit_label \uff0c\u7c7b\u578b\u662f char\u3002 fn print_labeled_measurement ( value : i32 , unit_label : char ) { println! ( \"The measurement is: {value}{unit_label}\" ); }","title":"\u53c2\u6570"},{"location":"common-programing-concepts/#_19","text":"\u51fd\u6570\u4f53\u7531\u4e00\u7cfb\u5217\u7684 \u8bed\u53e5 \u548c\u4e00\u4e2a\u53ef\u9009\u7684 \u7ed3\u5c3e\u8868\u8fbe\u5f0f \u6784\u6210\u3002 \u76ee\u524d\u4e3a\u6b62\uff0c\u6211\u4eec\u63d0\u5230\u7684\u51fd\u6570\u8fd8\u4e0d\u5305\u542b\u7ed3\u5c3e\u8868\u8fbe\u5f0f\uff0c\u4e0d\u8fc7\u4f60\u5df2\u7ecf\u89c1\u8fc7\u4f5c\u4e3a\u8bed\u53e5\u4e00\u90e8\u5206\u7684\u8868\u8fbe\u5f0f\u3002 \u56e0\u4e3a Rust \u662f\u4e00\u95e8\u57fa\u4e8e \u8868\u8fbe\u5f0f \uff08expression-based\uff09\u7684\u8bed\u8a00\uff0c\u8fd9\u662f\u4e00\u4e2a\u9700\u8981\u7406\u89e3\u7684\uff08\u4e0d\u540c\u4e8e\u5176\u4ed6\u8bed\u8a00\uff09\u91cd\u8981\u533a\u522b\u3002 \u5176\u4ed6\u8bed\u8a00\u5e76\u6ca1\u6709\u8fd9\u6837\u7684\u533a\u522b\uff0c\u6240\u4ee5\u8ba9\u6211\u4eec\u770b\u770b\u8bed\u53e5\u4e0e\u8868\u8fbe\u5f0f\u6709\u4ec0\u4e48\u533a\u522b\u4ee5\u53ca\u8fd9\u4e9b\u533a\u522b\u662f\u5982\u4f55\u5f71\u54cd\u51fd\u6570\u4f53\u7684\u3002 \u8bed\u53e5 \uff08Statements\uff09\u662f\u6267\u884c\u4e00\u4e9b\u64cd\u4f5c\u4f46\u4e0d\u8fd4\u56de\u503c\u7684\u6307\u4ee4 \u3002 \u8868\u8fbe\u5f0f \uff08Expressions\uff09\u8ba1\u7b97\u5e76\u4ea7\u751f\u4e00\u4e2a\u503c\u3002 \u8ba9\u6211\u4eec\u770b\u4e00\u4e9b\u4f8b\u5b50\u3002 \u5b9e\u9645\u4e0a\uff0c\u6211\u4eec\u5df2\u7ecf\u4f7f\u7528\u8fc7\u8bed\u53e5\u548c\u8868\u8fbe\u5f0f\u3002\u4f7f\u7528 let \u5173\u952e\u5b57\u521b\u5efa\u53d8\u91cf\u5e76\u7ed1\u5b9a\u4e00\u4e2a\u503c\u662f\u4e00\u4e2a\u8bed\u53e5\u3002\u5728\u4e0b\u9762\u793a\u4f8b \u4e2d\uff0c let y = 6; \u662f\u4e00\u4e2a\u8bed\u53e5\u3002 fn main () { let y = 6 ; } // \u51fd\u6570\u5b9a\u4e49\u4e5f\u662f\u8bed\u53e5\uff0c\u4e0a\u9762\u6574\u4e2a\u4f8b\u5b50\u672c\u8eab\u5c31\u662f\u4e00\u4e2a\u8bed\u53e5\u3002 \u8bed\u53e5\u4e0d\u8fd4\u56de\u503c\u3002\u56e0\u6b64\uff0c\u4e0d\u80fd\u628a let \u8bed\u53e5\u8d4b\u503c\u7ed9\u53e6\u4e00\u4e2a\u53d8\u91cf\uff0c\u6bd4\u5982\u4e0b\u9762\u7684\u4f8b\u5b50\u5c1d\u8bd5\u505a\u7684\uff0c\u4f1a\u4ea7\u751f\u4e00\u4e2a\u9519\u8bef\uff1a fn main () { let x = ( let y = 6 ); } \u5f53\u8fd0\u884c\u8fd9\u4e2a\u7a0b\u5e8f\u65f6\uff0c\u4f1a\u5f97\u5230\u5982\u4e0b\u9519\u8bef\uff1a $ cargo run Compiling functions v0.1.0 ( file:///projects/functions ) error: expected expression, found statement ( ` let ` ) --> src/main.rs:2:14 | 2 | let x = ( let y = 6 ) ; | ^^^^^^^^^ | = note: variable declaration using ` let ` is a statement error [ E0658 ] : ` let ` expressions in this position are unstable --> src/main.rs:2:14 | 2 | let x = ( let y = 6 ) ; | ^^^^^^^^^ | = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information warning: unnecessary parentheses around assigned value --> src/main.rs:2:13 | 2 | let x = ( let y = 6 ) ; | ^ ^ | = note: ` #[warn(unused_parens)]` on by default help: remove these parentheses | 2 - let x = ( let y = 6 ) ; 2 + let x = let y = 6 ; | For more information about this error, try ` rustc --explain E0658 ` . warning: ` functions ` ( bin \"functions\" ) generated 1 warning error: could not compile ` functions ` due to 2 previous errors ; 1 warning emitted let y = 6 \u8bed\u53e5\u5e76\u4e0d\u8fd4\u56de\u503c\uff0c\u6240\u4ee5\u6ca1\u6709\u53ef\u4ee5\u7ed1\u5b9a\u5230 x \u4e0a\u7684\u503c\u3002 \u8fd9\u4e0e\u5176\u4ed6\u8bed\u8a00\u4e0d\u540c\uff0c\u4f8b\u5982 C \u548c Ruby\uff0c\u5b83\u4eec\u7684\u8d4b\u503c\u8bed\u53e5\u4f1a\u8fd4\u56de\u6240\u8d4b\u7684\u503c\u3002 \u5728\u8fd9\u4e9b\u8bed\u8a00\u4e2d\uff0c\u53ef\u4ee5\u8fd9\u4e48\u5199 x = y = 6\uff0c\u8fd9\u6837 x \u548c y \u7684\u503c\u90fd\u662f 6\uff1bRust \u4e2d\u4e0d\u80fd\u8fd9\u6837\u5199\u3002 \u8868\u8fbe\u5f0f\u4f1a\u8ba1\u7b97\u51fa\u4e00\u4e2a\u503c\uff0c\u5e76\u4e14\u4f60\u5c06\u7f16\u5199\u7684\u5927\u90e8\u5206 Rust \u4ee3\u7801\u662f\u7531\u8868\u8fbe\u5f0f\u7ec4\u6210\u7684\u3002 \u8003\u8651\u4e00\u4e2a\u6570\u5b66\u8fd0\u7b97\uff0c\u6bd4\u5982 5 + 6\uff0c\u8fd9\u662f\u4e00\u4e2a\u8868\u8fbe\u5f0f\u5e76\u8ba1\u7b97\u51fa\u503c 11\u3002 \u8868\u8fbe\u5f0f\u53ef\u4ee5\u662f\u8bed\u53e5\u7684\u4e00\u90e8\u5206\uff1a\u5728\u4e0a\u9762\u4e2d\uff0c\u8bed\u53e5 let y = 6; \u4e2d\u7684 6 \u662f\u4e00\u4e2a\u8868\u8fbe\u5f0f\uff0c\u5b83\u8ba1\u7b97\u51fa\u7684\u503c\u662f 6\u3002 \u51fd\u6570\u8c03\u7528\u662f\u4e00\u4e2a\u8868\u8fbe\u5f0f \u3002 \u5b8f\u8c03\u7528\u662f\u4e00\u4e2a\u8868\u8fbe\u5f0f \u3002 \u7528\u5927\u62ec\u53f7\u521b\u5efa\u7684\u4e00\u4e2a\u65b0\u7684\u5757\u4f5c\u7528\u57df\u4e5f\u662f\u4e00\u4e2a\u8868\u8fbe\u5f0f \uff0c\u4f8b\u5982\uff1a fn main () { let y = { let x = 3 ; x + 1 }; // \u662f\u4e00\u4e2a\u4ee3\u7801\u5757\uff0c\u5b83\u7684\u503c\u662f 4 // \u8fd9\u4e2a\u503c\u4f5c\u4e3a let \u8bed\u53e5\u7684\u4e00\u90e8\u5206\u88ab\u7ed1\u5b9a\u5230 y \u4e0a\u3002 // \u6ce8\u610f x+1 \u8fd9\u4e00\u884c\u5728\u7ed3\u5c3e\u6ca1\u6709\u5206\u53f7\uff0c\u4e0e\u4f60\u89c1\u8fc7\u7684\u5927\u90e8\u5206\u4ee3\u7801\u884c\u4e0d\u540c\u3002 // \u8868\u8fbe\u5f0f\u7684\u7ed3\u5c3e\u6ca1\u6709\u5206\u53f7\u3002 // \u5982\u679c\u5728\u8868\u8fbe\u5f0f\u7684\u7ed3\u5c3e\u52a0\u4e0a\u5206\u53f7\uff0c\u5b83\u5c31\u53d8\u6210\u4e86\u8bed\u53e5\uff0c\u800c\u8bed\u53e5\u4e0d\u4f1a\u8fd4\u56de\u503c\u3002 // \u5728\u63a5\u4e0b\u6765\u63a2\u7d22\u5177\u6709\u8fd4\u56de\u503c\u7684\u51fd\u6570\u548c\u8868\u8fbe\u5f0f\u65f6\u8981\u8c28\u8bb0\u8fd9\u4e00\u70b9\u3002 println! ( \"The value of y is: {y}\" ); }","title":"\u8bed\u53e5\u548c\u8868\u8fbe\u5f0f"},{"location":"common-programing-concepts/#_20","text":"\u51fd\u6570\u53ef\u4ee5\u5411\u8c03\u7528\u5b83\u7684\u4ee3\u7801\u8fd4\u56de\u503c\u3002\u6211\u4eec \u5e76\u4e0d\u5bf9\u8fd4\u56de\u503c\u547d\u540d\uff0c\u4f46\u8981\u5728\u7bad\u5934\uff08->\uff09\u540e\u58f0\u660e\u5b83\u7684\u7c7b\u578b \u3002 \u5728 Rust \u4e2d\uff0c \u51fd\u6570\u7684\u8fd4\u56de\u503c\u7b49\u540c\u4e8e\u51fd\u6570\u4f53\u6700\u540e\u4e00\u4e2a\u8868\u8fbe\u5f0f\u7684\u503c \u3002 \u4f7f\u7528 return \u5173\u952e\u5b57\u548c\u6307\u5b9a\u503c\uff0c\u53ef\u4ece\u51fd\u6570\u4e2d\u63d0\u524d\u8fd4\u56de\uff1b \u4f46\u5927\u90e8\u5206\u51fd\u6570\u9690\u5f0f\u7684\u8fd4\u56de\u6700\u540e\u7684\u8868\u8fbe\u5f0f\u3002 \u8fd9\u662f\u4e00\u4e2a\u6709\u8fd4\u56de\u503c\u7684\u51fd\u6570\u7684\u4f8b\u5b50\uff1a // \u5728 five \u51fd\u6570\u4e2d\u6ca1\u6709\u51fd\u6570\u8c03\u7528\u3001\u5b8f\u3001\u751a\u81f3\u6ca1\u6709 let \u8bed\u53e5 \u2014\u2014 \u53ea\u6709\u6570\u5b57 5\u3002 // \u8fd9\u5728 Rust \u4e2d\u662f\u4e00\u4e2a\u5b8c\u5168\u6709\u6548\u7684\u51fd\u6570\u3002 // \u6ce8\u610f\uff0c\u4e5f\u6307\u5b9a\u4e86\u51fd\u6570\u8fd4\u56de\u503c\u7684\u7c7b\u578b\uff0c\u5c31\u662f -> i32\u3002 fn five () -> i32 { 5 // five \u51fd\u6570\u6ca1\u6709\u53c2\u6570\u5e76\u5b9a\u4e49\u4e86\u8fd4\u56de\u503c\u7c7b\u578b\uff0c\u4e0d\u8fc7\u51fd\u6570\u4f53\u53ea\u6709\u5355\u5355\u4e00\u4e2a 5 \u4e5f\u6ca1\u6709\u5206\u53f7\uff0c\u56e0\u4e3a\u8fd9\u662f\u4e00\u4e2a\u8868\u8fbe\u5f0f\uff0c\u6211\u4eec\u60f3\u8981\u8fd4\u56de\u5b83\u7684\u503c\u3002 } fn main () { // \u8fd9\u4e00\u884c\u8868\u660e\u6211\u4eec\u4f7f\u7528\u51fd\u6570\u7684\u8fd4\u56de\u503c\u521d\u59cb\u5316\u4e00\u4e2a\u53d8\u91cf\u3002 // \u56e0\u4e3a five \u51fd\u6570\u8fd4\u56de 5\uff0c\u8fd9\u4e00\u884c\u4e0e\u4ee3\u7801 let x = 5; \u76f8\u540c let x = five (); println! ( \"The value of x is: {x}\" ); } \u8ba9\u6211\u4eec\u770b\u770b\u53e6\u4e00\u4e2a\u4f8b\u5b50\uff1a fn main () { let x = plus_one ( 5 ); println! ( \"The value of x is: {x}\" ); } fn plus_one ( x : i32 ) -> i32 { x + 1 // \u5982\u679c\u5728\u5305\u542b x + 1 \u7684\u884c\u5c3e\u52a0\u4e0a\u4e00\u4e2a\u5206\u53f7\uff0c\u628a\u5b83\u4ece\u8868\u8fbe\u5f0f\u53d8\u6210\u8bed\u53e5\uff0c\u6211\u4eec\u5c06\u770b\u5230\u4e00\u4e2a\u9519\u8bef\u3002 }","title":"\u5177\u6709\u8fd4\u56de\u503c\u7684\u51fd\u6570"},{"location":"common-programing-concepts/#_21","text":"\u7a0b\u5e8f\u5458\u5728\u6e90\u7801\u4e2d\u7559\u4e0b \u6ce8\u91ca \uff08comments\uff09\uff0c\u7f16\u8bd1\u5668\u4f1a\u5ffd\u7565\u5b83\u4eec\uff0c\u4e0d\u8fc7\u9605\u8bfb\u4ee3\u7801\u7684\u4eba\u53ef\u80fd\u89c9\u5f97\u6709\u7528\u3002","title":"\u6ce8\u91ca"},{"location":"common-programing-concepts/#_22","text":"\u60ef\u7528\u7684\u6ce8\u91ca\u6837\u5f0f\u662f\u4ee5\u4e24\u4e2a\u659c\u6760\u5f00\u59cb\u6ce8\u91ca\uff0c\u5e76\u6301\u7eed\u5230\u672c\u884c\u7684\u7ed3\u5c3e\u3002\u5bf9\u4e8e\u8d85\u8fc7\u4e00\u884c\u7684\u6ce8\u91ca\uff0c\u9700\u8981\u5728\u6bcf\u4e00\u884c\u524d\u90fd\u52a0\u4e0a // // So we\u2019re doing something complicated here, long enough that we need // multiple lines of comments to do it! Whew! Hopefully, this comment will // explain what\u2019s going on. \u6ce8\u91ca\u4e5f\u53ef\u4ee5\u653e\u5728\u5305\u542b\u4ee3\u7801\u7684\u884c\u7684\u672b\u5c3e\uff1a fn main () { let lucky_number = 7 ; // I\u2019m feeling lucky today }","title":"\u5355\u884c\u6ce8\u91ca"},{"location":"common-programing-concepts/#_23","text":"","title":"\u6587\u6863\u6ce8\u91ca"},{"location":"common-programing-concepts/#_24","text":"\u6839\u636e\u6761\u4ef6\u662f\u5426\u4e3a\u771f\u6765\u51b3\u5b9a\u662f\u5426\u6267\u884c\u67d0\u4e9b\u4ee3\u7801\uff0c\u4ee5\u53ca\u6839\u636e\u6761\u4ef6\u662f\u5426\u4e3a\u771f\u6765\u91cd\u590d\u8fd0\u884c\u4e00\u6bb5\u4ee3\u7801\u7684\u80fd\u529b\u662f\u5927\u90e8\u5206\u7f16\u7a0b\u8bed\u8a00\u7684\u57fa\u672c\u7ec4\u6210\u90e8\u5206\u3002","title":"\u63a7\u5236\u6d41"},{"location":"common-programing-concepts/#if","text":"if \u8868\u8fbe\u5f0f\u5141\u8bb8\u6839\u636e\u6761\u4ef6\u6267\u884c\u4e0d\u540c\u7684\u4ee3\u7801\u5206\u652f\u3002 fn main () { let number = 3 ; // \u6240\u6709\u7684 if \u8868\u8fbe\u5f0f\u90fd\u4ee5 if \u5173\u952e\u5b57\u5f00\u5934\uff0c\u5176\u540e\u8ddf\u4e00\u4e2a\u6761\u4ef6\u3002 if number < 5 { // \u5728\u6761\u4ef6\u4e3a\u771f\u65f6\u5e0c\u671b\u6267\u884c\u7684\u4ee3\u7801\u5757\u4f4d\u4e8e\u7d27\u8ddf\u6761\u4ef6\u4e4b\u540e\u7684\u5927\u62ec\u53f7\u4e2d\u3002 println! ( \"condition was true\" ); } else { // \u4e00\u4e2a\u53ef\u9009\u7684 else \u8868\u8fbe\u5f0f\u6765\u63d0\u4f9b\u4e00\u4e2a\u5728\u6761\u4ef6\u4e3a\u5047\u65f6\u5e94\u5f53\u6267\u884c\u7684\u4ee3\u7801\u5757 println! ( \"condition was false\" ); } } \u503c\u5f97\u6ce8\u610f\u7684\u662f\u4ee3\u7801\u4e2d\u7684\u6761\u4ef6 \u5fc5\u987b \u662f bool \u503c\u3002\u5982\u679c\u6761\u4ef6\u4e0d\u662f bool \u503c\uff0c\u6211\u4eec\u5c06\u5f97\u5230\u4e00\u4e2a\u9519\u8bef\u3002 fn main () { let number = 3 ; // \u4f1a\u62a5\uff0cexpected `bool`, found integer \u9519\u8bef\u3002 // Rust \u5e76\u4e0d\u4f1a\u5c1d\u8bd5\u81ea\u52a8\u5730\u5c06\u975e\u5e03\u5c14\u503c\u8f6c\u6362\u4e3a\u5e03\u5c14\u503c\u3002 // \u5fc5\u987b\u603b\u662f\u663e\u5f0f\u5730\u4f7f\u7528\u5e03\u5c14\u503c\u4f5c\u4e3a if \u7684\u6761\u4ef6\u3002 if number { println! ( \"number was three\" ); } }","title":"if\u8868\u8fbe\u5f0f"},{"location":"common-programing-concepts/#else-if","text":"\u53ef\u4ee5\u5c06 else if \u8868\u8fbe\u5f0f\u4e0e if \u548c else \u7ec4\u5408\u6765\u5b9e\u73b0\u591a\u91cd\u6761\u4ef6\u3002 fn main () { let number = 6 ; // \u6309\u987a\u5e8f\u68c0\u67e5\u6bcf\u4e2a if \u8868\u8fbe\u5f0f\u5e76\u6267\u884c\u7b2c\u4e00\u4e2a\u6761\u4ef6\u4e3a\u771f\u7684\u4ee3\u7801\u5757\u3002 if number % 4 == 0 { println! ( \"number is divisible by 4\" ); } else if number % 3 == 0 { println! ( \"number is divisible by 3\" ); } else if number % 2 == 0 { println! ( \"number is divisible by 2\" ); } else { println! ( \"number is not divisible by 4, 3, or 2\" ); } // Rust \u53ea\u4f1a\u6267\u884c\u7b2c\u4e00\u4e2a\u6761\u4ef6\u4e3a\u771f\u7684\u4ee3\u7801\u5757\uff0c\u5e76\u4e14\u4e00\u65e6\u5b83\u627e\u5230\u4e00\u4e2a\u4ee5\u540e\uff0c\u751a\u81f3\u90fd\u4e0d\u4f1a\u68c0\u67e5\u5269\u4e0b\u7684\u6761\u4ef6\u4e86\u3002 } \u4f7f\u7528\u8fc7\u591a\u7684 else if \u8868\u8fbe\u5f0f\u4f1a\u4f7f\u4ee3\u7801\u663e\u5f97\u6742\u4e71\u65e0\u7ae0\uff0c\u6240\u4ee5\u5982\u679c\u6709\u591a\u4e8e\u4e00\u4e2a else if \u8868\u8fbe\u5f0f\uff0c\u6700\u597d\u91cd\u6784\u4ee3\u7801\u3002 \u4e3a\u6b64\uff0c\u7b2c\u516d\u7ae0\u4f1a\u4ecb\u7ecd\u4e00\u4e2a\u5f3a\u5927\u7684 Rust \u5206\u652f\u7ed3\u6784\uff08branching construct\uff09\uff0c\u53eb\u505a match \u3002","title":"else if \u8868\u8fbe\u5f0f"},{"location":"common-programing-concepts/#letif","text":"\u56e0\u4e3a if \u662f\u4e00\u4e2a\u8868\u8fbe\u5f0f\uff0c\u53ef\u4ee5\u5728 let \u8bed\u53e5\u7684\u53f3\u4fa7\u4f7f\u7528\u5b83\uff0c fn main () { let condition = true ; let number = if condition { 5 } else { 6 }; // \u5c06 if \u8868\u8fbe\u5f0f\u7684\u8fd4\u56de\u503c\u8d4b\u7ed9\u4e00\u4e2a\u53d8\u91cf // \u4ee3\u7801\u5757\u7684\u503c\u662f\u5176\u6700\u540e\u4e00\u4e2a\u8868\u8fbe\u5f0f\u7684\u503c\uff0c\u800c\u6570\u5b57\u672c\u8eab\u5c31\u662f\u4e00\u4e2a\u8868\u8fbe\u5f0f\u3002 println! ( \"The value of number is: {number}\" ); } \u7c7b\u578b\u9700\u7edf\u4e00 fn main () { let condition = true ; let number = if condition { 5 } else { \"six\" }; // \u7c7b\u578b\u4e0d\u7edf\u4e00\uff0c\u4f1a\u62a5\u9519\uff0cexpected integer, found `&str` println! ( \"The value of number is: {number}\" ); }","title":"let\u4e2d\u7684if"},{"location":"common-programing-concepts/#_25","text":"\u591a\u6b21\u6267\u884c\u540c\u4e00\u6bb5\u4ee3\u7801\u662f\u5f88\u5e38\u7528\u7684\uff0cRust \u4e3a\u6b64\u63d0\u4f9b\u4e86\u591a\u79cd \u5faa\u73af\uff08loops\uff09\u3002","title":"\u5faa\u73af\u8868\u8fbe\u5f0f"},{"location":"common-programing-concepts/#loop","text":"loop \u5173\u952e\u5b57\u544a\u8bc9 Rust \u4e00\u904d\u53c8\u4e00\u904d\u5730\u6267\u884c\u4e00\u6bb5\u4ee3\u7801\u76f4\u5230\u4f60\u660e\u786e\u8981\u6c42\u505c\u6b62\u3002 fn main () { loop { // \u4f1a\u770b\u5230\u8fde\u7eed\u7684\u53cd\u590d\u6253\u5370 again!\uff0c\u76f4\u5230\u6211\u4eec\u624b\u52a8\u505c\u6b62\u7a0b\u5e8f\u3002 // \u5927\u90e8\u5206\u7ec8\u7aef\u90fd\u652f\u6301\u4e00\u4e2a\u5feb\u6377\u952e\uff0cctrl-c\uff0c\u6765\u7ec8\u6b62\u4e00\u4e2a\u9677\u5165\u65e0\u9650\u5faa\u73af\u7684\u7a0b\u5e8f\u3002 println! ( \"again!\" ); } } break \u5173\u952e\u5b57\u6765\u544a\u8bc9\u7a0b\u5e8f\u4f55\u65f6\u505c\u6b62\u5faa\u73af\u3002 continue \u5173\u952e\u5b57\u544a\u8bc9\u7a0b\u5e8f\u8df3\u8fc7\u8fd9\u4e2a\u5faa\u73af\u8fed\u4ee3\u4e2d\u7684\u4efb\u4f55\u5269\u4f59\u4ee3\u7801\uff0c\u5e76\u8f6c\u5230\u4e0b\u4e00\u4e2a\u8fed\u4ee3\u3002","title":"loop \u5faa\u73af"},{"location":"common-programing-concepts/#_26","text":"loop \u7684\u4e00\u4e2a\u7528\u4f8b\u662f\u91cd\u8bd5\u53ef\u80fd\u4f1a\u5931\u8d25\u7684\u64cd\u4f5c\uff0c\u6bd4\u5982\u68c0\u67e5\u7ebf\u7a0b\u662f\u5426\u5b8c\u6210\u4e86\u4efb\u52a1\u3002\u7136\u800c\u4f60\u53ef\u80fd\u4f1a\u9700\u8981\u5c06\u64cd\u4f5c\u7684\u7ed3\u679c\u4f20\u9012\u7ed9\u5176\u5b83\u7684\u4ee3\u7801\u3002\u5982\u679c\u5c06\u8fd4\u56de\u503c\u52a0\u5165\u4f60\u7528\u6765\u505c\u6b62\u5faa\u73af\u7684 break \u8868\u8fbe\u5f0f\uff0c\u5b83\u4f1a\u88ab\u505c\u6b62\u7684\u5faa\u73af\u8fd4\u56de\uff1a fn main () { // \u4e00\u4e2a\u540d\u4e3a counter \u7684\u53d8\u91cf\u5e76\u521d\u59cb\u5316\u4e3a 0 let mut counter = 0 ; // \u63a5\u7740\u58f0\u660e\u4e86\u4e00\u4e2a\u540d\u4e3a result \u6765\u5b58\u653e\u5faa\u73af\u7684\u8fd4\u56de\u503c\u3002 let result = loop { // \u5728\u5faa\u73af\u7684\u6bcf\u4e00\u6b21\u8fed\u4ee3\u4e2d\uff0c\u6211\u4eec\u5c06 counter \u53d8\u91cf\u52a0 1 counter += 1 ; // \u63a5\u7740\u68c0\u67e5\u8ba1\u6570\u662f\u5426\u7b49\u4e8e 10\u3002 if counter == 10 { // \u4f7f\u7528 break \u5173\u952e\u5b57\u8fd4\u56de\u503c counter * 2 break counter * 2 ; // \u901a\u8fc7\u5206\u53f7\u7ed3\u675f\u8d4b\u503c\u7ed9 result \u7684\u8bed\u53e5\u3002 } }; // \u6700\u540e\u6253\u5370\u51fa result \u7684\u503c\uff0c\u4e5f\u5c31\u662f 20\u3002 println! ( \"The result is {result}\" ); }","title":"\u4ece\u5faa\u73af\u8fd4\u56de\u503c"},{"location":"common-programing-concepts/#_27","text":"\u5982\u679c\u5b58\u5728\u5d4c\u5957\u5faa\u73af\uff0c break \u548c continue \u5e94\u7528\u4e8e\u6b64\u65f6\u6700\u5185\u5c42\u7684\u5faa\u73af\u3002\u4f60\u53ef\u4ee5\u9009\u62e9\u5728\u4e00\u4e2a\u5faa\u73af\u4e0a\u6307\u5b9a\u4e00\u4e2a \u5faa\u73af\u6807\u7b7e \uff08loop label\uff09\uff0c\u7136\u540e\u5c06\u6807\u7b7e\u4e0e break \u6216 continue \u4e00\u8d77\u4f7f\u7528\uff0c\u4f7f\u8fd9\u4e9b\u5173\u952e\u5b57\u5e94\u7528\u4e8e\u5df2\u6807\u8bb0\u7684\u5faa\u73af\u800c\u4e0d\u662f\u6700\u5185\u5c42\u7684\u5faa\u73af\u3002 fn main () { let mut count = 0 ; // \u5916\u5c42\u5faa\u73af\u6709\u4e00\u4e2a\u6807\u7b7e counting_up ' counting_up : loop { println! ( \"count = {count}\" ); let mut remaining = 10 ; // \u6ca1\u6709\u6807\u7b7e\u7684\u5185\u90e8\u5faa\u73af\u4ece 10 \u5411\u4e0b\u6570\u5230 9\u3002 loop { println! ( \"remaining = {remaining}\" ); if remaining == 9 { // \u6ca1\u6709\u6307\u5b9a\u6807\u7b7e\u7684 break \u5c06\u53ea\u9000\u51fa\u5185\u5c42\u5faa\u73af\u3002 break ; } if count == 2 { // break 'counting_up; \u8bed\u53e5\u5c06\u9000\u51fa\u5916\u5c42\u5faa\u73af\u3002 break 'counting_up ; } remaining -= 1 ; } count += 1 ; } println! ( \"End count = {count}\" ); }","title":"\u5faa\u73af\u6807\u7b7e"},{"location":"common-programing-concepts/#while","text":"\u5f53\u6761\u4ef6\u4e3a\u771f\uff0c\u6267\u884c\u5faa\u73af\u3002\u5f53\u6761\u4ef6\u4e0d\u518d\u4e3a\u771f\uff0c\u8c03\u7528 break \u505c\u6b62\u5faa\u73af\u3002 \u6bd4\u5982\uff1a fn main () { let mut number = 3 ; // \u5f53\u6761\u4ef6\u4e3a\u771f\u65f6\uff0c\u4f7f\u7528 while \u5faa\u73af\u8fd0\u884c\u4ee3\u7801 // \u8fd9\u79cd\u7ed3\u6784\u6d88\u9664\u4e86\u5f88\u591a\u4f7f\u7528 loop\u3001if\u3001else \u548c break \u65f6\u6240\u5fc5\u987b\u7684\u5d4c\u5957\uff0c\u8fd9\u6837\u66f4\u52a0\u6e05\u6670\u3002 while number != 0 { println! ( \"{number}!\" ); number -= 1 ; } println! ( \"LIFTOFF!!!\" ); }","title":"while \u5faa\u73af"},{"location":"common-programing-concepts/#for","text":"\u53ef\u4ee5\u4f7f\u7528 for \u5faa\u73af\u6765\u5bf9\u4e00\u4e2a\u96c6\u5408\u7684\u6bcf\u4e2a\u5143\u7d20\u6267\u884c\u4e00\u4e9b\u4ee3\u7801\u3002 fn main () { let a = [ 10 , 20 , 30 , 40 , 50 ]; for element in a { println! ( \"the value is: {element}\" ); } } for \u5faa\u73af\u7684\u5b89\u5168\u6027\u548c\u7b80\u6d01\u6027\u4f7f\u5f97\u5b83\u6210\u4e3a Rust \u4e2d\u5728\u7528\u4e8e\u904d\u5386\u6570\u7ec4\u65f6\u662f\u4f7f\u7528\u6700\u591a\u7684\u5faa\u73af\u7ed3\u6784\u3002 \u53e6\u4e00\u4e2a\u4f8b\u5b50\uff1a fn main () { // \u904d\u5386\u6807\u51c6\u5e93\u63d0\u4f9b\u7684\u7c7b\u578bRange\u7c7b\u578b // \u7528\u6765\u751f\u6210\u4ece\u4e00\u4e2a\u6570\u5b57\u5f00\u59cb\u5230\u53e6\u4e00\u4e2a\u6570\u5b57\u4e4b\u524d\u7ed3\u675f\u7684\u6240\u6709\u6570\u5b57\u7684\u5e8f\u5217\u3002 // rev\uff0c\u7528\u6765\u53cd\u8f6c range for number in ( 1 .. 4 ). rev () { println! ( \"{number}!\" ); } println! ( \"LIFTOFF!!!\" ); }","title":"for \u5faa\u73af"},{"location":"enumerations/","text":"\u679a\u4e3e \u679a\u4e3e \uff08enumerations\uff09\uff0c\u4e5f\u88ab\u79f0\u4f5c enums \u3002 \u679a\u4e3e\u5141\u8bb8\u4f60\u901a\u8fc7\u5217\u4e3e\u53ef\u80fd\u7684 \u6210\u5458 \uff08variants\uff09 \u6765\u5b9a\u4e49\u4e00\u4e2a\u7c7b\u578b\u3002 \u9996\u5148\uff0c\u6211\u4eec\u4f1a\u5b9a\u4e49\u5e76\u4f7f\u7528\u4e00\u4e2a\u679a\u4e3e\u6765\u5c55\u793a\u5b83\u662f\u5982\u4f55\u8fde\u540c\u6570\u636e\u4e00\u8d77\u7f16\u7801\u4fe1\u606f\u7684\u3002 \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u4f1a\u63a2\u7d22\u4e00\u4e2a\u7279\u522b\u6709\u7528\u7684\u679a\u4e3e\uff0c\u53eb\u505a Option\uff0c\u5b83\u4ee3\u8868\u4e00\u4e2a\u503c\u8981\u4e48\u662f\u67d0\u4e2a\u503c\u8981\u4e48\u4ec0\u4e48\u90fd\u4e0d\u662f\u3002 \u7136\u540e\u4f1a\u8bb2\u5230\u5728 match \u8868\u8fbe\u5f0f\u4e2d\u7528\u6a21\u5f0f\u5339\u914d\uff0c\u9488\u5bf9\u4e0d\u540c\u7684\u679a\u4e3e\u503c\u7f16\u5199\u76f8\u5e94\u8981\u6267\u884c\u7684\u4ee3\u7801\u3002 \u6700\u540e\u4f1a\u4ecb\u7ecd if let\uff0c\u53e6\u4e00\u4e2a\u7b80\u6d01\u65b9\u4fbf\u5904\u7406\u4ee3\u7801\u4e2d\u679a\u4e3e\u7684\u7ed3\u6784\u3002 \u5b9a\u4e49 \u7ed3\u6784\u4f53\u7ed9\u4e88\u4f60\u5c06\u5b57\u6bb5\u548c\u6570\u636e\u805a\u5408\u5728\u4e00\u8d77\u7684\u65b9\u6cd5 \uff0c\u50cf Rectangle \u7ed3\u6784\u4f53\u6709 width \u548c height \u4e24\u4e2a\u5b57\u6bb5\u3002 \u800c\u679a\u4e3e\u7ed9\u4e88\u4f60\u5c06\u4e00\u4e2a\u503c\u6210\u4e3a\u4e00\u4e2a\u96c6\u5408\u4e4b\u4e00\u7684\u65b9\u6cd5 \u3002\u6bd4\u5982\uff0c\u6211\u4eec\u60f3\u8ba9 Rectangle \u662f\u4e00\u4e9b\u5f62\u72b6\u7684\u96c6\u5408\uff0c\u5305\u542b Circle \u548c Triangle \u3002 \u4e3a\u4e86\u505a\u5230\u8fd9\u4e2a\uff0cRust\u63d0\u4f9b\u4e86\u679a\u4e3e\u7c7b\u578b\u3002 \u5047\u8bbe\u6211\u4eec\u8981\u5904\u7406 IP \u5730\u5740\u3002\u76ee\u524d\u88ab\u5e7f\u6cdb\u4f7f\u7528\u7684\u4e24\u4e2a\u4e3b\u8981 IP \u6807\u51c6\uff1a IPv4 \uff08version four\uff09\u548c IPv6 \uff08version six\uff09\u3002\u6240\u4ee5\u53ef\u4ee5 \u679a\u4e3e \u51fa\u6240\u6709\u53ef\u80fd\u7684\u503c\uff0c\u8fd9\u4e5f\u6b63\u662f\u6b64\u679a\u4e3e\u540d\u5b57\u7684\u7531\u6765\u3002 \u4efb\u4f55\u4e00\u4e2a IP \u5730\u5740\u8981\u4e48\u662f IPv4 \u7684\u8981\u4e48\u662f IPv6 \u7684\uff0c\u800c\u4e14\u4e0d\u80fd\u4e24\u8005\u90fd\u662f\u3002 IP \u5730\u5740\u7684\u8fd9\u4e2a\u7279\u6027\u4f7f\u5f97\u679a\u4e3e\u6570\u636e\u7ed3\u6784\u975e\u5e38\u9002\u5408\u8fd9\u4e2a\u573a\u666f\uff0c\u56e0\u4e3a\u679a\u4e3e\u503c\u53ea\u53ef\u80fd\u662f\u5176\u4e2d\u4e00\u4e2a\u6210\u5458\u3002 IPv4 \u548c IPv6 \u4ece\u6839\u672c\u4e0a\u8bb2\u4ecd\u662f IP \u5730\u5740\uff0c\u6240\u4ee5\u5f53\u4ee3\u7801\u5728\u5904\u7406\u9002\u7528\u4e8e\u4efb\u4f55\u7c7b\u578b\u7684 IP \u5730\u5740\u7684\u573a\u666f\u65f6\u5e94\u8be5\u628a\u5b83\u4eec\u5f53\u4f5c\u76f8\u540c\u7684\u7c7b\u578b\u3002 \u901a\u8fc7\u5728\u4ee3\u7801\u4e2d\u5b9a\u4e49\u4e00\u4e2a IpAddrKind \u679a\u4e3e\u6765\u8868\u73b0\u8fd9\u4e2a\u6982\u5ff5\u5e76\u5217\u51fa\u53ef\u80fd\u7684 IP \u5730\u5740\u7c7b\u578b\uff0c V4 \u548c V6 \u3002\u8fd9\u88ab\u79f0\u4e3a\u679a\u4e3e\u7684 \u6210\u5458 \uff08variants\uff09\uff1a enum IpAddrKind { V4 , V6 , } // \u73b0\u5728 IpAddrKind \u5c31\u662f\u4e00\u4e2a\u53ef\u4ee5\u5728\u4ee3\u7801\u4e2d\u4f7f\u7528\u7684\u81ea\u5b9a\u4e49\u6570\u636e\u7c7b\u578b\u4e86\u3002 \u679a\u4e3e\u503c \u53ef\u4ee5\u50cf\u8fd9\u6837\u521b\u5efa IpAddrKind \u4e24\u4e2a\u4e0d\u540c\u6210\u5458\u7684\u5b9e\u4f8b\uff1a let four = IpAddrKind :: V4 ; let six = IpAddrKind :: V6 ; \u6ce8\u610f\u679a\u4e3e\u7684\u6210\u5458\u4f4d\u4e8e\u5176\u6807\u8bc6\u7b26\u7684\u547d\u540d\u7a7a\u95f4\u4e2d\uff0c\u5e76\u4f7f\u7528 \u4e24\u4e2a\u5192\u53f7 \u5206\u5f00\u3002 \u63a5\u7740\u53ef\u4ee5\u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570\u6765\u83b7\u53d6\u4efb\u4f55 IpAddrKind \uff1a fn route ( ip_kind : IpAddrKind ) {} \u73b0\u5728\u53ef\u4ee5\u4f7f\u7528\u4efb\u4e00\u6210\u5458\u6765\u8c03\u7528\u8fd9\u4e2a\u51fd\u6570\uff1a route ( IpAddrKind :: V4 ); route ( IpAddrKind :: V6 ); \u4f7f\u7528\u679a\u4e3e\u751a\u81f3\u8fd8\u6709\u66f4\u591a\u4f18\u52bf\u3002\u8fdb\u4e00\u6b65\u8003\u8651\u4e00\u4e0b IP \u5730\u5740\u7c7b\u578b\uff0c\u76ee\u524d\u6ca1\u6709\u4e00\u4e2a\u5b58\u50a8\u5b9e\u9645 IP \u5730\u5740 \u6570\u636e \u7684\u65b9\u6cd5\uff1b\u53ea\u77e5\u9053\u5b83\u662f\u4ec0\u4e48 \u7c7b\u578b \u7684\u3002 \u8003\u8651\u5230\u5df2\u7ecf\u5b66\u4e60\u8fc7\u7ed3\u6784\u4f53\u4e86\uff0c\u4f60\u53ef\u80fd\u4f1a\u5982\u4e0b\u793a\u4f8b\u90a3\u6837\u5904\u7406\u8fd9\u4e2a\u95ee\u9898\uff1a enum IpAddrKind { V4 , V6 , } struct IpAddr { kind : IpAddrKind , address : String , } let home = IpAddr { kind : IpAddrKind :: V4 , address : String :: from ( \"127.0.0.1\" ), }; let loopback = IpAddr { kind : IpAddrKind :: V6 , address : String :: from ( \"::1\" ), }; \u53ef\u4ee5\u4f7f\u7528\u4e00\u79cd\u66f4\u7b80\u6d01\u7684\u65b9\u5f0f\u6765\u8868\u8fbe\u76f8\u540c\u7684\u6982\u5ff5 \uff0c\u4ec5\u4ec5\u4f7f\u7528\u679a\u4e3e\u5e76\u5c06\u6570\u636e\u76f4\u63a5\u653e\u8fdb\u6bcf\u4e00\u4e2a\u679a\u4e3e\u6210\u5458\uff0c\u800c\u4e0d\u662f\u5c06\u679a\u4e3e\u4f5c\u4e3a\u7ed3\u6784\u4f53\u7684\u4e00\u90e8\u5206\u3002 IpAddr \u679a\u4e3e\u7684\u65b0\u5b9a\u4e49\u8868\u660e\u4e86 V4 \u548c V6 \u6210\u5458\u90fd\u5173\u8054\u4e86 String \u503c\uff1a enum IpAddr { V4 ( String ), V6 ( String ), } let home = IpAddr :: V4 ( String :: from ( \"127.0.0.1\" )); let loopback = IpAddr :: V6 ( String :: from ( \"::1\" )); \u8fd9\u6837\u76f4\u63a5\u5c06\u6570\u636e\u9644\u52a0\u5230\u679a\u4e3e\u7684\u6bcf\u4e2a\u6210\u5458\u4e0a\uff0c\u8fd9\u6837\u5c31\u4e0d\u9700\u8981\u4e00\u4e2a\u989d\u5916\u7684\u7ed3\u6784\u4f53\u4e86\u3002 \u53e6\u4e00\u4e2a\u7ec6\u8282\uff1a \u6bcf\u4e00\u4e2a\u6211\u4eec\u5b9a\u4e49\u7684\u679a\u4e3e\u6210\u5458\u7684\u540d\u5b57\u4e5f\u53d8\u6210\u4e86\u4e00\u4e2a\u6784\u5efa\u679a\u4e3e\u7684\u5b9e\u4f8b\u7684\u51fd\u6570 \u3002\u4e5f\u5c31\u662f\u8bf4\uff0c IpAddr::V4() \u662f\u4e00\u4e2a\u83b7\u53d6 String \u53c2\u6570\u5e76\u8fd4\u56de IpAddr \u7c7b\u578b\u5b9e\u4f8b\u7684\u51fd\u6570\u8c03\u7528\u3002 \u4f5c\u4e3a\u5b9a\u4e49\u679a\u4e3e\u7684\u7ed3\u679c\uff0c\u8fd9\u4e9b \u6784\u9020\u51fd\u6570\u4f1a\u81ea\u52a8\u88ab\u5b9a\u4e49 \u3002 \u7528\u679a\u4e3e\u66ff\u4ee3\u7ed3\u6784\u4f53\u8fd8\u6709\u53e6\u4e00\u4e2a\u4f18\u52bf\uff1a \u6bcf\u4e2a\u6210\u5458\u53ef\u4ee5\u5904\u7406\u4e0d\u540c\u7c7b\u578b\u548c\u6570\u91cf\u7684\u6570\u636e \u3002 \u5982\u4e0b: enum IpAddr { V4 ( u8 , u8 , u8 , u8 ), V6 ( String ), } let home = IpAddr :: V4 ( 127 , 0 , 0 , 1 ); let loopback = IpAddr :: V6 ( String :: from ( \"::1\" )); \u4e8b\u5b9e\u8bc1\u660e\u5b58\u50a8\u548c\u7f16\u7801 IP \u5730\u5740\u5b9e\u5728\u662f\u592a\u5e38\u89c1\u4e86 \u4ee5\u81f4\u6807\u51c6\u5e93\u63d0\u4f9b\u4e86\u4e00\u4e2a\u5f00\u7bb1\u5373\u7528\u7684\u5b9a\u4e49\uff01 \u6807\u51c6\u5e93\u662f\u5982\u4f55\u5b9a\u4e49 IpAddr \u7684\uff1a\u5b83\u6b63\u6709\u7740\u8ddf\u6211\u4eec\u5b9a\u4e49\u548c\u4f7f\u7528\u7684\u4e00\u6837\u7684\u679a\u4e3e\u548c\u6210\u5458\uff0c\u4e0d\u8fc7\u5b83\u5c06\u6210\u5458\u4e2d\u7684\u5730\u5740\u6570\u636e\u5d4c\u5165\u5230\u4e86\u4e24\u4e2a\u4e0d\u540c\u5f62\u5f0f\u7684\u7ed3\u6784\u4f53\u4e2d\uff0c\u5b83\u4eec\u5bf9\u4e0d\u540c\u7684\u6210\u5458\u7684\u5b9a\u4e49\u662f\u4e0d\u540c\u7684\uff1a struct Ipv4Addr { // --snip-- } struct Ipv6Addr { // --snip-- } enum IpAddr { V4 ( Ipv4Addr ), V6 ( Ipv6Addr ), } \u8fd9\u4e9b\u4ee3\u7801\u5c55\u793a\u4e86\u53ef\u4ee5\u5c06\u4efb\u610f\u7c7b\u578b\u7684\u6570\u636e\u653e\u5165\u679a\u4e3e\u6210\u5458\u4e2d\uff1a\u4f8b\u5982 \u5b57\u7b26\u4e32 \u3001 \u6570\u5b57\u7c7b\u578b \u6216\u8005 \u7ed3\u6784\u4f53 \u3002\u751a\u81f3\u53ef\u4ee5\u5305\u542b\u53e6\u4e00\u4e2a \u679a\u4e3e \uff01 \u867d\u7136\u6807\u51c6\u5e93\u4e2d\u5305\u542b\u4e00\u4e2a IpAddr \u7684\u5b9a\u4e49\uff0c\u4ecd\u7136\u53ef\u4ee5\u521b\u5efa\u548c\u4f7f\u7528\u6211\u4eec\u81ea\u5df1\u7684\u5b9a\u4e49\u800c\u4e0d\u4f1a\u6709\u51b2\u7a81\uff0c\u56e0\u4e3a\u6211\u4eec\u5e76\u6ca1\u6709\u5c06\u6807\u51c6\u5e93\u4e2d\u7684\u5b9a\u4e49\u5f15\u5165\u4f5c\u7528\u57df\u3002 enum Message { Quit , // Quit \u6ca1\u6709\u5173\u8054\u4efb\u4f55\u6570\u636e\u3002 Move { x : i32 , y : i32 }, // Move \u7c7b\u4f3c\u7ed3\u6784\u4f53\u5305\u542b\u547d\u540d\u5b57\u6bb5\u3002 Write ( String ), // Write \u5305\u542b\u5355\u72ec\u4e00\u4e2a String\u3002 ChangeColor ( i32 , i32 , i32 ), // ChangeColor \u5305\u542b\u4e09\u4e2a i32\u3002 } \u5b9a\u4e49\u4e00\u4e2a\u6709\u5173\u8054\u503c\u7684\u679a\u4e3e\u7684\u65b9\u5f0f\u548c\u5b9a\u4e49\u591a\u4e2a\u4e0d\u540c\u7c7b\u578b\u7684\u7ed3\u6784\u4f53\u7684\u65b9\u5f0f\u5f88\u76f8\u50cf\uff0c\u9664\u4e86\u679a\u4e3e\u4e0d\u4f7f\u7528 struct \u5173\u952e\u5b57\u4ee5\u53ca\u5176\u6240\u6709\u6210\u5458\u90fd\u88ab\u7ec4\u5408\u5728\u4e00\u8d77\u4f4d\u4e8e Message \u7c7b\u578b\u4e0b\u3002 \u5982\u4e0b\u8fd9\u4e9b\u7ed3\u6784\u4f53\u53ef\u4ee5\u5305\u542b\u4e0e\u4e4b\u524d\u679a\u4e3e\u6210\u5458\u4e2d\u76f8\u540c\u7684\u6570\u636e\uff1a struct QuitMessage ; // \u7c7b\u5355\u5143\u7ed3\u6784\u4f53 struct MoveMessage { x : i32 , y : i32 , } struct WriteMessage ( String ); // \u5143\u7ec4\u7ed3\u6784\u4f53 struct ChangeColorMessage ( i32 , i32 , i32 ); // \u5143\u7ec4\u7ed3\u6784\u4f53 \u4e0d\u8fc7\uff0c\u5982\u679c\u6211\u4eec\u4f7f\u7528\u4e0d\u540c\u7684\u7ed3\u6784\u4f53\uff0c\u7531\u4e8e\u5b83\u4eec\u90fd\u6709\u4e0d\u540c\u7684\u7c7b\u578b\uff0c\u6211\u4eec\u5c06\u4e0d\u80fd\u50cf\u4f7f\u7528 Message \u679a\u4e3e\u90a3\u6837\uff0c\u8f7b\u6613\u7684\u5b9a\u4e49\u4e00\u4e2a\u80fd\u591f\u5904\u7406\u8fd9\u4e9b\u4e0d\u540c\u7c7b\u578b\u7684\u7ed3\u6784\u4f53\u7684\u51fd\u6570\uff0c\u56e0\u4e3a \u679a\u4e3e\u662f\u5355\u72ec\u4e00\u4e2a\u7c7b\u578b \u3002 \u7ed3\u6784\u4f53\u548c\u679a\u4e3e\u8fd8\u6709\u53e6\u4e00\u4e2a\u76f8\u4f3c\u70b9\uff1a \u5c31\u50cf\u53ef\u4ee5\u4f7f\u7528 impl \u6765\u4e3a\u7ed3\u6784\u4f53\u5b9a\u4e49\u65b9\u6cd5\u90a3\u6837\uff0c\u4e5f\u53ef\u4ee5\u5728\u679a\u4e3e\u4e0a\u5b9a\u4e49\u65b9\u6cd5 \u3002\u8fd9\u662f\u4e00\u4e2a\u5b9a\u4e49\u4e8e\u6211\u4eec Message \u679a\u4e3e\u4e0a\u7684\u53eb\u505a call \u7684\u65b9\u6cd5\uff1a impl Message { // \u65b9\u6cd5\u4f53\u4f7f\u7528\u4e86 self \u6765\u83b7\u53d6\u8c03\u7528\u65b9\u6cd5\u7684\u503c\u3002 fn call ( & self ) { // \u5728\u8fd9\u91cc\u5b9a\u4e49\u65b9\u6cd5\u4f53 } } let m = Message :: Write ( String :: from ( \"hello\" )); m . call (); // \u53d8\u91cf m\uff0c\u5c31\u662f\u5f53 m.call() \u8fd0\u884c\u65f6 call \u65b9\u6cd5\u4e2d\u7684 self \u7684\u503c\u3002 Option \u679a\u4e3e Option \u662f\u6807\u51c6\u5e93\u5b9a\u4e49\u7684\u53e6\u4e00\u4e2a\u679a\u4e3e\u3002 Option \u7c7b\u578b\u5e94\u7528\u5e7f\u6cdb\u56e0\u4e3a\u5b83\u7f16\u7801\u4e86\u4e00\u4e2a\u975e\u5e38\u666e\u904d\u7684\u573a\u666f\uff0c\u5373\u4e00\u4e2a\u503c\u8981\u4e48\u6709\u503c\u8981\u4e48\u6ca1\u503c\u3002 \u4f8b\u5982\uff0c\u5982\u679c\u8bf7\u6c42\u4e00\u4e2a\u5305\u542b\u9879\u7684\u5217\u8868\u7684\u7b2c\u4e00\u4e2a\u503c\uff0c\u4f1a\u5f97\u5230\u4e00\u4e2a\u503c\uff0c\u5982\u679c\u8bf7\u6c42\u4e00\u4e2a\u7a7a\u7684\u5217\u8868\uff0c\u5c31\u4ec0\u4e48\u4e5f\u4e0d\u4f1a\u5f97\u5230\u3002\u4ece\u7c7b\u578b\u7cfb\u7edf\u7684\u89d2\u5ea6\u6765\u8868\u8fbe\u8fd9\u4e2a\u6982\u5ff5\u5c31\u610f\u5473\u7740\u7f16\u8bd1\u5668\u9700\u8981\u68c0\u67e5\u662f\u5426\u5904\u7406\u4e86\u6240\u6709\u5e94\u8be5\u5904\u7406\u7684\u60c5\u51b5\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u907f\u514d\u5728\u5176\u4ed6\u7f16\u7a0b\u8bed\u8a00\u4e2d\u975e\u5e38\u5e38\u89c1\u7684 bug\u3002 \u7f16\u7a0b\u8bed\u8a00\u7684\u8bbe\u8ba1\u7ecf\u5e38\u8981\u8003\u8651\u5305\u542b\u54ea\u4e9b\u529f\u80fd\uff0c\u4f46\u8003\u8651\u6392\u9664\u54ea\u4e9b\u529f\u80fd\u4e5f\u5f88\u91cd\u8981\u3002Rust \u5e76\u6ca1\u6709\u5f88\u591a\u5176\u4ed6\u8bed\u8a00\u4e2d\u6709\u7684\u7a7a\u503c\u529f\u80fd\u3002 \u7a7a\u503c \uff08Null \uff09\u662f\u4e00\u4e2a\u503c\uff0c\u5b83\u4ee3\u8868\u6ca1\u6709\u503c\u3002\u5728\u6709\u7a7a\u503c\u7684\u8bed\u8a00\u4e2d\uff0c\u53d8\u91cf\u603b\u662f\u8fd9\u4e24\u79cd\u72b6\u6001\u4e4b\u4e00\uff1a\u7a7a\u503c\u548c\u975e\u7a7a\u503c\u3002 \u7a7a\u503c\u7684\u95ee\u9898\u5728\u4e8e\u5f53\u4f60\u5c1d\u8bd5\u50cf\u4e00\u4e2a\u975e\u7a7a\u503c\u90a3\u6837\u4f7f\u7528\u4e00\u4e2a\u7a7a\u503c\uff0c\u4f1a\u51fa\u73b0\u67d0\u79cd\u5f62\u5f0f\u7684\u9519\u8bef\u3002\u56e0\u4e3a\u7a7a\u548c\u975e\u7a7a\u7684\u5c5e\u6027\u65e0\u5904\u4e0d\u5728\uff0c\u975e\u5e38\u5bb9\u6613\u51fa\u73b0\u8fd9\u7c7b\u9519\u8bef\u3002 \u7136\u800c\uff0c\u7a7a\u503c\u5c1d\u8bd5\u8868\u8fbe\u7684\u6982\u5ff5\u4ecd\u7136\u662f\u6709\u610f\u4e49\u7684\uff1a \u7a7a\u503c\u662f\u4e00\u4e2a\u56e0\u4e3a\u67d0\u79cd\u539f\u56e0\u76ee\u524d\u65e0\u6548\u6216\u7f3a\u5931\u7684\u503c \u3002 \u95ee\u9898\u4e0d\u5728\u4e8e\u6982\u5ff5\u800c\u5728\u4e8e\u5177\u4f53\u7684\u5b9e\u73b0\u3002\u4e3a\u6b64\uff0cRust \u5e76\u6ca1\u6709\u7a7a\u503c\uff0c\u4e0d\u8fc7\u5b83\u786e\u5b9e\u62e5\u6709\u4e00\u4e2a\u53ef\u4ee5\u7f16\u7801\u5b58\u5728\u6216\u4e0d\u5b58\u5728\u6982\u5ff5\u7684\u679a\u4e3e\u3002\u8fd9\u4e2a\u679a\u4e3e\u662f Option<T> \uff0c\u800c\u4e14\u5b83 \u5b9a\u4e49\u4e8e\u6807\u51c6\u5e93\u4e2d \uff0c\u5982\u4e0b: enum Option < T > { None , Some ( T ), } Option<T> \u679a\u4e3e\u662f\u5982\u6b64\u6709\u7528\u4ee5\u81f3\u4e8e\u5b83\u751a\u81f3\u88ab\u5305\u542b\u5728\u4e86 prelude \u4e4b\u4e2d\uff0c\u4f60\u4e0d\u9700\u8981\u5c06\u5176\u663e\u5f0f\u5f15\u5165\u4f5c\u7528\u57df\u3002 \u53e6\u5916\uff0c\u5b83\u7684\u6210\u5458\u4e5f\u662f\u5982\u6b64\uff0c\u53ef\u4ee5\u4e0d\u9700\u8981 Option:: \u524d\u7f00\u6765\u76f4\u63a5\u4f7f\u7528 Some \u548c None \u3002 \u5373\u4fbf\u5982\u6b64 Option<T> \u4e5f\u4ecd\u662f\u5e38\u89c4\u7684\u679a\u4e3e\uff0c Some(T) \u548c None \u4ecd\u662f Option<T> \u7684\u6210\u5458\u3002 <T> \u8bed\u6cd5\u662f\u4e00\u4e2a\u6211\u4eec\u8fd8\u672a\u8bb2\u5230\u7684 Rust \u529f\u80fd\u3002\u5b83\u662f\u4e00\u4e2a\u6cdb\u578b\u7c7b\u578b\u53c2\u6570\uff0c\u7b2c\u5341\u7ae0\u4f1a\u66f4\u8be6\u7ec6\u7684\u8bb2\u89e3\u6cdb\u578b\u3002 let some_number = Some ( 5 ); // \u7c7b\u578b\u662f Option<i32> let some_char = Some ( 'e' ); // \u7c7b\u578b\u662f Option<char> let absent_number : Option < i32 > = None ; // \u5bf9\u4e8e absent_number\uff0c Rust \u9700\u8981\u6211\u4eec\u6307\u5b9a Option \u6574\u4f53\u7684\u7c7b\u578b // \u56e0\u4e3a\u7f16\u8bd1\u5668\u53ea\u901a\u8fc7 None \u503c\u65e0\u6cd5\u63a8\u65ad\u51fa Some \u6210\u5458\u4fdd\u5b58\u7684\u503c\u7684\u7c7b\u578b\u3002 // \u8fd9\u91cc\u6211\u4eec\u544a\u8bc9 Rust \u5e0c\u671b absent_number \u662f Option<i32> \u7c7b\u578b\u7684\u3002 \u5f53\u6709\u4e00\u4e2a Some \u503c\u65f6\uff0c\u6211\u4eec\u5c31\u77e5\u9053\u5b58\u5728\u4e00\u4e2a\u503c\uff0c\u800c\u8fd9\u4e2a\u503c\u4fdd\u5b58\u5728 Some \u4e2d\u3002\u5f53\u6709\u4e2a None \u503c\u65f6\uff0c\u5728\u67d0\u79cd\u610f\u4e49\u4e0a\uff0c\u5b83\u8ddf\u7a7a\u503c\u5177\u6709\u76f8\u540c\u7684\u610f\u4e49\uff1a \u5e76\u6ca1\u6709\u4e00\u4e2a\u6709\u6548\u7684\u503c \u3002\u90a3\u4e48\uff0c Option<T> \u4e3a\u4ec0\u4e48\u5c31\u6bd4\u7a7a\u503c\u8981\u597d\u5462\uff1f \u7b80\u800c\u8a00\u4e4b\uff0c\u56e0\u4e3a Option<T> \u548c T \uff08\u8fd9\u91cc T \u53ef\u4ee5\u662f\u4efb\u4f55\u7c7b\u578b\uff09\u662f\u4e0d\u540c\u7684\u7c7b\u578b\uff0c\u7f16\u8bd1\u5668\u4e0d\u5141\u8bb8\u50cf\u4e00\u4e2a\u80af\u5b9a\u6709\u6548\u7684\u503c\u90a3\u6837\u4f7f\u7528 Option<T> \u3002\u4f8b\u5982\uff0c\u8fd9\u6bb5\u4ee3\u7801\u4e0d\u80fd\u7f16\u8bd1\uff0c\u56e0\u4e3a\u5b83\u5c1d\u8bd5\u5c06 Option<i8> \u4e0e i8 \u76f8\u52a0\uff1a let x : i8 = 5 ; let y : Option < i8 > = Some ( 5 ); let sum = x + y ; \u5982\u679c\u8fd0\u884c\u8fd9\u4e9b\u4ee3\u7801\uff0c\u5c06\u5f97\u5230\u7c7b\u4f3c\u8fd9\u6837\u7684\u9519\u8bef\u4fe1\u606f\uff1a $ cargo run Compiling enums v0.1.0 ( file:///projects/enums ) error [ E0277 ] : cannot add ` Option<i8> ` to ` i8 ` --> src/main.rs:5:17 | 5 | let sum = x + y ; | ^ no implementation for ` i8 + Option<i8> ` | = help: the trait ` Add<Option<i8>> ` is not implemented for ` i8 ` For more information about this error, try ` rustc --explain E0277 ` . error: could not compile ` enums ` due to previous error \u9519\u8bef\u4fe1\u606f\u610f\u5473\u7740 Rust \u4e0d\u77e5\u9053\u8be5\u5982\u4f55\u5c06 Option<i8> \u4e0e i8 \u76f8\u52a0\uff0c\u56e0\u4e3a\u5b83\u4eec\u7684\u7c7b\u578b\u4e0d\u540c\u3002 \u5f53\u5728 Rust \u4e2d\u62e5\u6709\u4e00\u4e2a\u50cf i8 \u8fd9\u6837\u7c7b\u578b\u7684\u503c\u65f6\uff0c\u7f16\u8bd1\u5668\u786e\u4fdd\u5b83\u603b\u662f\u6709\u4e00\u4e2a\u6709\u6548\u7684\u503c\u3002\u6211\u4eec\u53ef\u4ee5\u81ea\u4fe1\u4f7f\u7528\u800c\u65e0\u9700\u505a\u7a7a\u503c\u68c0\u67e5\u3002 \u53ea\u6709\u5f53\u4f7f\u7528 Option<i8> \uff08\u6216\u8005\u4efb\u4f55\u7528\u5230\u7684\u7c7b\u578b\uff09\u7684\u65f6\u5019\u9700\u8981\u62c5\u5fc3\u53ef\u80fd\u6ca1\u6709\u503c\uff0c\u800c \u7f16\u8bd1\u5668\u4f1a\u786e\u4fdd\u6211\u4eec\u5728\u4f7f\u7528\u503c\u4e4b\u524d\u5904\u7406\u4e86\u4e3a\u7a7a\u7684\u60c5\u51b5\u3002 \u6362\u53e5\u8bdd\u8bf4\uff0c\u5728\u5bf9 Option<T> \u8fdb\u884c T \u7684\u8fd0\u7b97\u4e4b\u524d\u5fc5\u987b\u5c06\u5176\u8f6c\u6362\u4e3a T \u3002\u901a\u5e38\u8fd9\u80fd\u5e2e\u52a9\u6211\u4eec\u6355\u83b7\u5230\u7a7a\u503c\u6700\u5e38\u89c1\u7684\u95ee\u9898\u4e4b\u4e00\uff1a \u5047\u8bbe\u67d0\u503c\u4e0d\u4e3a\u7a7a\u4f46\u5b9e\u9645\u4e0a\u4e3a\u7a7a\u7684\u60c5\u51b5\u3002 \u6d88\u9664\u4e86\u9519\u8bef\u5730\u5047\u8bbe\u4e00\u4e2a\u975e\u7a7a\u503c\u7684\u98ce\u9669\uff0c\u4f1a\u8ba9\u4f60\u5bf9\u4ee3\u7801\u66f4\u52a0\u6709\u4fe1\u5fc3\u3002 \u4e3a\u4e86\u62e5\u6709\u4e00\u4e2a\u53ef\u80fd\u4e3a\u7a7a\u7684\u503c\uff0c\u4f60\u5fc5\u987b\u8981\u663e\u5f0f\u7684\u5c06\u5176\u653e\u5165\u5bf9\u5e94\u7c7b\u578b\u7684 Option<T> \u4e2d\u3002 \u63a5\u7740\uff0c\u5f53\u4f7f\u7528\u8fd9\u4e2a\u503c\u65f6\uff0c\u5fc5\u987b\u660e\u786e\u7684\u5904\u7406\u503c\u4e3a\u7a7a\u7684\u60c5\u51b5\u3002\u53ea\u8981\u4e00\u4e2a\u503c\u4e0d\u662f Option<T> \u7c7b\u578b\uff0c\u4f60\u5c31 \u53ef\u4ee5 \u5b89\u5168\u7684\u8ba4\u5b9a\u5b83\u7684\u503c\u4e0d\u4e3a\u7a7a\u3002 \u8fd9\u662f Rust \u7684\u4e00\u4e2a\u7ecf\u8fc7\u6df1\u601d\u719f\u8651\u7684\u8bbe\u8ba1\u51b3\u7b56\uff0c\u6765\u9650\u5236\u7a7a\u503c\u7684\u6cdb\u6ee5\u4ee5\u589e\u52a0 Rust \u4ee3\u7801\u7684\u5b89\u5168\u6027\u3002 \u90a3\u4e48\u5f53\u6709\u4e00\u4e2a Option<T> \u7684\u503c\u65f6\uff0c\u5982\u4f55\u4ece Some \u6210\u5458\u4e2d\u53d6\u51fa T \u7684\u503c\u6765\u4f7f\u7528\u5b83\u5462\uff1f Option<T> \u679a\u4e3e\u62e5\u6709\u5927\u91cf\u7528\u4e8e\u5404\u79cd\u60c5\u51b5\u7684\u65b9\u6cd5\uff1a\u4f60\u53ef\u4ee5\u67e5\u770b \u5b83\u7684\u6587\u6863 \u3002 \u719f\u6089 Option<T> \u7684\u65b9\u6cd5\u5c06\u5bf9\u4f60\u7684 Rust \u4e4b\u65c5\u975e\u5e38\u6709\u7528\u3002 \u603b\u7684\u6765\u8bf4\uff0c\u4e3a\u4e86\u4f7f\u7528 Option<T> \u503c\uff0c \u9700\u8981\u7f16\u5199\u5904\u7406\u6bcf\u4e2a\u6210\u5458\u7684\u4ee3\u7801\u3002 \u4f60\u60f3\u8981\u4e00\u4e9b\u4ee3\u7801\u53ea\u5f53\u62e5\u6709 Some(T) \u503c\u65f6\u8fd0\u884c\uff0c\u5141\u8bb8\u8fd9\u4e9b\u4ee3\u7801\u4f7f\u7528\u5176\u4e2d\u7684 T \u3002 \u4e5f\u5e0c\u671b\u4e00\u4e9b\u4ee3\u7801\u5728\u503c\u4e3a None \u65f6\u8fd0\u884c\uff0c\u8fd9\u4e9b\u4ee3\u7801\u5e76\u6ca1\u6709\u4e00\u4e2a\u53ef\u7528\u7684 T \u503c\u3002 match \u8868\u8fbe\u5f0f\u5c31\u662f\u8fd9\u4e48\u4e00\u4e2a\u5904\u7406\u679a\u4e3e\u7684\u63a7\u5236\u6d41\u7ed3\u6784\uff1a \u5b83\u4f1a\u6839\u636e\u679a\u4e3e\u7684\u6210\u5458\u8fd0\u884c\u4e0d\u540c\u7684\u4ee3\u7801\uff0c\u8fd9\u4e9b\u4ee3\u7801\u53ef\u4ee5\u4f7f\u7528\u5339\u914d\u5230\u7684\u503c\u4e2d\u7684\u6570\u636e \u3002 match\u63a7\u5236\u6d41 Rust \u6709\u4e00\u4e2a\u53eb\u505a match \u7684\u6781\u4e3a\u5f3a\u5927\u7684\u63a7\u5236\u6d41\u8fd0\u7b97\u7b26\uff0c\u5b83\u5141\u8bb8\u6211\u4eec \u5c06\u4e00\u4e2a\u503c\u4e0e\u4e00\u7cfb\u5217\u7684\u6a21\u5f0f\u76f8\u6bd4\u8f83\uff0c\u5e76\u6839\u636e\u76f8\u5339\u914d\u7684\u6a21\u5f0f\u6267\u884c\u76f8\u5e94\u4ee3\u7801 \u3002\u6a21\u5f0f\u53ef\u7531 \u5b57\u9762\u503c \u3001 \u53d8\u91cf \u3001 \u901a\u914d\u7b26 \u548c\u8bb8\u591a \u5176\u4ed6\u5185\u5bb9 \u6784\u6210\uff1b match \u7684\u529b\u91cf\u6765\u6e90\u4e8e\u6a21\u5f0f\u7684\u8868\u73b0\u529b\u4ee5\u53ca\u7f16\u8bd1\u5668\u68c0\u67e5\uff0c\u5b83\u786e\u4fdd\u4e86\u6240\u6709\u53ef\u80fd\u7684\u60c5\u51b5\u90fd\u5f97\u5230\u5904\u7406\u3002 \u7f16\u5199\u4e00\u4e2a\u51fd\u6570\u6765\u83b7\u53d6\u4e00\u4e2a\u672a\u77e5\u7684\u786c\u5e01\uff0c\u5e76\u4ee5\u4e00\u79cd\u7c7b\u4f3c\u9a8c\u949e\u673a\u7684\u65b9\u5f0f\uff0c\u786e\u5b9a\u5b83\u662f\u4f55\u79cd\u786c\u5e01\u5e76\u8fd4\u56de\u5b83\u7684\u7f8e\u5206\u503c: // \u4e00\u4e2a\u679a\u4e3e\u548c\u4e00\u4e2a\u4ee5\u679a\u4e3e\u6210\u5458\u4f5c\u4e3a\u6a21\u5f0f\u7684 match \u8868\u8fbe\u5f0f enum Coin { Penny , Nickel , Dime , Quarter , } fn value_in_cents ( coin : Coin ) -> u8 { // \u5217\u51fa match \u5173\u952e\u5b57\u540e\u8ddf\u4e00\u4e2a\u8868\u8fbe\u5f0f // \u770b\u8d77\u6765\u975e\u5e38\u50cf if \u4f7f\u7528\u7684\u8868\u8fbe\u5f0f\uff0c\u4e0d\u8fc7\u8fd9\u91cc\u6709\u4e00\u4e2a\u975e\u5e38\u5927\u7684\u533a\u522b\uff1a\u5bf9\u4e8e if\uff0c\u8868\u8fbe\u5f0f\u5fc5\u987b\u8fd4\u56de\u4e00\u4e2a\u5e03\u5c14\u503c\uff0c\u800c\u8fd9\u91cc\u5b83\u53ef\u4ee5\u662f\u4efb\u4f55\u7c7b\u578b // coin \u7684\u7c7b\u578b\u662f\u5b9a\u4e49\u7684 Coin \u679a\u4e3e\u3002 match coin { // \u63a5\u4e0b\u6765\u662f match \u7684\u5206\u652f // \u4e00\u4e2a\u5206\u652f\u6709\u4e24\u4e2a\u90e8\u5206\uff1a\u4e00\u4e2a\u6a21\u5f0f\u548c\u4e00\u4e9b\u4ee3\u7801\u3002 // => \u8fd0\u7b97\u7b26\u5c06\u6a21\u5f0f\u548c\u5c06\u8981\u8fd0\u884c\u7684\u4ee3\u7801\u5206\u5f00 // \u6bcf\u4e00\u4e2a\u5206\u652f\u4e4b\u95f4\u4f7f\u7528\u9017\u53f7\u5206\u9694\u3002 Coin :: Penny => 1 , // 1\u7f8e\u5206 Coin :: Nickel => 5 , // 5\u7f8e\u5206 Coin :: Dime => 10 , // 10\u7f8e\u5206 Coin :: Quarter => 25 , // 25\u7f8e\u5206 // \u5982\u679c\u6a21\u5f0f\u5339\u914d\u4e86\u8fd9\u4e2a\u503c\uff0c\u8fd9\u4e2a\u6a21\u5f0f\u76f8\u5173\u8054\u7684\u4ee3\u7801\u5c06\u88ab\u6267\u884c\u3002\u5982\u679c\u6a21\u5f0f\u5e76\u4e0d\u5339\u914d\u8fd9\u4e2a\u503c\uff0c\u5c06\u7ee7\u7eed\u6267\u884c\u4e0b\u4e00\u4e2a\u5206\u652f // \u53ef\u4ee5\u62e5\u6709\u4efb\u610f\u591a\u7684\u5206\u652f, \u8fd9\u91cc\u67094\u4e2a\u5206\u652f // \u6bcf\u4e2a\u5206\u652f\u76f8\u5173\u8054\u7684\u4ee3\u7801\u662f\u4e00\u4e2a\u8868\u8fbe\u5f0f\uff0c\u800c\u8868\u8fbe\u5f0f\u7684\u7ed3\u679c\u503c\u5c06\u4f5c\u4e3a\u6574\u4e2a match \u8868\u8fbe\u5f0f\u7684\u8fd4\u56de\u503c\u3002 } } \u5982\u679c\u5206\u652f\u4ee3\u7801\u8f83\u77ed\u7684\u8bdd\u901a\u5e38\u4e0d\u4f7f\u7528\u5927\u62ec\u53f7 \uff0c\u4e0a\u9762\u7684\u793a\u4f8b\u6bcf\u4e2a\u5206\u652f\u90fd\u53ea\u662f\u8fd4\u56de\u4e00\u4e2a\u503c\u3002 \u5982\u679c\u60f3\u8981\u5728\u5206\u652f\u4e2d\u8fd0\u884c\u591a\u884c\u4ee3\u7801\uff0c \u53ef\u4ee5\u4f7f\u7528\u5927\u62ec\u53f7\uff0c\u800c\u5206\u652f\u540e\u7684\u9017\u53f7\u662f\u53ef\u9009\u7684 \u3002 \u4f8b\u5982\uff0c\u5982\u4e0b\u4ee3\u7801\u5728\u6bcf\u6b21\u4f7f\u7528 Coin::Penny \u8c03\u7528\u65f6\u90fd\u4f1a\u6253\u5370\u51fa \u201cLucky penny!\u201d \uff0c\u540c\u65f6\u4ecd\u7136\u8fd4\u56de\u4ee3\u7801\u5757\u6700\u540e\u7684\u503c\uff0c1\uff1a fn value_in_cents ( coin : Coin ) -> u8 { match coin { Coin :: Penny => { println! ( \"Lucky penny!\" ); 1 } Coin :: Nickel => 5 , Coin :: Dime => 10 , Coin :: Quarter => 25 , } } \u7ed1\u5b9a\u503c\u7684\u6a21\u5f0f \u5339\u914d\u5206\u652f\u7684\u53e6\u4e00\u4e2a\u6709\u7528\u7684\u529f\u80fd\u662f\u53ef\u4ee5 \u7ed1\u5b9a\u5339\u914d\u7684\u6a21\u5f0f\u7684\u90e8\u5206\u503c \u3002\u8fd9\u4e5f\u5c31\u662f\u5982\u4f55\u4ece\u679a\u4e3e\u6210\u5458\u4e2d\u63d0\u53d6\u503c\u7684\u3002 \u4f5c\u4e3a\u4e00\u4e2a\u4f8b\u5b50\uff0c\u8ba9\u6211\u4eec\u4fee\u6539\u679a\u4e3e\u7684\u4e00\u4e2a\u6210\u5458\u6765\u5b58\u653e\u6570\u636e\u3002 1999 \u5e74\u5230 2008 \u5e74\u95f4\uff0c\u7f8e\u56fd\u5728 25 \u7f8e\u5206\u7684\u786c\u5e01\u7684\u4e00\u4fa7\u4e3a 50 \u4e2a\u5dde\u7684\u6bcf\u4e00\u4e2a\u90fd\u5370\u5237\u4e86\u4e0d\u540c\u7684\u8bbe\u8ba1\u3002 \u5176\u4ed6\u7684\u786c\u5e01\u90fd\u6ca1\u6709\u8fd9\u79cd\u533a\u5206\u5dde\u7684\u8bbe\u8ba1\uff0c\u6240\u4ee5\u53ea\u6709\u8fd9\u4e9b 25 \u7f8e\u5206\u786c\u5e01\u6709\u7279\u6b8a\u7684\u4ef7\u503c\u3002 \u53ef\u4ee5\u5c06\u8fd9\u4e9b\u4fe1\u606f\u52a0\u5165\u6211\u4eec\u7684 enum \uff0c\u901a\u8fc7\u6539\u53d8 Quarter \u6210\u5458\u6765\u5305\u542b\u4e00\u4e2a State \u503c\uff0c\u793a\u4f8b\u5b8c\u6210\u4e86\u8fd9\u4e9b\u4fee\u6539\uff1a #[derive(Debug)] // \u8fd9\u6837\u53ef\u4ee5\u7acb\u523b\u770b\u5230\u5dde\u7684\u540d\u79f0 enum UsState { Alabama , Alaska , // --snip-- } enum Coin { Penny , Nickel , Dime , Quarter ( UsState ), } fn main () {} \u60f3\u8c61\u4e00\u4e0b\u6211\u4eec\u7684\u4e00\u4e2a\u670b\u53cb\u5c1d\u8bd5\u6536\u96c6\u6240\u6709 50 \u4e2a\u5dde\u7684 25 \u7f8e\u5206\u786c\u5e01\u3002\u5728\u6839\u636e\u786c\u5e01\u7c7b\u578b\u5206\u7c7b\u96f6\u94b1\u7684\u540c\u65f6\uff0c\u4e5f\u53ef\u4ee5\u62a5\u544a\u51fa\u6bcf\u4e2a 25 \u7f8e\u5206\u786c\u5e01\u6240\u5bf9\u5e94\u7684\u5dde\u540d\u79f0\uff0c\u8fd9\u6837\u5982\u679c\u6211\u4eec\u7684\u670b\u53cb\u6ca1\u6709\u7684\u8bdd\uff0c\u4ed6\u53ef\u4ee5\u5c06\u5176\u52a0\u5165\u6536\u85cf\u3002 \u5728\u8fd9\u4e9b\u4ee3\u7801\u7684\u5339\u914d\u8868\u8fbe\u5f0f\u4e2d\uff0c\u6211\u4eec\u5728\u5339\u914d Coin::Quarter \u6210\u5458\u7684\u5206\u652f\u7684\u6a21\u5f0f\u4e2d\u589e\u52a0\u4e86\u4e00\u4e2a\u53eb\u505a state \u7684\u53d8\u91cf\u3002\u5f53\u5339\u914d\u5230 Coin::Quarter \u65f6\uff0c\u53d8\u91cf state \u5c06\u4f1a\u7ed1\u5b9a 25 \u7f8e\u5206\u786c\u5e01\u6240\u5bf9\u5e94\u5dde\u7684\u503c\u3002 \u63a5\u7740\u5728\u90a3\u4e2a\u5206\u652f\u7684\u4ee3\u7801\u4e2d\u4f7f\u7528 state \uff0c\u5982\u4e0b\uff1a fn value_in_cents ( coin : Coin ) -> u8 { match coin { Coin :: Penny => 1 , Coin :: Nickel => 5 , Coin :: Dime => 10 , Coin :: Quarter ( state ) => { println! ( \"State quarter from {:?}!\" , state ); 25 } } } value_in_cents ( Coin :: Quarter ( UsState :: Alaska )) // state \u7ed1\u5b9a\u7684\u5c06\u4f1a\u662f\u503c UsState::Alaska \u5339\u914d Option\\<T> \u5728\u4e4b\u524d\u7684\u90e8\u5206\u4e2d\u4f7f\u7528 Option<T> \u65f6\uff0c\u662f\u4e3a\u4e86\u4ece Some \u4e2d\u53d6\u51fa\u5176\u5185\u90e8\u7684 T \u503c\uff1b\u6211\u4eec\u8fd8\u53ef\u4ee5\u50cf\u5904\u7406 Coin \u679a\u4e3e\u90a3\u6837\u4f7f\u7528 match \u5904\u7406 Option<T> \uff01\u53ea\u4e0d\u8fc7\u8fd9\u56de\u6bd4\u8f83\u7684\u4e0d\u518d\u662f\u786c\u5e01\uff0c\u800c\u662f Option<T> \u7684\u6210\u5458\uff0c\u4f46 match \u8868\u8fbe\u5f0f\u7684\u5de5\u4f5c\u65b9\u5f0f\u4fdd\u6301\u4e0d\u53d8\u3002 \u6bd4\u5982\u6211\u4eec\u60f3\u8981\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\uff0c\u5b83\u83b7\u53d6\u4e00\u4e2a Option<i32> \uff0c\u5982\u679c\u5176\u4e2d\u542b\u6709\u4e00\u4e2a\u503c\uff0c\u5c06\u5176\u52a0\u4e00\u3002\u5982\u679c\u5176\u4e2d\u6ca1\u6709\u503c\uff0c\u51fd\u6570\u5e94\u8be5\u8fd4\u56de None \u503c\uff0c\u800c\u4e0d\u5c1d\u8bd5\u6267\u884c\u4efb\u4f55\u64cd\u4f5c\u3002 // \u4e00\u4e2a\u5728 Option<i32> \u4e0a\u4f7f\u7528 match \u8868\u8fbe\u5f0f\u7684\u51fd\u6570 fn plus_one ( x : Option < i32 > ) -> Option < i32 > { match x { None => None , Some ( i ) => Some ( i + 1 ), } } let five = Some ( 5 ); let six = plus_one ( five ); let none = plus_one ( None ); \u5339\u914d Some(T) \u66f4\u4ed4\u7ec6\u5730\u68c0\u67e5 plus_one \u7684\u7b2c\u4e00\u884c\u64cd\u4f5c\u3002\u5f53\u8c03\u7528 plus_one(five) \u65f6\uff0c plus_one \u51fd\u6570\u4f53\u4e2d\u7684 x \u5c06\u4f1a\u662f\u503c Some(5) \u3002\u63a5\u7740\u5c06\u5176\u4e0e\u6bcf\u4e2a\u5206\u652f\u6bd4\u8f83\u3002 \u503c Some(5) \u5e76\u4e0d\u5339\u914d\u6a21\u5f0f None \uff0c\u6240\u4ee5\u7ee7\u7eed\u8fdb\u884c\u4e0b\u4e00\u4e2a\u5206\u652f\u3002 Some ( i ) => Some ( i + 1 ), Some(5) \u4e0e Some(i) \u5339\u914d\u5417\uff1f\u5f53\u7136\u5339\u914d\uff01\u5b83\u4eec\u662f\u76f8\u540c\u7684\u6210\u5458\u3002 i \u7ed1\u5b9a\u4e86 Some \u4e2d\u5305\u542b\u7684\u503c\uff0c\u6240\u4ee5 i \u7684\u503c\u662f 5 \u3002 \u63a5\u7740\u5339\u914d\u5206\u652f\u7684\u4ee3\u7801\u88ab\u6267\u884c\uff0c\u6240\u4ee5\u6211\u4eec\u5c06 i \u7684\u503c\u52a0\u4e00\u5e76\u8fd4\u56de\u4e00\u4e2a\u542b\u6709\u503c 6 \u7684\u65b0 Some \u3002 \u63a5\u7740\u8003\u8651\u4e0b\u793a\u4f8b\u4e2d plus_one \u7684\u7b2c\u4e8c\u4e2a\u8c03\u7528\uff0c\u8fd9\u91cc x \u662f None \u3002\u6211\u4eec\u8fdb\u5165 match \u5e76\u4e0e\u7b2c\u4e00\u4e2a\u5206\u652f\u76f8\u6bd4\u8f83\u3002 None => None , \u5339\u914d\u4e0a\u4e86\uff01\u8fd9\u91cc\u6ca1\u6709\u503c\u6765\u52a0\u4e00\uff0c\u6240\u4ee5\u7a0b\u5e8f\u7ed3\u675f\u5e76\u8fd4\u56de => \u53f3\u4fa7\u7684\u503c None \uff0c\u56e0\u4e3a\u7b2c\u4e00\u4e2a\u5206\u652f\u5c31\u5339\u914d\u5230\u4e86\uff0c \u5176\u4ed6\u7684\u5206\u652f\u5c06\u4e0d\u518d\u6bd4\u8f83 \u3002 \u5c06 match \u4e0e\u679a\u4e3e\u76f8\u7ed3\u5408\u5728\u5f88\u591a\u573a\u666f\u4e2d\u90fd\u662f\u6709\u7528\u7684\u3002\u4f60\u4f1a\u5728 Rust \u4ee3\u7801\u4e2d\u770b\u5230\u5f88\u591a\u8fd9\u6837\u7684\u6a21\u5f0f\uff1a match \u4e00\u4e2a\u679a\u4e3e\uff0c\u7ed1\u5b9a\u5176\u4e2d\u7684\u503c\u5230\u4e00\u4e2a\u53d8\u91cf\uff0c\u63a5\u7740\u6839\u636e\u5176\u503c\u6267\u884c\u4ee3\u7801 \u3002 \u8fd9\u5728\u4e00\u5f00\u59cb\u6709\u70b9\u590d\u6742\uff0c\u4e0d\u8fc7\u4e00\u65e6\u4e60\u60ef\u4e86\uff0c\u4f60\u4f1a\u5e0c\u671b\u6240\u6709\u8bed\u8a00\u90fd\u62e5\u6709\u5b83\uff01 \u5339\u914d\u662f\u7a77\u5c3d\u7684 match \u8fd8\u6709\u53e6\u4e00\u65b9\u9762\u9700\u8981\u8ba8\u8bba\uff1a \u8fd9\u4e9b\u5206\u652f\u5fc5\u987b\u8986\u76d6\u4e86\u6240\u6709\u7684\u53ef\u80fd\u6027 \u3002\u8003\u8651\u4e00\u4e0b plus_one \u51fd\u6570\u7684\u8fd9\u4e2a\u7248\u672c\uff0c\u5b83\u6709\u4e00\u4e2a bug \u5e76\u4e0d\u80fd\u7f16\u8bd1\uff1a fn plus_one ( x : Option < i32 > ) -> Option < i32 > { match x { Some ( i ) => Some ( i + 1 ), } } \u6211\u4eec\u6ca1\u6709\u5904\u7406 None \u7684\u60c5\u51b5\uff0c\u6240\u4ee5\u8fd9\u4e9b\u4ee3\u7801\u4f1a\u9020\u6210\u4e00\u4e2a bug \u3002\u5e78\u8fd0\u7684\u662f\uff0c\u8fd9\u662f\u4e00\u4e2a Rust \u77e5\u9053\u5982\u4f55\u5904\u7406\u7684 bug\u3002\u5982\u679c\u5c1d\u8bd5\u7f16\u8bd1\u8fd9\u6bb5\u4ee3\u7801\uff0c\u4f1a\u5f97\u5230\u8fd9\u4e2a\u9519\u8bef\uff1a $ cargo run Compiling enums v0.1.0 ( file:///projects/enums ) error [ E0004 ] : non-exhaustive patterns: ` None ` not covered --> src/main.rs:3:15 | 3 | match x { | ^ pattern ` None ` not covered | = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms = note: the matched value is of type ` Option<i32> ` For more information about this error, try ` rustc --explain E0004 ` . error: could not compile ` enums ` due to previous error Rust \u77e5\u9053\u6211\u4eec\u6ca1\u6709\u8986\u76d6\u6240\u6709\u53ef\u80fd\u7684\u60c5\u51b5\u751a\u81f3\u77e5\u9053\u54ea\u4e9b\u6a21\u5f0f\u88ab\u5fd8\u8bb0\u4e86\uff01 Rust \u4e2d\u7684\u5339\u914d\u662f \u7a77\u5c3d\u7684 \uff08exhaustive\uff09\uff1a \u5fc5\u987b\u7a77\u4e3e\u5230\u6700\u540e\u7684\u53ef\u80fd\u6027\u6765\u4f7f\u4ee3\u7801\u6709\u6548 \u3002 \u7279\u522b\u7684\u5728\u8fd9\u4e2a Option<T> \u7684\u4f8b\u5b50\u4e2d\uff0cRust \u9632\u6b62\u6211\u4eec\u5fd8\u8bb0\u660e\u786e\u7684\u5904\u7406 None \u7684\u60c5\u51b5\uff0c\u8fd9\u8ba9\u6211\u4eec\u514d\u4e8e\u5047\u8bbe\u62e5\u6709\u4e00\u4e2a\u5b9e\u9645\u4e0a\u4e3a\u7a7a\u7684\u503c\uff0c\u4ece\u800c\u4f7f\u4e4b\u524d\u63d0\u5230\u7684\u4ef7\u503c\u4ebf\u4e07\u7684\u9519\u8bef\u4e0d\u53ef\u80fd\u53d1\u751f\u3002 \u901a\u914d\u6a21\u5f0f\u548c _ \u5360\u4f4d\u7b26 let dice_roll = 9 ; match dice_roll { // \u5bf9\u4e8e\u524d\u4e24\u4e2a\u5206\u652f\uff0c\u5339\u914d\u6a21\u5f0f\u662f\u5b57\u9762\u503c 3 \u548c 7 3 => add_fancy_hat (), 7 => remove_fancy_hat (), // \u6700\u540e\u4e00\u4e2a\u5206\u652f\u5219\u6db5\u76d6\u4e86\u6240\u6709\u5176\u4ed6\u53ef\u80fd\u7684\u503c other => move_player ( other ), } fn add_fancy_hat () {} fn remove_fancy_hat () {} fn move_player ( num_spaces : u8 ) {} \u6a21\u5f0f\u662f\u6211\u4eec\u547d\u540d\u4e3a other \u7684\u4e00\u4e2a\u53d8\u91cf\u3002 other \u5206\u652f\u7684\u4ee3\u7801\u901a\u8fc7\u5c06\u5176\u4f20\u9012\u7ed9 move_player \u51fd\u6570\u6765\u4f7f\u7528\u8fd9\u4e2a\u53d8\u91cf\u3002 \u5373\u4f7f\u6211\u4eec\u6ca1\u6709\u5217\u51fa u8 \u6240\u6709\u53ef\u80fd\u7684\u503c\uff0c\u8fd9\u6bb5\u4ee3\u7801\u4f9d\u7136\u80fd\u591f\u7f16\u8bd1\uff0c\u56e0\u4e3a\u6700\u540e\u4e00\u4e2a\u6a21\u5f0f\u5c06\u5339\u914d\u6240\u6709\u672a\u88ab\u7279\u6b8a\u5217\u51fa\u7684\u503c\u3002 \u8fd9\u79cd\u901a\u914d\u6a21\u5f0f\u6ee1\u8db3\u4e86 match \u5fc5\u987b\u88ab\u7a77\u5c3d\u7684\u8981\u6c42\u3002 \u8bf7\u6ce8\u610f\uff0c\u6211\u4eec \u5fc5\u987b\u5c06\u901a\u914d\u5206\u652f\u653e\u5728\u6700\u540e\uff0c\u56e0\u4e3a\u6a21\u5f0f\u662f\u6309\u987a\u5e8f\u5339\u914d\u7684 \u3002 \u5982\u679c\u6211\u4eec\u5728\u901a\u914d\u5206\u652f\u540e\u6dfb\u52a0\u5176\u4ed6\u5206\u652f\uff0cRust \u5c06\u4f1a\u8b66\u544a\u6211\u4eec\uff0c\u56e0\u4e3a\u6b64\u540e\u7684\u5206\u652f\u6c38\u8fdc\u4e0d\u4f1a\u88ab\u5339\u914d\u5230\u3002 Rust \u8fd8\u63d0\u4f9b\u4e86\u4e00\u4e2a\u6a21\u5f0f\uff0c\u5f53\u6211\u4eec\u4e0d\u60f3\u4f7f\u7528\u901a\u914d\u6a21\u5f0f\u83b7\u53d6\u7684\u503c\u65f6\uff0c\u8bf7\u4f7f\u7528 _ \uff0c\u8fd9\u662f\u4e00\u4e2a\u7279\u6b8a\u7684\u6a21\u5f0f\uff0c\u53ef\u4ee5\u5339\u914d\u4efb\u610f\u503c\u800c\u4e0d\u7ed1\u5b9a\u5230\u8be5\u503c\u3002 \u8fd9\u544a\u8bc9 Rust \u6211\u4eec\u4e0d\u4f1a\u4f7f\u7528\u8fd9\u4e2a\u503c\uff0c\u6240\u4ee5 Rust \u4e5f\u4e0d\u4f1a\u8b66\u544a\u6211\u4eec\u5b58\u5728\u672a\u4f7f\u7528\u7684\u53d8\u91cf\u3002 let dice_roll = 9 ; match dice_roll { 3 => add_fancy_hat (), 7 => remove_fancy_hat (), _ => reroll (), // \u4f7f\u7528 _ \u4e22\u5f03\u503c\u3002 } fn add_fancy_hat () {} fn remove_fancy_hat () {} fn reroll () {} \u6700\u540e\uff0c\u5982\u679c\u5c06\u65e0\u4e8b\u53d1\u751f\u3002\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 \u5355\u5143\u503c \uff08\u5728\u201c \u5143\u7ec4\u7c7b\u578b \u201d\u4e00\u8282\u4e2d\u63d0\u5230\u7684\u7a7a\u5143\u7ec4\uff09\u4f5c\u4e3a _ \u5206\u652f\u7684\u4ee3\u7801\uff1a let dice_roll = 9 ; match dice_roll { 3 => add_fancy_hat (), 7 => remove_fancy_hat (), _ => (), // \u5355\u5143\u503c\uff0c\u65e0\u4e8b\u53d1\u751f\u3002 } fn add_fancy_hat () {} fn remove_fancy_hat () {} \u5728\u8fd9\u91cc\uff0c\u660e\u786e\u544a\u8bc9 Rust \u6211\u4eec \u4e0d\u4f1a\u4f7f\u7528\u4e0e\u524d\u9762\u6a21\u5f0f\u4e0d\u5339\u914d\u7684\u503c\uff0c\u5e76\u4e14\u8fd9\u79cd\u60c5\u51b5\u4e0b\u6211\u4eec\u4e0d\u60f3\u8fd0\u884c\u4efb\u4f55\u4ee3\u7801 \u3002 if let\u63a7\u5236\u6d41 if let \u8bed\u6cd5\u8ba9\u6211\u4eec\u4ee5\u4e00\u79cd\u4e0d\u90a3\u4e48\u5197\u957f\u7684\u65b9\u5f0f\u7ed3\u5408 if \u548c let \uff0c\u6765\u5904\u7406\u53ea\u5339\u914d\u4e00\u4e2a\u6a21\u5f0f\u7684\u503c\u800c\u5ffd\u7565\u5176\u4ed6\u6a21\u5f0f\u7684\u60c5\u51b5\u3002 let config_max = Some ( 3 u8 ); // \u5339\u914d\u4e00\u4e2a config_max \u53d8\u91cf\u4e2d\u7684 Option<u8> \u503c\u5e76\u53ea\u5e0c\u671b\u5f53\u503c\u4e3a Some \u6210\u5458\u65f6\u6267\u884c\u4ee3\u7801 match config_max { // \u8fd9\u4e2a\u503c\u88ab\u7ed1\u5b9a\u5230\u6a21\u5f0f\u4e2d\u7684 max \u53d8\u91cf\u91cc\u3002 Some ( max ) => println! ( \"The maximum is configured to be {}\" , max ), // \u5bf9\u4e8e None \u503c\u6211\u4eec\u4e0d\u5e0c\u671b\u505a\u4efb\u4f55\u64cd\u4f5c _ => (), } \u4e0d\u8fc7\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 if let \u8fd9\u79cd\u66f4\u77ed\u7684\u65b9\u5f0f\u7f16\u5199: let config_max = Some ( 3 u8 ); // if let \u8bed\u6cd5\u83b7\u53d6\u901a\u8fc7\u7b49\u53f7\u5206\u9694\u7684\u4e00\u4e2a\u6a21\u5f0f\u548c\u4e00\u4e2a\u8868\u8fbe\u5f0f\u3002\u5b83\u7684\u5de5\u4f5c\u65b9\u5f0f\u4e0e match \u76f8\u540c\uff0c\u8fd9\u91cc\u7684\u8868\u8fbe\u5f0f\u5bf9\u5e94 match \u800c\u6a21\u5f0f\u5219\u5bf9\u5e94\u7b2c\u4e00\u4e2a\u5206\u652f\u3002 // \u6a21\u5f0f\u662f Some(max)\uff0cmax \u7ed1\u5b9a\u4e3a Some \u4e2d\u7684\u503c\u3002 // \u63a5\u7740\u53ef\u4ee5\u5728 if let \u4ee3\u7801\u5757\u4e2d\u4f7f\u7528 max \u4e86 if let Some ( max ) = config_max { println! ( \"The maximum is configured to be {}\" , max ); } // \u6a21\u5f0f\u4e0d\u5339\u914d\u65f6 if let \u5757\u4e2d\u7684\u4ee3\u7801\u4e0d\u4f1a\u6267\u884c\u3002 \u4f7f\u7528 if let \u610f\u5473\u7740\u7f16\u5199\u66f4\u5c11\u4ee3\u7801\uff0c\u66f4\u5c11\u7684\u7f29\u8fdb\u548c\u66f4\u5c11\u7684\u6837\u677f\u4ee3\u7801\u3002 \u7136\u800c\uff0c\u8fd9\u6837\u4f1a\u5931\u53bb match \u5f3a\u5236\u8981\u6c42\u7684\u7a77\u5c3d\u6027\u68c0\u67e5\u3002 match \u548c if let \u4e4b\u95f4\u7684\u9009\u62e9\u4f9d\u8d56\u7279\u5b9a\u7684\u73af\u5883\u4ee5\u53ca\u589e\u52a0\u7b80\u6d01\u5ea6\u548c\u5931\u53bb\u7a77\u5c3d\u6027\u68c0\u67e5\u7684\u6743\u8861\u53d6\u820d\u3002 \u53ef\u4ee5\u8ba4\u4e3a if let \u662f match \u7684\u4e00\u4e2a\u8bed\u6cd5\u7cd6\uff0c\u5b83\u5f53\u503c\u5339\u914d\u67d0\u4e00\u6a21\u5f0f\u65f6\u6267\u884c\u4ee3\u7801\u800c\u5ffd\u7565\u6240\u6709\u5176\u4ed6\u503c\u3002 // \u53ef\u4ee5\u5728 if let \u4e2d\u5305\u542b\u4e00\u4e2a else\u3002else \u5757\u4e2d\u7684\u4ee3\u7801\u4e0e match \u8868\u8fbe\u5f0f\u4e2d\u7684 _ \u5206\u652f\u5757\u4e2d\u7684\u4ee3\u7801\u76f8\u540c let mut count = 0 ; if let Coin :: Quarter ( state ) = coin { println! ( \"State quarter from {:?}!\" , state ); } else { count += 1 ; } // \u8fd9\u6837\u7684 match \u8868\u8fbe\u5f0f\u5c31\u7b49\u540c\u4e8e if let \u548c else\u3002 let mut count = 0 ; match coin { Coin :: Quarter ( state ) => println! ( \"State quarter from {:?}!\" , state ), _ => count += 1 , }","title":"\u679a\u4e3e"},{"location":"enumerations/#_1","text":"\u679a\u4e3e \uff08enumerations\uff09\uff0c\u4e5f\u88ab\u79f0\u4f5c enums \u3002 \u679a\u4e3e\u5141\u8bb8\u4f60\u901a\u8fc7\u5217\u4e3e\u53ef\u80fd\u7684 \u6210\u5458 \uff08variants\uff09 \u6765\u5b9a\u4e49\u4e00\u4e2a\u7c7b\u578b\u3002 \u9996\u5148\uff0c\u6211\u4eec\u4f1a\u5b9a\u4e49\u5e76\u4f7f\u7528\u4e00\u4e2a\u679a\u4e3e\u6765\u5c55\u793a\u5b83\u662f\u5982\u4f55\u8fde\u540c\u6570\u636e\u4e00\u8d77\u7f16\u7801\u4fe1\u606f\u7684\u3002 \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u4f1a\u63a2\u7d22\u4e00\u4e2a\u7279\u522b\u6709\u7528\u7684\u679a\u4e3e\uff0c\u53eb\u505a Option\uff0c\u5b83\u4ee3\u8868\u4e00\u4e2a\u503c\u8981\u4e48\u662f\u67d0\u4e2a\u503c\u8981\u4e48\u4ec0\u4e48\u90fd\u4e0d\u662f\u3002 \u7136\u540e\u4f1a\u8bb2\u5230\u5728 match \u8868\u8fbe\u5f0f\u4e2d\u7528\u6a21\u5f0f\u5339\u914d\uff0c\u9488\u5bf9\u4e0d\u540c\u7684\u679a\u4e3e\u503c\u7f16\u5199\u76f8\u5e94\u8981\u6267\u884c\u7684\u4ee3\u7801\u3002 \u6700\u540e\u4f1a\u4ecb\u7ecd if let\uff0c\u53e6\u4e00\u4e2a\u7b80\u6d01\u65b9\u4fbf\u5904\u7406\u4ee3\u7801\u4e2d\u679a\u4e3e\u7684\u7ed3\u6784\u3002","title":"\u679a\u4e3e"},{"location":"enumerations/#_2","text":"\u7ed3\u6784\u4f53\u7ed9\u4e88\u4f60\u5c06\u5b57\u6bb5\u548c\u6570\u636e\u805a\u5408\u5728\u4e00\u8d77\u7684\u65b9\u6cd5 \uff0c\u50cf Rectangle \u7ed3\u6784\u4f53\u6709 width \u548c height \u4e24\u4e2a\u5b57\u6bb5\u3002 \u800c\u679a\u4e3e\u7ed9\u4e88\u4f60\u5c06\u4e00\u4e2a\u503c\u6210\u4e3a\u4e00\u4e2a\u96c6\u5408\u4e4b\u4e00\u7684\u65b9\u6cd5 \u3002\u6bd4\u5982\uff0c\u6211\u4eec\u60f3\u8ba9 Rectangle \u662f\u4e00\u4e9b\u5f62\u72b6\u7684\u96c6\u5408\uff0c\u5305\u542b Circle \u548c Triangle \u3002 \u4e3a\u4e86\u505a\u5230\u8fd9\u4e2a\uff0cRust\u63d0\u4f9b\u4e86\u679a\u4e3e\u7c7b\u578b\u3002 \u5047\u8bbe\u6211\u4eec\u8981\u5904\u7406 IP \u5730\u5740\u3002\u76ee\u524d\u88ab\u5e7f\u6cdb\u4f7f\u7528\u7684\u4e24\u4e2a\u4e3b\u8981 IP \u6807\u51c6\uff1a IPv4 \uff08version four\uff09\u548c IPv6 \uff08version six\uff09\u3002\u6240\u4ee5\u53ef\u4ee5 \u679a\u4e3e \u51fa\u6240\u6709\u53ef\u80fd\u7684\u503c\uff0c\u8fd9\u4e5f\u6b63\u662f\u6b64\u679a\u4e3e\u540d\u5b57\u7684\u7531\u6765\u3002 \u4efb\u4f55\u4e00\u4e2a IP \u5730\u5740\u8981\u4e48\u662f IPv4 \u7684\u8981\u4e48\u662f IPv6 \u7684\uff0c\u800c\u4e14\u4e0d\u80fd\u4e24\u8005\u90fd\u662f\u3002 IP \u5730\u5740\u7684\u8fd9\u4e2a\u7279\u6027\u4f7f\u5f97\u679a\u4e3e\u6570\u636e\u7ed3\u6784\u975e\u5e38\u9002\u5408\u8fd9\u4e2a\u573a\u666f\uff0c\u56e0\u4e3a\u679a\u4e3e\u503c\u53ea\u53ef\u80fd\u662f\u5176\u4e2d\u4e00\u4e2a\u6210\u5458\u3002 IPv4 \u548c IPv6 \u4ece\u6839\u672c\u4e0a\u8bb2\u4ecd\u662f IP \u5730\u5740\uff0c\u6240\u4ee5\u5f53\u4ee3\u7801\u5728\u5904\u7406\u9002\u7528\u4e8e\u4efb\u4f55\u7c7b\u578b\u7684 IP \u5730\u5740\u7684\u573a\u666f\u65f6\u5e94\u8be5\u628a\u5b83\u4eec\u5f53\u4f5c\u76f8\u540c\u7684\u7c7b\u578b\u3002 \u901a\u8fc7\u5728\u4ee3\u7801\u4e2d\u5b9a\u4e49\u4e00\u4e2a IpAddrKind \u679a\u4e3e\u6765\u8868\u73b0\u8fd9\u4e2a\u6982\u5ff5\u5e76\u5217\u51fa\u53ef\u80fd\u7684 IP \u5730\u5740\u7c7b\u578b\uff0c V4 \u548c V6 \u3002\u8fd9\u88ab\u79f0\u4e3a\u679a\u4e3e\u7684 \u6210\u5458 \uff08variants\uff09\uff1a enum IpAddrKind { V4 , V6 , } // \u73b0\u5728 IpAddrKind \u5c31\u662f\u4e00\u4e2a\u53ef\u4ee5\u5728\u4ee3\u7801\u4e2d\u4f7f\u7528\u7684\u81ea\u5b9a\u4e49\u6570\u636e\u7c7b\u578b\u4e86\u3002","title":"\u5b9a\u4e49"},{"location":"enumerations/#_3","text":"\u53ef\u4ee5\u50cf\u8fd9\u6837\u521b\u5efa IpAddrKind \u4e24\u4e2a\u4e0d\u540c\u6210\u5458\u7684\u5b9e\u4f8b\uff1a let four = IpAddrKind :: V4 ; let six = IpAddrKind :: V6 ; \u6ce8\u610f\u679a\u4e3e\u7684\u6210\u5458\u4f4d\u4e8e\u5176\u6807\u8bc6\u7b26\u7684\u547d\u540d\u7a7a\u95f4\u4e2d\uff0c\u5e76\u4f7f\u7528 \u4e24\u4e2a\u5192\u53f7 \u5206\u5f00\u3002 \u63a5\u7740\u53ef\u4ee5\u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570\u6765\u83b7\u53d6\u4efb\u4f55 IpAddrKind \uff1a fn route ( ip_kind : IpAddrKind ) {} \u73b0\u5728\u53ef\u4ee5\u4f7f\u7528\u4efb\u4e00\u6210\u5458\u6765\u8c03\u7528\u8fd9\u4e2a\u51fd\u6570\uff1a route ( IpAddrKind :: V4 ); route ( IpAddrKind :: V6 ); \u4f7f\u7528\u679a\u4e3e\u751a\u81f3\u8fd8\u6709\u66f4\u591a\u4f18\u52bf\u3002\u8fdb\u4e00\u6b65\u8003\u8651\u4e00\u4e0b IP \u5730\u5740\u7c7b\u578b\uff0c\u76ee\u524d\u6ca1\u6709\u4e00\u4e2a\u5b58\u50a8\u5b9e\u9645 IP \u5730\u5740 \u6570\u636e \u7684\u65b9\u6cd5\uff1b\u53ea\u77e5\u9053\u5b83\u662f\u4ec0\u4e48 \u7c7b\u578b \u7684\u3002 \u8003\u8651\u5230\u5df2\u7ecf\u5b66\u4e60\u8fc7\u7ed3\u6784\u4f53\u4e86\uff0c\u4f60\u53ef\u80fd\u4f1a\u5982\u4e0b\u793a\u4f8b\u90a3\u6837\u5904\u7406\u8fd9\u4e2a\u95ee\u9898\uff1a enum IpAddrKind { V4 , V6 , } struct IpAddr { kind : IpAddrKind , address : String , } let home = IpAddr { kind : IpAddrKind :: V4 , address : String :: from ( \"127.0.0.1\" ), }; let loopback = IpAddr { kind : IpAddrKind :: V6 , address : String :: from ( \"::1\" ), }; \u53ef\u4ee5\u4f7f\u7528\u4e00\u79cd\u66f4\u7b80\u6d01\u7684\u65b9\u5f0f\u6765\u8868\u8fbe\u76f8\u540c\u7684\u6982\u5ff5 \uff0c\u4ec5\u4ec5\u4f7f\u7528\u679a\u4e3e\u5e76\u5c06\u6570\u636e\u76f4\u63a5\u653e\u8fdb\u6bcf\u4e00\u4e2a\u679a\u4e3e\u6210\u5458\uff0c\u800c\u4e0d\u662f\u5c06\u679a\u4e3e\u4f5c\u4e3a\u7ed3\u6784\u4f53\u7684\u4e00\u90e8\u5206\u3002 IpAddr \u679a\u4e3e\u7684\u65b0\u5b9a\u4e49\u8868\u660e\u4e86 V4 \u548c V6 \u6210\u5458\u90fd\u5173\u8054\u4e86 String \u503c\uff1a enum IpAddr { V4 ( String ), V6 ( String ), } let home = IpAddr :: V4 ( String :: from ( \"127.0.0.1\" )); let loopback = IpAddr :: V6 ( String :: from ( \"::1\" )); \u8fd9\u6837\u76f4\u63a5\u5c06\u6570\u636e\u9644\u52a0\u5230\u679a\u4e3e\u7684\u6bcf\u4e2a\u6210\u5458\u4e0a\uff0c\u8fd9\u6837\u5c31\u4e0d\u9700\u8981\u4e00\u4e2a\u989d\u5916\u7684\u7ed3\u6784\u4f53\u4e86\u3002 \u53e6\u4e00\u4e2a\u7ec6\u8282\uff1a \u6bcf\u4e00\u4e2a\u6211\u4eec\u5b9a\u4e49\u7684\u679a\u4e3e\u6210\u5458\u7684\u540d\u5b57\u4e5f\u53d8\u6210\u4e86\u4e00\u4e2a\u6784\u5efa\u679a\u4e3e\u7684\u5b9e\u4f8b\u7684\u51fd\u6570 \u3002\u4e5f\u5c31\u662f\u8bf4\uff0c IpAddr::V4() \u662f\u4e00\u4e2a\u83b7\u53d6 String \u53c2\u6570\u5e76\u8fd4\u56de IpAddr \u7c7b\u578b\u5b9e\u4f8b\u7684\u51fd\u6570\u8c03\u7528\u3002 \u4f5c\u4e3a\u5b9a\u4e49\u679a\u4e3e\u7684\u7ed3\u679c\uff0c\u8fd9\u4e9b \u6784\u9020\u51fd\u6570\u4f1a\u81ea\u52a8\u88ab\u5b9a\u4e49 \u3002 \u7528\u679a\u4e3e\u66ff\u4ee3\u7ed3\u6784\u4f53\u8fd8\u6709\u53e6\u4e00\u4e2a\u4f18\u52bf\uff1a \u6bcf\u4e2a\u6210\u5458\u53ef\u4ee5\u5904\u7406\u4e0d\u540c\u7c7b\u578b\u548c\u6570\u91cf\u7684\u6570\u636e \u3002 \u5982\u4e0b: enum IpAddr { V4 ( u8 , u8 , u8 , u8 ), V6 ( String ), } let home = IpAddr :: V4 ( 127 , 0 , 0 , 1 ); let loopback = IpAddr :: V6 ( String :: from ( \"::1\" )); \u4e8b\u5b9e\u8bc1\u660e\u5b58\u50a8\u548c\u7f16\u7801 IP \u5730\u5740\u5b9e\u5728\u662f\u592a\u5e38\u89c1\u4e86 \u4ee5\u81f4\u6807\u51c6\u5e93\u63d0\u4f9b\u4e86\u4e00\u4e2a\u5f00\u7bb1\u5373\u7528\u7684\u5b9a\u4e49\uff01 \u6807\u51c6\u5e93\u662f\u5982\u4f55\u5b9a\u4e49 IpAddr \u7684\uff1a\u5b83\u6b63\u6709\u7740\u8ddf\u6211\u4eec\u5b9a\u4e49\u548c\u4f7f\u7528\u7684\u4e00\u6837\u7684\u679a\u4e3e\u548c\u6210\u5458\uff0c\u4e0d\u8fc7\u5b83\u5c06\u6210\u5458\u4e2d\u7684\u5730\u5740\u6570\u636e\u5d4c\u5165\u5230\u4e86\u4e24\u4e2a\u4e0d\u540c\u5f62\u5f0f\u7684\u7ed3\u6784\u4f53\u4e2d\uff0c\u5b83\u4eec\u5bf9\u4e0d\u540c\u7684\u6210\u5458\u7684\u5b9a\u4e49\u662f\u4e0d\u540c\u7684\uff1a struct Ipv4Addr { // --snip-- } struct Ipv6Addr { // --snip-- } enum IpAddr { V4 ( Ipv4Addr ), V6 ( Ipv6Addr ), } \u8fd9\u4e9b\u4ee3\u7801\u5c55\u793a\u4e86\u53ef\u4ee5\u5c06\u4efb\u610f\u7c7b\u578b\u7684\u6570\u636e\u653e\u5165\u679a\u4e3e\u6210\u5458\u4e2d\uff1a\u4f8b\u5982 \u5b57\u7b26\u4e32 \u3001 \u6570\u5b57\u7c7b\u578b \u6216\u8005 \u7ed3\u6784\u4f53 \u3002\u751a\u81f3\u53ef\u4ee5\u5305\u542b\u53e6\u4e00\u4e2a \u679a\u4e3e \uff01 \u867d\u7136\u6807\u51c6\u5e93\u4e2d\u5305\u542b\u4e00\u4e2a IpAddr \u7684\u5b9a\u4e49\uff0c\u4ecd\u7136\u53ef\u4ee5\u521b\u5efa\u548c\u4f7f\u7528\u6211\u4eec\u81ea\u5df1\u7684\u5b9a\u4e49\u800c\u4e0d\u4f1a\u6709\u51b2\u7a81\uff0c\u56e0\u4e3a\u6211\u4eec\u5e76\u6ca1\u6709\u5c06\u6807\u51c6\u5e93\u4e2d\u7684\u5b9a\u4e49\u5f15\u5165\u4f5c\u7528\u57df\u3002 enum Message { Quit , // Quit \u6ca1\u6709\u5173\u8054\u4efb\u4f55\u6570\u636e\u3002 Move { x : i32 , y : i32 }, // Move \u7c7b\u4f3c\u7ed3\u6784\u4f53\u5305\u542b\u547d\u540d\u5b57\u6bb5\u3002 Write ( String ), // Write \u5305\u542b\u5355\u72ec\u4e00\u4e2a String\u3002 ChangeColor ( i32 , i32 , i32 ), // ChangeColor \u5305\u542b\u4e09\u4e2a i32\u3002 } \u5b9a\u4e49\u4e00\u4e2a\u6709\u5173\u8054\u503c\u7684\u679a\u4e3e\u7684\u65b9\u5f0f\u548c\u5b9a\u4e49\u591a\u4e2a\u4e0d\u540c\u7c7b\u578b\u7684\u7ed3\u6784\u4f53\u7684\u65b9\u5f0f\u5f88\u76f8\u50cf\uff0c\u9664\u4e86\u679a\u4e3e\u4e0d\u4f7f\u7528 struct \u5173\u952e\u5b57\u4ee5\u53ca\u5176\u6240\u6709\u6210\u5458\u90fd\u88ab\u7ec4\u5408\u5728\u4e00\u8d77\u4f4d\u4e8e Message \u7c7b\u578b\u4e0b\u3002 \u5982\u4e0b\u8fd9\u4e9b\u7ed3\u6784\u4f53\u53ef\u4ee5\u5305\u542b\u4e0e\u4e4b\u524d\u679a\u4e3e\u6210\u5458\u4e2d\u76f8\u540c\u7684\u6570\u636e\uff1a struct QuitMessage ; // \u7c7b\u5355\u5143\u7ed3\u6784\u4f53 struct MoveMessage { x : i32 , y : i32 , } struct WriteMessage ( String ); // \u5143\u7ec4\u7ed3\u6784\u4f53 struct ChangeColorMessage ( i32 , i32 , i32 ); // \u5143\u7ec4\u7ed3\u6784\u4f53 \u4e0d\u8fc7\uff0c\u5982\u679c\u6211\u4eec\u4f7f\u7528\u4e0d\u540c\u7684\u7ed3\u6784\u4f53\uff0c\u7531\u4e8e\u5b83\u4eec\u90fd\u6709\u4e0d\u540c\u7684\u7c7b\u578b\uff0c\u6211\u4eec\u5c06\u4e0d\u80fd\u50cf\u4f7f\u7528 Message \u679a\u4e3e\u90a3\u6837\uff0c\u8f7b\u6613\u7684\u5b9a\u4e49\u4e00\u4e2a\u80fd\u591f\u5904\u7406\u8fd9\u4e9b\u4e0d\u540c\u7c7b\u578b\u7684\u7ed3\u6784\u4f53\u7684\u51fd\u6570\uff0c\u56e0\u4e3a \u679a\u4e3e\u662f\u5355\u72ec\u4e00\u4e2a\u7c7b\u578b \u3002 \u7ed3\u6784\u4f53\u548c\u679a\u4e3e\u8fd8\u6709\u53e6\u4e00\u4e2a\u76f8\u4f3c\u70b9\uff1a \u5c31\u50cf\u53ef\u4ee5\u4f7f\u7528 impl \u6765\u4e3a\u7ed3\u6784\u4f53\u5b9a\u4e49\u65b9\u6cd5\u90a3\u6837\uff0c\u4e5f\u53ef\u4ee5\u5728\u679a\u4e3e\u4e0a\u5b9a\u4e49\u65b9\u6cd5 \u3002\u8fd9\u662f\u4e00\u4e2a\u5b9a\u4e49\u4e8e\u6211\u4eec Message \u679a\u4e3e\u4e0a\u7684\u53eb\u505a call \u7684\u65b9\u6cd5\uff1a impl Message { // \u65b9\u6cd5\u4f53\u4f7f\u7528\u4e86 self \u6765\u83b7\u53d6\u8c03\u7528\u65b9\u6cd5\u7684\u503c\u3002 fn call ( & self ) { // \u5728\u8fd9\u91cc\u5b9a\u4e49\u65b9\u6cd5\u4f53 } } let m = Message :: Write ( String :: from ( \"hello\" )); m . call (); // \u53d8\u91cf m\uff0c\u5c31\u662f\u5f53 m.call() \u8fd0\u884c\u65f6 call \u65b9\u6cd5\u4e2d\u7684 self \u7684\u503c\u3002","title":"\u679a\u4e3e\u503c"},{"location":"enumerations/#option","text":"Option \u662f\u6807\u51c6\u5e93\u5b9a\u4e49\u7684\u53e6\u4e00\u4e2a\u679a\u4e3e\u3002 Option \u7c7b\u578b\u5e94\u7528\u5e7f\u6cdb\u56e0\u4e3a\u5b83\u7f16\u7801\u4e86\u4e00\u4e2a\u975e\u5e38\u666e\u904d\u7684\u573a\u666f\uff0c\u5373\u4e00\u4e2a\u503c\u8981\u4e48\u6709\u503c\u8981\u4e48\u6ca1\u503c\u3002 \u4f8b\u5982\uff0c\u5982\u679c\u8bf7\u6c42\u4e00\u4e2a\u5305\u542b\u9879\u7684\u5217\u8868\u7684\u7b2c\u4e00\u4e2a\u503c\uff0c\u4f1a\u5f97\u5230\u4e00\u4e2a\u503c\uff0c\u5982\u679c\u8bf7\u6c42\u4e00\u4e2a\u7a7a\u7684\u5217\u8868\uff0c\u5c31\u4ec0\u4e48\u4e5f\u4e0d\u4f1a\u5f97\u5230\u3002\u4ece\u7c7b\u578b\u7cfb\u7edf\u7684\u89d2\u5ea6\u6765\u8868\u8fbe\u8fd9\u4e2a\u6982\u5ff5\u5c31\u610f\u5473\u7740\u7f16\u8bd1\u5668\u9700\u8981\u68c0\u67e5\u662f\u5426\u5904\u7406\u4e86\u6240\u6709\u5e94\u8be5\u5904\u7406\u7684\u60c5\u51b5\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u907f\u514d\u5728\u5176\u4ed6\u7f16\u7a0b\u8bed\u8a00\u4e2d\u975e\u5e38\u5e38\u89c1\u7684 bug\u3002 \u7f16\u7a0b\u8bed\u8a00\u7684\u8bbe\u8ba1\u7ecf\u5e38\u8981\u8003\u8651\u5305\u542b\u54ea\u4e9b\u529f\u80fd\uff0c\u4f46\u8003\u8651\u6392\u9664\u54ea\u4e9b\u529f\u80fd\u4e5f\u5f88\u91cd\u8981\u3002Rust \u5e76\u6ca1\u6709\u5f88\u591a\u5176\u4ed6\u8bed\u8a00\u4e2d\u6709\u7684\u7a7a\u503c\u529f\u80fd\u3002 \u7a7a\u503c \uff08Null \uff09\u662f\u4e00\u4e2a\u503c\uff0c\u5b83\u4ee3\u8868\u6ca1\u6709\u503c\u3002\u5728\u6709\u7a7a\u503c\u7684\u8bed\u8a00\u4e2d\uff0c\u53d8\u91cf\u603b\u662f\u8fd9\u4e24\u79cd\u72b6\u6001\u4e4b\u4e00\uff1a\u7a7a\u503c\u548c\u975e\u7a7a\u503c\u3002 \u7a7a\u503c\u7684\u95ee\u9898\u5728\u4e8e\u5f53\u4f60\u5c1d\u8bd5\u50cf\u4e00\u4e2a\u975e\u7a7a\u503c\u90a3\u6837\u4f7f\u7528\u4e00\u4e2a\u7a7a\u503c\uff0c\u4f1a\u51fa\u73b0\u67d0\u79cd\u5f62\u5f0f\u7684\u9519\u8bef\u3002\u56e0\u4e3a\u7a7a\u548c\u975e\u7a7a\u7684\u5c5e\u6027\u65e0\u5904\u4e0d\u5728\uff0c\u975e\u5e38\u5bb9\u6613\u51fa\u73b0\u8fd9\u7c7b\u9519\u8bef\u3002 \u7136\u800c\uff0c\u7a7a\u503c\u5c1d\u8bd5\u8868\u8fbe\u7684\u6982\u5ff5\u4ecd\u7136\u662f\u6709\u610f\u4e49\u7684\uff1a \u7a7a\u503c\u662f\u4e00\u4e2a\u56e0\u4e3a\u67d0\u79cd\u539f\u56e0\u76ee\u524d\u65e0\u6548\u6216\u7f3a\u5931\u7684\u503c \u3002 \u95ee\u9898\u4e0d\u5728\u4e8e\u6982\u5ff5\u800c\u5728\u4e8e\u5177\u4f53\u7684\u5b9e\u73b0\u3002\u4e3a\u6b64\uff0cRust \u5e76\u6ca1\u6709\u7a7a\u503c\uff0c\u4e0d\u8fc7\u5b83\u786e\u5b9e\u62e5\u6709\u4e00\u4e2a\u53ef\u4ee5\u7f16\u7801\u5b58\u5728\u6216\u4e0d\u5b58\u5728\u6982\u5ff5\u7684\u679a\u4e3e\u3002\u8fd9\u4e2a\u679a\u4e3e\u662f Option<T> \uff0c\u800c\u4e14\u5b83 \u5b9a\u4e49\u4e8e\u6807\u51c6\u5e93\u4e2d \uff0c\u5982\u4e0b: enum Option < T > { None , Some ( T ), } Option<T> \u679a\u4e3e\u662f\u5982\u6b64\u6709\u7528\u4ee5\u81f3\u4e8e\u5b83\u751a\u81f3\u88ab\u5305\u542b\u5728\u4e86 prelude \u4e4b\u4e2d\uff0c\u4f60\u4e0d\u9700\u8981\u5c06\u5176\u663e\u5f0f\u5f15\u5165\u4f5c\u7528\u57df\u3002 \u53e6\u5916\uff0c\u5b83\u7684\u6210\u5458\u4e5f\u662f\u5982\u6b64\uff0c\u53ef\u4ee5\u4e0d\u9700\u8981 Option:: \u524d\u7f00\u6765\u76f4\u63a5\u4f7f\u7528 Some \u548c None \u3002 \u5373\u4fbf\u5982\u6b64 Option<T> \u4e5f\u4ecd\u662f\u5e38\u89c4\u7684\u679a\u4e3e\uff0c Some(T) \u548c None \u4ecd\u662f Option<T> \u7684\u6210\u5458\u3002 <T> \u8bed\u6cd5\u662f\u4e00\u4e2a\u6211\u4eec\u8fd8\u672a\u8bb2\u5230\u7684 Rust \u529f\u80fd\u3002\u5b83\u662f\u4e00\u4e2a\u6cdb\u578b\u7c7b\u578b\u53c2\u6570\uff0c\u7b2c\u5341\u7ae0\u4f1a\u66f4\u8be6\u7ec6\u7684\u8bb2\u89e3\u6cdb\u578b\u3002 let some_number = Some ( 5 ); // \u7c7b\u578b\u662f Option<i32> let some_char = Some ( 'e' ); // \u7c7b\u578b\u662f Option<char> let absent_number : Option < i32 > = None ; // \u5bf9\u4e8e absent_number\uff0c Rust \u9700\u8981\u6211\u4eec\u6307\u5b9a Option \u6574\u4f53\u7684\u7c7b\u578b // \u56e0\u4e3a\u7f16\u8bd1\u5668\u53ea\u901a\u8fc7 None \u503c\u65e0\u6cd5\u63a8\u65ad\u51fa Some \u6210\u5458\u4fdd\u5b58\u7684\u503c\u7684\u7c7b\u578b\u3002 // \u8fd9\u91cc\u6211\u4eec\u544a\u8bc9 Rust \u5e0c\u671b absent_number \u662f Option<i32> \u7c7b\u578b\u7684\u3002 \u5f53\u6709\u4e00\u4e2a Some \u503c\u65f6\uff0c\u6211\u4eec\u5c31\u77e5\u9053\u5b58\u5728\u4e00\u4e2a\u503c\uff0c\u800c\u8fd9\u4e2a\u503c\u4fdd\u5b58\u5728 Some \u4e2d\u3002\u5f53\u6709\u4e2a None \u503c\u65f6\uff0c\u5728\u67d0\u79cd\u610f\u4e49\u4e0a\uff0c\u5b83\u8ddf\u7a7a\u503c\u5177\u6709\u76f8\u540c\u7684\u610f\u4e49\uff1a \u5e76\u6ca1\u6709\u4e00\u4e2a\u6709\u6548\u7684\u503c \u3002\u90a3\u4e48\uff0c Option<T> \u4e3a\u4ec0\u4e48\u5c31\u6bd4\u7a7a\u503c\u8981\u597d\u5462\uff1f \u7b80\u800c\u8a00\u4e4b\uff0c\u56e0\u4e3a Option<T> \u548c T \uff08\u8fd9\u91cc T \u53ef\u4ee5\u662f\u4efb\u4f55\u7c7b\u578b\uff09\u662f\u4e0d\u540c\u7684\u7c7b\u578b\uff0c\u7f16\u8bd1\u5668\u4e0d\u5141\u8bb8\u50cf\u4e00\u4e2a\u80af\u5b9a\u6709\u6548\u7684\u503c\u90a3\u6837\u4f7f\u7528 Option<T> \u3002\u4f8b\u5982\uff0c\u8fd9\u6bb5\u4ee3\u7801\u4e0d\u80fd\u7f16\u8bd1\uff0c\u56e0\u4e3a\u5b83\u5c1d\u8bd5\u5c06 Option<i8> \u4e0e i8 \u76f8\u52a0\uff1a let x : i8 = 5 ; let y : Option < i8 > = Some ( 5 ); let sum = x + y ; \u5982\u679c\u8fd0\u884c\u8fd9\u4e9b\u4ee3\u7801\uff0c\u5c06\u5f97\u5230\u7c7b\u4f3c\u8fd9\u6837\u7684\u9519\u8bef\u4fe1\u606f\uff1a $ cargo run Compiling enums v0.1.0 ( file:///projects/enums ) error [ E0277 ] : cannot add ` Option<i8> ` to ` i8 ` --> src/main.rs:5:17 | 5 | let sum = x + y ; | ^ no implementation for ` i8 + Option<i8> ` | = help: the trait ` Add<Option<i8>> ` is not implemented for ` i8 ` For more information about this error, try ` rustc --explain E0277 ` . error: could not compile ` enums ` due to previous error \u9519\u8bef\u4fe1\u606f\u610f\u5473\u7740 Rust \u4e0d\u77e5\u9053\u8be5\u5982\u4f55\u5c06 Option<i8> \u4e0e i8 \u76f8\u52a0\uff0c\u56e0\u4e3a\u5b83\u4eec\u7684\u7c7b\u578b\u4e0d\u540c\u3002 \u5f53\u5728 Rust \u4e2d\u62e5\u6709\u4e00\u4e2a\u50cf i8 \u8fd9\u6837\u7c7b\u578b\u7684\u503c\u65f6\uff0c\u7f16\u8bd1\u5668\u786e\u4fdd\u5b83\u603b\u662f\u6709\u4e00\u4e2a\u6709\u6548\u7684\u503c\u3002\u6211\u4eec\u53ef\u4ee5\u81ea\u4fe1\u4f7f\u7528\u800c\u65e0\u9700\u505a\u7a7a\u503c\u68c0\u67e5\u3002 \u53ea\u6709\u5f53\u4f7f\u7528 Option<i8> \uff08\u6216\u8005\u4efb\u4f55\u7528\u5230\u7684\u7c7b\u578b\uff09\u7684\u65f6\u5019\u9700\u8981\u62c5\u5fc3\u53ef\u80fd\u6ca1\u6709\u503c\uff0c\u800c \u7f16\u8bd1\u5668\u4f1a\u786e\u4fdd\u6211\u4eec\u5728\u4f7f\u7528\u503c\u4e4b\u524d\u5904\u7406\u4e86\u4e3a\u7a7a\u7684\u60c5\u51b5\u3002 \u6362\u53e5\u8bdd\u8bf4\uff0c\u5728\u5bf9 Option<T> \u8fdb\u884c T \u7684\u8fd0\u7b97\u4e4b\u524d\u5fc5\u987b\u5c06\u5176\u8f6c\u6362\u4e3a T \u3002\u901a\u5e38\u8fd9\u80fd\u5e2e\u52a9\u6211\u4eec\u6355\u83b7\u5230\u7a7a\u503c\u6700\u5e38\u89c1\u7684\u95ee\u9898\u4e4b\u4e00\uff1a \u5047\u8bbe\u67d0\u503c\u4e0d\u4e3a\u7a7a\u4f46\u5b9e\u9645\u4e0a\u4e3a\u7a7a\u7684\u60c5\u51b5\u3002 \u6d88\u9664\u4e86\u9519\u8bef\u5730\u5047\u8bbe\u4e00\u4e2a\u975e\u7a7a\u503c\u7684\u98ce\u9669\uff0c\u4f1a\u8ba9\u4f60\u5bf9\u4ee3\u7801\u66f4\u52a0\u6709\u4fe1\u5fc3\u3002 \u4e3a\u4e86\u62e5\u6709\u4e00\u4e2a\u53ef\u80fd\u4e3a\u7a7a\u7684\u503c\uff0c\u4f60\u5fc5\u987b\u8981\u663e\u5f0f\u7684\u5c06\u5176\u653e\u5165\u5bf9\u5e94\u7c7b\u578b\u7684 Option<T> \u4e2d\u3002 \u63a5\u7740\uff0c\u5f53\u4f7f\u7528\u8fd9\u4e2a\u503c\u65f6\uff0c\u5fc5\u987b\u660e\u786e\u7684\u5904\u7406\u503c\u4e3a\u7a7a\u7684\u60c5\u51b5\u3002\u53ea\u8981\u4e00\u4e2a\u503c\u4e0d\u662f Option<T> \u7c7b\u578b\uff0c\u4f60\u5c31 \u53ef\u4ee5 \u5b89\u5168\u7684\u8ba4\u5b9a\u5b83\u7684\u503c\u4e0d\u4e3a\u7a7a\u3002 \u8fd9\u662f Rust \u7684\u4e00\u4e2a\u7ecf\u8fc7\u6df1\u601d\u719f\u8651\u7684\u8bbe\u8ba1\u51b3\u7b56\uff0c\u6765\u9650\u5236\u7a7a\u503c\u7684\u6cdb\u6ee5\u4ee5\u589e\u52a0 Rust \u4ee3\u7801\u7684\u5b89\u5168\u6027\u3002 \u90a3\u4e48\u5f53\u6709\u4e00\u4e2a Option<T> \u7684\u503c\u65f6\uff0c\u5982\u4f55\u4ece Some \u6210\u5458\u4e2d\u53d6\u51fa T \u7684\u503c\u6765\u4f7f\u7528\u5b83\u5462\uff1f Option<T> \u679a\u4e3e\u62e5\u6709\u5927\u91cf\u7528\u4e8e\u5404\u79cd\u60c5\u51b5\u7684\u65b9\u6cd5\uff1a\u4f60\u53ef\u4ee5\u67e5\u770b \u5b83\u7684\u6587\u6863 \u3002 \u719f\u6089 Option<T> \u7684\u65b9\u6cd5\u5c06\u5bf9\u4f60\u7684 Rust \u4e4b\u65c5\u975e\u5e38\u6709\u7528\u3002 \u603b\u7684\u6765\u8bf4\uff0c\u4e3a\u4e86\u4f7f\u7528 Option<T> \u503c\uff0c \u9700\u8981\u7f16\u5199\u5904\u7406\u6bcf\u4e2a\u6210\u5458\u7684\u4ee3\u7801\u3002 \u4f60\u60f3\u8981\u4e00\u4e9b\u4ee3\u7801\u53ea\u5f53\u62e5\u6709 Some(T) \u503c\u65f6\u8fd0\u884c\uff0c\u5141\u8bb8\u8fd9\u4e9b\u4ee3\u7801\u4f7f\u7528\u5176\u4e2d\u7684 T \u3002 \u4e5f\u5e0c\u671b\u4e00\u4e9b\u4ee3\u7801\u5728\u503c\u4e3a None \u65f6\u8fd0\u884c\uff0c\u8fd9\u4e9b\u4ee3\u7801\u5e76\u6ca1\u6709\u4e00\u4e2a\u53ef\u7528\u7684 T \u503c\u3002 match \u8868\u8fbe\u5f0f\u5c31\u662f\u8fd9\u4e48\u4e00\u4e2a\u5904\u7406\u679a\u4e3e\u7684\u63a7\u5236\u6d41\u7ed3\u6784\uff1a \u5b83\u4f1a\u6839\u636e\u679a\u4e3e\u7684\u6210\u5458\u8fd0\u884c\u4e0d\u540c\u7684\u4ee3\u7801\uff0c\u8fd9\u4e9b\u4ee3\u7801\u53ef\u4ee5\u4f7f\u7528\u5339\u914d\u5230\u7684\u503c\u4e2d\u7684\u6570\u636e \u3002","title":"Option \u679a\u4e3e"},{"location":"enumerations/#match","text":"Rust \u6709\u4e00\u4e2a\u53eb\u505a match \u7684\u6781\u4e3a\u5f3a\u5927\u7684\u63a7\u5236\u6d41\u8fd0\u7b97\u7b26\uff0c\u5b83\u5141\u8bb8\u6211\u4eec \u5c06\u4e00\u4e2a\u503c\u4e0e\u4e00\u7cfb\u5217\u7684\u6a21\u5f0f\u76f8\u6bd4\u8f83\uff0c\u5e76\u6839\u636e\u76f8\u5339\u914d\u7684\u6a21\u5f0f\u6267\u884c\u76f8\u5e94\u4ee3\u7801 \u3002\u6a21\u5f0f\u53ef\u7531 \u5b57\u9762\u503c \u3001 \u53d8\u91cf \u3001 \u901a\u914d\u7b26 \u548c\u8bb8\u591a \u5176\u4ed6\u5185\u5bb9 \u6784\u6210\uff1b match \u7684\u529b\u91cf\u6765\u6e90\u4e8e\u6a21\u5f0f\u7684\u8868\u73b0\u529b\u4ee5\u53ca\u7f16\u8bd1\u5668\u68c0\u67e5\uff0c\u5b83\u786e\u4fdd\u4e86\u6240\u6709\u53ef\u80fd\u7684\u60c5\u51b5\u90fd\u5f97\u5230\u5904\u7406\u3002 \u7f16\u5199\u4e00\u4e2a\u51fd\u6570\u6765\u83b7\u53d6\u4e00\u4e2a\u672a\u77e5\u7684\u786c\u5e01\uff0c\u5e76\u4ee5\u4e00\u79cd\u7c7b\u4f3c\u9a8c\u949e\u673a\u7684\u65b9\u5f0f\uff0c\u786e\u5b9a\u5b83\u662f\u4f55\u79cd\u786c\u5e01\u5e76\u8fd4\u56de\u5b83\u7684\u7f8e\u5206\u503c: // \u4e00\u4e2a\u679a\u4e3e\u548c\u4e00\u4e2a\u4ee5\u679a\u4e3e\u6210\u5458\u4f5c\u4e3a\u6a21\u5f0f\u7684 match \u8868\u8fbe\u5f0f enum Coin { Penny , Nickel , Dime , Quarter , } fn value_in_cents ( coin : Coin ) -> u8 { // \u5217\u51fa match \u5173\u952e\u5b57\u540e\u8ddf\u4e00\u4e2a\u8868\u8fbe\u5f0f // \u770b\u8d77\u6765\u975e\u5e38\u50cf if \u4f7f\u7528\u7684\u8868\u8fbe\u5f0f\uff0c\u4e0d\u8fc7\u8fd9\u91cc\u6709\u4e00\u4e2a\u975e\u5e38\u5927\u7684\u533a\u522b\uff1a\u5bf9\u4e8e if\uff0c\u8868\u8fbe\u5f0f\u5fc5\u987b\u8fd4\u56de\u4e00\u4e2a\u5e03\u5c14\u503c\uff0c\u800c\u8fd9\u91cc\u5b83\u53ef\u4ee5\u662f\u4efb\u4f55\u7c7b\u578b // coin \u7684\u7c7b\u578b\u662f\u5b9a\u4e49\u7684 Coin \u679a\u4e3e\u3002 match coin { // \u63a5\u4e0b\u6765\u662f match \u7684\u5206\u652f // \u4e00\u4e2a\u5206\u652f\u6709\u4e24\u4e2a\u90e8\u5206\uff1a\u4e00\u4e2a\u6a21\u5f0f\u548c\u4e00\u4e9b\u4ee3\u7801\u3002 // => \u8fd0\u7b97\u7b26\u5c06\u6a21\u5f0f\u548c\u5c06\u8981\u8fd0\u884c\u7684\u4ee3\u7801\u5206\u5f00 // \u6bcf\u4e00\u4e2a\u5206\u652f\u4e4b\u95f4\u4f7f\u7528\u9017\u53f7\u5206\u9694\u3002 Coin :: Penny => 1 , // 1\u7f8e\u5206 Coin :: Nickel => 5 , // 5\u7f8e\u5206 Coin :: Dime => 10 , // 10\u7f8e\u5206 Coin :: Quarter => 25 , // 25\u7f8e\u5206 // \u5982\u679c\u6a21\u5f0f\u5339\u914d\u4e86\u8fd9\u4e2a\u503c\uff0c\u8fd9\u4e2a\u6a21\u5f0f\u76f8\u5173\u8054\u7684\u4ee3\u7801\u5c06\u88ab\u6267\u884c\u3002\u5982\u679c\u6a21\u5f0f\u5e76\u4e0d\u5339\u914d\u8fd9\u4e2a\u503c\uff0c\u5c06\u7ee7\u7eed\u6267\u884c\u4e0b\u4e00\u4e2a\u5206\u652f // \u53ef\u4ee5\u62e5\u6709\u4efb\u610f\u591a\u7684\u5206\u652f, \u8fd9\u91cc\u67094\u4e2a\u5206\u652f // \u6bcf\u4e2a\u5206\u652f\u76f8\u5173\u8054\u7684\u4ee3\u7801\u662f\u4e00\u4e2a\u8868\u8fbe\u5f0f\uff0c\u800c\u8868\u8fbe\u5f0f\u7684\u7ed3\u679c\u503c\u5c06\u4f5c\u4e3a\u6574\u4e2a match \u8868\u8fbe\u5f0f\u7684\u8fd4\u56de\u503c\u3002 } } \u5982\u679c\u5206\u652f\u4ee3\u7801\u8f83\u77ed\u7684\u8bdd\u901a\u5e38\u4e0d\u4f7f\u7528\u5927\u62ec\u53f7 \uff0c\u4e0a\u9762\u7684\u793a\u4f8b\u6bcf\u4e2a\u5206\u652f\u90fd\u53ea\u662f\u8fd4\u56de\u4e00\u4e2a\u503c\u3002 \u5982\u679c\u60f3\u8981\u5728\u5206\u652f\u4e2d\u8fd0\u884c\u591a\u884c\u4ee3\u7801\uff0c \u53ef\u4ee5\u4f7f\u7528\u5927\u62ec\u53f7\uff0c\u800c\u5206\u652f\u540e\u7684\u9017\u53f7\u662f\u53ef\u9009\u7684 \u3002 \u4f8b\u5982\uff0c\u5982\u4e0b\u4ee3\u7801\u5728\u6bcf\u6b21\u4f7f\u7528 Coin::Penny \u8c03\u7528\u65f6\u90fd\u4f1a\u6253\u5370\u51fa \u201cLucky penny!\u201d \uff0c\u540c\u65f6\u4ecd\u7136\u8fd4\u56de\u4ee3\u7801\u5757\u6700\u540e\u7684\u503c\uff0c1\uff1a fn value_in_cents ( coin : Coin ) -> u8 { match coin { Coin :: Penny => { println! ( \"Lucky penny!\" ); 1 } Coin :: Nickel => 5 , Coin :: Dime => 10 , Coin :: Quarter => 25 , } }","title":"match\u63a7\u5236\u6d41"},{"location":"enumerations/#_4","text":"\u5339\u914d\u5206\u652f\u7684\u53e6\u4e00\u4e2a\u6709\u7528\u7684\u529f\u80fd\u662f\u53ef\u4ee5 \u7ed1\u5b9a\u5339\u914d\u7684\u6a21\u5f0f\u7684\u90e8\u5206\u503c \u3002\u8fd9\u4e5f\u5c31\u662f\u5982\u4f55\u4ece\u679a\u4e3e\u6210\u5458\u4e2d\u63d0\u53d6\u503c\u7684\u3002 \u4f5c\u4e3a\u4e00\u4e2a\u4f8b\u5b50\uff0c\u8ba9\u6211\u4eec\u4fee\u6539\u679a\u4e3e\u7684\u4e00\u4e2a\u6210\u5458\u6765\u5b58\u653e\u6570\u636e\u3002 1999 \u5e74\u5230 2008 \u5e74\u95f4\uff0c\u7f8e\u56fd\u5728 25 \u7f8e\u5206\u7684\u786c\u5e01\u7684\u4e00\u4fa7\u4e3a 50 \u4e2a\u5dde\u7684\u6bcf\u4e00\u4e2a\u90fd\u5370\u5237\u4e86\u4e0d\u540c\u7684\u8bbe\u8ba1\u3002 \u5176\u4ed6\u7684\u786c\u5e01\u90fd\u6ca1\u6709\u8fd9\u79cd\u533a\u5206\u5dde\u7684\u8bbe\u8ba1\uff0c\u6240\u4ee5\u53ea\u6709\u8fd9\u4e9b 25 \u7f8e\u5206\u786c\u5e01\u6709\u7279\u6b8a\u7684\u4ef7\u503c\u3002 \u53ef\u4ee5\u5c06\u8fd9\u4e9b\u4fe1\u606f\u52a0\u5165\u6211\u4eec\u7684 enum \uff0c\u901a\u8fc7\u6539\u53d8 Quarter \u6210\u5458\u6765\u5305\u542b\u4e00\u4e2a State \u503c\uff0c\u793a\u4f8b\u5b8c\u6210\u4e86\u8fd9\u4e9b\u4fee\u6539\uff1a #[derive(Debug)] // \u8fd9\u6837\u53ef\u4ee5\u7acb\u523b\u770b\u5230\u5dde\u7684\u540d\u79f0 enum UsState { Alabama , Alaska , // --snip-- } enum Coin { Penny , Nickel , Dime , Quarter ( UsState ), } fn main () {} \u60f3\u8c61\u4e00\u4e0b\u6211\u4eec\u7684\u4e00\u4e2a\u670b\u53cb\u5c1d\u8bd5\u6536\u96c6\u6240\u6709 50 \u4e2a\u5dde\u7684 25 \u7f8e\u5206\u786c\u5e01\u3002\u5728\u6839\u636e\u786c\u5e01\u7c7b\u578b\u5206\u7c7b\u96f6\u94b1\u7684\u540c\u65f6\uff0c\u4e5f\u53ef\u4ee5\u62a5\u544a\u51fa\u6bcf\u4e2a 25 \u7f8e\u5206\u786c\u5e01\u6240\u5bf9\u5e94\u7684\u5dde\u540d\u79f0\uff0c\u8fd9\u6837\u5982\u679c\u6211\u4eec\u7684\u670b\u53cb\u6ca1\u6709\u7684\u8bdd\uff0c\u4ed6\u53ef\u4ee5\u5c06\u5176\u52a0\u5165\u6536\u85cf\u3002 \u5728\u8fd9\u4e9b\u4ee3\u7801\u7684\u5339\u914d\u8868\u8fbe\u5f0f\u4e2d\uff0c\u6211\u4eec\u5728\u5339\u914d Coin::Quarter \u6210\u5458\u7684\u5206\u652f\u7684\u6a21\u5f0f\u4e2d\u589e\u52a0\u4e86\u4e00\u4e2a\u53eb\u505a state \u7684\u53d8\u91cf\u3002\u5f53\u5339\u914d\u5230 Coin::Quarter \u65f6\uff0c\u53d8\u91cf state \u5c06\u4f1a\u7ed1\u5b9a 25 \u7f8e\u5206\u786c\u5e01\u6240\u5bf9\u5e94\u5dde\u7684\u503c\u3002 \u63a5\u7740\u5728\u90a3\u4e2a\u5206\u652f\u7684\u4ee3\u7801\u4e2d\u4f7f\u7528 state \uff0c\u5982\u4e0b\uff1a fn value_in_cents ( coin : Coin ) -> u8 { match coin { Coin :: Penny => 1 , Coin :: Nickel => 5 , Coin :: Dime => 10 , Coin :: Quarter ( state ) => { println! ( \"State quarter from {:?}!\" , state ); 25 } } } value_in_cents ( Coin :: Quarter ( UsState :: Alaska )) // state \u7ed1\u5b9a\u7684\u5c06\u4f1a\u662f\u503c UsState::Alaska","title":"\u7ed1\u5b9a\u503c\u7684\u6a21\u5f0f"},{"location":"enumerations/#optiont","text":"\u5728\u4e4b\u524d\u7684\u90e8\u5206\u4e2d\u4f7f\u7528 Option<T> \u65f6\uff0c\u662f\u4e3a\u4e86\u4ece Some \u4e2d\u53d6\u51fa\u5176\u5185\u90e8\u7684 T \u503c\uff1b\u6211\u4eec\u8fd8\u53ef\u4ee5\u50cf\u5904\u7406 Coin \u679a\u4e3e\u90a3\u6837\u4f7f\u7528 match \u5904\u7406 Option<T> \uff01\u53ea\u4e0d\u8fc7\u8fd9\u56de\u6bd4\u8f83\u7684\u4e0d\u518d\u662f\u786c\u5e01\uff0c\u800c\u662f Option<T> \u7684\u6210\u5458\uff0c\u4f46 match \u8868\u8fbe\u5f0f\u7684\u5de5\u4f5c\u65b9\u5f0f\u4fdd\u6301\u4e0d\u53d8\u3002 \u6bd4\u5982\u6211\u4eec\u60f3\u8981\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\uff0c\u5b83\u83b7\u53d6\u4e00\u4e2a Option<i32> \uff0c\u5982\u679c\u5176\u4e2d\u542b\u6709\u4e00\u4e2a\u503c\uff0c\u5c06\u5176\u52a0\u4e00\u3002\u5982\u679c\u5176\u4e2d\u6ca1\u6709\u503c\uff0c\u51fd\u6570\u5e94\u8be5\u8fd4\u56de None \u503c\uff0c\u800c\u4e0d\u5c1d\u8bd5\u6267\u884c\u4efb\u4f55\u64cd\u4f5c\u3002 // \u4e00\u4e2a\u5728 Option<i32> \u4e0a\u4f7f\u7528 match \u8868\u8fbe\u5f0f\u7684\u51fd\u6570 fn plus_one ( x : Option < i32 > ) -> Option < i32 > { match x { None => None , Some ( i ) => Some ( i + 1 ), } } let five = Some ( 5 ); let six = plus_one ( five ); let none = plus_one ( None );","title":"\u5339\u914d Option\\&lt;T>"},{"location":"enumerations/#somet","text":"\u66f4\u4ed4\u7ec6\u5730\u68c0\u67e5 plus_one \u7684\u7b2c\u4e00\u884c\u64cd\u4f5c\u3002\u5f53\u8c03\u7528 plus_one(five) \u65f6\uff0c plus_one \u51fd\u6570\u4f53\u4e2d\u7684 x \u5c06\u4f1a\u662f\u503c Some(5) \u3002\u63a5\u7740\u5c06\u5176\u4e0e\u6bcf\u4e2a\u5206\u652f\u6bd4\u8f83\u3002 \u503c Some(5) \u5e76\u4e0d\u5339\u914d\u6a21\u5f0f None \uff0c\u6240\u4ee5\u7ee7\u7eed\u8fdb\u884c\u4e0b\u4e00\u4e2a\u5206\u652f\u3002 Some ( i ) => Some ( i + 1 ), Some(5) \u4e0e Some(i) \u5339\u914d\u5417\uff1f\u5f53\u7136\u5339\u914d\uff01\u5b83\u4eec\u662f\u76f8\u540c\u7684\u6210\u5458\u3002 i \u7ed1\u5b9a\u4e86 Some \u4e2d\u5305\u542b\u7684\u503c\uff0c\u6240\u4ee5 i \u7684\u503c\u662f 5 \u3002 \u63a5\u7740\u5339\u914d\u5206\u652f\u7684\u4ee3\u7801\u88ab\u6267\u884c\uff0c\u6240\u4ee5\u6211\u4eec\u5c06 i \u7684\u503c\u52a0\u4e00\u5e76\u8fd4\u56de\u4e00\u4e2a\u542b\u6709\u503c 6 \u7684\u65b0 Some \u3002 \u63a5\u7740\u8003\u8651\u4e0b\u793a\u4f8b\u4e2d plus_one \u7684\u7b2c\u4e8c\u4e2a\u8c03\u7528\uff0c\u8fd9\u91cc x \u662f None \u3002\u6211\u4eec\u8fdb\u5165 match \u5e76\u4e0e\u7b2c\u4e00\u4e2a\u5206\u652f\u76f8\u6bd4\u8f83\u3002 None => None , \u5339\u914d\u4e0a\u4e86\uff01\u8fd9\u91cc\u6ca1\u6709\u503c\u6765\u52a0\u4e00\uff0c\u6240\u4ee5\u7a0b\u5e8f\u7ed3\u675f\u5e76\u8fd4\u56de => \u53f3\u4fa7\u7684\u503c None \uff0c\u56e0\u4e3a\u7b2c\u4e00\u4e2a\u5206\u652f\u5c31\u5339\u914d\u5230\u4e86\uff0c \u5176\u4ed6\u7684\u5206\u652f\u5c06\u4e0d\u518d\u6bd4\u8f83 \u3002 \u5c06 match \u4e0e\u679a\u4e3e\u76f8\u7ed3\u5408\u5728\u5f88\u591a\u573a\u666f\u4e2d\u90fd\u662f\u6709\u7528\u7684\u3002\u4f60\u4f1a\u5728 Rust \u4ee3\u7801\u4e2d\u770b\u5230\u5f88\u591a\u8fd9\u6837\u7684\u6a21\u5f0f\uff1a match \u4e00\u4e2a\u679a\u4e3e\uff0c\u7ed1\u5b9a\u5176\u4e2d\u7684\u503c\u5230\u4e00\u4e2a\u53d8\u91cf\uff0c\u63a5\u7740\u6839\u636e\u5176\u503c\u6267\u884c\u4ee3\u7801 \u3002 \u8fd9\u5728\u4e00\u5f00\u59cb\u6709\u70b9\u590d\u6742\uff0c\u4e0d\u8fc7\u4e00\u65e6\u4e60\u60ef\u4e86\uff0c\u4f60\u4f1a\u5e0c\u671b\u6240\u6709\u8bed\u8a00\u90fd\u62e5\u6709\u5b83\uff01","title":"\u5339\u914d Some(T)"},{"location":"enumerations/#_5","text":"match \u8fd8\u6709\u53e6\u4e00\u65b9\u9762\u9700\u8981\u8ba8\u8bba\uff1a \u8fd9\u4e9b\u5206\u652f\u5fc5\u987b\u8986\u76d6\u4e86\u6240\u6709\u7684\u53ef\u80fd\u6027 \u3002\u8003\u8651\u4e00\u4e0b plus_one \u51fd\u6570\u7684\u8fd9\u4e2a\u7248\u672c\uff0c\u5b83\u6709\u4e00\u4e2a bug \u5e76\u4e0d\u80fd\u7f16\u8bd1\uff1a fn plus_one ( x : Option < i32 > ) -> Option < i32 > { match x { Some ( i ) => Some ( i + 1 ), } } \u6211\u4eec\u6ca1\u6709\u5904\u7406 None \u7684\u60c5\u51b5\uff0c\u6240\u4ee5\u8fd9\u4e9b\u4ee3\u7801\u4f1a\u9020\u6210\u4e00\u4e2a bug \u3002\u5e78\u8fd0\u7684\u662f\uff0c\u8fd9\u662f\u4e00\u4e2a Rust \u77e5\u9053\u5982\u4f55\u5904\u7406\u7684 bug\u3002\u5982\u679c\u5c1d\u8bd5\u7f16\u8bd1\u8fd9\u6bb5\u4ee3\u7801\uff0c\u4f1a\u5f97\u5230\u8fd9\u4e2a\u9519\u8bef\uff1a $ cargo run Compiling enums v0.1.0 ( file:///projects/enums ) error [ E0004 ] : non-exhaustive patterns: ` None ` not covered --> src/main.rs:3:15 | 3 | match x { | ^ pattern ` None ` not covered | = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms = note: the matched value is of type ` Option<i32> ` For more information about this error, try ` rustc --explain E0004 ` . error: could not compile ` enums ` due to previous error Rust \u77e5\u9053\u6211\u4eec\u6ca1\u6709\u8986\u76d6\u6240\u6709\u53ef\u80fd\u7684\u60c5\u51b5\u751a\u81f3\u77e5\u9053\u54ea\u4e9b\u6a21\u5f0f\u88ab\u5fd8\u8bb0\u4e86\uff01 Rust \u4e2d\u7684\u5339\u914d\u662f \u7a77\u5c3d\u7684 \uff08exhaustive\uff09\uff1a \u5fc5\u987b\u7a77\u4e3e\u5230\u6700\u540e\u7684\u53ef\u80fd\u6027\u6765\u4f7f\u4ee3\u7801\u6709\u6548 \u3002 \u7279\u522b\u7684\u5728\u8fd9\u4e2a Option<T> \u7684\u4f8b\u5b50\u4e2d\uff0cRust \u9632\u6b62\u6211\u4eec\u5fd8\u8bb0\u660e\u786e\u7684\u5904\u7406 None \u7684\u60c5\u51b5\uff0c\u8fd9\u8ba9\u6211\u4eec\u514d\u4e8e\u5047\u8bbe\u62e5\u6709\u4e00\u4e2a\u5b9e\u9645\u4e0a\u4e3a\u7a7a\u7684\u503c\uff0c\u4ece\u800c\u4f7f\u4e4b\u524d\u63d0\u5230\u7684\u4ef7\u503c\u4ebf\u4e07\u7684\u9519\u8bef\u4e0d\u53ef\u80fd\u53d1\u751f\u3002","title":"\u5339\u914d\u662f\u7a77\u5c3d\u7684"},{"location":"enumerations/#_","text":"let dice_roll = 9 ; match dice_roll { // \u5bf9\u4e8e\u524d\u4e24\u4e2a\u5206\u652f\uff0c\u5339\u914d\u6a21\u5f0f\u662f\u5b57\u9762\u503c 3 \u548c 7 3 => add_fancy_hat (), 7 => remove_fancy_hat (), // \u6700\u540e\u4e00\u4e2a\u5206\u652f\u5219\u6db5\u76d6\u4e86\u6240\u6709\u5176\u4ed6\u53ef\u80fd\u7684\u503c other => move_player ( other ), } fn add_fancy_hat () {} fn remove_fancy_hat () {} fn move_player ( num_spaces : u8 ) {} \u6a21\u5f0f\u662f\u6211\u4eec\u547d\u540d\u4e3a other \u7684\u4e00\u4e2a\u53d8\u91cf\u3002 other \u5206\u652f\u7684\u4ee3\u7801\u901a\u8fc7\u5c06\u5176\u4f20\u9012\u7ed9 move_player \u51fd\u6570\u6765\u4f7f\u7528\u8fd9\u4e2a\u53d8\u91cf\u3002 \u5373\u4f7f\u6211\u4eec\u6ca1\u6709\u5217\u51fa u8 \u6240\u6709\u53ef\u80fd\u7684\u503c\uff0c\u8fd9\u6bb5\u4ee3\u7801\u4f9d\u7136\u80fd\u591f\u7f16\u8bd1\uff0c\u56e0\u4e3a\u6700\u540e\u4e00\u4e2a\u6a21\u5f0f\u5c06\u5339\u914d\u6240\u6709\u672a\u88ab\u7279\u6b8a\u5217\u51fa\u7684\u503c\u3002 \u8fd9\u79cd\u901a\u914d\u6a21\u5f0f\u6ee1\u8db3\u4e86 match \u5fc5\u987b\u88ab\u7a77\u5c3d\u7684\u8981\u6c42\u3002 \u8bf7\u6ce8\u610f\uff0c\u6211\u4eec \u5fc5\u987b\u5c06\u901a\u914d\u5206\u652f\u653e\u5728\u6700\u540e\uff0c\u56e0\u4e3a\u6a21\u5f0f\u662f\u6309\u987a\u5e8f\u5339\u914d\u7684 \u3002 \u5982\u679c\u6211\u4eec\u5728\u901a\u914d\u5206\u652f\u540e\u6dfb\u52a0\u5176\u4ed6\u5206\u652f\uff0cRust \u5c06\u4f1a\u8b66\u544a\u6211\u4eec\uff0c\u56e0\u4e3a\u6b64\u540e\u7684\u5206\u652f\u6c38\u8fdc\u4e0d\u4f1a\u88ab\u5339\u914d\u5230\u3002 Rust \u8fd8\u63d0\u4f9b\u4e86\u4e00\u4e2a\u6a21\u5f0f\uff0c\u5f53\u6211\u4eec\u4e0d\u60f3\u4f7f\u7528\u901a\u914d\u6a21\u5f0f\u83b7\u53d6\u7684\u503c\u65f6\uff0c\u8bf7\u4f7f\u7528 _ \uff0c\u8fd9\u662f\u4e00\u4e2a\u7279\u6b8a\u7684\u6a21\u5f0f\uff0c\u53ef\u4ee5\u5339\u914d\u4efb\u610f\u503c\u800c\u4e0d\u7ed1\u5b9a\u5230\u8be5\u503c\u3002 \u8fd9\u544a\u8bc9 Rust \u6211\u4eec\u4e0d\u4f1a\u4f7f\u7528\u8fd9\u4e2a\u503c\uff0c\u6240\u4ee5 Rust \u4e5f\u4e0d\u4f1a\u8b66\u544a\u6211\u4eec\u5b58\u5728\u672a\u4f7f\u7528\u7684\u53d8\u91cf\u3002 let dice_roll = 9 ; match dice_roll { 3 => add_fancy_hat (), 7 => remove_fancy_hat (), _ => reroll (), // \u4f7f\u7528 _ \u4e22\u5f03\u503c\u3002 } fn add_fancy_hat () {} fn remove_fancy_hat () {} fn reroll () {} \u6700\u540e\uff0c\u5982\u679c\u5c06\u65e0\u4e8b\u53d1\u751f\u3002\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 \u5355\u5143\u503c \uff08\u5728\u201c \u5143\u7ec4\u7c7b\u578b \u201d\u4e00\u8282\u4e2d\u63d0\u5230\u7684\u7a7a\u5143\u7ec4\uff09\u4f5c\u4e3a _ \u5206\u652f\u7684\u4ee3\u7801\uff1a let dice_roll = 9 ; match dice_roll { 3 => add_fancy_hat (), 7 => remove_fancy_hat (), _ => (), // \u5355\u5143\u503c\uff0c\u65e0\u4e8b\u53d1\u751f\u3002 } fn add_fancy_hat () {} fn remove_fancy_hat () {} \u5728\u8fd9\u91cc\uff0c\u660e\u786e\u544a\u8bc9 Rust \u6211\u4eec \u4e0d\u4f1a\u4f7f\u7528\u4e0e\u524d\u9762\u6a21\u5f0f\u4e0d\u5339\u914d\u7684\u503c\uff0c\u5e76\u4e14\u8fd9\u79cd\u60c5\u51b5\u4e0b\u6211\u4eec\u4e0d\u60f3\u8fd0\u884c\u4efb\u4f55\u4ee3\u7801 \u3002","title":"\u901a\u914d\u6a21\u5f0f\u548c _ \u5360\u4f4d\u7b26"},{"location":"enumerations/#if-let","text":"if let \u8bed\u6cd5\u8ba9\u6211\u4eec\u4ee5\u4e00\u79cd\u4e0d\u90a3\u4e48\u5197\u957f\u7684\u65b9\u5f0f\u7ed3\u5408 if \u548c let \uff0c\u6765\u5904\u7406\u53ea\u5339\u914d\u4e00\u4e2a\u6a21\u5f0f\u7684\u503c\u800c\u5ffd\u7565\u5176\u4ed6\u6a21\u5f0f\u7684\u60c5\u51b5\u3002 let config_max = Some ( 3 u8 ); // \u5339\u914d\u4e00\u4e2a config_max \u53d8\u91cf\u4e2d\u7684 Option<u8> \u503c\u5e76\u53ea\u5e0c\u671b\u5f53\u503c\u4e3a Some \u6210\u5458\u65f6\u6267\u884c\u4ee3\u7801 match config_max { // \u8fd9\u4e2a\u503c\u88ab\u7ed1\u5b9a\u5230\u6a21\u5f0f\u4e2d\u7684 max \u53d8\u91cf\u91cc\u3002 Some ( max ) => println! ( \"The maximum is configured to be {}\" , max ), // \u5bf9\u4e8e None \u503c\u6211\u4eec\u4e0d\u5e0c\u671b\u505a\u4efb\u4f55\u64cd\u4f5c _ => (), } \u4e0d\u8fc7\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 if let \u8fd9\u79cd\u66f4\u77ed\u7684\u65b9\u5f0f\u7f16\u5199: let config_max = Some ( 3 u8 ); // if let \u8bed\u6cd5\u83b7\u53d6\u901a\u8fc7\u7b49\u53f7\u5206\u9694\u7684\u4e00\u4e2a\u6a21\u5f0f\u548c\u4e00\u4e2a\u8868\u8fbe\u5f0f\u3002\u5b83\u7684\u5de5\u4f5c\u65b9\u5f0f\u4e0e match \u76f8\u540c\uff0c\u8fd9\u91cc\u7684\u8868\u8fbe\u5f0f\u5bf9\u5e94 match \u800c\u6a21\u5f0f\u5219\u5bf9\u5e94\u7b2c\u4e00\u4e2a\u5206\u652f\u3002 // \u6a21\u5f0f\u662f Some(max)\uff0cmax \u7ed1\u5b9a\u4e3a Some \u4e2d\u7684\u503c\u3002 // \u63a5\u7740\u53ef\u4ee5\u5728 if let \u4ee3\u7801\u5757\u4e2d\u4f7f\u7528 max \u4e86 if let Some ( max ) = config_max { println! ( \"The maximum is configured to be {}\" , max ); } // \u6a21\u5f0f\u4e0d\u5339\u914d\u65f6 if let \u5757\u4e2d\u7684\u4ee3\u7801\u4e0d\u4f1a\u6267\u884c\u3002 \u4f7f\u7528 if let \u610f\u5473\u7740\u7f16\u5199\u66f4\u5c11\u4ee3\u7801\uff0c\u66f4\u5c11\u7684\u7f29\u8fdb\u548c\u66f4\u5c11\u7684\u6837\u677f\u4ee3\u7801\u3002 \u7136\u800c\uff0c\u8fd9\u6837\u4f1a\u5931\u53bb match \u5f3a\u5236\u8981\u6c42\u7684\u7a77\u5c3d\u6027\u68c0\u67e5\u3002 match \u548c if let \u4e4b\u95f4\u7684\u9009\u62e9\u4f9d\u8d56\u7279\u5b9a\u7684\u73af\u5883\u4ee5\u53ca\u589e\u52a0\u7b80\u6d01\u5ea6\u548c\u5931\u53bb\u7a77\u5c3d\u6027\u68c0\u67e5\u7684\u6743\u8861\u53d6\u820d\u3002 \u53ef\u4ee5\u8ba4\u4e3a if let \u662f match \u7684\u4e00\u4e2a\u8bed\u6cd5\u7cd6\uff0c\u5b83\u5f53\u503c\u5339\u914d\u67d0\u4e00\u6a21\u5f0f\u65f6\u6267\u884c\u4ee3\u7801\u800c\u5ffd\u7565\u6240\u6709\u5176\u4ed6\u503c\u3002 // \u53ef\u4ee5\u5728 if let \u4e2d\u5305\u542b\u4e00\u4e2a else\u3002else \u5757\u4e2d\u7684\u4ee3\u7801\u4e0e match \u8868\u8fbe\u5f0f\u4e2d\u7684 _ \u5206\u652f\u5757\u4e2d\u7684\u4ee3\u7801\u76f8\u540c let mut count = 0 ; if let Coin :: Quarter ( state ) = coin { println! ( \"State quarter from {:?}!\" , state ); } else { count += 1 ; } // \u8fd9\u6837\u7684 match \u8868\u8fbe\u5f0f\u5c31\u7b49\u540c\u4e8e if let \u548c else\u3002 let mut count = 0 ; match coin { Coin :: Quarter ( state ) => println! ( \"State quarter from {:?}!\" , state ), _ => count += 1 , }","title":"if let\u63a7\u5236\u6d41"},{"location":"error-handing/","text":"\u9519\u8bef\u5904\u7406 \u9519\u8bef\u662f\u8f6f\u4ef6\u4e2d\u4e0d\u53ef\u5426\u8ba4\u7684\u4e8b\u5b9e\uff0c\u6240\u4ee5 Rust \u6709\u4e00\u4e9b\u5904\u7406\u51fa\u9519\u60c5\u51b5\u7684\u7279\u6027\u3002 \u5728\u8bb8\u591a\u60c5\u51b5\u4e0b\uff0cRust \u8981\u6c42\u4f60\u627f\u8ba4\u9519\u8bef\u7684\u53ef\u80fd\u6027\uff0c\u5e76\u5728\u4ee3\u7801\u7f16\u8bd1\u524d\u91c7\u53d6\u4e00\u4e9b\u884c\u52a8\u3002 \u8fd9\u4e00\u8981\u6c42\u4f7f\u4f60\u7684\u7a0b\u5e8f\u66f4\u52a0\u5065\u58ee\uff0c\u56e0\u4e3a\u5b83\u53ef\u4ee5\u786e\u4fdd\u4f60\u5728\u5c06\u4ee3\u7801\u90e8\u7f72\u5230\u751f\u4ea7\u73af\u5883\u4e4b\u524d\u5c31\u80fd\u53d1\u73b0\u9519\u8bef\u5e76\u8fdb\u884c\u9002\u5f53\u7684\u5904\u7406\u3002 Rust \u5c06\u9519\u8bef\u5206\u4e3a\u4e24\u5927\u7c7b\uff1a \u53ef\u6062\u590d\u7684 \uff08recoverable\uff09\u548c \u4e0d\u53ef\u6062\u590d\u7684 \uff08unrecoverable\uff09\u9519\u8bef\u3002\u5bf9\u4e8e\u4e00\u4e2a\u53ef\u6062\u590d\u7684\u9519\u8bef\uff0c\u6bd4\u5982\u6587\u4ef6\u672a\u627e\u5230\u7684\u9519\u8bef\uff0c\u5f88\u53ef\u80fd\u53ea\u60f3\u5411\u7528\u6237\u62a5\u544a\u95ee\u9898\u5e76\u91cd\u8bd5\u64cd\u4f5c\u3002\u4e0d\u53ef\u6062\u590d\u7684\u9519\u8bef\u603b\u662f bug \u51fa\u73b0\u7684\u5f81\u5146\uff0c\u6bd4\u5982\u8bd5\u56fe\u8bbf\u95ee\u4e00\u4e2a\u8d85\u8fc7\u6570\u7ec4\u672b\u7aef\u7684\u4f4d\u7f6e\uff0c\u56e0\u6b64\u6211\u4eec\u8981\u7acb\u5373\u505c\u6b62\u7a0b\u5e8f\u3002 \u5927\u591a\u6570\u8bed\u8a00\u5e76\u4e0d\u533a\u5206\u8fd9\u4e24\u79cd\u9519\u8bef\uff0c\u5e76\u91c7\u7528\u7c7b\u4f3c\u5f02\u5e38\u8fd9\u6837\u65b9\u5f0f\u7edf\u4e00\u5904\u7406\u4ed6\u4eec\u3002Rust \u6ca1\u6709\u5f02\u5e38\u3002\u76f8\u53cd\uff0c\u5b83\u6709 Result<T, E> \u7c7b\u578b\uff0c\u7528\u4e8e\u5904\u7406\u53ef\u6062\u590d\u7684\u9519\u8bef\uff0c\u8fd8\u6709 panic! \u5b8f\uff0c\u5728\u7a0b\u5e8f\u9047\u5230\u4e0d\u53ef\u6062\u590d\u7684\u9519\u8bef\u65f6\u505c\u6b62\u6267\u884c\u3002 \u4e0d\u53ef\u6062\u590d\u7684\u9519\u8bef(panic!) \u7a81\u7136\u6709\u4e00\u5929\uff0c\u4ee3\u7801\u51fa\u95ee\u9898\u4e86\uff0c\u800c\u4f60\u5bf9\u6b64\u675f\u624b\u65e0\u7b56\u3002\u5bf9\u4e8e\u8fd9\u79cd\u60c5\u51b5\uff0c Rust \u6709 panic! \u5b8f\u3002\u5f53\u6267\u884c\u8fd9\u4e2a\u5b8f\u65f6\uff0c\u7a0b\u5e8f\u4f1a \u6253\u5370\u51fa\u4e00\u4e2a\u9519\u8bef\u4fe1\u606f\uff0c\u5c55\u5f00\u5e76\u6e05\u7406\u6808\u6570\u636e \uff0c\u7136\u540e\u63a5\u7740\u9000\u51fa\u3002 \u51fa\u73b0\u8fd9\u79cd\u60c5\u51b5\u7684\u573a\u666f\u901a\u5e38\u662f\u68c0\u6d4b\u5230\u4e00\u4e9b\u7c7b\u578b\u7684 bug \uff0c\u800c\u4e14\u7a0b\u5e8f\u5458\u5e76\u4e0d\u6e05\u695a\u8be5\u5982\u4f55\u5904\u7406\u5b83\u3002 \u5bf9\u5e94 panic \u65f6\u7684\u6808\u5c55\u5f00\u6216\u7ec8\u6b62 \u5f53\u51fa\u73b0 panic \u65f6\uff0c\u7a0b\u5e8f\u9ed8\u8ba4\u4f1a\u5f00\u59cb \u5c55\u5f00 \uff08unwinding\uff09\uff0c\u8fd9\u610f\u5473\u7740 Rust \u4f1a\u56de\u6eaf\u6808\u5e76\u6e05\u7406\u5b83\u9047\u5230\u7684\u6bcf\u4e00\u4e2a\u51fd\u6570\u7684\u6570\u636e\uff0c\u4e0d\u8fc7\u8fd9\u4e2a\u56de\u6eaf\u5e76\u6e05\u7406\u7684\u8fc7\u7a0b\u6709\u5f88\u591a\u5de5\u4f5c\u3002 \u53e6\u4e00\u79cd\u9009\u62e9\u662f\u76f4\u63a5 \u7ec8\u6b62 \uff08abort\uff09\uff0c\u8fd9\u4f1a\u4e0d\u6e05\u7406\u6570\u636e\u5c31\u9000\u51fa\u7a0b\u5e8f\u3002\u90a3\u4e48\u7a0b\u5e8f\u6240\u4f7f\u7528\u7684\u5185\u5b58\u9700\u8981\u7531\u64cd\u4f5c\u7cfb\u7edf\u6765\u6e05\u7406\u3002 \u5982\u679c\u4f60\u9700\u8981\u9879\u76ee\u7684\u6700\u7ec8\u4e8c\u8fdb\u5236\u6587\u4ef6\u8d8a\u5c0f\u8d8a\u597d\uff0c panic \u65f6\u901a\u8fc7\u5728 Cargo.toml \u7684 [profile] \u90e8\u5206\u589e\u52a0 panic = 'abort' \uff0c\u53ef\u4ee5\u7531\u5c55\u5f00\u5207\u6362\u4e3a \u7ec8\u6b62 \u3002 \u4f8b\u5982\uff0c\u5982\u679c\u4f60\u60f3\u8981\u5728 release \u6a21\u5f0f\u4e2d panic \u65f6\u76f4\u63a5\u7ec8\u6b62\uff1a [profile.release] panic = 'abort' fn main () { // \u8c03\u7528 panic! panic! ( \"crash and burn\" ); } \u5c06\u4f1a\u51fa\u73b0\u7c7b\u4f3c\u8fd9\u6837\u7684\u8f93\u51fa\uff1a $ cargo run Compiling panic v0.1.0 ( file:///projects/panic ) Finished dev [ unoptimized + debuginfo ] target ( s ) in 0 .25s Running ` target/debug/panic ` thread 'main' panicked at 'crash and burn' , src/main.rs:2:5 note: run with ` RUST_BACKTRACE = 1 ` environment variable to display a backtrace # \u7b2c\u4e00\u884c\u663e\u793a\u4e86 panic \u63d0\u4f9b\u7684\u4fe1\u606f\u5e76\u6307\u660e\u4e86\u6e90\u7801\u4e2d panic \u51fa\u73b0\u7684\u4f4d\u7f6e\uff1asrc/main.rs:2:5 \u8868\u660e\u8fd9\u662f src/main.rs \u6587\u4ef6\u7684\u7b2c\u4e8c\u884c\u7b2c\u4e94\u4e2a\u5b57\u7b26\u3002 \u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u88ab\u6307\u660e\u7684\u90a3\u4e00\u884c\u662f\u6211\u4eec\u4ee3\u7801\u7684\u4e00\u90e8\u5206\uff0c\u800c\u4e14\u67e5\u770b\u8fd9\u4e00\u884c\u7684\u8bdd\u5c31\u4f1a\u53d1\u73b0 panic! \u5b8f\u7684\u8c03\u7528\u3002 \u5728\u5176\u4ed6\u60c5\u51b5\u4e0b\uff0c panic! \u53ef\u80fd\u4f1a\u51fa\u73b0\u5728\u6211\u4eec\u7684\u4ee3\u7801\u6240\u8c03\u7528\u7684\u4ee3\u7801\u4e2d\u3002 \u9519\u8bef\u4fe1\u606f\u62a5\u544a\u7684\u6587\u4ef6\u540d\u548c\u884c\u53f7\u53ef\u80fd\u6307\u5411\u522b\u4eba\u4ee3\u7801\u4e2d\u7684 panic! \u5b8f\u8c03\u7528\uff0c\u800c\u4e0d\u662f\u6211\u4eec\u4ee3\u7801\u4e2d\u6700\u7ec8\u5bfc\u81f4 panic! \u7684\u90a3\u4e00\u884c\u3002 \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 panic! \u88ab\u8c03\u7528\u7684\u51fd\u6570\u7684 backtrace \u6765\u5bfb\u627e\u4ee3\u7801\u4e2d\u51fa\u95ee\u9898\u7684\u5730\u65b9\u3002\u4e0b\u9762\u6211\u4eec\u4f1a\u8be6\u7ec6\u4ecb\u7ecd backtrace \u662f\u4ec0\u4e48\u3002 \u4f7f\u7528 panic! \u7684 backtrace \u53e6\u4e00\u4e2a\u56e0\u4e3a\u4ee3\u7801\u4e2d\u7684 bug \u5f15\u8d77\u7684\u522b\u7684\u5e93\u4e2d panic! \u7684\u4f8b\u5b50\uff0c\u800c\u4e0d\u662f\u76f4\u63a5\u7684\u5b8f\u8c03\u7528. // \u5c1d\u8bd5\u8bbf\u95ee\u8d85\u8d8a vector \u7ed3\u5c3e\u7684\u5143\u7d20\uff0c\u8fd9\u4f1a\u9020\u6210 panic! fn main () { let v = vec! [ 1 , 2 , 3 ]; // \u5c1d\u8bd5\u8bbf\u95ee vector \u7684\u7b2c\u4e00\u767e\u4e2a\u5143\u7d20, \u5b9e\u9645\u53ea\u67093\u4e2a\u3002 // \u8fd9\u79cd\u60c5\u51b5\u4e0b Rust \u4f1a panic\u3002 v [ 99 ]; } C \u8bed\u8a00\u4e2d\uff0c\u5c1d\u8bd5\u8bfb\u53d6\u6570\u636e\u7ed3\u6784\u4e4b\u540e\u7684\u503c\u662f \u672a\u5b9a\u4e49\u884c\u4e3a \uff08undefined behavior\uff09\u3002 \u4f60 \u4f1a\u5f97\u5230\u4efb\u4f55\u5bf9\u5e94\u6570\u636e\u7ed3\u6784\u4e2d\u8fd9\u4e2a\u5143\u7d20\u7684\u5185\u5b58\u4f4d\u7f6e\u7684\u503c\uff0c\u751a\u81f3\u662f\u8fd9\u4e9b\u5185\u5b58\u5e76\u4e0d\u5c5e\u4e8e\u8fd9\u4e2a\u6570\u636e\u7ed3\u6784\u7684\u60c5\u51b5\u3002 \u8fd9\u88ab\u79f0\u4e3a \u7f13\u51b2\u533a\u6ea2\u51fa \uff08buffer overread\uff09\uff0c\u5e76\u53ef\u80fd\u4f1a\u5bfc\u81f4 \u5b89\u5168\u6f0f\u6d1e \uff0c\u6bd4\u5982\u653b\u51fb\u8005\u53ef\u4ee5\u50cf\u8fd9\u6837\u64cd\u4f5c\u7d22\u5f15\u6765\u8bfb\u53d6\u50a8\u5b58\u5728\u6570\u636e\u7ed3\u6784\u4e4b\u540e\u4e0d\u88ab\u5141\u8bb8\u7684\u6570\u636e\u3002 \u4e3a\u4e86\u4fdd\u62a4\u7a0b\u5e8f\u8fdc\u79bb\u8fd9\u7c7b\u6f0f\u6d1e\uff0c\u5982\u679c\u5c1d\u8bd5\u8bfb\u53d6\u4e00\u4e2a\u7d22\u5f15\u4e0d\u5b58\u5728\u7684\u5143\u7d20\uff0cRust \u4f1a\u505c\u6b62\u6267\u884c\u5e76\u62d2\u7edd\u7ee7\u7eed\u3002 # \u5c1d\u8bd5\u8fd0\u884c\u4e0a\u9762\u7684\u7a0b\u5e8f\u4f1a\u51fa\u73b0\u5982\u4e0b\uff1a $ cargo run Compiling panic v0.1.0 ( file:///projects/panic ) Finished dev [ unoptimized + debuginfo ] target ( s ) in 0 .27s Running ` target/debug/panic ` thread 'main' panicked at 'index out of bounds: the len is 3 but the index is 99' , src/main.rs:4:5 # \u9519\u8bef\u6307\u5411 main.rs \u7684\u7b2c 4 \u884c\uff0c note: run with ` RUST_BACKTRACE = 1 ` environment variable to display a backtrace # \u4e0b\u9762\u7684\u8bf4\u660e\uff08note\uff09\u884c\u63d0\u9192\u6211\u4eec\u53ef\u4ee5\u8bbe\u7f6e RUST_BACKTRACE \u73af\u5883\u53d8\u91cf\u6765\u5f97\u5230\u4e00\u4e2a backtrace\u3002 backtrace \u662f\u4e00\u4e2a\u6267\u884c\u5230\u76ee\u524d\u4f4d\u7f6e\u6240\u6709\u88ab\u8c03\u7528\u7684\u51fd\u6570\u7684\u5217\u8868\u3002Rust \u7684 backtrace \u8ddf\u5176\u4ed6\u8bed\u8a00\u4e2d\u7684\u4e00\u6837\uff1a \u9605\u8bfb backtrace \u7684\u5173\u952e\u662f\u4ece\u5934\u5f00\u59cb\u8bfb\u76f4\u5230\u53d1\u73b0\u4f60\u7f16\u5199\u7684\u6587\u4ef6\u3002 \u8fd9\u5c31\u662f\u95ee\u9898\u7684\u53d1\u6e90\u5730\u3002\u8fd9\u4e00\u884c\u5f80\u4e0a\u662f\u4f60\u7684\u4ee3\u7801\u6240\u8c03\u7528\u7684\u4ee3\u7801\uff1b\u5f80\u4e0b\u5219\u662f\u8c03\u7528\u4f60\u7684\u4ee3\u7801\u7684\u4ee3\u7801\u3002\u8fd9\u4e9b\u884c\u53ef\u80fd\u5305\u542b\u6838\u5fc3 Rust \u4ee3\u7801\uff0c\u6807\u51c6\u5e93\u4ee3\u7801\u6216\u7528\u5230\u7684 crate \u4ee3\u7801\u3002 \u5c06 RUST_BACKTRACE \u73af\u5883\u53d8\u91cf\u8bbe\u7f6e\u4e3a\u4efb\u4f55\u4e0d\u662f 0 \u7684\u503c\u6765\u83b7\u53d6 backtrace \u770b\u770b\u3002 $ RUST_BACKTRACE = 1 cargo run thread ' main ' panicked at ' index out of bounds : the len is 3 but the index is 99 ' , src / main . rs : 4 : 5 stack backtrace : 0 : rust_begin_unwind at / rustc / 7 eac88abb2e57e752f3302f02be5f3ce3d7adfb4 / library / std / src / panicking . rs : 483 1 : core :: panicking :: panic_fmt at / rustc / 7 eac88abb2e57e752f3302f02be5f3ce3d7adfb4 / library / core / src / panicking . rs : 85 2 : core :: panicking :: panic_bounds_check at / rustc / 7 eac88abb2e57e752f3302f02be5f3ce3d7adfb4 / library / core / src / panicking . rs : 62 3 : < usize as core :: slice :: index :: SliceIndex < [ T ] >> :: index at / rustc / 7 eac88abb2e57e752f3302f02be5f3ce3d7adfb4 / library / core / src / slice / index . rs : 255 4 : core :: slice :: index :: < impl core :: ops :: index :: Index < I > for [ T ] > :: index at / rustc / 7 eac88abb2e57e752f3302f02be5f3ce3d7adfb4 / library / core / src / slice / index . rs : 15 5 : < alloc :: vec :: Vec < T > as core :: ops :: index :: Index < I >> :: index at / rustc / 7 eac88abb2e57e752f3302f02be5f3ce3d7adfb4 / library / alloc / src / vec . rs : 1982 6 : panic :: main at . / src / main . rs : 4 7 : core :: ops :: function :: FnOnce :: call_once at / rustc / 7 eac88abb2e57e752f3302f02be5f3ce3d7adfb4 / library / core / src / ops / function . rs : 227 note : Some details are omitted , run with ` RUST_BACKTRACE = full ` for a verbose backtrace . \u8fd9\u91cc\u6709\u5927\u91cf\u7684\u8f93\u51fa\uff01 \u5b9e\u9645\u770b\u5230\u7684\u8f93\u51fa\u53ef\u80fd\u56e0\u4e0d\u540c\u7684\u64cd\u4f5c\u7cfb\u7edf\u548c Rust \u7248\u672c\u800c\u6709\u6240\u4e0d\u540c \u3002\u4e3a\u4e86\u83b7\u53d6\u5e26\u6709\u8fd9\u4e9b\u4fe1\u606f\u7684 backtrace \uff0c\u5fc5\u987b\u542f\u7528 debug \u6807\u8bc6\u3002\u5f53\u4e0d\u4f7f\u7528 --release \u53c2\u6570\u8fd0\u884c cargo build \u6216 cargo run \u65f6 debug \u6807\u8bc6\u4f1a\u9ed8\u8ba4\u542f\u7528\uff0c\u5c31\u50cf\u8fd9\u91cc\u4e00\u6837\u3002 \u793a\u4f8b\u7684\u8f93\u51fa\u4e2d\uff0cbacktrace \u7684 12 \u884c\u6307\u5411\u4e86\u6211\u4eec\u9879\u76ee\u4e2d\u9020\u6210\u95ee\u9898\u7684\u884c\uff1a src/main.rs \u7684\u7b2c 4 \u884c\u3002\u5982\u679c\u4e0d\u5e0c\u671b\u7a0b\u5e8f panic \uff0c\u7b2c\u4e00\u4e2a\u63d0\u5230\u6211\u4eec\u7f16\u5199\u7684\u4ee3\u7801\u884c\u7684\u4f4d\u7f6e\u662f\u4f60\u5e94\u8be5\u5f00\u59cb\u8c03\u67e5\u7684\uff0c\u4ee5\u4fbf\u67e5\u660e\u662f\u4ec0\u4e48\u503c\u5982\u4f55\u5728\u8fd9\u4e2a\u5730\u65b9\u5f15\u8d77\u4e86 panic \u3002 \u5728\u793a\u4f8b\u4e2d\uff0c\u6545\u610f\u7f16\u5199\u4f1a panic \u7684\u4ee3\u7801\u6765\u6f14\u793a\u5982\u4f55\u4f7f\u7528 backtrace \uff0c\u4fee\u590d\u8fd9\u4e2a panic \u7684\u65b9\u6cd5\u5c31\u662f\u4e0d\u8981\u5c1d\u8bd5\u5728\u4e00\u4e2a\u53ea\u5305\u542b\u4e09\u4e2a\u9879\u7684 vector \u4e2d\u8bf7\u6c42\u7d22\u5f15\u662f 100 \u7684\u5143\u7d20\u3002 \u5f53\u5c06\u6765\u4f60\u7684\u4ee3\u7801\u51fa\u73b0\u4e86 panic \uff0c\u4f60\u9700\u8981\u641e\u6e05\u695a\u5728\u8fd9\u7279\u5b9a\u7684\u573a\u666f\u4e0b\u4ee3\u7801\u4e2d\u6267\u884c\u4e86\u4ec0\u4e48\u64cd\u4f5c\u548c\u4ec0\u4e48\u503c\u5bfc\u81f4\u4e86 panic \uff0c\u4ee5\u53ca\u5e94\u5f53\u5982\u4f55\u5904\u7406\u624d\u80fd\u907f\u514d\u8fd9\u4e2a\u95ee\u9898\u3002 \u53ef\u6062\u590d\u7684\u9519\u8bef(Result) \u5927\u90e8\u5206\u9519\u8bef\u5e76\u6ca1\u6709\u4e25\u91cd\u5230\u9700\u8981\u7a0b\u5e8f\u5b8c\u5168\u505c\u6b62\u6267\u884c \u3002\u6709\u65f6\uff0c\u4e00\u4e2a\u51fd\u6570\u4f1a\u56e0\u4e3a\u4e00\u4e2a\u5bb9\u6613\u7406\u89e3\u5e76\u505a\u51fa\u53cd\u5e94\u7684\u539f\u56e0\u5931\u8d25\u3002 \u4f8b\u5982\uff0c\u5982\u679c\u56e0\u4e3a\u6253\u5f00\u4e00\u4e2a\u5e76\u4e0d\u5b58\u5728\u7684\u6587\u4ef6\u800c\u5931\u8d25\uff0c\u6b64\u65f6\u6211\u4eec\u53ef\u80fd\u60f3\u8981\u521b\u5efa\u8fd9\u4e2a\u6587\u4ef6\uff0c\u800c\u4e0d\u662f\u7ec8\u6b62\u8fdb\u7a0b\u3002 \u7b2c\u4e8c\u7ae0 \u201c \u4f7f\u7528 Result \u7c7b\u578b\u6765\u5904\u7406\u6f5c\u5728\u7684\u9519\u8bef \u201d \u90e8\u5206\u4e2d\u7684\u90a3\u4e2a Result \u679a\u4e3e\uff0c\u5b83\u5b9a\u4e49\u6709\u5982\u4e0b\u4e24\u4e2a\u6210\u5458\uff0c Ok \u548c Err \uff1a // T \u548c E \u662f\u6cdb\u578b\u7c7b\u578b\u53c2\u6570 enum Result < T , E > { Ok ( T ), // T \u4ee3\u8868\u6210\u529f\u65f6\u8fd4\u56de\u7684 Ok \u6210\u5458\u4e2d\u7684\u6570\u636e\u7684\u7c7b\u578b\uff0c Err ( E ), // \u800c E \u4ee3\u8868\u5931\u8d25\u65f6\u8fd4\u56de\u7684 Err \u6210\u5458\u4e2d\u7684\u9519\u8bef\u7684\u7c7b\u578b\u3002 } \u56e0\u4e3a Result \u6709\u8fd9\u4e9b\u6cdb\u578b\u7c7b\u578b\u53c2\u6570\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06 Result \u7c7b\u578b\u548c\u6807\u51c6\u5e93\u4e2d\u4e3a\u5176\u5b9a\u4e49\u7684\u51fd\u6570\u7528\u4e8e\u5f88\u591a\u4e0d\u540c\u7684\u573a\u666f\uff0c\u8fd9\u4e9b\u60c5\u51b5\u4e2d\u9700\u8981\u8fd4\u56de\u7684\u6210\u529f\u503c\u548c\u5931\u8d25\u503c\u53ef\u80fd\u4f1a\u5404\u4e0d\u76f8\u540c\u3002 \u8c03\u7528\u4e00\u4e2a\u8fd4\u56de Result \u7684\u51fd\u6570\uff0c\u56e0\u4e3a\u5b83\u53ef\u80fd\u4f1a\u5931\u8d25\uff1a use std :: fs :: File ; fn main () { // \u6253\u5f00\u6587\u4ef6 let f = File :: open ( \"hello.txt\" ); } \u5982\u4f55\u77e5\u9053 File::open \u8fd4\u56de\u4e00\u4e2a Result \u5462\uff1f\u6211\u4eec\u53ef\u4ee5\u67e5\u770b \u6807\u51c6\u5e93 API \u6587\u6863\uff0c\u6216\u8005\u53ef\u4ee5\u76f4\u63a5\u95ee\u7f16\u8bd1\u5668\uff01 \u5982\u679c\u7ed9 f \u67d0\u4e2a\u6211\u4eec\u77e5\u9053 \u4e0d\u662f \u51fd\u6570\u8fd4\u56de\u503c\u7c7b\u578b\u7684\u7c7b\u578b\u6ce8\u89e3\uff0c\u63a5\u7740\u5c1d\u8bd5\u7f16\u8bd1\u4ee3\u7801\uff0c\u7f16\u8bd1\u5668\u4f1a\u544a\u8bc9\u6211\u4eec\u7c7b\u578b\u4e0d\u5339\u914d\u3002 \u7136\u540e\u9519\u8bef\u4fe1\u606f\u4f1a\u544a\u8bc9\u6211\u4eec f \u7684\u7c7b\u578b \u5e94\u8be5 \u662f\u4ec0\u4e48\u3002 \u8bd5\u8bd5\uff01\u77e5\u9053 File::open \u7684\u8fd4\u56de\u503c\u4e0d\u662f u32 \u7c7b\u578b\u7684\uff0c\u6240\u4ee5\u5c06 let f \u8bed\u53e5\u6539\u4e3a\u5982\u4e0b\uff1a let f : u32 = File :: open ( \"hello.txt\" ); $ cargo run Compiling error-handling v0.1.0 ( file:///projects/error-handling ) error [ E0308 ] : mismatched types --> src/main.rs:4:18 | 4 | let f: u32 = File::open ( \"hello.txt\" ) ; | --- ^^^^^^^^^^^^^^^^^^^^^^^ expected ` u32 ` , found enum ` Result ` | | | expected due to this | = note: expected type ` u32 ` found enum ` Result<File, std::io::Error> ` For more information about this error, try ` rustc --explain E0308 ` . error: could not compile ` error-handling ` due to previous error \u8fd9\u5c31\u544a\u8bc9\u6211\u4eec\u4e86 File::open \u51fd\u6570\u7684\u8fd4\u56de\u503c\u7c7b\u578b\u662f Result<T, E> \u3002\u8fd9\u91cc\u6cdb\u578b\u53c2\u6570 T \u653e\u5165\u4e86\u6210\u529f\u503c\u7684\u7c7b\u578b std::fs::File \uff0c\u5b83\u662f\u4e00\u4e2a\u6587\u4ef6\u53e5\u67c4\u3002 E \u88ab\u7528\u5728\u5931\u8d25\u503c\u4e0a\u65f6 E \u7684\u7c7b\u578b\u662f std::io::Error \u3002 \u8fd9\u4e2a\u8fd4\u56de\u503c\u7c7b\u578b\u8bf4\u660e File::open \u8c03\u7528\u53ef\u80fd\u4f1a\u6210\u529f\u5e76\u8fd4\u56de\u4e00\u4e2a\u53ef\u4ee5\u8fdb\u884c\u8bfb\u5199\u7684\u6587\u4ef6\u53e5\u67c4\u3002 \u8fd9\u4e2a\u51fd\u6570\u4e5f\u53ef\u80fd\u4f1a\u5931\u8d25\uff1a\u4f8b\u5982\uff0c\u6587\u4ef6\u53ef\u80fd\u5e76\u4e0d\u5b58\u5728\uff0c\u6216\u8005\u53ef\u80fd\u6ca1\u6709\u8bbf\u95ee\u6587\u4ef6\u7684\u6743\u9650\u3002 File::open \u9700\u8981\u4e00\u4e2a\u65b9\u5f0f\u544a\u8bc9\u6211\u4eec\u662f\u6210\u529f\u8fd8\u662f\u5931\u8d25\uff0c\u5e76\u540c\u65f6\u63d0\u4f9b\u7ed9\u6211\u4eec\u6587\u4ef6\u53e5\u67c4\u6216\u9519\u8bef\u4fe1\u606f\u3002\u800c\u8fd9\u4e9b\u4fe1\u606f\u6b63\u662f Result \u679a\u4e3e\u53ef\u4ee5\u63d0\u4f9b\u7684\u3002 \u5f53 File::open \u6210\u529f\u7684\u60c5\u51b5\u4e0b\uff0c\u53d8\u91cf f \u7684\u503c\u5c06\u4f1a\u662f\u4e00\u4e2a\u5305\u542b\u6587\u4ef6\u53e5\u67c4\u7684 Ok \u5b9e\u4f8b\u3002\u5728\u5931\u8d25\u7684\u60c5\u51b5\u4e0b\uff0c f \u7684\u503c\u4f1a\u662f\u4e00\u4e2a\u5305\u542b\u66f4\u591a\u5173\u4e8e\u51fa\u73b0\u4e86\u4f55\u79cd\u9519\u8bef\u4fe1\u606f\u7684 Err \u5b9e\u4f8b\u3002 \u9700\u8981\u5728\u793a\u4f8b\u7684\u4ee3\u7801\u4e2d\u589e\u52a0\u6839\u636e File::open \u8fd4\u56de\u503c\u8fdb\u884c\u4e0d\u540c\u5904\u7406\u7684\u903b\u8f91\u3002\u4e0b\u9762\u793a\u4f8b\u5c55\u793a\u4e86\u4e00\u4e2a\u4f7f\u7528\u57fa\u672c\u5de5\u5177\u5904\u7406 Result \u7684\u4f8b\u5b50\uff1a\u7b2c\u516d\u7ae0\u5b66\u4e60\u8fc7\u7684 match \u8868\u8fbe\u5f0f\u3002 use std :: fs :: File ; fn main () { let f = File :: open ( \"hello.txt\" ); let f = match f { Ok ( file ) => file , // \u8fd9\u91cc\u544a\u8bc9 Rust \u5f53\u7ed3\u679c\u662f Ok \u65f6\uff0c\u8fd4\u56de Ok \u6210\u5458\u4e2d\u7684 file \u503c\uff0c\u7136\u540e\u5c06\u8fd9\u4e2a\u6587\u4ef6\u53e5\u67c4\u8d4b\u503c\u7ed9\u53d8\u91cf f\u3002 // match \u4e4b\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u8fd9\u4e2a\u6587\u4ef6\u53e5\u67c4\u6765\u8fdb\u884c\u8bfb\u5199\u3002 Err ( error ) => panic! ( \"Problem opening the file: {:?}\" , error ), // match \u7684\u53e6\u4e00\u4e2a\u5206\u652f\u5904\u7406\u4ece File::open \u5f97\u5230 Err \u503c\u7684\u60c5\u51b5\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u9009\u62e9\u8c03\u7528 panic! \u5b8f\u3002 }; } \u6ce8\u610f\u4e0e Option \u679a\u4e3e\u4e00\u6837\uff0c Result \u679a\u4e3e\u548c\u5176\u6210\u5458\u4e5f\u88ab\u5bfc\u5165\u5230\u4e86 prelude \u4e2d\uff0c\u6240\u4ee5\u5c31\u4e0d\u9700\u8981\u5728 match \u5206\u652f\u4e2d\u7684 Ok \u548c Err \u4e4b\u524d\u6307\u5b9a Result:: \u3002 \u5982\u679c\u5f53\u524d\u76ee\u5f55\u6ca1\u6709\u4e00\u4e2a\u53eb\u505a hello.txt \u7684\u6587\u4ef6\uff0c\u5f53\u8fd0\u884c\u8fd9\u6bb5\u4ee3\u7801\u65f6\u4f1a\u770b\u5230\u5982\u4e0b\u6765\u81ea panic! \u5b8f\u7684\u8f93\u51fa\uff1a $ cargo run Compiling error - handling v0 . 1.0 ( file : ///projects/error-handling) Finished dev [ unoptimized + debuginfo ] target ( s ) in 0.73 s Running ` target / debug / error - handling ` thread ' main ' panicked at ' Problem opening the file : Os { code : 2 , kind : NotFound , message : \"No such file or directory\" } ' , src / main . rs : 8 : 23 note : run with ` RUST_BACKTRACE = 1 ` environment variable to display a backtrace \u5339\u914d\u4e0d\u540c\u7684\u9519\u8bef \u793a\u4f8b\u4e2d\u7684\u4ee3\u7801\u4e0d\u7ba1 File::open \u662f\u56e0\u4e3a\u4ec0\u4e48\u539f\u56e0\u5931\u8d25\u90fd\u4f1a panic! \u3002 \u6211\u4eec\u771f\u6b63\u5e0c\u671b\u7684\u662f\u5bf9\u4e0d\u540c\u7684\u9519\u8bef\u539f\u56e0\u91c7\u53d6\u4e0d\u540c\u7684\u884c\u4e3a\uff1a \u5982\u679c File::open \u56e0\u4e3a\u6587\u4ef6\u4e0d\u5b58\u5728\u800c\u5931\u8d25\uff0c\u6211\u4eec\u5e0c\u671b\u521b\u5efa\u8fd9\u4e2a\u6587\u4ef6\u5e76\u8fd4\u56de\u65b0\u6587\u4ef6\u7684\u53e5\u67c4\u3002 \u5982\u679c File::open \u56e0\u4e3a\u4efb\u4f55\u5176\u4ed6\u539f\u56e0\u5931\u8d25\uff0c\u4f8b\u5982\u6ca1\u6709\u6253\u5f00\u6587\u4ef6\u7684\u6743\u9650\uff0c\u6211\u4eec\u4ecd\u7136\u5e0c\u671b\u50cf\u793a\u4f8b\u90a3\u6837 panic! \u3002 \u8ba9\u6211\u4eec\u770b\u770b\u4e0b\u9762\u7684\u793a\u4f8b\uff0c\u5176\u4e2d match \u589e\u52a0\u4e86\u53e6\u4e00\u4e2a\u5206\u652f\uff1a // \u4f7f\u7528\u4e0d\u540c\u7684\u65b9\u5f0f\u5904\u7406\u4e0d\u540c\u7c7b\u578b\u7684\u9519\u8bef use std :: fs :: File ; use std :: io :: ErrorKind ; fn main () { let f = File :: open ( \"hello.txt\" ); let f = match f { Ok ( file ) => file , // File::open \u8fd4\u56de\u7684 Err \u6210\u5458\u4e2d\u7684\u503c\u7c7b\u578b io::Error\uff0c\u5b83\u662f\u4e00\u4e2a\u6807\u51c6\u5e93\u4e2d\u63d0\u4f9b\u7684\u7ed3\u6784\u4f53\u3002 // \u8fd9\u4e2a\u7ed3\u6784\u4f53\u6709\u4e00\u4e2a\u8fd4\u56de io::ErrorKind \u503c\u7684 kind \u65b9\u6cd5\u53ef\u4f9b\u8c03\u7528\u3002 // io::ErrorKind \u662f\u4e00\u4e2a\u6807\u51c6\u5e93\u63d0\u4f9b\u7684\u679a\u4e3e\uff0c\u5b83\u7684\u6210\u5458\u5bf9\u5e94 io \u64cd\u4f5c\u53ef\u80fd\u5bfc\u81f4\u7684\u4e0d\u540c\u9519\u8bef\u7c7b\u578b\u3002 // \u6211\u4eec\u611f\u5174\u8da3\u7684\u6210\u5458\u662f ErrorKind::NotFound\uff0c\u5b83\u4ee3\u8868\u5c1d\u8bd5\u6253\u5f00\u7684\u6587\u4ef6\u5e76\u4e0d\u5b58\u5728\u3002 Err ( err ) => match err . kind () { // \u5982\u679c error.kind() \u7684\u8fd4\u56de\u503c\u4e3a ErrorKind\u7684 NotFound \u6210\u5458\u3002 // \u5219\u5c1d\u8bd5\u901a\u8fc7 File::create \u521b\u5efa\u6587\u4ef6\u3002 ErrorKind :: NotFound => match File :: create ( \"hello.txt\" ) { Ok ( file ) => file , // \u7136\u800c\u56e0\u4e3a File::create \u4e5f\u53ef\u80fd\u4f1a\u5931\u8d25\uff0c\u8fd8\u9700\u8981\u589e\u52a0\u4e00\u4e2a\u5185\u5c42 match \u8bed\u53e5\u3002 // \u5f53\u6587\u4ef6\u4e0d\u80fd\u88ab\u6253\u5f00\uff0c\u4f1a\u6253\u5370\u51fa\u4e00\u4e2a\u4e0d\u540c\u7684\u9519\u8bef\u4fe1\u606f\u3002 Err ( e ) => panic! ( \"\u521b\u5efa\u6587\u4ef6\u5931\u8d25: {:?}\" , e ), }, // \u5916\u5c42 match \u7684\u6700\u540e\u4e00\u4e2a\u5206\u652f\u4fdd\u6301\u4e0d\u53d8\uff0c\u8fd9\u6837\u5bf9\u4efb\u4f55\u9664\u4e86\u6587\u4ef6\u4e0d\u5b58\u5728\u7684\u9519\u8bef\u4f1a\u4f7f\u7a0b\u5e8f panic\u3002 other_error => { panic! ( \"\u6253\u5f00\u6587\u4ef6\u5931\u8d25: {:?}\" , other_error ) } }, }; } \u4e0d\u540c\u4e8e\u4f7f\u7528 match \u548c Result<T, E> \u8fd9\u91cc\u6709\u597d\u591a match\uff01match \u786e\u5b9e\u5f88\u5f3a\u5927\uff0c\u4e0d\u8fc7\u4e5f\u975e\u5e38\u7684\u57fa\u7840\u3002\u7b2c\u5341\u4e09\u7ae0\u6211\u4eec\u4f1a\u4ecb\u7ecd\u95ed\u5305\uff08closure\uff09\uff0c\u8fd9\u53ef\u4ee5\u7528\u4e8e\u5f88\u591a Result \u4e0a\u5b9a\u4e49\u7684\u65b9\u6cd5\u3002\u5728\u5904\u7406\u4ee3\u7801\u4e2d\u7684 Result \u503c\u65f6\u8fd9\u4e9b\u65b9\u6cd5\u53ef\u80fd\u4f1a\u66f4\u52a0\u7b80\u6d01\u3002 \u4f8b\u5982\uff0c\u8fd9\u662f\u53e6\u4e00\u4e2a\u7f16\u5199\u4e0e\u793a\u4f8b 9-5 \u903b\u8f91\u76f8\u540c\u4f46\u662f\u4f7f\u7528\u95ed\u5305\u548c unwrap_or_else \u65b9\u6cd5\u7684\u4f8b\u5b50\uff1a use std :: fs :: File ; use std :: io :: ErrorKind ; fn main () { let f = File :: open ( \"hello.txt\" ). unwrap_or_else ( | error | { if error . kind () == ErrorKind :: NotFound { File :: create ( \"hello.txt\" ). unwrap_or_else ( | error | { panic! ( \"\u521b\u5efa\u6587\u4ef6\u5931\u8d25: {:?}\" , error ); }) } else { panic! ( \"\u6253\u5f00\u6587\u4ef6\u5931\u8d25: {:?}\" , error ); } }); } \u867d\u7136\u8fd9\u6bb5\u4ee3\u7801\u6709\u7740\u5982\u4e0a\u9762\u793a\u4f8b\u4e2d\u4e00\u6837\u7684\u884c\u4e3a\uff0c\u4f46\u5e76\u6ca1\u6709\u5305\u542b\u4efb\u4f55 match \u8868\u8fbe\u5f0f\u4e14\u66f4\u5bb9\u6613\u9605\u8bfb\u3002\u5728\u9605\u8bfb\u5b8c\u7b2c\u5341\u4e09\u7ae0\u540e\u518d\u56de\u5230\u8fd9\u4e2a\u4f8b\u5b50\uff0c\u5e76\u67e5\u770b\u6807\u51c6\u5e93\u6587\u6863 unwrap_or_else \u65b9\u6cd5\u90fd\u505a\u4e86\u4ec0\u4e48\u64cd\u4f5c\u3002\u5728\u5904\u7406\u9519\u8bef\u65f6\uff0c\u8fd8\u6709\u5f88\u591a\u8fd9\u7c7b\u65b9\u6cd5\u53ef\u4ee5\u6d88\u9664\u5927\u91cf\u5d4c\u5957\u7684 match \u8868\u8fbe\u5f0f\u3002 unwrap \u548c expect match \u80fd\u591f\u80dc\u4efb\u5b83\u7684\u5de5\u4f5c\uff0c\u4e0d\u8fc7\u5b83\u53ef\u80fd\u6709\u70b9\u5197\u957f\u5e76\u4e14\u4e0d\u603b\u662f\u80fd\u5f88\u597d\u7684\u8868\u660e\u5176\u610f\u56fe\u3002 Result<T, E> \u7c7b\u578b\u5b9a\u4e49\u4e86\u5f88\u591a\u8f85\u52a9\u65b9\u6cd5\u6765\u5904\u7406\u5404\u79cd\u60c5\u51b5\u3002 \u5176\u4e2d\u4e4b\u4e00\u53eb\u505a unwrap \uff0c\u5b83\u7684\u5b9e\u73b0\u5c31\u7c7b\u4f3c\u4e8e\u4e0a\u9762\u793a\u4f8b\u4e2d\u7684 match \u8bed\u53e5\u3002 \u5982\u679c Result \u503c\u662f\u6210\u5458 Ok \uff0c unwrap \u4f1a\u8fd4\u56de Ok \u4e2d\u7684\u503c\u3002 \u5982\u679c Result \u503c\u662f\u6210\u5458 Err \uff0c unwrap \u4f1a\u4e3a\u6211\u4eec\u8c03\u7528 panic! \u3002 \u8fd9\u91cc\u662f\u4e00\u4e2a\u5b9e\u8df5 unwrap \u7684\u4f8b\u5b50\uff1a use std :: fs :: File ; fn main () { // `unwrap` **\u8c03\u7528** `panic!` // \u4f7f\u7528\u9ed8\u8ba4\u7684 panic! \u4fe1\u606f\u3002 let f = File :: open ( \"hello.txt\" ). unwrap (); } \u5982\u679c\u8c03\u7528\u8fd9\u6bb5\u4ee3\u7801\u65f6\u4e0d\u5b58\u5728 hello.txt \u6587\u4ef6\uff0c\u6211\u4eec\u5c06\u4f1a\u770b\u5230\u4e00\u4e2a unwrap \u8c03\u7528 panic! \u65f6\u63d0\u4f9b\u7684\u9519\u8bef\u4fe1\u606f\uff1a thread ' main ' panicked at ' called ` Result :: unwrap () ` on an ` Err ` value : Error { repr : Os { code : 2 , message : \"No such file or directory\" } } ' , src / libcore / result . rs : 906 : 4 \u8fd8\u6709\u53e6\u4e00\u4e2a\u7c7b\u4f3c\u4e8e unwrap \u7684\u65b9\u6cd5\u5b83\u8fd8\u5141\u8bb8\u6211\u4eec\u9009\u62e9 panic! \u7684\u9519\u8bef\u4fe1\u606f\uff1a expect \u3002 \u4f7f\u7528 expect \u800c\u4e0d\u662f unwrap \u5e76\u63d0\u4f9b\u4e00\u4e2a\u597d\u7684\u9519\u8bef\u4fe1\u606f\u53ef\u4ee5\u8868\u660e\u4f60\u7684\u610f\u56fe\u5e76\u66f4\u6613\u4e8e\u8ffd\u8e2a panic \u7684\u6839\u6e90\u3002 expect \u7684\u8bed\u6cd5\u770b\u8d77\u6765\u50cf\u8fd9\u6837\uff1a use std :: fs :: File ; fn main () { // \u8fd4\u56de\u6587\u4ef6\u53e5\u67c4\u6216\u8c03\u7528 panic! \u5b8f // expect \u5728\u8c03\u7528 panic! \u65f6\u4f7f\u7528\u7684\u9519\u8bef\u4fe1\u606f\u5c06\u662f\u4f20\u9012\u7ed9 expect \u7684\u53c2\u6570\uff0c // \u800c\u4e0d\u50cf unwrap \u90a3\u6837\u4f7f\u7528\u9ed8\u8ba4\u7684 panic! \u4fe1\u606f\u3002 let f = File :: open ( \"hello.txt\" ). expect ( \"Failed to open hello.txt\" ); } expect \u4e0e unwrap \u7684\u4f7f\u7528\u65b9\u5f0f\u4e00\u6837\uff1a\u8fd4\u56de\u6587\u4ef6\u53e5\u67c4\u6216\u8c03\u7528 panic! \u5b8f\u3002 expect \u5728\u8c03\u7528 panic! \u65f6\u4f7f\u7528\u7684\u9519\u8bef\u4fe1\u606f\u5c06\u662f\u6211\u4eec\u4f20\u9012\u7ed9 expect \u7684\u53c2\u6570\uff0c\u800c\u4e0d\u50cf unwrap \u90a3\u6837\u4f7f\u7528\u9ed8\u8ba4\u7684 panic! \u4fe1\u606f\u3002 \u5b83\u770b\u8d77\u6765\u50cf\u8fd9\u6837\uff1a thread ' main ' panicked at ' Failed to open hello . txt : Error { repr : Os { code : 2 , message : \"No such file or directory\" } } ' , src / libcore / result . rs : 906 : 4 \u56e0\u4e3a\u8fd9\u4e2a\u9519\u8bef\u4fe1\u606f\u4ee5\u6307\u5b9a\u7684\u6587\u672c\u5f00\u59cb\uff0c Failed to open hello.txt \uff0c\u5c06\u4f1a\u66f4\u5bb9\u6613\u627e\u5230\u4ee3\u7801\u4e2d\u7684\u9519\u8bef\u4fe1\u606f\u6765\u81ea\u4f55\u5904\u3002 \u5982\u679c\u5728\u591a\u5904\u4f7f\u7528 unwrap \uff0c\u5219\u9700\u8981\u82b1\u66f4\u591a\u7684\u65f6\u95f4\u6765\u5206\u6790\u5230\u5e95\u662f\u54ea\u4e00\u4e2a unwrap \u9020\u6210\u4e86 panic \uff0c\u56e0\u4e3a\u6240\u6709\u7684 unwrap \u8c03\u7528\u90fd\u6253\u5370\u76f8\u540c\u7684\u4fe1\u606f\u3002 \u4f20\u64ad\u9519\u8bef \u5f53\u7f16\u5199\u4e00\u4e2a\u5176\u5b9e\u5148\u4f1a\u8c03\u7528\u4e00\u4e9b\u53ef\u80fd\u4f1a\u5931\u8d25\u7684\u64cd\u4f5c\u7684\u51fd\u6570\u65f6\uff0c\u9664\u4e86\u5728\u8fd9\u4e2a\u51fd\u6570\u4e2d\u5904\u7406\u9519\u8bef\u5916\uff0c\u8fd8\u53ef\u4ee5\u9009\u62e9\u8ba9\u8c03\u7528\u8005\u77e5\u9053\u8fd9\u4e2a\u9519\u8bef\u5e76\u51b3\u5b9a\u8be5\u5982\u4f55\u5904\u7406\u3002 \u8fd9\u88ab\u79f0\u4e3a \u4f20\u64ad \uff08propagating\uff09\u9519\u8bef\uff0c\u8fd9\u6837\u80fd\u66f4\u597d\u7684\u63a7\u5236\u4ee3\u7801\u8c03\u7528\uff0c\u56e0\u4e3a\u6bd4\u8d77\u4f60\u4ee3\u7801\u6240\u62e5\u6709\u7684\u4e0a\u4e0b\u6587\uff0c\u8c03\u7528\u8005\u53ef\u80fd\u62e5\u6709\u66f4\u591a\u4fe1\u606f\u6216\u903b\u8f91\u6765\u51b3\u5b9a\u5e94\u8be5\u5982\u4f55\u5904\u7406\u9519\u8bef\u3002 \u4f8b\u5982\uff0c\u4e0b\u9762\u5c55\u793a\u4e86\u4e00\u4e2a\u4ece\u6587\u4ef6\u4e2d\u8bfb\u53d6\u7528\u6237\u540d\u7684\u51fd\u6570\u3002\u5982\u679c\u6587\u4ef6\u4e0d\u5b58\u5728\u6216\u4e0d\u80fd\u8bfb\u53d6\uff0c\u8fd9\u4e2a\u51fd\u6570\u4f1a\u5c06\u8fd9\u4e9b\u9519\u8bef\u8fd4\u56de\u7ed9\u8c03\u7528\u5b83\u7684\u4ee3\u7801\uff1a // \u4e00\u4e2a\u51fd\u6570\u4f7f\u7528 match \u5c06\u9519\u8bef\u8fd4\u56de\u7ed9\u4ee3\u7801\u8c03\u7528\u8005 use std :: fs :: File ; use std :: io :: { self , Read }; // \u51fd\u6570\u8fd4\u56de\u4e00\u4e2a Result<T, E> \u7c7b\u578b\u7684\u503c\uff0c\u5176\u4e2d\u6cdb\u578b\u53c2\u6570 T \u7684\u5177\u4f53\u7c7b\u578b\u662f String\uff0c\u800c E \u7684\u5177\u4f53\u7c7b\u578b\u662f io::Error\u3002 // \u5982\u679c\u8fd9\u4e2a\u51fd\u6570\u6ca1\u6709\u51fa\u4efb\u4f55\u9519\u8bef\u6210\u529f\u8fd4\u56de\uff0c\u51fd\u6570\u7684\u8c03\u7528\u8005\u4f1a\u6536\u5230\u4e00\u4e2a\u5305\u542b String \u7684 Ok \u503c \u2014\u2014 \u51fd\u6570\u4ece\u6587\u4ef6\u4e2d\u8bfb\u53d6\u5230\u7684\u7528\u6237\u540d\u3002 // \u5982\u679c\u51fd\u6570\u9047\u5230\u4efb\u4f55\u9519\u8bef\uff0c\u51fd\u6570\u7684\u8c03\u7528\u8005\u4f1a\u6536\u5230\u4e00\u4e2a Err \u503c\uff0c\u5b83\u50a8\u5b58\u4e86\u4e00\u4e2a\u5305\u542b\u66f4\u591a\u8fd9\u4e2a\u95ee\u9898\u76f8\u5173\u4fe1\u606f\u7684 io::Error \u5b9e\u4f8b\u3002 // \u8fd9\u91cc\u9009\u62e9 io::Error \u4f5c\u4e3a\u51fd\u6570\u7684\u8fd4\u56de\u503c, \u5219\u662f\u56e0\u4e3a\u5b83\u6b63\u597d\u662f\u51fd\u6570\u4f53\u4e2d\uff1aFile::open \u51fd\u6570\u548c read_to_string \u65b9\u6cd5\u53ef\u80fd\u4f1a\u64cd\u4f5c\u5931\u8d25\u7684\u7684\u9519\u8bef\u8fd4\u56de\u503c\u3002 fn read_username_from_file () -> Result < String , io :: Error > { let f = File :: open ( \"hello.txt\" ); let mut f = match f { Ok ( file ) => file , // \u6253\u5f00\u6587\u4ef6\u6210\u529f\u65f6\uff0c\u76f4\u63a5\u8fd4\u56de\u6587\u4ef6\u53e5\u67c4 Err ( e ) => return Err ( e ), // \u6253\u5f00\u6587\u4ef6\u9519\u8bef\u662f\uff0c\u76f4\u63a5Return\u6210Result\u7684Error\u679a\u4e3e\u3002 }; let mut s = String :: new (); // \u521b\u5efa\u5b57\u7b26\u4e32\u4fdd\u5b58\u8bfb\u53d6\u7684\u503c\u3002 // match\u7ed3\u679c\u503c\u5c06\u8fd4\u56de, OK\u503c\u6216Err\u503c match f . read_to_string ( & mut s ) { Ok ( _ ) => Ok ( s ), // \u5c06\u8bfb\u53d6\u5230\u7684\u5b57\u7b26\u4e32\u4f5c\u4e3aResult\u7684OK\u4e2d\u7684\u503c\u3002 Err ( e ) => Err ( e ), // \u5c06Error\u503c\u4f5c\u4e3aResult\u7684Err\u4e2d\u7684\u503c\u3002 // \u4e0d\u9700\u8981\u663e\u5f0f\u7684\u8c03\u7528 return\uff0c\u56e0\u4e3a\u8fd9\u662f\u51fd\u6570\u7684\u6700\u540e\u4e00\u4e2a\u8868\u8fbe\u5f0f\u3002 } } \u8c03\u7528\u8fd9\u4e2a\u51fd\u6570\u7684\u4ee3\u7801\u6700\u7ec8\u4f1a\u5f97\u5230\u4e00\u4e2a\u5305\u542b\u7528\u6237\u540d\u7684 Ok \u503c\uff0c\u6216\u8005\u4e00\u4e2a\u5305\u542b io::Error \u7684 Err \u503c\u3002 \u6211\u4eec\u65e0\u4ece\u5f97\u77e5\u8c03\u7528\u8005\u4f1a\u5982\u4f55\u5904\u7406\u8fd9\u4e9b\u503c\u3002 \u4f8b\u5982\uff0c\u5982\u679c\u4ed6\u4eec\u5f97\u5230\u4e86\u4e00\u4e2a Err \u503c\uff0c\u4ed6\u4eec\u53ef\u80fd\u4f1a\u9009\u62e9 panic! \u5e76\u4f7f\u7a0b\u5e8f\u5d29\u6e83\u3001\u4f7f\u7528\u4e00\u4e2a\u9ed8\u8ba4\u7684\u7528\u6237\u540d\u6216\u8005\u4ece\u6587\u4ef6\u4e4b\u5916\u7684\u5730\u65b9\u5bfb\u627e\u7528\u6237\u540d\u3002 \u6211\u4eec\u6ca1\u6709\u8db3\u591f\u7684\u4fe1\u606f\u77e5\u6653\u8c03\u7528\u8005\u5177\u4f53\u4f1a\u5982\u4f55\u5c1d\u8bd5\uff0c\u6240\u4ee5\u5c06\u6240\u6709\u7684\u6210\u529f\u6216\u5931\u8d25\u4fe1\u606f\u5411\u4e0a\u4f20\u64ad\uff0c\u8ba9\u4ed6\u4eec\u9009\u62e9\u5408\u9002\u7684\u5904\u7406\u65b9\u6cd5\u3002 \u8fd9\u79cd\u4f20\u64ad\u9519\u8bef\u7684\u6a21\u5f0f\u5728 Rust \u662f\u5982\u6b64\u7684\u5e38\u89c1\uff0c\u4ee5\u81f3\u4e8e Rust \u63d0\u4f9b\u4e86 ? \u95ee\u53f7\u8fd0\u7b97\u7b26\u6765\u4f7f\u5176\u66f4\u6613\u4e8e\u5904\u7406\u3002 ?\u8fd0\u7b97\u7b26 \u4e0b\u9762\u793a\u4f8b\u5c55\u793a\u4e86\u4e00\u4e2a read_username_from_file \u7684\u5b9e\u73b0\uff0c\u5b83\u5b9e\u73b0\u4e86\u4e0e\u4e0a\u4e2a\u793a\u4f8b\u4e2d\u7684\u4ee3\u7801\u76f8\u540c\u7684\u529f\u80fd\uff0c\u4e0d\u8fc7\u8fd9\u4e2a\u5b9e\u73b0\u4f7f\u7528\u4e86 ? \u8fd0\u7b97\u7b26\uff1a // \u4e00\u4e2a\u4f7f\u7528 ? \u8fd0\u7b97\u7b26\u5411\u8c03\u7528\u8005\u8fd4\u56de\u9519\u8bef\u7684\u51fd\u6570 use std :: fs :: File ; use std :: io ; use std :: io :: Read ; fn read_username_from_file () -> Result < String , io :: Error > { // \u5982\u679c Result \u7684\u503c\u662f Ok\uff0c\u8fd9\u4e2a\u8868\u8fbe\u5f0f\u5c06\u4f1a\u8fd4\u56de Ok \u4e2d\u7684\u503c\u800c\u7a0b\u5e8f\u5c06\u7ee7\u7eed\u6267\u884c\u3002 // \u5982\u679c\u503c\u662f Err\uff0cErr \u4e2d\u7684\u503c\u5c06\u4f5c\u4e3a\u6574\u4e2a\u51fd\u6570\u7684\u8fd4\u56de\u503c\uff0c\u5c31\u597d\u50cf\u4f7f\u7528\u4e86 return \u5173\u952e\u5b57\u4e00\u6837\uff0c\u8fd9\u6837\u9519\u8bef\u503c\u5c31\u88ab\u4f20\u64ad\u7ed9\u4e86\u8c03\u7528\u8005\u3002 // ? \u5c06\u4f1a\u628a Ok \u4e2d\u7684\u503c\u8fd4\u56de\u7ed9\u53d8\u91cf f, \u5982\u679c\u51fa\u73b0\u4e86\u9519\u8bef\uff0c? \u8fd0\u7b97\u7b26\u4f1a\u63d0\u65e9\u8fd4\u56de\u6574\u4e2a\u51fd\u6570\u5e76\u5c06\u4e00\u4e9b Err \u503c\u4f20\u64ad\u7ed9\u8c03\u7528\u8005 let mut f = File :: open ( \"hello.txt\" ) ? ; let mut s = String :: new (); // \uff1f\u8fd0\u7528\u540c\u4e0a f . read_to_string ( & mut s ) ? ; Ok ( s ) // \u8fd4\u56deResult\u679a\u4e3e\u7684Ok\u503c\u3002 } \u4e0a\u4e2a\u793a\u4f8b\u4e2d\u7684 match \u8868\u8fbe\u5f0f\u4e0e\u95ee\u53f7\u8fd0\u7b97\u7b26\u6240\u505a\u7684\u6709 \u4e00\u70b9\u4e0d\u540c \uff1a ? \u8fd0\u7b97\u7b26\u6240\u4f7f\u7528\u7684\u9519\u8bef\u503c\u88ab\u4f20\u9012\u7ed9\u4e86 from \u51fd\u6570\uff0c\u5b83\u5b9a\u4e49\u4e8e\u6807\u51c6\u5e93\u7684 From trait \u4e2d\uff0c\u5176\u7528\u6765\u5c06\u9519\u8bef\u4ece\u4e00\u79cd\u7c7b\u578b\u8f6c\u6362\u4e3a\u53e6\u4e00\u79cd\u7c7b\u578b\u3002 \u5f53 ? \u8fd0\u7b97\u7b26\u8c03\u7528 from \u51fd\u6570\u65f6\uff0c\u6536\u5230\u7684\u9519\u8bef\u7c7b\u578b\u88ab\u8f6c\u6362\u4e3a\u7531\u5f53\u524d\u51fd\u6570\u8fd4\u56de\u7c7b\u578b\u6240\u6307\u5b9a\u7684\u9519\u8bef\u7c7b\u578b\u3002 \u8fd9\u5728\u5f53\u51fd\u6570\u8fd4\u56de\u5355\u4e2a\u9519\u8bef\u7c7b\u578b\u6765\u4ee3\u8868\u6240\u6709\u53ef\u80fd\u5931\u8d25\u7684\u65b9\u5f0f\u65f6\u5f88\u6709\u7528\uff0c\u5373\u4f7f\u5176\u53ef\u80fd\u4f1a\u56e0\u5f88\u591a\u79cd\u539f\u56e0\u5931\u8d25\u3002 \u53ea\u8981\u6bcf\u4e00\u4e2a\u9519\u8bef\u7c7b\u578b\u90fd\u5b9e\u73b0\u4e86 from \u51fd\u6570\u6765\u5b9a\u4e49\u5982\u4f55\u5c06\u81ea\u8eab\u8f6c\u6362\u4e3a\u8fd4\u56de\u7684\u9519\u8bef\u7c7b\u578b\uff0c ? \u8fd0\u7b97\u7b26\u4f1a\u81ea\u52a8\u5904\u7406\u8fd9\u4e9b\u8f6c\u6362\u3002 ? \u8fd0\u7b97\u7b26\u6d88\u9664\u4e86\u5927\u91cf\u6837\u677f\u4ee3\u7801\u5e76\u4f7f\u5f97\u51fd\u6570\u7684\u5b9e\u73b0\u66f4\u7b80\u5355\u3002 \u6211\u4eec\u751a\u81f3\u53ef\u4ee5\u5728 ? \u4e4b\u540e\u76f4\u63a5\u4f7f\u7528\u94fe\u5f0f\u65b9\u6cd5\u8c03\u7528\u6765\u8fdb\u4e00\u6b65\u7f29\u77ed\u4ee3\u7801: // \u95ee\u53f7\u8fd0\u7b97\u7b26\u4e4b\u540e\u7684\u94fe\u5f0f\u65b9\u6cd5\u8c03\u7528 use std :: fs :: File ; use std :: io ; use std :: io :: Read ; fn read_username_from_file () -> Result < String , io :: Error > { let mut s = String :: new (); File :: open ( \"hello.txt\" ) ? . read_to_string ( & mut s ) ? ; Ok ( s ) } \u54ea\u91cc\u4f7f\u7528 ? \u8fd0\u7b97\u7b26 ? \u8fd0\u7b97\u7b26\u53ea\u80fd\u88ab\u7528\u4e8e\u8fd4\u56de\u503c\u4e0e ? \u4f5c\u7528\u7684\u503c\u76f8\u517c\u5bb9\u7684\u51fd\u6570\u3002 \u56e0\u4e3a ? \u8fd0\u7b97\u7b26\u88ab\u5b9a\u4e49\u4e3a\u4ece\u51fd\u6570\u4e2d\u63d0\u65e9\u8fd4\u56de\u4e00\u4e2a\u503c\uff0c\u8fd9\u4e0e\u793a\u4f8b\u4e2d\u7684 match \u8868\u8fbe\u5f0f\u6709\u7740\u5b8c\u5168\u76f8\u540c\u7684\u5de5\u4f5c\u65b9\u5f0f\u3002 \u793a\u4f8b\u4e2d match \u4f5c\u7528\u4e8e\u4e00\u4e2a Result \u503c\uff0c\u63d0\u65e9\u8fd4\u56de\u7684\u5206\u652f\u8fd4\u56de\u4e86\u4e00\u4e2a Err(e) \u503c\u3002 \u51fd\u6570\u7684\u8fd4\u56de\u503c\u5fc5\u987b\u662f Result \u7c7b\u578b\u624d\u80fd\u4e0e\u8fd9\u4e2a return \u76f8\u517c\u5bb9\u3002 \u770b\u770b\u5728\u8fd4\u56de\u503c\u4e0d\u517c\u5bb9\u7684 main \u51fd\u6570\u4e2d\u4f7f\u7528 ? \u8fd0\u7b97\u7b26\u4f1a\u5f97\u5230\u4ec0\u4e48\u9519\u8bef\uff1a // \u5c1d\u8bd5\u5728\u8fd4\u56de () \u7684\u51fd\u6570\u4e2d\u4f7f\u7528 ? \u7684\u4ee3\u7801\u4e0d\u80fd\u7f16\u8bd1 use std :: fs :: File ; // \u8fd4\u56de\u7c7b\u578b\u662f () \u800c\u4e0d\u662f Result fn main () { let f = File :: open ( \"hello.txt\" ) ? ; } \u5f53\u7f16\u8bd1\u8fd9\u4e9b\u4ee3\u7801\uff0c\u4f1a\u5f97\u5230\u5982\u4e0b\u9519\u8bef\u4fe1\u606f\uff1a $ cargo run Compiling error - handling v0 . 1.0 ( file : ///projects/error-handling) error [ E0277 ] : the ` ? ` operator can only be used in a function that returns ` Result ` or ` Option ` ( or another type that implements ` FromResidual ` ) - -> src / main . rs : 4 : 36 | 3 | / fn main () { 4 | | let f = File :: open ( \"hello.txt\" ) ? ; | | ^ cannot use the ` ? ` operator in a function that returns ` () ` 5 | | } | | _ - this function should return ` Result ` or ` Option ` to accept ` ? ` | = help : the trait ` FromResidual < Result < Infallible , std :: io :: Error >> ` is not implemented for ` () ` For more information about this error , try ` rustc -- explain E0277 ` . error : could not compile ` error - handling ` due to previous error \u8fd9\u4e2a\u9519\u8bef\u6307\u51fa\u53ea\u80fd\u5728\u8fd4\u56de Result \u6216\u8005\u5176\u5b83\u5b9e\u73b0\u4e86 FromResidual \u7684\u7c7b\u578b\u7684\u51fd\u6570\u4e2d\u4f7f\u7528 ? \u8fd0\u7b97\u7b26\u3002 \u4e3a\u4e86\u4fee\u590d\u8fd9\u4e2a\u9519\u8bef\uff0c\u6709\u4e24\u4e2a\u9009\u62e9\u3002 \u4e00\u4e2a\u662f\uff0c\u5982\u679c\u6ca1\u6709\u9650\u5236\u7684\u8bdd\u5c06\u51fd\u6570\u7684\u8fd4\u56de\u503c\u6539\u4e3a Result<T, E> \u3002 \u53e6\u4e00\u4e2a\u662f\u4f7f\u7528 match \u6216 Result<T, E> \u7684\u65b9\u6cd5\u4e2d\u5408\u9002\u7684\u4e00\u4e2a\u6765\u5904\u7406 Result<T, E> \u3002 \u9519\u8bef\u4fe1\u606f\u4e2d\u4e5f\u63d0\u5230 ? \u4e5f\u53ef\u7528\u4e8e Option<T> \u503c\u3002 \u5982\u540c\u5bf9 Result \u4f7f\u7528 ? \u4e00\u6837\uff0c\u53ea\u80fd\u5728\u8fd4\u56de Option \u7684\u51fd\u6570\u4e2d\u5bf9 Option \u4f7f\u7528 ? \u3002 \u5728 Option<T> \u4e0a\u8c03\u7528 ? \u8fd0\u7b97\u7b26\u7684\u884c\u4e3a\u4e0e Result<T, E> \u7c7b\u4f3c\uff1a \u5982\u679c\u503c\u662f None \uff0c\u6b64\u65f6 None \u4f1a\u4ece\u51fd\u6570\u4e2d\u63d0\u524d\u8fd4\u56de\u3002 \u5982\u679c\u503c\u662f Some \uff0c Some \u4e2d\u7684\u503c\u4f5c\u4e3a\u8868\u8fbe\u5f0f\u7684\u8fd4\u56de\u503c\u540c\u65f6\u51fd\u6570\u7ee7\u7eed\u3002 \u4e0b\u9762\u793a\u4f8b\u4e2d\u6709\u4e00\u4e2a\u4ece\u7ed9\u5b9a\u6587\u672c\u4e2d\u8fd4\u56de\u7b2c\u4e00\u884c\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u7684\u51fd\u6570\u7684\u4f8b\u5b50\uff1a // \u5728 Option<T> \u503c\u4e0a\u4f7f\u7528 ? \u8fd0\u7b97\u7b26 fn last_char_of_first_line ( text : & str ) -> Option < char > { text . lines (). next () ? . chars (). last () } \u8fd9\u4e2a\u51fd\u6570\u8fd4\u56de Option<char> \u56e0\u4e3a\u5b83\u53ef\u80fd\u4f1a\u5728\u8fd9\u4e2a\u4f4d\u7f6e\u627e\u5230\u4e00\u4e2a\u5b57\u7b26\uff0c\u4e5f\u53ef\u80fd\u6ca1\u6709\u5b57\u7b26\u3002 \u8fd9\u6bb5\u4ee3\u7801\u83b7\u53d6 text \u5b57\u7b26\u4e32 slice \u4f5c\u4e3a\u53c2\u6570\u5e76\u8c03\u7528\u5176 lines \u65b9\u6cd5\uff0c\u8fd9\u4f1a\u8fd4\u56de\u4e00\u4e2a\u5b57\u7b26\u4e32\u4e2d\u6bcf\u4e00\u884c\u7684\u8fed\u4ee3\u5668\u3002 \u56e0\u4e3a\u51fd\u6570\u5e0c\u671b\u68c0\u67e5\u7b2c\u4e00\u884c\uff0c\u6240\u4ee5\u8c03\u7528\u4e86\u8fed\u4ee3\u5668 next \u6765\u83b7\u53d6\u8fed\u4ee3\u5668\u4e2d\u7b2c\u4e00\u4e2a\u503c\u3002 \u5982\u679c text \u662f\u7a7a\u5b57\u7b26\u4e32\uff0c next \u8c03\u7528\u4f1a\u8fd4\u56de None \uff0c\u6b64\u65f6\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 ? \u6765\u505c\u6b62\u5e76\u4ece last_char_of_first_line \u8fd4\u56de None \u3002 \u5982\u679c text \u4e0d\u662f\u7a7a\u5b57\u7b26\u4e32\uff0c next \u4f1a\u8fd4\u56de\u4e00\u4e2a\u5305\u542b text \u4e2d\u7b2c\u4e00\u884c\u7684\u5b57\u7b26\u4e32 slice \u7684 Some \u503c\u3002 ? \u4f1a\u63d0\u53d6\u8fd9\u4e2a\u5b57\u7b26\u4e32 slice \uff0c\u7136\u540e\u53ef\u4ee5\u5728\u5b57\u7b26\u4e32 slice \u4e0a\u8c03\u7528 chars \u6765\u83b7\u53d6\u5b57\u7b26\u7684\u8fed\u4ee3\u5668\u3002 \u6211\u4eec\u611f\u5174\u8da3\u7684\u662f\u7b2c\u4e00\u884c\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\uff0c\u6240\u4ee5\u53ef\u4ee5\u8c03\u7528 last \u6765\u8fd4\u56de\u8fed\u4ee3\u5668\u7684\u6700\u540e\u4e00\u9879\u3002 \u8fd9\u662f\u4e00\u4e2a Option \uff0c\u56e0\u4e3a\u6709\u53ef\u80fd\u7b2c\u4e00\u884c\u662f\u4e00\u4e2a\u7a7a\u5b57\u7b26\u4e32\uff0c\u4f8b\u5982 text \u4ee5\u4e00\u4e2a\u7a7a\u884c\u5f00\u5934\u800c\u540e\u9762\u7684\u884c\u6709\u6587\u672c\uff0c\u50cf\u662f \"\\nhi\"\u3002 \u4e0d\u8fc7\uff0c\u5982\u679c\u7b2c\u4e00\u884c\u6709\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\uff0c\u5b83\u4f1a\u8fd4\u56de\u5728\u4e00\u4e2a Some \u6210\u5458\u4e2d\u3002 ? \u8fd0\u7b97\u7b26\u4f5c\u7528\u4e8e\u5176\u4e2d\u7ed9\u4e86\u6211\u4eec\u4e00\u4e2a\u7b80\u6d01\u7684\u8868\u8fbe\u8fd9\u79cd\u903b\u8f91\u7684\u65b9\u5f0f\u3002 \u5982\u679c\u6211\u4eec\u4e0d\u80fd\u5728 Option \u4e0a\u4f7f\u7528 ? \u8fd0\u7b97\u7b26\uff0c\u5219\u4e0d\u5f97\u4e0d\u4f7f\u7528\u66f4\u591a\u7684\u65b9\u6cd5\u8c03\u7528\u6216\u8005 match \u8868\u8fbe\u5f0f\u6765\u5b9e\u73b0\u8fd9\u4e9b\u903b\u8f91\u3002 \u6ce8\u610f \u4f60\u53ef\u4ee5\u5728\u8fd4\u56de Result \u7684\u51fd\u6570\u4e2d\u5bf9 Result \u4f7f\u7528 ? \u8fd0\u7b97\u7b26\uff0c\u53ef\u4ee5\u5728\u8fd4\u56de Option \u7684\u51fd\u6570\u4e2d\u5bf9 Option \u4f7f\u7528 ? \u8fd0\u7b97\u7b26\uff0c\u4f46\u662f\u4e0d\u53ef\u4ee5\u6df7\u5408\u642d\u914d\u3002 ? \u8fd0\u7b97\u7b26\u4e0d\u4f1a\u81ea\u52a8\u5c06 Result \u8f6c\u5316\u4e3a Option \uff0c\u53cd\u4e4b\u4ea6\u7136\uff1b \u5728\u8fd9\u4e9b\u60c5\u51b5\u4e0b\uff0c\u53ef\u4ee5\u4f7f\u7528\u7c7b\u4f3c Result \u7684 ok \u65b9\u6cd5\u6216\u8005 Option \u7684 ok_or \u65b9\u6cd5\u6765\u663e\u5f0f\u8f6c\u6362\u3002 \u76ee\u524d\u4e3a\u6b62\uff0c\u6240\u4f7f\u7528\u7684\u6240\u6709 main \u51fd\u6570\u90fd\u8fd4\u56de () \u3002 main \u51fd\u6570\u662f\u7279\u6b8a\u7684\u56e0\u4e3a\u5b83\u662f\u53ef\u6267\u884c\u7a0b\u5e8f\u7684\u5165\u53e3\u70b9\u548c\u9000\u51fa\u70b9\uff0c\u4e3a\u4e86\u4f7f\u7a0b\u5e8f\u80fd\u6b63\u5e38\u5de5\u4f5c\uff0c\u5176\u53ef\u4ee5\u8fd4\u56de\u7684\u7c7b\u578b\u662f\u6709\u9650\u5236\u7684\u3002 \u5e78\u8fd0\u7684\u662f main \u51fd\u6570\u4e5f\u53ef\u4ee5\u8fd4\u56de Result<(), E> \uff0c \u4e0b\u9762\u793a\u4f8b\u4fee\u6539\u4e86 main \u7684\u8fd4\u56de\u503c\u4e3a Result<(), Box<dyn Error>> \u5e76\u5728\u7ed3\u5c3e\u589e\u52a0\u4e86\u4e00\u4e2a Ok(()) \u4f5c\u4e3a\u8fd4\u56de\u503c\u3002 \u8fd9\u6bb5\u4ee3\u7801\u53ef\u4ee5\u7f16\u8bd1\uff1a // \u4fee\u6539 main \u8fd4\u56de Result<(), E> \u5141\u8bb8\u5bf9 Result \u503c\u4f7f\u7528 ? \u8fd0\u7b97\u7b26 use std :: error :: Error ; use std :: fs :: File ; fn main () -> Result < (), Box < dyn Error >> { let f = File :: open ( \"hello.txt\" ) ? ; Ok (()) } Box<dyn Error> \u7c7b\u578b\u662f\u4e00\u4e2a trait \u5bf9\u8c61\uff08 trait object\uff09\u7b2c\u5341\u4e03\u7ae0 \u201c \u4e3a\u4f7f\u7528\u4e0d\u540c\u7c7b\u578b\u7684\u503c\u800c\u8bbe\u8ba1\u7684 trait \u5bf9\u8c61 \u201d \u90e8\u5206\u4f1a\u505a\u4ecb\u7ecd\u3002 \u76ee\u524d\u53ef\u4ee5\u5c06 Box<dyn Error> \u7406\u89e3\u4e3a \u201c \u4efb\u4f55\u7c7b\u578b\u7684\u9519\u8bef \u201d\u3002 \u5728\u8fd4\u56de Box<dyn Error> \u9519\u8bef\u7c7b\u578b main \u51fd\u6570\u4e2d\u5bf9 Result \u4f7f\u7528 ? \u662f\u5141\u8bb8\u7684\uff0c\u56e0\u4e3a\u5b83\u5141\u8bb8\u4efb\u4f55 Err \u503c\u63d0\u524d\u8fd4\u56de\u3002 \u5f53 main \u51fd\u6570\u8fd4\u56de Result<(), E> \uff0c \u5982\u679c main \u8fd4\u56de Ok(()) \u53ef\u6267\u884c\u7a0b\u5e8f\u4f1a\u4ee5 0 \u503c\u9000\u51fa\uff0c \u800c\u5982\u679c main \u8fd4\u56de Err \u503c\u5219\u4f1a\u4ee5\u975e\u96f6\u503c\u9000\u51fa\uff1b \u6210\u529f\u9000\u51fa\u7684\u7a0b\u5e8f\u4f1a\u8fd4\u56de\u6574\u6570 0 \uff0c\u8fd0\u884c\u9519\u8bef\u7684\u7a0b\u5e8f\u4f1a\u8fd4\u56de\u975e 0 \u7684\u6574\u6570\u3002 Rust \u4e5f\u4f1a\u4ece\u4e8c\u8fdb\u5236\u7a0b\u5e8f\u4e2d\u8fd4\u56de\u4e0e\u8fd9\u4e2a\u60ef\u4f8b\u76f8\u517c\u5bb9\u7684\u6574\u6570\u3002 main \u51fd\u6570\u4e5f\u53ef\u4ee5\u8fd4\u56de\u4efb\u4f55\u5b9e\u73b0\u4e86 std::process::Termination trait \u7684\u7c7b\u578b\u3002 \u622a\u81f3\u7f16\u5199\u65f6\uff0c Termination trait \u662f\u4e00\u4e2a\u4e0d\u7a33\u5b9a\u529f\u80fd\uff08unstable feature\uff09\uff0c\u53ea\u80fd\u7528\u4e8e Nightly Rust \u4e2d\uff0c \u6240\u4ee5\u4f60\u4e0d\u80fd\u5728 \u7a33\u5b9a\u7248 Rust\uff08Stable Rust\uff09\u4e2d\u7528\u81ea\u5df1\u7684\u7c7b\u578b\u53bb\u5b9e\u73b0\uff0c\u4e0d\u8fc7\u6709\u671d\u4e00\u65e5\u5e94\u8be5\u53ef\u4ee5\uff01 \u9519\u8bef\u5904\u7406\u6289\u62e9 \u90a3\u4e48\uff0c\u8be5\u5982\u4f55\u51b3\u5b9a\u4f55\u65f6\u5e94\u8be5 panic! \u4ee5\u53ca\u4f55\u65f6\u5e94\u8be5\u8fd4\u56de Result \u5462\uff1f \u5982\u679c\u4ee3\u7801 panic \uff0c\u5c31\u6ca1\u6709\u6062\u590d\u7684\u53ef\u80fd\u3002\u4f60\u53ef\u4ee5\u9009\u62e9\u5bf9\u4efb\u4f55\u9519\u8bef\u573a\u666f\u90fd\u8c03\u7528 panic! \uff0c\u4e0d\u7ba1\u662f\u5426\u6709\u53ef\u80fd\u6062\u590d\uff0c\u4e0d\u8fc7\u8fd9\u6837\u5c31\u662f\u4f60\u4ee3\u66ff\u8c03\u7528\u8005\u51b3\u5b9a\u4e86\u8fd9\u662f\u4e0d\u53ef\u6062\u590d\u7684\u3002 \u9009\u62e9\u8fd4\u56de Result \u503c\u7684\u8bdd\uff0c\u5c31\u5c06\u9009\u62e9\u6743\u4ea4\u7ed9\u4e86\u8c03\u7528\u8005\uff0c\u800c\u4e0d\u662f\u4ee3\u66ff\u4ed6\u4eec\u505a\u51fa\u51b3\u5b9a\u3002\u8c03\u7528\u8005\u53ef\u80fd\u4f1a\u9009\u62e9\u4ee5\u7b26\u5408\u4ed6\u4eec\u573a\u666f\u7684\u65b9\u5f0f\u5c1d\u8bd5\u6062\u590d\uff0c\u6216\u8005\u4e5f\u53ef\u80fd\u5e72\u8106\u5c31\u8ba4\u4e3a Err \u662f\u4e0d\u53ef\u6062\u590d\u7684\uff0c\u6240\u4ee5\u4ed6\u4eec\u4e5f\u53ef\u80fd\u4f1a\u8c03\u7528 panic! \u5e76\u5c06\u53ef\u6062\u590d\u7684\u9519\u8bef\u53d8\u6210\u4e86\u4e0d\u53ef\u6062\u590d\u7684\u9519\u8bef\u3002 \u56e0\u6b64\u8fd4\u56de Result \u662f\u5b9a\u4e49\u53ef\u80fd\u4f1a\u5931\u8d25\u7684\u51fd\u6570\u7684\u4e00\u4e2a\u597d\u7684\u9ed8\u8ba4\u9009\u62e9\u3002 \u5728\u4e00\u4e9b\u7c7b\u4f3c \u793a\u4f8b \u3001 \u539f\u578b\u4ee3\u7801 \uff08prototype code\uff09\u548c \u6d4b\u8bd5 \u4e2d\uff0c panic \u6bd4\u8fd4\u56de Result \u66f4\u4e3a\u5408\u9002\uff0c\u4e0d\u8fc7\u4ed6\u4eec\u5e76\u4e0d\u5e38\u89c1\u3002 \u793a\u4f8b\u3001\u4ee3\u7801\u539f\u578b\u548c\u6d4b\u8bd5\u90fd\u975e\u5e38\u9002\u5408 panic \u5f53\u4f60\u7f16\u5199\u4e00\u4e2a \u793a\u4f8b \u6765\u5c55\u793a\u4e00\u4e9b\u6982\u5ff5\u65f6\uff0c \u5728\u62e5\u6709\u5065\u58ee\u7684\u9519\u8bef\u5904\u7406\u4ee3\u7801\u7684\u540c\u65f6\u4e5f\u4f1a\u4f7f\u5f97\u4f8b\u5b50\u4e0d\u90a3\u4e48\u660e\u786e\u3002 \u4f8b\u5982\uff0c\u8c03\u7528\u4e00\u4e2a\u7c7b\u4f3c unwrap \u8fd9\u6837\u53ef\u80fd panic! \u7684\u65b9\u6cd5\u53ef\u4ee5\u88ab\u7406\u89e3\u4e3a\u4e00\u4e2a\u4f60\u5b9e\u9645\u5e0c\u671b\u7a0b\u5e8f\u5904\u7406\u9519\u8bef\u65b9\u5f0f\u7684\u5360\u4f4d\u7b26\uff0c\u5b83\u6839\u636e\u5176\u4f59\u4ee3\u7801\u8fd0\u884c\u65b9\u5f0f\u53ef\u80fd\u4f1a\u5404\u4e0d\u76f8\u540c\u3002 \u7c7b\u4f3c\u5730\uff0c\u5728\u51c6\u5907\u597d\u51b3\u5b9a\u5982\u4f55\u5904\u7406\u9519\u8bef\u4e4b\u524d\uff0c unwrap \u548c expect \u65b9\u6cd5\u5728\u539f\u578b\u8bbe\u8ba1\u65f6\u975e\u5e38\u65b9\u4fbf\u3002 \u5f53\u6211\u4eec\u51c6\u5907\u597d\u8ba9\u7a0b\u5e8f\u66f4\u52a0\u5065\u58ee\u65f6\uff0c\u5b83\u4eec\u4f1a\u5728\u4ee3\u7801\u4e2d\u7559\u4e0b\u6e05\u6670\u7684\u6807\u8bb0\u3002 \u5982\u679c\u65b9\u6cd5\u8c03\u7528\u5728\u6d4b\u8bd5\u4e2d\u5931\u8d25\u4e86\uff0c\u6211\u4eec\u5e0c\u671b\u8fd9\u4e2a\u6d4b\u8bd5\u90fd\u5931\u8d25\uff0c\u5373\u4fbf\u8fd9\u4e2a\u65b9\u6cd5\u5e76\u4e0d\u662f\u9700\u8981\u6d4b\u8bd5\u7684\u529f\u80fd\u3002\u56e0\u4e3a panic! \u4f1a\u5c06\u6d4b\u8bd5\u6807\u8bb0\u4e3a\u5931\u8d25\uff0c\u6b64\u65f6\u8c03\u7528 unwrap \u6216 expect \u662f\u6070\u5f53\u7684\u3002 \u5f53\u6211\u4eec\u77e5\u9053\u66f4\u591a\u7684\u60c5\u51b5 \u5f53\u4f60\u6709\u4e00\u4e9b\u5176\u4ed6\u7684\u903b\u8f91\u6765\u786e\u4fdd Result \u4f1a\u662f Ok \u503c\u65f6\uff0c\u8c03\u7528 unwrap \u4e5f\u662f\u5408\u9002\u7684\uff0c\u867d\u7136\u7f16\u8bd1\u5668\u65e0\u6cd5\u7406\u89e3\u8fd9\u79cd\u903b\u8f91\u3002 \u4f60\u4ecd\u7136\u9700\u8981\u5904\u7406\u4e00\u4e2a Result \u503c\uff1a\u5373\u4f7f\u5728\u4f60\u7684\u7279\u5b9a\u60c5\u51b5\u4e0b\u903b\u8f91\u4e0a\u662f\u4e0d\u53ef\u80fd\u7684\uff0c\u4f60\u6240\u8c03\u7528\u7684\u4efb\u4f55\u64cd\u4f5c\u4ecd\u7136\u6709\u53ef\u80fd\u5931\u8d25\u3002 \u5982\u679c\u901a\u8fc7\u4eba\u5de5\u68c0\u67e5\u4ee3\u7801\u6765\u786e\u4fdd\u6c38\u8fdc\u4e5f\u4e0d\u4f1a\u51fa\u73b0 Err \u503c\uff0c\u90a3\u4e48\u8c03\u7528 unwrap \u4e5f\u662f\u5b8c\u5168\u53ef\u4ee5\u63a5\u53d7\u7684\uff0c\u8fd9\u91cc\u662f\u4e00\u4e2a\u4f8b\u5b50\uff1a use std :: net :: IpAddr ; // \u6c38\u8fdc\u4e0d\u53ef\u80fd\u5931\u8d25\uff0c\u4f46\u8981\u5904\u7406Result\uff0c\u53ef\u4ee5\u4f7f\u7528unwrap; let home : IpAddr = \"127.0.0.1\" . parse (). unwrap (); \u901a\u8fc7\u89e3\u6790\u4e00\u4e2a\u786c\u7f16\u7801\u7684\u5b57\u7b26\u6765\u521b\u5efa\u4e00\u4e2a IpAddr \u5b9e\u4f8b\u3002\u53ef\u4ee5\u770b\u51fa 127.0.0.1 \u662f\u4e00\u4e2a\u6709\u6548\u7684 IP \u5730\u5740\uff0c\u6240\u4ee5\u8fd9\u91cc\u4f7f\u7528 unwrap \u662f\u53ef\u4ee5\u63a5\u53d7\u7684\u3002 \u7136\u800c\uff0c\u62e5\u6709\u4e00\u4e2a\u786c\u7f16\u7801\u7684\u6709\u6548\u7684\u5b57\u7b26\u4e32\u4e5f\u4e0d\u80fd\u6539\u53d8 parse \u65b9\u6cd5\u7684\u8fd4\u56de\u503c\u7c7b\u578b\uff1a\u5b83\u4ecd\u7136\u662f\u4e00\u4e2a Result \u503c\uff0c\u800c\u7f16\u8bd1\u5668\u4ecd\u7136\u4f1a\u8981\u6c42\u6211\u4eec\u5904\u7406\u8fd9\u4e2a Result \uff0c\u597d\u50cf\u8fd8\u662f\u6709\u53ef\u80fd\u51fa\u73b0 Err \u6210\u5458\u90a3\u6837\u3002 \u8fd9\u662f\u56e0\u4e3a\u7f16\u8bd1\u5668\u8fd8\u6ca1\u6709\u667a\u80fd\u5230\u53ef\u4ee5\u8bc6\u522b\u51fa\u8fd9\u4e2a\u5b57\u7b26\u4e32\u603b\u662f\u4e00\u4e2a\u6709\u6548\u7684 IP \u5730\u5740\u3002\u5982\u679c IP \u5730\u5740\u5b57\u7b26\u4e32\u6765\u6e90\u4e8e\u7528\u6237\u800c\u4e0d\u662f\u786c\u7f16\u7801\u8fdb\u7a0b\u5e8f\u4e2d\u7684\u8bdd\uff0c\u90a3\u4e48\u5c31 \u786e\u5b9e \u6709\u5931\u8d25\u7684\u53ef\u80fd\u6027\uff0c\u8fd9\u65f6\u5c31\u7edd\u5bf9\u9700\u8981\u6211\u4eec\u4ee5\u4e00\u79cd\u66f4\u5065\u58ee\u7684\u65b9\u5f0f\u5904\u7406 Result \u4e86\u3002 \u9519\u8bef\u5904\u7406\u6307\u5bfc\u539f\u5219 \u5728\u5f53\u6709\u53ef\u80fd\u4f1a\u5bfc\u81f4 \u6709\u5bb3\u72b6\u6001 \u7684\u60c5\u51b5\u4e0b\u5efa\u8bae\u4f7f\u7528 panic! \u2014\u2014 \u5728\u8fd9\u91cc\uff0c \u6709\u5bb3\u72b6\u6001 \u662f\u6307\u5f53\u4e00\u4e9b\u5047\u8bbe\u3001\u4fdd\u8bc1\u3001\u534f\u8bae\u6216\u4e0d\u53ef\u53d8\u6027\u88ab\u6253\u7834\u7684\u72b6\u6001 \uff0c\u4f8b\u5982 \u65e0\u6548\u7684\u503c \u3001 \u81ea\u76f8\u77db\u76fe\u7684\u503c \u6216\u8005 \u88ab\u4f20\u9012\u4e86\u4e0d\u5b58\u5728\u7684\u503c \u2014\u2014 \u5916\u52a0\u5982\u4e0b\u51e0\u79cd\u60c5\u51b5\uff1a \u6709\u5bb3\u72b6\u6001\u662f \u975e\u9884\u671f\u7684\u884c\u4e3a \uff0c\u4e0e\u5076\u5c14\u4f1a\u53d1\u751f\u7684\u884c\u4e3a\u76f8\u5bf9\uff0c\u6bd4\u5982\u7528\u6237\u8f93\u5165\u4e86\u9519\u8bef\u683c\u5f0f\u7684\u6570\u636e\u3002 \u5728\u6b64\u4e4b\u540e \u4ee3\u7801\u7684\u8fd0\u884c\u4f9d\u8d56\u4e8e\u4e0d\u5904\u4e8e\u8fd9\u79cd\u6709\u5bb3\u72b6\u6001 \uff0c\u800c\u4e0d\u662f\u5728\u6bcf\u4e00\u6b65\u90fd\u68c0\u67e5\u662f\u5426\u6709\u95ee\u9898\u3002 \u6ca1\u6709\u53ef\u884c\u7684\u624b\u6bb5\u6765\u5c06\u6709\u5bb3\u72b6\u6001\u4fe1\u606f\u7f16\u7801\u8fdb\u6240\u4f7f\u7528\u7684\u7c7b\u578b\u4e2d\u7684\u60c5\u51b5 \u3002\u6211\u4eec\u4f1a\u5728\u7b2c\u5341\u4e03\u7ae0 \u201c \u5c06\u72b6\u6001\u548c\u884c\u4e3a\u7f16\u7801\u4e3a\u7c7b\u578b \u201d \u90e8\u5206\u901a\u8fc7\u4e00\u4e2a\u4f8b\u5b50\u6765\u8bf4\u660e\u6211\u4eec\u7684\u610f\u601d\u3002 \u5982\u679c\u522b\u4eba\u8c03\u7528\u4f60\u7684\u4ee3\u7801\u5e76\u4f20\u9012\u4e86\u4e00\u4e2a\u6ca1\u6709\u610f\u4e49\u7684\u503c\uff0c\u6700\u597d\u7684\u60c5\u51b5\u4e5f\u8bb8\u5c31\u662f panic! \u5e76\u8b66\u544a\u4f7f\u7528\u4f60\u7684\u5e93\u7684\u4eba\u4ed6\u7684\u4ee3\u7801\u4e2d\u6709 bug \u4ee5\u4fbf\u4ed6\u80fd\u5728\u5f00\u53d1\u65f6\u5c31\u4fee\u590d\u5b83\u3002 \u7c7b\u4f3c\u7684\uff0c\u5982\u679c\u4f60\u6b63\u5728\u8c03\u7528\u4e0d\u53d7\u4f60\u63a7\u5236\u7684\u5916\u90e8\u4ee3\u7801\uff0c\u5e76\u4e14\u5b83\u8fd4\u56de\u4e86\u4e00\u4e2a\u4f60\u65e0\u6cd5\u4fee\u590d\u7684\u65e0\u6548\u72b6\u6001\uff0c\u90a3\u4e48 panic! \u5f80\u5f80\u662f\u5408\u9002\u7684\u3002 \u7136\u800c\u5f53\u9519\u8bef\u9884\u671f\u4f1a\u51fa\u73b0\u65f6\uff0c\u8fd4\u56de Result \u4ecd\u8981\u6bd4\u8c03\u7528 panic! \u66f4\u4e3a\u5408\u9002\u3002 \u8fd9\u6837\u7684\u4f8b\u5b50\u5305\u62ec\u89e3\u6790\u5668\u63a5\u6536\u5230\u683c\u5f0f\u9519\u8bef\u7684\u6570\u636e\uff0c\u6216\u8005 HTTP \u8bf7\u6c42\u8fd4\u56de\u4e86\u4e00\u4e2a\u8868\u660e\u89e6\u53d1\u4e86\u9650\u6d41\u7684\u72b6\u6001\u3002 \u5728\u8fd9\u4e9b\u4f8b\u5b50\u4e2d\uff0c\u5e94\u8be5\u901a\u8fc7\u8fd4\u56de Result \u6765\u8868\u660e\u5931\u8d25\u9884\u671f\u662f\u53ef\u80fd\u7684\uff0c\u8fd9\u6837\u5c06\u6709\u5bb3\u72b6\u6001\u5411\u4e0a\u4f20\u64ad\uff0c\u8c03\u7528\u8005\u5c31\u53ef\u4ee5\u51b3\u5b9a\u8be5\u5982\u4f55\u5904\u7406\u8fd9\u4e2a\u95ee\u9898\u3002 \u4f7f\u7528 panic! \u6765\u5904\u7406\u8fd9\u4e9b\u60c5\u51b5\u5c31\u4e0d\u662f\u6700\u597d\u7684\u9009\u62e9\u3002 \u5f53\u4ee3\u7801\u5bf9\u503c\u8fdb\u884c\u64cd\u4f5c\u65f6\uff0c\u5e94\u8be5\u9996\u5148\u9a8c\u8bc1\u503c\u662f\u6709\u6548\u7684\uff0c\u5e76\u5728\u5176\u65e0\u6548\u65f6 panic! \u3002 \u8fd9\u4e3b\u8981\u662f\u51fa\u4e8e\u5b89\u5168\u7684\u539f\u56e0\uff1a\u5c1d\u8bd5\u64cd\u4f5c\u65e0\u6548\u6570\u636e\u4f1a\u66b4\u9732\u4ee3\u7801\u6f0f\u6d1e\uff0c\u8fd9\u5c31\u662f\u6807\u51c6\u5e93\u5728\u5c1d\u8bd5\u8d8a\u754c\u8bbf\u95ee\u6570\u7ec4\u65f6\u4f1a panic! \u7684\u4e3b\u8981\u539f\u56e0\uff1a\u5c1d\u8bd5\u8bbf\u95ee\u4e0d\u5c5e\u4e8e\u5f53\u524d\u6570\u636e\u7ed3\u6784\u7684\u5185\u5b58\u662f\u4e00\u4e2a\u5e38\u89c1\u7684\u5b89\u5168\u9690\u60a3\u3002 \u51fd\u6570\u901a\u5e38\u90fd\u9075\u5faa \u5951\u7ea6 \uff08contracts\uff09\uff1a \u4ed6\u4eec\u7684\u884c\u4e3a\u53ea\u6709\u5728\u8f93\u5165\u6ee1\u8db3\u7279\u5b9a\u6761\u4ef6\u65f6\u624d\u80fd\u5f97\u5230\u4fdd\u8bc1 \u3002\u5f53\u8fdd\u53cd\u5951\u7ea6\u65f6 panic \u662f\u6709\u9053\u7406\u7684\uff0c\u56e0\u4e3a\u8fd9\u901a\u5e38\u4ee3\u8868\u8c03\u7528\u65b9\u7684 bug \uff0c\u800c\u4e14\u8fd9\u4e5f\u4e0d\u662f\u90a3\u79cd\u4f60\u5e0c\u671b\u6240\u8c03\u7528\u7684\u4ee3\u7801\u5fc5\u987b\u5904\u7406\u7684\u9519\u8bef\u3002 \u4e8b\u5b9e\u4e0a\u6240\u8c03\u7528\u7684\u4ee3\u7801\u4e5f\u6ca1\u6709\u5408\u7406\u7684\u65b9\u5f0f\u6765\u6062\u590d\uff0c\u800c\u662f\u9700\u8981\u8c03\u7528\u65b9\u7684 \u7a0b\u5e8f\u5458 \u4fee\u590d\u5176\u4ee3\u7801\u3002\u51fd\u6570\u7684\u5951\u7ea6\uff0c\u5c24\u5176\u662f\u5f53\u8fdd\u53cd\u5b83\u4f1a\u9020\u6210 panic \u7684\u5951\u7ea6\uff0c\u5e94\u8be5\u5728\u51fd\u6570\u7684 API \u6587\u6863\u4e2d\u5f97\u5230\u89e3\u91ca\u3002 \u867d\u7136\u5728\u6240\u6709\u51fd\u6570\u4e2d\u90fd\u62e5\u6709\u8bb8\u591a\u9519\u8bef\u68c0\u67e5\u662f\u5197\u957f\u800c\u70e6\u4eba\u7684\u3002 \u5e78\u8fd0\u7684\u662f\uff0c\u53ef\u4ee5\u5229\u7528 Rust \u7684\u7c7b\u578b\u7cfb\u7edf\uff08\u4ee5\u53ca\u7f16\u8bd1\u5668\u7684\u7c7b\u578b\u68c0\u67e5\uff09\u4e3a\u4f60\u8fdb\u884c\u5f88\u591a\u68c0\u67e5\u3002 \u5982\u679c\u51fd\u6570\u6709\u4e00\u4e2a\u7279\u5b9a\u7c7b\u578b\u7684\u53c2\u6570\uff0c\u53ef\u4ee5\u5728\u77e5\u6653\u7f16\u8bd1\u5668\u5df2\u7ecf\u786e\u4fdd\u5176\u62e5\u6709\u4e00\u4e2a\u6709\u6548\u503c\u7684\u524d\u63d0\u4e0b\u8fdb\u884c\u4f60\u7684\u4ee3\u7801\u903b\u8f91\u3002 \u4f8b\u5982\uff0c\u5982\u679c\u4f60\u4f7f\u7528\u4e86\u4e00\u4e2a\u5e76\u4e0d\u662f Option \u7684\u7c7b\u578b\uff0c\u5219\u7a0b\u5e8f\u671f\u671b\u5b83\u662f \u6709\u503c \u7684\u5e76\u4e14\u4e0d\u662f \u7a7a\u503c , \u4f60\u7684\u4ee3\u7801\u65e0\u9700\u5904\u7406 Some \u548c None \u8fd9\u4e24\u79cd\u60c5\u51b5\uff0c\u5b83\u53ea\u4f1a\u6709\u4e00\u79cd\u60c5\u51b5\u5c31\u662f\u7edd\u5bf9\u4f1a\u6709\u4e00\u4e2a\u503c\u3002 \u5c1d\u8bd5\u5411\u51fd\u6570\u4f20\u9012\u7a7a\u503c\u7684\u4ee3\u7801\u751a\u81f3\u6839\u672c\u4e0d\u80fd\u7f16\u8bd1\uff0c\u6240\u4ee5\u4f60\u7684\u51fd\u6570\u5728\u8fd0\u884c\u65f6\u6ca1\u6709\u5fc5\u8981\u5224\u7a7a\u3002 \u53e6\u5916\u4e00\u4e2a\u4f8b\u5b50\u662f\u4f7f\u7528\u50cf u32 \u8fd9\u6837\u7684\u65e0\u7b26\u53f7\u6574\u578b\uff0c\u4e5f\u4f1a\u786e\u4fdd\u5b83\u6c38\u8fdc\u4e0d\u4e3a\u8d1f\u3002 \u521b\u5efa\u81ea\u5b9a\u4e49\u7c7b\u578b\u8fdb\u884c\u6709\u6548\u6027\u9a8c\u8bc1 \u8ba9\u6211\u4eec\u4f7f\u7528 Rust \u7c7b\u578b\u7cfb\u7edf\u7684\u601d\u60f3\u6765\u8fdb\u4e00\u6b65\u786e\u4fdd\u503c\u7684\u6709\u6548\u6027\uff0c\u5e76\u5c1d\u8bd5\u521b\u5efa\u4e00\u4e2a\u81ea\u5b9a\u4e49\u7c7b\u578b\u4ee5\u8fdb\u884c\u9a8c\u8bc1\u3002 \u56de\u5fc6\u4e00\u4e0b\u7b2c\u4e8c\u7ae0\u7684\u731c\u731c\u770b\u6e38\u620f\uff0c\u6211\u4eec\u7684\u4ee3\u7801\u8981\u6c42\u7528\u6237\u731c\u6d4b\u4e00\u4e2a 1 \u5230 100 \u4e4b\u95f4\u7684\u6570\u5b57\uff0c\u5728\u5c06\u5176\u4e0e\u79d8\u5bc6\u6570\u5b57\u505a\u6bd4\u8f83\u4e4b\u524d\u6211\u4eec\u4ece\u672a\u9a8c\u8bc1\u7528\u6237\u7684\u731c\u6d4b\u662f\u4f4d\u4e8e\u8fd9\u4e24\u4e2a\u6570\u5b57\u4e4b\u95f4\u7684\uff0c\u6211\u4eec\u53ea\u9a8c\u8bc1\u5b83\u662f\u5426\u4e3a\u6b63\u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5176\u5f71\u54cd\u5e76\u4e0d\u662f\u5f88\u4e25\u91cd\uff1a\u201cToo high\u201d \u6216 \u201cToo low\u201d \u7684\u8f93\u51fa\u4ecd\u7136\u662f\u6b63\u786e\u7684\u3002 \u4f46\u662f\u8fd9\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u5f15\u5bfc\u7528\u6237\u5f97\u51fa\u6709\u6548\u731c\u6d4b\u7684\u8f85\u52a9\uff0c\u4f8b\u5982\u5f53\u7528\u6237\u731c\u6d4b\u4e00\u4e2a\u8d85\u51fa\u8303\u56f4\u7684\u6570\u5b57\u6216\u8005\u8f93\u5165\u5b57\u6bcd\u65f6\u91c7\u53d6\u4e0d\u540c\u7684\u884c\u4e3a\u3002 \u4e00\u79cd\u5b9e\u73b0\u65b9\u5f0f\u662f\u5c06\u731c\u6d4b\u89e3\u6790\u6210 i32 \u800c\u4e0d\u4ec5\u4ec5\u662f u32 \uff0c\u6765\u9ed8\u8bb8\u8f93\u5165\u8d1f\u6570\uff0c\u63a5\u7740\u68c0\u67e5\u6570\u5b57\u662f\u5426\u5728\u8303\u56f4\u5185\uff1a loop { // --snip-- let guess : i32 = match guess . trim (). parse () { Ok ( num ) => num , Err ( _ ) => continue , }; // if \u8868\u8fbe\u5f0f\u68c0\u67e5\u4e86\u503c\u662f\u5426\u8d85\u51fa\u8303\u56f4\uff0c\u544a\u8bc9\u7528\u6237\u51fa\u4e86\u4ec0\u4e48\u95ee\u9898\uff0c\u5e76\u8c03\u7528 continue \u5f00\u59cb\u4e0b\u4e00\u6b21\u5faa\u73af\uff0c\u8bf7\u6c42\u53e6\u4e00\u4e2a\u731c\u6d4b\u3002 // if \u8868\u8fbe\u5f0f\u4e4b\u540e\uff0c\u5c31\u53ef\u4ee5\u5728\u77e5\u9053 guess \u5728 1 \u5230 100 \u4e4b\u95f4\u7684\u60c5\u51b5\u4e0b\u4e0e\u79d8\u5bc6\u6570\u5b57\u4f5c\u6bd4\u8f83\u4e86\u3002 if guess < 1 || guess > 100 { println! ( \"The secret number will be between 1 and 100.\" ); continue ; } match guess . cmp ( & secret_number ) { // --snip-- } \u7136\u800c\uff0c\u8fd9\u5e76\u4e0d\u662f\u4e00\u4e2a\u7406\u60f3\u7684\u89e3\u51b3\u65b9\u6848\uff1a\u5982\u679c\u8ba9\u7a0b\u5e8f\u4ec5\u4ec5\u5904\u7406 1 \u5230 100 \u4e4b\u95f4\u7684\u503c\u662f\u4e00\u4e2a\u7edd\u5bf9\u9700\u8981\u6ee1\u8db3\u7684\u8981\u6c42\uff0c\u800c\u4e14\u7a0b\u5e8f\u4e2d\u7684\u5f88\u591a\u51fd\u6570\u90fd\u6709\u8fd9\u6837\u7684\u8981\u6c42\uff0c \u5728\u6bcf\u4e2a\u51fd\u6570\u4e2d\u90fd\u6709\u8fd9\u6837\u7684\u68c0\u67e5\u5c06\u662f\u975e\u5e38\u5197\u4f59\u7684 \uff08\u5e76\u53ef\u80fd\u6f5c\u5728\u7684\u5f71\u54cd\u6027\u80fd\uff09\u3002 \u76f8\u53cd\u6211\u4eec\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u65b0\u7c7b\u578b\u6765\u5c06\u9a8c\u8bc1\u653e\u5165\u521b\u5efa\u5176\u5b9e\u4f8b\u7684\u51fd\u6570\u4e2d\uff0c\u800c\u4e0d\u662f\u5230\u5904\u91cd\u590d\u8fd9\u4e9b\u68c0\u67e5\u3002\u8fd9\u6837\u5c31\u53ef\u4ee5\u5b89\u5168\u7684\u5728\u51fd\u6570\u7b7e\u540d\u4e2d\u4f7f\u7528\u65b0\u7c7b\u578b\u5e76\u76f8\u4fe1\u4ed6\u4eec\u63a5\u6536\u5230\u7684\u503c\u3002 \u4e0b\u9762\u793a\u4f8b\u4e2d\u5c55\u793a\u4e86\u4e00\u4e2a\u5b9a\u4e49 Guess \u7c7b\u578b\u7684\u65b9\u6cd5\uff0c\u53ea\u6709\u5728 new \u51fd\u6570\u63a5\u6536\u5230 1 \u5230 100 \u4e4b\u95f4\u7684\u503c\u65f6\u624d\u4f1a\u521b\u5efa Guess \u7684\u5b9e\u4f8b\uff1a // \u4e00\u4e2a Guess \u7c7b\u578b\uff0c\u5b83\u53ea\u5728\u503c\u4f4d\u4e8e 1 \u548c 100 \u4e4b\u95f4\u65f6\u624d\u7ee7\u7eed // \u9996\u5148\uff0c\u5b9a\u4e49\u4e86\u4e00\u4e2a\u5305\u542b i32 \u7c7b\u578b\u5b57\u6bb5 value \u7684\u7ed3\u6784\u4f53 Guess\u3002\u8fd9\u91cc\u662f\u50a8\u5b58\u731c\u6d4b\u503c\u7684\u5730\u65b9\u3002 pub struct Guess { value : i32 , } impl Guess { // \u63a5\u7740\u5728 Guess \u4e0a\u5b9e\u73b0\u4e86\u4e00\u4e2a\u53eb\u505a new \u7684\u5173\u8054\u51fd\u6570\u6765\u521b\u5efa Guess \u7684\u5b9e\u4f8b\u3002 // new \u5b9a\u4e49\u4e3a\u63a5\u6536\u4e00\u4e2a i32 \u7c7b\u578b\u7684\u53c2\u6570 value \u5e76\u8fd4\u56de\u4e00\u4e2a Guess\u3002 pub fn new ( value : i32 ) -> Guess { // new \u51fd\u6570\u4e2d\u4ee3\u7801\u7684\u6d4b\u8bd5\u786e\u4fdd\u4e86\u5176\u503c\u662f\u5728 1 \u5230 100 \u4e4b\u95f4\u7684\u3002 if value < 1 || value > 100 { // \u5982\u679c value \u6ca1\u6709\u901a\u8fc7\u6d4b\u8bd5\u5219\u8c03\u7528 panic!\uff0c\u8fd9\u4f1a\u8b66\u544a\u8c03\u7528\u8fd9\u4e2a\u51fd\u6570\u7684\u7a0b\u5e8f\u5458\u6709\u4e00\u4e2a\u9700\u8981\u4fee\u6539\u7684 bug\uff0c // \u56e0\u4e3a\u521b\u5efa\u4e00\u4e2a value \u8d85\u51fa\u8303\u56f4\u7684 Guess \u5c06\u4f1a\u8fdd\u53cd Guess::new \u6240\u9075\u5faa\u7684\u5951\u7ea6\u3002 // Guess::new \u4f1a\u51fa\u73b0 panic \u7684\u6761\u4ef6\u5e94\u8be5\u5728\u5176\u516c\u6709 API \u6587\u6863\u4e2d\u88ab\u63d0\u53ca\uff1b panic! ( \"Guess value must be between 1 and 100, got {}.\" , value ); } // \u5982\u679c value \u901a\u8fc7\u4e86\u6d4b\u8bd5\uff0c\u6211\u4eec\u65b0\u5efa\u4e00\u4e2a Guess\uff0c\u5176\u5b57\u6bb5 value \u5c06\u88ab\u8bbe\u7f6e\u4e3a\u53c2\u6570 value \u7684\u503c\uff0c\u63a5\u7740\u8fd4\u56de\u8fd9\u4e2a Guess\u3002 Guess { value } } // \u63a5\u7740, \u5b9e\u73b0\u4e86\u4e00\u4e2a\u501f\u7528\u4e86 self \u7684\u65b9\u6cd5 value\uff0c\u5b83\u6ca1\u6709\u4efb\u4f55\u5176\u4ed6\u53c2\u6570\u5e76\u8fd4\u56de\u4e00\u4e2a i32\u3002 // \u8fd9\u7c7b\u65b9\u6cd5\u6709\u65f6\u88ab\u79f0\u4e3a getter\uff0c\u56e0\u4e3a\u5b83\u7684\u76ee\u7684\u5c31\u662f\u8fd4\u56de\u5bf9\u5e94\u5b57\u6bb5\u7684\u6570\u636e\u3002 // \u8fd9\u6837\u7684\u516c\u6709\u65b9\u6cd5\u662f\u5fc5\u8981\u7684\uff0c\u56e0\u4e3a Guess \u7ed3\u6784\u4f53\u7684 value \u5b57\u6bb5\u662f\u79c1\u6709\u7684\u3002 pub fn value ( & self ) -> i32 { self . value } } \u79c1\u6709\u7684\u5b57\u6bb5 value \u662f\u5f88\u91cd\u8981\u7684\uff0c\u8fd9\u6837\u4f7f\u7528 Guess \u7ed3\u6784\u4f53\u7684\u4ee3\u7801\u5c06\u4e0d\u5141\u8bb8\u76f4\u63a5\u8bbe\u7f6e value \u7684\u503c\uff1a\u8c03\u7528\u8005 \u5fc5\u987b \u4f7f\u7528 Guess::new \u65b9\u6cd5\u6765\u521b\u5efa\u4e00\u4e2a Guess \u7684\u5b9e\u4f8b\uff0c\u8fd9\u5c31\u786e\u4fdd\u4e86\u4e0d\u4f1a\u5b58\u5728\u4e00\u4e2a value \u6ca1\u6709\u901a\u8fc7 Guess::new \u51fd\u6570\u7684\u6761\u4ef6\u68c0\u67e5\u7684 Guess\u3002 \u4e8e\u662f\uff0c\u4e00\u4e2a\u63a5\u6536\uff08\u6216\u8fd4\u56de\uff09 1 \u5230 100 \u4e4b\u95f4\u6570\u5b57\u7684\u51fd\u6570\u5c31\u53ef\u4ee5\u58f0\u660e\u4e3a\u63a5\u6536\uff08\u6216\u8fd4\u56de\uff09 Guess \u7684\u5b9e\u4f8b\uff0c\u800c\u4e0d\u662f i32 \uff0c\u540c\u65f6\u5176\u51fd\u6570\u4f53\u4e2d\u4e5f\u65e0\u9700\u8fdb\u884c\u4efb\u4f55\u989d\u5916\u7684\u68c0\u67e5\u3002 \u603b\u7ed3 Rust \u7684\u9519\u8bef\u5904\u7406\u529f\u80fd\u88ab\u8bbe\u8ba1\u4e3a\u5e2e\u52a9\u4f60\u7f16\u5199\u66f4\u52a0\u5065\u58ee\u7684\u4ee3\u7801\u3002 panic! \u5b8f\u4ee3\u8868\u4e00\u4e2a\u7a0b\u5e8f\u65e0\u6cd5\u5904\u7406\u7684\u72b6\u6001\uff0c\u5e76\u505c\u6b62\u6267\u884c\u800c\u4e0d\u662f\u4f7f\u7528\u65e0\u6548\u6216\u4e0d\u6b63\u786e\u7684\u503c\u7ee7\u7eed\u5904\u7406\u3002 Rust \u7c7b\u578b\u7cfb\u7edf\u7684 Result \u679a\u4e3e\u4ee3\u8868\u64cd\u4f5c\u53ef\u80fd\u4f1a\u5728\u4e00\u79cd\u53ef\u4ee5\u6062\u590d\u7684\u60c5\u51b5\u4e0b\u5931\u8d25\u3002 \u53ef\u4ee5\u4f7f\u7528 Result \u6765\u544a\u8bc9\u4ee3\u7801\u8c03\u7528\u8005\u4ed6\u9700\u8981\u5904\u7406\u6f5c\u5728\u7684\u6210\u529f\u6216\u5931\u8d25\u3002 \u5728\u9002\u5f53\u7684\u573a\u666f\u4f7f\u7528 panic! \u548c Result \u5c06\u4f1a\u4f7f\u4f60\u7684\u4ee3\u7801\u5728\u9762\u5bf9\u4e0d\u53ef\u907f\u514d\u7684\u9519\u8bef\u65f6\u663e\u5f97\u66f4\u52a0\u53ef\u9760\u3002","title":"\u9519\u8bef\u5904\u7406"},{"location":"error-handing/#_1","text":"\u9519\u8bef\u662f\u8f6f\u4ef6\u4e2d\u4e0d\u53ef\u5426\u8ba4\u7684\u4e8b\u5b9e\uff0c\u6240\u4ee5 Rust \u6709\u4e00\u4e9b\u5904\u7406\u51fa\u9519\u60c5\u51b5\u7684\u7279\u6027\u3002 \u5728\u8bb8\u591a\u60c5\u51b5\u4e0b\uff0cRust \u8981\u6c42\u4f60\u627f\u8ba4\u9519\u8bef\u7684\u53ef\u80fd\u6027\uff0c\u5e76\u5728\u4ee3\u7801\u7f16\u8bd1\u524d\u91c7\u53d6\u4e00\u4e9b\u884c\u52a8\u3002 \u8fd9\u4e00\u8981\u6c42\u4f7f\u4f60\u7684\u7a0b\u5e8f\u66f4\u52a0\u5065\u58ee\uff0c\u56e0\u4e3a\u5b83\u53ef\u4ee5\u786e\u4fdd\u4f60\u5728\u5c06\u4ee3\u7801\u90e8\u7f72\u5230\u751f\u4ea7\u73af\u5883\u4e4b\u524d\u5c31\u80fd\u53d1\u73b0\u9519\u8bef\u5e76\u8fdb\u884c\u9002\u5f53\u7684\u5904\u7406\u3002 Rust \u5c06\u9519\u8bef\u5206\u4e3a\u4e24\u5927\u7c7b\uff1a \u53ef\u6062\u590d\u7684 \uff08recoverable\uff09\u548c \u4e0d\u53ef\u6062\u590d\u7684 \uff08unrecoverable\uff09\u9519\u8bef\u3002\u5bf9\u4e8e\u4e00\u4e2a\u53ef\u6062\u590d\u7684\u9519\u8bef\uff0c\u6bd4\u5982\u6587\u4ef6\u672a\u627e\u5230\u7684\u9519\u8bef\uff0c\u5f88\u53ef\u80fd\u53ea\u60f3\u5411\u7528\u6237\u62a5\u544a\u95ee\u9898\u5e76\u91cd\u8bd5\u64cd\u4f5c\u3002\u4e0d\u53ef\u6062\u590d\u7684\u9519\u8bef\u603b\u662f bug \u51fa\u73b0\u7684\u5f81\u5146\uff0c\u6bd4\u5982\u8bd5\u56fe\u8bbf\u95ee\u4e00\u4e2a\u8d85\u8fc7\u6570\u7ec4\u672b\u7aef\u7684\u4f4d\u7f6e\uff0c\u56e0\u6b64\u6211\u4eec\u8981\u7acb\u5373\u505c\u6b62\u7a0b\u5e8f\u3002 \u5927\u591a\u6570\u8bed\u8a00\u5e76\u4e0d\u533a\u5206\u8fd9\u4e24\u79cd\u9519\u8bef\uff0c\u5e76\u91c7\u7528\u7c7b\u4f3c\u5f02\u5e38\u8fd9\u6837\u65b9\u5f0f\u7edf\u4e00\u5904\u7406\u4ed6\u4eec\u3002Rust \u6ca1\u6709\u5f02\u5e38\u3002\u76f8\u53cd\uff0c\u5b83\u6709 Result<T, E> \u7c7b\u578b\uff0c\u7528\u4e8e\u5904\u7406\u53ef\u6062\u590d\u7684\u9519\u8bef\uff0c\u8fd8\u6709 panic! \u5b8f\uff0c\u5728\u7a0b\u5e8f\u9047\u5230\u4e0d\u53ef\u6062\u590d\u7684\u9519\u8bef\u65f6\u505c\u6b62\u6267\u884c\u3002","title":"\u9519\u8bef\u5904\u7406"},{"location":"error-handing/#panic","text":"\u7a81\u7136\u6709\u4e00\u5929\uff0c\u4ee3\u7801\u51fa\u95ee\u9898\u4e86\uff0c\u800c\u4f60\u5bf9\u6b64\u675f\u624b\u65e0\u7b56\u3002\u5bf9\u4e8e\u8fd9\u79cd\u60c5\u51b5\uff0c Rust \u6709 panic! \u5b8f\u3002\u5f53\u6267\u884c\u8fd9\u4e2a\u5b8f\u65f6\uff0c\u7a0b\u5e8f\u4f1a \u6253\u5370\u51fa\u4e00\u4e2a\u9519\u8bef\u4fe1\u606f\uff0c\u5c55\u5f00\u5e76\u6e05\u7406\u6808\u6570\u636e \uff0c\u7136\u540e\u63a5\u7740\u9000\u51fa\u3002 \u51fa\u73b0\u8fd9\u79cd\u60c5\u51b5\u7684\u573a\u666f\u901a\u5e38\u662f\u68c0\u6d4b\u5230\u4e00\u4e9b\u7c7b\u578b\u7684 bug \uff0c\u800c\u4e14\u7a0b\u5e8f\u5458\u5e76\u4e0d\u6e05\u695a\u8be5\u5982\u4f55\u5904\u7406\u5b83\u3002 \u5bf9\u5e94 panic \u65f6\u7684\u6808\u5c55\u5f00\u6216\u7ec8\u6b62 \u5f53\u51fa\u73b0 panic \u65f6\uff0c\u7a0b\u5e8f\u9ed8\u8ba4\u4f1a\u5f00\u59cb \u5c55\u5f00 \uff08unwinding\uff09\uff0c\u8fd9\u610f\u5473\u7740 Rust \u4f1a\u56de\u6eaf\u6808\u5e76\u6e05\u7406\u5b83\u9047\u5230\u7684\u6bcf\u4e00\u4e2a\u51fd\u6570\u7684\u6570\u636e\uff0c\u4e0d\u8fc7\u8fd9\u4e2a\u56de\u6eaf\u5e76\u6e05\u7406\u7684\u8fc7\u7a0b\u6709\u5f88\u591a\u5de5\u4f5c\u3002 \u53e6\u4e00\u79cd\u9009\u62e9\u662f\u76f4\u63a5 \u7ec8\u6b62 \uff08abort\uff09\uff0c\u8fd9\u4f1a\u4e0d\u6e05\u7406\u6570\u636e\u5c31\u9000\u51fa\u7a0b\u5e8f\u3002\u90a3\u4e48\u7a0b\u5e8f\u6240\u4f7f\u7528\u7684\u5185\u5b58\u9700\u8981\u7531\u64cd\u4f5c\u7cfb\u7edf\u6765\u6e05\u7406\u3002 \u5982\u679c\u4f60\u9700\u8981\u9879\u76ee\u7684\u6700\u7ec8\u4e8c\u8fdb\u5236\u6587\u4ef6\u8d8a\u5c0f\u8d8a\u597d\uff0c panic \u65f6\u901a\u8fc7\u5728 Cargo.toml \u7684 [profile] \u90e8\u5206\u589e\u52a0 panic = 'abort' \uff0c\u53ef\u4ee5\u7531\u5c55\u5f00\u5207\u6362\u4e3a \u7ec8\u6b62 \u3002 \u4f8b\u5982\uff0c\u5982\u679c\u4f60\u60f3\u8981\u5728 release \u6a21\u5f0f\u4e2d panic \u65f6\u76f4\u63a5\u7ec8\u6b62\uff1a [profile.release] panic = 'abort' fn main () { // \u8c03\u7528 panic! panic! ( \"crash and burn\" ); } \u5c06\u4f1a\u51fa\u73b0\u7c7b\u4f3c\u8fd9\u6837\u7684\u8f93\u51fa\uff1a $ cargo run Compiling panic v0.1.0 ( file:///projects/panic ) Finished dev [ unoptimized + debuginfo ] target ( s ) in 0 .25s Running ` target/debug/panic ` thread 'main' panicked at 'crash and burn' , src/main.rs:2:5 note: run with ` RUST_BACKTRACE = 1 ` environment variable to display a backtrace # \u7b2c\u4e00\u884c\u663e\u793a\u4e86 panic \u63d0\u4f9b\u7684\u4fe1\u606f\u5e76\u6307\u660e\u4e86\u6e90\u7801\u4e2d panic \u51fa\u73b0\u7684\u4f4d\u7f6e\uff1asrc/main.rs:2:5 \u8868\u660e\u8fd9\u662f src/main.rs \u6587\u4ef6\u7684\u7b2c\u4e8c\u884c\u7b2c\u4e94\u4e2a\u5b57\u7b26\u3002 \u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u88ab\u6307\u660e\u7684\u90a3\u4e00\u884c\u662f\u6211\u4eec\u4ee3\u7801\u7684\u4e00\u90e8\u5206\uff0c\u800c\u4e14\u67e5\u770b\u8fd9\u4e00\u884c\u7684\u8bdd\u5c31\u4f1a\u53d1\u73b0 panic! \u5b8f\u7684\u8c03\u7528\u3002 \u5728\u5176\u4ed6\u60c5\u51b5\u4e0b\uff0c panic! \u53ef\u80fd\u4f1a\u51fa\u73b0\u5728\u6211\u4eec\u7684\u4ee3\u7801\u6240\u8c03\u7528\u7684\u4ee3\u7801\u4e2d\u3002 \u9519\u8bef\u4fe1\u606f\u62a5\u544a\u7684\u6587\u4ef6\u540d\u548c\u884c\u53f7\u53ef\u80fd\u6307\u5411\u522b\u4eba\u4ee3\u7801\u4e2d\u7684 panic! \u5b8f\u8c03\u7528\uff0c\u800c\u4e0d\u662f\u6211\u4eec\u4ee3\u7801\u4e2d\u6700\u7ec8\u5bfc\u81f4 panic! \u7684\u90a3\u4e00\u884c\u3002 \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 panic! \u88ab\u8c03\u7528\u7684\u51fd\u6570\u7684 backtrace \u6765\u5bfb\u627e\u4ee3\u7801\u4e2d\u51fa\u95ee\u9898\u7684\u5730\u65b9\u3002\u4e0b\u9762\u6211\u4eec\u4f1a\u8be6\u7ec6\u4ecb\u7ecd backtrace \u662f\u4ec0\u4e48\u3002","title":"\u4e0d\u53ef\u6062\u590d\u7684\u9519\u8bef(panic!)"},{"location":"error-handing/#panic-backtrace","text":"\u53e6\u4e00\u4e2a\u56e0\u4e3a\u4ee3\u7801\u4e2d\u7684 bug \u5f15\u8d77\u7684\u522b\u7684\u5e93\u4e2d panic! \u7684\u4f8b\u5b50\uff0c\u800c\u4e0d\u662f\u76f4\u63a5\u7684\u5b8f\u8c03\u7528. // \u5c1d\u8bd5\u8bbf\u95ee\u8d85\u8d8a vector \u7ed3\u5c3e\u7684\u5143\u7d20\uff0c\u8fd9\u4f1a\u9020\u6210 panic! fn main () { let v = vec! [ 1 , 2 , 3 ]; // \u5c1d\u8bd5\u8bbf\u95ee vector \u7684\u7b2c\u4e00\u767e\u4e2a\u5143\u7d20, \u5b9e\u9645\u53ea\u67093\u4e2a\u3002 // \u8fd9\u79cd\u60c5\u51b5\u4e0b Rust \u4f1a panic\u3002 v [ 99 ]; } C \u8bed\u8a00\u4e2d\uff0c\u5c1d\u8bd5\u8bfb\u53d6\u6570\u636e\u7ed3\u6784\u4e4b\u540e\u7684\u503c\u662f \u672a\u5b9a\u4e49\u884c\u4e3a \uff08undefined behavior\uff09\u3002 \u4f60 \u4f1a\u5f97\u5230\u4efb\u4f55\u5bf9\u5e94\u6570\u636e\u7ed3\u6784\u4e2d\u8fd9\u4e2a\u5143\u7d20\u7684\u5185\u5b58\u4f4d\u7f6e\u7684\u503c\uff0c\u751a\u81f3\u662f\u8fd9\u4e9b\u5185\u5b58\u5e76\u4e0d\u5c5e\u4e8e\u8fd9\u4e2a\u6570\u636e\u7ed3\u6784\u7684\u60c5\u51b5\u3002 \u8fd9\u88ab\u79f0\u4e3a \u7f13\u51b2\u533a\u6ea2\u51fa \uff08buffer overread\uff09\uff0c\u5e76\u53ef\u80fd\u4f1a\u5bfc\u81f4 \u5b89\u5168\u6f0f\u6d1e \uff0c\u6bd4\u5982\u653b\u51fb\u8005\u53ef\u4ee5\u50cf\u8fd9\u6837\u64cd\u4f5c\u7d22\u5f15\u6765\u8bfb\u53d6\u50a8\u5b58\u5728\u6570\u636e\u7ed3\u6784\u4e4b\u540e\u4e0d\u88ab\u5141\u8bb8\u7684\u6570\u636e\u3002 \u4e3a\u4e86\u4fdd\u62a4\u7a0b\u5e8f\u8fdc\u79bb\u8fd9\u7c7b\u6f0f\u6d1e\uff0c\u5982\u679c\u5c1d\u8bd5\u8bfb\u53d6\u4e00\u4e2a\u7d22\u5f15\u4e0d\u5b58\u5728\u7684\u5143\u7d20\uff0cRust \u4f1a\u505c\u6b62\u6267\u884c\u5e76\u62d2\u7edd\u7ee7\u7eed\u3002 # \u5c1d\u8bd5\u8fd0\u884c\u4e0a\u9762\u7684\u7a0b\u5e8f\u4f1a\u51fa\u73b0\u5982\u4e0b\uff1a $ cargo run Compiling panic v0.1.0 ( file:///projects/panic ) Finished dev [ unoptimized + debuginfo ] target ( s ) in 0 .27s Running ` target/debug/panic ` thread 'main' panicked at 'index out of bounds: the len is 3 but the index is 99' , src/main.rs:4:5 # \u9519\u8bef\u6307\u5411 main.rs \u7684\u7b2c 4 \u884c\uff0c note: run with ` RUST_BACKTRACE = 1 ` environment variable to display a backtrace # \u4e0b\u9762\u7684\u8bf4\u660e\uff08note\uff09\u884c\u63d0\u9192\u6211\u4eec\u53ef\u4ee5\u8bbe\u7f6e RUST_BACKTRACE \u73af\u5883\u53d8\u91cf\u6765\u5f97\u5230\u4e00\u4e2a backtrace\u3002 backtrace \u662f\u4e00\u4e2a\u6267\u884c\u5230\u76ee\u524d\u4f4d\u7f6e\u6240\u6709\u88ab\u8c03\u7528\u7684\u51fd\u6570\u7684\u5217\u8868\u3002Rust \u7684 backtrace \u8ddf\u5176\u4ed6\u8bed\u8a00\u4e2d\u7684\u4e00\u6837\uff1a \u9605\u8bfb backtrace \u7684\u5173\u952e\u662f\u4ece\u5934\u5f00\u59cb\u8bfb\u76f4\u5230\u53d1\u73b0\u4f60\u7f16\u5199\u7684\u6587\u4ef6\u3002 \u8fd9\u5c31\u662f\u95ee\u9898\u7684\u53d1\u6e90\u5730\u3002\u8fd9\u4e00\u884c\u5f80\u4e0a\u662f\u4f60\u7684\u4ee3\u7801\u6240\u8c03\u7528\u7684\u4ee3\u7801\uff1b\u5f80\u4e0b\u5219\u662f\u8c03\u7528\u4f60\u7684\u4ee3\u7801\u7684\u4ee3\u7801\u3002\u8fd9\u4e9b\u884c\u53ef\u80fd\u5305\u542b\u6838\u5fc3 Rust \u4ee3\u7801\uff0c\u6807\u51c6\u5e93\u4ee3\u7801\u6216\u7528\u5230\u7684 crate \u4ee3\u7801\u3002 \u5c06 RUST_BACKTRACE \u73af\u5883\u53d8\u91cf\u8bbe\u7f6e\u4e3a\u4efb\u4f55\u4e0d\u662f 0 \u7684\u503c\u6765\u83b7\u53d6 backtrace \u770b\u770b\u3002 $ RUST_BACKTRACE = 1 cargo run thread ' main ' panicked at ' index out of bounds : the len is 3 but the index is 99 ' , src / main . rs : 4 : 5 stack backtrace : 0 : rust_begin_unwind at / rustc / 7 eac88abb2e57e752f3302f02be5f3ce3d7adfb4 / library / std / src / panicking . rs : 483 1 : core :: panicking :: panic_fmt at / rustc / 7 eac88abb2e57e752f3302f02be5f3ce3d7adfb4 / library / core / src / panicking . rs : 85 2 : core :: panicking :: panic_bounds_check at / rustc / 7 eac88abb2e57e752f3302f02be5f3ce3d7adfb4 / library / core / src / panicking . rs : 62 3 : < usize as core :: slice :: index :: SliceIndex < [ T ] >> :: index at / rustc / 7 eac88abb2e57e752f3302f02be5f3ce3d7adfb4 / library / core / src / slice / index . rs : 255 4 : core :: slice :: index :: < impl core :: ops :: index :: Index < I > for [ T ] > :: index at / rustc / 7 eac88abb2e57e752f3302f02be5f3ce3d7adfb4 / library / core / src / slice / index . rs : 15 5 : < alloc :: vec :: Vec < T > as core :: ops :: index :: Index < I >> :: index at / rustc / 7 eac88abb2e57e752f3302f02be5f3ce3d7adfb4 / library / alloc / src / vec . rs : 1982 6 : panic :: main at . / src / main . rs : 4 7 : core :: ops :: function :: FnOnce :: call_once at / rustc / 7 eac88abb2e57e752f3302f02be5f3ce3d7adfb4 / library / core / src / ops / function . rs : 227 note : Some details are omitted , run with ` RUST_BACKTRACE = full ` for a verbose backtrace . \u8fd9\u91cc\u6709\u5927\u91cf\u7684\u8f93\u51fa\uff01 \u5b9e\u9645\u770b\u5230\u7684\u8f93\u51fa\u53ef\u80fd\u56e0\u4e0d\u540c\u7684\u64cd\u4f5c\u7cfb\u7edf\u548c Rust \u7248\u672c\u800c\u6709\u6240\u4e0d\u540c \u3002\u4e3a\u4e86\u83b7\u53d6\u5e26\u6709\u8fd9\u4e9b\u4fe1\u606f\u7684 backtrace \uff0c\u5fc5\u987b\u542f\u7528 debug \u6807\u8bc6\u3002\u5f53\u4e0d\u4f7f\u7528 --release \u53c2\u6570\u8fd0\u884c cargo build \u6216 cargo run \u65f6 debug \u6807\u8bc6\u4f1a\u9ed8\u8ba4\u542f\u7528\uff0c\u5c31\u50cf\u8fd9\u91cc\u4e00\u6837\u3002 \u793a\u4f8b\u7684\u8f93\u51fa\u4e2d\uff0cbacktrace \u7684 12 \u884c\u6307\u5411\u4e86\u6211\u4eec\u9879\u76ee\u4e2d\u9020\u6210\u95ee\u9898\u7684\u884c\uff1a src/main.rs \u7684\u7b2c 4 \u884c\u3002\u5982\u679c\u4e0d\u5e0c\u671b\u7a0b\u5e8f panic \uff0c\u7b2c\u4e00\u4e2a\u63d0\u5230\u6211\u4eec\u7f16\u5199\u7684\u4ee3\u7801\u884c\u7684\u4f4d\u7f6e\u662f\u4f60\u5e94\u8be5\u5f00\u59cb\u8c03\u67e5\u7684\uff0c\u4ee5\u4fbf\u67e5\u660e\u662f\u4ec0\u4e48\u503c\u5982\u4f55\u5728\u8fd9\u4e2a\u5730\u65b9\u5f15\u8d77\u4e86 panic \u3002 \u5728\u793a\u4f8b\u4e2d\uff0c\u6545\u610f\u7f16\u5199\u4f1a panic \u7684\u4ee3\u7801\u6765\u6f14\u793a\u5982\u4f55\u4f7f\u7528 backtrace \uff0c\u4fee\u590d\u8fd9\u4e2a panic \u7684\u65b9\u6cd5\u5c31\u662f\u4e0d\u8981\u5c1d\u8bd5\u5728\u4e00\u4e2a\u53ea\u5305\u542b\u4e09\u4e2a\u9879\u7684 vector \u4e2d\u8bf7\u6c42\u7d22\u5f15\u662f 100 \u7684\u5143\u7d20\u3002 \u5f53\u5c06\u6765\u4f60\u7684\u4ee3\u7801\u51fa\u73b0\u4e86 panic \uff0c\u4f60\u9700\u8981\u641e\u6e05\u695a\u5728\u8fd9\u7279\u5b9a\u7684\u573a\u666f\u4e0b\u4ee3\u7801\u4e2d\u6267\u884c\u4e86\u4ec0\u4e48\u64cd\u4f5c\u548c\u4ec0\u4e48\u503c\u5bfc\u81f4\u4e86 panic \uff0c\u4ee5\u53ca\u5e94\u5f53\u5982\u4f55\u5904\u7406\u624d\u80fd\u907f\u514d\u8fd9\u4e2a\u95ee\u9898\u3002","title":"\u4f7f\u7528 panic! \u7684 backtrace"},{"location":"error-handing/#result","text":"\u5927\u90e8\u5206\u9519\u8bef\u5e76\u6ca1\u6709\u4e25\u91cd\u5230\u9700\u8981\u7a0b\u5e8f\u5b8c\u5168\u505c\u6b62\u6267\u884c \u3002\u6709\u65f6\uff0c\u4e00\u4e2a\u51fd\u6570\u4f1a\u56e0\u4e3a\u4e00\u4e2a\u5bb9\u6613\u7406\u89e3\u5e76\u505a\u51fa\u53cd\u5e94\u7684\u539f\u56e0\u5931\u8d25\u3002 \u4f8b\u5982\uff0c\u5982\u679c\u56e0\u4e3a\u6253\u5f00\u4e00\u4e2a\u5e76\u4e0d\u5b58\u5728\u7684\u6587\u4ef6\u800c\u5931\u8d25\uff0c\u6b64\u65f6\u6211\u4eec\u53ef\u80fd\u60f3\u8981\u521b\u5efa\u8fd9\u4e2a\u6587\u4ef6\uff0c\u800c\u4e0d\u662f\u7ec8\u6b62\u8fdb\u7a0b\u3002 \u7b2c\u4e8c\u7ae0 \u201c \u4f7f\u7528 Result \u7c7b\u578b\u6765\u5904\u7406\u6f5c\u5728\u7684\u9519\u8bef \u201d \u90e8\u5206\u4e2d\u7684\u90a3\u4e2a Result \u679a\u4e3e\uff0c\u5b83\u5b9a\u4e49\u6709\u5982\u4e0b\u4e24\u4e2a\u6210\u5458\uff0c Ok \u548c Err \uff1a // T \u548c E \u662f\u6cdb\u578b\u7c7b\u578b\u53c2\u6570 enum Result < T , E > { Ok ( T ), // T \u4ee3\u8868\u6210\u529f\u65f6\u8fd4\u56de\u7684 Ok \u6210\u5458\u4e2d\u7684\u6570\u636e\u7684\u7c7b\u578b\uff0c Err ( E ), // \u800c E \u4ee3\u8868\u5931\u8d25\u65f6\u8fd4\u56de\u7684 Err \u6210\u5458\u4e2d\u7684\u9519\u8bef\u7684\u7c7b\u578b\u3002 } \u56e0\u4e3a Result \u6709\u8fd9\u4e9b\u6cdb\u578b\u7c7b\u578b\u53c2\u6570\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06 Result \u7c7b\u578b\u548c\u6807\u51c6\u5e93\u4e2d\u4e3a\u5176\u5b9a\u4e49\u7684\u51fd\u6570\u7528\u4e8e\u5f88\u591a\u4e0d\u540c\u7684\u573a\u666f\uff0c\u8fd9\u4e9b\u60c5\u51b5\u4e2d\u9700\u8981\u8fd4\u56de\u7684\u6210\u529f\u503c\u548c\u5931\u8d25\u503c\u53ef\u80fd\u4f1a\u5404\u4e0d\u76f8\u540c\u3002 \u8c03\u7528\u4e00\u4e2a\u8fd4\u56de Result \u7684\u51fd\u6570\uff0c\u56e0\u4e3a\u5b83\u53ef\u80fd\u4f1a\u5931\u8d25\uff1a use std :: fs :: File ; fn main () { // \u6253\u5f00\u6587\u4ef6 let f = File :: open ( \"hello.txt\" ); } \u5982\u4f55\u77e5\u9053 File::open \u8fd4\u56de\u4e00\u4e2a Result \u5462\uff1f\u6211\u4eec\u53ef\u4ee5\u67e5\u770b \u6807\u51c6\u5e93 API \u6587\u6863\uff0c\u6216\u8005\u53ef\u4ee5\u76f4\u63a5\u95ee\u7f16\u8bd1\u5668\uff01 \u5982\u679c\u7ed9 f \u67d0\u4e2a\u6211\u4eec\u77e5\u9053 \u4e0d\u662f \u51fd\u6570\u8fd4\u56de\u503c\u7c7b\u578b\u7684\u7c7b\u578b\u6ce8\u89e3\uff0c\u63a5\u7740\u5c1d\u8bd5\u7f16\u8bd1\u4ee3\u7801\uff0c\u7f16\u8bd1\u5668\u4f1a\u544a\u8bc9\u6211\u4eec\u7c7b\u578b\u4e0d\u5339\u914d\u3002 \u7136\u540e\u9519\u8bef\u4fe1\u606f\u4f1a\u544a\u8bc9\u6211\u4eec f \u7684\u7c7b\u578b \u5e94\u8be5 \u662f\u4ec0\u4e48\u3002 \u8bd5\u8bd5\uff01\u77e5\u9053 File::open \u7684\u8fd4\u56de\u503c\u4e0d\u662f u32 \u7c7b\u578b\u7684\uff0c\u6240\u4ee5\u5c06 let f \u8bed\u53e5\u6539\u4e3a\u5982\u4e0b\uff1a let f : u32 = File :: open ( \"hello.txt\" ); $ cargo run Compiling error-handling v0.1.0 ( file:///projects/error-handling ) error [ E0308 ] : mismatched types --> src/main.rs:4:18 | 4 | let f: u32 = File::open ( \"hello.txt\" ) ; | --- ^^^^^^^^^^^^^^^^^^^^^^^ expected ` u32 ` , found enum ` Result ` | | | expected due to this | = note: expected type ` u32 ` found enum ` Result<File, std::io::Error> ` For more information about this error, try ` rustc --explain E0308 ` . error: could not compile ` error-handling ` due to previous error \u8fd9\u5c31\u544a\u8bc9\u6211\u4eec\u4e86 File::open \u51fd\u6570\u7684\u8fd4\u56de\u503c\u7c7b\u578b\u662f Result<T, E> \u3002\u8fd9\u91cc\u6cdb\u578b\u53c2\u6570 T \u653e\u5165\u4e86\u6210\u529f\u503c\u7684\u7c7b\u578b std::fs::File \uff0c\u5b83\u662f\u4e00\u4e2a\u6587\u4ef6\u53e5\u67c4\u3002 E \u88ab\u7528\u5728\u5931\u8d25\u503c\u4e0a\u65f6 E \u7684\u7c7b\u578b\u662f std::io::Error \u3002 \u8fd9\u4e2a\u8fd4\u56de\u503c\u7c7b\u578b\u8bf4\u660e File::open \u8c03\u7528\u53ef\u80fd\u4f1a\u6210\u529f\u5e76\u8fd4\u56de\u4e00\u4e2a\u53ef\u4ee5\u8fdb\u884c\u8bfb\u5199\u7684\u6587\u4ef6\u53e5\u67c4\u3002 \u8fd9\u4e2a\u51fd\u6570\u4e5f\u53ef\u80fd\u4f1a\u5931\u8d25\uff1a\u4f8b\u5982\uff0c\u6587\u4ef6\u53ef\u80fd\u5e76\u4e0d\u5b58\u5728\uff0c\u6216\u8005\u53ef\u80fd\u6ca1\u6709\u8bbf\u95ee\u6587\u4ef6\u7684\u6743\u9650\u3002 File::open \u9700\u8981\u4e00\u4e2a\u65b9\u5f0f\u544a\u8bc9\u6211\u4eec\u662f\u6210\u529f\u8fd8\u662f\u5931\u8d25\uff0c\u5e76\u540c\u65f6\u63d0\u4f9b\u7ed9\u6211\u4eec\u6587\u4ef6\u53e5\u67c4\u6216\u9519\u8bef\u4fe1\u606f\u3002\u800c\u8fd9\u4e9b\u4fe1\u606f\u6b63\u662f Result \u679a\u4e3e\u53ef\u4ee5\u63d0\u4f9b\u7684\u3002 \u5f53 File::open \u6210\u529f\u7684\u60c5\u51b5\u4e0b\uff0c\u53d8\u91cf f \u7684\u503c\u5c06\u4f1a\u662f\u4e00\u4e2a\u5305\u542b\u6587\u4ef6\u53e5\u67c4\u7684 Ok \u5b9e\u4f8b\u3002\u5728\u5931\u8d25\u7684\u60c5\u51b5\u4e0b\uff0c f \u7684\u503c\u4f1a\u662f\u4e00\u4e2a\u5305\u542b\u66f4\u591a\u5173\u4e8e\u51fa\u73b0\u4e86\u4f55\u79cd\u9519\u8bef\u4fe1\u606f\u7684 Err \u5b9e\u4f8b\u3002 \u9700\u8981\u5728\u793a\u4f8b\u7684\u4ee3\u7801\u4e2d\u589e\u52a0\u6839\u636e File::open \u8fd4\u56de\u503c\u8fdb\u884c\u4e0d\u540c\u5904\u7406\u7684\u903b\u8f91\u3002\u4e0b\u9762\u793a\u4f8b\u5c55\u793a\u4e86\u4e00\u4e2a\u4f7f\u7528\u57fa\u672c\u5de5\u5177\u5904\u7406 Result \u7684\u4f8b\u5b50\uff1a\u7b2c\u516d\u7ae0\u5b66\u4e60\u8fc7\u7684 match \u8868\u8fbe\u5f0f\u3002 use std :: fs :: File ; fn main () { let f = File :: open ( \"hello.txt\" ); let f = match f { Ok ( file ) => file , // \u8fd9\u91cc\u544a\u8bc9 Rust \u5f53\u7ed3\u679c\u662f Ok \u65f6\uff0c\u8fd4\u56de Ok \u6210\u5458\u4e2d\u7684 file \u503c\uff0c\u7136\u540e\u5c06\u8fd9\u4e2a\u6587\u4ef6\u53e5\u67c4\u8d4b\u503c\u7ed9\u53d8\u91cf f\u3002 // match \u4e4b\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u8fd9\u4e2a\u6587\u4ef6\u53e5\u67c4\u6765\u8fdb\u884c\u8bfb\u5199\u3002 Err ( error ) => panic! ( \"Problem opening the file: {:?}\" , error ), // match \u7684\u53e6\u4e00\u4e2a\u5206\u652f\u5904\u7406\u4ece File::open \u5f97\u5230 Err \u503c\u7684\u60c5\u51b5\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u9009\u62e9\u8c03\u7528 panic! \u5b8f\u3002 }; } \u6ce8\u610f\u4e0e Option \u679a\u4e3e\u4e00\u6837\uff0c Result \u679a\u4e3e\u548c\u5176\u6210\u5458\u4e5f\u88ab\u5bfc\u5165\u5230\u4e86 prelude \u4e2d\uff0c\u6240\u4ee5\u5c31\u4e0d\u9700\u8981\u5728 match \u5206\u652f\u4e2d\u7684 Ok \u548c Err \u4e4b\u524d\u6307\u5b9a Result:: \u3002 \u5982\u679c\u5f53\u524d\u76ee\u5f55\u6ca1\u6709\u4e00\u4e2a\u53eb\u505a hello.txt \u7684\u6587\u4ef6\uff0c\u5f53\u8fd0\u884c\u8fd9\u6bb5\u4ee3\u7801\u65f6\u4f1a\u770b\u5230\u5982\u4e0b\u6765\u81ea panic! \u5b8f\u7684\u8f93\u51fa\uff1a $ cargo run Compiling error - handling v0 . 1.0 ( file : ///projects/error-handling) Finished dev [ unoptimized + debuginfo ] target ( s ) in 0.73 s Running ` target / debug / error - handling ` thread ' main ' panicked at ' Problem opening the file : Os { code : 2 , kind : NotFound , message : \"No such file or directory\" } ' , src / main . rs : 8 : 23 note : run with ` RUST_BACKTRACE = 1 ` environment variable to display a backtrace","title":"\u53ef\u6062\u590d\u7684\u9519\u8bef(Result)"},{"location":"error-handing/#_2","text":"\u793a\u4f8b\u4e2d\u7684\u4ee3\u7801\u4e0d\u7ba1 File::open \u662f\u56e0\u4e3a\u4ec0\u4e48\u539f\u56e0\u5931\u8d25\u90fd\u4f1a panic! \u3002 \u6211\u4eec\u771f\u6b63\u5e0c\u671b\u7684\u662f\u5bf9\u4e0d\u540c\u7684\u9519\u8bef\u539f\u56e0\u91c7\u53d6\u4e0d\u540c\u7684\u884c\u4e3a\uff1a \u5982\u679c File::open \u56e0\u4e3a\u6587\u4ef6\u4e0d\u5b58\u5728\u800c\u5931\u8d25\uff0c\u6211\u4eec\u5e0c\u671b\u521b\u5efa\u8fd9\u4e2a\u6587\u4ef6\u5e76\u8fd4\u56de\u65b0\u6587\u4ef6\u7684\u53e5\u67c4\u3002 \u5982\u679c File::open \u56e0\u4e3a\u4efb\u4f55\u5176\u4ed6\u539f\u56e0\u5931\u8d25\uff0c\u4f8b\u5982\u6ca1\u6709\u6253\u5f00\u6587\u4ef6\u7684\u6743\u9650\uff0c\u6211\u4eec\u4ecd\u7136\u5e0c\u671b\u50cf\u793a\u4f8b\u90a3\u6837 panic! \u3002 \u8ba9\u6211\u4eec\u770b\u770b\u4e0b\u9762\u7684\u793a\u4f8b\uff0c\u5176\u4e2d match \u589e\u52a0\u4e86\u53e6\u4e00\u4e2a\u5206\u652f\uff1a // \u4f7f\u7528\u4e0d\u540c\u7684\u65b9\u5f0f\u5904\u7406\u4e0d\u540c\u7c7b\u578b\u7684\u9519\u8bef use std :: fs :: File ; use std :: io :: ErrorKind ; fn main () { let f = File :: open ( \"hello.txt\" ); let f = match f { Ok ( file ) => file , // File::open \u8fd4\u56de\u7684 Err \u6210\u5458\u4e2d\u7684\u503c\u7c7b\u578b io::Error\uff0c\u5b83\u662f\u4e00\u4e2a\u6807\u51c6\u5e93\u4e2d\u63d0\u4f9b\u7684\u7ed3\u6784\u4f53\u3002 // \u8fd9\u4e2a\u7ed3\u6784\u4f53\u6709\u4e00\u4e2a\u8fd4\u56de io::ErrorKind \u503c\u7684 kind \u65b9\u6cd5\u53ef\u4f9b\u8c03\u7528\u3002 // io::ErrorKind \u662f\u4e00\u4e2a\u6807\u51c6\u5e93\u63d0\u4f9b\u7684\u679a\u4e3e\uff0c\u5b83\u7684\u6210\u5458\u5bf9\u5e94 io \u64cd\u4f5c\u53ef\u80fd\u5bfc\u81f4\u7684\u4e0d\u540c\u9519\u8bef\u7c7b\u578b\u3002 // \u6211\u4eec\u611f\u5174\u8da3\u7684\u6210\u5458\u662f ErrorKind::NotFound\uff0c\u5b83\u4ee3\u8868\u5c1d\u8bd5\u6253\u5f00\u7684\u6587\u4ef6\u5e76\u4e0d\u5b58\u5728\u3002 Err ( err ) => match err . kind () { // \u5982\u679c error.kind() \u7684\u8fd4\u56de\u503c\u4e3a ErrorKind\u7684 NotFound \u6210\u5458\u3002 // \u5219\u5c1d\u8bd5\u901a\u8fc7 File::create \u521b\u5efa\u6587\u4ef6\u3002 ErrorKind :: NotFound => match File :: create ( \"hello.txt\" ) { Ok ( file ) => file , // \u7136\u800c\u56e0\u4e3a File::create \u4e5f\u53ef\u80fd\u4f1a\u5931\u8d25\uff0c\u8fd8\u9700\u8981\u589e\u52a0\u4e00\u4e2a\u5185\u5c42 match \u8bed\u53e5\u3002 // \u5f53\u6587\u4ef6\u4e0d\u80fd\u88ab\u6253\u5f00\uff0c\u4f1a\u6253\u5370\u51fa\u4e00\u4e2a\u4e0d\u540c\u7684\u9519\u8bef\u4fe1\u606f\u3002 Err ( e ) => panic! ( \"\u521b\u5efa\u6587\u4ef6\u5931\u8d25: {:?}\" , e ), }, // \u5916\u5c42 match \u7684\u6700\u540e\u4e00\u4e2a\u5206\u652f\u4fdd\u6301\u4e0d\u53d8\uff0c\u8fd9\u6837\u5bf9\u4efb\u4f55\u9664\u4e86\u6587\u4ef6\u4e0d\u5b58\u5728\u7684\u9519\u8bef\u4f1a\u4f7f\u7a0b\u5e8f panic\u3002 other_error => { panic! ( \"\u6253\u5f00\u6587\u4ef6\u5931\u8d25: {:?}\" , other_error ) } }, }; } \u4e0d\u540c\u4e8e\u4f7f\u7528 match \u548c Result<T, E> \u8fd9\u91cc\u6709\u597d\u591a match\uff01match \u786e\u5b9e\u5f88\u5f3a\u5927\uff0c\u4e0d\u8fc7\u4e5f\u975e\u5e38\u7684\u57fa\u7840\u3002\u7b2c\u5341\u4e09\u7ae0\u6211\u4eec\u4f1a\u4ecb\u7ecd\u95ed\u5305\uff08closure\uff09\uff0c\u8fd9\u53ef\u4ee5\u7528\u4e8e\u5f88\u591a Result \u4e0a\u5b9a\u4e49\u7684\u65b9\u6cd5\u3002\u5728\u5904\u7406\u4ee3\u7801\u4e2d\u7684 Result \u503c\u65f6\u8fd9\u4e9b\u65b9\u6cd5\u53ef\u80fd\u4f1a\u66f4\u52a0\u7b80\u6d01\u3002 \u4f8b\u5982\uff0c\u8fd9\u662f\u53e6\u4e00\u4e2a\u7f16\u5199\u4e0e\u793a\u4f8b 9-5 \u903b\u8f91\u76f8\u540c\u4f46\u662f\u4f7f\u7528\u95ed\u5305\u548c unwrap_or_else \u65b9\u6cd5\u7684\u4f8b\u5b50\uff1a use std :: fs :: File ; use std :: io :: ErrorKind ; fn main () { let f = File :: open ( \"hello.txt\" ). unwrap_or_else ( | error | { if error . kind () == ErrorKind :: NotFound { File :: create ( \"hello.txt\" ). unwrap_or_else ( | error | { panic! ( \"\u521b\u5efa\u6587\u4ef6\u5931\u8d25: {:?}\" , error ); }) } else { panic! ( \"\u6253\u5f00\u6587\u4ef6\u5931\u8d25: {:?}\" , error ); } }); } \u867d\u7136\u8fd9\u6bb5\u4ee3\u7801\u6709\u7740\u5982\u4e0a\u9762\u793a\u4f8b\u4e2d\u4e00\u6837\u7684\u884c\u4e3a\uff0c\u4f46\u5e76\u6ca1\u6709\u5305\u542b\u4efb\u4f55 match \u8868\u8fbe\u5f0f\u4e14\u66f4\u5bb9\u6613\u9605\u8bfb\u3002\u5728\u9605\u8bfb\u5b8c\u7b2c\u5341\u4e09\u7ae0\u540e\u518d\u56de\u5230\u8fd9\u4e2a\u4f8b\u5b50\uff0c\u5e76\u67e5\u770b\u6807\u51c6\u5e93\u6587\u6863 unwrap_or_else \u65b9\u6cd5\u90fd\u505a\u4e86\u4ec0\u4e48\u64cd\u4f5c\u3002\u5728\u5904\u7406\u9519\u8bef\u65f6\uff0c\u8fd8\u6709\u5f88\u591a\u8fd9\u7c7b\u65b9\u6cd5\u53ef\u4ee5\u6d88\u9664\u5927\u91cf\u5d4c\u5957\u7684 match \u8868\u8fbe\u5f0f\u3002","title":"\u5339\u914d\u4e0d\u540c\u7684\u9519\u8bef"},{"location":"error-handing/#unwrap-expect","text":"match \u80fd\u591f\u80dc\u4efb\u5b83\u7684\u5de5\u4f5c\uff0c\u4e0d\u8fc7\u5b83\u53ef\u80fd\u6709\u70b9\u5197\u957f\u5e76\u4e14\u4e0d\u603b\u662f\u80fd\u5f88\u597d\u7684\u8868\u660e\u5176\u610f\u56fe\u3002 Result<T, E> \u7c7b\u578b\u5b9a\u4e49\u4e86\u5f88\u591a\u8f85\u52a9\u65b9\u6cd5\u6765\u5904\u7406\u5404\u79cd\u60c5\u51b5\u3002 \u5176\u4e2d\u4e4b\u4e00\u53eb\u505a unwrap \uff0c\u5b83\u7684\u5b9e\u73b0\u5c31\u7c7b\u4f3c\u4e8e\u4e0a\u9762\u793a\u4f8b\u4e2d\u7684 match \u8bed\u53e5\u3002 \u5982\u679c Result \u503c\u662f\u6210\u5458 Ok \uff0c unwrap \u4f1a\u8fd4\u56de Ok \u4e2d\u7684\u503c\u3002 \u5982\u679c Result \u503c\u662f\u6210\u5458 Err \uff0c unwrap \u4f1a\u4e3a\u6211\u4eec\u8c03\u7528 panic! \u3002 \u8fd9\u91cc\u662f\u4e00\u4e2a\u5b9e\u8df5 unwrap \u7684\u4f8b\u5b50\uff1a use std :: fs :: File ; fn main () { // `unwrap` **\u8c03\u7528** `panic!` // \u4f7f\u7528\u9ed8\u8ba4\u7684 panic! \u4fe1\u606f\u3002 let f = File :: open ( \"hello.txt\" ). unwrap (); } \u5982\u679c\u8c03\u7528\u8fd9\u6bb5\u4ee3\u7801\u65f6\u4e0d\u5b58\u5728 hello.txt \u6587\u4ef6\uff0c\u6211\u4eec\u5c06\u4f1a\u770b\u5230\u4e00\u4e2a unwrap \u8c03\u7528 panic! \u65f6\u63d0\u4f9b\u7684\u9519\u8bef\u4fe1\u606f\uff1a thread ' main ' panicked at ' called ` Result :: unwrap () ` on an ` Err ` value : Error { repr : Os { code : 2 , message : \"No such file or directory\" } } ' , src / libcore / result . rs : 906 : 4 \u8fd8\u6709\u53e6\u4e00\u4e2a\u7c7b\u4f3c\u4e8e unwrap \u7684\u65b9\u6cd5\u5b83\u8fd8\u5141\u8bb8\u6211\u4eec\u9009\u62e9 panic! \u7684\u9519\u8bef\u4fe1\u606f\uff1a expect \u3002 \u4f7f\u7528 expect \u800c\u4e0d\u662f unwrap \u5e76\u63d0\u4f9b\u4e00\u4e2a\u597d\u7684\u9519\u8bef\u4fe1\u606f\u53ef\u4ee5\u8868\u660e\u4f60\u7684\u610f\u56fe\u5e76\u66f4\u6613\u4e8e\u8ffd\u8e2a panic \u7684\u6839\u6e90\u3002 expect \u7684\u8bed\u6cd5\u770b\u8d77\u6765\u50cf\u8fd9\u6837\uff1a use std :: fs :: File ; fn main () { // \u8fd4\u56de\u6587\u4ef6\u53e5\u67c4\u6216\u8c03\u7528 panic! \u5b8f // expect \u5728\u8c03\u7528 panic! \u65f6\u4f7f\u7528\u7684\u9519\u8bef\u4fe1\u606f\u5c06\u662f\u4f20\u9012\u7ed9 expect \u7684\u53c2\u6570\uff0c // \u800c\u4e0d\u50cf unwrap \u90a3\u6837\u4f7f\u7528\u9ed8\u8ba4\u7684 panic! \u4fe1\u606f\u3002 let f = File :: open ( \"hello.txt\" ). expect ( \"Failed to open hello.txt\" ); } expect \u4e0e unwrap \u7684\u4f7f\u7528\u65b9\u5f0f\u4e00\u6837\uff1a\u8fd4\u56de\u6587\u4ef6\u53e5\u67c4\u6216\u8c03\u7528 panic! \u5b8f\u3002 expect \u5728\u8c03\u7528 panic! \u65f6\u4f7f\u7528\u7684\u9519\u8bef\u4fe1\u606f\u5c06\u662f\u6211\u4eec\u4f20\u9012\u7ed9 expect \u7684\u53c2\u6570\uff0c\u800c\u4e0d\u50cf unwrap \u90a3\u6837\u4f7f\u7528\u9ed8\u8ba4\u7684 panic! \u4fe1\u606f\u3002 \u5b83\u770b\u8d77\u6765\u50cf\u8fd9\u6837\uff1a thread ' main ' panicked at ' Failed to open hello . txt : Error { repr : Os { code : 2 , message : \"No such file or directory\" } } ' , src / libcore / result . rs : 906 : 4 \u56e0\u4e3a\u8fd9\u4e2a\u9519\u8bef\u4fe1\u606f\u4ee5\u6307\u5b9a\u7684\u6587\u672c\u5f00\u59cb\uff0c Failed to open hello.txt \uff0c\u5c06\u4f1a\u66f4\u5bb9\u6613\u627e\u5230\u4ee3\u7801\u4e2d\u7684\u9519\u8bef\u4fe1\u606f\u6765\u81ea\u4f55\u5904\u3002 \u5982\u679c\u5728\u591a\u5904\u4f7f\u7528 unwrap \uff0c\u5219\u9700\u8981\u82b1\u66f4\u591a\u7684\u65f6\u95f4\u6765\u5206\u6790\u5230\u5e95\u662f\u54ea\u4e00\u4e2a unwrap \u9020\u6210\u4e86 panic \uff0c\u56e0\u4e3a\u6240\u6709\u7684 unwrap \u8c03\u7528\u90fd\u6253\u5370\u76f8\u540c\u7684\u4fe1\u606f\u3002","title":"unwrap \u548c expect"},{"location":"error-handing/#_3","text":"\u5f53\u7f16\u5199\u4e00\u4e2a\u5176\u5b9e\u5148\u4f1a\u8c03\u7528\u4e00\u4e9b\u53ef\u80fd\u4f1a\u5931\u8d25\u7684\u64cd\u4f5c\u7684\u51fd\u6570\u65f6\uff0c\u9664\u4e86\u5728\u8fd9\u4e2a\u51fd\u6570\u4e2d\u5904\u7406\u9519\u8bef\u5916\uff0c\u8fd8\u53ef\u4ee5\u9009\u62e9\u8ba9\u8c03\u7528\u8005\u77e5\u9053\u8fd9\u4e2a\u9519\u8bef\u5e76\u51b3\u5b9a\u8be5\u5982\u4f55\u5904\u7406\u3002 \u8fd9\u88ab\u79f0\u4e3a \u4f20\u64ad \uff08propagating\uff09\u9519\u8bef\uff0c\u8fd9\u6837\u80fd\u66f4\u597d\u7684\u63a7\u5236\u4ee3\u7801\u8c03\u7528\uff0c\u56e0\u4e3a\u6bd4\u8d77\u4f60\u4ee3\u7801\u6240\u62e5\u6709\u7684\u4e0a\u4e0b\u6587\uff0c\u8c03\u7528\u8005\u53ef\u80fd\u62e5\u6709\u66f4\u591a\u4fe1\u606f\u6216\u903b\u8f91\u6765\u51b3\u5b9a\u5e94\u8be5\u5982\u4f55\u5904\u7406\u9519\u8bef\u3002 \u4f8b\u5982\uff0c\u4e0b\u9762\u5c55\u793a\u4e86\u4e00\u4e2a\u4ece\u6587\u4ef6\u4e2d\u8bfb\u53d6\u7528\u6237\u540d\u7684\u51fd\u6570\u3002\u5982\u679c\u6587\u4ef6\u4e0d\u5b58\u5728\u6216\u4e0d\u80fd\u8bfb\u53d6\uff0c\u8fd9\u4e2a\u51fd\u6570\u4f1a\u5c06\u8fd9\u4e9b\u9519\u8bef\u8fd4\u56de\u7ed9\u8c03\u7528\u5b83\u7684\u4ee3\u7801\uff1a // \u4e00\u4e2a\u51fd\u6570\u4f7f\u7528 match \u5c06\u9519\u8bef\u8fd4\u56de\u7ed9\u4ee3\u7801\u8c03\u7528\u8005 use std :: fs :: File ; use std :: io :: { self , Read }; // \u51fd\u6570\u8fd4\u56de\u4e00\u4e2a Result<T, E> \u7c7b\u578b\u7684\u503c\uff0c\u5176\u4e2d\u6cdb\u578b\u53c2\u6570 T \u7684\u5177\u4f53\u7c7b\u578b\u662f String\uff0c\u800c E \u7684\u5177\u4f53\u7c7b\u578b\u662f io::Error\u3002 // \u5982\u679c\u8fd9\u4e2a\u51fd\u6570\u6ca1\u6709\u51fa\u4efb\u4f55\u9519\u8bef\u6210\u529f\u8fd4\u56de\uff0c\u51fd\u6570\u7684\u8c03\u7528\u8005\u4f1a\u6536\u5230\u4e00\u4e2a\u5305\u542b String \u7684 Ok \u503c \u2014\u2014 \u51fd\u6570\u4ece\u6587\u4ef6\u4e2d\u8bfb\u53d6\u5230\u7684\u7528\u6237\u540d\u3002 // \u5982\u679c\u51fd\u6570\u9047\u5230\u4efb\u4f55\u9519\u8bef\uff0c\u51fd\u6570\u7684\u8c03\u7528\u8005\u4f1a\u6536\u5230\u4e00\u4e2a Err \u503c\uff0c\u5b83\u50a8\u5b58\u4e86\u4e00\u4e2a\u5305\u542b\u66f4\u591a\u8fd9\u4e2a\u95ee\u9898\u76f8\u5173\u4fe1\u606f\u7684 io::Error \u5b9e\u4f8b\u3002 // \u8fd9\u91cc\u9009\u62e9 io::Error \u4f5c\u4e3a\u51fd\u6570\u7684\u8fd4\u56de\u503c, \u5219\u662f\u56e0\u4e3a\u5b83\u6b63\u597d\u662f\u51fd\u6570\u4f53\u4e2d\uff1aFile::open \u51fd\u6570\u548c read_to_string \u65b9\u6cd5\u53ef\u80fd\u4f1a\u64cd\u4f5c\u5931\u8d25\u7684\u7684\u9519\u8bef\u8fd4\u56de\u503c\u3002 fn read_username_from_file () -> Result < String , io :: Error > { let f = File :: open ( \"hello.txt\" ); let mut f = match f { Ok ( file ) => file , // \u6253\u5f00\u6587\u4ef6\u6210\u529f\u65f6\uff0c\u76f4\u63a5\u8fd4\u56de\u6587\u4ef6\u53e5\u67c4 Err ( e ) => return Err ( e ), // \u6253\u5f00\u6587\u4ef6\u9519\u8bef\u662f\uff0c\u76f4\u63a5Return\u6210Result\u7684Error\u679a\u4e3e\u3002 }; let mut s = String :: new (); // \u521b\u5efa\u5b57\u7b26\u4e32\u4fdd\u5b58\u8bfb\u53d6\u7684\u503c\u3002 // match\u7ed3\u679c\u503c\u5c06\u8fd4\u56de, OK\u503c\u6216Err\u503c match f . read_to_string ( & mut s ) { Ok ( _ ) => Ok ( s ), // \u5c06\u8bfb\u53d6\u5230\u7684\u5b57\u7b26\u4e32\u4f5c\u4e3aResult\u7684OK\u4e2d\u7684\u503c\u3002 Err ( e ) => Err ( e ), // \u5c06Error\u503c\u4f5c\u4e3aResult\u7684Err\u4e2d\u7684\u503c\u3002 // \u4e0d\u9700\u8981\u663e\u5f0f\u7684\u8c03\u7528 return\uff0c\u56e0\u4e3a\u8fd9\u662f\u51fd\u6570\u7684\u6700\u540e\u4e00\u4e2a\u8868\u8fbe\u5f0f\u3002 } } \u8c03\u7528\u8fd9\u4e2a\u51fd\u6570\u7684\u4ee3\u7801\u6700\u7ec8\u4f1a\u5f97\u5230\u4e00\u4e2a\u5305\u542b\u7528\u6237\u540d\u7684 Ok \u503c\uff0c\u6216\u8005\u4e00\u4e2a\u5305\u542b io::Error \u7684 Err \u503c\u3002 \u6211\u4eec\u65e0\u4ece\u5f97\u77e5\u8c03\u7528\u8005\u4f1a\u5982\u4f55\u5904\u7406\u8fd9\u4e9b\u503c\u3002 \u4f8b\u5982\uff0c\u5982\u679c\u4ed6\u4eec\u5f97\u5230\u4e86\u4e00\u4e2a Err \u503c\uff0c\u4ed6\u4eec\u53ef\u80fd\u4f1a\u9009\u62e9 panic! \u5e76\u4f7f\u7a0b\u5e8f\u5d29\u6e83\u3001\u4f7f\u7528\u4e00\u4e2a\u9ed8\u8ba4\u7684\u7528\u6237\u540d\u6216\u8005\u4ece\u6587\u4ef6\u4e4b\u5916\u7684\u5730\u65b9\u5bfb\u627e\u7528\u6237\u540d\u3002 \u6211\u4eec\u6ca1\u6709\u8db3\u591f\u7684\u4fe1\u606f\u77e5\u6653\u8c03\u7528\u8005\u5177\u4f53\u4f1a\u5982\u4f55\u5c1d\u8bd5\uff0c\u6240\u4ee5\u5c06\u6240\u6709\u7684\u6210\u529f\u6216\u5931\u8d25\u4fe1\u606f\u5411\u4e0a\u4f20\u64ad\uff0c\u8ba9\u4ed6\u4eec\u9009\u62e9\u5408\u9002\u7684\u5904\u7406\u65b9\u6cd5\u3002 \u8fd9\u79cd\u4f20\u64ad\u9519\u8bef\u7684\u6a21\u5f0f\u5728 Rust \u662f\u5982\u6b64\u7684\u5e38\u89c1\uff0c\u4ee5\u81f3\u4e8e Rust \u63d0\u4f9b\u4e86 ? \u95ee\u53f7\u8fd0\u7b97\u7b26\u6765\u4f7f\u5176\u66f4\u6613\u4e8e\u5904\u7406\u3002","title":"\u4f20\u64ad\u9519\u8bef"},{"location":"error-handing/#_4","text":"\u4e0b\u9762\u793a\u4f8b\u5c55\u793a\u4e86\u4e00\u4e2a read_username_from_file \u7684\u5b9e\u73b0\uff0c\u5b83\u5b9e\u73b0\u4e86\u4e0e\u4e0a\u4e2a\u793a\u4f8b\u4e2d\u7684\u4ee3\u7801\u76f8\u540c\u7684\u529f\u80fd\uff0c\u4e0d\u8fc7\u8fd9\u4e2a\u5b9e\u73b0\u4f7f\u7528\u4e86 ? \u8fd0\u7b97\u7b26\uff1a // \u4e00\u4e2a\u4f7f\u7528 ? \u8fd0\u7b97\u7b26\u5411\u8c03\u7528\u8005\u8fd4\u56de\u9519\u8bef\u7684\u51fd\u6570 use std :: fs :: File ; use std :: io ; use std :: io :: Read ; fn read_username_from_file () -> Result < String , io :: Error > { // \u5982\u679c Result \u7684\u503c\u662f Ok\uff0c\u8fd9\u4e2a\u8868\u8fbe\u5f0f\u5c06\u4f1a\u8fd4\u56de Ok \u4e2d\u7684\u503c\u800c\u7a0b\u5e8f\u5c06\u7ee7\u7eed\u6267\u884c\u3002 // \u5982\u679c\u503c\u662f Err\uff0cErr \u4e2d\u7684\u503c\u5c06\u4f5c\u4e3a\u6574\u4e2a\u51fd\u6570\u7684\u8fd4\u56de\u503c\uff0c\u5c31\u597d\u50cf\u4f7f\u7528\u4e86 return \u5173\u952e\u5b57\u4e00\u6837\uff0c\u8fd9\u6837\u9519\u8bef\u503c\u5c31\u88ab\u4f20\u64ad\u7ed9\u4e86\u8c03\u7528\u8005\u3002 // ? \u5c06\u4f1a\u628a Ok \u4e2d\u7684\u503c\u8fd4\u56de\u7ed9\u53d8\u91cf f, \u5982\u679c\u51fa\u73b0\u4e86\u9519\u8bef\uff0c? \u8fd0\u7b97\u7b26\u4f1a\u63d0\u65e9\u8fd4\u56de\u6574\u4e2a\u51fd\u6570\u5e76\u5c06\u4e00\u4e9b Err \u503c\u4f20\u64ad\u7ed9\u8c03\u7528\u8005 let mut f = File :: open ( \"hello.txt\" ) ? ; let mut s = String :: new (); // \uff1f\u8fd0\u7528\u540c\u4e0a f . read_to_string ( & mut s ) ? ; Ok ( s ) // \u8fd4\u56deResult\u679a\u4e3e\u7684Ok\u503c\u3002 } \u4e0a\u4e2a\u793a\u4f8b\u4e2d\u7684 match \u8868\u8fbe\u5f0f\u4e0e\u95ee\u53f7\u8fd0\u7b97\u7b26\u6240\u505a\u7684\u6709 \u4e00\u70b9\u4e0d\u540c \uff1a ? \u8fd0\u7b97\u7b26\u6240\u4f7f\u7528\u7684\u9519\u8bef\u503c\u88ab\u4f20\u9012\u7ed9\u4e86 from \u51fd\u6570\uff0c\u5b83\u5b9a\u4e49\u4e8e\u6807\u51c6\u5e93\u7684 From trait \u4e2d\uff0c\u5176\u7528\u6765\u5c06\u9519\u8bef\u4ece\u4e00\u79cd\u7c7b\u578b\u8f6c\u6362\u4e3a\u53e6\u4e00\u79cd\u7c7b\u578b\u3002 \u5f53 ? \u8fd0\u7b97\u7b26\u8c03\u7528 from \u51fd\u6570\u65f6\uff0c\u6536\u5230\u7684\u9519\u8bef\u7c7b\u578b\u88ab\u8f6c\u6362\u4e3a\u7531\u5f53\u524d\u51fd\u6570\u8fd4\u56de\u7c7b\u578b\u6240\u6307\u5b9a\u7684\u9519\u8bef\u7c7b\u578b\u3002 \u8fd9\u5728\u5f53\u51fd\u6570\u8fd4\u56de\u5355\u4e2a\u9519\u8bef\u7c7b\u578b\u6765\u4ee3\u8868\u6240\u6709\u53ef\u80fd\u5931\u8d25\u7684\u65b9\u5f0f\u65f6\u5f88\u6709\u7528\uff0c\u5373\u4f7f\u5176\u53ef\u80fd\u4f1a\u56e0\u5f88\u591a\u79cd\u539f\u56e0\u5931\u8d25\u3002 \u53ea\u8981\u6bcf\u4e00\u4e2a\u9519\u8bef\u7c7b\u578b\u90fd\u5b9e\u73b0\u4e86 from \u51fd\u6570\u6765\u5b9a\u4e49\u5982\u4f55\u5c06\u81ea\u8eab\u8f6c\u6362\u4e3a\u8fd4\u56de\u7684\u9519\u8bef\u7c7b\u578b\uff0c ? \u8fd0\u7b97\u7b26\u4f1a\u81ea\u52a8\u5904\u7406\u8fd9\u4e9b\u8f6c\u6362\u3002 ? \u8fd0\u7b97\u7b26\u6d88\u9664\u4e86\u5927\u91cf\u6837\u677f\u4ee3\u7801\u5e76\u4f7f\u5f97\u51fd\u6570\u7684\u5b9e\u73b0\u66f4\u7b80\u5355\u3002 \u6211\u4eec\u751a\u81f3\u53ef\u4ee5\u5728 ? \u4e4b\u540e\u76f4\u63a5\u4f7f\u7528\u94fe\u5f0f\u65b9\u6cd5\u8c03\u7528\u6765\u8fdb\u4e00\u6b65\u7f29\u77ed\u4ee3\u7801: // \u95ee\u53f7\u8fd0\u7b97\u7b26\u4e4b\u540e\u7684\u94fe\u5f0f\u65b9\u6cd5\u8c03\u7528 use std :: fs :: File ; use std :: io ; use std :: io :: Read ; fn read_username_from_file () -> Result < String , io :: Error > { let mut s = String :: new (); File :: open ( \"hello.txt\" ) ? . read_to_string ( & mut s ) ? ; Ok ( s ) }","title":"?\u8fd0\u7b97\u7b26"},{"location":"error-handing/#_5","text":"? \u8fd0\u7b97\u7b26\u53ea\u80fd\u88ab\u7528\u4e8e\u8fd4\u56de\u503c\u4e0e ? \u4f5c\u7528\u7684\u503c\u76f8\u517c\u5bb9\u7684\u51fd\u6570\u3002 \u56e0\u4e3a ? \u8fd0\u7b97\u7b26\u88ab\u5b9a\u4e49\u4e3a\u4ece\u51fd\u6570\u4e2d\u63d0\u65e9\u8fd4\u56de\u4e00\u4e2a\u503c\uff0c\u8fd9\u4e0e\u793a\u4f8b\u4e2d\u7684 match \u8868\u8fbe\u5f0f\u6709\u7740\u5b8c\u5168\u76f8\u540c\u7684\u5de5\u4f5c\u65b9\u5f0f\u3002 \u793a\u4f8b\u4e2d match \u4f5c\u7528\u4e8e\u4e00\u4e2a Result \u503c\uff0c\u63d0\u65e9\u8fd4\u56de\u7684\u5206\u652f\u8fd4\u56de\u4e86\u4e00\u4e2a Err(e) \u503c\u3002 \u51fd\u6570\u7684\u8fd4\u56de\u503c\u5fc5\u987b\u662f Result \u7c7b\u578b\u624d\u80fd\u4e0e\u8fd9\u4e2a return \u76f8\u517c\u5bb9\u3002 \u770b\u770b\u5728\u8fd4\u56de\u503c\u4e0d\u517c\u5bb9\u7684 main \u51fd\u6570\u4e2d\u4f7f\u7528 ? \u8fd0\u7b97\u7b26\u4f1a\u5f97\u5230\u4ec0\u4e48\u9519\u8bef\uff1a // \u5c1d\u8bd5\u5728\u8fd4\u56de () \u7684\u51fd\u6570\u4e2d\u4f7f\u7528 ? \u7684\u4ee3\u7801\u4e0d\u80fd\u7f16\u8bd1 use std :: fs :: File ; // \u8fd4\u56de\u7c7b\u578b\u662f () \u800c\u4e0d\u662f Result fn main () { let f = File :: open ( \"hello.txt\" ) ? ; } \u5f53\u7f16\u8bd1\u8fd9\u4e9b\u4ee3\u7801\uff0c\u4f1a\u5f97\u5230\u5982\u4e0b\u9519\u8bef\u4fe1\u606f\uff1a $ cargo run Compiling error - handling v0 . 1.0 ( file : ///projects/error-handling) error [ E0277 ] : the ` ? ` operator can only be used in a function that returns ` Result ` or ` Option ` ( or another type that implements ` FromResidual ` ) - -> src / main . rs : 4 : 36 | 3 | / fn main () { 4 | | let f = File :: open ( \"hello.txt\" ) ? ; | | ^ cannot use the ` ? ` operator in a function that returns ` () ` 5 | | } | | _ - this function should return ` Result ` or ` Option ` to accept ` ? ` | = help : the trait ` FromResidual < Result < Infallible , std :: io :: Error >> ` is not implemented for ` () ` For more information about this error , try ` rustc -- explain E0277 ` . error : could not compile ` error - handling ` due to previous error \u8fd9\u4e2a\u9519\u8bef\u6307\u51fa\u53ea\u80fd\u5728\u8fd4\u56de Result \u6216\u8005\u5176\u5b83\u5b9e\u73b0\u4e86 FromResidual \u7684\u7c7b\u578b\u7684\u51fd\u6570\u4e2d\u4f7f\u7528 ? \u8fd0\u7b97\u7b26\u3002 \u4e3a\u4e86\u4fee\u590d\u8fd9\u4e2a\u9519\u8bef\uff0c\u6709\u4e24\u4e2a\u9009\u62e9\u3002 \u4e00\u4e2a\u662f\uff0c\u5982\u679c\u6ca1\u6709\u9650\u5236\u7684\u8bdd\u5c06\u51fd\u6570\u7684\u8fd4\u56de\u503c\u6539\u4e3a Result<T, E> \u3002 \u53e6\u4e00\u4e2a\u662f\u4f7f\u7528 match \u6216 Result<T, E> \u7684\u65b9\u6cd5\u4e2d\u5408\u9002\u7684\u4e00\u4e2a\u6765\u5904\u7406 Result<T, E> \u3002 \u9519\u8bef\u4fe1\u606f\u4e2d\u4e5f\u63d0\u5230 ? \u4e5f\u53ef\u7528\u4e8e Option<T> \u503c\u3002 \u5982\u540c\u5bf9 Result \u4f7f\u7528 ? \u4e00\u6837\uff0c\u53ea\u80fd\u5728\u8fd4\u56de Option \u7684\u51fd\u6570\u4e2d\u5bf9 Option \u4f7f\u7528 ? \u3002 \u5728 Option<T> \u4e0a\u8c03\u7528 ? \u8fd0\u7b97\u7b26\u7684\u884c\u4e3a\u4e0e Result<T, E> \u7c7b\u4f3c\uff1a \u5982\u679c\u503c\u662f None \uff0c\u6b64\u65f6 None \u4f1a\u4ece\u51fd\u6570\u4e2d\u63d0\u524d\u8fd4\u56de\u3002 \u5982\u679c\u503c\u662f Some \uff0c Some \u4e2d\u7684\u503c\u4f5c\u4e3a\u8868\u8fbe\u5f0f\u7684\u8fd4\u56de\u503c\u540c\u65f6\u51fd\u6570\u7ee7\u7eed\u3002 \u4e0b\u9762\u793a\u4f8b\u4e2d\u6709\u4e00\u4e2a\u4ece\u7ed9\u5b9a\u6587\u672c\u4e2d\u8fd4\u56de\u7b2c\u4e00\u884c\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u7684\u51fd\u6570\u7684\u4f8b\u5b50\uff1a // \u5728 Option<T> \u503c\u4e0a\u4f7f\u7528 ? \u8fd0\u7b97\u7b26 fn last_char_of_first_line ( text : & str ) -> Option < char > { text . lines (). next () ? . chars (). last () } \u8fd9\u4e2a\u51fd\u6570\u8fd4\u56de Option<char> \u56e0\u4e3a\u5b83\u53ef\u80fd\u4f1a\u5728\u8fd9\u4e2a\u4f4d\u7f6e\u627e\u5230\u4e00\u4e2a\u5b57\u7b26\uff0c\u4e5f\u53ef\u80fd\u6ca1\u6709\u5b57\u7b26\u3002 \u8fd9\u6bb5\u4ee3\u7801\u83b7\u53d6 text \u5b57\u7b26\u4e32 slice \u4f5c\u4e3a\u53c2\u6570\u5e76\u8c03\u7528\u5176 lines \u65b9\u6cd5\uff0c\u8fd9\u4f1a\u8fd4\u56de\u4e00\u4e2a\u5b57\u7b26\u4e32\u4e2d\u6bcf\u4e00\u884c\u7684\u8fed\u4ee3\u5668\u3002 \u56e0\u4e3a\u51fd\u6570\u5e0c\u671b\u68c0\u67e5\u7b2c\u4e00\u884c\uff0c\u6240\u4ee5\u8c03\u7528\u4e86\u8fed\u4ee3\u5668 next \u6765\u83b7\u53d6\u8fed\u4ee3\u5668\u4e2d\u7b2c\u4e00\u4e2a\u503c\u3002 \u5982\u679c text \u662f\u7a7a\u5b57\u7b26\u4e32\uff0c next \u8c03\u7528\u4f1a\u8fd4\u56de None \uff0c\u6b64\u65f6\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 ? \u6765\u505c\u6b62\u5e76\u4ece last_char_of_first_line \u8fd4\u56de None \u3002 \u5982\u679c text \u4e0d\u662f\u7a7a\u5b57\u7b26\u4e32\uff0c next \u4f1a\u8fd4\u56de\u4e00\u4e2a\u5305\u542b text \u4e2d\u7b2c\u4e00\u884c\u7684\u5b57\u7b26\u4e32 slice \u7684 Some \u503c\u3002 ? \u4f1a\u63d0\u53d6\u8fd9\u4e2a\u5b57\u7b26\u4e32 slice \uff0c\u7136\u540e\u53ef\u4ee5\u5728\u5b57\u7b26\u4e32 slice \u4e0a\u8c03\u7528 chars \u6765\u83b7\u53d6\u5b57\u7b26\u7684\u8fed\u4ee3\u5668\u3002 \u6211\u4eec\u611f\u5174\u8da3\u7684\u662f\u7b2c\u4e00\u884c\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\uff0c\u6240\u4ee5\u53ef\u4ee5\u8c03\u7528 last \u6765\u8fd4\u56de\u8fed\u4ee3\u5668\u7684\u6700\u540e\u4e00\u9879\u3002 \u8fd9\u662f\u4e00\u4e2a Option \uff0c\u56e0\u4e3a\u6709\u53ef\u80fd\u7b2c\u4e00\u884c\u662f\u4e00\u4e2a\u7a7a\u5b57\u7b26\u4e32\uff0c\u4f8b\u5982 text \u4ee5\u4e00\u4e2a\u7a7a\u884c\u5f00\u5934\u800c\u540e\u9762\u7684\u884c\u6709\u6587\u672c\uff0c\u50cf\u662f \"\\nhi\"\u3002 \u4e0d\u8fc7\uff0c\u5982\u679c\u7b2c\u4e00\u884c\u6709\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\uff0c\u5b83\u4f1a\u8fd4\u56de\u5728\u4e00\u4e2a Some \u6210\u5458\u4e2d\u3002 ? \u8fd0\u7b97\u7b26\u4f5c\u7528\u4e8e\u5176\u4e2d\u7ed9\u4e86\u6211\u4eec\u4e00\u4e2a\u7b80\u6d01\u7684\u8868\u8fbe\u8fd9\u79cd\u903b\u8f91\u7684\u65b9\u5f0f\u3002 \u5982\u679c\u6211\u4eec\u4e0d\u80fd\u5728 Option \u4e0a\u4f7f\u7528 ? \u8fd0\u7b97\u7b26\uff0c\u5219\u4e0d\u5f97\u4e0d\u4f7f\u7528\u66f4\u591a\u7684\u65b9\u6cd5\u8c03\u7528\u6216\u8005 match \u8868\u8fbe\u5f0f\u6765\u5b9e\u73b0\u8fd9\u4e9b\u903b\u8f91\u3002 \u6ce8\u610f \u4f60\u53ef\u4ee5\u5728\u8fd4\u56de Result \u7684\u51fd\u6570\u4e2d\u5bf9 Result \u4f7f\u7528 ? \u8fd0\u7b97\u7b26\uff0c\u53ef\u4ee5\u5728\u8fd4\u56de Option \u7684\u51fd\u6570\u4e2d\u5bf9 Option \u4f7f\u7528 ? \u8fd0\u7b97\u7b26\uff0c\u4f46\u662f\u4e0d\u53ef\u4ee5\u6df7\u5408\u642d\u914d\u3002 ? \u8fd0\u7b97\u7b26\u4e0d\u4f1a\u81ea\u52a8\u5c06 Result \u8f6c\u5316\u4e3a Option \uff0c\u53cd\u4e4b\u4ea6\u7136\uff1b \u5728\u8fd9\u4e9b\u60c5\u51b5\u4e0b\uff0c\u53ef\u4ee5\u4f7f\u7528\u7c7b\u4f3c Result \u7684 ok \u65b9\u6cd5\u6216\u8005 Option \u7684 ok_or \u65b9\u6cd5\u6765\u663e\u5f0f\u8f6c\u6362\u3002 \u76ee\u524d\u4e3a\u6b62\uff0c\u6240\u4f7f\u7528\u7684\u6240\u6709 main \u51fd\u6570\u90fd\u8fd4\u56de () \u3002 main \u51fd\u6570\u662f\u7279\u6b8a\u7684\u56e0\u4e3a\u5b83\u662f\u53ef\u6267\u884c\u7a0b\u5e8f\u7684\u5165\u53e3\u70b9\u548c\u9000\u51fa\u70b9\uff0c\u4e3a\u4e86\u4f7f\u7a0b\u5e8f\u80fd\u6b63\u5e38\u5de5\u4f5c\uff0c\u5176\u53ef\u4ee5\u8fd4\u56de\u7684\u7c7b\u578b\u662f\u6709\u9650\u5236\u7684\u3002 \u5e78\u8fd0\u7684\u662f main \u51fd\u6570\u4e5f\u53ef\u4ee5\u8fd4\u56de Result<(), E> \uff0c \u4e0b\u9762\u793a\u4f8b\u4fee\u6539\u4e86 main \u7684\u8fd4\u56de\u503c\u4e3a Result<(), Box<dyn Error>> \u5e76\u5728\u7ed3\u5c3e\u589e\u52a0\u4e86\u4e00\u4e2a Ok(()) \u4f5c\u4e3a\u8fd4\u56de\u503c\u3002 \u8fd9\u6bb5\u4ee3\u7801\u53ef\u4ee5\u7f16\u8bd1\uff1a // \u4fee\u6539 main \u8fd4\u56de Result<(), E> \u5141\u8bb8\u5bf9 Result \u503c\u4f7f\u7528 ? \u8fd0\u7b97\u7b26 use std :: error :: Error ; use std :: fs :: File ; fn main () -> Result < (), Box < dyn Error >> { let f = File :: open ( \"hello.txt\" ) ? ; Ok (()) } Box<dyn Error> \u7c7b\u578b\u662f\u4e00\u4e2a trait \u5bf9\u8c61\uff08 trait object\uff09\u7b2c\u5341\u4e03\u7ae0 \u201c \u4e3a\u4f7f\u7528\u4e0d\u540c\u7c7b\u578b\u7684\u503c\u800c\u8bbe\u8ba1\u7684 trait \u5bf9\u8c61 \u201d \u90e8\u5206\u4f1a\u505a\u4ecb\u7ecd\u3002 \u76ee\u524d\u53ef\u4ee5\u5c06 Box<dyn Error> \u7406\u89e3\u4e3a \u201c \u4efb\u4f55\u7c7b\u578b\u7684\u9519\u8bef \u201d\u3002 \u5728\u8fd4\u56de Box<dyn Error> \u9519\u8bef\u7c7b\u578b main \u51fd\u6570\u4e2d\u5bf9 Result \u4f7f\u7528 ? \u662f\u5141\u8bb8\u7684\uff0c\u56e0\u4e3a\u5b83\u5141\u8bb8\u4efb\u4f55 Err \u503c\u63d0\u524d\u8fd4\u56de\u3002 \u5f53 main \u51fd\u6570\u8fd4\u56de Result<(), E> \uff0c \u5982\u679c main \u8fd4\u56de Ok(()) \u53ef\u6267\u884c\u7a0b\u5e8f\u4f1a\u4ee5 0 \u503c\u9000\u51fa\uff0c \u800c\u5982\u679c main \u8fd4\u56de Err \u503c\u5219\u4f1a\u4ee5\u975e\u96f6\u503c\u9000\u51fa\uff1b \u6210\u529f\u9000\u51fa\u7684\u7a0b\u5e8f\u4f1a\u8fd4\u56de\u6574\u6570 0 \uff0c\u8fd0\u884c\u9519\u8bef\u7684\u7a0b\u5e8f\u4f1a\u8fd4\u56de\u975e 0 \u7684\u6574\u6570\u3002 Rust \u4e5f\u4f1a\u4ece\u4e8c\u8fdb\u5236\u7a0b\u5e8f\u4e2d\u8fd4\u56de\u4e0e\u8fd9\u4e2a\u60ef\u4f8b\u76f8\u517c\u5bb9\u7684\u6574\u6570\u3002 main \u51fd\u6570\u4e5f\u53ef\u4ee5\u8fd4\u56de\u4efb\u4f55\u5b9e\u73b0\u4e86 std::process::Termination trait \u7684\u7c7b\u578b\u3002 \u622a\u81f3\u7f16\u5199\u65f6\uff0c Termination trait \u662f\u4e00\u4e2a\u4e0d\u7a33\u5b9a\u529f\u80fd\uff08unstable feature\uff09\uff0c\u53ea\u80fd\u7528\u4e8e Nightly Rust \u4e2d\uff0c \u6240\u4ee5\u4f60\u4e0d\u80fd\u5728 \u7a33\u5b9a\u7248 Rust\uff08Stable Rust\uff09\u4e2d\u7528\u81ea\u5df1\u7684\u7c7b\u578b\u53bb\u5b9e\u73b0\uff0c\u4e0d\u8fc7\u6709\u671d\u4e00\u65e5\u5e94\u8be5\u53ef\u4ee5\uff01","title":"\u54ea\u91cc\u4f7f\u7528 ? \u8fd0\u7b97\u7b26"},{"location":"error-handing/#_6","text":"\u90a3\u4e48\uff0c\u8be5\u5982\u4f55\u51b3\u5b9a\u4f55\u65f6\u5e94\u8be5 panic! \u4ee5\u53ca\u4f55\u65f6\u5e94\u8be5\u8fd4\u56de Result \u5462\uff1f \u5982\u679c\u4ee3\u7801 panic \uff0c\u5c31\u6ca1\u6709\u6062\u590d\u7684\u53ef\u80fd\u3002\u4f60\u53ef\u4ee5\u9009\u62e9\u5bf9\u4efb\u4f55\u9519\u8bef\u573a\u666f\u90fd\u8c03\u7528 panic! \uff0c\u4e0d\u7ba1\u662f\u5426\u6709\u53ef\u80fd\u6062\u590d\uff0c\u4e0d\u8fc7\u8fd9\u6837\u5c31\u662f\u4f60\u4ee3\u66ff\u8c03\u7528\u8005\u51b3\u5b9a\u4e86\u8fd9\u662f\u4e0d\u53ef\u6062\u590d\u7684\u3002 \u9009\u62e9\u8fd4\u56de Result \u503c\u7684\u8bdd\uff0c\u5c31\u5c06\u9009\u62e9\u6743\u4ea4\u7ed9\u4e86\u8c03\u7528\u8005\uff0c\u800c\u4e0d\u662f\u4ee3\u66ff\u4ed6\u4eec\u505a\u51fa\u51b3\u5b9a\u3002\u8c03\u7528\u8005\u53ef\u80fd\u4f1a\u9009\u62e9\u4ee5\u7b26\u5408\u4ed6\u4eec\u573a\u666f\u7684\u65b9\u5f0f\u5c1d\u8bd5\u6062\u590d\uff0c\u6216\u8005\u4e5f\u53ef\u80fd\u5e72\u8106\u5c31\u8ba4\u4e3a Err \u662f\u4e0d\u53ef\u6062\u590d\u7684\uff0c\u6240\u4ee5\u4ed6\u4eec\u4e5f\u53ef\u80fd\u4f1a\u8c03\u7528 panic! \u5e76\u5c06\u53ef\u6062\u590d\u7684\u9519\u8bef\u53d8\u6210\u4e86\u4e0d\u53ef\u6062\u590d\u7684\u9519\u8bef\u3002 \u56e0\u6b64\u8fd4\u56de Result \u662f\u5b9a\u4e49\u53ef\u80fd\u4f1a\u5931\u8d25\u7684\u51fd\u6570\u7684\u4e00\u4e2a\u597d\u7684\u9ed8\u8ba4\u9009\u62e9\u3002 \u5728\u4e00\u4e9b\u7c7b\u4f3c \u793a\u4f8b \u3001 \u539f\u578b\u4ee3\u7801 \uff08prototype code\uff09\u548c \u6d4b\u8bd5 \u4e2d\uff0c panic \u6bd4\u8fd4\u56de Result \u66f4\u4e3a\u5408\u9002\uff0c\u4e0d\u8fc7\u4ed6\u4eec\u5e76\u4e0d\u5e38\u89c1\u3002","title":"\u9519\u8bef\u5904\u7406\u6289\u62e9"},{"location":"error-handing/#panic_1","text":"\u5f53\u4f60\u7f16\u5199\u4e00\u4e2a \u793a\u4f8b \u6765\u5c55\u793a\u4e00\u4e9b\u6982\u5ff5\u65f6\uff0c \u5728\u62e5\u6709\u5065\u58ee\u7684\u9519\u8bef\u5904\u7406\u4ee3\u7801\u7684\u540c\u65f6\u4e5f\u4f1a\u4f7f\u5f97\u4f8b\u5b50\u4e0d\u90a3\u4e48\u660e\u786e\u3002 \u4f8b\u5982\uff0c\u8c03\u7528\u4e00\u4e2a\u7c7b\u4f3c unwrap \u8fd9\u6837\u53ef\u80fd panic! \u7684\u65b9\u6cd5\u53ef\u4ee5\u88ab\u7406\u89e3\u4e3a\u4e00\u4e2a\u4f60\u5b9e\u9645\u5e0c\u671b\u7a0b\u5e8f\u5904\u7406\u9519\u8bef\u65b9\u5f0f\u7684\u5360\u4f4d\u7b26\uff0c\u5b83\u6839\u636e\u5176\u4f59\u4ee3\u7801\u8fd0\u884c\u65b9\u5f0f\u53ef\u80fd\u4f1a\u5404\u4e0d\u76f8\u540c\u3002 \u7c7b\u4f3c\u5730\uff0c\u5728\u51c6\u5907\u597d\u51b3\u5b9a\u5982\u4f55\u5904\u7406\u9519\u8bef\u4e4b\u524d\uff0c unwrap \u548c expect \u65b9\u6cd5\u5728\u539f\u578b\u8bbe\u8ba1\u65f6\u975e\u5e38\u65b9\u4fbf\u3002 \u5f53\u6211\u4eec\u51c6\u5907\u597d\u8ba9\u7a0b\u5e8f\u66f4\u52a0\u5065\u58ee\u65f6\uff0c\u5b83\u4eec\u4f1a\u5728\u4ee3\u7801\u4e2d\u7559\u4e0b\u6e05\u6670\u7684\u6807\u8bb0\u3002 \u5982\u679c\u65b9\u6cd5\u8c03\u7528\u5728\u6d4b\u8bd5\u4e2d\u5931\u8d25\u4e86\uff0c\u6211\u4eec\u5e0c\u671b\u8fd9\u4e2a\u6d4b\u8bd5\u90fd\u5931\u8d25\uff0c\u5373\u4fbf\u8fd9\u4e2a\u65b9\u6cd5\u5e76\u4e0d\u662f\u9700\u8981\u6d4b\u8bd5\u7684\u529f\u80fd\u3002\u56e0\u4e3a panic! \u4f1a\u5c06\u6d4b\u8bd5\u6807\u8bb0\u4e3a\u5931\u8d25\uff0c\u6b64\u65f6\u8c03\u7528 unwrap \u6216 expect \u662f\u6070\u5f53\u7684\u3002","title":"\u793a\u4f8b\u3001\u4ee3\u7801\u539f\u578b\u548c\u6d4b\u8bd5\u90fd\u975e\u5e38\u9002\u5408 panic"},{"location":"error-handing/#_7","text":"\u5f53\u4f60\u6709\u4e00\u4e9b\u5176\u4ed6\u7684\u903b\u8f91\u6765\u786e\u4fdd Result \u4f1a\u662f Ok \u503c\u65f6\uff0c\u8c03\u7528 unwrap \u4e5f\u662f\u5408\u9002\u7684\uff0c\u867d\u7136\u7f16\u8bd1\u5668\u65e0\u6cd5\u7406\u89e3\u8fd9\u79cd\u903b\u8f91\u3002 \u4f60\u4ecd\u7136\u9700\u8981\u5904\u7406\u4e00\u4e2a Result \u503c\uff1a\u5373\u4f7f\u5728\u4f60\u7684\u7279\u5b9a\u60c5\u51b5\u4e0b\u903b\u8f91\u4e0a\u662f\u4e0d\u53ef\u80fd\u7684\uff0c\u4f60\u6240\u8c03\u7528\u7684\u4efb\u4f55\u64cd\u4f5c\u4ecd\u7136\u6709\u53ef\u80fd\u5931\u8d25\u3002 \u5982\u679c\u901a\u8fc7\u4eba\u5de5\u68c0\u67e5\u4ee3\u7801\u6765\u786e\u4fdd\u6c38\u8fdc\u4e5f\u4e0d\u4f1a\u51fa\u73b0 Err \u503c\uff0c\u90a3\u4e48\u8c03\u7528 unwrap \u4e5f\u662f\u5b8c\u5168\u53ef\u4ee5\u63a5\u53d7\u7684\uff0c\u8fd9\u91cc\u662f\u4e00\u4e2a\u4f8b\u5b50\uff1a use std :: net :: IpAddr ; // \u6c38\u8fdc\u4e0d\u53ef\u80fd\u5931\u8d25\uff0c\u4f46\u8981\u5904\u7406Result\uff0c\u53ef\u4ee5\u4f7f\u7528unwrap; let home : IpAddr = \"127.0.0.1\" . parse (). unwrap (); \u901a\u8fc7\u89e3\u6790\u4e00\u4e2a\u786c\u7f16\u7801\u7684\u5b57\u7b26\u6765\u521b\u5efa\u4e00\u4e2a IpAddr \u5b9e\u4f8b\u3002\u53ef\u4ee5\u770b\u51fa 127.0.0.1 \u662f\u4e00\u4e2a\u6709\u6548\u7684 IP \u5730\u5740\uff0c\u6240\u4ee5\u8fd9\u91cc\u4f7f\u7528 unwrap \u662f\u53ef\u4ee5\u63a5\u53d7\u7684\u3002 \u7136\u800c\uff0c\u62e5\u6709\u4e00\u4e2a\u786c\u7f16\u7801\u7684\u6709\u6548\u7684\u5b57\u7b26\u4e32\u4e5f\u4e0d\u80fd\u6539\u53d8 parse \u65b9\u6cd5\u7684\u8fd4\u56de\u503c\u7c7b\u578b\uff1a\u5b83\u4ecd\u7136\u662f\u4e00\u4e2a Result \u503c\uff0c\u800c\u7f16\u8bd1\u5668\u4ecd\u7136\u4f1a\u8981\u6c42\u6211\u4eec\u5904\u7406\u8fd9\u4e2a Result \uff0c\u597d\u50cf\u8fd8\u662f\u6709\u53ef\u80fd\u51fa\u73b0 Err \u6210\u5458\u90a3\u6837\u3002 \u8fd9\u662f\u56e0\u4e3a\u7f16\u8bd1\u5668\u8fd8\u6ca1\u6709\u667a\u80fd\u5230\u53ef\u4ee5\u8bc6\u522b\u51fa\u8fd9\u4e2a\u5b57\u7b26\u4e32\u603b\u662f\u4e00\u4e2a\u6709\u6548\u7684 IP \u5730\u5740\u3002\u5982\u679c IP \u5730\u5740\u5b57\u7b26\u4e32\u6765\u6e90\u4e8e\u7528\u6237\u800c\u4e0d\u662f\u786c\u7f16\u7801\u8fdb\u7a0b\u5e8f\u4e2d\u7684\u8bdd\uff0c\u90a3\u4e48\u5c31 \u786e\u5b9e \u6709\u5931\u8d25\u7684\u53ef\u80fd\u6027\uff0c\u8fd9\u65f6\u5c31\u7edd\u5bf9\u9700\u8981\u6211\u4eec\u4ee5\u4e00\u79cd\u66f4\u5065\u58ee\u7684\u65b9\u5f0f\u5904\u7406 Result \u4e86\u3002","title":"\u5f53\u6211\u4eec\u77e5\u9053\u66f4\u591a\u7684\u60c5\u51b5"},{"location":"error-handing/#_8","text":"\u5728\u5f53\u6709\u53ef\u80fd\u4f1a\u5bfc\u81f4 \u6709\u5bb3\u72b6\u6001 \u7684\u60c5\u51b5\u4e0b\u5efa\u8bae\u4f7f\u7528 panic! \u2014\u2014 \u5728\u8fd9\u91cc\uff0c \u6709\u5bb3\u72b6\u6001 \u662f\u6307\u5f53\u4e00\u4e9b\u5047\u8bbe\u3001\u4fdd\u8bc1\u3001\u534f\u8bae\u6216\u4e0d\u53ef\u53d8\u6027\u88ab\u6253\u7834\u7684\u72b6\u6001 \uff0c\u4f8b\u5982 \u65e0\u6548\u7684\u503c \u3001 \u81ea\u76f8\u77db\u76fe\u7684\u503c \u6216\u8005 \u88ab\u4f20\u9012\u4e86\u4e0d\u5b58\u5728\u7684\u503c \u2014\u2014 \u5916\u52a0\u5982\u4e0b\u51e0\u79cd\u60c5\u51b5\uff1a \u6709\u5bb3\u72b6\u6001\u662f \u975e\u9884\u671f\u7684\u884c\u4e3a \uff0c\u4e0e\u5076\u5c14\u4f1a\u53d1\u751f\u7684\u884c\u4e3a\u76f8\u5bf9\uff0c\u6bd4\u5982\u7528\u6237\u8f93\u5165\u4e86\u9519\u8bef\u683c\u5f0f\u7684\u6570\u636e\u3002 \u5728\u6b64\u4e4b\u540e \u4ee3\u7801\u7684\u8fd0\u884c\u4f9d\u8d56\u4e8e\u4e0d\u5904\u4e8e\u8fd9\u79cd\u6709\u5bb3\u72b6\u6001 \uff0c\u800c\u4e0d\u662f\u5728\u6bcf\u4e00\u6b65\u90fd\u68c0\u67e5\u662f\u5426\u6709\u95ee\u9898\u3002 \u6ca1\u6709\u53ef\u884c\u7684\u624b\u6bb5\u6765\u5c06\u6709\u5bb3\u72b6\u6001\u4fe1\u606f\u7f16\u7801\u8fdb\u6240\u4f7f\u7528\u7684\u7c7b\u578b\u4e2d\u7684\u60c5\u51b5 \u3002\u6211\u4eec\u4f1a\u5728\u7b2c\u5341\u4e03\u7ae0 \u201c \u5c06\u72b6\u6001\u548c\u884c\u4e3a\u7f16\u7801\u4e3a\u7c7b\u578b \u201d \u90e8\u5206\u901a\u8fc7\u4e00\u4e2a\u4f8b\u5b50\u6765\u8bf4\u660e\u6211\u4eec\u7684\u610f\u601d\u3002 \u5982\u679c\u522b\u4eba\u8c03\u7528\u4f60\u7684\u4ee3\u7801\u5e76\u4f20\u9012\u4e86\u4e00\u4e2a\u6ca1\u6709\u610f\u4e49\u7684\u503c\uff0c\u6700\u597d\u7684\u60c5\u51b5\u4e5f\u8bb8\u5c31\u662f panic! \u5e76\u8b66\u544a\u4f7f\u7528\u4f60\u7684\u5e93\u7684\u4eba\u4ed6\u7684\u4ee3\u7801\u4e2d\u6709 bug \u4ee5\u4fbf\u4ed6\u80fd\u5728\u5f00\u53d1\u65f6\u5c31\u4fee\u590d\u5b83\u3002 \u7c7b\u4f3c\u7684\uff0c\u5982\u679c\u4f60\u6b63\u5728\u8c03\u7528\u4e0d\u53d7\u4f60\u63a7\u5236\u7684\u5916\u90e8\u4ee3\u7801\uff0c\u5e76\u4e14\u5b83\u8fd4\u56de\u4e86\u4e00\u4e2a\u4f60\u65e0\u6cd5\u4fee\u590d\u7684\u65e0\u6548\u72b6\u6001\uff0c\u90a3\u4e48 panic! \u5f80\u5f80\u662f\u5408\u9002\u7684\u3002 \u7136\u800c\u5f53\u9519\u8bef\u9884\u671f\u4f1a\u51fa\u73b0\u65f6\uff0c\u8fd4\u56de Result \u4ecd\u8981\u6bd4\u8c03\u7528 panic! \u66f4\u4e3a\u5408\u9002\u3002 \u8fd9\u6837\u7684\u4f8b\u5b50\u5305\u62ec\u89e3\u6790\u5668\u63a5\u6536\u5230\u683c\u5f0f\u9519\u8bef\u7684\u6570\u636e\uff0c\u6216\u8005 HTTP \u8bf7\u6c42\u8fd4\u56de\u4e86\u4e00\u4e2a\u8868\u660e\u89e6\u53d1\u4e86\u9650\u6d41\u7684\u72b6\u6001\u3002 \u5728\u8fd9\u4e9b\u4f8b\u5b50\u4e2d\uff0c\u5e94\u8be5\u901a\u8fc7\u8fd4\u56de Result \u6765\u8868\u660e\u5931\u8d25\u9884\u671f\u662f\u53ef\u80fd\u7684\uff0c\u8fd9\u6837\u5c06\u6709\u5bb3\u72b6\u6001\u5411\u4e0a\u4f20\u64ad\uff0c\u8c03\u7528\u8005\u5c31\u53ef\u4ee5\u51b3\u5b9a\u8be5\u5982\u4f55\u5904\u7406\u8fd9\u4e2a\u95ee\u9898\u3002 \u4f7f\u7528 panic! \u6765\u5904\u7406\u8fd9\u4e9b\u60c5\u51b5\u5c31\u4e0d\u662f\u6700\u597d\u7684\u9009\u62e9\u3002 \u5f53\u4ee3\u7801\u5bf9\u503c\u8fdb\u884c\u64cd\u4f5c\u65f6\uff0c\u5e94\u8be5\u9996\u5148\u9a8c\u8bc1\u503c\u662f\u6709\u6548\u7684\uff0c\u5e76\u5728\u5176\u65e0\u6548\u65f6 panic! \u3002 \u8fd9\u4e3b\u8981\u662f\u51fa\u4e8e\u5b89\u5168\u7684\u539f\u56e0\uff1a\u5c1d\u8bd5\u64cd\u4f5c\u65e0\u6548\u6570\u636e\u4f1a\u66b4\u9732\u4ee3\u7801\u6f0f\u6d1e\uff0c\u8fd9\u5c31\u662f\u6807\u51c6\u5e93\u5728\u5c1d\u8bd5\u8d8a\u754c\u8bbf\u95ee\u6570\u7ec4\u65f6\u4f1a panic! \u7684\u4e3b\u8981\u539f\u56e0\uff1a\u5c1d\u8bd5\u8bbf\u95ee\u4e0d\u5c5e\u4e8e\u5f53\u524d\u6570\u636e\u7ed3\u6784\u7684\u5185\u5b58\u662f\u4e00\u4e2a\u5e38\u89c1\u7684\u5b89\u5168\u9690\u60a3\u3002 \u51fd\u6570\u901a\u5e38\u90fd\u9075\u5faa \u5951\u7ea6 \uff08contracts\uff09\uff1a \u4ed6\u4eec\u7684\u884c\u4e3a\u53ea\u6709\u5728\u8f93\u5165\u6ee1\u8db3\u7279\u5b9a\u6761\u4ef6\u65f6\u624d\u80fd\u5f97\u5230\u4fdd\u8bc1 \u3002\u5f53\u8fdd\u53cd\u5951\u7ea6\u65f6 panic \u662f\u6709\u9053\u7406\u7684\uff0c\u56e0\u4e3a\u8fd9\u901a\u5e38\u4ee3\u8868\u8c03\u7528\u65b9\u7684 bug \uff0c\u800c\u4e14\u8fd9\u4e5f\u4e0d\u662f\u90a3\u79cd\u4f60\u5e0c\u671b\u6240\u8c03\u7528\u7684\u4ee3\u7801\u5fc5\u987b\u5904\u7406\u7684\u9519\u8bef\u3002 \u4e8b\u5b9e\u4e0a\u6240\u8c03\u7528\u7684\u4ee3\u7801\u4e5f\u6ca1\u6709\u5408\u7406\u7684\u65b9\u5f0f\u6765\u6062\u590d\uff0c\u800c\u662f\u9700\u8981\u8c03\u7528\u65b9\u7684 \u7a0b\u5e8f\u5458 \u4fee\u590d\u5176\u4ee3\u7801\u3002\u51fd\u6570\u7684\u5951\u7ea6\uff0c\u5c24\u5176\u662f\u5f53\u8fdd\u53cd\u5b83\u4f1a\u9020\u6210 panic \u7684\u5951\u7ea6\uff0c\u5e94\u8be5\u5728\u51fd\u6570\u7684 API \u6587\u6863\u4e2d\u5f97\u5230\u89e3\u91ca\u3002 \u867d\u7136\u5728\u6240\u6709\u51fd\u6570\u4e2d\u90fd\u62e5\u6709\u8bb8\u591a\u9519\u8bef\u68c0\u67e5\u662f\u5197\u957f\u800c\u70e6\u4eba\u7684\u3002 \u5e78\u8fd0\u7684\u662f\uff0c\u53ef\u4ee5\u5229\u7528 Rust \u7684\u7c7b\u578b\u7cfb\u7edf\uff08\u4ee5\u53ca\u7f16\u8bd1\u5668\u7684\u7c7b\u578b\u68c0\u67e5\uff09\u4e3a\u4f60\u8fdb\u884c\u5f88\u591a\u68c0\u67e5\u3002 \u5982\u679c\u51fd\u6570\u6709\u4e00\u4e2a\u7279\u5b9a\u7c7b\u578b\u7684\u53c2\u6570\uff0c\u53ef\u4ee5\u5728\u77e5\u6653\u7f16\u8bd1\u5668\u5df2\u7ecf\u786e\u4fdd\u5176\u62e5\u6709\u4e00\u4e2a\u6709\u6548\u503c\u7684\u524d\u63d0\u4e0b\u8fdb\u884c\u4f60\u7684\u4ee3\u7801\u903b\u8f91\u3002 \u4f8b\u5982\uff0c\u5982\u679c\u4f60\u4f7f\u7528\u4e86\u4e00\u4e2a\u5e76\u4e0d\u662f Option \u7684\u7c7b\u578b\uff0c\u5219\u7a0b\u5e8f\u671f\u671b\u5b83\u662f \u6709\u503c \u7684\u5e76\u4e14\u4e0d\u662f \u7a7a\u503c , \u4f60\u7684\u4ee3\u7801\u65e0\u9700\u5904\u7406 Some \u548c None \u8fd9\u4e24\u79cd\u60c5\u51b5\uff0c\u5b83\u53ea\u4f1a\u6709\u4e00\u79cd\u60c5\u51b5\u5c31\u662f\u7edd\u5bf9\u4f1a\u6709\u4e00\u4e2a\u503c\u3002 \u5c1d\u8bd5\u5411\u51fd\u6570\u4f20\u9012\u7a7a\u503c\u7684\u4ee3\u7801\u751a\u81f3\u6839\u672c\u4e0d\u80fd\u7f16\u8bd1\uff0c\u6240\u4ee5\u4f60\u7684\u51fd\u6570\u5728\u8fd0\u884c\u65f6\u6ca1\u6709\u5fc5\u8981\u5224\u7a7a\u3002 \u53e6\u5916\u4e00\u4e2a\u4f8b\u5b50\u662f\u4f7f\u7528\u50cf u32 \u8fd9\u6837\u7684\u65e0\u7b26\u53f7\u6574\u578b\uff0c\u4e5f\u4f1a\u786e\u4fdd\u5b83\u6c38\u8fdc\u4e0d\u4e3a\u8d1f\u3002","title":"\u9519\u8bef\u5904\u7406\u6307\u5bfc\u539f\u5219"},{"location":"error-handing/#_9","text":"\u8ba9\u6211\u4eec\u4f7f\u7528 Rust \u7c7b\u578b\u7cfb\u7edf\u7684\u601d\u60f3\u6765\u8fdb\u4e00\u6b65\u786e\u4fdd\u503c\u7684\u6709\u6548\u6027\uff0c\u5e76\u5c1d\u8bd5\u521b\u5efa\u4e00\u4e2a\u81ea\u5b9a\u4e49\u7c7b\u578b\u4ee5\u8fdb\u884c\u9a8c\u8bc1\u3002 \u56de\u5fc6\u4e00\u4e0b\u7b2c\u4e8c\u7ae0\u7684\u731c\u731c\u770b\u6e38\u620f\uff0c\u6211\u4eec\u7684\u4ee3\u7801\u8981\u6c42\u7528\u6237\u731c\u6d4b\u4e00\u4e2a 1 \u5230 100 \u4e4b\u95f4\u7684\u6570\u5b57\uff0c\u5728\u5c06\u5176\u4e0e\u79d8\u5bc6\u6570\u5b57\u505a\u6bd4\u8f83\u4e4b\u524d\u6211\u4eec\u4ece\u672a\u9a8c\u8bc1\u7528\u6237\u7684\u731c\u6d4b\u662f\u4f4d\u4e8e\u8fd9\u4e24\u4e2a\u6570\u5b57\u4e4b\u95f4\u7684\uff0c\u6211\u4eec\u53ea\u9a8c\u8bc1\u5b83\u662f\u5426\u4e3a\u6b63\u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5176\u5f71\u54cd\u5e76\u4e0d\u662f\u5f88\u4e25\u91cd\uff1a\u201cToo high\u201d \u6216 \u201cToo low\u201d \u7684\u8f93\u51fa\u4ecd\u7136\u662f\u6b63\u786e\u7684\u3002 \u4f46\u662f\u8fd9\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u5f15\u5bfc\u7528\u6237\u5f97\u51fa\u6709\u6548\u731c\u6d4b\u7684\u8f85\u52a9\uff0c\u4f8b\u5982\u5f53\u7528\u6237\u731c\u6d4b\u4e00\u4e2a\u8d85\u51fa\u8303\u56f4\u7684\u6570\u5b57\u6216\u8005\u8f93\u5165\u5b57\u6bcd\u65f6\u91c7\u53d6\u4e0d\u540c\u7684\u884c\u4e3a\u3002 \u4e00\u79cd\u5b9e\u73b0\u65b9\u5f0f\u662f\u5c06\u731c\u6d4b\u89e3\u6790\u6210 i32 \u800c\u4e0d\u4ec5\u4ec5\u662f u32 \uff0c\u6765\u9ed8\u8bb8\u8f93\u5165\u8d1f\u6570\uff0c\u63a5\u7740\u68c0\u67e5\u6570\u5b57\u662f\u5426\u5728\u8303\u56f4\u5185\uff1a loop { // --snip-- let guess : i32 = match guess . trim (). parse () { Ok ( num ) => num , Err ( _ ) => continue , }; // if \u8868\u8fbe\u5f0f\u68c0\u67e5\u4e86\u503c\u662f\u5426\u8d85\u51fa\u8303\u56f4\uff0c\u544a\u8bc9\u7528\u6237\u51fa\u4e86\u4ec0\u4e48\u95ee\u9898\uff0c\u5e76\u8c03\u7528 continue \u5f00\u59cb\u4e0b\u4e00\u6b21\u5faa\u73af\uff0c\u8bf7\u6c42\u53e6\u4e00\u4e2a\u731c\u6d4b\u3002 // if \u8868\u8fbe\u5f0f\u4e4b\u540e\uff0c\u5c31\u53ef\u4ee5\u5728\u77e5\u9053 guess \u5728 1 \u5230 100 \u4e4b\u95f4\u7684\u60c5\u51b5\u4e0b\u4e0e\u79d8\u5bc6\u6570\u5b57\u4f5c\u6bd4\u8f83\u4e86\u3002 if guess < 1 || guess > 100 { println! ( \"The secret number will be between 1 and 100.\" ); continue ; } match guess . cmp ( & secret_number ) { // --snip-- } \u7136\u800c\uff0c\u8fd9\u5e76\u4e0d\u662f\u4e00\u4e2a\u7406\u60f3\u7684\u89e3\u51b3\u65b9\u6848\uff1a\u5982\u679c\u8ba9\u7a0b\u5e8f\u4ec5\u4ec5\u5904\u7406 1 \u5230 100 \u4e4b\u95f4\u7684\u503c\u662f\u4e00\u4e2a\u7edd\u5bf9\u9700\u8981\u6ee1\u8db3\u7684\u8981\u6c42\uff0c\u800c\u4e14\u7a0b\u5e8f\u4e2d\u7684\u5f88\u591a\u51fd\u6570\u90fd\u6709\u8fd9\u6837\u7684\u8981\u6c42\uff0c \u5728\u6bcf\u4e2a\u51fd\u6570\u4e2d\u90fd\u6709\u8fd9\u6837\u7684\u68c0\u67e5\u5c06\u662f\u975e\u5e38\u5197\u4f59\u7684 \uff08\u5e76\u53ef\u80fd\u6f5c\u5728\u7684\u5f71\u54cd\u6027\u80fd\uff09\u3002 \u76f8\u53cd\u6211\u4eec\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u65b0\u7c7b\u578b\u6765\u5c06\u9a8c\u8bc1\u653e\u5165\u521b\u5efa\u5176\u5b9e\u4f8b\u7684\u51fd\u6570\u4e2d\uff0c\u800c\u4e0d\u662f\u5230\u5904\u91cd\u590d\u8fd9\u4e9b\u68c0\u67e5\u3002\u8fd9\u6837\u5c31\u53ef\u4ee5\u5b89\u5168\u7684\u5728\u51fd\u6570\u7b7e\u540d\u4e2d\u4f7f\u7528\u65b0\u7c7b\u578b\u5e76\u76f8\u4fe1\u4ed6\u4eec\u63a5\u6536\u5230\u7684\u503c\u3002 \u4e0b\u9762\u793a\u4f8b\u4e2d\u5c55\u793a\u4e86\u4e00\u4e2a\u5b9a\u4e49 Guess \u7c7b\u578b\u7684\u65b9\u6cd5\uff0c\u53ea\u6709\u5728 new \u51fd\u6570\u63a5\u6536\u5230 1 \u5230 100 \u4e4b\u95f4\u7684\u503c\u65f6\u624d\u4f1a\u521b\u5efa Guess \u7684\u5b9e\u4f8b\uff1a // \u4e00\u4e2a Guess \u7c7b\u578b\uff0c\u5b83\u53ea\u5728\u503c\u4f4d\u4e8e 1 \u548c 100 \u4e4b\u95f4\u65f6\u624d\u7ee7\u7eed // \u9996\u5148\uff0c\u5b9a\u4e49\u4e86\u4e00\u4e2a\u5305\u542b i32 \u7c7b\u578b\u5b57\u6bb5 value \u7684\u7ed3\u6784\u4f53 Guess\u3002\u8fd9\u91cc\u662f\u50a8\u5b58\u731c\u6d4b\u503c\u7684\u5730\u65b9\u3002 pub struct Guess { value : i32 , } impl Guess { // \u63a5\u7740\u5728 Guess \u4e0a\u5b9e\u73b0\u4e86\u4e00\u4e2a\u53eb\u505a new \u7684\u5173\u8054\u51fd\u6570\u6765\u521b\u5efa Guess \u7684\u5b9e\u4f8b\u3002 // new \u5b9a\u4e49\u4e3a\u63a5\u6536\u4e00\u4e2a i32 \u7c7b\u578b\u7684\u53c2\u6570 value \u5e76\u8fd4\u56de\u4e00\u4e2a Guess\u3002 pub fn new ( value : i32 ) -> Guess { // new \u51fd\u6570\u4e2d\u4ee3\u7801\u7684\u6d4b\u8bd5\u786e\u4fdd\u4e86\u5176\u503c\u662f\u5728 1 \u5230 100 \u4e4b\u95f4\u7684\u3002 if value < 1 || value > 100 { // \u5982\u679c value \u6ca1\u6709\u901a\u8fc7\u6d4b\u8bd5\u5219\u8c03\u7528 panic!\uff0c\u8fd9\u4f1a\u8b66\u544a\u8c03\u7528\u8fd9\u4e2a\u51fd\u6570\u7684\u7a0b\u5e8f\u5458\u6709\u4e00\u4e2a\u9700\u8981\u4fee\u6539\u7684 bug\uff0c // \u56e0\u4e3a\u521b\u5efa\u4e00\u4e2a value \u8d85\u51fa\u8303\u56f4\u7684 Guess \u5c06\u4f1a\u8fdd\u53cd Guess::new \u6240\u9075\u5faa\u7684\u5951\u7ea6\u3002 // Guess::new \u4f1a\u51fa\u73b0 panic \u7684\u6761\u4ef6\u5e94\u8be5\u5728\u5176\u516c\u6709 API \u6587\u6863\u4e2d\u88ab\u63d0\u53ca\uff1b panic! ( \"Guess value must be between 1 and 100, got {}.\" , value ); } // \u5982\u679c value \u901a\u8fc7\u4e86\u6d4b\u8bd5\uff0c\u6211\u4eec\u65b0\u5efa\u4e00\u4e2a Guess\uff0c\u5176\u5b57\u6bb5 value \u5c06\u88ab\u8bbe\u7f6e\u4e3a\u53c2\u6570 value \u7684\u503c\uff0c\u63a5\u7740\u8fd4\u56de\u8fd9\u4e2a Guess\u3002 Guess { value } } // \u63a5\u7740, \u5b9e\u73b0\u4e86\u4e00\u4e2a\u501f\u7528\u4e86 self \u7684\u65b9\u6cd5 value\uff0c\u5b83\u6ca1\u6709\u4efb\u4f55\u5176\u4ed6\u53c2\u6570\u5e76\u8fd4\u56de\u4e00\u4e2a i32\u3002 // \u8fd9\u7c7b\u65b9\u6cd5\u6709\u65f6\u88ab\u79f0\u4e3a getter\uff0c\u56e0\u4e3a\u5b83\u7684\u76ee\u7684\u5c31\u662f\u8fd4\u56de\u5bf9\u5e94\u5b57\u6bb5\u7684\u6570\u636e\u3002 // \u8fd9\u6837\u7684\u516c\u6709\u65b9\u6cd5\u662f\u5fc5\u8981\u7684\uff0c\u56e0\u4e3a Guess \u7ed3\u6784\u4f53\u7684 value \u5b57\u6bb5\u662f\u79c1\u6709\u7684\u3002 pub fn value ( & self ) -> i32 { self . value } } \u79c1\u6709\u7684\u5b57\u6bb5 value \u662f\u5f88\u91cd\u8981\u7684\uff0c\u8fd9\u6837\u4f7f\u7528 Guess \u7ed3\u6784\u4f53\u7684\u4ee3\u7801\u5c06\u4e0d\u5141\u8bb8\u76f4\u63a5\u8bbe\u7f6e value \u7684\u503c\uff1a\u8c03\u7528\u8005 \u5fc5\u987b \u4f7f\u7528 Guess::new \u65b9\u6cd5\u6765\u521b\u5efa\u4e00\u4e2a Guess \u7684\u5b9e\u4f8b\uff0c\u8fd9\u5c31\u786e\u4fdd\u4e86\u4e0d\u4f1a\u5b58\u5728\u4e00\u4e2a value \u6ca1\u6709\u901a\u8fc7 Guess::new \u51fd\u6570\u7684\u6761\u4ef6\u68c0\u67e5\u7684 Guess\u3002 \u4e8e\u662f\uff0c\u4e00\u4e2a\u63a5\u6536\uff08\u6216\u8fd4\u56de\uff09 1 \u5230 100 \u4e4b\u95f4\u6570\u5b57\u7684\u51fd\u6570\u5c31\u53ef\u4ee5\u58f0\u660e\u4e3a\u63a5\u6536\uff08\u6216\u8fd4\u56de\uff09 Guess \u7684\u5b9e\u4f8b\uff0c\u800c\u4e0d\u662f i32 \uff0c\u540c\u65f6\u5176\u51fd\u6570\u4f53\u4e2d\u4e5f\u65e0\u9700\u8fdb\u884c\u4efb\u4f55\u989d\u5916\u7684\u68c0\u67e5\u3002","title":"\u521b\u5efa\u81ea\u5b9a\u4e49\u7c7b\u578b\u8fdb\u884c\u6709\u6548\u6027\u9a8c\u8bc1"},{"location":"error-handing/#_10","text":"Rust \u7684\u9519\u8bef\u5904\u7406\u529f\u80fd\u88ab\u8bbe\u8ba1\u4e3a\u5e2e\u52a9\u4f60\u7f16\u5199\u66f4\u52a0\u5065\u58ee\u7684\u4ee3\u7801\u3002 panic! \u5b8f\u4ee3\u8868\u4e00\u4e2a\u7a0b\u5e8f\u65e0\u6cd5\u5904\u7406\u7684\u72b6\u6001\uff0c\u5e76\u505c\u6b62\u6267\u884c\u800c\u4e0d\u662f\u4f7f\u7528\u65e0\u6548\u6216\u4e0d\u6b63\u786e\u7684\u503c\u7ee7\u7eed\u5904\u7406\u3002 Rust \u7c7b\u578b\u7cfb\u7edf\u7684 Result \u679a\u4e3e\u4ee3\u8868\u64cd\u4f5c\u53ef\u80fd\u4f1a\u5728\u4e00\u79cd\u53ef\u4ee5\u6062\u590d\u7684\u60c5\u51b5\u4e0b\u5931\u8d25\u3002 \u53ef\u4ee5\u4f7f\u7528 Result \u6765\u544a\u8bc9\u4ee3\u7801\u8c03\u7528\u8005\u4ed6\u9700\u8981\u5904\u7406\u6f5c\u5728\u7684\u6210\u529f\u6216\u5931\u8d25\u3002 \u5728\u9002\u5f53\u7684\u573a\u666f\u4f7f\u7528 panic! \u548c Result \u5c06\u4f1a\u4f7f\u4f60\u7684\u4ee3\u7801\u5728\u9762\u5bf9\u4e0d\u53ef\u907f\u514d\u7684\u9519\u8bef\u65f6\u663e\u5f97\u66f4\u52a0\u53ef\u9760\u3002","title":"\u603b\u7ed3"},{"location":"generics/","text":"\u6cdb\u578b/Trait/\u751f\u547d\u5468\u671f \u6bcf\u4e00\u4e2a\u7f16\u7a0b\u8bed\u8a00\u90fd\u6709\u9ad8\u6548\u5904\u7406\u91cd\u590d\u6982\u5ff5\u7684\u5de5\u5177\u3002\u5728 Rust \u4e2d\u5176\u5de5\u5177\u4e4b\u4e00\u5c31\u662f \u6cdb\u578b \uff08generics\uff09\u3002 \u6cdb\u578b\u662f\u5177\u4f53\u7c7b\u578b\u6216\u5176\u4ed6\u5c5e\u6027\u7684\u62bd\u8c61\u66ff\u4ee3\u3002 \u6211\u4eec\u53ef\u4ee5\u8868\u8fbe\u6cdb\u578b\u7684\u5c5e\u6027\uff0c\u6bd4\u5982\u4ed6\u4eec\u7684\u884c\u4e3a\u6216\u5982\u4f55\u4e0e\u5176\u4ed6\u6cdb\u578b\u76f8\u5173\u8054\uff0c\u800c\u4e0d\u9700\u8981\u5728\u7f16\u5199\u548c\u7f16\u8bd1\u4ee3\u7801\u65f6\u77e5\u9053\u4ed6\u4eec\u5728\u8fd9\u91cc\u5b9e\u9645\u4e0a\u4ee3\u8868\u4ec0\u4e48\u3002 \u540c\u7406\u4e3a\u4e86\u7f16\u5199\u4e00\u4efd\u53ef\u4ee5\u7528\u4e8e\u591a\u79cd\u5177\u4f53\u503c\u7684\u4ee3\u7801\uff0c\u51fd\u6570\u5e76\u4e0d\u77e5\u9053\u5176\u53c2\u6570\u4e3a\u4f55\u503c\uff0c \u8fd9\u65f6\u5c31\u53ef\u4ee5\u8ba9\u51fd\u6570\u83b7\u53d6\u6cdb\u578b\u800c\u4e0d\u662f\u50cf i32 \u6216 String \u8fd9\u6837\u7684\u5177\u4f53\u7c7b\u578b\u3002 \u6211\u4eec\u5df2\u7ecf\u4f7f\u7528\u8fc7\u7b2c\u516d\u7ae0\u7684 Option<T> \uff0c\u7b2c\u516b\u7ae0\u7684 Vec<T> \u548c HashMap<K, V> \uff0c\u4ee5\u53ca\u7b2c\u4e5d\u7ae0\u7684 Result<T, E> \u8fd9\u4e9b\u6cdb\u578b\u4e86\u3002 \u9996\u5148\uff0c\u6211\u4eec\u5c06\u56de\u987e\u4e00\u4e0b \u63d0\u53d6\u51fd\u6570\u4ee5\u51cf\u5c11\u4ee3\u7801\u91cd\u590d\u7684\u673a\u5236 \u3002\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5c06\u4f7f\u7528\u76f8\u540c\u7684\u6280\u672f\uff0c\u4ece\u4e24\u4e2a\u4ec5\u53c2\u6570\u7c7b\u578b\u4e0d\u540c\u7684\u51fd\u6570\u4e2d\u521b\u5efa\u4e00\u4e2a\u6cdb\u578b\u51fd\u6570\u3002\u6211\u4eec\u4e5f\u4f1a\u8bb2\u5230 \u7ed3\u6784\u4f53 \u548c \u679a\u4e3e \u5b9a\u4e49\u4e2d\u7684\u6cdb\u578b\u3002 \u4e4b\u540e\uff0c\u6211\u4eec\u8ba8\u8bba trait \uff0c\u8fd9\u662f\u4e00\u4e2a \u5b9a\u4e49\u6cdb\u578b\u884c\u4e3a\u7684\u65b9\u6cd5\u3002trait \u53ef\u4ee5\u4e0e\u6cdb\u578b\u7ed3\u5408\u6765\u5c06\u6cdb\u578b\u9650\u5236\u4e3a\u62e5\u6709\u7279\u5b9a\u884c\u4e3a\u7684\u7c7b\u578b\uff0c\u800c\u4e0d\u662f\u4efb\u610f\u7c7b\u578b\u3002 \u6700\u540e\u4ecb\u7ecd \u751f\u547d\u5468\u671f \uff08lifetimes\uff09\uff0c\u5b83\u662f\u4e00\u7c7b\u5141\u8bb8\u6211\u4eec \u5411\u7f16\u8bd1\u5668\u63d0\u4f9b \u5f15\u7528\u5982\u4f55\u76f8\u4e92\u5173\u8054\u7684\u6cdb\u578b \u3002Rust \u7684\u751f\u547d\u5468\u671f\u529f\u80fd\u5141\u8bb8\u5728\u5f88\u591a\u573a\u666f\u4e0b\u501f\u7528\u503c\u7684\u540c\u65f6\u4ecd\u7136\u4f7f\u7f16\u8bd1\u5668\u80fd\u591f\u68c0\u67e5\u8fd9\u4e9b\u5f15\u7528\u7684\u6709\u6548\u6027\u3002 \u63d0\u70bc\u51fd\u6570\u51cf\u5c11\u91cd\u590d \u5728\u4ecb\u7ecd\u6cdb\u578b\u8bed\u6cd5\u4e4b\u524d\uff0c\u9996\u5148\u6765\u56de\u987e\u4e00\u4e2a\u4e0d\u4f7f\u7528\u6cdb\u578b\u7684\u5904\u7406\u91cd\u590d\u7684\u6280\u672f\uff1a \u63d0\u53d6\u4e00\u4e2a\u51fd\u6570 \u3002 \u5f53\u719f\u6089\u4e86\u8fd9\u4e2a\u6280\u672f\u4ee5\u540e\uff0c\u6211\u4eec\u5c06\u4f7f\u7528\u76f8\u540c\u7684\u673a\u5236\u6765\u63d0\u53d6\u4e00\u4e2a\u6cdb\u578b\u51fd\u6570\uff01\u5982\u540c\u4f60\u8bc6\u522b\u51fa\u53ef\u4ee5\u63d0\u53d6\u5230\u51fd\u6570\u4e2d\u91cd\u590d\u4ee3\u7801\u90a3\u6837\uff0c\u4f60\u4e5f\u4f1a\u5f00\u59cb\u8bc6\u522b\u51fa\u80fd\u591f\u4f7f\u7528\u6cdb\u578b\u7684\u91cd\u590d\u4ee3\u7801\u3002 \u8003\u8651\u4e00\u4e0b\u8fd9\u4e2a\u5bfb\u627e\u5217\u8868\u4e2d\u6700\u5927\u503c\u7684\u5c0f\u7a0b\u5e8f: fn main () { // \u7801\u83b7\u53d6\u4e00\u4e2a\u6574\u578b\u5217\u8868\uff0c\u5b58\u653e\u5728\u53d8\u91cf number_list \u4e2d\u3002 let number_list = vec! [ 34 , 50 , 25 , 100 , 65 ]; // \u5c06\u5217\u8868\u7684\u7b2c\u4e00\u9879\u653e\u5165\u4e86\u53d8\u91cf largest \u4e2d\u3002 let mut largest = number_list [ 0 ]; // \u63a5\u7740\u904d\u5386\u4e86\u5217\u8868\u4e2d\u7684\u6240\u6709\u6570\u5b57\uff0c\u5982\u679c\u5f53\u524d\u503c\u5927\u4e8e largest \u4e2d\u50a8\u5b58\u7684\u503c\uff0c\u5c06 largest \u66ff\u6362\u4e3a\u8fd9\u4e2a\u503c\u3002 // \u5982\u679c\u5f53\u524d\u503c\u5c0f\u4e8e\u6216\u8005\u7b49\u4e8e\u76ee\u524d\u4e3a\u6b62\u7684\u6700\u5927\u503c\uff0clargest \u4fdd\u6301\u4e0d\u53d8\u3002 // \u5f53\u5217\u8868\u4e2d\u6240\u6709\u503c\u90fd\u88ab\u8003\u8651\u5230\u4e4b\u540e\uff0clargest \u5c06\u4f1a\u662f\u6700\u5927\u503c\uff0c\u5728\u8fd9\u91cc\u4e5f\u5c31\u662f 100\u3002 for number in number_list { if number > largest { largest = number ; } } println! ( \"The largest number is {}\" , largest ); } \u5982\u679c\u9700\u8981\u5728\u4e24\u4e2a\u4e0d\u540c\u7684\u5217\u8868\u4e2d\u5bfb\u627e\u6700\u5927\u503c\uff0c\u6211\u4eec\u53ef\u4ee5\u91cd\u590d\u793a\u4f8b\u4e2d\u7684\u4ee3\u7801\uff0c\u8fd9\u6837\u7a0b\u5e8f\u4e2d\u5c31\u4f1a\u5b58\u5728\u4e24\u6bb5\u76f8\u540c\u903b\u8f91\u7684\u4ee3\u7801\uff0c fn main () { let number_list = vec! [ 34 , 50 , 25 , 100 , 65 ]; let mut largest = number_list [ 0 ]; for number in number_list { if number > largest { largest = number ; } } println! ( \"The largest number is {}\" , largest ); let number_list = vec! [ 102 , 34 , 6000 , 89 , 54 , 2 , 43 , 8 ]; let mut largest = number_list [ 0 ]; for number in number_list { if number > largest { largest = number ; } } println! ( \"The largest number is {}\" , largest ); } \u867d\u7136\u4ee3\u7801\u80fd\u591f\u6267\u884c\uff0c\u4f46\u662f\u91cd\u590d\u7684\u4ee3\u7801\u662f\u5197\u4f59\u4e14\u5bb9\u6613\u51fa\u9519\u7684\uff0c\u5e76\u4e14\u610f\u5473\u7740\u5f53\u66f4\u65b0\u903b\u8f91\u65f6\u9700\u8981 \u4fee\u6539\u591a\u5904\u5730\u65b9\u7684\u4ee3\u7801 \u3002 \u4e3a\u4e86\u6d88\u9664\u91cd\u590d\uff0c\u53ef\u4ee5\u521b\u5efa\u4e00\u5c42 \u62bd\u8c61 \uff0c\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\u5c06\u8868\u73b0\u4e3a\u4e00\u4e2a\u83b7\u53d6\u4efb\u610f\u6574\u578b\u5217\u8868\u4f5c\u4e3a\u53c2\u6570\u5e76\u5bf9\u5176\u8fdb\u884c\u5904\u7406\u7684\u51fd\u6570\u3002 \u8fd9\u5c06\u589e\u52a0\u4ee3\u7801\u7684\u7b80\u6d01\u6027\u5e76\u8ba9\u6211\u4eec\u5c06\u8868\u8fbe\u548c\u63a8\u5bfc\u5bfb\u627e\u5217\u8868\u4e2d\u6700\u5927\u503c\u7684\u8fd9\u4e2a\u6982\u5ff5\u4e0e\u4f7f\u7528\u8fd9\u4e2a\u6982\u5ff5\u7684\u7279\u5b9a\u4f4d\u7f6e\u76f8\u4e92\u72ec\u7acb\u3002 \u5728\u793a\u4f8b\u4e2d\u7684\u7a0b\u5e8f\u4e2d\u5c06\u5bfb\u627e\u6700\u5927\u503c\u7684\u4ee3\u7801\u63d0\u53d6\u5230\u4e86\u4e00\u4e2a\u53eb\u505a largest \u7684\u51fd\u6570\u4e2d\u3002\u8fd9\u4e0d\u540c\u4e8e\u4e0a\u9762\u793a\u4f8b\u4e2d\u7684\u4ee3\u7801\u53ea\u80fd\u5728\u4e00\u4e2a\u7279\u5b9a\u7684\u5217\u8868\u4e2d\u627e\u5230\u6700\u5927\u7684\u6570\u5b57\uff0c\u8fd9\u4e2a\u7a0b\u5e8f\u53ef\u4ee5\u5728\u4e24\u4e2a\u4e0d\u540c\u7684\u5217\u8868\u4e2d\u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u3002 // largest \u51fd\u6570\u6709\u4e00\u4e2a\u53c2\u6570 list\uff0c\u5b83\u4ee3\u8868\u4f1a\u4f20\u9012\u7ed9\u51fd\u6570\u7684\u4efb\u4f55\u5177\u4f53\u7684 i32\u503c\u7684 slice\u3002 // \u51fd\u6570\u5b9a\u4e49\u4e2d\u7684 list \u4ee3\u8868\u4efb\u4f55 &[i32]\u3002 // \u5f53\u8c03\u7528 largest \u51fd\u6570\u65f6\uff0c\u5176\u4ee3\u7801\u5b9e\u9645\u4e0a\u8fd0\u884c\u4e8e\u6211\u4eec\u4f20\u9012\u7684\u7279\u5b9a\u503c\u4e0a\u3002 fn largest ( list : & [ i32 ]) -> i32 { let mut largest = list [ 0 ]; // \u76ee\u524d\u4e0d\u9700\u8981\u62c5\u5fc3 for \u5faa\u73af\u7684\u8bed\u6cd5\u3002\u8fd9\u91cc\u4e0d\u662f\u5f15\u7528\u4e86\u4e00\u4e2a i32 \u7684\u5f15\u7528\uff0c\u8fd9\u91cc\u53ea\u662f\u6a21\u5f0f\u5339\u914d\u5e76\u8868\u660e\u5faa\u73af\u7684\u503c\u5e94\u8be5\u662f &i32\u3002 for & item in list { if item > largest { largest = item ; } } largest } fn main () { let number_list = vec! [ 34 , 50 , 25 , 100 , 65 ]; let result = largest ( & number_list ); println! ( \"The largest number is {}\" , result ); let number_list = vec! [ 102 , 34 , 6000 , 89 , 54 , 2 , 43 , 8 ]; let result = largest ( & number_list ); println! ( \"The largest number is {}\" , result ); } \u603b\u7684\u6765\u8bf4\uff0c\u5728\u793a\u4f8b\u4e2d\u6d89\u53ca\u7684\u673a\u5236\u7ecf\u5386\u4e86\u5982\u4e0b\u51e0\u6b65\uff1a \u627e\u51fa\u91cd\u590d\u4ee3\u7801\u3002 \u5c06\u91cd\u590d\u4ee3\u7801\u63d0\u53d6\u5230\u4e86\u4e00\u4e2a\u51fd\u6570\u4e2d\uff0c\u5e76\u5728\u51fd\u6570\u7b7e\u540d\u4e2d\u6307\u5b9a\u4e86\u4ee3\u7801\u4e2d\u7684\u8f93\u5165\u548c\u8fd4\u56de\u503c\u3002 \u5c06\u91cd\u590d\u4ee3\u7801\u7684\u4e24\u4e2a\u5b9e\u4f8b\uff0c\u6539\u4e3a\u8c03\u7528\u51fd\u6570\u3002 \u5728\u4e0d\u540c\u7684\u573a\u666f\u4f7f\u7528\u4e0d\u540c\u7684\u65b9\u5f0f\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u5229\u7528\u76f8\u540c\u7684\u6b65\u9aa4\u548c\u6cdb\u578b\u6765\u51cf\u5c11\u91cd\u590d\u4ee3\u7801\u3002\u4e0e\u51fd\u6570\u4f53\u53ef\u4ee5\u5728\u62bd\u8c61 list \u800c\u4e0d\u662f\u7279\u5b9a\u503c\u4e0a\u64cd\u4f5c\u7684\u65b9\u5f0f\u76f8\u540c\uff0c\u6cdb\u578b\u5141\u8bb8\u4ee3\u7801\u5bf9\u62bd\u8c61\u7c7b\u578b\u8fdb\u884c\u64cd\u4f5c\u3002 \u5982\u679c\u6211\u4eec\u6709\u4e24\u4e2a\u51fd\u6570\uff0c\u4e00\u4e2a\u5bfb\u627e\u4e00\u4e2a i32 \u503c\u7684 slice \u4e2d\u7684\u6700\u5927\u9879\u800c\u53e6\u4e00\u4e2a\u5bfb\u627e char \u503c\u7684 slice \u4e2d\u7684\u6700\u5927\u9879\u8be5\u600e\u4e48\u529e\uff1f\u8be5\u5982\u4f55\u6d88\u9664\u91cd\u590d\u5462\uff1f\u770b\u4e0b\u53bb\uff01 \u6cdb\u578b \u53ef\u4ee5\u4f7f\u7528\u6cdb\u578b\u4e3a\u50cf\u51fd\u6570\u7b7e\u540d\u6216\u7ed3\u6784\u4f53\u8fd9\u6837\u7684\u9879\u521b\u5efa\u5b9a\u4e49\uff0c\u8fd9\u6837\u5b83\u4eec\u5c31\u53ef\u4ee5\u7528\u4e8e\u591a\u79cd\u4e0d\u540c\u7684\u5177\u4f53\u6570\u636e\u7c7b\u578b\u3002 \u51fd\u6570\u4e2d\u4f7f\u7528\u6cdb\u578b \u5f53\u4f7f\u7528\u6cdb\u578b\u5b9a\u4e49\u51fd\u6570\u65f6\uff0c\u672c\u6765\u5728\u51fd\u6570\u7b7e\u540d\u4e2d\u6307\u5b9a\u53c2\u6570\u548c\u8fd4\u56de\u503c\u7684\u7c7b\u578b\u7684\u5730\u65b9\uff0c\u4f1a\u6539\u7528 \u6cdb\u578b \u6765\u8868\u793a\u3002 \u91c7\u7528\u8fd9\u79cd\u6280\u672f\uff0c\u4f7f\u5f97\u4ee3\u7801\u9002\u5e94\u6027\u66f4\u5f3a\uff0c\u4ece\u800c\u4e3a\u51fd\u6570\u7684\u8c03\u7528\u8005\u63d0\u4f9b\u66f4\u591a\u7684\u529f\u80fd\uff0c\u540c\u65f6\u4e5f\u907f\u514d\u4e86\u4ee3\u7801\u7684\u91cd\u590d\u3002 \u56de\u5230 largest \u51fd\u6570\uff0c\u793a\u4f8b\u4e2d\u5c55\u793a\u4e86\u4e24\u4e2a\u51fd\u6570\uff0c\u5b83\u4eec\u7684\u529f\u80fd\u90fd\u662f\u5bfb\u627e slice \u4e2d\u6700\u5927\u503c\u3002 fn largest_i32 ( list : & [ i32 ]) -> i32 { let mut largest = list [ 0 ]; for & item in list { if item > largest { largest = item ; } } largest } fn largest_char ( list : & [ char ]) -> char { let mut largest = list [ 0 ]; for & item in list { if item > largest { largest = item ; } } largest } fn main () { let number_list = vec! [ 34 , 50 , 25 , 100 , 65 ]; let result = largest_i32 ( & number_list ); println! ( \"The largest number is {}\" , result ); let char_list = vec! [ 'y' , 'm' , 'a' , 'q' ]; let result = largest_char ( & char_list ); println! ( \"The largest char is {}\" , result ); } \u56e0\u4e3a\u4e24\u8005\u51fd\u6570\u4f53\u7684\u4ee3\u7801\u662f\u4e00\u6837\u7684\uff0c\u53ef\u4ee5\u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570\uff0c\u518d\u5f15\u8fdb\u6cdb\u578b\u53c2\u6570\u6765\u6d88\u9664\u8fd9\u79cd\u91cd\u590d\u3002 \u4e3a\u4e86\u53c2\u6570\u5316\u65b0\u51fd\u6570\u4e2d\u7684\u8fd9\u4e9b\u7c7b\u578b\uff0c\u4e5f\u9700\u8981\u4e3a\u7c7b\u578b\u53c2\u6570\u53d6\u4e2a\u540d\u5b57\uff0c\u9053\u7406\u548c\u7ed9\u51fd\u6570\u7684\u5f62\u53c2\u8d77\u540d\u4e00\u6837\u3002\u4efb\u4f55\u6807\u8bc6\u7b26\u90fd\u53ef\u4ee5\u4f5c\u4e3a\u7c7b\u578b\u53c2\u6570\u7684\u540d\u5b57\u3002 \u8fd9\u91cc\u9009\u7528 T \uff0c\u56e0\u4e3a\u4f20\u7edf\u4e0a\u6765\u8bf4\uff0cRust \u7684\u53c2\u6570\u540d\u5b57\u90fd\u6bd4\u8f83\u77ed\uff0c\u901a\u5e38\u5c31\u53ea\u6709\u4e00\u4e2a\u5b57\u6bcd\uff0c\u540c\u65f6\uff0c Rust \u7c7b\u578b\u540d\u7684\u547d\u540d\u89c4\u8303\u662f\u9a86\u9a7c\u547d\u540d\u6cd5 \uff08CamelCase\uff09\u3002 T \u4f5c\u4e3a \u201ctype\u201d \u7684\u7f29\u5199\u662f\u5927\u90e8\u5206 Rust \u7a0b\u5e8f\u5458\u7684\u9996\u9009\u3002 \u5982\u679c\u8981\u5728\u51fd\u6570\u4f53\u4e2d\u4f7f\u7528\u53c2\u6570\uff0c\u5c31\u5fc5\u987b\u5728\u51fd\u6570\u7b7e\u540d\u4e2d\u58f0\u660e\u5b83\u7684\u540d\u5b57\uff0c\u597d\u8ba9\u7f16\u8bd1\u5668\u77e5\u9053\u8fd9\u4e2a\u540d\u5b57\u6307\u4ee3\u7684\u662f\u4ec0\u4e48\u3002 \u540c\u7406\uff0c\u5f53\u5728\u51fd\u6570\u7b7e\u540d\u4e2d\u4f7f\u7528\u4e00\u4e2a\u7c7b\u578b\u53c2\u6570\u65f6\uff0c\u5fc5\u987b\u5728\u4f7f\u7528\u5b83\u4e4b\u524d\u5c31\u58f0\u660e\u5b83\u3002\u4e3a\u4e86\u5b9a\u4e49\u6cdb\u578b\u7248\u672c\u7684 largest \u51fd\u6570\uff0c \u7c7b\u578b\u53c2\u6570\u58f0\u660e\u4f4d\u4e8e\u51fd\u6570\u540d\u79f0\u4e0e\u53c2\u6570\u5217\u8868\u4e2d\u95f4\u7684\u5c16\u62ec\u53f7 <> \u4e2d\uff0c\u50cf\u8fd9\u6837\uff1a fn largest < T > ( list : & [ T ]) -> T { \u53ef\u4ee5\u8fd9\u6837\u7406\u89e3\u8fd9\u4e2a\u5b9a\u4e49\uff1a \u51fd\u6570 largest \u6709\u6cdb\u578b\u7c7b\u578b T \u3002\u5b83\u6709\u4e2a\u53c2\u6570 list \uff0c\u5176\u7c7b\u578b\u662f\u5143\u7d20\u4e3a T \u7684 slice \u3002 largest \u51fd\u6570\u7684\u8fd4\u56de\u503c\u7c7b\u578b\u4e5f\u662f T \u3002 \u4e0b\u9762\u793a\u4f8b 10-5 \u4e2d\u7684 largest \u51fd\u6570\u5728\u5b83\u7684\u7b7e\u540d\u4e2d\u4f7f\u7528\u4e86\u6cdb\u578b\uff0c\u7edf\u4e00\u4e86\u4e24\u4e2a\u5b9e\u73b0\u3002 \u8be5\u793a\u4f8b\u4e5f\u5c55\u793a\u4e86\u5982\u4f55\u8c03\u7528 largest \u51fd\u6570\uff0c\u628a i32 \u503c\u7684 slice \u6216 char \u503c\u7684 slice \u4f20\u7ed9\u5b83\u3002 \u8bf7\u6ce8\u610f\u8fd9\u4e9b\u4ee3\u7801\u8fd8\u4e0d\u80fd\u7f16\u8bd1\uff0c\u4e0d\u8fc7\u7a0d\u540e\u5728\u672c\u7ae0\u4f1a\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002 // \u4e00\u4e2a\u4f7f\u7528\u6cdb\u578b\u53c2\u6570\u7684 largest \u51fd\u6570\u5b9a\u4e49\uff0c\u5c1a\u4e0d\u80fd\u7f16\u8bd1 fn largest < T > ( list : & [ T ]) -> T { let mut largest = list [ 0 ]; for & item in list { if item > largest { largest = item ; } } largest } fn main () { let number_list = vec! [ 34 , 50 , 25 , 100 , 65 ]; let result = largest ( & number_list ); println! ( \"The largest number is {}\" , result ); let char_list = vec! [ 'y' , 'm' , 'a' , 'q' ]; let result = largest ( & char_list ); println! ( \"The largest char is {}\" , result ); } \u5982\u679c\u73b0\u5728\u5c31\u7f16\u8bd1\u8fd9\u4e2a\u4ee3\u7801\uff0c\u4f1a\u51fa\u73b0\u5982\u4e0b\u9519\u8bef\uff1a $ cargo run Compiling chapter10 v0.1.0 (file:///projects/chapter10) error[E0369]: binary operation `>` cannot be applied to type `T` --> src/main.rs:5:17 | 5 | if item > largest { | ---- ^ ------- T | | | T | help: consider restricting type parameter `T` | 1 | fn largest<T: std::cmp::PartialOrd>(list: &[T]) -> T { | ++++++++++++++++++++++ For more information about this error, try `rustc --explain E0369`. error: could not compile `chapter10` due to previous error \u6ce8\u91ca\u4e2d\u63d0\u5230\u4e86 std::cmp::PartialOrd \uff0c\u8fd9\u662f\u4e00\u4e2a trait \u3002 \u4e0b\u4e00\u90e8\u5206\u4f1a\u8bb2\u5230 trait \u3002\u4e0d\u8fc7\u7b80\u5355\u6765\u8bf4\uff0c\u8fd9\u4e2a\u9519\u8bef\u8868\u660e largest \u7684\u51fd\u6570\u4f53\u4e0d\u80fd\u9002\u7528\u4e8e T \u7684\u6240\u6709\u53ef\u80fd\u7684\u7c7b\u578b\u3002\u56e0\u4e3a\u5728\u51fd\u6570\u4f53\u9700\u8981\u6bd4\u8f83 T \u7c7b\u578b\u7684\u503c\uff0c\u4e0d\u8fc7\u5b83\u53ea\u80fd\u7528\u4e8e\u6211\u4eec\u77e5\u9053\u5982\u4f55\u6392\u5e8f\u7684\u7c7b\u578b\u3002 \u4e3a\u4e86\u5f00\u542f\u6bd4\u8f83\u529f\u80fd\uff0c\u6807\u51c6\u5e93\u4e2d\u5b9a\u4e49\u7684 std::cmp::PartialOrd trait \u53ef\u4ee5\u5b9e\u73b0\u7c7b\u578b\u7684\u6bd4\u8f83\u529f\u80fd\uff08\u67e5\u770b \u9644\u5f55 C \u83b7\u53d6\u8be5 trait \u7684\u66f4\u591a\u4fe1\u606f\uff09\u3002 \u6807\u51c6\u5e93\u4e2d\u5b9a\u4e49\u7684 std::cmp::PartialOrd trait \u53ef\u4ee5\u5b9e\u73b0\u7c7b\u578b\u7684\u6bd4\u8f83\u529f\u80fd\u3002\u5728 \u201c trait \u4f5c\u4e3a\u53c2\u6570 \u201d \u90e8\u5206\u4f1a\u8bb2\u89e3\u5982\u4f55\u6307\u5b9a\u6cdb\u578b\u5b9e\u73b0\u7279\u5b9a\u7684 trait \uff0c\u4e0d\u8fc7\u8ba9\u6211\u4eec\u5148\u63a2\u7d22\u5176\u4ed6\u4f7f\u7528\u6cdb\u578b\u53c2\u6570\u7684\u65b9\u6cd5\u3002 \u7ed3\u6784\u4f53\u4e2d\u4f7f\u7528\u6cdb\u578b \u540c\u6837\u4e5f\u53ef\u4ee5\u7528 <> \u8bed\u6cd5\u6765\u5b9a\u4e49\u7ed3\u6784\u4f53\uff0c\u5b83\u5305\u542b\u4e00\u4e2a\u6216\u591a\u4e2a\u6cdb\u578b\u53c2\u6570\u7c7b\u578b\u5b57\u6bb5\u3002\u4e0b\u9762\u793a\u4f8b\u5c55\u793a\u4e86\u5982\u4f55\u5b9a\u4e49\u548c\u4f7f\u7528\u4e00\u4e2a\u53ef\u4ee5\u5b58\u653e\u4efb\u4f55\u7c7b\u578b\u7684 x \u548c y \u5750\u6807\u503c\u7684\u7ed3\u6784\u4f53 Point \uff1a // Point \u7ed3\u6784\u4f53\u5b58\u653e\u4e86\u4e24\u4e2a T \u7c7b\u578b\u7684\u503c x \u548c y struct Point < T > { x : T , y : T , } fn main () { let integer = Point { x : 5 , y : 10 }; let float = Point { x : 1.0 , y : 4.0 }; } \u5176\u8bed\u6cd5\u7c7b\u4f3c\u4e8e\u51fd\u6570\u5b9a\u4e49\u4e2d\u4f7f\u7528\u6cdb\u578b\u3002\u9996\u5148\uff0c\u5fc5\u987b\u5728\u7ed3\u6784\u4f53\u540d\u79f0\u540e\u9762\u7684\u5c16\u62ec\u53f7\u4e2d\u58f0\u660e\u6cdb\u578b\u53c2\u6570\u7684\u540d\u79f0\u3002\u63a5\u7740\u5728\u7ed3\u6784\u4f53\u5b9a\u4e49\u4e2d\u53ef\u4ee5\u6307\u5b9a\u5177\u4f53\u6570\u636e\u7c7b\u578b\u7684\u4f4d\u7f6e\u4f7f\u7528\u6cdb\u578b\u7c7b\u578b\u3002 \u6ce8\u610f Point<T> \u7684\u5b9a\u4e49\u4e2d\u53ea\u4f7f\u7528\u4e86\u4e00\u4e2a\u6cdb\u578b\u7c7b\u578b\uff0c\u8fd9\u4e2a\u5b9a\u4e49\u8868\u660e\u7ed3\u6784\u4f53 Point<T> \u5bf9\u4e8e\u4e00\u4e9b\u7c7b\u578b T \u662f\u6cdb\u578b\u7684\uff0c\u800c\u4e14\u5b57\u6bb5 x \u548c y \u90fd\u662f \u76f8\u540c\u7c7b\u578b\u7684\uff0c\u65e0\u8bba\u5b83\u5177\u4f53\u662f\u4f55\u7c7b\u578b\u3002 \u5982\u679c\u5c1d\u8bd5\u521b\u5efa\u4e00\u4e2a\u6709\u4e0d\u540c\u7c7b\u578b\u503c\u7684 Point<T> \u7684\u5b9e\u4f8b\uff0c\u5c31\u4e0d\u80fd\u7f16\u8bd1\uff1a // \u5b57\u6bb5 x \u548c y \u7684\u7c7b\u578b\u5fc5\u987b\u76f8\u540c\uff0c\u56e0\u4e3a\u4ed6\u4eec\u90fd\u6709\u76f8\u540c\u7684\u6cdb\u578b\u7c7b\u578b T struct Point < T > { x : T , y : T , } fn main () { let wont_work = Point { x : 5 , y : 4.0 }; } \u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u5f53\u628a\u6574\u578b\u503c 5 \u8d4b\u503c\u7ed9 x \u65f6\uff0c\u5c31\u544a\u8bc9\u4e86\u7f16\u8bd1\u5668\u8fd9\u4e2a Point<T> \u5b9e\u4f8b\u4e2d\u7684\u6cdb\u578b T \u662f\u6574\u578b\u7684\u3002\u63a5\u7740\u6307\u5b9a y \u4e3a 4.0 \uff0c\u5b83\u88ab\u5b9a\u4e49\u4e3a\u4e0e x \u76f8\u540c\u7c7b\u578b\uff0c\u5c31\u4f1a\u5f97\u5230\u4e00\u4e2a\u50cf\u8fd9\u6837\u7684\u7c7b\u578b\u4e0d\u5339\u914d\u9519\u8bef\uff1a $ cargo run Compiling chapter10 v0 . 1.0 ( file : ///projects/chapter10) error [ E0308 ] : mismatched types - -> src / main . rs : 7 : 38 | 7 | let wont_work = Point { x : 5 , y : 4.0 }; | ^^^ expected integer , found floating - point number For more information about this error , try ` rustc -- explain E0308 ` . error : could not compile ` chapter10 ` due to previous error \u5982\u679c\u60f3\u8981\u5b9a\u4e49\u4e00\u4e2a x \u548c y \u53ef\u4ee5\u6709\u4e0d\u540c\u7c7b\u578b\u4e14\u4ecd\u7136\u662f\u6cdb\u578b\u7684 Point \u7ed3\u6784\u4f53\uff0c \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u591a\u4e2a\u6cdb\u578b\u7c7b\u578b\u53c2\u6570\u3002\u5728\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u4fee\u6539 Point \u7684\u5b9a\u4e49\u4e3a\u62e5\u6709\u4e24\u4e2a\u6cdb\u578b\u7c7b\u578b T \u548c U \u3002 \u5176\u4e2d\u5b57\u6bb5 x \u662f T \u7c7b\u578b\u7684\uff0c\u800c\u5b57\u6bb5 y \u662f U \u7c7b\u578b\u7684\uff1a struct Point < T , U > { x : T , y : U , } fn main () { let both_integer = Point { x : 5 , y : 10 }; let both_float = Point { x : 1.0 , y : 4.0 }; let integer_and_float = Point { x : 5 , y : 4.0 }; } \u73b0\u5728\u6240\u6709\u8fd9\u4e9b Point \u5b9e\u4f8b\u90fd\u5408\u6cd5\u4e86\uff01 \u4f60\u53ef\u4ee5\u5728\u5b9a\u4e49\u4e2d\u4f7f\u7528\u4efb\u610f\u591a\u7684\u6cdb\u578b\u7c7b\u578b\u53c2\u6570\uff0c \u4e0d\u8fc7\u592a\u591a\u7684\u8bdd\uff0c\u4ee3\u7801\u5c06\u96be\u4ee5\u9605\u8bfb\u548c\u7406\u89e3 \u3002 \u5f53\u4f60\u7684\u4ee3\u7801\u4e2d\u9700\u8981\u8bb8\u591a\u6cdb\u578b\u7c7b\u578b\u65f6\uff0c\u5b83\u53ef\u80fd\u8868\u660e\u4f60\u7684\u4ee3\u7801\u9700\u8981\u91cd\u6784\uff0c\u5206\u89e3\u6210\u66f4\u5c0f\u7684\u7ed3\u6784\u3002 \u679a\u4e3e\u4e2d\u4f7f\u7528\u6cdb\u578b \u548c\u7ed3\u6784\u4f53\u7c7b\u4f3c\uff0c \u679a\u4e3e\u4e5f\u53ef\u4ee5\u5728\u6210\u5458\u4e2d\u5b58\u653e\u6cdb\u578b\u6570\u636e\u7c7b\u578b \u3002\u7b2c\u516d\u7ae0\u6211\u4eec\u66fe\u7528\u8fc7\u6807\u51c6\u5e93\u63d0\u4f9b\u7684 Option<T> \u679a\u4e3e\uff0c\u8fd9\u91cc\u518d\u56de\u987e\u4e00\u4e0b\uff1a enum Option < T > { Some ( T ), None , } \u73b0\u5728\u8fd9\u4e2a\u5b9a\u4e49\u5e94\u8be5\u66f4\u5bb9\u6613\u7406\u89e3\u4e86\u3002\u5982\u4f60\u6240\u89c1 Option<T> \u662f\u4e00\u4e2a\u62e5\u6709\u6cdb\u578b T \u7684\u679a\u4e3e\uff0c\u5b83\u6709\u4e24\u4e2a\u6210\u5458\uff1a Some \uff0c\u5b83\u5b58\u653e\u4e86\u4e00\u4e2a\u7c7b\u578b T \u7684\u503c\uff0c\u548c\u4e0d\u5b58\u5728\u4efb\u4f55\u503c\u7684 None \u3002 \u901a\u8fc7 Option<T> \u679a\u4e3e\u53ef\u4ee5\u8868\u8fbe\u6709\u4e00\u4e2a\u53ef\u80fd\u7684\u503c\u7684\u62bd\u8c61\u6982\u5ff5\uff0c\u540c\u65f6\u56e0\u4e3a Option<T> \u662f\u6cdb\u578b\u7684\uff0c\u65e0\u8bba\u8fd9\u4e2a\u53ef\u80fd\u7684\u503c\u662f\u4ec0\u4e48\u7c7b\u578b\u90fd\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e2a\u62bd\u8c61\u3002 \u679a\u4e3e\u4e5f\u53ef\u4ee5\u62e5\u6709\u591a\u4e2a\u6cdb\u578b\u7c7b\u578b\u3002\u7b2c\u4e5d\u7ae0\u4f7f\u7528\u8fc7\u7684 Result \u679a\u4e3e\u5b9a\u4e49\u5c31\u662f\u4e00\u4e2a\u8fd9\u6837\u7684\u4f8b\u5b50\uff1a enum Result < T , E > { Ok ( T ), Err ( E ), } Result \u679a\u4e3e\u6709\u4e24\u4e2a\u6cdb\u578b\u7c7b\u578b\uff0cT \u548c E\u3002Result \u6709\u4e24\u4e2a\u6210\u5458\uff1aOk\uff0c\u5b83\u5b58\u653e\u4e00\u4e2a\u7c7b\u578b T \u7684\u503c\uff0c\u800c Err \u5219\u5b58\u653e\u4e00\u4e2a\u7c7b\u578b E \u7684\u503c\u3002\u8fd9\u4e2a\u5b9a\u4e49\u4f7f\u5f97 Result \u679a\u4e3e\u80fd\u5f88\u65b9\u4fbf\u7684\u8868\u8fbe\u4efb\u4f55\u53ef\u80fd\u6210\u529f\uff08\u8fd4\u56de T \u7c7b\u578b\u7684\u503c\uff09\u4e5f\u53ef\u80fd\u5931\u8d25\uff08\u8fd4\u56de E \u7c7b\u578b\u7684\u503c\uff09\u7684\u64cd\u4f5c\u3002\u5b9e\u9645\u4e0a\uff0c\u8fd9\u5c31\u662f\u6211\u4eec\u5728\u793a\u4f8b 9-3 \u7528\u6765\u6253\u5f00\u6587\u4ef6\u7684\u65b9\u5f0f\uff1a\u5f53\u6210\u529f\u6253\u5f00\u6587\u4ef6\u7684\u65f6\u5019\uff0cT \u5bf9\u5e94\u7684\u662f std::fs::File \u7c7b\u578b\uff1b\u800c\u5f53\u6253\u5f00\u6587\u4ef6\u51fa\u73b0\u95ee\u9898\u65f6\uff0cE \u7684\u503c\u5219\u662f std::io::Error \u7c7b\u578b\u3002 \u5f53\u4f60\u610f\u8bc6\u5230\u4ee3\u7801\u4e2d\u5b9a\u4e49\u4e86\u591a\u4e2a\u7ed3\u6784\u4f53\u6216\u679a\u4e3e\uff0c\u5b83\u4eec\u4e0d\u4e00\u6837\u7684\u5730\u65b9\u53ea\u662f\u5176\u4e2d\u7684\u503c\u7684\u7c7b\u578b\u7684\u65f6\u5019\uff0c\u4e0d\u59a8\u901a\u8fc7\u6cdb\u578b\u7c7b\u578b\u6765\u907f\u514d\u91cd\u590d\u3002 \u65b9\u6cd5\u4e2d\u4f7f\u7528\u6cdb\u578b \u5728\u4e3a\u7ed3\u6784\u4f53\u548c\u679a\u4e3e\u5b9e\u73b0\u65b9\u6cd5\u65f6\uff08\u50cf\u7b2c\u4e94\u7ae0\u90a3\u6837\uff09\uff0c\u4e00\u6837\u4e5f\u53ef\u4ee5\u7528\u6cdb\u578b\u3002\u793a\u4f8b\u4e2d\u5b9a\u4e49\u7684\u7ed3\u6784\u4f53 Point<T> \uff0c\u548c\u5728\u5176\u4e0a\u5b9e\u73b0\u7684\u540d\u4e3a x \u7684\u65b9\u6cd5\u3002 // \u5728 Point<T> \u7ed3\u6784\u4f53\u4e0a\u5b9e\u73b0\u65b9\u6cd5 x\uff0c\u5b83\u8fd4\u56de T \u7c7b\u578b\u7684\u5b57\u6bb5 x \u7684\u5f15\u7528 struct Point < T > { x : T , y : T , } // // \u8fd9\u91cc\u5728 Point<T> \u4e0a\u5b9a\u4e49\u4e86\u4e00\u4e2a\u53eb\u505a x \u7684\u65b9\u6cd5\u6765\u8fd4\u56de\u5b57\u6bb5 x \u4e2d\u6570\u636e\u7684\u5f15\u7528\uff1a impl < T > Point < T > { fn x ( & self ) -> & T { & self . x } } fn main () { let p = Point { x : 5 , y : 10 }; println! ( \"p.x = {}\" , p . x ()); } \u6ce8\u610f\u5fc5\u987b\u5728 impl \u540e\u9762\u58f0\u660e T \uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u5728 Point<T> \u4e0a\u5b9e\u73b0\u7684\u65b9\u6cd5\u4e2d\u4f7f\u7528\u5b83\u4e86\u3002 \u5728 impl \u4e4b\u540e\u58f0\u660e\u6cdb\u578b T \uff0c\u8fd9\u6837 Rust \u5c31\u77e5\u9053 Point \u7684\u5c16\u62ec\u53f7\u4e2d\u7684\u7c7b\u578b\u662f\u6cdb\u578b\u800c\u4e0d\u662f\u5177\u4f53\u7c7b\u578b\u3002 \u56e0\u4e3a\u518d\u6b21\u58f0\u660e\u4e86\u6cdb\u578b\uff0c\u6211\u4eec\u53ef\u4ee5\u4e3a\u6cdb\u578b\u53c2\u6570\u9009\u62e9\u4e00\u4e2a\u4e0e\u7ed3\u6784\u4f53\u5b9a\u4e49\u4e2d\u58f0\u660e\u7684\u6cdb\u578b\u53c2\u6570\u6240\u4e0d\u540c\u7684\u540d\u79f0\uff0c\u4e0d\u8fc7\u4f9d\u7167\u60ef\u4f8b\u4f7f\u7528\u4e86\u76f8\u540c\u7684\u540d\u79f0\u3002 impl \u4e2d\u7f16\u5199\u7684\u65b9\u6cd5\u58f0\u660e\u4e86\u6cdb\u578b\u7c7b\u578b\u53ef\u4ee5\u5b9a\u4f4d\u4e3a\u4efb\u4f55\u7c7b\u578b\u7684\u5b9e\u4f8b\uff0c\u4e0d\u7ba1\u6700\u7ec8\u66ff\u6362\u6cdb\u578b\u7c7b\u578b\u7684\u662f\u4f55\u5177\u4f53\u7c7b\u578b\u3002 m \u53e6\u4e00\u4e2a\u9009\u62e9\u662f\u5b9a\u4e49\u65b9\u6cd5\u9002\u7528\u4e8e\u67d0\u4e9b\u6709\u9650\u5236\uff08constraint\uff09\u7684 \u6cdb\u578b\u7c7b\u578b \u3002 \u4f8b\u5982\uff0c\u53ef\u4ee5\u9009\u62e9\u4e3a Point<f32> \u5b9e\u4f8b\u5b9e\u73b0\u65b9\u6cd5\uff0c\u800c\u4e0d\u662f\u4e3a\u6cdb\u578b Point \u5b9e\u4f8b\u3002 \u793a\u4f8b\u5c55\u793a\u4e86\u4e00\u4e2a\u6ca1\u6709\u5728 impl \u4e4b\u540e\uff08\u7684\u5c16\u62ec\u53f7\uff09\u58f0\u660e\u6cdb\u578b\u7684\u4f8b\u5b50\uff0c\u8fd9\u91cc\u4f7f\u7528\u4e86\u4e00\u4e2a\u5177\u4f53\u7c7b\u578b\uff0c f32 \uff1a // \u8fd9\u6bb5\u4ee3\u7801\u610f\u5473\u7740 Point<f32> \u7c7b\u578b\u4f1a\u6709\u4e00\u4e2a\u65b9\u6cd5 distance_from_origin\uff0c // \u800c\u5176\u4ed6 T \u4e0d\u662f f32 \u7c7b\u578b\u7684 Point<T> \u5b9e\u4f8b\u5219\u6ca1\u6709\u5b9a\u4e49\u6b64\u65b9\u6cd5\u3002 // \u8fd9\u4e2a\u65b9\u6cd5\u8ba1\u7b97\u70b9\u5b9e\u4f8b\u4e0e\u5750\u6807 (0.0, 0.0) \u4e4b\u95f4\u7684\u8ddd\u79bb\uff0c\u5e76\u4f7f\u7528\u4e86\u53ea\u80fd\u7528\u4e8e\u6d6e\u70b9\u578b\u7684\u6570\u5b66\u8fd0\u7b97\u7b26\u3002 impl Point < f32 > { fn distance_from_origin ( & self ) -> f32 { ( self . x . powi ( 2 ) + self . y . powi ( 2 )). sqrt () } } \u7ed3\u6784\u4f53\u5b9a\u4e49\u4e2d\u7684\u6cdb\u578b\u7c7b\u578b\u53c2\u6570\u5e76\u4e0d\u603b\u662f\u4e0e\u7ed3\u6784\u4f53\u65b9\u6cd5\u7b7e\u540d\u4e2d\u4f7f\u7528\u7684\u6cdb\u578b\u662f\u540c\u4e00\u7c7b\u578b\u3002 \u793a\u4f8b\u4e2d\u4e3a Point \u7ed3\u6784\u4f53\u4f7f\u7528\u4e86\u6cdb\u578b\u7c7b\u578b X1 \u548c Y1 \uff0c\u4e3a mixup \u65b9\u6cd5\u7b7e\u540d\u4f7f\u7528\u4e86 X2 \u548c Y2 \u6765\u4f7f\u5f97\u793a\u4f8b\u66f4\u52a0\u6e05\u695a\u3002 \u8fd9\u4e2a\u65b9\u6cd5\u7528 self \u7684 Point \u7c7b\u578b\u7684 x \u503c\uff08\u7c7b\u578b X1 \uff09\u548c\u53c2\u6570\u7684 Point \u7c7b\u578b\u7684 y \u503c\uff08\u7c7b\u578b Y2 \uff09\u6765\u521b\u5efa\u4e00\u4e2a\u65b0 Point \u7c7b\u578b\u7684\u5b9e\u4f8b\uff1a struct Point < X1 , Y1 > { x : X1 , y : Y1 , } // \u65b9\u6cd5\u4f7f\u7528\u4e86\u4e0e\u7ed3\u6784\u4f53\u5b9a\u4e49\u4e2d\u4e0d\u540c\u7c7b\u578b\u7684\u6cdb\u578b impl < X1 , Y1 > Point < X1 , Y1 > { fn mixup < X2 , Y2 > ( self , other : Point < X2 , Y2 > ) -> Point < X1 , Y2 > { Point { x : self . x , y : other . y , } } } fn main () { let p1 = Point { x : 5 , y : 10.4 }; let p2 = Point { x : \"Hello\" , y : ' c ' }; let p3 = p1 . mixup ( p2 ); println! ( \"p3.x = {}, p3.y = {}\" , p3 . x , p3 . y ); } \u5728 main \u51fd\u6570\u4e2d\uff0c\u5b9a\u4e49\u4e86\u4e00\u4e2a\u6709 i32 \u7c7b\u578b\u7684 x\uff08\u5176\u503c\u4e3a 5\uff09\u548c f64 \u7684 y\uff08\u5176\u503c\u4e3a 10.4\uff09\u7684 Point \u3002 p2 \u5219\u662f\u4e00\u4e2a\u6709\u7740\u5b57\u7b26\u4e32 slice \u7c7b\u578b\u7684 x\uff08\u5176\u503c\u4e3a \"Hello\"\uff09\u548c char \u7c7b\u578b\u7684 y\uff08\u5176\u503c\u4e3ac\uff09\u7684 Point \u3002 \u5728 p1 \u4e0a\u4ee5 p2 \u4f5c\u4e3a\u53c2\u6570\u8c03\u7528 mixup \u4f1a\u8fd4\u56de\u4e00\u4e2a p3\uff0c\u5b83\u4f1a\u6709\u4e00\u4e2a i32 \u7c7b\u578b\u7684 x\uff0c\u56e0\u4e3a x \u6765\u81ea p1\uff0c\u5e76\u62e5\u6709\u4e00\u4e2a char \u7c7b\u578b\u7684 y\uff0c\u56e0\u4e3a y \u6765\u81ea p2\u3002println! \u4f1a\u6253\u5370\u51fa p3.x = 5, p3.y = c\u3002 \u8fd9\u4e2a\u4f8b\u5b50\u7684\u76ee\u7684\u662f\u5c55\u793a\u4e00\u4e9b\u6cdb\u578b\u901a\u8fc7 impl \u58f0\u660e\u800c\u53e6\u4e00\u4e9b\u901a\u8fc7\u65b9\u6cd5\u5b9a\u4e49\u58f0\u660e\u7684\u60c5\u51b5\u3002 \u8fd9\u91cc\u6cdb\u578b\u53c2\u6570 X1 \u548c Y1 \u58f0\u660e\u4e8e impl \u4e4b\u540e\uff0c\u56e0\u4e3a\u4ed6\u4eec\u4e0e\u7ed3\u6784\u4f53\u5b9a\u4e49\u76f8\u5bf9\u5e94\u3002 \u800c\u6cdb\u578b\u53c2\u6570 X2 \u548c Y2 \u58f0\u660e\u4e8e fn mixup \u4e4b\u540e\uff0c\u56e0\u4e3a\u4ed6\u4eec\u53ea\u662f\u76f8\u5bf9\u4e8e\u65b9\u6cd5\u672c\u8eab\u7684\u3002 Trait \u5728\u9605\u8bfb\u672c\u90e8\u5206\u5185\u5bb9\u7684\u540c\u65f6\uff0c\u4f60\u53ef\u80fd\u4f1a\u597d\u5947\u4f7f\u7528\u6cdb\u578b\u7c7b\u578b\u53c2\u6570\u662f\u5426\u4f1a\u6709\u8fd0\u884c\u65f6\u6d88\u8017\u3002\u597d\u6d88\u606f\u662f\uff1a Rust \u5b9e\u73b0\u4e86\u6cdb\u578b\uff0c\u4f7f\u5f97\u4f7f\u7528\u6cdb\u578b\u7c7b\u578b\u53c2\u6570\u7684\u4ee3\u7801\u76f8\u6bd4\u4f7f\u7528\u5177\u4f53\u7c7b\u578b\u5e76\u6ca1\u6709\u4efb\u4f55\u901f\u5ea6\u4e0a\u7684\u635f\u5931\u3002 Rust \u901a\u8fc7\u5728\u7f16\u8bd1\u65f6\u8fdb\u884c\u6cdb\u578b\u4ee3\u7801\u7684 \u5355\u6001\u5316 \uff08monomorphization\uff09\u6765\u4fdd\u8bc1\u6548\u7387\u3002 \u5355\u6001\u5316\u662f\u4e00\u4e2a\u901a\u8fc7\u586b\u5145\u7f16\u8bd1\u65f6\u4f7f\u7528\u7684\u5177\u4f53\u7c7b\u578b\uff0c\u5c06\u901a\u7528\u4ee3\u7801\u8f6c\u6362\u4e3a\u7279\u5b9a\u4ee3\u7801\u7684\u8fc7\u7a0b\u3002 \u7f16\u8bd1\u5668\u6240\u505a\u7684\u5de5\u4f5c\u6b63\u597d\u4e0e\u4e0a\u9762\u793a\u4f8b\u4e2d\u6211\u4eec\u521b\u5efa\u6cdb\u578b\u51fd\u6570\u7684\u6b65\u9aa4\u76f8\u53cd\u3002\u7f16\u8bd1\u5668\u5bfb\u627e\u6240\u6709\u6cdb\u578b\u4ee3\u7801\u88ab\u8c03\u7528\u7684\u4f4d\u7f6e\u5e76\u4f7f\u7528\u6cdb\u578b\u4ee3\u7801\u9488\u5bf9\u5177\u4f53\u7c7b\u578b\u751f\u6210\u4ee3\u7801\u3002 \u8ba9\u6211\u4eec\u770b\u770b\u4e00\u4e2a\u4f7f\u7528\u6807\u51c6\u5e93\u4e2d Option \u679a\u4e3e\u7684\u4f8b\u5b50\uff1a let integer = Some ( 5 ); let float = Some ( 5.0 ); \u5f53 Rust \u7f16\u8bd1\u8fd9\u4e9b\u4ee3\u7801\u7684\u65f6\u5019\uff0c\u5b83\u4f1a\u8fdb\u884c\u5355\u6001\u5316\u3002 \u7f16\u8bd1\u5668\u4f1a\u8bfb\u53d6\u4f20\u9012\u7ed9 Option<T> \u7684\u503c\u5e76\u53d1\u73b0\u6709\u4e24\u79cd Option<T> \uff1a\u4e00\u4e2a\u5bf9\u5e94 i32 \u53e6\u4e00\u4e2a\u5bf9\u5e94 f64 \u3002 \u4e3a\u6b64\uff0c\u5b83\u4f1a\u5c06\u6cdb\u578b\u5b9a\u4e49 Option<T> \u5c55\u5f00\u4e3a Option_i32 \u548c Option_f64 \uff0c\u63a5\u7740\u5c06\u6cdb\u578b\u5b9a\u4e49\u66ff\u6362\u4e3a\u8fd9\u4e24\u4e2a\u5177\u4f53\u7684\u5b9a\u4e49\u3002 \u7f16\u8bd1\u5668\u751f\u6210\u7684\u5355\u6001\u5316\u7248\u672c\u7684\u4ee3\u7801\u770b\u8d77\u6765\u50cf\u8fd9\u6837\uff0c\u5e76\u5305\u542b\u5c06\u6cdb\u578b Option<T> \u66ff\u6362\u4e3a\u7f16\u8bd1\u5668\u521b\u5efa\u7684\u5177\u4f53\u5b9a\u4e49\u540e\u7684\u7528\u4f8b\u4ee3\u7801\uff1a enum Option_i32 { Some ( i32 ), None , } enum Option_f64 { Some ( f64 ), None , } fn main () { let integer = Option_i32 :: Some ( 5 ); let float = Option_f64 :: Some ( 5.0 ); } \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u6cdb\u578b\u6765\u7f16\u5199\u4e0d\u91cd\u590d\u7684\u4ee3\u7801\uff0c \u800c Rust \u5c06\u4f1a\u4e3a\u6bcf\u4e00\u4e2a\u5b9e\u4f8b\u7f16\u8bd1\u5176\u7279\u5b9a\u7c7b\u578b\u7684\u4ee3\u7801 \u3002\u8fd9\u610f\u5473\u7740\u5728\u4f7f\u7528\u6cdb\u578b\u65f6\u6ca1\u6709\u8fd0\u884c\u65f6\u5f00\u9500\uff1b \u5f53\u4ee3\u7801\u8fd0\u884c\uff0c\u5b83\u7684\u6267\u884c\u6548\u7387\u5c31\u8ddf\u597d\u50cf\u624b\u5199\u6bcf\u4e2a\u5177\u4f53\u5b9a\u4e49\u7684\u91cd\u590d\u4ee3\u7801\u4e00\u6837\u3002\u8fd9\u4e2a\u5355\u6001\u5316\u8fc7\u7a0b\u6b63\u662f Rust \u6cdb\u578b\u5728\u8fd0\u884c\u65f6\u6781\u5176\u9ad8\u6548\u7684\u539f\u56e0\u3002 \u5b9a\u4e49Trait \u4e00\u4e2a\u7c7b\u578b\u7684\u884c\u4e3a\u7531\u5176\u53ef\u4f9b\u8c03\u7528\u7684\u65b9\u6cd5\u6784\u6210\u3002\u5982\u679c\u53ef\u4ee5\u5bf9\u4e0d\u540c\u7c7b\u578b\u8c03\u7528\u76f8\u540c\u7684\u65b9\u6cd5\u7684\u8bdd\uff0c\u8fd9\u4e9b\u7c7b\u578b\u5c31\u53ef\u4ee5\u5171\u4eab\u76f8\u540c\u7684\u884c\u4e3a\u4e86\u3002 trait \u5b9a\u4e49\u662f\u4e00\u79cd\u5c06\u65b9\u6cd5\u7b7e\u540d\u7ec4\u5408\u8d77\u6765\u7684\u65b9\u6cd5\uff0c\u76ee\u7684\u662f\u5b9a\u4e49\u4e00\u4e2a\u5b9e\u73b0\u67d0\u4e9b\u76ee\u7684\u6240\u5fc5\u9700\u7684\u884c\u4e3a\u7684\u96c6\u5408\u3002 \u4f8b\u5982\uff0c\u8fd9\u91cc\u6709\u591a\u4e2a\u5b58\u653e\u4e86\u4e0d\u540c\u7c7b\u578b\u548c\u5c5e\u6027\u6587\u672c\u7684\u7ed3\u6784\u4f53\uff1a\u7ed3\u6784\u4f53 NewsArticle \u7528\u4e8e\u5b58\u653e\u53d1\u751f\u4e8e\u4e16\u754c\u5404\u5730\u7684\u65b0\u95fb\u6545\u4e8b\uff0c\u800c\u7ed3\u6784\u4f53 Tweet \u6700\u591a\u53ea\u80fd\u5b58\u653e 280 \u4e2a\u5b57\u7b26\u7684\u5185\u5bb9\uff0c\u4ee5\u53ca\u50cf\u662f\u5426\u8f6c\u63a8\u6216\u662f\u5426\u662f\u5bf9\u63a8\u53cb\u7684\u56de\u590d\u8fd9\u6837\u7684\u5143\u6570\u636e\u3002 \u6211\u4eec\u60f3\u8981\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a aggregator \u7684\u591a\u5a92\u4f53\u805a\u5408\u5e93\u7528\u6765\u663e\u793a\u53ef\u80fd\u50a8\u5b58\u5728 NewsArticle \u6216 Tweet \u5b9e\u4f8b\u4e2d\u7684\u6570\u636e\u7684\u603b\u7ed3\u3002\u6bcf\u4e00\u4e2a\u7ed3\u6784\u4f53\u90fd\u9700\u8981\u7684\u884c\u4e3a\u662f\u4ed6\u4eec\u662f\u80fd\u591f\u88ab\u603b\u7ed3\u7684\uff0c\u8fd9\u6837\u7684\u8bdd\u5c31\u53ef\u4ee5\u8c03\u7528\u5b9e\u4f8b\u7684 summarize \u65b9\u6cd5\u6765\u8bf7\u6c42\u603b\u7ed3\u3002\u4e0b\u9762\u793a\u4f8b\u4e2d\u5c55\u793a\u4e86\u4e00\u4e2a\u8868\u73b0\u8fd9\u4e2a\u6982\u5ff5\u7684\u516c\u6709 Summary trait \u7684\u5b9a\u4e49\uff1a // Summary trait \u5b9a\u4e49\uff0c\u5b83\u5305\u542b\u7531 summarize \u65b9\u6cd5\u63d0\u4f9b\u7684\u884c\u4e3a // \u4f7f\u7528 trait \u5173\u952e\u5b57\u6765\u58f0\u660e\u4e00\u4e2a trait\uff0c\u540e\u9762\u662f trait \u7684\u540d\u5b57 // \u58f0\u660e trait \u4e3a pub \u4ee5\u4fbf\u4f9d\u8d56\u8fd9\u4e2a crate \u7684 crate \u4e5f\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e2a trait\uff0c pub trait Summary { // \u5728\u5927\u62ec\u53f7\u4e2d\u58f0\u660e\u63cf\u8ff0\u5b9e\u73b0\u8fd9\u4e2a trait \u7684\u7c7b\u578b\u6240\u9700\u8981\u7684\u884c\u4e3a\u7684\u65b9\u6cd5\u7b7e\u540d\uff0c fn summarize ( & self ) -> String ; } \u5728\u65b9\u6cd5\u7b7e\u540d\u540e\u8ddf\u5206\u53f7\uff0c\u800c\u4e0d\u662f\u5728\u5927\u62ec\u53f7\u4e2d\u63d0\u4f9b\u5176\u5b9e\u73b0\u3002 \u63a5\u7740\u6bcf\u4e00\u4e2a\u5b9e\u73b0\u8fd9\u4e2a trait \u7684\u7c7b\u578b\u90fd\u9700\u8981\u63d0\u4f9b\u5176\u81ea\u5b9a\u4e49\u884c\u4e3a\u7684\u65b9\u6cd5\u4f53\uff0c\u7f16\u8bd1\u5668\u4e5f\u4f1a\u786e\u4fdd\u4efb\u4f55\u5b9e\u73b0 Summary trait \u7684\u7c7b\u578b\u90fd\u62e5\u6709\u4e0e\u8fd9\u4e2a\u7b7e\u540d\u7684\u5b9a\u4e49\u5b8c\u5168\u4e00\u81f4\u7684 summarize \u65b9\u6cd5\u3002 trait \u4f53\u4e2d\u53ef\u4ee5\u6709\u591a\u4e2a\u65b9\u6cd5\uff1a \u4e00\u884c\u4e00\u4e2a\u65b9\u6cd5\u7b7e\u540d\u4e14\u90fd\u4ee5\u5206\u53f7\u7ed3\u5c3e\u3002 \u4e3a\u7c7b\u578b\u5b9e\u73b0Trait \u73b0\u5728\u6211\u4eec\u5b9a\u4e49\u4e86 Summary trait \u7684\u7b7e\u540d\uff0c\u63a5\u7740\u5c31\u53ef\u4ee5\u5728\u591a\u5a92\u4f53\u805a\u5408\u5e93\u4e2d\u5b9e\u73b0\u8fd9\u4e2a\u7c7b\u578b\u4e86\u3002 pub struct NewsArticle { pub headline : String , pub location : String , pub author : String , pub content : String , } // \u5c55\u793a\u4e86 NewsArticle \u7ed3\u6784\u4f53\u4e0a Summary trait \u7684\u4e00\u4e2a\u5b9e\u73b0 impl Summary for NewsArticle { // \u5b83\u4f7f\u7528\u6807\u9898\u3001\u4f5c\u8005\u548c\u521b\u5efa\u7684\u4f4d\u7f6e\u4f5c\u4e3a summarize \u7684\u8fd4\u56de\u503c\u3002 fn summarize ( & self ) -> String { format! ( \"{}, by {} ({})\" , self . headline , self . author , self . location ) } } pub struct Tweet { pub username : String , pub content : String , pub reply : bool , pub retweet : bool , } impl Summary for Tweet { // \u5bf9\u4e8e Tweet \u7ed3\u6784\u4f53\uff0c\u9009\u62e9\u5c06 summarize \u5b9a\u4e49\u4e3a\u7528\u6237\u540d\u540e\u8ddf\u63a8\u6587\u7684\u5168\u90e8\u6587\u672c\u4f5c\u4e3a\u8fd4\u56de\u503c\uff0c\u5e76\u5047\u8bbe\u63a8\u6587\u5185\u5bb9\u5df2\u7ecf\u88ab\u9650\u5236\u4e3a 280 \u5b57\u7b26\u4ee5\u5185\u3002 fn summarize ( & self ) -> String { format! ( \"{}: {}\" , self . username , self . content ) } } \u5728\u7c7b\u578b\u4e0a\u5b9e\u73b0 trait \u7c7b\u4f3c\u4e8e\u5b9e\u73b0\u4e0e trait \u65e0\u5173\u7684\u65b9\u6cd5\u3002\u533a\u522b\u5728\u4e8e impl \u5173\u952e\u5b57\u4e4b\u540e\uff0c\u6211\u4eec\u63d0\u4f9b\u9700\u8981\u5b9e\u73b0 trait \u7684\u540d\u79f0\uff0c\u63a5\u7740\u662f for \u548c\u9700\u8981\u5b9e\u73b0 trait \u7684\u7c7b\u578b\u7684\u540d\u79f0\u3002 \u5728 impl \u5757\u4e2d\uff0c\u4f7f\u7528 trait \u5b9a\u4e49\u4e2d\u7684\u65b9\u6cd5\u7b7e\u540d\uff0c\u4e0d\u8fc7\u4e0d\u518d\u540e\u8ddf\u5206\u53f7\uff0c\u800c\u662f\u9700\u8981\u5728\u5927\u62ec\u53f7\u4e2d\u7f16\u5199\u51fd\u6570\u4f53\u6765\u4e3a\u7279\u5b9a\u7c7b\u578b\u5b9e\u73b0 trait \u65b9\u6cd5\u6240\u62e5\u6709\u7684\u884c\u4e3a\u3002 \u73b0\u5728\u5e93\u5728 NewsArticle \u548c Tweet \u4e0a\u5b9e\u73b0\u4e86 Summary trait \uff0c crate \u7684\u7528\u6237\u53ef\u4ee5\u50cf\u8c03\u7528\u5e38\u89c4\u65b9\u6cd5\u4e00\u6837\u8c03\u7528 NewsArticle \u548c Tweet \u5b9e\u4f8b\u7684 trait \u65b9\u6cd5\u4e86\u3002 \u552f\u4e00\u7684\u533a\u522b\u662f trait \u5fc5\u987b\u548c\u7c7b\u578b\u4e00\u8d77\u5f15\u5165\u4f5c\u7528\u57df\u4ee5\u4fbf\u4f7f\u7528\u989d\u5916\u7684 trait \u65b9\u6cd5\u3002\u8fd9\u662f\u4e00\u4e2a\u4e8c\u8fdb\u5236 crate \u5982\u4f55\u5229\u7528 aggregator \u5e93 crate \u7684\u4f8b\u5b50\uff1a use aggregator :: { Summary , Tweet }; fn main () { let tweet = Tweet { username : String :: from ( \"horse_ebooks\" ), content : String :: from ( \"of course, as you probably already know, people\" , ), reply : false , retweet : false , }; println! ( \"1 new tweet: {}\" , tweet . summarize ()); } \u5176\u4ed6\u4f9d\u8d56 aggregator crate \u7684 crate \u4e5f\u53ef\u4ee5\u5c06 Summary \u5f15\u5165\u4f5c\u7528\u57df\u4ee5\u4fbf\u4e3a\u5176\u81ea\u5df1\u7684\u7c7b\u578b\u5b9e\u73b0\u8be5 trait \u3002 \u5b9e\u73b0 trait \u65f6\u9700\u8981\u6ce8\u610f\u7684\u4e00\u4e2a\u9650\u5236\u662f\uff0c\u53ea\u6709\u5f53\u81f3\u5c11\u4e00\u4e2a trait \u6216\u8005\u8981\u5b9e\u73b0 trait \u7684\u7c7b\u578b\u4f4d\u4e8e crate \u7684\u672c\u5730\u4f5c\u7528\u57df\u65f6\uff0c\u624d\u80fd\u4e3a\u8be5\u7c7b\u578b\u5b9e\u73b0 trait \u3002 \u4f8b\u5982\uff0c\u53ef\u4ee5\u4e3a aggregator crate \u7684\u81ea\u5b9a\u4e49\u7c7b\u578b Tweet \u5b9e\u73b0\u5982\u6807\u51c6\u5e93\u4e2d\u7684 Display trait\uff0c\u8fd9\u662f\u56e0\u4e3a Tweet \u7c7b\u578b\u4f4d\u4e8e aggregator crate \u672c\u5730\u7684\u4f5c\u7528\u57df\u4e2d\u3002\u7c7b\u4f3c\u5730\uff0c\u4e5f\u53ef\u4ee5\u5728 aggregator crate \u4e2d\u4e3a Vec<T> \u5b9e\u73b0 Summary\uff0c\u8fd9\u662f\u56e0\u4e3a Summary trait \u4f4d\u4e8e aggregator crate \u672c\u5730\u4f5c\u7528\u57df\u4e2d\u3002 \u4f46\u662f\u4e0d\u80fd\u4e3a\u5916\u90e8\u7c7b\u578b\u5b9e\u73b0\u5916\u90e8 trait \u3002 \u4f8b\u5982\uff0c\u4e0d\u80fd\u5728 aggregator crate \u4e2d\u4e3a Vec<T> \u5b9e\u73b0 Display trait\u3002\u8fd9\u662f\u56e0\u4e3a Display \u548c Vec<T> \u90fd\u5b9a\u4e49\u4e8e\u6807\u51c6\u5e93\u4e2d\uff0c\u5b83\u4eec\u5e76\u4e0d\u4f4d\u4e8e aggregator crate \u672c\u5730\u4f5c\u7528\u57df\u4e2d\u3002\u8fd9\u4e2a\u9650\u5236\u662f\u88ab\u79f0\u4e3a \u76f8\u5e72\u6027 \uff08coherence\uff09 \u7684\u7a0b\u5e8f\u5c5e\u6027\u7684\u4e00\u90e8\u5206\uff0c\u6216\u8005\u66f4\u5177\u4f53\u7684\u8bf4\u662f \u5b64\u513f\u89c4\u5219 \uff08orphan rule\uff09\uff0c\u5176\u5f97\u540d\u4e8e\u4e0d\u5b58\u5728\u7236\u7c7b\u578b\u3002 \u8fd9\u6761\u89c4\u5219\u786e\u4fdd\u4e86\u5176\u4ed6\u4eba\u7f16\u5199\u7684\u4ee3\u7801\u4e0d\u4f1a\u7834\u574f\u4f60\u4ee3\u7801\uff0c\u53cd\u4e4b\u4ea6\u7136\u3002 \u6ca1\u6709\u8fd9\u6761\u89c4\u5219\u7684\u8bdd\uff0c\u4e24\u4e2a crate \u53ef\u4ee5\u5206\u522b\u5bf9\u76f8\u540c\u7c7b\u578b\u5b9e\u73b0\u76f8\u540c\u7684 trait\uff0c\u800c Rust \u5c06\u65e0\u4ece\u5f97\u77e5\u5e94\u8be5\u4f7f\u7528\u54ea\u4e00\u4e2a\u5b9e\u73b0\u3002 \u9ed8\u8ba4\u5b9e\u73b0 \u6709\u65f6\u4e3a trait \u4e2d\u7684\u67d0\u4e9b\u6216\u5168\u90e8\u65b9\u6cd5\u63d0\u4f9b\u9ed8\u8ba4\u7684\u884c\u4e3a\uff0c\u800c\u4e0d\u662f\u5728\u6bcf\u4e2a\u7c7b\u578b\u7684\u6bcf\u4e2a\u5b9e\u73b0\u4e2d\u90fd\u5b9a\u4e49\u81ea\u5df1\u7684\u884c\u4e3a\u662f\u5f88\u6709\u7528\u7684\u3002\u8fd9\u6837\u5f53\u4e3a\u67d0\u4e2a\u7279\u5b9a\u7c7b\u578b\u5b9e\u73b0 trait \u65f6\uff0c\u53ef\u4ee5\u9009\u62e9\u4fdd\u7559\u6216\u91cd\u8f7d\u6bcf\u4e2a\u65b9\u6cd5\u7684\u9ed8\u8ba4\u884c\u4e3a\u3002 \u4e0b\u9762\u793a\u4f8b\u4e2d\u5c55\u793a\u4e86\u5982\u4f55\u4e3a Summary trait \u7684 summarize \u65b9\u6cd5\u6307\u5b9a\u4e00\u4e2a\u9ed8\u8ba4\u7684\u5b57\u7b26\u4e32\u503c\uff0c\u800c\u4e0d\u662f\u53ea\u662f\u5b9a\u4e49\u65b9\u6cd5\u7b7e\u540d\uff1a // Summary trait \u7684\u5b9a\u4e49\uff0c\u5e26\u6709\u4e00\u4e2a summarize \u65b9\u6cd5\u7684\u9ed8\u8ba4\u5b9e\u73b0 pub trait Summary { fn summarize ( & self ) -> String { String :: from ( \"(Read more...)\" ) } } \u5982\u679c\u60f3\u8981\u5bf9 NewsArticle \u5b9e\u4f8b\u4f7f\u7528\u8fd9\u4e2a\u9ed8\u8ba4\u5b9e\u73b0\uff0c\u800c\u4e0d\u662f\u5b9a\u4e49\u4e00\u4e2a\u81ea\u5df1\u7684\u5b9e\u73b0\uff0c\u5219\u53ef\u4ee5\u901a\u8fc7 impl Summary for NewsArticle {} \u6307\u5b9a\u4e00\u4e2a\u7a7a\u7684 impl \u5757\u3002 \u867d\u7136\u6211\u4eec\u4e0d\u518d\u76f4\u63a5\u4e3a NewsArticle \u5b9a\u4e49 summarize \u65b9\u6cd5\u4e86\uff0c\u4f46\u662f\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u4e2a\u9ed8\u8ba4\u5b9e\u73b0\u5e76\u4e14\u6307\u5b9a NewsArticle \u5b9e\u73b0 Summary trait \u3002\u56e0\u6b64\uff0c\u6211\u4eec\u4ecd\u7136\u53ef\u4ee5\u5bf9 NewsArticle \u5b9e\u4f8b\u8c03\u7528 summarize \u65b9\u6cd5\uff0c\u5982\u4e0b\u6240\u793a\uff1a let article = NewsArticle { headline : String :: from ( \"Penguins win the Stanley Cup Championship!\" ), location : String :: from ( \"Pittsburgh, PA, USA\" ), author : String :: from ( \"Iceburgh\" ), content : String :: from ( \"The Pittsburgh Penguins once again are the best \\ hockey team in the NHL.\" , ), }; println! ( \"New article available! {}\" , article . summarize ()); // \u8fd9\u6bb5\u4ee3\u7801\u4f1a\u6253\u5370 New article available! (Read more...)\u3002 \u4e3a summarize \u521b\u5efa\u9ed8\u8ba4\u5b9e\u73b0\u5e76\u4e0d\u8981\u6c42\u5bf9\u793a\u4f8b\u4e2d Tweet \u4e0a\u7684 Summary \u5b9e\u73b0\u505a\u4efb\u4f55\u6539\u53d8\u3002\u5176\u539f\u56e0\u662f\u91cd\u8f7d\u4e00\u4e2a\u9ed8\u8ba4\u5b9e\u73b0\u7684\u8bed\u6cd5\u4e0e\u5b9e\u73b0\u6ca1\u6709\u9ed8\u8ba4\u5b9e\u73b0\u7684 trait \u65b9\u6cd5\u7684\u8bed\u6cd5\u4e00\u6837\u3002 \u9ed8\u8ba4\u5b9e\u73b0\u5141\u8bb8\u8c03\u7528\u76f8\u540c trait \u4e2d\u7684\u5176\u4ed6\u65b9\u6cd5\uff0c\u54ea\u6015\u8fd9\u4e9b\u65b9\u6cd5\u6ca1\u6709\u9ed8\u8ba4\u5b9e\u73b0\u3002\u5982\u6b64\uff0c trait \u53ef\u4ee5\u63d0\u4f9b\u5f88\u591a\u6709\u7528\u7684\u529f\u80fd\u800c\u53ea\u9700\u8981\u5b9e\u73b0\u6307\u5b9a\u4e00\u5c0f\u90e8\u5206\u5185\u5bb9\u3002 \u4f8b\u5982\uff0c\u6211\u4eec\u53ef\u4ee5\u5b9a\u4e49 Summary trait \uff0c\u4f7f\u5176\u5177\u6709\u4e00\u4e2a\u9700\u8981\u5b9e\u73b0\u7684 summarize_author \u65b9\u6cd5\uff0c\u7136\u540e\u5b9a\u4e49\u4e00\u4e2a summarize \u65b9\u6cd5\uff0c\u6b64\u65b9\u6cd5\u7684\u9ed8\u8ba4\u5b9e\u73b0\u8c03\u7528 summarize_author \u65b9\u6cd5\uff1a pub trait Summary { fn summarize_author ( & self ) -> String ; fn summarize ( & self ) -> String { format! ( \"(Read more from {}...)\" , self . summarize_author ()) } } \u4e3a\u4e86\u4f7f\u7528\u8fd9\u4e2a\u7248\u672c\u7684 Summary \uff0c\u53ea\u9700\u5728\u5b9e\u73b0 trait \u65f6\u5b9a\u4e49 summarize_author \u5373\u53ef\uff1a impl Summary for Tweet { fn summarize_author ( & self ) -> String { format! ( \"@{}\" , self . username ) } } \u4e00\u65e6\u5b9a\u4e49\u4e86 summarize_author \uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5bf9 Tweet \u7ed3\u6784\u4f53\u7684\u5b9e\u4f8b\u8c03\u7528 summarize \u4e86\uff0c\u800c summarize \u7684\u9ed8\u8ba4\u5b9e\u73b0\u4f1a\u8c03\u7528\u6211\u4eec\u63d0\u4f9b\u7684 summarize_author \u5b9a\u4e49\u3002 \u56e0\u4e3a\u5b9e\u73b0\u4e86 summarize_author \uff0c Summary trait \u5c31\u63d0\u4f9b\u4e86 summarize \u65b9\u6cd5\u7684\u529f\u80fd\uff0c\u4e14\u65e0\u9700\u7f16\u5199\u66f4\u591a\u7684\u4ee3\u7801\u3002 let tweet = Tweet { username : String :: from ( \"horse_ebooks\" ), content : String :: from ( \"of course, as you probably already know, people\" , ), reply : false , retweet : false , }; println! ( \"1 new tweet: {}\" , tweet . summarize ()); // \u8fd9\u4f1a\u6253\u5370\u51fa 1 new tweet: (Read more from @horse_ebooks...)\u3002 \u6ce8\u610f\u65e0\u6cd5\u4ece\u76f8\u540c\u65b9\u6cd5\u7684\u91cd\u8f7d\u5b9e\u73b0\u4e2d\u8c03\u7528\u9ed8\u8ba4\u65b9\u6cd5\u3002 trait\u4f5c\u4e3a\u53c2\u6570 \u77e5\u9053\u4e86\u5982\u4f55\u5b9a\u4e49 trait \u548c\u5728\u7c7b\u578b\u4e0a\u5b9e\u73b0\u8fd9\u4e9b trait \u4e4b\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u63a2\u7d22\u4e00\u4e0b\u5982\u4f55\u4f7f\u7528 trait \u6765\u63a5\u53d7\u591a\u79cd\u4e0d\u540c\u7c7b\u578b\u7684\u53c2\u6570\u3002 \u4f8b\u5982\u5728\u793a\u4f8b\u4e2d\u4e3a NewsArticle \u548c Tweet \u7c7b\u578b\u5b9e\u73b0\u4e86 Summary trait \u3002\u6211\u4eec\u53ef\u4ee5\u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570 notify \u6765\u8c03\u7528\u5176\u53c2\u6570 item \u4e0a\u7684 summarize \u65b9\u6cd5\uff0c\u8be5\u53c2\u6570\u662f\u5b9e\u73b0\u4e86 Summary trait \u7684\u67d0\u79cd\u7c7b\u578b\u3002\u4e3a\u6b64\u53ef\u4ee5\u4f7f\u7528 impl Trait \u8bed\u6cd5\uff0c\u50cf\u8fd9\u6837\uff1a pub fn notify ( item : & impl Summary ) { println! ( \"Breaking news! {}\" , item . summarize ()); } \u5bf9\u4e8e item \u53c2\u6570\uff0c\u6211\u4eec\u6307\u5b9a\u4e86 impl \u5173\u952e\u5b57\u548c trait \u540d\u79f0\uff0c\u800c\u4e0d\u662f\u5177\u4f53\u7684\u7c7b\u578b\u3002\u8be5\u53c2\u6570\u652f\u6301\u4efb\u4f55\u5b9e\u73b0\u4e86\u6307\u5b9a trait \u7684\u7c7b\u578b\u3002 \u5728 notify \u51fd\u6570\u4f53\u4e2d\uff0c\u53ef\u4ee5\u8c03\u7528\u4efb\u4f55\u6765\u81ea Summary trait \u7684\u65b9\u6cd5\uff0c\u6bd4\u5982 summarize \u3002\u6211\u4eec\u53ef\u4ee5\u4f20\u9012\u4efb\u4f55 NewsArticle \u6216 Tweet \u7684\u5b9e\u4f8b\u6765\u8c03\u7528 notify \u3002\u4efb\u4f55\u7528\u5176\u5b83\u5982 String \u6216 i32 \u7684\u7c7b\u578b\u8c03\u7528\u8be5\u51fd\u6570\u7684\u4ee3\u7801\u90fd\u4e0d\u80fd\u7f16\u8bd1\uff0c\u56e0\u4e3a\u5b83\u4eec\u6ca1\u6709\u5b9e\u73b0 Summary \u3002 Trait Bound\u8bed\u6cd5 impl Trait \u8bed\u6cd5\u9002\u7528\u4e8e\u76f4\u89c2\u7684\u4f8b\u5b50\uff0c\u5b83\u5b9e\u9645\u4e0a\u662f\u4e00\u79cd\u8f83\u957f\u5f62\u5f0f\u8bed\u6cd5\u7684\u8bed\u6cd5\u7cd6\u3002\u6211\u4eec\u79f0\u4e3a trait bound \uff0c\u5b83\u770b\u8d77\u6765\u50cf\uff1a pub fn notify < T : Summary > ( item : & T ) { println! ( \"Breaking news! {}\" , item . summarize ()); } \u8fd9\u4e0e\u4e4b\u524d\u7684\u4f8b\u5b50\u76f8\u540c\uff0c\u4e0d\u8fc7\u7a0d\u5fae\u5197\u957f\u4e86\u4e00\u4e9b\u3002 trait bound \u4e0e\u6cdb\u578b\u53c2\u6570\u58f0\u660e\u5728\u4e00\u8d77\uff0c\u4f4d\u4e8e\u5c16\u62ec\u53f7\u4e2d\u7684\u5192\u53f7\u540e\u9762\u3002 impl Trait \u5f88\u65b9\u4fbf\uff0c\u9002\u7528\u4e8e\u77ed\u5c0f\u7684\u4f8b\u5b50\u3002 trait bound \u5219\u9002\u7528\u4e8e\u66f4\u590d\u6742\u7684\u573a\u666f\u3002\u4f8b\u5982\uff0c\u53ef\u4ee5\u83b7\u53d6\u4e24\u4e2a\u5b9e\u73b0\u4e86 Summary \u7684\u53c2\u6570\u3002 \u4f7f\u7528 impl Trait \u7684\u8bed\u6cd5\u770b\u8d77\u6765\u50cf\u8fd9\u6837\uff1a pub fn notify ( item1 : & impl Summary , item2 : & impl Summary ) { \u8fd9\u9002\u7528\u4e8e item1 \u548c item2 \u5141\u8bb8\u662f\u4e0d\u540c\u7c7b\u578b\u7684\u60c5\u51b5\uff08\u53ea\u8981\u5b83\u4eec\u90fd\u5b9e\u73b0\u4e86 Summary \uff09\u3002\u4e0d\u8fc7\u5982\u679c\u4f60\u5e0c\u671b\u5f3a\u5236\u5b83\u4eec\u90fd\u662f\u76f8\u540c\u7c7b\u578b\u5462\uff1f\u8fd9\u53ea\u6709\u5728\u4f7f\u7528 trait bound \u65f6\u624d\u6709\u53ef\u80fd\uff1a pub fn notify < T : Summary > ( item1 : & T , item2 : & T ) { \u6cdb\u578b T \u88ab\u6307\u5b9a\u4e3a item1 \u548c item2 \u7684\u53c2\u6570\u9650\u5236\uff0c\u5982\u6b64\u4f20\u9012\u7ed9\u53c2\u6570 item1 \u548c item2 \u503c\u7684\u5177\u4f53\u7c7b\u578b\u5fc5\u987b\u4e00\u81f4\u3002 \u6307\u5b9a\u591a\u4e2atrait bound(+) \u5982\u679c notify \u9700\u8981\u663e\u793a item \u7684\u683c\u5f0f\u5316\u5f62\u5f0f\uff0c\u540c\u65f6\u4e5f\u8981\u4f7f\u7528 summarize \u65b9\u6cd5\uff0c\u90a3\u4e48 item \u5c31\u9700\u8981\u540c\u65f6\u5b9e\u73b0\u4e24\u4e2a\u4e0d\u540c\u7684 trait\uff1aDisplay \u548c Summary \u3002\u8fd9\u53ef\u4ee5\u901a\u8fc7 + \u8bed\u6cd5\u5b9e\u73b0\uff1a pub fn notify ( item : & ( impl Summary + Display )) { + \u8bed\u6cd5\u4e5f\u9002\u7528\u4e8e\u6cdb\u578b\u7684 trait bound \uff1a pub fn notify < T : Summary + Display > ( item : & T ) { \u901a\u8fc7\u6307\u5b9a\u8fd9\u4e24\u4e2a trait bound \uff0c notify \u7684\u51fd\u6570\u4f53\u53ef\u4ee5\u8c03\u7528 summarize \u5e76\u4f7f\u7528 {} \u6765\u683c\u5f0f\u5316 item \u3002 where\u7b80\u5316trait bound \u7136\u800c\uff0c\u4f7f\u7528\u8fc7\u591a\u7684 trait bound \u4e5f\u6709\u7f3a\u70b9\u3002\u6bcf\u4e2a\u6cdb\u578b\u6709\u5176\u81ea\u5df1\u7684 trait bound \uff0c\u6240\u4ee5\u6709\u591a\u4e2a\u6cdb\u578b\u53c2\u6570\u7684\u51fd\u6570\u5728\u540d\u79f0\u548c\u53c2\u6570\u5217\u8868\u4e4b\u95f4\u4f1a\u6709\u5f88\u957f\u7684 trait bound \u4fe1\u606f\uff0c\u8fd9\u4f7f\u5f97\u51fd\u6570\u7b7e\u540d\u96be\u4ee5\u9605\u8bfb\u3002\u4e3a\u6b64\uff0cRust \u6709\u53e6\u4e00\u4e2a\u5728\u51fd\u6570\u7b7e\u540d\u4e4b\u540e\u7684 where \u4ece\u53e5\u4e2d\u6307\u5b9a trait bound \u7684\u8bed\u6cd5\u3002\u6240\u4ee5\u9664\u4e86\u8fd9\u4e48\u5199\uff1a fn some_function < T : Display + Clone , U : Clone + Debug > ( t : & T , u : & U ) -> i32 { \u8fd8\u53ef\u4ee5\u50cf\u8fd9\u6837\u4f7f\u7528 where \u4ece\u53e5\uff1a fn some_function < T , U > ( t : & T , u : & U ) -> i32 where T : Display + Clone , U : Clone + Debug { \u8fd9\u4e2a\u51fd\u6570\u7b7e\u540d\u5c31\u663e\u5f97\u4e0d\u90a3\u4e48\u6742\u4e71\uff0c\u51fd\u6570\u540d\u3001\u53c2\u6570\u5217\u8868\u548c\u8fd4\u56de\u503c\u7c7b\u578b\u90fd\u79bb\u5f97\u5f88\u8fd1\uff0c\u770b\u8d77\u6765\u8ddf\u6ca1\u6709\u90a3\u4e48\u591a trait bounds \u7684\u51fd\u6570\u5f88\u50cf\u3002 \u8fd4\u56de\u5b9e\u73b0\u4e86 trait \u7684\u7c7b\u578b \u4e5f\u53ef\u4ee5\u5728\u8fd4\u56de\u503c\u4e2d\u4f7f\u7528 impl Trait \u8bed\u6cd5\uff0c\u6765\u8fd4\u56de\u5b9e\u73b0\u4e86\u67d0\u4e2a trait \u7684\u7c7b\u578b\uff1a fn returns_summarizable () -> impl Summary { Tweet { username : String :: from ( \"horse_ebooks\" ), content : String :: from ( \"of course, as you probably already know, people\" , ), reply : false , retweet : false , } } \u901a\u8fc7\u4f7f\u7528 impl Summary \u4f5c\u4e3a\u8fd4\u56de\u503c\u7c7b\u578b\uff0c\u6211\u4eec\u6307\u5b9a\u4e86 returns_summarizable \u51fd\u6570\u8fd4\u56de\u67d0\u4e2a\u5b9e\u73b0\u4e86 Summary trait \u7684\u7c7b\u578b\uff0c\u4f46\u662f\u4e0d\u786e\u5b9a\u5176\u5177\u4f53\u7684\u7c7b\u578b\u3002\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d returns_summarizable \u8fd4\u56de\u4e86\u4e00\u4e2a Tweet \uff0c\u4e0d\u8fc7\u8c03\u7528\u65b9\u5e76\u4e0d\u77e5\u60c5\u3002 \u8fd4\u56de\u4e00\u4e2a\u53ea\u662f\u6307\u5b9a\u4e86\u9700\u8981\u5b9e\u73b0\u7684 trait \u7684\u7c7b\u578b\u7684\u80fd\u529b\u5728\u95ed\u5305\u548c\u8fed\u4ee3\u5668\u573a\u666f\u5341\u5206\u7684\u6709\u7528\uff0c\u7b2c\u5341\u4e09\u7ae0\u4f1a\u4ecb\u7ecd\u5b83\u4eec\u3002\u95ed\u5305\u548c\u8fed\u4ee3\u5668\u521b\u5efa\u53ea\u6709\u7f16\u8bd1\u5668\u77e5\u9053\u7684\u7c7b\u578b\uff0c\u6216\u8005\u662f\u975e\u5e38\u975e\u5e38\u957f\u7684\u7c7b\u578b\u3002impl Trait \u5141\u8bb8\u4f60\u7b80\u5355\u7684\u6307\u5b9a\u51fd\u6570\u8fd4\u56de\u4e00\u4e2a Iterator \u800c\u65e0\u9700\u5199\u51fa\u5b9e\u9645\u7684\u5197\u957f\u7684\u7c7b\u578b\u3002 \u4e0d\u8fc7\u8fd9\u53ea\u9002\u7528\u4e8e\u8fd4\u56de\u5355\u4e00\u7c7b\u578b\u7684\u60c5\u51b5\u3002\u4f8b\u5982\uff0c\u8fd9\u6bb5\u4ee3\u7801\u7684\u8fd4\u56de\u503c\u7c7b\u578b\u6307\u5b9a\u4e3a\u8fd4\u56de impl Summary \uff0c\u4f46\u662f\u8fd4\u56de\u4e86 NewsArticle \u6216 Tweet \u5c31\u884c\u4e0d\u901a\uff1a fn returns_summarizable ( switch : bool ) -> impl Summary { if switch { NewsArticle { headline : String :: from ( \"Penguins win the Stanley Cup Championship!\" , ), location : String :: from ( \"Pittsburgh, PA, USA\" ), author : String :: from ( \"Iceburgh\" ), content : String :: from ( \"The Pittsburgh Penguins once again are the best \\ hockey team in the NHL.\" , ), } } else { Tweet { username : String :: from ( \"horse_ebooks\" ), content : String :: from ( \"of course, as you probably already know, people\" , ), reply : false , retweet : false , } } } \u8fd9\u91cc\u5c1d\u8bd5\u8fd4\u56de NewsArticle \u6216 Tweet \u3002\u8fd9\u4e0d\u80fd\u7f16\u8bd1\uff0c\u56e0\u4e3a impl Trait \u5de5\u4f5c\u65b9\u5f0f\u7684\u9650\u5236\u3002\u7b2c\u5341\u4e03\u7ae0\u7684 \u201c \u4e3a\u4f7f\u7528\u4e0d\u540c\u7c7b\u578b\u7684\u503c\u800c\u8bbe\u8ba1\u7684 trait \u5bf9\u8c61 \u201d \u90e8\u5206\u4f1a\u4ecb\u7ecd\u5982\u4f55\u7f16\u5199\u8fd9\u6837\u4e00\u4e2a\u51fd\u6570\u3002 \u4f7f\u7528 trait bounds \u6765\u4fee\u590d largest \u51fd\u6570 \u73b0\u5728\u4f60\u77e5\u9053\u4e86\u5982\u4f55\u4f7f\u7528\u6cdb\u578b\u53c2\u6570 trait bound \u6765\u6307\u5b9a\u6240\u9700\u7684\u884c\u4e3a\u3002\u8ba9\u6211\u4eec\u4fee\u590d\u4f7f\u7528\u6cdb\u578b\u7c7b\u578b\u53c2\u6570\u7684 largest \u51fd\u6570\u5b9a\u4e49\uff01\u56de\u987e\u4e00\u4e0b\uff0c\u6700\u540e\u5c1d\u8bd5\u7f16\u8bd1\u4ee3\u7801\u65f6\u51fa\u73b0\u7684\u9519\u8bef\u662f\uff1a $ cargo run Compiling chapter10 v0 . 1.0 ( file : ///projects/chapter10) error [ E0369 ] : binary operation ` > ` cannot be applied to type ` T ` - -> src / main . rs : 5 : 17 | 5 | if item > largest { | ---- ^ ------- T | | | T | help : consider restricting type parameter ` T ` | 1 | fn largest < T : std :: cmp :: PartialOrd > ( list : & [ T ]) -> T { | ++++++++++++++++++++++ For more information about this error , try ` rustc -- explain E0369 ` . error : could not compile ` chapter10 ` due to previous error \u5728 largest \u51fd\u6570\u4f53\u4e2d\u6211\u4eec\u60f3\u8981\u4f7f\u7528\u5927\u4e8e\u8fd0\u7b97\u7b26 (>) \u6bd4\u8f83\u4e24\u4e2a T \u7c7b\u578b\u7684\u503c\u3002 \u8fd9\u4e2a\u8fd0\u7b97\u7b26\u88ab\u5b9a\u4e49\u4e3a\u6807\u51c6\u5e93\u4e2d trait std::cmp::PartialOrd \u7684\u4e00\u4e2a\u9ed8\u8ba4\u65b9\u6cd5\u3002 \u6240\u4ee5\u9700\u8981\u5728 T \u7684 trait bound \u4e2d\u6307\u5b9a PartialOrd \uff0c\u8fd9\u6837 largest \u51fd\u6570\u53ef\u4ee5\u7528\u4e8e\u4efb\u4f55\u53ef\u4ee5\u6bd4\u8f83\u5927\u5c0f\u7684\u7c7b\u578b\u7684 slice \u3002 \u56e0\u4e3a PartialOrd \u4f4d\u4e8e prelude \u4e2d\u6240\u4ee5\u5e76\u4e0d\u9700\u8981\u624b\u52a8\u5c06\u5176\u5f15\u5165\u4f5c\u7528\u57df\u3002\u5c06 largest \u7684\u7b7e\u540d\u4fee\u6539\u4e3a\u5982\u4e0b\uff1a fn largest < T : PartialOrd > ( list : & [ T ]) -> T { \u4f46\u662f\u5982\u679c\u7f16\u8bd1\u4ee3\u7801\u7684\u8bdd\uff0c\u4f1a\u51fa\u73b0\u4e00\u4e9b\u4e0d\u540c\u7684\u9519\u8bef\uff1a $ cargo run Compiling chapter10 v0 . 1.0 ( file : ///projects/chapter10) error [ E0508 ] : cannot move out of type ` [ T ] ` , a non - copy slice - -> src / main . rs : 2 : 23 | 2 | let mut largest = list [ 0 ]; | ^^^^^^^ | | | cannot move out of here | move occurs because ` list [ _ ] ` has type ` T ` , which does not implement the ` Copy ` trait | help : consider borrowing here : ` & list [ 0 ] ` error [ E0507 ] : cannot move out of a shared reference - -> src / main . rs : 4 : 18 | 4 | for & item in list { | ----- ^^^^ | || | | data moved here | | move occurs because ` item ` has type ` T ` , which does not implement the ` Copy ` trait | help : consider removing the ` & ` : ` item ` Some errors have detailed explanations : E0507 , E0508 . For more information about an error , try ` rustc -- explain E0507 ` . error : could not compile ` chapter10 ` due to 2 previous errors \u9519\u8bef\u7684\u6838\u5fc3\u662f cannot move out of type [T], a non-copy slice \uff0c\u5bf9\u4e8e\u975e\u6cdb\u578b\u7248\u672c\u7684 largest \u51fd\u6570\uff0c\u6211\u4eec\u53ea\u5c1d\u8bd5\u4e86\u5bfb\u627e\u6700\u5927\u7684 i32 \u548c char \u3002 \u6b63\u5982\u7b2c\u56db\u7ae0 \u201c \u53ea\u5728\u6808\u4e0a\u7684\u6570\u636e\uff1a\u62f7\u8d1d \u201d \u90e8\u5206\u8ba8\u8bba\u8fc7\u7684\uff0c \u50cf i32 \u548c char \u8fd9\u6837\u7684\u7c7b\u578b\u662f\u5df2\u77e5\u5927\u5c0f\u7684\u5e76\u53ef\u4ee5\u50a8\u5b58\u5728\u6808\u4e0a\uff0c\u6240\u4ee5\u4ed6\u4eec\u5b9e\u73b0\u4e86 Copy trait \u3002 \u5f53\u6211\u4eec\u5c06 largest \u51fd\u6570\u6539\u6210\u4f7f\u7528\u6cdb\u578b\u540e\uff0c\u73b0\u5728 list \u53c2\u6570\u7684\u7c7b\u578b\u5c31\u6709\u53ef\u80fd\u662f\u6ca1\u6709\u5b9e\u73b0 Copy trait \u7684\u3002\u8fd9\u610f\u5473\u7740\u6211\u4eec\u53ef\u80fd\u4e0d\u80fd\u5c06 list[0] \u7684\u503c\u79fb\u52a8\u5230 largest \u53d8\u91cf\u4e2d\uff0c\u8fd9\u5bfc\u81f4\u4e86\u4e0a\u9762\u7684\u9519\u8bef\u3002 \u4e3a\u4e86\u53ea\u5bf9\u5b9e\u73b0\u4e86 Copy \u7684\u7c7b\u578b\u8c03\u7528\u8fd9\u4e9b\u4ee3\u7801\uff0c\u53ef\u4ee5\u5728 T \u7684 trait bounds \u4e2d\u589e\u52a0 Copy \uff01\u793a\u4f8b\u4e2d\u5c55\u793a\u4e86\u4e00\u4e2a\u53ef\u4ee5\u7f16\u8bd1\u7684\u6cdb\u578b\u7248\u672c\u7684 largest \u51fd\u6570\u7684\u5b8c\u6574\u4ee3\u7801\uff0c \u53ea\u8981\u4f20\u9012\u7ed9 largest \u7684 slice \u503c\u7684\u7c7b\u578b\u5b9e\u73b0\u4e86 PartialOrd \u548c Copy \u8fd9\u4e24\u4e2a trait \uff0c\u4f8b\u5982 i32 \u548c char \uff1a // \u4e00\u4e2a\u53ef\u4ee5\u7528\u4e8e\u4efb\u4f55\u5b9e\u73b0\u4e86 PartialOrd \u548c Copy trait \u7684\u6cdb\u578b\u7684 largest \u51fd\u6570 fn largest < T : PartialOrd + Copy > ( list : & [ T ]) -> T { let mut largest = list [ 0 ]; for & item in list { if item > largest { largest = item ; } } largest } fn main () { let number_list = vec! [ 34 , 50 , 25 , 100 , 65 ]; let result = largest ( & number_list ); println! ( \"The largest number is {}\" , result ); let char_list = vec! [ 'y' , 'm' , 'a' , 'q' ]; let result = largest ( & char_list ); println! ( \"The largest char is {}\" , result ); } \u5982\u679c\u5e76\u4e0d\u5e0c\u671b\u9650\u5236 largest \u51fd\u6570\u53ea\u80fd\u7528\u4e8e\u5b9e\u73b0\u4e86 Copy trait \u7684\u7c7b\u578b\uff0c\u6211\u4eec\u53ef\u4ee5\u5728 T \u7684 trait bounds \u4e2d\u6307\u5b9a Clone \u800c\u4e0d\u662f Copy \u3002 \u5e76\u514b\u9686 slice \u7684\u6bcf\u4e00\u4e2a\u503c\u4f7f\u5f97 largest \u51fd\u6570\u62e5\u6709\u5176\u6240\u6709\u6743\u3002\u4f7f\u7528 clone \u51fd\u6570\u610f\u5473\u7740\u5bf9\u4e8e\u7c7b\u4f3c String \u8fd9\u6837\u62e5\u6709\u5806\u4e0a\u6570\u636e\u7684\u7c7b\u578b\uff0c\u4f1a\u6f5c\u5728\u7684\u5206\u914d\u66f4\u591a\u5806\u4e0a\u7a7a\u95f4\uff0c\u800c\u5806\u5206\u914d\u5728\u6d89\u53ca\u5927\u91cf\u6570\u636e\u65f6\u53ef\u80fd\u4f1a\u76f8\u5f53\u7f13\u6162\u3002 \u53e6\u4e00\u79cd largest \u7684\u5b9e\u73b0\u65b9\u5f0f\u662f\u8fd4\u56de\u5728 slice \u4e2d T \u503c\u7684\u5f15\u7528\u3002\u5982\u679c\u6211\u4eec\u5c06\u51fd\u6570\u8fd4\u56de\u503c\u4ece T \u6539\u4e3a &T \u5e76\u6539\u53d8\u51fd\u6570\u4f53\u4f7f\u5176\u80fd\u591f\u8fd4\u56de\u4e00\u4e2a\u5f15\u7528\uff0c\u6211\u4eec\u5c06\u4e0d\u9700\u8981\u4efb\u4f55 Clone \u6216 Copy \u7684 trait bounds \u800c\u4e14\u4e5f\u4e0d\u4f1a\u6709\u4efb\u4f55\u7684\u5806\u5206\u914d\u3002\u5c1d\u8bd5\u81ea\u5df1\u5b9e\u73b0\u8fd9\u79cd\u66ff\u4ee3\u89e3\u51b3\u65b9\u5f0f\u5427\uff01\u5982\u679c\u4f60\u65e0\u6cd5\u6446\u8131\u4e0e\u751f\u547d\u5468\u671f\u6709\u5173\u7684\u9519\u8bef\uff0c\u8bf7\u7ee7\u7eed\u9605\u8bfb\uff1a\u63a5\u4e0b\u6765\u7684 \u201c\u751f\u547d\u5468\u671f\u4e0e\u5f15\u7528\u6709\u6548\u6027\u201d \u90e8\u5206\u4f1a\u8be6\u7ec6\u7684\u8bf4\u660e\uff0c\u4e0d\u8fc7\u751f\u547d\u5468\u671f\u5bf9\u4e8e\u89e3\u51b3\u8fd9\u4e9b\u6311\u6218\u6765\u8bf4\u5e76\u4e0d\u662f\u5fc5\u987b\u7684\u3002 \u4f7f\u7528 trait bound \u6709\u6761\u4ef6\u5730\u5b9e\u73b0\u65b9\u6cd5 \u901a\u8fc7\u4f7f\u7528\u5e26\u6709 trait bound \u7684\u6cdb\u578b\u53c2\u6570\u7684 impl \u5757\uff0c\u53ef\u4ee5\u6709\u6761\u4ef6\u5730\u53ea\u4e3a\u90a3\u4e9b\u5b9e\u73b0\u4e86\u7279\u5b9a trait \u7684\u7c7b\u578b\u5b9e\u73b0\u65b9\u6cd5\u3002 \u4f8b\u5982\uff0c\u793a\u4f8b\u4e2d\u7684\u7c7b\u578b Pair<T> \u603b\u662f\u5b9e\u73b0\u4e86 new \u65b9\u6cd5\u5e76\u8fd4\u56de\u4e00\u4e2a Pair<T> \u7684\u5b9e\u4f8b\uff08\u56de\u5fc6\u4e00\u4e0b\u7b2c\u4e94\u7ae0\u7684 \"\u5b9a\u4e49\u65b9\u6cd5\" \u90e8\u5206\uff0c Self \u662f\u4e00\u4e2a impl \u5757\u7c7b\u578b\u7684 \u7c7b\u578b\u522b\u540d \uff08type alias\uff09\uff0c\u5728\u8fd9\u91cc\u662f Pair<T> \uff09\u3002\u4e0d\u8fc7\u5728\u4e0b\u4e00\u4e2a impl \u5757\u4e2d\uff0c\u53ea\u6709\u90a3\u4e9b\u4e3a T \u7c7b\u578b\u5b9e\u73b0\u4e86 PartialOrd trait \uff08\u6765\u5141\u8bb8\u6bd4\u8f83\uff09 \u548c Display trait \uff08\u6765\u542f\u7528\u6253\u5370\uff09\u7684 Pair<T> \u624d\u4f1a\u5b9e\u73b0 cmp_display \u65b9\u6cd5\uff1a // \u6839\u636e trait bound \u5728\u6cdb\u578b\u4e0a\u6709\u6761\u4ef6\u7684\u5b9e\u73b0\u65b9\u6cd5 use std :: fmt :: Display ; struct Pair < T > { x : T , y : T , } impl < T > Pair < T > { fn new ( x : T , y : T ) -> Self { Self { x , y } } } impl < T : Display + PartialOrd > Pair < T > { fn cmp_display ( & self ) { if self . x >= self . y { println! ( \"The largest member is x = {}\" , self . x ); } else { println! ( \"The largest member is y = {}\" , self . y ); } } } \u4e5f\u53ef\u4ee5\u5bf9\u4efb\u4f55\u5b9e\u73b0\u4e86\u7279\u5b9a trait \u7684\u7c7b\u578b\u6709\u6761\u4ef6\u5730\u5b9e\u73b0 trait \u3002\u5bf9\u4efb\u4f55\u6ee1\u8db3\u7279\u5b9a trait bound \u7684\u7c7b\u578b\u5b9e\u73b0 trait \u88ab\u79f0\u4e3a blanket implementations \uff0c\u4ed6\u4eec\u88ab\u5e7f\u6cdb\u7684\u7528\u4e8e Rust \u6807\u51c6\u5e93\u4e2d\u3002 \u4f8b\u5982\uff0c\u6807\u51c6\u5e93\u4e3a\u4efb\u4f55\u5b9e\u73b0\u4e86 Display trait \u7684\u7c7b\u578b\u5b9e\u73b0\u4e86 ToString trait \u3002\u8fd9\u4e2a impl \u5757\u770b\u8d77\u6765\u50cf\u8fd9\u6837\uff1a impl < T : Display > ToString for T { // --snip-- } \u56e0\u4e3a\u6807\u51c6\u5e93\u6709\u4e86\u8fd9\u4e9b blanket implementation \uff0c\u6211\u4eec\u53ef\u4ee5\u5bf9\u4efb\u4f55\u5b9e\u73b0\u4e86 Display trait \u7684\u7c7b\u578b\u8c03\u7528\u7531 ToString \u5b9a\u4e49\u7684 to_string \u65b9\u6cd5\u3002 \u4f8b\u5982\uff0c\u53ef\u4ee5\u5c06\u6574\u578b\u8f6c\u6362\u4e3a\u5bf9\u5e94\u7684 String \u503c\uff0c\u56e0\u4e3a\u6574\u578b\u5b9e\u73b0\u4e86 Display \uff1a let s = 3. to_string (); blanket implementation \u4f1a\u51fa\u73b0\u5728 trait \u6587\u6863\u7684 \u201cImplementers\u201d \u90e8\u5206\u3002 trait \u548c trait bound \u8ba9\u6211\u4eec\u4f7f\u7528\u6cdb\u578b\u7c7b\u578b\u53c2\u6570\u6765\u51cf\u5c11\u91cd\u590d\uff0c\u5e76\u4ecd\u7136\u80fd\u591f\u5411\u7f16\u8bd1\u5668\u660e\u786e\u6307\u5b9a\u6cdb\u578b\u7c7b\u578b\u9700\u8981\u62e5\u6709\u54ea\u4e9b\u884c\u4e3a\u3002 \u56e0\u4e3a\u6211\u4eec\u5411\u7f16\u8bd1\u5668\u63d0\u4f9b\u4e86 trait bound \u4fe1\u606f\uff0c\u5b83\u5c31\u53ef\u4ee5\u68c0\u67e5\u4ee3\u7801\u4e2d\u6240\u7528\u5230\u7684\u5177\u4f53\u7c7b\u578b\u662f\u5426\u63d0\u4f9b\u4e86\u6b63\u786e\u7684\u884c\u4e3a\u3002 \u5728\u52a8\u6001\u7c7b\u578b\u8bed\u8a00\u4e2d\uff0c\u5982\u679c\u6211\u4eec\u5c1d\u8bd5\u8c03\u7528\u4e00\u4e2a\u7c7b\u578b\u5e76\u6ca1\u6709\u5b9e\u73b0\u7684\u65b9\u6cd5\uff0c\u4f1a\u5728\u8fd0\u884c\u65f6\u51fa\u73b0\u9519\u8bef\u3002 Rust \u5c06\u8fd9\u4e9b\u9519\u8bef\u79fb\u52a8\u5230\u4e86\u7f16\u8bd1\u65f6\uff0c\u751a\u81f3\u5728\u4ee3\u7801\u80fd\u591f\u8fd0\u884c\u4e4b\u524d\u5c31\u5f3a\u8feb\u6211\u4eec\u4fee\u590d\u9519\u8bef\u3002 \u53e6\u5916\uff0c\u6211\u4eec\u4e5f\u65e0\u9700\u7f16\u5199\u8fd0\u884c\u65f6\u68c0\u67e5\u884c\u4e3a\u7684\u4ee3\u7801\uff0c\u56e0\u4e3a\u5728\u7f16\u8bd1\u65f6\u5c31\u5df2\u7ecf\u68c0\u67e5\u8fc7\u4e86\uff0c\u8fd9\u6837\u76f8\u6bd4\u5176\u4ed6\u90a3\u4e9b\u4e0d\u613f\u653e\u5f03\u6cdb\u578b\u7075\u6d3b\u6027\u7684\u8bed\u8a00\u6709\u66f4\u597d\u7684\u6027\u80fd\u3002 \u8fd9\u91cc\u8fd8\u6709\u4e00\u79cd\u6cdb\u578b\uff0c\u6211\u4eec\u4e00\u76f4\u5728\u4f7f\u7528\u5b83\u751a\u81f3\u90fd\u6ca1\u6709\u5bdf\u89c9\u5b83\u7684\u5b58\u5728\uff0c\u8fd9\u5c31\u662f \u751f\u547d\u5468\u671f \uff08lifetimes\uff09\u3002\u4e0d\u540c\u4e8e\u5176\u4ed6\u6cdb\u578b\u5e2e\u52a9\u6211\u4eec\u786e\u4fdd\u7c7b\u578b\u62e5\u6709\u671f\u671b\u7684\u884c\u4e3a\uff0c\u751f\u547d\u5468\u671f\u5219\u6709\u52a9\u4e8e\u786e\u4fdd\u5f15\u7528\u5728\u6211\u4eec\u9700\u8981\u4ed6\u4eec\u7684\u65f6\u5019\u4e00\u76f4\u6709\u6548\u3002\u8ba9\u6211\u4eec\u5b66\u4e60\u751f\u547d\u5468\u671f\u662f\u5982\u4f55\u505a\u5230\u8fd9\u4e9b\u7684\u3002 \u751f\u547d\u5468\u671f \u5f53\u5728\u524d\u9762\u8ba8\u8bba \u201c\u5f15\u7528\u548c\u501f\u7528\u201d \u90e8\u5206\u65f6\uff0c\u6211\u4eec\u9057\u6f0f\u4e86\u4e00\u4e2a\u91cd\u8981\u7684\u7ec6\u8282\uff1aRust \u4e2d\u7684\u6bcf\u4e00\u4e2a\u5f15\u7528\u90fd\u6709\u5176 \u751f\u547d\u5468\u671f \uff08lifetime\uff09\uff0c\u4e5f\u5c31\u662f\u5f15\u7528\u4fdd\u6301\u6709\u6548\u7684\u4f5c\u7528\u57df\u3002\u5927\u90e8\u5206\u65f6\u5019\u751f\u547d\u5468\u671f\u662f\u9690\u542b\u5e76\u53ef\u4ee5\u63a8\u65ad\u7684\uff0c\u6b63\u5982\u5927\u90e8\u5206\u65f6\u5019\u7c7b\u578b\u4e5f\u662f\u53ef\u4ee5\u63a8\u65ad\u7684\u4e00\u6837\u3002\u7c7b\u4f3c\u4e8e\u5f53\u56e0\u4e3a\u6709\u591a\u79cd\u53ef\u80fd\u7c7b\u578b\u7684\u65f6\u5019\u5fc5\u987b\u6ce8\u660e\u7c7b\u578b\uff0c\u4e5f\u4f1a\u51fa\u73b0\u5f15\u7528\u7684\u751f\u547d\u5468\u671f\u4ee5\u4e00\u4e9b\u4e0d\u540c\u65b9\u5f0f\u76f8\u5173\u8054\u7684\u60c5\u51b5\uff0c\u6240\u4ee5 Rust \u9700\u8981\u6211\u4eec\u4f7f\u7528\u6cdb\u578b\u751f\u547d\u5468\u671f\u53c2\u6570\u6765\u6ce8\u660e\u4ed6\u4eec\u7684\u5173\u7cfb\uff0c\u8fd9\u6837\u5c31\u80fd\u786e\u4fdd\u8fd0\u884c\u65f6\u5b9e\u9645\u4f7f\u7528\u7684\u5f15\u7528\u7edd\u5bf9\u662f\u6709\u6548\u7684\u3002 \u751f\u547d\u5468\u671f\u6ce8\u89e3\u751a\u81f3\u4e0d\u662f\u4e00\u4e2a\u5927\u90e8\u5206\u8bed\u8a00\u90fd\u6709\u7684\u6982\u5ff5\uff0c\u6240\u4ee5\u8fd9\u53ef\u80fd\u611f\u89c9\u8d77\u6765\u6709\u4e9b\u964c\u751f\u3002\u867d\u7136\u672c\u7ae0\u4e0d\u53ef\u80fd\u6d89\u53ca\u5230\u5b83\u5168\u90e8\u7684\u5185\u5bb9\uff0c\u6211\u4eec\u4f1a\u8bb2\u5230\u4e00\u4e9b\u901a\u5e38\u4f60\u53ef\u80fd\u4f1a\u9047\u5230\u7684\u751f\u547d\u5468\u671f\u8bed\u6cd5\u4ee5\u4fbf\u4f60\u719f\u6089\u8fd9\u4e2a\u6982\u5ff5\u3002 \u751f\u547d\u5468\u671f\u907f\u514d\u4e86\u60ac\u5782\u5f15\u7528 \u751f\u547d\u5468\u671f\u7684\u4e3b\u8981\u76ee\u6807\u662f\u907f\u514d\u60ac\u5782\u5f15\u7528\uff0c\u540e\u8005\u4f1a\u5bfc\u81f4\u7a0b\u5e8f\u5f15\u7528\u4e86\u975e\u9884\u671f\u5f15\u7528\u7684\u6570\u636e\u3002 \u8003\u8651\u4e00\u4e0b\u793a\u4f8b\u4e2d\u7684\u7a0b\u5e8f\uff0c\u5b83\u6709\u4e00\u4e2a\u5916\u90e8\u4f5c\u7528\u57df\u548c\u4e00\u4e2a\u5185\u90e8\u4f5c\u7528\u57df\u3002 // \u5c1d\u8bd5\u4f7f\u7528\u79bb\u5f00\u4f5c\u7528\u57df\u7684\u503c\u7684\u5f15\u7528 { let r ; { let x = 5 ; r = & x ; } println! ( \"r: {}\" , r ); } \u6ce8\u610f \uff1a \u5f88\u591a\u793a\u4f8b\u4e2d\u58f0\u660e\u4e86\u6ca1\u6709\u521d\u59cb\u503c\u7684\u53d8\u91cf\uff0c\u6240\u4ee5\u8fd9\u4e9b\u53d8\u91cf\u5b58\u5728\u4e8e\u5916\u90e8\u4f5c\u7528\u57df\u3002 \u8fd9\u4e4d\u770b\u4e4b\u4e0b\u597d\u50cf\u548c Rust \u4e0d\u5141\u8bb8\u5b58\u5728\u7a7a\u503c\u76f8\u51b2\u7a81\u3002 \u7136\u800c\u5982\u679c\u5c1d\u8bd5\u5728\u7ed9\u5b83\u4e00\u4e2a\u503c\u4e4b\u524d\u4f7f\u7528\u8fd9\u4e2a\u53d8\u91cf\uff0c\u4f1a\u51fa\u73b0\u4e00\u4e2a\u7f16\u8bd1\u65f6\u9519\u8bef\uff0c\u8fd9\u5c31\u8bf4\u660e\u4e86 Rust \u786e\u5b9e\u4e0d\u5141\u8bb8\u7a7a\u503c\u3002 \u5916\u90e8\u4f5c\u7528\u57df\u58f0\u660e\u4e86\u4e00\u4e2a\u6ca1\u6709\u521d\u503c\u7684\u53d8\u91cf r \uff0c\u800c\u5185\u90e8\u4f5c\u7528\u57df\u58f0\u660e\u4e86\u4e00\u4e2a\u521d\u503c\u4e3a 5 \u7684\u53d8\u91cf x \u3002\u5728\u5185\u90e8\u4f5c\u7528\u57df\u4e2d\uff0c \u6211\u4eec\u5c1d\u8bd5\u5c06 r \u7684\u503c\u8bbe\u7f6e\u4e3a\u4e00\u4e2a x \u7684\u5f15\u7528\u3002\u63a5\u7740\u5728\u5185\u90e8\u4f5c\u7528\u57df\u7ed3\u675f\u540e\uff0c\u5c1d\u8bd5\u6253\u5370\u51fa r \u7684\u503c\u3002\u8fd9\u6bb5\u4ee3\u7801\u4e0d\u80fd\u7f16\u8bd1\u56e0\u4e3a r \u5f15\u7528\u7684\u503c\u5728\u5c1d\u8bd5\u4f7f\u7528\u4e4b\u524d\u5c31\u79bb\u5f00\u4e86\u4f5c\u7528\u57df\u3002 \u5982\u4e0b\u662f\u9519\u8bef\u4fe1\u606f\uff1a $ cargo run Compiling chapter10 v0 . 1.0 ( file : ///projects/chapter10) error [ E0597 ] : ` x ` does not live long enough - -> src / main . rs : 7 : 17 | 7 | r = & x ; | ^^ borrowed value does not live long enough 8 | } | - ` x ` dropped here while still borrowed 9 | 10 | println! ( \"r: {}\" , r ); | - borrow later used here For more information about this error , try ` rustc -- explain E0597 ` . error : could not compile ` chapter10 ` due to previous error \u53d8\u91cf x \u5e76\u6ca1\u6709 \u201c\u5b58\u5728\u7684\u8db3\u591f\u4e45\u201d \u3002\u5176\u539f\u56e0\u662f x \u5728\u5230\u8fbe\u7b2c 7 \u884c\u5185\u90e8\u4f5c\u7528\u57df\u7ed3\u675f\u65f6\u5c31\u79bb\u5f00\u4e86\u4f5c\u7528\u57df\u3002 \u4e0d\u8fc7 r \u5728\u5916\u90e8\u4f5c\u7528\u57df\u4ecd\u662f\u6709\u6548\u7684\uff1b\u4f5c\u7528\u57df\u8d8a\u5927\u6211\u4eec\u5c31\u8bf4\u5b83 \u201c\u5b58\u5728\u7684\u8d8a\u4e45\u201d\u3002 \u5982\u679c Rust \u5141\u8bb8\u8fd9\u6bb5\u4ee3\u7801\u5de5\u4f5c\uff0cr \u5c06\u4f1a\u5f15\u7528\u5728 x \u79bb\u5f00\u4f5c\u7528\u57df\u65f6\u88ab\u91ca\u653e\u7684\u5185\u5b58\uff0c\u8fd9\u65f6\u5c1d\u8bd5\u5bf9 r \u505a\u4efb\u4f55\u64cd\u4f5c\u90fd\u4e0d\u80fd\u6b63\u5e38\u5de5\u4f5c\u3002 \u90a3\u4e48 Rust \u662f\u5982\u4f55\u51b3\u5b9a\u8fd9\u6bb5\u4ee3\u7801\u662f\u4e0d\u88ab\u5141\u8bb8\u7684\u5462\uff1f\u8fd9\u5f97\u76ca\u4e8e\u501f\u7528\u68c0\u67e5\u5668\u3002 \u501f\u7528\u68c0\u67e5\u5668 Rust \u7f16\u8bd1\u5668\u6709\u4e00\u4e2a \u501f\u7528\u68c0\u67e5\u5668 \uff08borrow checker\uff09\uff0c\u5b83\u6bd4\u8f83\u4f5c\u7528\u57df\u6765\u786e\u4fdd\u6240\u6709\u7684\u501f\u7528\u90fd\u662f\u6709\u6548\u7684\u3002 \u793a\u4f8b\u5c55\u793a\u4e86\u5e26\u6709\u53d8\u91cf\u751f\u547d\u5468\u671f\u7684\u6ce8\u91ca\uff1a // r \u548c x \u7684\u751f\u547d\u5468\u671f\u6ce8\u89e3\uff0c\u5206\u522b\u53eb\u505a 'a \u548c 'b { let r ; // ---------+-- 'a // | { // | let x = 5 ; // -+-- 'b | r = & x ; // | | } // -+ | // | println! ( \"r: {}\" , r ); // | } // ---------+ \u8fd9\u91cc\u5c06 r \u7684\u751f\u547d\u5468\u671f\u6807\u8bb0\u4e3a 'a \u5e76\u5c06 x \u7684\u751f\u547d\u5468\u671f\u6807\u8bb0\u4e3a 'b \u3002\u5982\u4f60\u6240\u89c1\uff0c\u5185\u90e8\u7684 'b \u5757\u8981\u6bd4\u5916\u90e8\u7684\u751f\u547d\u5468\u671f 'a \u5c0f\u5f97\u591a\u3002 \u5728\u7f16\u8bd1\u65f6\uff0cRust \u6bd4\u8f83\u8fd9\u4e24\u4e2a\u751f\u547d\u5468\u671f\u7684\u5927\u5c0f\uff0c\u5e76\u53d1\u73b0 r \u62e5\u6709\u751f\u547d\u5468\u671f 'a \uff0c\u4e0d\u8fc7\u5b83\u5f15\u7528\u4e86\u4e00\u4e2a\u62e5\u6709\u751f\u547d\u5468\u671f 'b \u7684\u5bf9\u8c61\u3002 \u7a0b\u5e8f\u88ab\u62d2\u7edd\u7f16\u8bd1\uff0c\u56e0\u4e3a\u751f\u547d\u5468\u671f 'b \u6bd4\u751f\u547d\u5468\u671f 'a \u8981\u5c0f\uff1a\u88ab\u5f15\u7528\u7684\u5bf9\u8c61\u6bd4\u5b83\u7684\u5f15\u7528\u8005\u5b58\u5728\u7684\u65f6\u95f4\u66f4\u77ed\u3002 \u8ba9\u6211\u4eec\u770b\u770b\u793a\u4f8b\u4e2d\u8fd9\u4e2a\u5e76\u6ca1\u6709\u4ea7\u751f\u60ac\u5782\u5f15\u7528\u4e14\u53ef\u4ee5\u6b63\u786e\u7f16\u8bd1\u7684\u4f8b\u5b50\uff1a // \u4e00\u4e2a\u6709\u6548\u7684\u5f15\u7528\uff0c\u56e0\u4e3a\u6570\u636e\u6bd4\u5f15\u7528\u6709\u7740\u66f4\u957f\u7684\u751f\u547d\u5468\u671f { let x = 5 ; // ----------+-- 'b // | let r = & x ; // --+-- 'a | // | | println! ( \"r: {}\" , r ); // | | // --+ | } // ----------+ \u8fd9\u91cc x \u62e5\u6709\u751f\u547d\u5468\u671f 'b \uff0c\u6bd4 'a \u8981\u5927\u3002\u8fd9\u5c31\u610f\u5473\u7740 r \u53ef\u4ee5\u5f15\u7528 x \uff1aRust \u77e5\u9053 r \u4e2d\u7684\u5f15\u7528\u5728 x \u6709\u6548\u7684\u65f6\u5019\u4e5f\u603b\u662f\u6709\u6548\u7684\u3002 \u73b0\u5728\u6211\u4eec\u5df2\u7ecf\u5728\u4e00\u4e2a\u5177\u4f53\u7684\u4f8b\u5b50\u4e2d\u5c55\u793a\u4e86\u5f15\u7528\u7684\u751f\u547d\u5468\u671f\u4f4d\u4e8e\u4f55\u5904\uff0c\u5e76\u8ba8\u8bba\u4e86 Rust \u5982\u4f55\u5206\u6790\u751f\u547d\u5468\u671f\u6765\u4fdd\u8bc1\u5f15\u7528\u603b\u662f\u6709\u6548\u7684\uff0c\u63a5\u4e0b\u6765\u8ba9\u6211\u4eec\u804a\u804a\u5728\u51fd\u6570\u7684\u4e0a\u4e0b\u6587\u4e2d\u53c2\u6570\u548c\u8fd4\u56de\u503c\u7684\u6cdb\u578b\u751f\u547d\u5468\u671f\u3002 \u51fd\u6570\u4e2d\u7684\u6cdb\u578b\u751f\u547d\u5468\u671f \u8ba9\u6211\u4eec\u6765\u7f16\u5199\u4e00\u4e2a\u8fd4\u56de\u4e24\u4e2a\u5b57\u7b26\u4e32 slice \u4e2d\u8f83\u957f\u8005\u7684\u51fd\u6570\u3002\u8fd9\u4e2a\u51fd\u6570\u83b7\u53d6\u4e24\u4e2a\u5b57\u7b26\u4e32 slice \u5e76\u8fd4\u56de\u4e00\u4e2a\u5b57\u7b26\u4e32 slice \u3002\u4e00\u65e6\u6211\u4eec\u5b9e\u73b0\u4e86 longest \u51fd\u6570\uff0c\u793a\u4f8b\u4e2d\u7684\u4ee3\u7801\u5e94\u8be5\u4f1a\u6253\u5370\u51fa The longest string is abcd \uff1a fn main () { let string1 = String :: from ( \"abcd\" ); let string2 = \"xyz\" ; let result = longest ( string1 . as_str (), string2 ); println! ( \"The longest string is {}\" , result ); } \u6ce8\u610f\u8fd9\u4e2a\u51fd\u6570\u83b7\u53d6\u4f5c\u4e3a\u5f15\u7528\u7684\u5b57\u7b26\u4e32 slice \uff0c\u56e0\u4e3a\u6211\u4eec\u4e0d\u5e0c\u671b longest \u51fd\u6570\u83b7\u53d6\u53c2\u6570\u7684\u6240\u6709\u6743\u3002 \u53c2\u8003\u4e4b\u524d\u7b2c\u56db\u7ae0\u4e2d\u7684 \u201c\u5b57\u7b26\u4e32 slice \u4f5c\u4e3a\u53c2\u6570\u201d \u90e8\u5206\u4e2d\u66f4\u591a\u5173\u4e8e\u4e3a\u4ec0\u4e48\u793a\u4f8b\u7684\u53c2\u6570\u6b63\u7b26\u5408\u6211\u4eec\u671f\u671b\u7684\u8ba8\u8bba\u3002 \u5982\u679c\u5c1d\u8bd5\u50cf\u4e4b\u524d\u90a3\u6837\u5b9e\u73b0 longest \u51fd\u6570\uff0c\u5b83\u5e76\u4e0d\u80fd\u7f16\u8bd1\uff1a // \u4e00\u4e2a longest \u51fd\u6570\u7684\u5b9e\u73b0\uff0c\u5b83\u8fd4\u56de\u4e24\u4e2a\u5b57\u7b26\u4e32 slice \u4e2d\u8f83\u957f\u8005\uff0c\u73b0\u5728\u8fd8\u4e0d\u80fd\u7f16\u8bd1 fn longest ( x : & str , y : & str ) -> & str { if x . len () > y . len () { x } else { y } } \u76f8\u5e94\u5730\u4f1a\u51fa\u73b0\u5982\u4e0b\u6709\u5173\u751f\u547d\u5468\u671f\u7684\u9519\u8bef\uff1a $ cargo run Compiling chapter10 v0.1.0 ( file:///projects/chapter10 ) error [ E0106 ] : missing lifetime specifier --> src/main.rs:9:33 | 9 | fn longest ( x: & str, y: & str ) -> & str { | ---- ---- ^ expected named lifetime parameter | = help: this function 's return type contains a borrowed value, but the signature does not say whether it is borrowed from `x` or `y` help: consider introducing a named lifetime parameter | 9 | fn longest<' a> ( x: & 'a str, y: &' a str ) -> & ' a str { | ++++ ++ ++ ++ For more information about this error, try ` rustc --explain E0106 ` . error: could not compile ` chapter10 ` due to previous error \u63d0\u793a\u6587\u672c\u63ed\u793a\u4e86\u8fd4\u56de\u503c\u9700\u8981\u4e00\u4e2a\u6cdb\u578b\u751f\u547d\u5468\u671f\u53c2\u6570\uff0c\u56e0\u4e3a Rust \u5e76\u4e0d\u77e5\u9053\u5c06\u8981\u8fd4\u56de\u7684\u5f15\u7528\u662f\u6307\u5411 x \u6216 y \u3002 \u4e8b\u5b9e\u4e0a\u6211\u4eec\u4e5f\u4e0d\u77e5\u9053\uff0c\u56e0\u4e3a\u51fd\u6570\u4f53\u4e2d if \u5757\u8fd4\u56de\u4e00\u4e2a x \u7684\u5f15\u7528\u800c else \u5757\u8fd4\u56de\u4e00\u4e2a y \u7684\u5f15\u7528\uff01 \u5f53\u6211\u4eec\u5b9a\u4e49\u8fd9\u4e2a\u51fd\u6570\u7684\u65f6\u5019\uff0c\u5e76\u4e0d\u77e5\u9053\u4f20\u9012\u7ed9\u51fd\u6570\u7684\u5177\u4f53\u503c\uff0c\u6240\u4ee5\u4e5f\u4e0d\u77e5\u9053\u5230\u5e95\u662f if \u8fd8\u662f else \u4f1a\u88ab\u6267\u884c\u3002 \u6211\u4eec\u4e5f\u4e0d\u77e5\u9053\u4f20\u5165\u7684\u5f15\u7528\u7684\u5177\u4f53\u751f\u547d\u5468\u671f\uff0c\u6240\u4ee5\u4e5f\u5c31\u4e0d\u80fd\u50cf\u793a\u4f8b\u4e2d\u90a3\u6837\u901a\u8fc7\u89c2\u5bdf\u4f5c\u7528\u57df\u6765\u786e\u5b9a\u8fd4\u56de\u7684\u5f15\u7528\u662f\u5426\u603b\u662f\u6709\u6548\u3002 \u501f\u7528\u68c0\u67e5\u5668\u81ea\u8eab\u540c\u6837\u4e5f\u65e0\u6cd5\u786e\u5b9a\uff0c\u56e0\u4e3a\u5b83\u4e0d\u77e5\u9053 x \u548c y \u7684\u751f\u547d\u5468\u671f\u662f\u5982\u4f55\u4e0e\u8fd4\u56de\u503c\u7684\u751f\u547d\u5468\u671f\u76f8\u5173\u8054\u7684\u3002 \u4e3a\u4e86\u4fee\u590d\u8fd9\u4e2a\u9519\u8bef\uff0c\u6211\u4eec\u5c06\u589e\u52a0\u6cdb\u578b\u751f\u547d\u5468\u671f\u53c2\u6570\u6765\u5b9a\u4e49\u5f15\u7528\u95f4\u7684\u5173\u7cfb\u4ee5\u4fbf\u501f\u7528\u68c0\u67e5\u5668\u53ef\u4ee5\u8fdb\u884c\u5206\u6790\u3002 \u751f\u547d\u5468\u671f\u6ce8\u89e3\u8bed\u6cd5 \u751f\u547d\u5468\u671f\u6ce8\u89e3\u5e76\u4e0d\u6539\u53d8\u4efb\u4f55\u5f15\u7528\u7684\u751f\u547d\u5468\u671f\u7684\u957f\u77ed\u3002\u4e0e\u5f53\u51fd\u6570\u7b7e\u540d\u4e2d\u6307\u5b9a\u4e86\u6cdb\u578b\u7c7b\u578b\u53c2\u6570\u540e\u5c31\u53ef\u4ee5\u63a5\u53d7\u4efb\u4f55\u7c7b\u578b\u4e00\u6837\uff0c\u5f53\u6307\u5b9a\u4e86\u6cdb\u578b\u751f\u547d\u5468\u671f\u540e\u51fd\u6570\u4e5f\u80fd\u63a5\u53d7\u4efb\u4f55\u751f\u547d\u5468\u671f\u7684\u5f15\u7528\u3002\u751f\u547d\u5468\u671f\u6ce8\u89e3\u63cf\u8ff0\u4e86\u591a\u4e2a\u5f15\u7528\u751f\u547d\u5468\u671f\u76f8\u4e92\u7684\u5173\u7cfb\uff0c\u800c\u4e0d\u5f71\u54cd\u5176\u751f\u547d\u5468\u671f\u3002 \u751f\u547d\u5468\u671f\u6ce8\u89e3\u6709\u7740\u4e00\u4e2a\u4e0d\u592a\u5e38\u89c1\u7684\u8bed\u6cd5\uff1a\u751f\u547d\u5468\u671f\u53c2\u6570\u540d\u79f0\u5fc5\u987b\u4ee5\u6487\u53f7\uff08 ' \uff09\u5f00\u5934\uff0c\u5176\u540d\u79f0\u901a\u5e38\u5168\u662f\u5c0f\u5199\uff0c\u7c7b\u4f3c\u4e8e\u6cdb\u578b\u5176\u540d\u79f0\u975e\u5e38\u77ed\u3002 'a \u662f\u5927\u591a\u6570\u4eba\u9ed8\u8ba4\u4f7f\u7528\u7684\u540d\u79f0\u3002\u751f\u547d\u5468\u671f\u53c2\u6570\u6ce8\u89e3\u4f4d\u4e8e\u5f15\u7528\u7684 & \u4e4b\u540e\uff0c\u5e76\u6709\u4e00\u4e2a\u7a7a\u683c\u6765\u5c06\u5f15\u7528\u7c7b\u578b\u4e0e\u751f\u547d\u5468\u671f\u6ce8\u89e3\u5206\u9694\u5f00\u3002 \u8fd9\u91cc\u6709\u4e00\u4e9b\u4f8b\u5b50\uff1a\u6211\u4eec\u6709\u4e00\u4e2a\u6ca1\u6709\u751f\u547d\u5468\u671f\u53c2\u6570\u7684 i32 \u7684\u5f15\u7528\uff0c\u4e00\u4e2a\u6709\u53eb\u505a 'a \u7684\u751f\u547d\u5468\u671f\u53c2\u6570\u7684 i32 \u7684\u5f15\u7528\uff0c\u548c\u4e00\u4e2a\u751f\u547d\u5468\u671f\u4e5f\u662f 'a \u7684 i32 \u7684\u53ef\u53d8\u5f15\u7528\uff1a & i32 // \u5f15\u7528 &' a i32 // \u5e26\u6709\u663e\u5f0f\u751f\u547d\u5468\u671f\u7684\u5f15\u7528 &' a mut i32 // \u5e26\u6709\u663e\u5f0f\u751f\u547d\u5468\u671f\u7684\u53ef\u53d8\u5f15\u7528 \u5355\u4e2a\u7684\u751f\u547d\u5468\u671f\u6ce8\u89e3\u672c\u8eab\u6ca1\u6709\u591a\u5c11\u610f\u4e49\uff0c\u56e0\u4e3a\u751f\u547d\u5468\u671f\u6ce8\u89e3\u544a\u8bc9 Rust \u591a\u4e2a\u5f15\u7528\u7684\u6cdb\u578b\u751f\u547d\u5468\u671f\u53c2\u6570\u5982\u4f55\u76f8\u4e92\u8054\u7cfb\u7684\u3002\u4f8b\u5982\u5982\u679c\u51fd\u6570\u6709\u4e00\u4e2a\u751f\u547d\u5468\u671f 'a \u7684 i32 \u7684\u5f15\u7528\u7684\u53c2\u6570 first \u3002\u8fd8\u6709\u53e6\u4e00\u4e2a\u540c\u6837\u662f\u751f\u547d\u5468\u671f 'a \u7684 i32 \u7684\u5f15\u7528\u7684\u53c2\u6570 second \u3002\u8fd9\u4e24\u4e2a\u751f\u547d\u5468\u671f\u6ce8\u89e3\u610f\u5473\u7740\u5f15\u7528 first \u548c second \u5fc5\u987b\u4e0e\u8fd9\u6cdb\u578b\u751f\u547d\u5468\u671f\u5b58\u5728\u5f97\u4e00\u6837\u4e45\u3002 \u51fd\u6570\u7b7e\u540d\u4e2d\u7684\u751f\u547d\u5468\u671f\u6ce8\u89e3 \u73b0\u5728\u6765\u770b\u770b longest \u51fd\u6570\u7684\u4e0a\u4e0b\u6587\u4e2d\u7684\u751f\u547d\u5468\u671f\u3002\u5c31\u50cf\u6cdb\u578b\u7c7b\u578b\u53c2\u6570\uff0c\u6cdb\u578b\u751f\u547d\u5468\u671f\u53c2\u6570\u9700\u8981\u58f0\u660e\u5728\u51fd\u6570\u540d\u548c\u53c2\u6570\u5217\u8868\u95f4\u7684\u5c16\u62ec\u53f7\u4e2d\u3002 \u5728 \u8fd9\u4e2a\u7b7e\u540d\u4e2d\u6211\u4eec\u60f3\u8981\u8868\u8fbe\u7684\u9650\u5236\u662f\u6240\u6709\uff08\u4e24\u4e2a\uff09\u53c2\u6570\u548c\u8fd4\u56de\u7684\u5f15\u7528\u7684\u751f\u547d\u5468\u671f\u662f\u76f8\u5173\u7684\uff0c\u4e5f\u5c31\u662f\u8fd9\u4e24\u4e2a\u53c2\u6570\u548c\u8fd4\u56de\u7684\u5f15\u7528\u5b58\u6d3b\u7684\u4e00\u6837\u4e45\u3002 \u5c31\u50cf\u793a\u4f8b\u4e2d\u5728\u6bcf\u4e2a\u5f15\u7528\u4e2d\u90fd\u52a0\u4e0a\u4e86 'a \u90a3\u6837\uff1a // longest \u51fd\u6570\u5b9a\u4e49\u6307\u5b9a\u4e86\u7b7e\u540d\u4e2d\u6240\u6709\u7684\u5f15\u7528\u5fc5\u987b\u6709\u76f8\u540c\u7684\u751f\u547d\u5468\u671f 'a fn longest <' a > ( x : & ' a str , y : & ' a str ) -> & ' a str { if x . len () > y . len () { x } else { y } } \u8fd9\u6bb5\u4ee3\u7801\u80fd\u591f\u7f16\u8bd1\u5e76\u4f1a\u4ea7\u751f\u6211\u4eec\u5e0c\u671b\u5f97\u5230\u7684 main \u51fd\u6570\u7684\u7ed3\u679c\u3002 \u73b0\u5728\u51fd\u6570\u7b7e\u540d\u8868\u660e\u5bf9\u4e8e\u67d0\u4e9b\u751f\u547d\u5468\u671f 'a \uff0c\u51fd\u6570\u4f1a\u83b7\u53d6\u4e24\u4e2a\u53c2\u6570\uff0c\u4ed6\u4eec\u90fd\u662f\u4e0e\u751f\u547d\u5468\u671f 'a \u5b58\u5728\u7684\u4e00\u6837\u957f\u7684\u5b57\u7b26\u4e32 slice \u3002 \u51fd\u6570\u4f1a\u8fd4\u56de\u4e00\u4e2a\u540c\u6837\u4e5f\u4e0e\u751f\u547d\u5468\u671f 'a \u5b58\u5728\u7684\u4e00\u6837\u957f\u7684\u5b57\u7b26\u4e32 slice \u3002 \u5b83\u7684\u5b9e\u9645\u542b\u4e49\u662f longest \u51fd\u6570\u8fd4\u56de\u7684\u5f15\u7528\u7684\u751f\u547d\u5468\u671f\u4e0e\u4f20\u5165\u8be5\u51fd\u6570\u7684\u5f15\u7528\u7684\u751f\u547d\u5468\u671f\u7684\u8f83\u5c0f\u8005\u4e00\u81f4\u3002 \u8fd9\u4e9b\u5173\u7cfb\u5c31\u662f\u6211\u4eec\u5e0c\u671b Rust \u5206\u6790\u4ee3\u7801\u65f6\u6240\u4f7f\u7528\u7684\u3002 \u8bb0\u4f4f\u901a\u8fc7\u5728\u51fd\u6570\u7b7e\u540d\u4e2d\u6307\u5b9a\u751f\u547d\u5468\u671f\u53c2\u6570\u65f6\uff0c\u6211\u4eec\u5e76\u6ca1\u6709\u6539\u53d8\u4efb\u4f55\u4f20\u5165\u503c\u6216\u8fd4\u56de\u503c\u7684\u751f\u547d\u5468\u671f\uff0c\u800c\u662f\u6307\u51fa\u4efb\u4f55\u4e0d\u6ee1\u8db3\u8fd9\u4e2a\u7ea6\u675f\u6761\u4ef6\u7684\u503c\u90fd\u5c06\u88ab\u501f\u7528\u68c0\u67e5\u5668\u62d2\u7edd\u3002 \u6ce8\u610f longest \u51fd\u6570\u5e76\u4e0d\u9700\u8981\u77e5\u9053 x \u548c y \u5177\u4f53\u4f1a\u5b58\u5728\u591a\u4e45\uff0c\u800c\u53ea\u9700\u8981\u77e5\u9053\u6709\u67d0\u4e2a\u53ef\u4ee5\u88ab 'a \u66ff\u4ee3\u7684\u4f5c\u7528\u57df\u5c06\u4f1a\u6ee1\u8db3\u8fd9\u4e2a\u7b7e\u540d\u3002 \u5f53\u5728\u51fd\u6570\u4e2d\u4f7f\u7528\u751f\u547d\u5468\u671f\u6ce8\u89e3\u65f6\uff0c\u8fd9\u4e9b\u6ce8\u89e3\u51fa\u73b0\u5728\u51fd\u6570\u7b7e\u540d\u4e2d\uff0c\u800c\u4e0d\u5b58\u5728\u4e8e\u51fd\u6570\u4f53\u4e2d\u7684\u4efb\u4f55\u4ee3\u7801\u4e2d\u3002 \u751f\u547d\u5468\u671f\u6ce8\u89e3\u6210\u4e3a\u4e86\u51fd\u6570\u7ea6\u5b9a\u7684\u4e00\u90e8\u5206\uff0c\u975e\u5e38\u50cf\u7b7e\u540d\u4e2d\u7684\u7c7b\u578b\u3002 \u8ba9\u51fd\u6570\u7b7e\u540d\u5305\u542b\u751f\u547d\u5468\u671f\u7ea6\u5b9a\u610f\u5473\u7740 Rust \u7f16\u8bd1\u5668\u7684\u5de5\u4f5c\u53d8\u5f97\u66f4\u7b80\u5355\u4e86\u3002 \u5982\u679c\u51fd\u6570\u6ce8\u89e3\u6709\u8bef\u6216\u8005\u8c03\u7528\u65b9\u6cd5\u4e0d\u5bf9\uff0c\u7f16\u8bd1\u5668\u9519\u8bef\u53ef\u4ee5\u66f4\u51c6\u786e\u5730\u6307\u51fa\u4ee3\u7801\u548c\u9650\u5236\u7684\u90e8\u5206\u3002 \u5982\u679c\u4e0d\u8fd9\u4e48\u505a\u7684\u8bdd\uff0cRust \u7f16\u8bd1\u4f1a\u5bf9\u6211\u4eec\u671f\u671b\u7684\u751f\u547d\u5468\u671f\u5173\u7cfb\u505a\u66f4\u591a\u7684\u63a8\u65ad\uff0c\u8fd9\u6837\u7f16\u8bd1\u5668\u53ef\u80fd\u53ea\u80fd\u6307\u51fa\u79bb\u51fa\u95ee\u9898\u5730\u65b9\u5f88\u591a\u6b65\u4e4b\u5916\u7684\u4ee3\u7801\u3002 \u5f53\u5177\u4f53\u7684\u5f15\u7528\u88ab\u4f20\u9012\u7ed9 longest \u65f6\uff0c\u88ab 'a \u6240\u66ff\u4ee3\u7684\u5177\u4f53\u751f\u547d\u5468\u671f\u662f x \u7684\u4f5c\u7528\u57df\u4e0e y \u7684\u4f5c\u7528\u57df\u76f8\u91cd\u53e0\u7684\u90a3\u4e00\u90e8\u5206\u3002 \u6362\u4e00\u79cd\u8bf4\u6cd5\u5c31\u662f\u6cdb\u578b\u751f\u547d\u5468\u671f 'a \u7684\u5177\u4f53\u751f\u547d\u5468\u671f\u7b49\u540c\u4e8e x \u548c y \u7684\u751f\u547d\u5468\u671f\u4e2d\u8f83\u5c0f\u7684\u90a3\u4e00\u4e2a\u3002 \u56e0\u4e3a\u6211\u4eec\u7528\u76f8\u540c\u7684\u751f\u547d\u5468\u671f\u53c2\u6570 'a \u6807\u6ce8\u4e86\u8fd4\u56de\u7684\u5f15\u7528\u503c\uff0c\u6240\u4ee5\u8fd4\u56de\u7684\u5f15\u7528\u503c\u5c31\u80fd\u4fdd\u8bc1\u5728 x \u548c y \u4e2d\u8f83\u77ed\u7684\u90a3\u4e2a\u751f\u547d\u5468\u671f\u7ed3\u675f\u4e4b\u524d\u4fdd\u6301\u6709\u6548\u3002 \u8ba9\u6211\u4eec\u770b\u770b\u5982\u4f55\u901a\u8fc7\u4f20\u9012\u62e5\u6709\u4e0d\u540c\u5177\u4f53\u751f\u547d\u5468\u671f\u7684\u5f15\u7528\u6765\u9650\u5236 longest \u51fd\u6570\u7684\u4f7f\u7528\u3002\u4e00\u4e2a\u5f88\u76f4\u89c2\u7684\u4f8b\u5b50: // \u901a\u8fc7\u62e5\u6709\u4e0d\u540c\u7684\u5177\u4f53\u751f\u547d\u5468\u671f\u7684 String \u503c\u8c03\u7528 longest \u51fd\u6570 fn main () { let string1 = String :: from ( \"long string is long\" ); { let string2 = String :: from ( \"xyz\" ); let result = longest ( string1 . as_str (), string2 . as_str ()); println! ( \"The longest string is {}\" , result ); } } \u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c string1 \u76f4\u5230\u5916\u90e8\u4f5c\u7528\u57df\u7ed3\u675f\u90fd\u662f\u6709\u6548\u7684\uff0c string2 \u5219\u5728\u5185\u90e8\u4f5c\u7528\u57df\u4e2d\u662f\u6709\u6548\u7684\uff0c\u800c result \u5219\u5f15\u7528\u4e86\u4e00\u4e9b\u76f4\u5230\u5185\u90e8\u4f5c\u7528\u57df\u7ed3\u675f\u90fd\u662f\u6709\u6548\u7684\u503c\u3002 \u501f\u7528\u68c0\u67e5\u5668\u8ba4\u53ef\u8fd9\u4e9b\u4ee3\u7801\uff1b\u5b83\u80fd\u591f\u7f16\u8bd1\u548c\u8fd0\u884c\uff0c\u5e76\u6253\u5370\u51fa The longest string is long string is long \u3002 \u63a5\u4e0b\u6765\uff0c\u8ba9\u6211\u4eec\u5c1d\u8bd5\u53e6\u5916\u4e00\u4e2a\u4f8b\u5b50\uff0c\u8be5\u4f8b\u5b50\u63ed\u793a\u4e86 result \u7684\u5f15\u7528\u7684\u751f\u547d\u5468\u671f\u5fc5\u987b\u662f\u4e24\u4e2a\u53c2\u6570\u4e2d\u8f83\u77ed\u7684\u90a3\u4e2a\u3002\u4ee5\u4e0b\u4ee3\u7801\u5c06 result \u53d8\u91cf\u7684\u58f0\u660e\u79fb\u52a8\u51fa\u5185\u90e8\u4f5c\u7528\u57df\uff0c\u4f46\u662f\u5c06 result \u548c string2 \u53d8\u91cf\u7684\u8d4b\u503c\u8bed\u53e5\u4e00\u540c\u7559\u5728\u5185\u90e8\u4f5c\u7528\u57df\u4e2d\u3002 \u63a5\u7740\uff0c\u4f7f\u7528\u4e86\u53d8\u91cf result \u7684 println! \u4e5f\u88ab\u79fb\u52a8\u5230\u5185\u90e8\u4f5c\u7528\u57df\u4e4b\u5916\u3002\u6ce8\u610f\u793a\u4f8b\u4e2d\u7684\u4ee3\u7801\u4e0d\u80fd\u901a\u8fc7\u7f16\u8bd1\uff1a // \u5c1d\u8bd5\u5728 string2 \u79bb\u5f00\u4f5c\u7528\u57df\u4e4b\u540e\u4f7f\u7528 result fn main () { let string1 = String :: from ( \"long string is long\" ); let result ; { let string2 = String :: from ( \"xyz\" ); result = longest ( string1 . as_str (), string2 . as_str ()); } println! ( \"The longest string is {}\" , result ); } \u5982\u679c\u5c1d\u8bd5\u7f16\u8bd1\u4f1a\u51fa\u73b0\u5982\u4e0b\u9519\u8bef\uff1a $ cargo run Compiling chapter10 v0 . 1.0 ( file : ///projects/chapter10) error [ E0597 ] : ` string2 ` does not live long enough - -> src / main . rs : 6 : 44 | 6 | result = longest ( string1 . as_str (), string2 . as_str ()); | ^^^^^^^^^^^^^^^^ borrowed value does not live long enough 7 | } | - ` string2 ` dropped here while still borrowed 8 | println! ( \"The longest string is {}\" , result ); | ------ borrow later used here For more information about this error , try ` rustc -- explain E0597 ` . error : could not compile ` chapter10 ` due to previous error \u9519\u8bef\u8868\u660e\u4e3a\u4e86\u4fdd\u8bc1 println! \u4e2d\u7684 result \u662f\u6709\u6548\u7684\uff0c string2 \u9700\u8981\u76f4\u5230\u5916\u90e8\u4f5c\u7528\u57df\u7ed3\u675f\u90fd\u662f\u6709\u6548\u7684\u3002Rust \u77e5\u9053\u8fd9\u4e9b\u662f\u56e0\u4e3a\uff08 longest \uff09\u51fd\u6570\u7684\u53c2\u6570\u548c\u8fd4\u56de\u503c\u90fd\u4f7f\u7528\u4e86\u76f8\u540c\u7684\u751f\u547d\u5468\u671f\u53c2\u6570 'a\u3002 \u5982\u679c\u4ece\u4eba\u7684\u89d2\u5ea6\u8bfb\u4e0a\u8ff0\u4ee3\u7801\uff0c\u6211\u4eec\u53ef\u80fd\u4f1a\u89c9\u5f97\u8fd9\u4e2a\u4ee3\u7801\u662f\u6b63\u786e\u7684\u3002 string1 \u66f4\u957f\uff0c\u56e0\u6b64 result \u4f1a\u5305\u542b\u6307\u5411 string1 \u7684\u5f15\u7528\u3002\u56e0\u4e3a string1 \u5c1a\u672a\u79bb\u5f00\u4f5c\u7528\u57df\uff0c\u5bf9\u4e8e println! \u6765\u8bf4 string1 \u7684\u5f15\u7528\u4ecd\u7136\u662f\u6709\u6548\u7684\u3002\u7136\u800c\uff0c\u6211\u4eec\u901a\u8fc7\u751f\u547d\u5468\u671f\u53c2\u6570\u544a\u8bc9 Rust \u7684\u662f\uff1a longest \u51fd\u6570\u8fd4\u56de\u7684\u5f15\u7528\u7684\u751f\u547d\u5468\u671f\u5e94\u8be5\u4e0e\u4f20\u5165\u53c2\u6570\u7684\u751f\u547d\u5468\u671f\u4e2d\u8f83\u77ed\u90a3\u4e2a\u4fdd\u6301\u4e00\u81f4\u3002 \u56e0\u6b64\uff0c\u501f\u7528\u68c0\u67e5\u5668\u4e0d\u5141\u8bb8\u793a\u4f8b\u4e2d\u7684\u4ee3\u7801\uff0c\u56e0\u4e3a\u5b83\u53ef\u80fd\u4f1a\u5b58\u5728\u65e0\u6548\u7684\u5f15\u7528\u3002 \u8bf7\u5c1d\u8bd5\u66f4\u591a\u91c7\u7528\u4e0d\u540c\u7684\u503c\u548c\u4e0d\u540c\u751f\u547d\u5468\u671f\u7684\u5f15\u7528\u4f5c\u4e3a longest \u51fd\u6570\u7684\u53c2\u6570\u548c\u8fd4\u56de\u503c\u7684\u5b9e\u9a8c\u3002\u5e76\u5728\u5f00\u59cb\u7f16\u8bd1\u524d\u731c\u60f3\u4f60\u7684\u5b9e\u9a8c\u80fd\u5426\u901a\u8fc7\u501f\u7528\u68c0\u67e5\u5668\uff0c\u63a5\u7740\u7f16\u8bd1\u4e00\u4e0b\u770b\u770b\u4f60\u7684\u7406\u89e3\u662f\u5426\u6b63\u786e\uff01 \u6df1\u5165\u7406\u89e3\u751f\u547d\u5468\u671f \u6307\u5b9a\u751f\u547d\u5468\u671f\u53c2\u6570\u7684\u6b63\u786e\u65b9\u5f0f\u4f9d\u8d56\u51fd\u6570\u5b9e\u73b0\u7684\u5177\u4f53\u529f\u80fd\u3002\u4f8b\u5982\uff0c\u5982\u679c\u5c06 longest \u51fd\u6570\u7684\u5b9e\u73b0\u4fee\u6539\u4e3a\u603b\u662f\u8fd4\u56de\u7b2c\u4e00\u4e2a\u53c2\u6570\u800c\u4e0d\u662f\u6700\u957f\u7684\u5b57\u7b26\u4e32 slice \uff0c\u5c31\u4e0d\u9700\u8981\u4e3a\u53c2\u6570 y \u6307\u5b9a\u4e00\u4e2a\u751f\u547d\u5468\u671f\u3002\u5982\u4e0b\u4ee3\u7801\u5c06\u80fd\u591f\u7f16\u8bd1\uff1a fn longest <' a > ( x : & ' a str , y : & str ) -> & ' a str { x } \u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u4e3a\u53c2\u6570 x \u548c\u8fd4\u56de\u503c\u6307\u5b9a\u4e86\u751f\u547d\u5468\u671f\u53c2\u6570 'a \uff0c\u4e0d\u8fc7\u6ca1\u6709\u4e3a\u53c2\u6570 y \u6307\u5b9a\uff0c\u56e0\u4e3a y \u7684\u751f\u547d\u5468\u671f\u4e0e\u53c2\u6570 x \u548c\u8fd4\u56de\u503c\u7684\u751f\u547d\u5468\u671f\u6ca1\u6709\u4efb\u4f55\u5173\u7cfb\u3002 \u5f53\u4ece\u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u5f15\u7528\uff0c\u8fd4\u56de\u503c\u7684\u751f\u547d\u5468\u671f\u53c2\u6570\u9700\u8981\u4e0e\u4e00\u4e2a\u53c2\u6570\u7684\u751f\u547d\u5468\u671f\u53c2\u6570\u76f8\u5339\u914d\u3002\u5982\u679c\u8fd4\u56de\u7684\u5f15\u7528 \u6ca1\u6709 \u6307\u5411\u4efb\u4f55\u4e00\u4e2a\u53c2\u6570\uff0c\u90a3\u4e48\u552f\u4e00\u7684\u53ef\u80fd\u5c31\u662f\u5b83\u6307\u5411\u4e00\u4e2a\u51fd\u6570\u5185\u90e8\u521b\u5efa\u7684\u503c\uff0c\u5b83\u5c06\u4f1a\u662f\u4e00\u4e2a\u60ac\u5782\u5f15\u7528\uff0c\u56e0\u4e3a\u5b83\u5c06\u4f1a\u5728\u51fd\u6570\u7ed3\u675f\u65f6\u79bb\u5f00\u4f5c\u7528\u57df\u3002\u5c1d\u8bd5\u8003\u8651\u8fd9\u4e2a\u5e76\u4e0d\u80fd\u7f16\u8bd1\u7684 longest \u51fd\u6570\u5b9e\u73b0\uff1a fn longest <' a > ( x : & str , y : & str ) -> & ' a str { let result = String :: from ( \"really long string\" ); result . as_str () } \u5373\u4fbf\u6211\u4eec\u4e3a\u8fd4\u56de\u503c\u6307\u5b9a\u4e86\u751f\u547d\u5468\u671f\u53c2\u6570 'a \uff0c\u8fd9\u4e2a\u5b9e\u73b0\u5374\u7f16\u8bd1\u5931\u8d25\u4e86\uff0c\u56e0\u4e3a\u8fd4\u56de\u503c\u7684\u751f\u547d\u5468\u671f\u4e0e\u53c2\u6570\u5b8c\u5168\u6ca1\u6709\u5173\u8054\u3002 \u8fd9\u91cc\u662f\u4f1a\u51fa\u73b0\u7684\u9519\u8bef\u4fe1\u606f\uff1a $ cargo run Compiling chapter10 v0 . 1.0 ( file : ///projects/chapter10) error [ E0515 ] : cannot return reference to local variable ` result ` - -> src / main . rs : 11 : 5 | 11 | result . as_str () | ^^^^^^^^^^^^^^^ returns a reference to data owned by the current function For more information about this error , try ` rustc -- explain E0515 ` . error : could not compile ` chapter10 ` due to previous error \u51fa\u73b0\u7684\u95ee\u9898\u662f result \u5728 longest \u51fd\u6570\u7684\u7ed3\u5c3e\u5c06\u79bb\u5f00\u4f5c\u7528\u57df\u5e76\u88ab\u6e05\u7406\uff0c\u800c\u6211\u4eec\u5c1d\u8bd5\u4ece\u51fd\u6570\u8fd4\u56de\u4e00\u4e2a result \u7684\u5f15\u7528\u3002 \u65e0\u6cd5\u6307\u5b9a\u751f\u547d\u5468\u671f\u53c2\u6570\u6765\u6539\u53d8\u60ac\u5782\u5f15\u7528\uff0c\u800c\u4e14 Rust \u4e5f\u4e0d\u5141\u8bb8\u6211\u4eec\u521b\u5efa\u4e00\u4e2a\u60ac\u5782\u5f15\u7528\u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\uff0c\u6700\u597d\u7684\u89e3\u51b3\u65b9\u6848\u662f\u8fd4\u56de\u4e00\u4e2a\u6709\u6240\u6709\u6743\u7684\u6570\u636e\u7c7b\u578b\u800c\u4e0d\u662f\u4e00\u4e2a\u5f15\u7528\uff0c\u8fd9\u6837\u51fd\u6570\u8c03\u7528\u8005\u5c31\u9700\u8981\u8d1f\u8d23\u6e05\u7406\u8fd9\u4e2a\u503c\u4e86\u3002 \u7efc\u4e0a\uff0c\u751f\u547d\u5468\u671f\u8bed\u6cd5\u662f\u7528\u4e8e\u5c06\u51fd\u6570\u7684\u591a\u4e2a\u53c2\u6570\u4e0e\u5176\u8fd4\u56de\u503c\u7684\u751f\u547d\u5468\u671f\u8fdb\u884c\u5173\u8054\u7684\u3002\u4e00\u65e6\u4ed6\u4eec\u5f62\u6210\u4e86\u67d0\u79cd\u5173\u8054\uff0cRust \u5c31\u6709\u4e86\u8db3\u591f\u7684\u4fe1\u606f\u6765\u5141\u8bb8\u5185\u5b58\u5b89\u5168\u7684\u64cd\u4f5c\u5e76\u963b\u6b62\u4f1a\u4ea7\u751f\u60ac\u5782\u6307\u9488\u4ea6\u6216\u662f\u8fdd\u53cd\u5185\u5b58\u5b89\u5168\u7684\u884c\u4e3a\u3002 \u7ed3\u6784\u4f53\u5b9a\u4e49\u4e2d\u7684\u751f\u547d\u5468\u671f\u6ce8\u89e3 \u76ee\u524d\u4e3a\u6b62\uff0c\u6211\u4eec\u53ea\u5b9a\u4e49\u8fc7\u6709\u6240\u6709\u6743\u7c7b\u578b\u7684\u7ed3\u6784\u4f53\u3002\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5c06\u5b9a\u4e49\u5305\u542b\u5f15\u7528\u7684\u7ed3\u6784\u4f53\uff0c\u4e0d\u8fc7\u8fd9\u9700\u8981\u4e3a\u7ed3\u6784\u4f53\u5b9a\u4e49\u4e2d\u7684\u6bcf\u4e00\u4e2a\u5f15\u7528\u6dfb\u52a0\u751f\u547d\u5468\u671f\u6ce8\u89e3\u3002\u793a\u4f8b\u4e2d\u6709\u4e00\u4e2a\u5b58\u653e\u4e86\u4e00\u4e2a\u5b57\u7b26\u4e32 slice \u7684\u7ed3\u6784\u4f53 ImportantExcerpt \uff1a // \u4e00\u4e2a\u5b58\u653e\u5f15\u7528\u7684\u7ed3\u6784\u4f53\uff0c\u6240\u4ee5\u5176\u5b9a\u4e49\u9700\u8981\u751f\u547d\u5468\u671f\u6ce8\u89e3 struct ImportantExcerpt <' a > { part : & ' a str , } fn main () { let novel = String :: from ( \"Call me Ishmael. Some years ago...\" ); let first_sentence = novel . split ( '.' ). next (). expect ( \"Could not find a '.'\" ); let i = ImportantExcerpt { part : first_sentence , }; } \u8fd9\u4e2a\u7ed3\u6784\u4f53\u6709\u4e00\u4e2a\u5b57\u6bb5\uff0c part \uff0c\u5b83\u5b58\u653e\u4e86\u4e00\u4e2a\u5b57\u7b26\u4e32 slice \uff0c\u8fd9\u662f\u4e00\u4e2a\u5f15\u7528\u3002\u7c7b\u4f3c\u4e8e\u6cdb\u578b\u53c2\u6570\u7c7b\u578b\uff0c\u5fc5\u987b\u5728\u7ed3\u6784\u4f53\u540d\u79f0\u540e\u9762\u7684\u5c16\u62ec\u53f7\u4e2d\u58f0\u660e\u6cdb\u578b\u751f\u547d\u5468\u671f\u53c2\u6570\uff0c\u4ee5\u4fbf\u5728\u7ed3\u6784\u4f53\u5b9a\u4e49\u4e2d\u4f7f\u7528\u751f\u547d\u5468\u671f\u53c2\u6570\u3002\u8fd9\u4e2a\u6ce8\u89e3\u610f\u5473\u7740 ImportantExcerpt \u7684\u5b9e\u4f8b\u4e0d\u80fd\u6bd4\u5176 part \u5b57\u6bb5\u4e2d\u7684\u5f15\u7528\u5b58\u5728\u7684\u66f4\u4e45\u3002 \u8fd9\u91cc\u7684 main \u51fd\u6570\u521b\u5efa\u4e86\u4e00\u4e2a ImportantExcerpt \u7684\u5b9e\u4f8b\uff0c\u5b83\u5b58\u653e\u4e86\u53d8\u91cf novel \u6240\u62e5\u6709\u7684 String \u7684\u7b2c\u4e00\u4e2a\u53e5\u5b50\u7684\u5f15\u7528\u3002 novel \u7684\u6570\u636e\u5728 ImportantExcerpt \u5b9e\u4f8b\u521b\u5efa\u4e4b\u524d\u5c31\u5b58\u5728\u3002\u53e6\u5916\uff0c\u76f4\u5230 ImportantExcerpt \u79bb\u5f00\u4f5c\u7528\u57df\u4e4b\u540e novel \u90fd\u4e0d\u4f1a\u79bb\u5f00\u4f5c\u7528\u57df\uff0c\u6240\u4ee5 ImportantExcerpt \u5b9e\u4f8b\u4e2d\u7684\u5f15\u7528\u662f\u6709\u6548\u7684\u3002 \u751f\u547d\u5468\u671f\u7701\u7565\uff08Lifetime Elision\uff09 \u73b0\u5728\u6211\u4eec\u5df2\u7ecf\u77e5\u9053\u4e86\u6bcf\u4e00\u4e2a\u5f15\u7528\u90fd\u6709\u4e00\u4e2a\u751f\u547d\u5468\u671f\uff0c\u800c\u4e14\u6211\u4eec\u9700\u8981\u4e3a\u90a3\u4e9b\u4f7f\u7528\u4e86\u5f15\u7528\u7684\u51fd\u6570\u6216\u7ed3\u6784\u4f53\u6307\u5b9a\u751f\u547d\u5468\u671f\u3002 \u7136\u800c\uff0c\u7b2c\u56db\u7ae0\u4e2d\u6709\u4e00\u4e2a\u51fd\u6570\uff0c\u5982\u793a\u4f8b\u6240\u793a\uff0c\u5b83\u6ca1\u6709\u751f\u547d\u5468\u671f\u6ce8\u89e3\u5374\u80fd\u7f16\u8bd1\u6210\u529f\uff1a // \u5b9a\u4e49\u4e86\u4e00\u4e2a\u6ca1\u6709\u4f7f\u7528\u751f\u547d\u5468\u671f\u6ce8\u89e3\u7684\u51fd\u6570\uff0c\u5373\u4fbf\u5176\u53c2\u6570\u548c\u8fd4\u56de\u503c\u90fd\u662f\u5f15\u7528 fn first_word ( s : & str ) -> & str { let bytes = s . as_bytes (); for ( i , & item ) in bytes . iter (). enumerate () { if item == b' ' { return & s [ 0 .. i ]; } } & s [ .. ] } \u8fd9\u4e2a\u51fd\u6570\u6ca1\u6709\u751f\u547d\u5468\u671f\u6ce8\u89e3\u5374\u80fd\u7f16\u8bd1\u662f\u7531\u4e8e\u4e00\u4e9b\u5386\u53f2\u539f\u56e0\uff1a\u5728\u65e9\u671f\u7248\u672c\uff08pre-1.0\uff09\u7684 Rust \u4e2d\uff0c\u8fd9\u7684\u786e\u662f\u4e0d\u80fd\u7f16\u8bd1\u7684\u3002\u6bcf\u4e00\u4e2a\u5f15\u7528\u90fd\u5fc5\u987b\u6709\u660e\u786e\u7684\u751f\u547d\u5468\u671f\u3002\u90a3\u65f6\u7684\u51fd\u6570\u7b7e\u540d\u5c06\u4f1a\u5199\u6210\u8fd9\u6837\uff1a fn first_word <' a > ( s : & ' a str ) -> & ' a str { \u5728\u7f16\u5199\u4e86\u5f88\u591a Rust \u4ee3\u7801\u540e\uff0cRust \u56e2\u961f\u53d1\u73b0\u5728\u7279\u5b9a\u60c5\u51b5\u4e0b Rust \u7a0b\u5e8f\u5458\u4eec\u603b\u662f\u91cd\u590d\u5730\u7f16\u5199\u4e00\u6a21\u4e00\u6837\u7684\u751f\u547d\u5468\u671f\u6ce8\u89e3\u3002\u8fd9\u4e9b\u573a\u666f\u662f\u53ef\u9884\u6d4b\u7684\u5e76\u4e14\u9075\u5faa\u51e0\u4e2a\u660e\u786e\u7684\u6a21\u5f0f\u3002\u63a5\u7740 Rust \u56e2\u961f\u5c31\u628a\u8fd9\u4e9b\u6a21\u5f0f\u7f16\u7801\u8fdb\u4e86 Rust \u7f16\u8bd1\u5668\u4e2d\uff0c\u5982\u6b64\u501f\u7528\u68c0\u67e5\u5668\u5728\u8fd9\u4e9b\u60c5\u51b5\u4e0b\u5c31\u80fd\u63a8\u65ad\u51fa\u751f\u547d\u5468\u671f\u800c\u4e0d\u518d\u5f3a\u5236\u7a0b\u5e8f\u5458\u663e\u5f0f\u7684\u589e\u52a0\u6ce8\u89e3\u3002 \u8fd9\u91cc\u6211\u4eec\u63d0\u5230\u4e00\u4e9b Rust \u7684\u5386\u53f2\u662f\u56e0\u4e3a\u66f4\u591a\u7684\u660e\u786e\u7684\u6a21\u5f0f\u88ab\u5408\u5e76\u548c\u6dfb\u52a0\u5230\u7f16\u8bd1\u5668\u4e2d\u662f\u5b8c\u5168\u53ef\u80fd\u7684\u3002\u672a\u6765\u53ea\u4f1a\u9700\u8981\u66f4\u5c11\u7684\u751f\u547d\u5468\u671f\u6ce8\u89e3\u3002 \u88ab\u7f16\u7801\u8fdb Rust \u5f15\u7528\u5206\u6790\u7684\u6a21\u5f0f\u88ab\u79f0\u4e3a \u751f\u547d\u5468\u671f\u7701\u7565\u89c4\u5219 \uff08lifetime elision rules\uff09\u3002\u8fd9\u5e76\u4e0d\u662f\u9700\u8981\u7a0b\u5e8f\u5458\u9075\u5b88\u7684\u89c4\u5219\uff1b\u8fd9\u4e9b\u89c4\u5219\u662f\u4e00\u7cfb\u5217\u7279\u5b9a\u7684\u573a\u666f\uff0c\u6b64\u65f6\u7f16\u8bd1\u5668\u4f1a\u8003\u8651\uff0c\u5982\u679c\u4ee3\u7801\u7b26\u5408\u8fd9\u4e9b\u573a\u666f\uff0c\u5c31\u65e0\u9700\u660e\u786e\u6307\u5b9a\u751f\u547d\u5468\u671f\u3002 \u7701\u7565\u89c4\u5219\u5e76\u4e0d\u63d0\u4f9b\u5b8c\u6574\u7684\u63a8\u65ad\uff1a\u5982\u679c Rust \u5728\u660e\u786e\u9075\u5b88\u8fd9\u4e9b\u89c4\u5219\u7684\u524d\u63d0\u4e0b\u53d8\u91cf\u7684\u751f\u547d\u5468\u671f\u4ecd\u7136\u662f\u6a21\u68f1\u4e24\u53ef\u7684\u8bdd\uff0c\u5b83\u4e0d\u4f1a\u731c\u6d4b\u5269\u4f59\u5f15\u7528\u7684\u751f\u547d\u5468\u671f\u5e94\u8be5\u662f\u4ec0\u4e48\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\uff0c\u7f16\u8bd1\u5668\u4f1a\u7ed9\u51fa\u4e00\u4e2a\u9519\u8bef\uff0c\u8fd9\u53ef\u4ee5\u901a\u8fc7\u589e\u52a0\u5bf9\u5e94\u5f15\u7528\u4e4b\u95f4\u76f8\u8054\u7cfb\u7684\u751f\u547d\u5468\u671f\u6ce8\u89e3\u6765\u89e3\u51b3\u3002 \u51fd\u6570\u6216\u65b9\u6cd5\u7684\u53c2\u6570\u7684\u751f\u547d\u5468\u671f\u88ab\u79f0\u4e3a \u8f93\u5165\u751f\u547d\u5468\u671f \uff08input lifetimes\uff09\uff0c\u800c\u8fd4\u56de\u503c\u7684\u751f\u547d\u5468\u671f\u88ab\u79f0\u4e3a \u8f93\u51fa\u751f\u547d\u5468\u671f \uff08output lifetimes\uff09\u3002 \u7f16\u8bd1\u5668\u91c7\u7528\u4e09\u6761\u89c4\u5219\u6765\u5224\u65ad\u5f15\u7528\u4f55\u65f6\u4e0d\u9700\u8981\u660e\u786e\u7684\u6ce8\u89e3\u3002\u7b2c\u4e00\u6761\u89c4\u5219\u9002\u7528\u4e8e \u8f93\u5165\u751f\u547d\u5468\u671f \uff0c\u540e\u4e24\u6761\u89c4\u5219\u9002\u7528\u4e8e\u8f93\u51fa\u751f\u547d\u5468\u671f\u3002\u5982\u679c\u7f16\u8bd1\u5668\u68c0\u67e5\u5b8c\u8fd9\u4e09\u6761\u89c4\u5219\u540e\u4ecd\u7136\u5b58\u5728\u6ca1\u6709\u8ba1\u7b97\u51fa\u751f\u547d\u5468\u671f\u7684\u5f15\u7528\uff0c\u7f16\u8bd1\u5668\u5c06\u4f1a\u505c\u6b62\u5e76\u751f\u6210\u9519\u8bef\u3002\u8fd9\u4e9b\u89c4\u5219\u9002\u7528\u4e8e fn \u5b9a\u4e49\uff0c\u4ee5\u53ca impl \u5757\u3002 \u7b2c\u4e00\u6761\u89c4\u5219\u662f\u6bcf\u4e00\u4e2a\u662f\u5f15\u7528\u7684\u53c2\u6570\u90fd\u6709\u5b83\u81ea\u5df1\u7684\u751f\u547d\u5468\u671f\u53c2\u6570\u3002\u6362\u53e5\u8bdd\u8bf4\u5c31\u662f\uff0c\u6709\u4e00\u4e2a\u5f15\u7528\u53c2\u6570\u7684\u51fd\u6570\u6709\u4e00\u4e2a\u751f\u547d\u5468\u671f\u53c2\u6570\uff1a fn foo<'a>(x: &'a i32) \uff0c\u6709\u4e24\u4e2a\u5f15\u7528\u53c2\u6570\u7684\u51fd\u6570\u6709\u4e24\u4e2a\u4e0d\u540c\u7684\u751f\u547d\u5468\u671f\u53c2\u6570\uff0c fn foo<'a, 'b>(x: &'a i32, y: &'b i32) \uff0c\u4f9d\u6b64\u7c7b\u63a8\u3002 \u7b2c\u4e8c\u6761\u89c4\u5219\u662f\u5982\u679c\u53ea\u6709\u4e00\u4e2a\u8f93\u5165\u751f\u547d\u5468\u671f\u53c2\u6570\uff0c\u90a3\u4e48\u5b83\u88ab\u8d4b\u4e88\u6240\u6709\u8f93\u51fa\u751f\u547d\u5468\u671f\u53c2\u6570\uff1a fn foo<'a>(x: &'a i32) -> &'a i32 \u3002 \u7b2c\u4e09\u6761\u89c4\u5219\u662f\u5982\u679c\u65b9\u6cd5\u6709\u591a\u4e2a\u8f93\u5165\u751f\u547d\u5468\u671f\u53c2\u6570\u5e76\u4e14\u5176\u4e2d\u4e00\u4e2a\u53c2\u6570\u662f &self \u6216 &mut self \uff0c\u8bf4\u660e\u662f\u4e2a\u5bf9\u8c61\u7684\u65b9\u6cd5(method)(\u8bd1\u8005\u6ce8\uff1a \u8fd9\u91cc\u6d89\u53carust\u7684\u9762\u5411\u5bf9\u8c61\u53c2\u89c117\u7ae0)\uff0c\u90a3\u4e48\u6240\u6709\u8f93\u51fa\u751f\u547d\u5468\u671f\u53c2\u6570\u88ab\u8d4b\u4e88 self \u7684\u751f\u547d\u5468\u671f\u3002\u7b2c\u4e09\u6761\u89c4\u5219\u4f7f\u5f97\u65b9\u6cd5\u66f4\u5bb9\u6613\u8bfb\u5199\uff0c\u56e0\u4e3a\u53ea\u9700\u66f4\u5c11\u7684\u7b26\u53f7\u3002 \u5047\u8bbe\u6211\u4eec\u81ea\u5df1\u5c31\u662f\u7f16\u8bd1\u5668\u3002\u5e76\u5e94\u7528\u8fd9\u4e9b\u89c4\u5219\u6765\u8ba1\u7b97\u793a\u4f8b 10-26 \u4e2d first_word \u51fd\u6570\u7b7e\u540d\u4e2d\u7684\u5f15\u7528\u7684\u751f\u547d\u5468\u671f\u3002\u5f00\u59cb\u65f6\u7b7e\u540d\u4e2d\u7684\u5f15\u7528\u5e76\u6ca1\u6709\u5173\u8054\u4efb\u4f55\u751f\u547d\u5468\u671f\uff1a fn first_word ( s : & str ) -> & str { \u63a5\u7740\u7f16\u8bd1\u5668\u5e94\u7528\u7b2c\u4e00\u6761\u89c4\u5219\uff0c\u4e5f\u5c31\u662f\u6bcf\u4e2a\u5f15\u7528\u53c2\u6570\u90fd\u6709\u5176\u81ea\u5df1\u7684\u751f\u547d\u5468\u671f\u3002\u6211\u4eec\u50cf\u5f80\u5e38\u4e00\u6837\u79f0\u4e4b\u4e3a 'a \uff0c\u6240\u4ee5\u73b0\u5728\u7b7e\u540d\u770b\u8d77\u6765\u50cf\u8fd9\u6837\uff1a fn first_word <' a > ( s : & ' a str ) -> & str { \u5bf9\u4e8e\u7b2c\u4e8c\u6761\u89c4\u5219\uff0c\u56e0\u4e3a\u8fd9\u91cc\u6b63\u597d\u53ea\u6709\u4e00\u4e2a\u8f93\u5165\u751f\u547d\u5468\u671f\u53c2\u6570\u6240\u4ee5\u662f\u9002\u7528\u7684\u3002\u7b2c\u4e8c\u6761\u89c4\u5219\u8868\u660e\u8f93\u5165\u53c2\u6570\u7684\u751f\u547d\u5468\u671f\u5c06\u88ab\u8d4b\u4e88\u8f93\u51fa\u751f\u547d\u5468\u671f\u53c2\u6570\uff0c\u6240\u4ee5\u73b0\u5728\u7b7e\u540d\u770b\u8d77\u6765\u50cf\u8fd9\u6837\uff1a fn first_word <' a > ( s : & ' a str ) -> & ' a str { \u73b0\u5728\u8fd9\u4e2a\u51fd\u6570\u7b7e\u540d\u4e2d\u7684\u6240\u6709\u5f15\u7528\u90fd\u6709\u4e86\u751f\u547d\u5468\u671f\uff0c\u5982\u6b64\u7f16\u8bd1\u5668\u53ef\u4ee5\u7ee7\u7eed\u5b83\u7684\u5206\u6790\u800c\u65e0\u987b\u7a0b\u5e8f\u5458\u6807\u8bb0\u8fd9\u4e2a\u51fd\u6570\u7b7e\u540d\u4e2d\u7684\u751f\u547d\u5468\u671f\u3002 \u8ba9\u6211\u4eec\u518d\u770b\u770b\u53e6\u4e00\u4e2a\u4f8b\u5b50\uff0c\u8fd9\u6b21\u6211\u4eec\u4ece\u793a\u4f8b\u4e2d\u6ca1\u6709\u751f\u547d\u5468\u671f\u53c2\u6570\u7684 longest \u51fd\u6570\u5f00\u59cb\uff1a fn longest ( x : & str , y : & str ) -> & str { \u518d\u6b21\u5047\u8bbe\u6211\u4eec\u81ea\u5df1\u5c31\u662f\u7f16\u8bd1\u5668\u5e76\u5e94\u7528\u7b2c\u4e00\u6761\u89c4\u5219\uff1a\u6bcf\u4e2a\u5f15\u7528\u53c2\u6570\u90fd\u6709\u5176\u81ea\u5df1\u7684\u751f\u547d\u5468\u671f\u3002\u8fd9\u6b21\u6709\u4e24\u4e2a\u53c2\u6570\uff0c\u6240\u4ee5\u5c31\u6709\u4e24\u4e2a\uff08\u4e0d\u540c\u7684\uff09\u751f\u547d\u5468\u671f\uff1a fn longest <' a , ' b > ( x : & ' a str , y : & ' b str ) -> & str { \u518d\u6765\u5e94\u7528\u7b2c\u4e8c\u6761\u89c4\u5219\uff0c\u56e0\u4e3a\u51fd\u6570\u5b58\u5728\u591a\u4e2a\u8f93\u5165\u751f\u547d\u5468\u671f\uff0c\u5b83\u5e76\u4e0d\u9002\u7528\u4e8e\u8fd9\u79cd\u60c5\u51b5\u3002\u518d\u6765\u770b\u7b2c\u4e09\u6761\u89c4\u5219\uff0c\u5b83\u540c\u6837\u4e5f\u4e0d\u9002\u7528\uff0c\u8fd9\u662f\u56e0\u4e3a\u6ca1\u6709 self \u53c2\u6570\u3002\u5e94\u7528\u4e86\u4e09\u4e2a\u89c4\u5219\u4e4b\u540e\u7f16\u8bd1\u5668\u8fd8\u6ca1\u6709\u8ba1\u7b97\u51fa\u8fd4\u56de\u503c\u7c7b\u578b\u7684\u751f\u547d\u5468\u671f\u3002\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u5728\u7f16\u8bd1\u4ee3\u7801\u65f6\u4f1a\u51fa\u73b0\u9519\u8bef\u7684\u539f\u56e0\uff1a \u7f16\u8bd1\u5668\u4f7f\u7528\u6240\u6709\u5df2\u77e5\u7684\u751f\u547d\u5468\u671f\u7701\u7565\u89c4\u5219\uff0c\u4ecd\u4e0d\u80fd\u8ba1\u7b97\u51fa\u7b7e\u540d\u4e2d\u6240\u6709\u5f15\u7528\u7684\u751f\u547d\u5468\u671f\u3002 \u56e0\u4e3a\u7b2c\u4e09\u6761\u89c4\u5219\u771f\u6b63\u80fd\u591f\u9002\u7528\u7684\u5c31\u53ea\u6709\u65b9\u6cd5\u7b7e\u540d\uff0c\u73b0\u5728\u5c31\u8ba9\u6211\u4eec\u770b\u770b\u90a3\u79cd\u60c5\u51b5\u4e2d\u7684\u751f\u547d\u5468\u671f\uff0c\u5e76\u770b\u770b\u4e3a\u4ec0\u4e48\u8fd9\u6761\u89c4\u5219\u610f\u5473\u7740\u6211\u4eec\u7ecf\u5e38\u4e0d\u9700\u8981\u5728\u65b9\u6cd5\u7b7e\u540d\u4e2d\u6807\u6ce8\u751f\u547d\u5468\u671f\u3002 \u65b9\u6cd5\u5b9a\u4e49\u4e2d\u7684\u751f\u547d\u5468\u671f\u6ce8\u89e3 \u5f53\u4e3a\u5e26\u6709\u751f\u547d\u5468\u671f\u7684\u7ed3\u6784\u4f53\u5b9e\u73b0\u65b9\u6cd5\u65f6\uff0c\u5176\u8bed\u6cd5\u4f9d\u7136\u7c7b\u4f3c\u793a\u4f8b\u4e2d\u5c55\u793a\u7684\u6cdb\u578b\u7c7b\u578b\u53c2\u6570\u7684\u8bed\u6cd5\u3002 \u58f0\u660e\u548c\u4f7f\u7528\u751f\u547d\u5468\u671f\u53c2\u6570\u7684\u4f4d\u7f6e\u4f9d\u8d56\u4e8e\u751f\u547d\u5468\u671f\u53c2\u6570\u662f\u5426\u540c\u7ed3\u6784\u4f53\u5b57\u6bb5\u6216\u65b9\u6cd5\u53c2\u6570\u548c\u8fd4\u56de\u503c\u76f8\u5173\u3002 \uff08\u5b9e\u73b0\u65b9\u6cd5\u65f6\uff09\u7ed3\u6784\u4f53\u5b57\u6bb5\u7684\u751f\u547d\u5468\u671f\u5fc5\u987b\u603b\u662f\u5728 impl \u5173\u952e\u5b57\u4e4b\u540e\u58f0\u660e\u5e76\u5728\u7ed3\u6784\u4f53\u540d\u79f0\u4e4b\u540e\u88ab\u4f7f\u7528\uff0c\u56e0\u4e3a\u8fd9\u4e9b\u751f\u547d\u5468\u671f\u662f\u7ed3\u6784\u4f53\u7c7b\u578b\u7684\u4e00\u90e8\u5206\u3002 impl \u5757\u91cc\u7684\u65b9\u6cd5\u7b7e\u540d\u4e2d\uff0c\u5f15\u7528\u53ef\u80fd\u4e0e\u7ed3\u6784\u4f53\u5b57\u6bb5\u4e2d\u7684\u5f15\u7528\u76f8\u5173\u8054\uff0c\u4e5f\u53ef\u80fd\u662f\u72ec\u7acb\u7684\u3002 \u53e6\u5916\uff0c\u751f\u547d\u5468\u671f\u7701\u7565\u89c4\u5219\u4e5f\u7ecf\u5e38\u8ba9\u6211\u4eec\u65e0\u9700\u5728\u65b9\u6cd5\u7b7e\u540d\u4e2d\u4f7f\u7528\u751f\u547d\u5468\u671f\u6ce8\u89e3\u3002\u8ba9\u6211\u4eec\u770b\u770b\u4e00\u4e9b\u4f7f\u7528\u793a\u4f8b\u4e2d\u5b9a\u4e49\u7684\u7ed3\u6784\u4f53 ImportantExcerpt \u7684\u4f8b\u5b50\u3002 \u9996\u5148\uff0c\u8fd9\u91cc\u6709\u4e00\u4e2a\u65b9\u6cd5 level \u3002\u5176\u552f\u4e00\u7684\u53c2\u6570\u662f self \u7684\u5f15\u7528\uff0c\u800c\u4e14\u8fd4\u56de\u503c\u53ea\u662f\u4e00\u4e2a i32 \uff0c\u5e76\u4e0d\u5f15\u7528\u4efb\u4f55\u503c\uff1a impl <' a > ImportantExcerpt <' a > { fn level ( & self ) -> i32 { 3 } } impl \u4e4b\u540e\u548c\u7c7b\u578b\u540d\u79f0\u4e4b\u540e\u7684\u751f\u547d\u5468\u671f\u53c2\u6570\u662f\u5fc5\u8981\u7684\uff0c\u4e0d\u8fc7\u56e0\u4e3a\u7b2c\u4e00\u6761\u751f\u547d\u5468\u671f\u89c4\u5219\u6211\u4eec\u5e76\u4e0d\u5fc5\u987b\u6807\u6ce8 self \u5f15\u7528\u7684\u751f\u547d\u5468\u671f\u3002 \u8fd9\u91cc\u662f\u4e00\u4e2a\u9002\u7528\u4e8e\u7b2c\u4e09\u6761\u751f\u547d\u5468\u671f\u7701\u7565\u89c4\u5219\u7684\u4f8b\u5b50\uff1a impl <' a > ImportantExcerpt <' a > { fn announce_and_return_part ( & self , announcement : & str ) -> & str { println! ( \"Attention please: {}\" , announcement ); self . part } } \u8fd9\u91cc\u6709\u4e24\u4e2a\u8f93\u5165\u751f\u547d\u5468\u671f\uff0c\u6240\u4ee5 Rust \u5e94\u7528\u7b2c\u4e00\u6761\u751f\u547d\u5468\u671f\u7701\u7565\u89c4\u5219\u5e76\u7ed9\u4e88 &self \u548c announcement \u4ed6\u4eec\u5404\u81ea\u7684\u751f\u547d\u5468\u671f\u3002\u63a5\u7740\uff0c\u56e0\u4e3a\u5176\u4e2d\u4e00\u4e2a\u53c2\u6570\u662f &self \uff0c\u8fd4\u56de\u503c\u7c7b\u578b\u88ab\u8d4b\u4e88\u4e86 &self \u7684\u751f\u547d\u5468\u671f\uff0c\u8fd9\u6837\u6240\u6709\u7684\u751f\u547d\u5468\u671f\u90fd\u88ab\u8ba1\u7b97\u51fa\u6765\u4e86\u3002 \u9759\u6001\u751f\u547d\u5468\u671f \u8fd9\u91cc\u6709\u4e00\u79cd\u7279\u6b8a\u7684\u751f\u547d\u5468\u671f\u503c\u5f97\u8ba8\u8bba\uff1a 'static \uff0c\u5176\u751f\u547d\u5468\u671f\u80fd\u591f\u5b58\u6d3b\u4e8e\u6574\u4e2a\u7a0b\u5e8f\u671f\u95f4\u3002\u6240\u6709\u7684\u5b57\u7b26\u4e32\u5b57\u9762\u503c\u90fd\u62e5\u6709 'static \u751f\u547d\u5468\u671f\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u9009\u62e9\u50cf\u4e0b\u9762\u8fd9\u6837\u6807\u6ce8\u51fa\u6765\uff1a let s : & ' static str = \"I have a static lifetime.\" ; \u8fd9\u4e2a\u5b57\u7b26\u4e32\u7684\u6587\u672c\u88ab\u76f4\u63a5\u50a8\u5b58\u5728\u7a0b\u5e8f\u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\u4e2d\u800c\u8fd9\u4e2a\u6587\u4ef6\u603b\u662f\u53ef\u7528\u7684\u3002\u56e0\u6b64\u6240\u6709\u7684\u5b57\u7b26\u4e32\u5b57\u9762\u503c\u90fd\u662f 'static \u7684\u3002 \u4f60\u53ef\u80fd\u5728\u9519\u8bef\u4fe1\u606f\u7684\u5e2e\u52a9\u6587\u672c\u4e2d\u89c1\u8fc7\u4f7f\u7528 'static \u751f\u547d\u5468\u671f\u7684\u5efa\u8bae\uff0c\u4e0d\u8fc7\u5c06\u5f15\u7528\u6307\u5b9a\u4e3a 'static \u4e4b\u524d\uff0c\u601d\u8003\u4e00\u4e0b\u8fd9\u4e2a\u5f15\u7528\u662f\u5426\u771f\u7684\u5728\u6574\u4e2a\u7a0b\u5e8f\u7684\u751f\u547d\u5468\u671f\u91cc\u90fd\u6709\u6548\u3002 \u4f60\u4e5f\u8bb8\u8981\u8003\u8651\u662f\u5426\u5e0c\u671b\u5b83\u5b58\u5728\u5f97\u8fd9\u4e48\u4e45\uff0c\u5373\u4f7f\u8fd9\u662f\u53ef\u80fd\u7684\u3002\u5927\u90e8\u5206\u60c5\u51b5\uff0c\u4ee3\u7801\u4e2d\u7684\u95ee\u9898\u662f\u5c1d\u8bd5\u521b\u5efa\u4e00\u4e2a\u60ac\u5782\u5f15\u7528\u6216\u8005\u53ef\u7528\u7684\u751f\u547d\u5468\u671f\u4e0d\u5339\u914d\uff0c\u8bf7\u89e3\u51b3\u8fd9\u4e9b\u95ee\u9898\u800c\u4e0d\u662f\u6307\u5b9a\u4e00\u4e2a 'static \u7684\u751f\u547d\u5468\u671f\u3002 \u7ed3\u5408\u6cdb\u578b\u7c7b\u578b\u53c2\u6570\u3001trait bounds \u548c\u751f\u547d\u5468\u671f \u8ba9\u6211\u4eec\u7b80\u8981\u7684\u770b\u4e00\u4e0b\u5728\u540c\u4e00\u51fd\u6570\u4e2d\u6307\u5b9a \u6cdb\u578b\u7c7b\u578b\u53c2\u6570 \u3001 trait bounds \u548c \u751f\u547d\u5468\u671f \u7684\u8bed\u6cd5\uff01 use std :: fmt :: Display ; fn longest_with_an_announcement <' a , T > ( x : & ' a str , y : & ' a str , ann : T , ) -> & ' a str where T : Display , { println! ( \"Announcement! {}\" , ann ); if x . len () > y . len () { x } else { y } } \u8fd9\u4e2a\u662f\u793a\u4f8b\u4e2d\u90a3\u4e2a\u8fd4\u56de\u4e24\u4e2a\u5b57\u7b26\u4e32 slice \u4e2d\u8f83\u957f\u8005\u7684 longest \u51fd\u6570\uff0c\u4e0d\u8fc7\u5e26\u6709\u4e00\u4e2a\u989d\u5916\u7684\u53c2\u6570 ann \u3002 ann \u7684\u7c7b\u578b\u662f\u6cdb\u578b T \uff0c\u5b83\u53ef\u4ee5\u88ab\u653e\u5165\u4efb\u4f55\u5b9e\u73b0\u4e86 where \u4ece\u53e5\u4e2d\u6307\u5b9a\u7684 Display trait \u7684\u7c7b\u578b\u3002\u8fd9\u4e2a\u989d\u5916\u7684\u53c2\u6570\u4f1a\u4f7f\u7528 {} \u6253\u5370\uff0c\u8fd9\u4e5f\u5c31\u662f\u4e3a\u4ec0\u4e48 Display trait bound \u662f\u5fc5\u987b\u7684\u3002 \u56e0\u4e3a\u751f\u547d\u5468\u671f\u4e5f\u662f\u6cdb\u578b\uff0c\u6240\u4ee5\u751f\u547d\u5468\u671f\u53c2\u6570 'a \u548c\u6cdb\u578b\u7c7b\u578b\u53c2\u6570 T \u90fd\u4f4d\u4e8e\u51fd\u6570\u540d\u540e\u7684\u540c\u4e00\u5c16\u62ec\u53f7\u5217\u8868\u4e2d\u3002 \u603b\u7ed3 \u73b0\u5728\u4f60\u77e5\u9053\u4e86 \u6cdb\u578b\u7c7b\u578b\u53c2\u6570 \u3001 trait \u548c trait bounds \u4ee5\u53ca \u6cdb\u578b\u751f\u547d\u5468\u671f\u7c7b\u578b \uff0c\u4f60\u5df2\u7ecf\u51c6\u5907\u597d\u7f16\u5199\u65e2\u4e0d\u91cd\u590d\u53c8\u80fd\u9002\u7528\u4e8e\u591a\u79cd\u573a\u666f\u7684\u4ee3\u7801\u4e86\u3002\u6cdb\u578b\u7c7b\u578b\u53c2\u6570\u610f\u5473\u7740\u4ee3\u7801\u53ef\u4ee5\u9002\u7528\u4e8e\u4e0d\u540c\u7684\u7c7b\u578b\u3002 trait \u548c trait bounds \u4fdd\u8bc1\u4e86\u5373\u4f7f\u7c7b\u578b\u662f\u6cdb\u578b\u7684\uff0c\u8fd9\u4e9b\u7c7b\u578b\u4e5f\u4f1a\u62e5\u6709\u6240\u9700\u8981\u7684\u884c\u4e3a\u3002 \u7531\u751f\u547d\u5468\u671f\u6ce8\u89e3\u6240\u6307\u5b9a\u7684\u5f15\u7528\u751f\u547d\u5468\u671f\u4e4b\u95f4\u7684\u5173\u7cfb\u4fdd\u8bc1\u4e86\u8fd9\u4e9b\u7075\u6d3b\u591a\u53d8\u7684\u4ee3\u7801\u4e0d\u4f1a\u51fa\u73b0\u60ac\u5782\u5f15\u7528\u3002\u800c\u6240\u6709\u7684\u8fd9\u4e00\u5207\u53d1\u751f\u5728\u7f16\u8bd1\u65f6\u6240\u4ee5\u4e0d\u4f1a\u5f71\u54cd\u8fd0\u884c\u65f6\u6548\u7387\uff01 \u4f60\u53ef\u80fd\u4e0d\u4f1a\u76f8\u4fe1\uff0c\u8fd9\u4e2a\u8bdd\u9898\u8fd8\u6709\u66f4\u591a\u9700\u8981\u5b66\u4e60\u7684\u5185\u5bb9\uff1a\u7b2c\u5341\u4e03\u7ae0\u4f1a\u8ba8\u8bba trait \u5bf9\u8c61\uff0c\u8fd9\u662f\u53e6\u4e00\u79cd\u4f7f\u7528 trait \u7684\u65b9\u5f0f\u3002\u8fd8\u6709\u66f4\u591a\u66f4\u590d\u6742\u7684\u6d89\u53ca\u751f\u547d\u5468\u671f\u6ce8\u89e3\u7684\u573a\u666f\uff0c\u53ea\u6709\u5728\u975e\u5e38\u9ad8\u7ea7\u7684\u60c5\u51b5\u4e0b\u624d\u4f1a\u9700\u8981\u5b83\u4eec\uff1b\u5bf9\u4e8e\u8fd9\u4e9b\u5185\u5bb9\uff0c\u8bf7\u9605\u8bfb Rust Reference \u3002\u4e0d\u8fc7\u63a5\u4e0b\u6765\uff0c\u8ba9\u6211\u4eec\u804a\u804a\u5982\u4f55\u5728 Rust \u4e2d\u7f16\u5199\u6d4b\u8bd5\uff0c\u6765\u786e\u4fdd\u4ee3\u7801\u7684\u6240\u6709\u529f\u80fd\u80fd\u50cf\u6211\u4eec\u5e0c\u671b\u7684\u90a3\u6837\u5de5\u4f5c\uff01","title":"\u6cdb\u578b/Trait/\u751f\u547d\u5468\u671f"},{"location":"generics/#trait","text":"\u6bcf\u4e00\u4e2a\u7f16\u7a0b\u8bed\u8a00\u90fd\u6709\u9ad8\u6548\u5904\u7406\u91cd\u590d\u6982\u5ff5\u7684\u5de5\u5177\u3002\u5728 Rust \u4e2d\u5176\u5de5\u5177\u4e4b\u4e00\u5c31\u662f \u6cdb\u578b \uff08generics\uff09\u3002 \u6cdb\u578b\u662f\u5177\u4f53\u7c7b\u578b\u6216\u5176\u4ed6\u5c5e\u6027\u7684\u62bd\u8c61\u66ff\u4ee3\u3002 \u6211\u4eec\u53ef\u4ee5\u8868\u8fbe\u6cdb\u578b\u7684\u5c5e\u6027\uff0c\u6bd4\u5982\u4ed6\u4eec\u7684\u884c\u4e3a\u6216\u5982\u4f55\u4e0e\u5176\u4ed6\u6cdb\u578b\u76f8\u5173\u8054\uff0c\u800c\u4e0d\u9700\u8981\u5728\u7f16\u5199\u548c\u7f16\u8bd1\u4ee3\u7801\u65f6\u77e5\u9053\u4ed6\u4eec\u5728\u8fd9\u91cc\u5b9e\u9645\u4e0a\u4ee3\u8868\u4ec0\u4e48\u3002 \u540c\u7406\u4e3a\u4e86\u7f16\u5199\u4e00\u4efd\u53ef\u4ee5\u7528\u4e8e\u591a\u79cd\u5177\u4f53\u503c\u7684\u4ee3\u7801\uff0c\u51fd\u6570\u5e76\u4e0d\u77e5\u9053\u5176\u53c2\u6570\u4e3a\u4f55\u503c\uff0c \u8fd9\u65f6\u5c31\u53ef\u4ee5\u8ba9\u51fd\u6570\u83b7\u53d6\u6cdb\u578b\u800c\u4e0d\u662f\u50cf i32 \u6216 String \u8fd9\u6837\u7684\u5177\u4f53\u7c7b\u578b\u3002 \u6211\u4eec\u5df2\u7ecf\u4f7f\u7528\u8fc7\u7b2c\u516d\u7ae0\u7684 Option<T> \uff0c\u7b2c\u516b\u7ae0\u7684 Vec<T> \u548c HashMap<K, V> \uff0c\u4ee5\u53ca\u7b2c\u4e5d\u7ae0\u7684 Result<T, E> \u8fd9\u4e9b\u6cdb\u578b\u4e86\u3002 \u9996\u5148\uff0c\u6211\u4eec\u5c06\u56de\u987e\u4e00\u4e0b \u63d0\u53d6\u51fd\u6570\u4ee5\u51cf\u5c11\u4ee3\u7801\u91cd\u590d\u7684\u673a\u5236 \u3002\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5c06\u4f7f\u7528\u76f8\u540c\u7684\u6280\u672f\uff0c\u4ece\u4e24\u4e2a\u4ec5\u53c2\u6570\u7c7b\u578b\u4e0d\u540c\u7684\u51fd\u6570\u4e2d\u521b\u5efa\u4e00\u4e2a\u6cdb\u578b\u51fd\u6570\u3002\u6211\u4eec\u4e5f\u4f1a\u8bb2\u5230 \u7ed3\u6784\u4f53 \u548c \u679a\u4e3e \u5b9a\u4e49\u4e2d\u7684\u6cdb\u578b\u3002 \u4e4b\u540e\uff0c\u6211\u4eec\u8ba8\u8bba trait \uff0c\u8fd9\u662f\u4e00\u4e2a \u5b9a\u4e49\u6cdb\u578b\u884c\u4e3a\u7684\u65b9\u6cd5\u3002trait \u53ef\u4ee5\u4e0e\u6cdb\u578b\u7ed3\u5408\u6765\u5c06\u6cdb\u578b\u9650\u5236\u4e3a\u62e5\u6709\u7279\u5b9a\u884c\u4e3a\u7684\u7c7b\u578b\uff0c\u800c\u4e0d\u662f\u4efb\u610f\u7c7b\u578b\u3002 \u6700\u540e\u4ecb\u7ecd \u751f\u547d\u5468\u671f \uff08lifetimes\uff09\uff0c\u5b83\u662f\u4e00\u7c7b\u5141\u8bb8\u6211\u4eec \u5411\u7f16\u8bd1\u5668\u63d0\u4f9b \u5f15\u7528\u5982\u4f55\u76f8\u4e92\u5173\u8054\u7684\u6cdb\u578b \u3002Rust \u7684\u751f\u547d\u5468\u671f\u529f\u80fd\u5141\u8bb8\u5728\u5f88\u591a\u573a\u666f\u4e0b\u501f\u7528\u503c\u7684\u540c\u65f6\u4ecd\u7136\u4f7f\u7f16\u8bd1\u5668\u80fd\u591f\u68c0\u67e5\u8fd9\u4e9b\u5f15\u7528\u7684\u6709\u6548\u6027\u3002","title":"\u6cdb\u578b/Trait/\u751f\u547d\u5468\u671f"},{"location":"generics/#_1","text":"\u5728\u4ecb\u7ecd\u6cdb\u578b\u8bed\u6cd5\u4e4b\u524d\uff0c\u9996\u5148\u6765\u56de\u987e\u4e00\u4e2a\u4e0d\u4f7f\u7528\u6cdb\u578b\u7684\u5904\u7406\u91cd\u590d\u7684\u6280\u672f\uff1a \u63d0\u53d6\u4e00\u4e2a\u51fd\u6570 \u3002 \u5f53\u719f\u6089\u4e86\u8fd9\u4e2a\u6280\u672f\u4ee5\u540e\uff0c\u6211\u4eec\u5c06\u4f7f\u7528\u76f8\u540c\u7684\u673a\u5236\u6765\u63d0\u53d6\u4e00\u4e2a\u6cdb\u578b\u51fd\u6570\uff01\u5982\u540c\u4f60\u8bc6\u522b\u51fa\u53ef\u4ee5\u63d0\u53d6\u5230\u51fd\u6570\u4e2d\u91cd\u590d\u4ee3\u7801\u90a3\u6837\uff0c\u4f60\u4e5f\u4f1a\u5f00\u59cb\u8bc6\u522b\u51fa\u80fd\u591f\u4f7f\u7528\u6cdb\u578b\u7684\u91cd\u590d\u4ee3\u7801\u3002 \u8003\u8651\u4e00\u4e0b\u8fd9\u4e2a\u5bfb\u627e\u5217\u8868\u4e2d\u6700\u5927\u503c\u7684\u5c0f\u7a0b\u5e8f: fn main () { // \u7801\u83b7\u53d6\u4e00\u4e2a\u6574\u578b\u5217\u8868\uff0c\u5b58\u653e\u5728\u53d8\u91cf number_list \u4e2d\u3002 let number_list = vec! [ 34 , 50 , 25 , 100 , 65 ]; // \u5c06\u5217\u8868\u7684\u7b2c\u4e00\u9879\u653e\u5165\u4e86\u53d8\u91cf largest \u4e2d\u3002 let mut largest = number_list [ 0 ]; // \u63a5\u7740\u904d\u5386\u4e86\u5217\u8868\u4e2d\u7684\u6240\u6709\u6570\u5b57\uff0c\u5982\u679c\u5f53\u524d\u503c\u5927\u4e8e largest \u4e2d\u50a8\u5b58\u7684\u503c\uff0c\u5c06 largest \u66ff\u6362\u4e3a\u8fd9\u4e2a\u503c\u3002 // \u5982\u679c\u5f53\u524d\u503c\u5c0f\u4e8e\u6216\u8005\u7b49\u4e8e\u76ee\u524d\u4e3a\u6b62\u7684\u6700\u5927\u503c\uff0clargest \u4fdd\u6301\u4e0d\u53d8\u3002 // \u5f53\u5217\u8868\u4e2d\u6240\u6709\u503c\u90fd\u88ab\u8003\u8651\u5230\u4e4b\u540e\uff0clargest \u5c06\u4f1a\u662f\u6700\u5927\u503c\uff0c\u5728\u8fd9\u91cc\u4e5f\u5c31\u662f 100\u3002 for number in number_list { if number > largest { largest = number ; } } println! ( \"The largest number is {}\" , largest ); } \u5982\u679c\u9700\u8981\u5728\u4e24\u4e2a\u4e0d\u540c\u7684\u5217\u8868\u4e2d\u5bfb\u627e\u6700\u5927\u503c\uff0c\u6211\u4eec\u53ef\u4ee5\u91cd\u590d\u793a\u4f8b\u4e2d\u7684\u4ee3\u7801\uff0c\u8fd9\u6837\u7a0b\u5e8f\u4e2d\u5c31\u4f1a\u5b58\u5728\u4e24\u6bb5\u76f8\u540c\u903b\u8f91\u7684\u4ee3\u7801\uff0c fn main () { let number_list = vec! [ 34 , 50 , 25 , 100 , 65 ]; let mut largest = number_list [ 0 ]; for number in number_list { if number > largest { largest = number ; } } println! ( \"The largest number is {}\" , largest ); let number_list = vec! [ 102 , 34 , 6000 , 89 , 54 , 2 , 43 , 8 ]; let mut largest = number_list [ 0 ]; for number in number_list { if number > largest { largest = number ; } } println! ( \"The largest number is {}\" , largest ); } \u867d\u7136\u4ee3\u7801\u80fd\u591f\u6267\u884c\uff0c\u4f46\u662f\u91cd\u590d\u7684\u4ee3\u7801\u662f\u5197\u4f59\u4e14\u5bb9\u6613\u51fa\u9519\u7684\uff0c\u5e76\u4e14\u610f\u5473\u7740\u5f53\u66f4\u65b0\u903b\u8f91\u65f6\u9700\u8981 \u4fee\u6539\u591a\u5904\u5730\u65b9\u7684\u4ee3\u7801 \u3002 \u4e3a\u4e86\u6d88\u9664\u91cd\u590d\uff0c\u53ef\u4ee5\u521b\u5efa\u4e00\u5c42 \u62bd\u8c61 \uff0c\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\u5c06\u8868\u73b0\u4e3a\u4e00\u4e2a\u83b7\u53d6\u4efb\u610f\u6574\u578b\u5217\u8868\u4f5c\u4e3a\u53c2\u6570\u5e76\u5bf9\u5176\u8fdb\u884c\u5904\u7406\u7684\u51fd\u6570\u3002 \u8fd9\u5c06\u589e\u52a0\u4ee3\u7801\u7684\u7b80\u6d01\u6027\u5e76\u8ba9\u6211\u4eec\u5c06\u8868\u8fbe\u548c\u63a8\u5bfc\u5bfb\u627e\u5217\u8868\u4e2d\u6700\u5927\u503c\u7684\u8fd9\u4e2a\u6982\u5ff5\u4e0e\u4f7f\u7528\u8fd9\u4e2a\u6982\u5ff5\u7684\u7279\u5b9a\u4f4d\u7f6e\u76f8\u4e92\u72ec\u7acb\u3002 \u5728\u793a\u4f8b\u4e2d\u7684\u7a0b\u5e8f\u4e2d\u5c06\u5bfb\u627e\u6700\u5927\u503c\u7684\u4ee3\u7801\u63d0\u53d6\u5230\u4e86\u4e00\u4e2a\u53eb\u505a largest \u7684\u51fd\u6570\u4e2d\u3002\u8fd9\u4e0d\u540c\u4e8e\u4e0a\u9762\u793a\u4f8b\u4e2d\u7684\u4ee3\u7801\u53ea\u80fd\u5728\u4e00\u4e2a\u7279\u5b9a\u7684\u5217\u8868\u4e2d\u627e\u5230\u6700\u5927\u7684\u6570\u5b57\uff0c\u8fd9\u4e2a\u7a0b\u5e8f\u53ef\u4ee5\u5728\u4e24\u4e2a\u4e0d\u540c\u7684\u5217\u8868\u4e2d\u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u3002 // largest \u51fd\u6570\u6709\u4e00\u4e2a\u53c2\u6570 list\uff0c\u5b83\u4ee3\u8868\u4f1a\u4f20\u9012\u7ed9\u51fd\u6570\u7684\u4efb\u4f55\u5177\u4f53\u7684 i32\u503c\u7684 slice\u3002 // \u51fd\u6570\u5b9a\u4e49\u4e2d\u7684 list \u4ee3\u8868\u4efb\u4f55 &[i32]\u3002 // \u5f53\u8c03\u7528 largest \u51fd\u6570\u65f6\uff0c\u5176\u4ee3\u7801\u5b9e\u9645\u4e0a\u8fd0\u884c\u4e8e\u6211\u4eec\u4f20\u9012\u7684\u7279\u5b9a\u503c\u4e0a\u3002 fn largest ( list : & [ i32 ]) -> i32 { let mut largest = list [ 0 ]; // \u76ee\u524d\u4e0d\u9700\u8981\u62c5\u5fc3 for \u5faa\u73af\u7684\u8bed\u6cd5\u3002\u8fd9\u91cc\u4e0d\u662f\u5f15\u7528\u4e86\u4e00\u4e2a i32 \u7684\u5f15\u7528\uff0c\u8fd9\u91cc\u53ea\u662f\u6a21\u5f0f\u5339\u914d\u5e76\u8868\u660e\u5faa\u73af\u7684\u503c\u5e94\u8be5\u662f &i32\u3002 for & item in list { if item > largest { largest = item ; } } largest } fn main () { let number_list = vec! [ 34 , 50 , 25 , 100 , 65 ]; let result = largest ( & number_list ); println! ( \"The largest number is {}\" , result ); let number_list = vec! [ 102 , 34 , 6000 , 89 , 54 , 2 , 43 , 8 ]; let result = largest ( & number_list ); println! ( \"The largest number is {}\" , result ); } \u603b\u7684\u6765\u8bf4\uff0c\u5728\u793a\u4f8b\u4e2d\u6d89\u53ca\u7684\u673a\u5236\u7ecf\u5386\u4e86\u5982\u4e0b\u51e0\u6b65\uff1a \u627e\u51fa\u91cd\u590d\u4ee3\u7801\u3002 \u5c06\u91cd\u590d\u4ee3\u7801\u63d0\u53d6\u5230\u4e86\u4e00\u4e2a\u51fd\u6570\u4e2d\uff0c\u5e76\u5728\u51fd\u6570\u7b7e\u540d\u4e2d\u6307\u5b9a\u4e86\u4ee3\u7801\u4e2d\u7684\u8f93\u5165\u548c\u8fd4\u56de\u503c\u3002 \u5c06\u91cd\u590d\u4ee3\u7801\u7684\u4e24\u4e2a\u5b9e\u4f8b\uff0c\u6539\u4e3a\u8c03\u7528\u51fd\u6570\u3002 \u5728\u4e0d\u540c\u7684\u573a\u666f\u4f7f\u7528\u4e0d\u540c\u7684\u65b9\u5f0f\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u5229\u7528\u76f8\u540c\u7684\u6b65\u9aa4\u548c\u6cdb\u578b\u6765\u51cf\u5c11\u91cd\u590d\u4ee3\u7801\u3002\u4e0e\u51fd\u6570\u4f53\u53ef\u4ee5\u5728\u62bd\u8c61 list \u800c\u4e0d\u662f\u7279\u5b9a\u503c\u4e0a\u64cd\u4f5c\u7684\u65b9\u5f0f\u76f8\u540c\uff0c\u6cdb\u578b\u5141\u8bb8\u4ee3\u7801\u5bf9\u62bd\u8c61\u7c7b\u578b\u8fdb\u884c\u64cd\u4f5c\u3002 \u5982\u679c\u6211\u4eec\u6709\u4e24\u4e2a\u51fd\u6570\uff0c\u4e00\u4e2a\u5bfb\u627e\u4e00\u4e2a i32 \u503c\u7684 slice \u4e2d\u7684\u6700\u5927\u9879\u800c\u53e6\u4e00\u4e2a\u5bfb\u627e char \u503c\u7684 slice \u4e2d\u7684\u6700\u5927\u9879\u8be5\u600e\u4e48\u529e\uff1f\u8be5\u5982\u4f55\u6d88\u9664\u91cd\u590d\u5462\uff1f\u770b\u4e0b\u53bb\uff01","title":"\u63d0\u70bc\u51fd\u6570\u51cf\u5c11\u91cd\u590d"},{"location":"generics/#_2","text":"\u53ef\u4ee5\u4f7f\u7528\u6cdb\u578b\u4e3a\u50cf\u51fd\u6570\u7b7e\u540d\u6216\u7ed3\u6784\u4f53\u8fd9\u6837\u7684\u9879\u521b\u5efa\u5b9a\u4e49\uff0c\u8fd9\u6837\u5b83\u4eec\u5c31\u53ef\u4ee5\u7528\u4e8e\u591a\u79cd\u4e0d\u540c\u7684\u5177\u4f53\u6570\u636e\u7c7b\u578b\u3002","title":"\u6cdb\u578b"},{"location":"generics/#_3","text":"\u5f53\u4f7f\u7528\u6cdb\u578b\u5b9a\u4e49\u51fd\u6570\u65f6\uff0c\u672c\u6765\u5728\u51fd\u6570\u7b7e\u540d\u4e2d\u6307\u5b9a\u53c2\u6570\u548c\u8fd4\u56de\u503c\u7684\u7c7b\u578b\u7684\u5730\u65b9\uff0c\u4f1a\u6539\u7528 \u6cdb\u578b \u6765\u8868\u793a\u3002 \u91c7\u7528\u8fd9\u79cd\u6280\u672f\uff0c\u4f7f\u5f97\u4ee3\u7801\u9002\u5e94\u6027\u66f4\u5f3a\uff0c\u4ece\u800c\u4e3a\u51fd\u6570\u7684\u8c03\u7528\u8005\u63d0\u4f9b\u66f4\u591a\u7684\u529f\u80fd\uff0c\u540c\u65f6\u4e5f\u907f\u514d\u4e86\u4ee3\u7801\u7684\u91cd\u590d\u3002 \u56de\u5230 largest \u51fd\u6570\uff0c\u793a\u4f8b\u4e2d\u5c55\u793a\u4e86\u4e24\u4e2a\u51fd\u6570\uff0c\u5b83\u4eec\u7684\u529f\u80fd\u90fd\u662f\u5bfb\u627e slice \u4e2d\u6700\u5927\u503c\u3002 fn largest_i32 ( list : & [ i32 ]) -> i32 { let mut largest = list [ 0 ]; for & item in list { if item > largest { largest = item ; } } largest } fn largest_char ( list : & [ char ]) -> char { let mut largest = list [ 0 ]; for & item in list { if item > largest { largest = item ; } } largest } fn main () { let number_list = vec! [ 34 , 50 , 25 , 100 , 65 ]; let result = largest_i32 ( & number_list ); println! ( \"The largest number is {}\" , result ); let char_list = vec! [ 'y' , 'm' , 'a' , 'q' ]; let result = largest_char ( & char_list ); println! ( \"The largest char is {}\" , result ); } \u56e0\u4e3a\u4e24\u8005\u51fd\u6570\u4f53\u7684\u4ee3\u7801\u662f\u4e00\u6837\u7684\uff0c\u53ef\u4ee5\u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570\uff0c\u518d\u5f15\u8fdb\u6cdb\u578b\u53c2\u6570\u6765\u6d88\u9664\u8fd9\u79cd\u91cd\u590d\u3002 \u4e3a\u4e86\u53c2\u6570\u5316\u65b0\u51fd\u6570\u4e2d\u7684\u8fd9\u4e9b\u7c7b\u578b\uff0c\u4e5f\u9700\u8981\u4e3a\u7c7b\u578b\u53c2\u6570\u53d6\u4e2a\u540d\u5b57\uff0c\u9053\u7406\u548c\u7ed9\u51fd\u6570\u7684\u5f62\u53c2\u8d77\u540d\u4e00\u6837\u3002\u4efb\u4f55\u6807\u8bc6\u7b26\u90fd\u53ef\u4ee5\u4f5c\u4e3a\u7c7b\u578b\u53c2\u6570\u7684\u540d\u5b57\u3002 \u8fd9\u91cc\u9009\u7528 T \uff0c\u56e0\u4e3a\u4f20\u7edf\u4e0a\u6765\u8bf4\uff0cRust \u7684\u53c2\u6570\u540d\u5b57\u90fd\u6bd4\u8f83\u77ed\uff0c\u901a\u5e38\u5c31\u53ea\u6709\u4e00\u4e2a\u5b57\u6bcd\uff0c\u540c\u65f6\uff0c Rust \u7c7b\u578b\u540d\u7684\u547d\u540d\u89c4\u8303\u662f\u9a86\u9a7c\u547d\u540d\u6cd5 \uff08CamelCase\uff09\u3002 T \u4f5c\u4e3a \u201ctype\u201d \u7684\u7f29\u5199\u662f\u5927\u90e8\u5206 Rust \u7a0b\u5e8f\u5458\u7684\u9996\u9009\u3002 \u5982\u679c\u8981\u5728\u51fd\u6570\u4f53\u4e2d\u4f7f\u7528\u53c2\u6570\uff0c\u5c31\u5fc5\u987b\u5728\u51fd\u6570\u7b7e\u540d\u4e2d\u58f0\u660e\u5b83\u7684\u540d\u5b57\uff0c\u597d\u8ba9\u7f16\u8bd1\u5668\u77e5\u9053\u8fd9\u4e2a\u540d\u5b57\u6307\u4ee3\u7684\u662f\u4ec0\u4e48\u3002 \u540c\u7406\uff0c\u5f53\u5728\u51fd\u6570\u7b7e\u540d\u4e2d\u4f7f\u7528\u4e00\u4e2a\u7c7b\u578b\u53c2\u6570\u65f6\uff0c\u5fc5\u987b\u5728\u4f7f\u7528\u5b83\u4e4b\u524d\u5c31\u58f0\u660e\u5b83\u3002\u4e3a\u4e86\u5b9a\u4e49\u6cdb\u578b\u7248\u672c\u7684 largest \u51fd\u6570\uff0c \u7c7b\u578b\u53c2\u6570\u58f0\u660e\u4f4d\u4e8e\u51fd\u6570\u540d\u79f0\u4e0e\u53c2\u6570\u5217\u8868\u4e2d\u95f4\u7684\u5c16\u62ec\u53f7 <> \u4e2d\uff0c\u50cf\u8fd9\u6837\uff1a fn largest < T > ( list : & [ T ]) -> T { \u53ef\u4ee5\u8fd9\u6837\u7406\u89e3\u8fd9\u4e2a\u5b9a\u4e49\uff1a \u51fd\u6570 largest \u6709\u6cdb\u578b\u7c7b\u578b T \u3002\u5b83\u6709\u4e2a\u53c2\u6570 list \uff0c\u5176\u7c7b\u578b\u662f\u5143\u7d20\u4e3a T \u7684 slice \u3002 largest \u51fd\u6570\u7684\u8fd4\u56de\u503c\u7c7b\u578b\u4e5f\u662f T \u3002 \u4e0b\u9762\u793a\u4f8b 10-5 \u4e2d\u7684 largest \u51fd\u6570\u5728\u5b83\u7684\u7b7e\u540d\u4e2d\u4f7f\u7528\u4e86\u6cdb\u578b\uff0c\u7edf\u4e00\u4e86\u4e24\u4e2a\u5b9e\u73b0\u3002 \u8be5\u793a\u4f8b\u4e5f\u5c55\u793a\u4e86\u5982\u4f55\u8c03\u7528 largest \u51fd\u6570\uff0c\u628a i32 \u503c\u7684 slice \u6216 char \u503c\u7684 slice \u4f20\u7ed9\u5b83\u3002 \u8bf7\u6ce8\u610f\u8fd9\u4e9b\u4ee3\u7801\u8fd8\u4e0d\u80fd\u7f16\u8bd1\uff0c\u4e0d\u8fc7\u7a0d\u540e\u5728\u672c\u7ae0\u4f1a\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002 // \u4e00\u4e2a\u4f7f\u7528\u6cdb\u578b\u53c2\u6570\u7684 largest \u51fd\u6570\u5b9a\u4e49\uff0c\u5c1a\u4e0d\u80fd\u7f16\u8bd1 fn largest < T > ( list : & [ T ]) -> T { let mut largest = list [ 0 ]; for & item in list { if item > largest { largest = item ; } } largest } fn main () { let number_list = vec! [ 34 , 50 , 25 , 100 , 65 ]; let result = largest ( & number_list ); println! ( \"The largest number is {}\" , result ); let char_list = vec! [ 'y' , 'm' , 'a' , 'q' ]; let result = largest ( & char_list ); println! ( \"The largest char is {}\" , result ); } \u5982\u679c\u73b0\u5728\u5c31\u7f16\u8bd1\u8fd9\u4e2a\u4ee3\u7801\uff0c\u4f1a\u51fa\u73b0\u5982\u4e0b\u9519\u8bef\uff1a $ cargo run Compiling chapter10 v0.1.0 (file:///projects/chapter10) error[E0369]: binary operation `>` cannot be applied to type `T` --> src/main.rs:5:17 | 5 | if item > largest { | ---- ^ ------- T | | | T | help: consider restricting type parameter `T` | 1 | fn largest<T: std::cmp::PartialOrd>(list: &[T]) -> T { | ++++++++++++++++++++++ For more information about this error, try `rustc --explain E0369`. error: could not compile `chapter10` due to previous error \u6ce8\u91ca\u4e2d\u63d0\u5230\u4e86 std::cmp::PartialOrd \uff0c\u8fd9\u662f\u4e00\u4e2a trait \u3002 \u4e0b\u4e00\u90e8\u5206\u4f1a\u8bb2\u5230 trait \u3002\u4e0d\u8fc7\u7b80\u5355\u6765\u8bf4\uff0c\u8fd9\u4e2a\u9519\u8bef\u8868\u660e largest \u7684\u51fd\u6570\u4f53\u4e0d\u80fd\u9002\u7528\u4e8e T \u7684\u6240\u6709\u53ef\u80fd\u7684\u7c7b\u578b\u3002\u56e0\u4e3a\u5728\u51fd\u6570\u4f53\u9700\u8981\u6bd4\u8f83 T \u7c7b\u578b\u7684\u503c\uff0c\u4e0d\u8fc7\u5b83\u53ea\u80fd\u7528\u4e8e\u6211\u4eec\u77e5\u9053\u5982\u4f55\u6392\u5e8f\u7684\u7c7b\u578b\u3002 \u4e3a\u4e86\u5f00\u542f\u6bd4\u8f83\u529f\u80fd\uff0c\u6807\u51c6\u5e93\u4e2d\u5b9a\u4e49\u7684 std::cmp::PartialOrd trait \u53ef\u4ee5\u5b9e\u73b0\u7c7b\u578b\u7684\u6bd4\u8f83\u529f\u80fd\uff08\u67e5\u770b \u9644\u5f55 C \u83b7\u53d6\u8be5 trait \u7684\u66f4\u591a\u4fe1\u606f\uff09\u3002 \u6807\u51c6\u5e93\u4e2d\u5b9a\u4e49\u7684 std::cmp::PartialOrd trait \u53ef\u4ee5\u5b9e\u73b0\u7c7b\u578b\u7684\u6bd4\u8f83\u529f\u80fd\u3002\u5728 \u201c trait \u4f5c\u4e3a\u53c2\u6570 \u201d \u90e8\u5206\u4f1a\u8bb2\u89e3\u5982\u4f55\u6307\u5b9a\u6cdb\u578b\u5b9e\u73b0\u7279\u5b9a\u7684 trait \uff0c\u4e0d\u8fc7\u8ba9\u6211\u4eec\u5148\u63a2\u7d22\u5176\u4ed6\u4f7f\u7528\u6cdb\u578b\u53c2\u6570\u7684\u65b9\u6cd5\u3002","title":"\u51fd\u6570\u4e2d\u4f7f\u7528\u6cdb\u578b"},{"location":"generics/#_4","text":"\u540c\u6837\u4e5f\u53ef\u4ee5\u7528 <> \u8bed\u6cd5\u6765\u5b9a\u4e49\u7ed3\u6784\u4f53\uff0c\u5b83\u5305\u542b\u4e00\u4e2a\u6216\u591a\u4e2a\u6cdb\u578b\u53c2\u6570\u7c7b\u578b\u5b57\u6bb5\u3002\u4e0b\u9762\u793a\u4f8b\u5c55\u793a\u4e86\u5982\u4f55\u5b9a\u4e49\u548c\u4f7f\u7528\u4e00\u4e2a\u53ef\u4ee5\u5b58\u653e\u4efb\u4f55\u7c7b\u578b\u7684 x \u548c y \u5750\u6807\u503c\u7684\u7ed3\u6784\u4f53 Point \uff1a // Point \u7ed3\u6784\u4f53\u5b58\u653e\u4e86\u4e24\u4e2a T \u7c7b\u578b\u7684\u503c x \u548c y struct Point < T > { x : T , y : T , } fn main () { let integer = Point { x : 5 , y : 10 }; let float = Point { x : 1.0 , y : 4.0 }; } \u5176\u8bed\u6cd5\u7c7b\u4f3c\u4e8e\u51fd\u6570\u5b9a\u4e49\u4e2d\u4f7f\u7528\u6cdb\u578b\u3002\u9996\u5148\uff0c\u5fc5\u987b\u5728\u7ed3\u6784\u4f53\u540d\u79f0\u540e\u9762\u7684\u5c16\u62ec\u53f7\u4e2d\u58f0\u660e\u6cdb\u578b\u53c2\u6570\u7684\u540d\u79f0\u3002\u63a5\u7740\u5728\u7ed3\u6784\u4f53\u5b9a\u4e49\u4e2d\u53ef\u4ee5\u6307\u5b9a\u5177\u4f53\u6570\u636e\u7c7b\u578b\u7684\u4f4d\u7f6e\u4f7f\u7528\u6cdb\u578b\u7c7b\u578b\u3002 \u6ce8\u610f Point<T> \u7684\u5b9a\u4e49\u4e2d\u53ea\u4f7f\u7528\u4e86\u4e00\u4e2a\u6cdb\u578b\u7c7b\u578b\uff0c\u8fd9\u4e2a\u5b9a\u4e49\u8868\u660e\u7ed3\u6784\u4f53 Point<T> \u5bf9\u4e8e\u4e00\u4e9b\u7c7b\u578b T \u662f\u6cdb\u578b\u7684\uff0c\u800c\u4e14\u5b57\u6bb5 x \u548c y \u90fd\u662f \u76f8\u540c\u7c7b\u578b\u7684\uff0c\u65e0\u8bba\u5b83\u5177\u4f53\u662f\u4f55\u7c7b\u578b\u3002 \u5982\u679c\u5c1d\u8bd5\u521b\u5efa\u4e00\u4e2a\u6709\u4e0d\u540c\u7c7b\u578b\u503c\u7684 Point<T> \u7684\u5b9e\u4f8b\uff0c\u5c31\u4e0d\u80fd\u7f16\u8bd1\uff1a // \u5b57\u6bb5 x \u548c y \u7684\u7c7b\u578b\u5fc5\u987b\u76f8\u540c\uff0c\u56e0\u4e3a\u4ed6\u4eec\u90fd\u6709\u76f8\u540c\u7684\u6cdb\u578b\u7c7b\u578b T struct Point < T > { x : T , y : T , } fn main () { let wont_work = Point { x : 5 , y : 4.0 }; } \u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u5f53\u628a\u6574\u578b\u503c 5 \u8d4b\u503c\u7ed9 x \u65f6\uff0c\u5c31\u544a\u8bc9\u4e86\u7f16\u8bd1\u5668\u8fd9\u4e2a Point<T> \u5b9e\u4f8b\u4e2d\u7684\u6cdb\u578b T \u662f\u6574\u578b\u7684\u3002\u63a5\u7740\u6307\u5b9a y \u4e3a 4.0 \uff0c\u5b83\u88ab\u5b9a\u4e49\u4e3a\u4e0e x \u76f8\u540c\u7c7b\u578b\uff0c\u5c31\u4f1a\u5f97\u5230\u4e00\u4e2a\u50cf\u8fd9\u6837\u7684\u7c7b\u578b\u4e0d\u5339\u914d\u9519\u8bef\uff1a $ cargo run Compiling chapter10 v0 . 1.0 ( file : ///projects/chapter10) error [ E0308 ] : mismatched types - -> src / main . rs : 7 : 38 | 7 | let wont_work = Point { x : 5 , y : 4.0 }; | ^^^ expected integer , found floating - point number For more information about this error , try ` rustc -- explain E0308 ` . error : could not compile ` chapter10 ` due to previous error \u5982\u679c\u60f3\u8981\u5b9a\u4e49\u4e00\u4e2a x \u548c y \u53ef\u4ee5\u6709\u4e0d\u540c\u7c7b\u578b\u4e14\u4ecd\u7136\u662f\u6cdb\u578b\u7684 Point \u7ed3\u6784\u4f53\uff0c \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u591a\u4e2a\u6cdb\u578b\u7c7b\u578b\u53c2\u6570\u3002\u5728\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u4fee\u6539 Point \u7684\u5b9a\u4e49\u4e3a\u62e5\u6709\u4e24\u4e2a\u6cdb\u578b\u7c7b\u578b T \u548c U \u3002 \u5176\u4e2d\u5b57\u6bb5 x \u662f T \u7c7b\u578b\u7684\uff0c\u800c\u5b57\u6bb5 y \u662f U \u7c7b\u578b\u7684\uff1a struct Point < T , U > { x : T , y : U , } fn main () { let both_integer = Point { x : 5 , y : 10 }; let both_float = Point { x : 1.0 , y : 4.0 }; let integer_and_float = Point { x : 5 , y : 4.0 }; } \u73b0\u5728\u6240\u6709\u8fd9\u4e9b Point \u5b9e\u4f8b\u90fd\u5408\u6cd5\u4e86\uff01 \u4f60\u53ef\u4ee5\u5728\u5b9a\u4e49\u4e2d\u4f7f\u7528\u4efb\u610f\u591a\u7684\u6cdb\u578b\u7c7b\u578b\u53c2\u6570\uff0c \u4e0d\u8fc7\u592a\u591a\u7684\u8bdd\uff0c\u4ee3\u7801\u5c06\u96be\u4ee5\u9605\u8bfb\u548c\u7406\u89e3 \u3002 \u5f53\u4f60\u7684\u4ee3\u7801\u4e2d\u9700\u8981\u8bb8\u591a\u6cdb\u578b\u7c7b\u578b\u65f6\uff0c\u5b83\u53ef\u80fd\u8868\u660e\u4f60\u7684\u4ee3\u7801\u9700\u8981\u91cd\u6784\uff0c\u5206\u89e3\u6210\u66f4\u5c0f\u7684\u7ed3\u6784\u3002","title":"\u7ed3\u6784\u4f53\u4e2d\u4f7f\u7528\u6cdb\u578b"},{"location":"generics/#_5","text":"\u548c\u7ed3\u6784\u4f53\u7c7b\u4f3c\uff0c \u679a\u4e3e\u4e5f\u53ef\u4ee5\u5728\u6210\u5458\u4e2d\u5b58\u653e\u6cdb\u578b\u6570\u636e\u7c7b\u578b \u3002\u7b2c\u516d\u7ae0\u6211\u4eec\u66fe\u7528\u8fc7\u6807\u51c6\u5e93\u63d0\u4f9b\u7684 Option<T> \u679a\u4e3e\uff0c\u8fd9\u91cc\u518d\u56de\u987e\u4e00\u4e0b\uff1a enum Option < T > { Some ( T ), None , } \u73b0\u5728\u8fd9\u4e2a\u5b9a\u4e49\u5e94\u8be5\u66f4\u5bb9\u6613\u7406\u89e3\u4e86\u3002\u5982\u4f60\u6240\u89c1 Option<T> \u662f\u4e00\u4e2a\u62e5\u6709\u6cdb\u578b T \u7684\u679a\u4e3e\uff0c\u5b83\u6709\u4e24\u4e2a\u6210\u5458\uff1a Some \uff0c\u5b83\u5b58\u653e\u4e86\u4e00\u4e2a\u7c7b\u578b T \u7684\u503c\uff0c\u548c\u4e0d\u5b58\u5728\u4efb\u4f55\u503c\u7684 None \u3002 \u901a\u8fc7 Option<T> \u679a\u4e3e\u53ef\u4ee5\u8868\u8fbe\u6709\u4e00\u4e2a\u53ef\u80fd\u7684\u503c\u7684\u62bd\u8c61\u6982\u5ff5\uff0c\u540c\u65f6\u56e0\u4e3a Option<T> \u662f\u6cdb\u578b\u7684\uff0c\u65e0\u8bba\u8fd9\u4e2a\u53ef\u80fd\u7684\u503c\u662f\u4ec0\u4e48\u7c7b\u578b\u90fd\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e2a\u62bd\u8c61\u3002 \u679a\u4e3e\u4e5f\u53ef\u4ee5\u62e5\u6709\u591a\u4e2a\u6cdb\u578b\u7c7b\u578b\u3002\u7b2c\u4e5d\u7ae0\u4f7f\u7528\u8fc7\u7684 Result \u679a\u4e3e\u5b9a\u4e49\u5c31\u662f\u4e00\u4e2a\u8fd9\u6837\u7684\u4f8b\u5b50\uff1a enum Result < T , E > { Ok ( T ), Err ( E ), } Result \u679a\u4e3e\u6709\u4e24\u4e2a\u6cdb\u578b\u7c7b\u578b\uff0cT \u548c E\u3002Result \u6709\u4e24\u4e2a\u6210\u5458\uff1aOk\uff0c\u5b83\u5b58\u653e\u4e00\u4e2a\u7c7b\u578b T \u7684\u503c\uff0c\u800c Err \u5219\u5b58\u653e\u4e00\u4e2a\u7c7b\u578b E \u7684\u503c\u3002\u8fd9\u4e2a\u5b9a\u4e49\u4f7f\u5f97 Result \u679a\u4e3e\u80fd\u5f88\u65b9\u4fbf\u7684\u8868\u8fbe\u4efb\u4f55\u53ef\u80fd\u6210\u529f\uff08\u8fd4\u56de T \u7c7b\u578b\u7684\u503c\uff09\u4e5f\u53ef\u80fd\u5931\u8d25\uff08\u8fd4\u56de E \u7c7b\u578b\u7684\u503c\uff09\u7684\u64cd\u4f5c\u3002\u5b9e\u9645\u4e0a\uff0c\u8fd9\u5c31\u662f\u6211\u4eec\u5728\u793a\u4f8b 9-3 \u7528\u6765\u6253\u5f00\u6587\u4ef6\u7684\u65b9\u5f0f\uff1a\u5f53\u6210\u529f\u6253\u5f00\u6587\u4ef6\u7684\u65f6\u5019\uff0cT \u5bf9\u5e94\u7684\u662f std::fs::File \u7c7b\u578b\uff1b\u800c\u5f53\u6253\u5f00\u6587\u4ef6\u51fa\u73b0\u95ee\u9898\u65f6\uff0cE \u7684\u503c\u5219\u662f std::io::Error \u7c7b\u578b\u3002 \u5f53\u4f60\u610f\u8bc6\u5230\u4ee3\u7801\u4e2d\u5b9a\u4e49\u4e86\u591a\u4e2a\u7ed3\u6784\u4f53\u6216\u679a\u4e3e\uff0c\u5b83\u4eec\u4e0d\u4e00\u6837\u7684\u5730\u65b9\u53ea\u662f\u5176\u4e2d\u7684\u503c\u7684\u7c7b\u578b\u7684\u65f6\u5019\uff0c\u4e0d\u59a8\u901a\u8fc7\u6cdb\u578b\u7c7b\u578b\u6765\u907f\u514d\u91cd\u590d\u3002","title":"\u679a\u4e3e\u4e2d\u4f7f\u7528\u6cdb\u578b"},{"location":"generics/#_6","text":"\u5728\u4e3a\u7ed3\u6784\u4f53\u548c\u679a\u4e3e\u5b9e\u73b0\u65b9\u6cd5\u65f6\uff08\u50cf\u7b2c\u4e94\u7ae0\u90a3\u6837\uff09\uff0c\u4e00\u6837\u4e5f\u53ef\u4ee5\u7528\u6cdb\u578b\u3002\u793a\u4f8b\u4e2d\u5b9a\u4e49\u7684\u7ed3\u6784\u4f53 Point<T> \uff0c\u548c\u5728\u5176\u4e0a\u5b9e\u73b0\u7684\u540d\u4e3a x \u7684\u65b9\u6cd5\u3002 // \u5728 Point<T> \u7ed3\u6784\u4f53\u4e0a\u5b9e\u73b0\u65b9\u6cd5 x\uff0c\u5b83\u8fd4\u56de T \u7c7b\u578b\u7684\u5b57\u6bb5 x \u7684\u5f15\u7528 struct Point < T > { x : T , y : T , } // // \u8fd9\u91cc\u5728 Point<T> \u4e0a\u5b9a\u4e49\u4e86\u4e00\u4e2a\u53eb\u505a x \u7684\u65b9\u6cd5\u6765\u8fd4\u56de\u5b57\u6bb5 x \u4e2d\u6570\u636e\u7684\u5f15\u7528\uff1a impl < T > Point < T > { fn x ( & self ) -> & T { & self . x } } fn main () { let p = Point { x : 5 , y : 10 }; println! ( \"p.x = {}\" , p . x ()); } \u6ce8\u610f\u5fc5\u987b\u5728 impl \u540e\u9762\u58f0\u660e T \uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u5728 Point<T> \u4e0a\u5b9e\u73b0\u7684\u65b9\u6cd5\u4e2d\u4f7f\u7528\u5b83\u4e86\u3002 \u5728 impl \u4e4b\u540e\u58f0\u660e\u6cdb\u578b T \uff0c\u8fd9\u6837 Rust \u5c31\u77e5\u9053 Point \u7684\u5c16\u62ec\u53f7\u4e2d\u7684\u7c7b\u578b\u662f\u6cdb\u578b\u800c\u4e0d\u662f\u5177\u4f53\u7c7b\u578b\u3002 \u56e0\u4e3a\u518d\u6b21\u58f0\u660e\u4e86\u6cdb\u578b\uff0c\u6211\u4eec\u53ef\u4ee5\u4e3a\u6cdb\u578b\u53c2\u6570\u9009\u62e9\u4e00\u4e2a\u4e0e\u7ed3\u6784\u4f53\u5b9a\u4e49\u4e2d\u58f0\u660e\u7684\u6cdb\u578b\u53c2\u6570\u6240\u4e0d\u540c\u7684\u540d\u79f0\uff0c\u4e0d\u8fc7\u4f9d\u7167\u60ef\u4f8b\u4f7f\u7528\u4e86\u76f8\u540c\u7684\u540d\u79f0\u3002 impl \u4e2d\u7f16\u5199\u7684\u65b9\u6cd5\u58f0\u660e\u4e86\u6cdb\u578b\u7c7b\u578b\u53ef\u4ee5\u5b9a\u4f4d\u4e3a\u4efb\u4f55\u7c7b\u578b\u7684\u5b9e\u4f8b\uff0c\u4e0d\u7ba1\u6700\u7ec8\u66ff\u6362\u6cdb\u578b\u7c7b\u578b\u7684\u662f\u4f55\u5177\u4f53\u7c7b\u578b\u3002 m \u53e6\u4e00\u4e2a\u9009\u62e9\u662f\u5b9a\u4e49\u65b9\u6cd5\u9002\u7528\u4e8e\u67d0\u4e9b\u6709\u9650\u5236\uff08constraint\uff09\u7684 \u6cdb\u578b\u7c7b\u578b \u3002 \u4f8b\u5982\uff0c\u53ef\u4ee5\u9009\u62e9\u4e3a Point<f32> \u5b9e\u4f8b\u5b9e\u73b0\u65b9\u6cd5\uff0c\u800c\u4e0d\u662f\u4e3a\u6cdb\u578b Point \u5b9e\u4f8b\u3002 \u793a\u4f8b\u5c55\u793a\u4e86\u4e00\u4e2a\u6ca1\u6709\u5728 impl \u4e4b\u540e\uff08\u7684\u5c16\u62ec\u53f7\uff09\u58f0\u660e\u6cdb\u578b\u7684\u4f8b\u5b50\uff0c\u8fd9\u91cc\u4f7f\u7528\u4e86\u4e00\u4e2a\u5177\u4f53\u7c7b\u578b\uff0c f32 \uff1a // \u8fd9\u6bb5\u4ee3\u7801\u610f\u5473\u7740 Point<f32> \u7c7b\u578b\u4f1a\u6709\u4e00\u4e2a\u65b9\u6cd5 distance_from_origin\uff0c // \u800c\u5176\u4ed6 T \u4e0d\u662f f32 \u7c7b\u578b\u7684 Point<T> \u5b9e\u4f8b\u5219\u6ca1\u6709\u5b9a\u4e49\u6b64\u65b9\u6cd5\u3002 // \u8fd9\u4e2a\u65b9\u6cd5\u8ba1\u7b97\u70b9\u5b9e\u4f8b\u4e0e\u5750\u6807 (0.0, 0.0) \u4e4b\u95f4\u7684\u8ddd\u79bb\uff0c\u5e76\u4f7f\u7528\u4e86\u53ea\u80fd\u7528\u4e8e\u6d6e\u70b9\u578b\u7684\u6570\u5b66\u8fd0\u7b97\u7b26\u3002 impl Point < f32 > { fn distance_from_origin ( & self ) -> f32 { ( self . x . powi ( 2 ) + self . y . powi ( 2 )). sqrt () } } \u7ed3\u6784\u4f53\u5b9a\u4e49\u4e2d\u7684\u6cdb\u578b\u7c7b\u578b\u53c2\u6570\u5e76\u4e0d\u603b\u662f\u4e0e\u7ed3\u6784\u4f53\u65b9\u6cd5\u7b7e\u540d\u4e2d\u4f7f\u7528\u7684\u6cdb\u578b\u662f\u540c\u4e00\u7c7b\u578b\u3002 \u793a\u4f8b\u4e2d\u4e3a Point \u7ed3\u6784\u4f53\u4f7f\u7528\u4e86\u6cdb\u578b\u7c7b\u578b X1 \u548c Y1 \uff0c\u4e3a mixup \u65b9\u6cd5\u7b7e\u540d\u4f7f\u7528\u4e86 X2 \u548c Y2 \u6765\u4f7f\u5f97\u793a\u4f8b\u66f4\u52a0\u6e05\u695a\u3002 \u8fd9\u4e2a\u65b9\u6cd5\u7528 self \u7684 Point \u7c7b\u578b\u7684 x \u503c\uff08\u7c7b\u578b X1 \uff09\u548c\u53c2\u6570\u7684 Point \u7c7b\u578b\u7684 y \u503c\uff08\u7c7b\u578b Y2 \uff09\u6765\u521b\u5efa\u4e00\u4e2a\u65b0 Point \u7c7b\u578b\u7684\u5b9e\u4f8b\uff1a struct Point < X1 , Y1 > { x : X1 , y : Y1 , } // \u65b9\u6cd5\u4f7f\u7528\u4e86\u4e0e\u7ed3\u6784\u4f53\u5b9a\u4e49\u4e2d\u4e0d\u540c\u7c7b\u578b\u7684\u6cdb\u578b impl < X1 , Y1 > Point < X1 , Y1 > { fn mixup < X2 , Y2 > ( self , other : Point < X2 , Y2 > ) -> Point < X1 , Y2 > { Point { x : self . x , y : other . y , } } } fn main () { let p1 = Point { x : 5 , y : 10.4 }; let p2 = Point { x : \"Hello\" , y : ' c ' }; let p3 = p1 . mixup ( p2 ); println! ( \"p3.x = {}, p3.y = {}\" , p3 . x , p3 . y ); } \u5728 main \u51fd\u6570\u4e2d\uff0c\u5b9a\u4e49\u4e86\u4e00\u4e2a\u6709 i32 \u7c7b\u578b\u7684 x\uff08\u5176\u503c\u4e3a 5\uff09\u548c f64 \u7684 y\uff08\u5176\u503c\u4e3a 10.4\uff09\u7684 Point \u3002 p2 \u5219\u662f\u4e00\u4e2a\u6709\u7740\u5b57\u7b26\u4e32 slice \u7c7b\u578b\u7684 x\uff08\u5176\u503c\u4e3a \"Hello\"\uff09\u548c char \u7c7b\u578b\u7684 y\uff08\u5176\u503c\u4e3ac\uff09\u7684 Point \u3002 \u5728 p1 \u4e0a\u4ee5 p2 \u4f5c\u4e3a\u53c2\u6570\u8c03\u7528 mixup \u4f1a\u8fd4\u56de\u4e00\u4e2a p3\uff0c\u5b83\u4f1a\u6709\u4e00\u4e2a i32 \u7c7b\u578b\u7684 x\uff0c\u56e0\u4e3a x \u6765\u81ea p1\uff0c\u5e76\u62e5\u6709\u4e00\u4e2a char \u7c7b\u578b\u7684 y\uff0c\u56e0\u4e3a y \u6765\u81ea p2\u3002println! \u4f1a\u6253\u5370\u51fa p3.x = 5, p3.y = c\u3002 \u8fd9\u4e2a\u4f8b\u5b50\u7684\u76ee\u7684\u662f\u5c55\u793a\u4e00\u4e9b\u6cdb\u578b\u901a\u8fc7 impl \u58f0\u660e\u800c\u53e6\u4e00\u4e9b\u901a\u8fc7\u65b9\u6cd5\u5b9a\u4e49\u58f0\u660e\u7684\u60c5\u51b5\u3002 \u8fd9\u91cc\u6cdb\u578b\u53c2\u6570 X1 \u548c Y1 \u58f0\u660e\u4e8e impl \u4e4b\u540e\uff0c\u56e0\u4e3a\u4ed6\u4eec\u4e0e\u7ed3\u6784\u4f53\u5b9a\u4e49\u76f8\u5bf9\u5e94\u3002 \u800c\u6cdb\u578b\u53c2\u6570 X2 \u548c Y2 \u58f0\u660e\u4e8e fn mixup \u4e4b\u540e\uff0c\u56e0\u4e3a\u4ed6\u4eec\u53ea\u662f\u76f8\u5bf9\u4e8e\u65b9\u6cd5\u672c\u8eab\u7684\u3002","title":"\u65b9\u6cd5\u4e2d\u4f7f\u7528\u6cdb\u578b"},{"location":"generics/#trait_1","text":"\u5728\u9605\u8bfb\u672c\u90e8\u5206\u5185\u5bb9\u7684\u540c\u65f6\uff0c\u4f60\u53ef\u80fd\u4f1a\u597d\u5947\u4f7f\u7528\u6cdb\u578b\u7c7b\u578b\u53c2\u6570\u662f\u5426\u4f1a\u6709\u8fd0\u884c\u65f6\u6d88\u8017\u3002\u597d\u6d88\u606f\u662f\uff1a Rust \u5b9e\u73b0\u4e86\u6cdb\u578b\uff0c\u4f7f\u5f97\u4f7f\u7528\u6cdb\u578b\u7c7b\u578b\u53c2\u6570\u7684\u4ee3\u7801\u76f8\u6bd4\u4f7f\u7528\u5177\u4f53\u7c7b\u578b\u5e76\u6ca1\u6709\u4efb\u4f55\u901f\u5ea6\u4e0a\u7684\u635f\u5931\u3002 Rust \u901a\u8fc7\u5728\u7f16\u8bd1\u65f6\u8fdb\u884c\u6cdb\u578b\u4ee3\u7801\u7684 \u5355\u6001\u5316 \uff08monomorphization\uff09\u6765\u4fdd\u8bc1\u6548\u7387\u3002 \u5355\u6001\u5316\u662f\u4e00\u4e2a\u901a\u8fc7\u586b\u5145\u7f16\u8bd1\u65f6\u4f7f\u7528\u7684\u5177\u4f53\u7c7b\u578b\uff0c\u5c06\u901a\u7528\u4ee3\u7801\u8f6c\u6362\u4e3a\u7279\u5b9a\u4ee3\u7801\u7684\u8fc7\u7a0b\u3002 \u7f16\u8bd1\u5668\u6240\u505a\u7684\u5de5\u4f5c\u6b63\u597d\u4e0e\u4e0a\u9762\u793a\u4f8b\u4e2d\u6211\u4eec\u521b\u5efa\u6cdb\u578b\u51fd\u6570\u7684\u6b65\u9aa4\u76f8\u53cd\u3002\u7f16\u8bd1\u5668\u5bfb\u627e\u6240\u6709\u6cdb\u578b\u4ee3\u7801\u88ab\u8c03\u7528\u7684\u4f4d\u7f6e\u5e76\u4f7f\u7528\u6cdb\u578b\u4ee3\u7801\u9488\u5bf9\u5177\u4f53\u7c7b\u578b\u751f\u6210\u4ee3\u7801\u3002 \u8ba9\u6211\u4eec\u770b\u770b\u4e00\u4e2a\u4f7f\u7528\u6807\u51c6\u5e93\u4e2d Option \u679a\u4e3e\u7684\u4f8b\u5b50\uff1a let integer = Some ( 5 ); let float = Some ( 5.0 ); \u5f53 Rust \u7f16\u8bd1\u8fd9\u4e9b\u4ee3\u7801\u7684\u65f6\u5019\uff0c\u5b83\u4f1a\u8fdb\u884c\u5355\u6001\u5316\u3002 \u7f16\u8bd1\u5668\u4f1a\u8bfb\u53d6\u4f20\u9012\u7ed9 Option<T> \u7684\u503c\u5e76\u53d1\u73b0\u6709\u4e24\u79cd Option<T> \uff1a\u4e00\u4e2a\u5bf9\u5e94 i32 \u53e6\u4e00\u4e2a\u5bf9\u5e94 f64 \u3002 \u4e3a\u6b64\uff0c\u5b83\u4f1a\u5c06\u6cdb\u578b\u5b9a\u4e49 Option<T> \u5c55\u5f00\u4e3a Option_i32 \u548c Option_f64 \uff0c\u63a5\u7740\u5c06\u6cdb\u578b\u5b9a\u4e49\u66ff\u6362\u4e3a\u8fd9\u4e24\u4e2a\u5177\u4f53\u7684\u5b9a\u4e49\u3002 \u7f16\u8bd1\u5668\u751f\u6210\u7684\u5355\u6001\u5316\u7248\u672c\u7684\u4ee3\u7801\u770b\u8d77\u6765\u50cf\u8fd9\u6837\uff0c\u5e76\u5305\u542b\u5c06\u6cdb\u578b Option<T> \u66ff\u6362\u4e3a\u7f16\u8bd1\u5668\u521b\u5efa\u7684\u5177\u4f53\u5b9a\u4e49\u540e\u7684\u7528\u4f8b\u4ee3\u7801\uff1a enum Option_i32 { Some ( i32 ), None , } enum Option_f64 { Some ( f64 ), None , } fn main () { let integer = Option_i32 :: Some ( 5 ); let float = Option_f64 :: Some ( 5.0 ); } \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u6cdb\u578b\u6765\u7f16\u5199\u4e0d\u91cd\u590d\u7684\u4ee3\u7801\uff0c \u800c Rust \u5c06\u4f1a\u4e3a\u6bcf\u4e00\u4e2a\u5b9e\u4f8b\u7f16\u8bd1\u5176\u7279\u5b9a\u7c7b\u578b\u7684\u4ee3\u7801 \u3002\u8fd9\u610f\u5473\u7740\u5728\u4f7f\u7528\u6cdb\u578b\u65f6\u6ca1\u6709\u8fd0\u884c\u65f6\u5f00\u9500\uff1b \u5f53\u4ee3\u7801\u8fd0\u884c\uff0c\u5b83\u7684\u6267\u884c\u6548\u7387\u5c31\u8ddf\u597d\u50cf\u624b\u5199\u6bcf\u4e2a\u5177\u4f53\u5b9a\u4e49\u7684\u91cd\u590d\u4ee3\u7801\u4e00\u6837\u3002\u8fd9\u4e2a\u5355\u6001\u5316\u8fc7\u7a0b\u6b63\u662f Rust \u6cdb\u578b\u5728\u8fd0\u884c\u65f6\u6781\u5176\u9ad8\u6548\u7684\u539f\u56e0\u3002","title":"Trait"},{"location":"generics/#trait_2","text":"\u4e00\u4e2a\u7c7b\u578b\u7684\u884c\u4e3a\u7531\u5176\u53ef\u4f9b\u8c03\u7528\u7684\u65b9\u6cd5\u6784\u6210\u3002\u5982\u679c\u53ef\u4ee5\u5bf9\u4e0d\u540c\u7c7b\u578b\u8c03\u7528\u76f8\u540c\u7684\u65b9\u6cd5\u7684\u8bdd\uff0c\u8fd9\u4e9b\u7c7b\u578b\u5c31\u53ef\u4ee5\u5171\u4eab\u76f8\u540c\u7684\u884c\u4e3a\u4e86\u3002 trait \u5b9a\u4e49\u662f\u4e00\u79cd\u5c06\u65b9\u6cd5\u7b7e\u540d\u7ec4\u5408\u8d77\u6765\u7684\u65b9\u6cd5\uff0c\u76ee\u7684\u662f\u5b9a\u4e49\u4e00\u4e2a\u5b9e\u73b0\u67d0\u4e9b\u76ee\u7684\u6240\u5fc5\u9700\u7684\u884c\u4e3a\u7684\u96c6\u5408\u3002 \u4f8b\u5982\uff0c\u8fd9\u91cc\u6709\u591a\u4e2a\u5b58\u653e\u4e86\u4e0d\u540c\u7c7b\u578b\u548c\u5c5e\u6027\u6587\u672c\u7684\u7ed3\u6784\u4f53\uff1a\u7ed3\u6784\u4f53 NewsArticle \u7528\u4e8e\u5b58\u653e\u53d1\u751f\u4e8e\u4e16\u754c\u5404\u5730\u7684\u65b0\u95fb\u6545\u4e8b\uff0c\u800c\u7ed3\u6784\u4f53 Tweet \u6700\u591a\u53ea\u80fd\u5b58\u653e 280 \u4e2a\u5b57\u7b26\u7684\u5185\u5bb9\uff0c\u4ee5\u53ca\u50cf\u662f\u5426\u8f6c\u63a8\u6216\u662f\u5426\u662f\u5bf9\u63a8\u53cb\u7684\u56de\u590d\u8fd9\u6837\u7684\u5143\u6570\u636e\u3002 \u6211\u4eec\u60f3\u8981\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a aggregator \u7684\u591a\u5a92\u4f53\u805a\u5408\u5e93\u7528\u6765\u663e\u793a\u53ef\u80fd\u50a8\u5b58\u5728 NewsArticle \u6216 Tweet \u5b9e\u4f8b\u4e2d\u7684\u6570\u636e\u7684\u603b\u7ed3\u3002\u6bcf\u4e00\u4e2a\u7ed3\u6784\u4f53\u90fd\u9700\u8981\u7684\u884c\u4e3a\u662f\u4ed6\u4eec\u662f\u80fd\u591f\u88ab\u603b\u7ed3\u7684\uff0c\u8fd9\u6837\u7684\u8bdd\u5c31\u53ef\u4ee5\u8c03\u7528\u5b9e\u4f8b\u7684 summarize \u65b9\u6cd5\u6765\u8bf7\u6c42\u603b\u7ed3\u3002\u4e0b\u9762\u793a\u4f8b\u4e2d\u5c55\u793a\u4e86\u4e00\u4e2a\u8868\u73b0\u8fd9\u4e2a\u6982\u5ff5\u7684\u516c\u6709 Summary trait \u7684\u5b9a\u4e49\uff1a // Summary trait \u5b9a\u4e49\uff0c\u5b83\u5305\u542b\u7531 summarize \u65b9\u6cd5\u63d0\u4f9b\u7684\u884c\u4e3a // \u4f7f\u7528 trait \u5173\u952e\u5b57\u6765\u58f0\u660e\u4e00\u4e2a trait\uff0c\u540e\u9762\u662f trait \u7684\u540d\u5b57 // \u58f0\u660e trait \u4e3a pub \u4ee5\u4fbf\u4f9d\u8d56\u8fd9\u4e2a crate \u7684 crate \u4e5f\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e2a trait\uff0c pub trait Summary { // \u5728\u5927\u62ec\u53f7\u4e2d\u58f0\u660e\u63cf\u8ff0\u5b9e\u73b0\u8fd9\u4e2a trait \u7684\u7c7b\u578b\u6240\u9700\u8981\u7684\u884c\u4e3a\u7684\u65b9\u6cd5\u7b7e\u540d\uff0c fn summarize ( & self ) -> String ; } \u5728\u65b9\u6cd5\u7b7e\u540d\u540e\u8ddf\u5206\u53f7\uff0c\u800c\u4e0d\u662f\u5728\u5927\u62ec\u53f7\u4e2d\u63d0\u4f9b\u5176\u5b9e\u73b0\u3002 \u63a5\u7740\u6bcf\u4e00\u4e2a\u5b9e\u73b0\u8fd9\u4e2a trait \u7684\u7c7b\u578b\u90fd\u9700\u8981\u63d0\u4f9b\u5176\u81ea\u5b9a\u4e49\u884c\u4e3a\u7684\u65b9\u6cd5\u4f53\uff0c\u7f16\u8bd1\u5668\u4e5f\u4f1a\u786e\u4fdd\u4efb\u4f55\u5b9e\u73b0 Summary trait \u7684\u7c7b\u578b\u90fd\u62e5\u6709\u4e0e\u8fd9\u4e2a\u7b7e\u540d\u7684\u5b9a\u4e49\u5b8c\u5168\u4e00\u81f4\u7684 summarize \u65b9\u6cd5\u3002 trait \u4f53\u4e2d\u53ef\u4ee5\u6709\u591a\u4e2a\u65b9\u6cd5\uff1a \u4e00\u884c\u4e00\u4e2a\u65b9\u6cd5\u7b7e\u540d\u4e14\u90fd\u4ee5\u5206\u53f7\u7ed3\u5c3e\u3002","title":"\u5b9a\u4e49Trait"},{"location":"generics/#trait_3","text":"\u73b0\u5728\u6211\u4eec\u5b9a\u4e49\u4e86 Summary trait \u7684\u7b7e\u540d\uff0c\u63a5\u7740\u5c31\u53ef\u4ee5\u5728\u591a\u5a92\u4f53\u805a\u5408\u5e93\u4e2d\u5b9e\u73b0\u8fd9\u4e2a\u7c7b\u578b\u4e86\u3002 pub struct NewsArticle { pub headline : String , pub location : String , pub author : String , pub content : String , } // \u5c55\u793a\u4e86 NewsArticle \u7ed3\u6784\u4f53\u4e0a Summary trait \u7684\u4e00\u4e2a\u5b9e\u73b0 impl Summary for NewsArticle { // \u5b83\u4f7f\u7528\u6807\u9898\u3001\u4f5c\u8005\u548c\u521b\u5efa\u7684\u4f4d\u7f6e\u4f5c\u4e3a summarize \u7684\u8fd4\u56de\u503c\u3002 fn summarize ( & self ) -> String { format! ( \"{}, by {} ({})\" , self . headline , self . author , self . location ) } } pub struct Tweet { pub username : String , pub content : String , pub reply : bool , pub retweet : bool , } impl Summary for Tweet { // \u5bf9\u4e8e Tweet \u7ed3\u6784\u4f53\uff0c\u9009\u62e9\u5c06 summarize \u5b9a\u4e49\u4e3a\u7528\u6237\u540d\u540e\u8ddf\u63a8\u6587\u7684\u5168\u90e8\u6587\u672c\u4f5c\u4e3a\u8fd4\u56de\u503c\uff0c\u5e76\u5047\u8bbe\u63a8\u6587\u5185\u5bb9\u5df2\u7ecf\u88ab\u9650\u5236\u4e3a 280 \u5b57\u7b26\u4ee5\u5185\u3002 fn summarize ( & self ) -> String { format! ( \"{}: {}\" , self . username , self . content ) } } \u5728\u7c7b\u578b\u4e0a\u5b9e\u73b0 trait \u7c7b\u4f3c\u4e8e\u5b9e\u73b0\u4e0e trait \u65e0\u5173\u7684\u65b9\u6cd5\u3002\u533a\u522b\u5728\u4e8e impl \u5173\u952e\u5b57\u4e4b\u540e\uff0c\u6211\u4eec\u63d0\u4f9b\u9700\u8981\u5b9e\u73b0 trait \u7684\u540d\u79f0\uff0c\u63a5\u7740\u662f for \u548c\u9700\u8981\u5b9e\u73b0 trait \u7684\u7c7b\u578b\u7684\u540d\u79f0\u3002 \u5728 impl \u5757\u4e2d\uff0c\u4f7f\u7528 trait \u5b9a\u4e49\u4e2d\u7684\u65b9\u6cd5\u7b7e\u540d\uff0c\u4e0d\u8fc7\u4e0d\u518d\u540e\u8ddf\u5206\u53f7\uff0c\u800c\u662f\u9700\u8981\u5728\u5927\u62ec\u53f7\u4e2d\u7f16\u5199\u51fd\u6570\u4f53\u6765\u4e3a\u7279\u5b9a\u7c7b\u578b\u5b9e\u73b0 trait \u65b9\u6cd5\u6240\u62e5\u6709\u7684\u884c\u4e3a\u3002 \u73b0\u5728\u5e93\u5728 NewsArticle \u548c Tweet \u4e0a\u5b9e\u73b0\u4e86 Summary trait \uff0c crate \u7684\u7528\u6237\u53ef\u4ee5\u50cf\u8c03\u7528\u5e38\u89c4\u65b9\u6cd5\u4e00\u6837\u8c03\u7528 NewsArticle \u548c Tweet \u5b9e\u4f8b\u7684 trait \u65b9\u6cd5\u4e86\u3002 \u552f\u4e00\u7684\u533a\u522b\u662f trait \u5fc5\u987b\u548c\u7c7b\u578b\u4e00\u8d77\u5f15\u5165\u4f5c\u7528\u57df\u4ee5\u4fbf\u4f7f\u7528\u989d\u5916\u7684 trait \u65b9\u6cd5\u3002\u8fd9\u662f\u4e00\u4e2a\u4e8c\u8fdb\u5236 crate \u5982\u4f55\u5229\u7528 aggregator \u5e93 crate \u7684\u4f8b\u5b50\uff1a use aggregator :: { Summary , Tweet }; fn main () { let tweet = Tweet { username : String :: from ( \"horse_ebooks\" ), content : String :: from ( \"of course, as you probably already know, people\" , ), reply : false , retweet : false , }; println! ( \"1 new tweet: {}\" , tweet . summarize ()); } \u5176\u4ed6\u4f9d\u8d56 aggregator crate \u7684 crate \u4e5f\u53ef\u4ee5\u5c06 Summary \u5f15\u5165\u4f5c\u7528\u57df\u4ee5\u4fbf\u4e3a\u5176\u81ea\u5df1\u7684\u7c7b\u578b\u5b9e\u73b0\u8be5 trait \u3002 \u5b9e\u73b0 trait \u65f6\u9700\u8981\u6ce8\u610f\u7684\u4e00\u4e2a\u9650\u5236\u662f\uff0c\u53ea\u6709\u5f53\u81f3\u5c11\u4e00\u4e2a trait \u6216\u8005\u8981\u5b9e\u73b0 trait \u7684\u7c7b\u578b\u4f4d\u4e8e crate \u7684\u672c\u5730\u4f5c\u7528\u57df\u65f6\uff0c\u624d\u80fd\u4e3a\u8be5\u7c7b\u578b\u5b9e\u73b0 trait \u3002 \u4f8b\u5982\uff0c\u53ef\u4ee5\u4e3a aggregator crate \u7684\u81ea\u5b9a\u4e49\u7c7b\u578b Tweet \u5b9e\u73b0\u5982\u6807\u51c6\u5e93\u4e2d\u7684 Display trait\uff0c\u8fd9\u662f\u56e0\u4e3a Tweet \u7c7b\u578b\u4f4d\u4e8e aggregator crate \u672c\u5730\u7684\u4f5c\u7528\u57df\u4e2d\u3002\u7c7b\u4f3c\u5730\uff0c\u4e5f\u53ef\u4ee5\u5728 aggregator crate \u4e2d\u4e3a Vec<T> \u5b9e\u73b0 Summary\uff0c\u8fd9\u662f\u56e0\u4e3a Summary trait \u4f4d\u4e8e aggregator crate \u672c\u5730\u4f5c\u7528\u57df\u4e2d\u3002 \u4f46\u662f\u4e0d\u80fd\u4e3a\u5916\u90e8\u7c7b\u578b\u5b9e\u73b0\u5916\u90e8 trait \u3002 \u4f8b\u5982\uff0c\u4e0d\u80fd\u5728 aggregator crate \u4e2d\u4e3a Vec<T> \u5b9e\u73b0 Display trait\u3002\u8fd9\u662f\u56e0\u4e3a Display \u548c Vec<T> \u90fd\u5b9a\u4e49\u4e8e\u6807\u51c6\u5e93\u4e2d\uff0c\u5b83\u4eec\u5e76\u4e0d\u4f4d\u4e8e aggregator crate \u672c\u5730\u4f5c\u7528\u57df\u4e2d\u3002\u8fd9\u4e2a\u9650\u5236\u662f\u88ab\u79f0\u4e3a \u76f8\u5e72\u6027 \uff08coherence\uff09 \u7684\u7a0b\u5e8f\u5c5e\u6027\u7684\u4e00\u90e8\u5206\uff0c\u6216\u8005\u66f4\u5177\u4f53\u7684\u8bf4\u662f \u5b64\u513f\u89c4\u5219 \uff08orphan rule\uff09\uff0c\u5176\u5f97\u540d\u4e8e\u4e0d\u5b58\u5728\u7236\u7c7b\u578b\u3002 \u8fd9\u6761\u89c4\u5219\u786e\u4fdd\u4e86\u5176\u4ed6\u4eba\u7f16\u5199\u7684\u4ee3\u7801\u4e0d\u4f1a\u7834\u574f\u4f60\u4ee3\u7801\uff0c\u53cd\u4e4b\u4ea6\u7136\u3002 \u6ca1\u6709\u8fd9\u6761\u89c4\u5219\u7684\u8bdd\uff0c\u4e24\u4e2a crate \u53ef\u4ee5\u5206\u522b\u5bf9\u76f8\u540c\u7c7b\u578b\u5b9e\u73b0\u76f8\u540c\u7684 trait\uff0c\u800c Rust \u5c06\u65e0\u4ece\u5f97\u77e5\u5e94\u8be5\u4f7f\u7528\u54ea\u4e00\u4e2a\u5b9e\u73b0\u3002","title":"\u4e3a\u7c7b\u578b\u5b9e\u73b0Trait"},{"location":"generics/#_7","text":"\u6709\u65f6\u4e3a trait \u4e2d\u7684\u67d0\u4e9b\u6216\u5168\u90e8\u65b9\u6cd5\u63d0\u4f9b\u9ed8\u8ba4\u7684\u884c\u4e3a\uff0c\u800c\u4e0d\u662f\u5728\u6bcf\u4e2a\u7c7b\u578b\u7684\u6bcf\u4e2a\u5b9e\u73b0\u4e2d\u90fd\u5b9a\u4e49\u81ea\u5df1\u7684\u884c\u4e3a\u662f\u5f88\u6709\u7528\u7684\u3002\u8fd9\u6837\u5f53\u4e3a\u67d0\u4e2a\u7279\u5b9a\u7c7b\u578b\u5b9e\u73b0 trait \u65f6\uff0c\u53ef\u4ee5\u9009\u62e9\u4fdd\u7559\u6216\u91cd\u8f7d\u6bcf\u4e2a\u65b9\u6cd5\u7684\u9ed8\u8ba4\u884c\u4e3a\u3002 \u4e0b\u9762\u793a\u4f8b\u4e2d\u5c55\u793a\u4e86\u5982\u4f55\u4e3a Summary trait \u7684 summarize \u65b9\u6cd5\u6307\u5b9a\u4e00\u4e2a\u9ed8\u8ba4\u7684\u5b57\u7b26\u4e32\u503c\uff0c\u800c\u4e0d\u662f\u53ea\u662f\u5b9a\u4e49\u65b9\u6cd5\u7b7e\u540d\uff1a // Summary trait \u7684\u5b9a\u4e49\uff0c\u5e26\u6709\u4e00\u4e2a summarize \u65b9\u6cd5\u7684\u9ed8\u8ba4\u5b9e\u73b0 pub trait Summary { fn summarize ( & self ) -> String { String :: from ( \"(Read more...)\" ) } } \u5982\u679c\u60f3\u8981\u5bf9 NewsArticle \u5b9e\u4f8b\u4f7f\u7528\u8fd9\u4e2a\u9ed8\u8ba4\u5b9e\u73b0\uff0c\u800c\u4e0d\u662f\u5b9a\u4e49\u4e00\u4e2a\u81ea\u5df1\u7684\u5b9e\u73b0\uff0c\u5219\u53ef\u4ee5\u901a\u8fc7 impl Summary for NewsArticle {} \u6307\u5b9a\u4e00\u4e2a\u7a7a\u7684 impl \u5757\u3002 \u867d\u7136\u6211\u4eec\u4e0d\u518d\u76f4\u63a5\u4e3a NewsArticle \u5b9a\u4e49 summarize \u65b9\u6cd5\u4e86\uff0c\u4f46\u662f\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u4e2a\u9ed8\u8ba4\u5b9e\u73b0\u5e76\u4e14\u6307\u5b9a NewsArticle \u5b9e\u73b0 Summary trait \u3002\u56e0\u6b64\uff0c\u6211\u4eec\u4ecd\u7136\u53ef\u4ee5\u5bf9 NewsArticle \u5b9e\u4f8b\u8c03\u7528 summarize \u65b9\u6cd5\uff0c\u5982\u4e0b\u6240\u793a\uff1a let article = NewsArticle { headline : String :: from ( \"Penguins win the Stanley Cup Championship!\" ), location : String :: from ( \"Pittsburgh, PA, USA\" ), author : String :: from ( \"Iceburgh\" ), content : String :: from ( \"The Pittsburgh Penguins once again are the best \\ hockey team in the NHL.\" , ), }; println! ( \"New article available! {}\" , article . summarize ()); // \u8fd9\u6bb5\u4ee3\u7801\u4f1a\u6253\u5370 New article available! (Read more...)\u3002 \u4e3a summarize \u521b\u5efa\u9ed8\u8ba4\u5b9e\u73b0\u5e76\u4e0d\u8981\u6c42\u5bf9\u793a\u4f8b\u4e2d Tweet \u4e0a\u7684 Summary \u5b9e\u73b0\u505a\u4efb\u4f55\u6539\u53d8\u3002\u5176\u539f\u56e0\u662f\u91cd\u8f7d\u4e00\u4e2a\u9ed8\u8ba4\u5b9e\u73b0\u7684\u8bed\u6cd5\u4e0e\u5b9e\u73b0\u6ca1\u6709\u9ed8\u8ba4\u5b9e\u73b0\u7684 trait \u65b9\u6cd5\u7684\u8bed\u6cd5\u4e00\u6837\u3002 \u9ed8\u8ba4\u5b9e\u73b0\u5141\u8bb8\u8c03\u7528\u76f8\u540c trait \u4e2d\u7684\u5176\u4ed6\u65b9\u6cd5\uff0c\u54ea\u6015\u8fd9\u4e9b\u65b9\u6cd5\u6ca1\u6709\u9ed8\u8ba4\u5b9e\u73b0\u3002\u5982\u6b64\uff0c trait \u53ef\u4ee5\u63d0\u4f9b\u5f88\u591a\u6709\u7528\u7684\u529f\u80fd\u800c\u53ea\u9700\u8981\u5b9e\u73b0\u6307\u5b9a\u4e00\u5c0f\u90e8\u5206\u5185\u5bb9\u3002 \u4f8b\u5982\uff0c\u6211\u4eec\u53ef\u4ee5\u5b9a\u4e49 Summary trait \uff0c\u4f7f\u5176\u5177\u6709\u4e00\u4e2a\u9700\u8981\u5b9e\u73b0\u7684 summarize_author \u65b9\u6cd5\uff0c\u7136\u540e\u5b9a\u4e49\u4e00\u4e2a summarize \u65b9\u6cd5\uff0c\u6b64\u65b9\u6cd5\u7684\u9ed8\u8ba4\u5b9e\u73b0\u8c03\u7528 summarize_author \u65b9\u6cd5\uff1a pub trait Summary { fn summarize_author ( & self ) -> String ; fn summarize ( & self ) -> String { format! ( \"(Read more from {}...)\" , self . summarize_author ()) } } \u4e3a\u4e86\u4f7f\u7528\u8fd9\u4e2a\u7248\u672c\u7684 Summary \uff0c\u53ea\u9700\u5728\u5b9e\u73b0 trait \u65f6\u5b9a\u4e49 summarize_author \u5373\u53ef\uff1a impl Summary for Tweet { fn summarize_author ( & self ) -> String { format! ( \"@{}\" , self . username ) } } \u4e00\u65e6\u5b9a\u4e49\u4e86 summarize_author \uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5bf9 Tweet \u7ed3\u6784\u4f53\u7684\u5b9e\u4f8b\u8c03\u7528 summarize \u4e86\uff0c\u800c summarize \u7684\u9ed8\u8ba4\u5b9e\u73b0\u4f1a\u8c03\u7528\u6211\u4eec\u63d0\u4f9b\u7684 summarize_author \u5b9a\u4e49\u3002 \u56e0\u4e3a\u5b9e\u73b0\u4e86 summarize_author \uff0c Summary trait \u5c31\u63d0\u4f9b\u4e86 summarize \u65b9\u6cd5\u7684\u529f\u80fd\uff0c\u4e14\u65e0\u9700\u7f16\u5199\u66f4\u591a\u7684\u4ee3\u7801\u3002 let tweet = Tweet { username : String :: from ( \"horse_ebooks\" ), content : String :: from ( \"of course, as you probably already know, people\" , ), reply : false , retweet : false , }; println! ( \"1 new tweet: {}\" , tweet . summarize ()); // \u8fd9\u4f1a\u6253\u5370\u51fa 1 new tweet: (Read more from @horse_ebooks...)\u3002 \u6ce8\u610f\u65e0\u6cd5\u4ece\u76f8\u540c\u65b9\u6cd5\u7684\u91cd\u8f7d\u5b9e\u73b0\u4e2d\u8c03\u7528\u9ed8\u8ba4\u65b9\u6cd5\u3002","title":"\u9ed8\u8ba4\u5b9e\u73b0"},{"location":"generics/#trait_4","text":"\u77e5\u9053\u4e86\u5982\u4f55\u5b9a\u4e49 trait \u548c\u5728\u7c7b\u578b\u4e0a\u5b9e\u73b0\u8fd9\u4e9b trait \u4e4b\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u63a2\u7d22\u4e00\u4e0b\u5982\u4f55\u4f7f\u7528 trait \u6765\u63a5\u53d7\u591a\u79cd\u4e0d\u540c\u7c7b\u578b\u7684\u53c2\u6570\u3002 \u4f8b\u5982\u5728\u793a\u4f8b\u4e2d\u4e3a NewsArticle \u548c Tweet \u7c7b\u578b\u5b9e\u73b0\u4e86 Summary trait \u3002\u6211\u4eec\u53ef\u4ee5\u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570 notify \u6765\u8c03\u7528\u5176\u53c2\u6570 item \u4e0a\u7684 summarize \u65b9\u6cd5\uff0c\u8be5\u53c2\u6570\u662f\u5b9e\u73b0\u4e86 Summary trait \u7684\u67d0\u79cd\u7c7b\u578b\u3002\u4e3a\u6b64\u53ef\u4ee5\u4f7f\u7528 impl Trait \u8bed\u6cd5\uff0c\u50cf\u8fd9\u6837\uff1a pub fn notify ( item : & impl Summary ) { println! ( \"Breaking news! {}\" , item . summarize ()); } \u5bf9\u4e8e item \u53c2\u6570\uff0c\u6211\u4eec\u6307\u5b9a\u4e86 impl \u5173\u952e\u5b57\u548c trait \u540d\u79f0\uff0c\u800c\u4e0d\u662f\u5177\u4f53\u7684\u7c7b\u578b\u3002\u8be5\u53c2\u6570\u652f\u6301\u4efb\u4f55\u5b9e\u73b0\u4e86\u6307\u5b9a trait \u7684\u7c7b\u578b\u3002 \u5728 notify \u51fd\u6570\u4f53\u4e2d\uff0c\u53ef\u4ee5\u8c03\u7528\u4efb\u4f55\u6765\u81ea Summary trait \u7684\u65b9\u6cd5\uff0c\u6bd4\u5982 summarize \u3002\u6211\u4eec\u53ef\u4ee5\u4f20\u9012\u4efb\u4f55 NewsArticle \u6216 Tweet \u7684\u5b9e\u4f8b\u6765\u8c03\u7528 notify \u3002\u4efb\u4f55\u7528\u5176\u5b83\u5982 String \u6216 i32 \u7684\u7c7b\u578b\u8c03\u7528\u8be5\u51fd\u6570\u7684\u4ee3\u7801\u90fd\u4e0d\u80fd\u7f16\u8bd1\uff0c\u56e0\u4e3a\u5b83\u4eec\u6ca1\u6709\u5b9e\u73b0 Summary \u3002","title":"trait\u4f5c\u4e3a\u53c2\u6570"},{"location":"generics/#trait-bound","text":"impl Trait \u8bed\u6cd5\u9002\u7528\u4e8e\u76f4\u89c2\u7684\u4f8b\u5b50\uff0c\u5b83\u5b9e\u9645\u4e0a\u662f\u4e00\u79cd\u8f83\u957f\u5f62\u5f0f\u8bed\u6cd5\u7684\u8bed\u6cd5\u7cd6\u3002\u6211\u4eec\u79f0\u4e3a trait bound \uff0c\u5b83\u770b\u8d77\u6765\u50cf\uff1a pub fn notify < T : Summary > ( item : & T ) { println! ( \"Breaking news! {}\" , item . summarize ()); } \u8fd9\u4e0e\u4e4b\u524d\u7684\u4f8b\u5b50\u76f8\u540c\uff0c\u4e0d\u8fc7\u7a0d\u5fae\u5197\u957f\u4e86\u4e00\u4e9b\u3002 trait bound \u4e0e\u6cdb\u578b\u53c2\u6570\u58f0\u660e\u5728\u4e00\u8d77\uff0c\u4f4d\u4e8e\u5c16\u62ec\u53f7\u4e2d\u7684\u5192\u53f7\u540e\u9762\u3002 impl Trait \u5f88\u65b9\u4fbf\uff0c\u9002\u7528\u4e8e\u77ed\u5c0f\u7684\u4f8b\u5b50\u3002 trait bound \u5219\u9002\u7528\u4e8e\u66f4\u590d\u6742\u7684\u573a\u666f\u3002\u4f8b\u5982\uff0c\u53ef\u4ee5\u83b7\u53d6\u4e24\u4e2a\u5b9e\u73b0\u4e86 Summary \u7684\u53c2\u6570\u3002 \u4f7f\u7528 impl Trait \u7684\u8bed\u6cd5\u770b\u8d77\u6765\u50cf\u8fd9\u6837\uff1a pub fn notify ( item1 : & impl Summary , item2 : & impl Summary ) { \u8fd9\u9002\u7528\u4e8e item1 \u548c item2 \u5141\u8bb8\u662f\u4e0d\u540c\u7c7b\u578b\u7684\u60c5\u51b5\uff08\u53ea\u8981\u5b83\u4eec\u90fd\u5b9e\u73b0\u4e86 Summary \uff09\u3002\u4e0d\u8fc7\u5982\u679c\u4f60\u5e0c\u671b\u5f3a\u5236\u5b83\u4eec\u90fd\u662f\u76f8\u540c\u7c7b\u578b\u5462\uff1f\u8fd9\u53ea\u6709\u5728\u4f7f\u7528 trait bound \u65f6\u624d\u6709\u53ef\u80fd\uff1a pub fn notify < T : Summary > ( item1 : & T , item2 : & T ) { \u6cdb\u578b T \u88ab\u6307\u5b9a\u4e3a item1 \u548c item2 \u7684\u53c2\u6570\u9650\u5236\uff0c\u5982\u6b64\u4f20\u9012\u7ed9\u53c2\u6570 item1 \u548c item2 \u503c\u7684\u5177\u4f53\u7c7b\u578b\u5fc5\u987b\u4e00\u81f4\u3002","title":"Trait Bound\u8bed\u6cd5"},{"location":"generics/#trait-bound_1","text":"\u5982\u679c notify \u9700\u8981\u663e\u793a item \u7684\u683c\u5f0f\u5316\u5f62\u5f0f\uff0c\u540c\u65f6\u4e5f\u8981\u4f7f\u7528 summarize \u65b9\u6cd5\uff0c\u90a3\u4e48 item \u5c31\u9700\u8981\u540c\u65f6\u5b9e\u73b0\u4e24\u4e2a\u4e0d\u540c\u7684 trait\uff1aDisplay \u548c Summary \u3002\u8fd9\u53ef\u4ee5\u901a\u8fc7 + \u8bed\u6cd5\u5b9e\u73b0\uff1a pub fn notify ( item : & ( impl Summary + Display )) { + \u8bed\u6cd5\u4e5f\u9002\u7528\u4e8e\u6cdb\u578b\u7684 trait bound \uff1a pub fn notify < T : Summary + Display > ( item : & T ) { \u901a\u8fc7\u6307\u5b9a\u8fd9\u4e24\u4e2a trait bound \uff0c notify \u7684\u51fd\u6570\u4f53\u53ef\u4ee5\u8c03\u7528 summarize \u5e76\u4f7f\u7528 {} \u6765\u683c\u5f0f\u5316 item \u3002","title":"\u6307\u5b9a\u591a\u4e2atrait bound(+)"},{"location":"generics/#wheretrait-bound","text":"\u7136\u800c\uff0c\u4f7f\u7528\u8fc7\u591a\u7684 trait bound \u4e5f\u6709\u7f3a\u70b9\u3002\u6bcf\u4e2a\u6cdb\u578b\u6709\u5176\u81ea\u5df1\u7684 trait bound \uff0c\u6240\u4ee5\u6709\u591a\u4e2a\u6cdb\u578b\u53c2\u6570\u7684\u51fd\u6570\u5728\u540d\u79f0\u548c\u53c2\u6570\u5217\u8868\u4e4b\u95f4\u4f1a\u6709\u5f88\u957f\u7684 trait bound \u4fe1\u606f\uff0c\u8fd9\u4f7f\u5f97\u51fd\u6570\u7b7e\u540d\u96be\u4ee5\u9605\u8bfb\u3002\u4e3a\u6b64\uff0cRust \u6709\u53e6\u4e00\u4e2a\u5728\u51fd\u6570\u7b7e\u540d\u4e4b\u540e\u7684 where \u4ece\u53e5\u4e2d\u6307\u5b9a trait bound \u7684\u8bed\u6cd5\u3002\u6240\u4ee5\u9664\u4e86\u8fd9\u4e48\u5199\uff1a fn some_function < T : Display + Clone , U : Clone + Debug > ( t : & T , u : & U ) -> i32 { \u8fd8\u53ef\u4ee5\u50cf\u8fd9\u6837\u4f7f\u7528 where \u4ece\u53e5\uff1a fn some_function < T , U > ( t : & T , u : & U ) -> i32 where T : Display + Clone , U : Clone + Debug { \u8fd9\u4e2a\u51fd\u6570\u7b7e\u540d\u5c31\u663e\u5f97\u4e0d\u90a3\u4e48\u6742\u4e71\uff0c\u51fd\u6570\u540d\u3001\u53c2\u6570\u5217\u8868\u548c\u8fd4\u56de\u503c\u7c7b\u578b\u90fd\u79bb\u5f97\u5f88\u8fd1\uff0c\u770b\u8d77\u6765\u8ddf\u6ca1\u6709\u90a3\u4e48\u591a trait bounds \u7684\u51fd\u6570\u5f88\u50cf\u3002","title":"where\u7b80\u5316trait bound"},{"location":"generics/#trait_5","text":"\u4e5f\u53ef\u4ee5\u5728\u8fd4\u56de\u503c\u4e2d\u4f7f\u7528 impl Trait \u8bed\u6cd5\uff0c\u6765\u8fd4\u56de\u5b9e\u73b0\u4e86\u67d0\u4e2a trait \u7684\u7c7b\u578b\uff1a fn returns_summarizable () -> impl Summary { Tweet { username : String :: from ( \"horse_ebooks\" ), content : String :: from ( \"of course, as you probably already know, people\" , ), reply : false , retweet : false , } } \u901a\u8fc7\u4f7f\u7528 impl Summary \u4f5c\u4e3a\u8fd4\u56de\u503c\u7c7b\u578b\uff0c\u6211\u4eec\u6307\u5b9a\u4e86 returns_summarizable \u51fd\u6570\u8fd4\u56de\u67d0\u4e2a\u5b9e\u73b0\u4e86 Summary trait \u7684\u7c7b\u578b\uff0c\u4f46\u662f\u4e0d\u786e\u5b9a\u5176\u5177\u4f53\u7684\u7c7b\u578b\u3002\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d returns_summarizable \u8fd4\u56de\u4e86\u4e00\u4e2a Tweet \uff0c\u4e0d\u8fc7\u8c03\u7528\u65b9\u5e76\u4e0d\u77e5\u60c5\u3002 \u8fd4\u56de\u4e00\u4e2a\u53ea\u662f\u6307\u5b9a\u4e86\u9700\u8981\u5b9e\u73b0\u7684 trait \u7684\u7c7b\u578b\u7684\u80fd\u529b\u5728\u95ed\u5305\u548c\u8fed\u4ee3\u5668\u573a\u666f\u5341\u5206\u7684\u6709\u7528\uff0c\u7b2c\u5341\u4e09\u7ae0\u4f1a\u4ecb\u7ecd\u5b83\u4eec\u3002\u95ed\u5305\u548c\u8fed\u4ee3\u5668\u521b\u5efa\u53ea\u6709\u7f16\u8bd1\u5668\u77e5\u9053\u7684\u7c7b\u578b\uff0c\u6216\u8005\u662f\u975e\u5e38\u975e\u5e38\u957f\u7684\u7c7b\u578b\u3002impl Trait \u5141\u8bb8\u4f60\u7b80\u5355\u7684\u6307\u5b9a\u51fd\u6570\u8fd4\u56de\u4e00\u4e2a Iterator \u800c\u65e0\u9700\u5199\u51fa\u5b9e\u9645\u7684\u5197\u957f\u7684\u7c7b\u578b\u3002 \u4e0d\u8fc7\u8fd9\u53ea\u9002\u7528\u4e8e\u8fd4\u56de\u5355\u4e00\u7c7b\u578b\u7684\u60c5\u51b5\u3002\u4f8b\u5982\uff0c\u8fd9\u6bb5\u4ee3\u7801\u7684\u8fd4\u56de\u503c\u7c7b\u578b\u6307\u5b9a\u4e3a\u8fd4\u56de impl Summary \uff0c\u4f46\u662f\u8fd4\u56de\u4e86 NewsArticle \u6216 Tweet \u5c31\u884c\u4e0d\u901a\uff1a fn returns_summarizable ( switch : bool ) -> impl Summary { if switch { NewsArticle { headline : String :: from ( \"Penguins win the Stanley Cup Championship!\" , ), location : String :: from ( \"Pittsburgh, PA, USA\" ), author : String :: from ( \"Iceburgh\" ), content : String :: from ( \"The Pittsburgh Penguins once again are the best \\ hockey team in the NHL.\" , ), } } else { Tweet { username : String :: from ( \"horse_ebooks\" ), content : String :: from ( \"of course, as you probably already know, people\" , ), reply : false , retweet : false , } } } \u8fd9\u91cc\u5c1d\u8bd5\u8fd4\u56de NewsArticle \u6216 Tweet \u3002\u8fd9\u4e0d\u80fd\u7f16\u8bd1\uff0c\u56e0\u4e3a impl Trait \u5de5\u4f5c\u65b9\u5f0f\u7684\u9650\u5236\u3002\u7b2c\u5341\u4e03\u7ae0\u7684 \u201c \u4e3a\u4f7f\u7528\u4e0d\u540c\u7c7b\u578b\u7684\u503c\u800c\u8bbe\u8ba1\u7684 trait \u5bf9\u8c61 \u201d \u90e8\u5206\u4f1a\u4ecb\u7ecd\u5982\u4f55\u7f16\u5199\u8fd9\u6837\u4e00\u4e2a\u51fd\u6570\u3002","title":"\u8fd4\u56de\u5b9e\u73b0\u4e86 trait \u7684\u7c7b\u578b"},{"location":"generics/#trait-bounds-largest","text":"\u73b0\u5728\u4f60\u77e5\u9053\u4e86\u5982\u4f55\u4f7f\u7528\u6cdb\u578b\u53c2\u6570 trait bound \u6765\u6307\u5b9a\u6240\u9700\u7684\u884c\u4e3a\u3002\u8ba9\u6211\u4eec\u4fee\u590d\u4f7f\u7528\u6cdb\u578b\u7c7b\u578b\u53c2\u6570\u7684 largest \u51fd\u6570\u5b9a\u4e49\uff01\u56de\u987e\u4e00\u4e0b\uff0c\u6700\u540e\u5c1d\u8bd5\u7f16\u8bd1\u4ee3\u7801\u65f6\u51fa\u73b0\u7684\u9519\u8bef\u662f\uff1a $ cargo run Compiling chapter10 v0 . 1.0 ( file : ///projects/chapter10) error [ E0369 ] : binary operation ` > ` cannot be applied to type ` T ` - -> src / main . rs : 5 : 17 | 5 | if item > largest { | ---- ^ ------- T | | | T | help : consider restricting type parameter ` T ` | 1 | fn largest < T : std :: cmp :: PartialOrd > ( list : & [ T ]) -> T { | ++++++++++++++++++++++ For more information about this error , try ` rustc -- explain E0369 ` . error : could not compile ` chapter10 ` due to previous error \u5728 largest \u51fd\u6570\u4f53\u4e2d\u6211\u4eec\u60f3\u8981\u4f7f\u7528\u5927\u4e8e\u8fd0\u7b97\u7b26 (>) \u6bd4\u8f83\u4e24\u4e2a T \u7c7b\u578b\u7684\u503c\u3002 \u8fd9\u4e2a\u8fd0\u7b97\u7b26\u88ab\u5b9a\u4e49\u4e3a\u6807\u51c6\u5e93\u4e2d trait std::cmp::PartialOrd \u7684\u4e00\u4e2a\u9ed8\u8ba4\u65b9\u6cd5\u3002 \u6240\u4ee5\u9700\u8981\u5728 T \u7684 trait bound \u4e2d\u6307\u5b9a PartialOrd \uff0c\u8fd9\u6837 largest \u51fd\u6570\u53ef\u4ee5\u7528\u4e8e\u4efb\u4f55\u53ef\u4ee5\u6bd4\u8f83\u5927\u5c0f\u7684\u7c7b\u578b\u7684 slice \u3002 \u56e0\u4e3a PartialOrd \u4f4d\u4e8e prelude \u4e2d\u6240\u4ee5\u5e76\u4e0d\u9700\u8981\u624b\u52a8\u5c06\u5176\u5f15\u5165\u4f5c\u7528\u57df\u3002\u5c06 largest \u7684\u7b7e\u540d\u4fee\u6539\u4e3a\u5982\u4e0b\uff1a fn largest < T : PartialOrd > ( list : & [ T ]) -> T { \u4f46\u662f\u5982\u679c\u7f16\u8bd1\u4ee3\u7801\u7684\u8bdd\uff0c\u4f1a\u51fa\u73b0\u4e00\u4e9b\u4e0d\u540c\u7684\u9519\u8bef\uff1a $ cargo run Compiling chapter10 v0 . 1.0 ( file : ///projects/chapter10) error [ E0508 ] : cannot move out of type ` [ T ] ` , a non - copy slice - -> src / main . rs : 2 : 23 | 2 | let mut largest = list [ 0 ]; | ^^^^^^^ | | | cannot move out of here | move occurs because ` list [ _ ] ` has type ` T ` , which does not implement the ` Copy ` trait | help : consider borrowing here : ` & list [ 0 ] ` error [ E0507 ] : cannot move out of a shared reference - -> src / main . rs : 4 : 18 | 4 | for & item in list { | ----- ^^^^ | || | | data moved here | | move occurs because ` item ` has type ` T ` , which does not implement the ` Copy ` trait | help : consider removing the ` & ` : ` item ` Some errors have detailed explanations : E0507 , E0508 . For more information about an error , try ` rustc -- explain E0507 ` . error : could not compile ` chapter10 ` due to 2 previous errors \u9519\u8bef\u7684\u6838\u5fc3\u662f cannot move out of type [T], a non-copy slice \uff0c\u5bf9\u4e8e\u975e\u6cdb\u578b\u7248\u672c\u7684 largest \u51fd\u6570\uff0c\u6211\u4eec\u53ea\u5c1d\u8bd5\u4e86\u5bfb\u627e\u6700\u5927\u7684 i32 \u548c char \u3002 \u6b63\u5982\u7b2c\u56db\u7ae0 \u201c \u53ea\u5728\u6808\u4e0a\u7684\u6570\u636e\uff1a\u62f7\u8d1d \u201d \u90e8\u5206\u8ba8\u8bba\u8fc7\u7684\uff0c \u50cf i32 \u548c char \u8fd9\u6837\u7684\u7c7b\u578b\u662f\u5df2\u77e5\u5927\u5c0f\u7684\u5e76\u53ef\u4ee5\u50a8\u5b58\u5728\u6808\u4e0a\uff0c\u6240\u4ee5\u4ed6\u4eec\u5b9e\u73b0\u4e86 Copy trait \u3002 \u5f53\u6211\u4eec\u5c06 largest \u51fd\u6570\u6539\u6210\u4f7f\u7528\u6cdb\u578b\u540e\uff0c\u73b0\u5728 list \u53c2\u6570\u7684\u7c7b\u578b\u5c31\u6709\u53ef\u80fd\u662f\u6ca1\u6709\u5b9e\u73b0 Copy trait \u7684\u3002\u8fd9\u610f\u5473\u7740\u6211\u4eec\u53ef\u80fd\u4e0d\u80fd\u5c06 list[0] \u7684\u503c\u79fb\u52a8\u5230 largest \u53d8\u91cf\u4e2d\uff0c\u8fd9\u5bfc\u81f4\u4e86\u4e0a\u9762\u7684\u9519\u8bef\u3002 \u4e3a\u4e86\u53ea\u5bf9\u5b9e\u73b0\u4e86 Copy \u7684\u7c7b\u578b\u8c03\u7528\u8fd9\u4e9b\u4ee3\u7801\uff0c\u53ef\u4ee5\u5728 T \u7684 trait bounds \u4e2d\u589e\u52a0 Copy \uff01\u793a\u4f8b\u4e2d\u5c55\u793a\u4e86\u4e00\u4e2a\u53ef\u4ee5\u7f16\u8bd1\u7684\u6cdb\u578b\u7248\u672c\u7684 largest \u51fd\u6570\u7684\u5b8c\u6574\u4ee3\u7801\uff0c \u53ea\u8981\u4f20\u9012\u7ed9 largest \u7684 slice \u503c\u7684\u7c7b\u578b\u5b9e\u73b0\u4e86 PartialOrd \u548c Copy \u8fd9\u4e24\u4e2a trait \uff0c\u4f8b\u5982 i32 \u548c char \uff1a // \u4e00\u4e2a\u53ef\u4ee5\u7528\u4e8e\u4efb\u4f55\u5b9e\u73b0\u4e86 PartialOrd \u548c Copy trait \u7684\u6cdb\u578b\u7684 largest \u51fd\u6570 fn largest < T : PartialOrd + Copy > ( list : & [ T ]) -> T { let mut largest = list [ 0 ]; for & item in list { if item > largest { largest = item ; } } largest } fn main () { let number_list = vec! [ 34 , 50 , 25 , 100 , 65 ]; let result = largest ( & number_list ); println! ( \"The largest number is {}\" , result ); let char_list = vec! [ 'y' , 'm' , 'a' , 'q' ]; let result = largest ( & char_list ); println! ( \"The largest char is {}\" , result ); } \u5982\u679c\u5e76\u4e0d\u5e0c\u671b\u9650\u5236 largest \u51fd\u6570\u53ea\u80fd\u7528\u4e8e\u5b9e\u73b0\u4e86 Copy trait \u7684\u7c7b\u578b\uff0c\u6211\u4eec\u53ef\u4ee5\u5728 T \u7684 trait bounds \u4e2d\u6307\u5b9a Clone \u800c\u4e0d\u662f Copy \u3002 \u5e76\u514b\u9686 slice \u7684\u6bcf\u4e00\u4e2a\u503c\u4f7f\u5f97 largest \u51fd\u6570\u62e5\u6709\u5176\u6240\u6709\u6743\u3002\u4f7f\u7528 clone \u51fd\u6570\u610f\u5473\u7740\u5bf9\u4e8e\u7c7b\u4f3c String \u8fd9\u6837\u62e5\u6709\u5806\u4e0a\u6570\u636e\u7684\u7c7b\u578b\uff0c\u4f1a\u6f5c\u5728\u7684\u5206\u914d\u66f4\u591a\u5806\u4e0a\u7a7a\u95f4\uff0c\u800c\u5806\u5206\u914d\u5728\u6d89\u53ca\u5927\u91cf\u6570\u636e\u65f6\u53ef\u80fd\u4f1a\u76f8\u5f53\u7f13\u6162\u3002 \u53e6\u4e00\u79cd largest \u7684\u5b9e\u73b0\u65b9\u5f0f\u662f\u8fd4\u56de\u5728 slice \u4e2d T \u503c\u7684\u5f15\u7528\u3002\u5982\u679c\u6211\u4eec\u5c06\u51fd\u6570\u8fd4\u56de\u503c\u4ece T \u6539\u4e3a &T \u5e76\u6539\u53d8\u51fd\u6570\u4f53\u4f7f\u5176\u80fd\u591f\u8fd4\u56de\u4e00\u4e2a\u5f15\u7528\uff0c\u6211\u4eec\u5c06\u4e0d\u9700\u8981\u4efb\u4f55 Clone \u6216 Copy \u7684 trait bounds \u800c\u4e14\u4e5f\u4e0d\u4f1a\u6709\u4efb\u4f55\u7684\u5806\u5206\u914d\u3002\u5c1d\u8bd5\u81ea\u5df1\u5b9e\u73b0\u8fd9\u79cd\u66ff\u4ee3\u89e3\u51b3\u65b9\u5f0f\u5427\uff01\u5982\u679c\u4f60\u65e0\u6cd5\u6446\u8131\u4e0e\u751f\u547d\u5468\u671f\u6709\u5173\u7684\u9519\u8bef\uff0c\u8bf7\u7ee7\u7eed\u9605\u8bfb\uff1a\u63a5\u4e0b\u6765\u7684 \u201c\u751f\u547d\u5468\u671f\u4e0e\u5f15\u7528\u6709\u6548\u6027\u201d \u90e8\u5206\u4f1a\u8be6\u7ec6\u7684\u8bf4\u660e\uff0c\u4e0d\u8fc7\u751f\u547d\u5468\u671f\u5bf9\u4e8e\u89e3\u51b3\u8fd9\u4e9b\u6311\u6218\u6765\u8bf4\u5e76\u4e0d\u662f\u5fc5\u987b\u7684\u3002","title":"\u4f7f\u7528 trait bounds \u6765\u4fee\u590d largest \u51fd\u6570"},{"location":"generics/#trait-bound_2","text":"\u901a\u8fc7\u4f7f\u7528\u5e26\u6709 trait bound \u7684\u6cdb\u578b\u53c2\u6570\u7684 impl \u5757\uff0c\u53ef\u4ee5\u6709\u6761\u4ef6\u5730\u53ea\u4e3a\u90a3\u4e9b\u5b9e\u73b0\u4e86\u7279\u5b9a trait \u7684\u7c7b\u578b\u5b9e\u73b0\u65b9\u6cd5\u3002 \u4f8b\u5982\uff0c\u793a\u4f8b\u4e2d\u7684\u7c7b\u578b Pair<T> \u603b\u662f\u5b9e\u73b0\u4e86 new \u65b9\u6cd5\u5e76\u8fd4\u56de\u4e00\u4e2a Pair<T> \u7684\u5b9e\u4f8b\uff08\u56de\u5fc6\u4e00\u4e0b\u7b2c\u4e94\u7ae0\u7684 \"\u5b9a\u4e49\u65b9\u6cd5\" \u90e8\u5206\uff0c Self \u662f\u4e00\u4e2a impl \u5757\u7c7b\u578b\u7684 \u7c7b\u578b\u522b\u540d \uff08type alias\uff09\uff0c\u5728\u8fd9\u91cc\u662f Pair<T> \uff09\u3002\u4e0d\u8fc7\u5728\u4e0b\u4e00\u4e2a impl \u5757\u4e2d\uff0c\u53ea\u6709\u90a3\u4e9b\u4e3a T \u7c7b\u578b\u5b9e\u73b0\u4e86 PartialOrd trait \uff08\u6765\u5141\u8bb8\u6bd4\u8f83\uff09 \u548c Display trait \uff08\u6765\u542f\u7528\u6253\u5370\uff09\u7684 Pair<T> \u624d\u4f1a\u5b9e\u73b0 cmp_display \u65b9\u6cd5\uff1a // \u6839\u636e trait bound \u5728\u6cdb\u578b\u4e0a\u6709\u6761\u4ef6\u7684\u5b9e\u73b0\u65b9\u6cd5 use std :: fmt :: Display ; struct Pair < T > { x : T , y : T , } impl < T > Pair < T > { fn new ( x : T , y : T ) -> Self { Self { x , y } } } impl < T : Display + PartialOrd > Pair < T > { fn cmp_display ( & self ) { if self . x >= self . y { println! ( \"The largest member is x = {}\" , self . x ); } else { println! ( \"The largest member is y = {}\" , self . y ); } } } \u4e5f\u53ef\u4ee5\u5bf9\u4efb\u4f55\u5b9e\u73b0\u4e86\u7279\u5b9a trait \u7684\u7c7b\u578b\u6709\u6761\u4ef6\u5730\u5b9e\u73b0 trait \u3002\u5bf9\u4efb\u4f55\u6ee1\u8db3\u7279\u5b9a trait bound \u7684\u7c7b\u578b\u5b9e\u73b0 trait \u88ab\u79f0\u4e3a blanket implementations \uff0c\u4ed6\u4eec\u88ab\u5e7f\u6cdb\u7684\u7528\u4e8e Rust \u6807\u51c6\u5e93\u4e2d\u3002 \u4f8b\u5982\uff0c\u6807\u51c6\u5e93\u4e3a\u4efb\u4f55\u5b9e\u73b0\u4e86 Display trait \u7684\u7c7b\u578b\u5b9e\u73b0\u4e86 ToString trait \u3002\u8fd9\u4e2a impl \u5757\u770b\u8d77\u6765\u50cf\u8fd9\u6837\uff1a impl < T : Display > ToString for T { // --snip-- } \u56e0\u4e3a\u6807\u51c6\u5e93\u6709\u4e86\u8fd9\u4e9b blanket implementation \uff0c\u6211\u4eec\u53ef\u4ee5\u5bf9\u4efb\u4f55\u5b9e\u73b0\u4e86 Display trait \u7684\u7c7b\u578b\u8c03\u7528\u7531 ToString \u5b9a\u4e49\u7684 to_string \u65b9\u6cd5\u3002 \u4f8b\u5982\uff0c\u53ef\u4ee5\u5c06\u6574\u578b\u8f6c\u6362\u4e3a\u5bf9\u5e94\u7684 String \u503c\uff0c\u56e0\u4e3a\u6574\u578b\u5b9e\u73b0\u4e86 Display \uff1a let s = 3. to_string (); blanket implementation \u4f1a\u51fa\u73b0\u5728 trait \u6587\u6863\u7684 \u201cImplementers\u201d \u90e8\u5206\u3002 trait \u548c trait bound \u8ba9\u6211\u4eec\u4f7f\u7528\u6cdb\u578b\u7c7b\u578b\u53c2\u6570\u6765\u51cf\u5c11\u91cd\u590d\uff0c\u5e76\u4ecd\u7136\u80fd\u591f\u5411\u7f16\u8bd1\u5668\u660e\u786e\u6307\u5b9a\u6cdb\u578b\u7c7b\u578b\u9700\u8981\u62e5\u6709\u54ea\u4e9b\u884c\u4e3a\u3002 \u56e0\u4e3a\u6211\u4eec\u5411\u7f16\u8bd1\u5668\u63d0\u4f9b\u4e86 trait bound \u4fe1\u606f\uff0c\u5b83\u5c31\u53ef\u4ee5\u68c0\u67e5\u4ee3\u7801\u4e2d\u6240\u7528\u5230\u7684\u5177\u4f53\u7c7b\u578b\u662f\u5426\u63d0\u4f9b\u4e86\u6b63\u786e\u7684\u884c\u4e3a\u3002 \u5728\u52a8\u6001\u7c7b\u578b\u8bed\u8a00\u4e2d\uff0c\u5982\u679c\u6211\u4eec\u5c1d\u8bd5\u8c03\u7528\u4e00\u4e2a\u7c7b\u578b\u5e76\u6ca1\u6709\u5b9e\u73b0\u7684\u65b9\u6cd5\uff0c\u4f1a\u5728\u8fd0\u884c\u65f6\u51fa\u73b0\u9519\u8bef\u3002 Rust \u5c06\u8fd9\u4e9b\u9519\u8bef\u79fb\u52a8\u5230\u4e86\u7f16\u8bd1\u65f6\uff0c\u751a\u81f3\u5728\u4ee3\u7801\u80fd\u591f\u8fd0\u884c\u4e4b\u524d\u5c31\u5f3a\u8feb\u6211\u4eec\u4fee\u590d\u9519\u8bef\u3002 \u53e6\u5916\uff0c\u6211\u4eec\u4e5f\u65e0\u9700\u7f16\u5199\u8fd0\u884c\u65f6\u68c0\u67e5\u884c\u4e3a\u7684\u4ee3\u7801\uff0c\u56e0\u4e3a\u5728\u7f16\u8bd1\u65f6\u5c31\u5df2\u7ecf\u68c0\u67e5\u8fc7\u4e86\uff0c\u8fd9\u6837\u76f8\u6bd4\u5176\u4ed6\u90a3\u4e9b\u4e0d\u613f\u653e\u5f03\u6cdb\u578b\u7075\u6d3b\u6027\u7684\u8bed\u8a00\u6709\u66f4\u597d\u7684\u6027\u80fd\u3002 \u8fd9\u91cc\u8fd8\u6709\u4e00\u79cd\u6cdb\u578b\uff0c\u6211\u4eec\u4e00\u76f4\u5728\u4f7f\u7528\u5b83\u751a\u81f3\u90fd\u6ca1\u6709\u5bdf\u89c9\u5b83\u7684\u5b58\u5728\uff0c\u8fd9\u5c31\u662f \u751f\u547d\u5468\u671f \uff08lifetimes\uff09\u3002\u4e0d\u540c\u4e8e\u5176\u4ed6\u6cdb\u578b\u5e2e\u52a9\u6211\u4eec\u786e\u4fdd\u7c7b\u578b\u62e5\u6709\u671f\u671b\u7684\u884c\u4e3a\uff0c\u751f\u547d\u5468\u671f\u5219\u6709\u52a9\u4e8e\u786e\u4fdd\u5f15\u7528\u5728\u6211\u4eec\u9700\u8981\u4ed6\u4eec\u7684\u65f6\u5019\u4e00\u76f4\u6709\u6548\u3002\u8ba9\u6211\u4eec\u5b66\u4e60\u751f\u547d\u5468\u671f\u662f\u5982\u4f55\u505a\u5230\u8fd9\u4e9b\u7684\u3002","title":"\u4f7f\u7528 trait bound \u6709\u6761\u4ef6\u5730\u5b9e\u73b0\u65b9\u6cd5"},{"location":"generics/#_8","text":"\u5f53\u5728\u524d\u9762\u8ba8\u8bba \u201c\u5f15\u7528\u548c\u501f\u7528\u201d \u90e8\u5206\u65f6\uff0c\u6211\u4eec\u9057\u6f0f\u4e86\u4e00\u4e2a\u91cd\u8981\u7684\u7ec6\u8282\uff1aRust \u4e2d\u7684\u6bcf\u4e00\u4e2a\u5f15\u7528\u90fd\u6709\u5176 \u751f\u547d\u5468\u671f \uff08lifetime\uff09\uff0c\u4e5f\u5c31\u662f\u5f15\u7528\u4fdd\u6301\u6709\u6548\u7684\u4f5c\u7528\u57df\u3002\u5927\u90e8\u5206\u65f6\u5019\u751f\u547d\u5468\u671f\u662f\u9690\u542b\u5e76\u53ef\u4ee5\u63a8\u65ad\u7684\uff0c\u6b63\u5982\u5927\u90e8\u5206\u65f6\u5019\u7c7b\u578b\u4e5f\u662f\u53ef\u4ee5\u63a8\u65ad\u7684\u4e00\u6837\u3002\u7c7b\u4f3c\u4e8e\u5f53\u56e0\u4e3a\u6709\u591a\u79cd\u53ef\u80fd\u7c7b\u578b\u7684\u65f6\u5019\u5fc5\u987b\u6ce8\u660e\u7c7b\u578b\uff0c\u4e5f\u4f1a\u51fa\u73b0\u5f15\u7528\u7684\u751f\u547d\u5468\u671f\u4ee5\u4e00\u4e9b\u4e0d\u540c\u65b9\u5f0f\u76f8\u5173\u8054\u7684\u60c5\u51b5\uff0c\u6240\u4ee5 Rust \u9700\u8981\u6211\u4eec\u4f7f\u7528\u6cdb\u578b\u751f\u547d\u5468\u671f\u53c2\u6570\u6765\u6ce8\u660e\u4ed6\u4eec\u7684\u5173\u7cfb\uff0c\u8fd9\u6837\u5c31\u80fd\u786e\u4fdd\u8fd0\u884c\u65f6\u5b9e\u9645\u4f7f\u7528\u7684\u5f15\u7528\u7edd\u5bf9\u662f\u6709\u6548\u7684\u3002 \u751f\u547d\u5468\u671f\u6ce8\u89e3\u751a\u81f3\u4e0d\u662f\u4e00\u4e2a\u5927\u90e8\u5206\u8bed\u8a00\u90fd\u6709\u7684\u6982\u5ff5\uff0c\u6240\u4ee5\u8fd9\u53ef\u80fd\u611f\u89c9\u8d77\u6765\u6709\u4e9b\u964c\u751f\u3002\u867d\u7136\u672c\u7ae0\u4e0d\u53ef\u80fd\u6d89\u53ca\u5230\u5b83\u5168\u90e8\u7684\u5185\u5bb9\uff0c\u6211\u4eec\u4f1a\u8bb2\u5230\u4e00\u4e9b\u901a\u5e38\u4f60\u53ef\u80fd\u4f1a\u9047\u5230\u7684\u751f\u547d\u5468\u671f\u8bed\u6cd5\u4ee5\u4fbf\u4f60\u719f\u6089\u8fd9\u4e2a\u6982\u5ff5\u3002","title":"\u751f\u547d\u5468\u671f"},{"location":"generics/#_9","text":"\u751f\u547d\u5468\u671f\u7684\u4e3b\u8981\u76ee\u6807\u662f\u907f\u514d\u60ac\u5782\u5f15\u7528\uff0c\u540e\u8005\u4f1a\u5bfc\u81f4\u7a0b\u5e8f\u5f15\u7528\u4e86\u975e\u9884\u671f\u5f15\u7528\u7684\u6570\u636e\u3002 \u8003\u8651\u4e00\u4e0b\u793a\u4f8b\u4e2d\u7684\u7a0b\u5e8f\uff0c\u5b83\u6709\u4e00\u4e2a\u5916\u90e8\u4f5c\u7528\u57df\u548c\u4e00\u4e2a\u5185\u90e8\u4f5c\u7528\u57df\u3002 // \u5c1d\u8bd5\u4f7f\u7528\u79bb\u5f00\u4f5c\u7528\u57df\u7684\u503c\u7684\u5f15\u7528 { let r ; { let x = 5 ; r = & x ; } println! ( \"r: {}\" , r ); } \u6ce8\u610f \uff1a \u5f88\u591a\u793a\u4f8b\u4e2d\u58f0\u660e\u4e86\u6ca1\u6709\u521d\u59cb\u503c\u7684\u53d8\u91cf\uff0c\u6240\u4ee5\u8fd9\u4e9b\u53d8\u91cf\u5b58\u5728\u4e8e\u5916\u90e8\u4f5c\u7528\u57df\u3002 \u8fd9\u4e4d\u770b\u4e4b\u4e0b\u597d\u50cf\u548c Rust \u4e0d\u5141\u8bb8\u5b58\u5728\u7a7a\u503c\u76f8\u51b2\u7a81\u3002 \u7136\u800c\u5982\u679c\u5c1d\u8bd5\u5728\u7ed9\u5b83\u4e00\u4e2a\u503c\u4e4b\u524d\u4f7f\u7528\u8fd9\u4e2a\u53d8\u91cf\uff0c\u4f1a\u51fa\u73b0\u4e00\u4e2a\u7f16\u8bd1\u65f6\u9519\u8bef\uff0c\u8fd9\u5c31\u8bf4\u660e\u4e86 Rust \u786e\u5b9e\u4e0d\u5141\u8bb8\u7a7a\u503c\u3002 \u5916\u90e8\u4f5c\u7528\u57df\u58f0\u660e\u4e86\u4e00\u4e2a\u6ca1\u6709\u521d\u503c\u7684\u53d8\u91cf r \uff0c\u800c\u5185\u90e8\u4f5c\u7528\u57df\u58f0\u660e\u4e86\u4e00\u4e2a\u521d\u503c\u4e3a 5 \u7684\u53d8\u91cf x \u3002\u5728\u5185\u90e8\u4f5c\u7528\u57df\u4e2d\uff0c \u6211\u4eec\u5c1d\u8bd5\u5c06 r \u7684\u503c\u8bbe\u7f6e\u4e3a\u4e00\u4e2a x \u7684\u5f15\u7528\u3002\u63a5\u7740\u5728\u5185\u90e8\u4f5c\u7528\u57df\u7ed3\u675f\u540e\uff0c\u5c1d\u8bd5\u6253\u5370\u51fa r \u7684\u503c\u3002\u8fd9\u6bb5\u4ee3\u7801\u4e0d\u80fd\u7f16\u8bd1\u56e0\u4e3a r \u5f15\u7528\u7684\u503c\u5728\u5c1d\u8bd5\u4f7f\u7528\u4e4b\u524d\u5c31\u79bb\u5f00\u4e86\u4f5c\u7528\u57df\u3002 \u5982\u4e0b\u662f\u9519\u8bef\u4fe1\u606f\uff1a $ cargo run Compiling chapter10 v0 . 1.0 ( file : ///projects/chapter10) error [ E0597 ] : ` x ` does not live long enough - -> src / main . rs : 7 : 17 | 7 | r = & x ; | ^^ borrowed value does not live long enough 8 | } | - ` x ` dropped here while still borrowed 9 | 10 | println! ( \"r: {}\" , r ); | - borrow later used here For more information about this error , try ` rustc -- explain E0597 ` . error : could not compile ` chapter10 ` due to previous error \u53d8\u91cf x \u5e76\u6ca1\u6709 \u201c\u5b58\u5728\u7684\u8db3\u591f\u4e45\u201d \u3002\u5176\u539f\u56e0\u662f x \u5728\u5230\u8fbe\u7b2c 7 \u884c\u5185\u90e8\u4f5c\u7528\u57df\u7ed3\u675f\u65f6\u5c31\u79bb\u5f00\u4e86\u4f5c\u7528\u57df\u3002 \u4e0d\u8fc7 r \u5728\u5916\u90e8\u4f5c\u7528\u57df\u4ecd\u662f\u6709\u6548\u7684\uff1b\u4f5c\u7528\u57df\u8d8a\u5927\u6211\u4eec\u5c31\u8bf4\u5b83 \u201c\u5b58\u5728\u7684\u8d8a\u4e45\u201d\u3002 \u5982\u679c Rust \u5141\u8bb8\u8fd9\u6bb5\u4ee3\u7801\u5de5\u4f5c\uff0cr \u5c06\u4f1a\u5f15\u7528\u5728 x \u79bb\u5f00\u4f5c\u7528\u57df\u65f6\u88ab\u91ca\u653e\u7684\u5185\u5b58\uff0c\u8fd9\u65f6\u5c1d\u8bd5\u5bf9 r \u505a\u4efb\u4f55\u64cd\u4f5c\u90fd\u4e0d\u80fd\u6b63\u5e38\u5de5\u4f5c\u3002 \u90a3\u4e48 Rust \u662f\u5982\u4f55\u51b3\u5b9a\u8fd9\u6bb5\u4ee3\u7801\u662f\u4e0d\u88ab\u5141\u8bb8\u7684\u5462\uff1f\u8fd9\u5f97\u76ca\u4e8e\u501f\u7528\u68c0\u67e5\u5668\u3002","title":"\u751f\u547d\u5468\u671f\u907f\u514d\u4e86\u60ac\u5782\u5f15\u7528"},{"location":"generics/#_10","text":"Rust \u7f16\u8bd1\u5668\u6709\u4e00\u4e2a \u501f\u7528\u68c0\u67e5\u5668 \uff08borrow checker\uff09\uff0c\u5b83\u6bd4\u8f83\u4f5c\u7528\u57df\u6765\u786e\u4fdd\u6240\u6709\u7684\u501f\u7528\u90fd\u662f\u6709\u6548\u7684\u3002 \u793a\u4f8b\u5c55\u793a\u4e86\u5e26\u6709\u53d8\u91cf\u751f\u547d\u5468\u671f\u7684\u6ce8\u91ca\uff1a // r \u548c x \u7684\u751f\u547d\u5468\u671f\u6ce8\u89e3\uff0c\u5206\u522b\u53eb\u505a 'a \u548c 'b { let r ; // ---------+-- 'a // | { // | let x = 5 ; // -+-- 'b | r = & x ; // | | } // -+ | // | println! ( \"r: {}\" , r ); // | } // ---------+ \u8fd9\u91cc\u5c06 r \u7684\u751f\u547d\u5468\u671f\u6807\u8bb0\u4e3a 'a \u5e76\u5c06 x \u7684\u751f\u547d\u5468\u671f\u6807\u8bb0\u4e3a 'b \u3002\u5982\u4f60\u6240\u89c1\uff0c\u5185\u90e8\u7684 'b \u5757\u8981\u6bd4\u5916\u90e8\u7684\u751f\u547d\u5468\u671f 'a \u5c0f\u5f97\u591a\u3002 \u5728\u7f16\u8bd1\u65f6\uff0cRust \u6bd4\u8f83\u8fd9\u4e24\u4e2a\u751f\u547d\u5468\u671f\u7684\u5927\u5c0f\uff0c\u5e76\u53d1\u73b0 r \u62e5\u6709\u751f\u547d\u5468\u671f 'a \uff0c\u4e0d\u8fc7\u5b83\u5f15\u7528\u4e86\u4e00\u4e2a\u62e5\u6709\u751f\u547d\u5468\u671f 'b \u7684\u5bf9\u8c61\u3002 \u7a0b\u5e8f\u88ab\u62d2\u7edd\u7f16\u8bd1\uff0c\u56e0\u4e3a\u751f\u547d\u5468\u671f 'b \u6bd4\u751f\u547d\u5468\u671f 'a \u8981\u5c0f\uff1a\u88ab\u5f15\u7528\u7684\u5bf9\u8c61\u6bd4\u5b83\u7684\u5f15\u7528\u8005\u5b58\u5728\u7684\u65f6\u95f4\u66f4\u77ed\u3002 \u8ba9\u6211\u4eec\u770b\u770b\u793a\u4f8b\u4e2d\u8fd9\u4e2a\u5e76\u6ca1\u6709\u4ea7\u751f\u60ac\u5782\u5f15\u7528\u4e14\u53ef\u4ee5\u6b63\u786e\u7f16\u8bd1\u7684\u4f8b\u5b50\uff1a // \u4e00\u4e2a\u6709\u6548\u7684\u5f15\u7528\uff0c\u56e0\u4e3a\u6570\u636e\u6bd4\u5f15\u7528\u6709\u7740\u66f4\u957f\u7684\u751f\u547d\u5468\u671f { let x = 5 ; // ----------+-- 'b // | let r = & x ; // --+-- 'a | // | | println! ( \"r: {}\" , r ); // | | // --+ | } // ----------+ \u8fd9\u91cc x \u62e5\u6709\u751f\u547d\u5468\u671f 'b \uff0c\u6bd4 'a \u8981\u5927\u3002\u8fd9\u5c31\u610f\u5473\u7740 r \u53ef\u4ee5\u5f15\u7528 x \uff1aRust \u77e5\u9053 r \u4e2d\u7684\u5f15\u7528\u5728 x \u6709\u6548\u7684\u65f6\u5019\u4e5f\u603b\u662f\u6709\u6548\u7684\u3002 \u73b0\u5728\u6211\u4eec\u5df2\u7ecf\u5728\u4e00\u4e2a\u5177\u4f53\u7684\u4f8b\u5b50\u4e2d\u5c55\u793a\u4e86\u5f15\u7528\u7684\u751f\u547d\u5468\u671f\u4f4d\u4e8e\u4f55\u5904\uff0c\u5e76\u8ba8\u8bba\u4e86 Rust \u5982\u4f55\u5206\u6790\u751f\u547d\u5468\u671f\u6765\u4fdd\u8bc1\u5f15\u7528\u603b\u662f\u6709\u6548\u7684\uff0c\u63a5\u4e0b\u6765\u8ba9\u6211\u4eec\u804a\u804a\u5728\u51fd\u6570\u7684\u4e0a\u4e0b\u6587\u4e2d\u53c2\u6570\u548c\u8fd4\u56de\u503c\u7684\u6cdb\u578b\u751f\u547d\u5468\u671f\u3002","title":"\u501f\u7528\u68c0\u67e5\u5668"},{"location":"generics/#_11","text":"\u8ba9\u6211\u4eec\u6765\u7f16\u5199\u4e00\u4e2a\u8fd4\u56de\u4e24\u4e2a\u5b57\u7b26\u4e32 slice \u4e2d\u8f83\u957f\u8005\u7684\u51fd\u6570\u3002\u8fd9\u4e2a\u51fd\u6570\u83b7\u53d6\u4e24\u4e2a\u5b57\u7b26\u4e32 slice \u5e76\u8fd4\u56de\u4e00\u4e2a\u5b57\u7b26\u4e32 slice \u3002\u4e00\u65e6\u6211\u4eec\u5b9e\u73b0\u4e86 longest \u51fd\u6570\uff0c\u793a\u4f8b\u4e2d\u7684\u4ee3\u7801\u5e94\u8be5\u4f1a\u6253\u5370\u51fa The longest string is abcd \uff1a fn main () { let string1 = String :: from ( \"abcd\" ); let string2 = \"xyz\" ; let result = longest ( string1 . as_str (), string2 ); println! ( \"The longest string is {}\" , result ); } \u6ce8\u610f\u8fd9\u4e2a\u51fd\u6570\u83b7\u53d6\u4f5c\u4e3a\u5f15\u7528\u7684\u5b57\u7b26\u4e32 slice \uff0c\u56e0\u4e3a\u6211\u4eec\u4e0d\u5e0c\u671b longest \u51fd\u6570\u83b7\u53d6\u53c2\u6570\u7684\u6240\u6709\u6743\u3002 \u53c2\u8003\u4e4b\u524d\u7b2c\u56db\u7ae0\u4e2d\u7684 \u201c\u5b57\u7b26\u4e32 slice \u4f5c\u4e3a\u53c2\u6570\u201d \u90e8\u5206\u4e2d\u66f4\u591a\u5173\u4e8e\u4e3a\u4ec0\u4e48\u793a\u4f8b\u7684\u53c2\u6570\u6b63\u7b26\u5408\u6211\u4eec\u671f\u671b\u7684\u8ba8\u8bba\u3002 \u5982\u679c\u5c1d\u8bd5\u50cf\u4e4b\u524d\u90a3\u6837\u5b9e\u73b0 longest \u51fd\u6570\uff0c\u5b83\u5e76\u4e0d\u80fd\u7f16\u8bd1\uff1a // \u4e00\u4e2a longest \u51fd\u6570\u7684\u5b9e\u73b0\uff0c\u5b83\u8fd4\u56de\u4e24\u4e2a\u5b57\u7b26\u4e32 slice \u4e2d\u8f83\u957f\u8005\uff0c\u73b0\u5728\u8fd8\u4e0d\u80fd\u7f16\u8bd1 fn longest ( x : & str , y : & str ) -> & str { if x . len () > y . len () { x } else { y } } \u76f8\u5e94\u5730\u4f1a\u51fa\u73b0\u5982\u4e0b\u6709\u5173\u751f\u547d\u5468\u671f\u7684\u9519\u8bef\uff1a $ cargo run Compiling chapter10 v0.1.0 ( file:///projects/chapter10 ) error [ E0106 ] : missing lifetime specifier --> src/main.rs:9:33 | 9 | fn longest ( x: & str, y: & str ) -> & str { | ---- ---- ^ expected named lifetime parameter | = help: this function 's return type contains a borrowed value, but the signature does not say whether it is borrowed from `x` or `y` help: consider introducing a named lifetime parameter | 9 | fn longest<' a> ( x: & 'a str, y: &' a str ) -> & ' a str { | ++++ ++ ++ ++ For more information about this error, try ` rustc --explain E0106 ` . error: could not compile ` chapter10 ` due to previous error \u63d0\u793a\u6587\u672c\u63ed\u793a\u4e86\u8fd4\u56de\u503c\u9700\u8981\u4e00\u4e2a\u6cdb\u578b\u751f\u547d\u5468\u671f\u53c2\u6570\uff0c\u56e0\u4e3a Rust \u5e76\u4e0d\u77e5\u9053\u5c06\u8981\u8fd4\u56de\u7684\u5f15\u7528\u662f\u6307\u5411 x \u6216 y \u3002 \u4e8b\u5b9e\u4e0a\u6211\u4eec\u4e5f\u4e0d\u77e5\u9053\uff0c\u56e0\u4e3a\u51fd\u6570\u4f53\u4e2d if \u5757\u8fd4\u56de\u4e00\u4e2a x \u7684\u5f15\u7528\u800c else \u5757\u8fd4\u56de\u4e00\u4e2a y \u7684\u5f15\u7528\uff01 \u5f53\u6211\u4eec\u5b9a\u4e49\u8fd9\u4e2a\u51fd\u6570\u7684\u65f6\u5019\uff0c\u5e76\u4e0d\u77e5\u9053\u4f20\u9012\u7ed9\u51fd\u6570\u7684\u5177\u4f53\u503c\uff0c\u6240\u4ee5\u4e5f\u4e0d\u77e5\u9053\u5230\u5e95\u662f if \u8fd8\u662f else \u4f1a\u88ab\u6267\u884c\u3002 \u6211\u4eec\u4e5f\u4e0d\u77e5\u9053\u4f20\u5165\u7684\u5f15\u7528\u7684\u5177\u4f53\u751f\u547d\u5468\u671f\uff0c\u6240\u4ee5\u4e5f\u5c31\u4e0d\u80fd\u50cf\u793a\u4f8b\u4e2d\u90a3\u6837\u901a\u8fc7\u89c2\u5bdf\u4f5c\u7528\u57df\u6765\u786e\u5b9a\u8fd4\u56de\u7684\u5f15\u7528\u662f\u5426\u603b\u662f\u6709\u6548\u3002 \u501f\u7528\u68c0\u67e5\u5668\u81ea\u8eab\u540c\u6837\u4e5f\u65e0\u6cd5\u786e\u5b9a\uff0c\u56e0\u4e3a\u5b83\u4e0d\u77e5\u9053 x \u548c y \u7684\u751f\u547d\u5468\u671f\u662f\u5982\u4f55\u4e0e\u8fd4\u56de\u503c\u7684\u751f\u547d\u5468\u671f\u76f8\u5173\u8054\u7684\u3002 \u4e3a\u4e86\u4fee\u590d\u8fd9\u4e2a\u9519\u8bef\uff0c\u6211\u4eec\u5c06\u589e\u52a0\u6cdb\u578b\u751f\u547d\u5468\u671f\u53c2\u6570\u6765\u5b9a\u4e49\u5f15\u7528\u95f4\u7684\u5173\u7cfb\u4ee5\u4fbf\u501f\u7528\u68c0\u67e5\u5668\u53ef\u4ee5\u8fdb\u884c\u5206\u6790\u3002","title":"\u51fd\u6570\u4e2d\u7684\u6cdb\u578b\u751f\u547d\u5468\u671f"},{"location":"generics/#_12","text":"\u751f\u547d\u5468\u671f\u6ce8\u89e3\u5e76\u4e0d\u6539\u53d8\u4efb\u4f55\u5f15\u7528\u7684\u751f\u547d\u5468\u671f\u7684\u957f\u77ed\u3002\u4e0e\u5f53\u51fd\u6570\u7b7e\u540d\u4e2d\u6307\u5b9a\u4e86\u6cdb\u578b\u7c7b\u578b\u53c2\u6570\u540e\u5c31\u53ef\u4ee5\u63a5\u53d7\u4efb\u4f55\u7c7b\u578b\u4e00\u6837\uff0c\u5f53\u6307\u5b9a\u4e86\u6cdb\u578b\u751f\u547d\u5468\u671f\u540e\u51fd\u6570\u4e5f\u80fd\u63a5\u53d7\u4efb\u4f55\u751f\u547d\u5468\u671f\u7684\u5f15\u7528\u3002\u751f\u547d\u5468\u671f\u6ce8\u89e3\u63cf\u8ff0\u4e86\u591a\u4e2a\u5f15\u7528\u751f\u547d\u5468\u671f\u76f8\u4e92\u7684\u5173\u7cfb\uff0c\u800c\u4e0d\u5f71\u54cd\u5176\u751f\u547d\u5468\u671f\u3002 \u751f\u547d\u5468\u671f\u6ce8\u89e3\u6709\u7740\u4e00\u4e2a\u4e0d\u592a\u5e38\u89c1\u7684\u8bed\u6cd5\uff1a\u751f\u547d\u5468\u671f\u53c2\u6570\u540d\u79f0\u5fc5\u987b\u4ee5\u6487\u53f7\uff08 ' \uff09\u5f00\u5934\uff0c\u5176\u540d\u79f0\u901a\u5e38\u5168\u662f\u5c0f\u5199\uff0c\u7c7b\u4f3c\u4e8e\u6cdb\u578b\u5176\u540d\u79f0\u975e\u5e38\u77ed\u3002 'a \u662f\u5927\u591a\u6570\u4eba\u9ed8\u8ba4\u4f7f\u7528\u7684\u540d\u79f0\u3002\u751f\u547d\u5468\u671f\u53c2\u6570\u6ce8\u89e3\u4f4d\u4e8e\u5f15\u7528\u7684 & \u4e4b\u540e\uff0c\u5e76\u6709\u4e00\u4e2a\u7a7a\u683c\u6765\u5c06\u5f15\u7528\u7c7b\u578b\u4e0e\u751f\u547d\u5468\u671f\u6ce8\u89e3\u5206\u9694\u5f00\u3002 \u8fd9\u91cc\u6709\u4e00\u4e9b\u4f8b\u5b50\uff1a\u6211\u4eec\u6709\u4e00\u4e2a\u6ca1\u6709\u751f\u547d\u5468\u671f\u53c2\u6570\u7684 i32 \u7684\u5f15\u7528\uff0c\u4e00\u4e2a\u6709\u53eb\u505a 'a \u7684\u751f\u547d\u5468\u671f\u53c2\u6570\u7684 i32 \u7684\u5f15\u7528\uff0c\u548c\u4e00\u4e2a\u751f\u547d\u5468\u671f\u4e5f\u662f 'a \u7684 i32 \u7684\u53ef\u53d8\u5f15\u7528\uff1a & i32 // \u5f15\u7528 &' a i32 // \u5e26\u6709\u663e\u5f0f\u751f\u547d\u5468\u671f\u7684\u5f15\u7528 &' a mut i32 // \u5e26\u6709\u663e\u5f0f\u751f\u547d\u5468\u671f\u7684\u53ef\u53d8\u5f15\u7528 \u5355\u4e2a\u7684\u751f\u547d\u5468\u671f\u6ce8\u89e3\u672c\u8eab\u6ca1\u6709\u591a\u5c11\u610f\u4e49\uff0c\u56e0\u4e3a\u751f\u547d\u5468\u671f\u6ce8\u89e3\u544a\u8bc9 Rust \u591a\u4e2a\u5f15\u7528\u7684\u6cdb\u578b\u751f\u547d\u5468\u671f\u53c2\u6570\u5982\u4f55\u76f8\u4e92\u8054\u7cfb\u7684\u3002\u4f8b\u5982\u5982\u679c\u51fd\u6570\u6709\u4e00\u4e2a\u751f\u547d\u5468\u671f 'a \u7684 i32 \u7684\u5f15\u7528\u7684\u53c2\u6570 first \u3002\u8fd8\u6709\u53e6\u4e00\u4e2a\u540c\u6837\u662f\u751f\u547d\u5468\u671f 'a \u7684 i32 \u7684\u5f15\u7528\u7684\u53c2\u6570 second \u3002\u8fd9\u4e24\u4e2a\u751f\u547d\u5468\u671f\u6ce8\u89e3\u610f\u5473\u7740\u5f15\u7528 first \u548c second \u5fc5\u987b\u4e0e\u8fd9\u6cdb\u578b\u751f\u547d\u5468\u671f\u5b58\u5728\u5f97\u4e00\u6837\u4e45\u3002","title":"\u751f\u547d\u5468\u671f\u6ce8\u89e3\u8bed\u6cd5"},{"location":"generics/#_13","text":"\u73b0\u5728\u6765\u770b\u770b longest \u51fd\u6570\u7684\u4e0a\u4e0b\u6587\u4e2d\u7684\u751f\u547d\u5468\u671f\u3002\u5c31\u50cf\u6cdb\u578b\u7c7b\u578b\u53c2\u6570\uff0c\u6cdb\u578b\u751f\u547d\u5468\u671f\u53c2\u6570\u9700\u8981\u58f0\u660e\u5728\u51fd\u6570\u540d\u548c\u53c2\u6570\u5217\u8868\u95f4\u7684\u5c16\u62ec\u53f7\u4e2d\u3002 \u5728 \u8fd9\u4e2a\u7b7e\u540d\u4e2d\u6211\u4eec\u60f3\u8981\u8868\u8fbe\u7684\u9650\u5236\u662f\u6240\u6709\uff08\u4e24\u4e2a\uff09\u53c2\u6570\u548c\u8fd4\u56de\u7684\u5f15\u7528\u7684\u751f\u547d\u5468\u671f\u662f\u76f8\u5173\u7684\uff0c\u4e5f\u5c31\u662f\u8fd9\u4e24\u4e2a\u53c2\u6570\u548c\u8fd4\u56de\u7684\u5f15\u7528\u5b58\u6d3b\u7684\u4e00\u6837\u4e45\u3002 \u5c31\u50cf\u793a\u4f8b\u4e2d\u5728\u6bcf\u4e2a\u5f15\u7528\u4e2d\u90fd\u52a0\u4e0a\u4e86 'a \u90a3\u6837\uff1a // longest \u51fd\u6570\u5b9a\u4e49\u6307\u5b9a\u4e86\u7b7e\u540d\u4e2d\u6240\u6709\u7684\u5f15\u7528\u5fc5\u987b\u6709\u76f8\u540c\u7684\u751f\u547d\u5468\u671f 'a fn longest <' a > ( x : & ' a str , y : & ' a str ) -> & ' a str { if x . len () > y . len () { x } else { y } } \u8fd9\u6bb5\u4ee3\u7801\u80fd\u591f\u7f16\u8bd1\u5e76\u4f1a\u4ea7\u751f\u6211\u4eec\u5e0c\u671b\u5f97\u5230\u7684 main \u51fd\u6570\u7684\u7ed3\u679c\u3002 \u73b0\u5728\u51fd\u6570\u7b7e\u540d\u8868\u660e\u5bf9\u4e8e\u67d0\u4e9b\u751f\u547d\u5468\u671f 'a \uff0c\u51fd\u6570\u4f1a\u83b7\u53d6\u4e24\u4e2a\u53c2\u6570\uff0c\u4ed6\u4eec\u90fd\u662f\u4e0e\u751f\u547d\u5468\u671f 'a \u5b58\u5728\u7684\u4e00\u6837\u957f\u7684\u5b57\u7b26\u4e32 slice \u3002 \u51fd\u6570\u4f1a\u8fd4\u56de\u4e00\u4e2a\u540c\u6837\u4e5f\u4e0e\u751f\u547d\u5468\u671f 'a \u5b58\u5728\u7684\u4e00\u6837\u957f\u7684\u5b57\u7b26\u4e32 slice \u3002 \u5b83\u7684\u5b9e\u9645\u542b\u4e49\u662f longest \u51fd\u6570\u8fd4\u56de\u7684\u5f15\u7528\u7684\u751f\u547d\u5468\u671f\u4e0e\u4f20\u5165\u8be5\u51fd\u6570\u7684\u5f15\u7528\u7684\u751f\u547d\u5468\u671f\u7684\u8f83\u5c0f\u8005\u4e00\u81f4\u3002 \u8fd9\u4e9b\u5173\u7cfb\u5c31\u662f\u6211\u4eec\u5e0c\u671b Rust \u5206\u6790\u4ee3\u7801\u65f6\u6240\u4f7f\u7528\u7684\u3002 \u8bb0\u4f4f\u901a\u8fc7\u5728\u51fd\u6570\u7b7e\u540d\u4e2d\u6307\u5b9a\u751f\u547d\u5468\u671f\u53c2\u6570\u65f6\uff0c\u6211\u4eec\u5e76\u6ca1\u6709\u6539\u53d8\u4efb\u4f55\u4f20\u5165\u503c\u6216\u8fd4\u56de\u503c\u7684\u751f\u547d\u5468\u671f\uff0c\u800c\u662f\u6307\u51fa\u4efb\u4f55\u4e0d\u6ee1\u8db3\u8fd9\u4e2a\u7ea6\u675f\u6761\u4ef6\u7684\u503c\u90fd\u5c06\u88ab\u501f\u7528\u68c0\u67e5\u5668\u62d2\u7edd\u3002 \u6ce8\u610f longest \u51fd\u6570\u5e76\u4e0d\u9700\u8981\u77e5\u9053 x \u548c y \u5177\u4f53\u4f1a\u5b58\u5728\u591a\u4e45\uff0c\u800c\u53ea\u9700\u8981\u77e5\u9053\u6709\u67d0\u4e2a\u53ef\u4ee5\u88ab 'a \u66ff\u4ee3\u7684\u4f5c\u7528\u57df\u5c06\u4f1a\u6ee1\u8db3\u8fd9\u4e2a\u7b7e\u540d\u3002 \u5f53\u5728\u51fd\u6570\u4e2d\u4f7f\u7528\u751f\u547d\u5468\u671f\u6ce8\u89e3\u65f6\uff0c\u8fd9\u4e9b\u6ce8\u89e3\u51fa\u73b0\u5728\u51fd\u6570\u7b7e\u540d\u4e2d\uff0c\u800c\u4e0d\u5b58\u5728\u4e8e\u51fd\u6570\u4f53\u4e2d\u7684\u4efb\u4f55\u4ee3\u7801\u4e2d\u3002 \u751f\u547d\u5468\u671f\u6ce8\u89e3\u6210\u4e3a\u4e86\u51fd\u6570\u7ea6\u5b9a\u7684\u4e00\u90e8\u5206\uff0c\u975e\u5e38\u50cf\u7b7e\u540d\u4e2d\u7684\u7c7b\u578b\u3002 \u8ba9\u51fd\u6570\u7b7e\u540d\u5305\u542b\u751f\u547d\u5468\u671f\u7ea6\u5b9a\u610f\u5473\u7740 Rust \u7f16\u8bd1\u5668\u7684\u5de5\u4f5c\u53d8\u5f97\u66f4\u7b80\u5355\u4e86\u3002 \u5982\u679c\u51fd\u6570\u6ce8\u89e3\u6709\u8bef\u6216\u8005\u8c03\u7528\u65b9\u6cd5\u4e0d\u5bf9\uff0c\u7f16\u8bd1\u5668\u9519\u8bef\u53ef\u4ee5\u66f4\u51c6\u786e\u5730\u6307\u51fa\u4ee3\u7801\u548c\u9650\u5236\u7684\u90e8\u5206\u3002 \u5982\u679c\u4e0d\u8fd9\u4e48\u505a\u7684\u8bdd\uff0cRust \u7f16\u8bd1\u4f1a\u5bf9\u6211\u4eec\u671f\u671b\u7684\u751f\u547d\u5468\u671f\u5173\u7cfb\u505a\u66f4\u591a\u7684\u63a8\u65ad\uff0c\u8fd9\u6837\u7f16\u8bd1\u5668\u53ef\u80fd\u53ea\u80fd\u6307\u51fa\u79bb\u51fa\u95ee\u9898\u5730\u65b9\u5f88\u591a\u6b65\u4e4b\u5916\u7684\u4ee3\u7801\u3002 \u5f53\u5177\u4f53\u7684\u5f15\u7528\u88ab\u4f20\u9012\u7ed9 longest \u65f6\uff0c\u88ab 'a \u6240\u66ff\u4ee3\u7684\u5177\u4f53\u751f\u547d\u5468\u671f\u662f x \u7684\u4f5c\u7528\u57df\u4e0e y \u7684\u4f5c\u7528\u57df\u76f8\u91cd\u53e0\u7684\u90a3\u4e00\u90e8\u5206\u3002 \u6362\u4e00\u79cd\u8bf4\u6cd5\u5c31\u662f\u6cdb\u578b\u751f\u547d\u5468\u671f 'a \u7684\u5177\u4f53\u751f\u547d\u5468\u671f\u7b49\u540c\u4e8e x \u548c y \u7684\u751f\u547d\u5468\u671f\u4e2d\u8f83\u5c0f\u7684\u90a3\u4e00\u4e2a\u3002 \u56e0\u4e3a\u6211\u4eec\u7528\u76f8\u540c\u7684\u751f\u547d\u5468\u671f\u53c2\u6570 'a \u6807\u6ce8\u4e86\u8fd4\u56de\u7684\u5f15\u7528\u503c\uff0c\u6240\u4ee5\u8fd4\u56de\u7684\u5f15\u7528\u503c\u5c31\u80fd\u4fdd\u8bc1\u5728 x \u548c y \u4e2d\u8f83\u77ed\u7684\u90a3\u4e2a\u751f\u547d\u5468\u671f\u7ed3\u675f\u4e4b\u524d\u4fdd\u6301\u6709\u6548\u3002 \u8ba9\u6211\u4eec\u770b\u770b\u5982\u4f55\u901a\u8fc7\u4f20\u9012\u62e5\u6709\u4e0d\u540c\u5177\u4f53\u751f\u547d\u5468\u671f\u7684\u5f15\u7528\u6765\u9650\u5236 longest \u51fd\u6570\u7684\u4f7f\u7528\u3002\u4e00\u4e2a\u5f88\u76f4\u89c2\u7684\u4f8b\u5b50: // \u901a\u8fc7\u62e5\u6709\u4e0d\u540c\u7684\u5177\u4f53\u751f\u547d\u5468\u671f\u7684 String \u503c\u8c03\u7528 longest \u51fd\u6570 fn main () { let string1 = String :: from ( \"long string is long\" ); { let string2 = String :: from ( \"xyz\" ); let result = longest ( string1 . as_str (), string2 . as_str ()); println! ( \"The longest string is {}\" , result ); } } \u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c string1 \u76f4\u5230\u5916\u90e8\u4f5c\u7528\u57df\u7ed3\u675f\u90fd\u662f\u6709\u6548\u7684\uff0c string2 \u5219\u5728\u5185\u90e8\u4f5c\u7528\u57df\u4e2d\u662f\u6709\u6548\u7684\uff0c\u800c result \u5219\u5f15\u7528\u4e86\u4e00\u4e9b\u76f4\u5230\u5185\u90e8\u4f5c\u7528\u57df\u7ed3\u675f\u90fd\u662f\u6709\u6548\u7684\u503c\u3002 \u501f\u7528\u68c0\u67e5\u5668\u8ba4\u53ef\u8fd9\u4e9b\u4ee3\u7801\uff1b\u5b83\u80fd\u591f\u7f16\u8bd1\u548c\u8fd0\u884c\uff0c\u5e76\u6253\u5370\u51fa The longest string is long string is long \u3002 \u63a5\u4e0b\u6765\uff0c\u8ba9\u6211\u4eec\u5c1d\u8bd5\u53e6\u5916\u4e00\u4e2a\u4f8b\u5b50\uff0c\u8be5\u4f8b\u5b50\u63ed\u793a\u4e86 result \u7684\u5f15\u7528\u7684\u751f\u547d\u5468\u671f\u5fc5\u987b\u662f\u4e24\u4e2a\u53c2\u6570\u4e2d\u8f83\u77ed\u7684\u90a3\u4e2a\u3002\u4ee5\u4e0b\u4ee3\u7801\u5c06 result \u53d8\u91cf\u7684\u58f0\u660e\u79fb\u52a8\u51fa\u5185\u90e8\u4f5c\u7528\u57df\uff0c\u4f46\u662f\u5c06 result \u548c string2 \u53d8\u91cf\u7684\u8d4b\u503c\u8bed\u53e5\u4e00\u540c\u7559\u5728\u5185\u90e8\u4f5c\u7528\u57df\u4e2d\u3002 \u63a5\u7740\uff0c\u4f7f\u7528\u4e86\u53d8\u91cf result \u7684 println! \u4e5f\u88ab\u79fb\u52a8\u5230\u5185\u90e8\u4f5c\u7528\u57df\u4e4b\u5916\u3002\u6ce8\u610f\u793a\u4f8b\u4e2d\u7684\u4ee3\u7801\u4e0d\u80fd\u901a\u8fc7\u7f16\u8bd1\uff1a // \u5c1d\u8bd5\u5728 string2 \u79bb\u5f00\u4f5c\u7528\u57df\u4e4b\u540e\u4f7f\u7528 result fn main () { let string1 = String :: from ( \"long string is long\" ); let result ; { let string2 = String :: from ( \"xyz\" ); result = longest ( string1 . as_str (), string2 . as_str ()); } println! ( \"The longest string is {}\" , result ); } \u5982\u679c\u5c1d\u8bd5\u7f16\u8bd1\u4f1a\u51fa\u73b0\u5982\u4e0b\u9519\u8bef\uff1a $ cargo run Compiling chapter10 v0 . 1.0 ( file : ///projects/chapter10) error [ E0597 ] : ` string2 ` does not live long enough - -> src / main . rs : 6 : 44 | 6 | result = longest ( string1 . as_str (), string2 . as_str ()); | ^^^^^^^^^^^^^^^^ borrowed value does not live long enough 7 | } | - ` string2 ` dropped here while still borrowed 8 | println! ( \"The longest string is {}\" , result ); | ------ borrow later used here For more information about this error , try ` rustc -- explain E0597 ` . error : could not compile ` chapter10 ` due to previous error \u9519\u8bef\u8868\u660e\u4e3a\u4e86\u4fdd\u8bc1 println! \u4e2d\u7684 result \u662f\u6709\u6548\u7684\uff0c string2 \u9700\u8981\u76f4\u5230\u5916\u90e8\u4f5c\u7528\u57df\u7ed3\u675f\u90fd\u662f\u6709\u6548\u7684\u3002Rust \u77e5\u9053\u8fd9\u4e9b\u662f\u56e0\u4e3a\uff08 longest \uff09\u51fd\u6570\u7684\u53c2\u6570\u548c\u8fd4\u56de\u503c\u90fd\u4f7f\u7528\u4e86\u76f8\u540c\u7684\u751f\u547d\u5468\u671f\u53c2\u6570 'a\u3002 \u5982\u679c\u4ece\u4eba\u7684\u89d2\u5ea6\u8bfb\u4e0a\u8ff0\u4ee3\u7801\uff0c\u6211\u4eec\u53ef\u80fd\u4f1a\u89c9\u5f97\u8fd9\u4e2a\u4ee3\u7801\u662f\u6b63\u786e\u7684\u3002 string1 \u66f4\u957f\uff0c\u56e0\u6b64 result \u4f1a\u5305\u542b\u6307\u5411 string1 \u7684\u5f15\u7528\u3002\u56e0\u4e3a string1 \u5c1a\u672a\u79bb\u5f00\u4f5c\u7528\u57df\uff0c\u5bf9\u4e8e println! \u6765\u8bf4 string1 \u7684\u5f15\u7528\u4ecd\u7136\u662f\u6709\u6548\u7684\u3002\u7136\u800c\uff0c\u6211\u4eec\u901a\u8fc7\u751f\u547d\u5468\u671f\u53c2\u6570\u544a\u8bc9 Rust \u7684\u662f\uff1a longest \u51fd\u6570\u8fd4\u56de\u7684\u5f15\u7528\u7684\u751f\u547d\u5468\u671f\u5e94\u8be5\u4e0e\u4f20\u5165\u53c2\u6570\u7684\u751f\u547d\u5468\u671f\u4e2d\u8f83\u77ed\u90a3\u4e2a\u4fdd\u6301\u4e00\u81f4\u3002 \u56e0\u6b64\uff0c\u501f\u7528\u68c0\u67e5\u5668\u4e0d\u5141\u8bb8\u793a\u4f8b\u4e2d\u7684\u4ee3\u7801\uff0c\u56e0\u4e3a\u5b83\u53ef\u80fd\u4f1a\u5b58\u5728\u65e0\u6548\u7684\u5f15\u7528\u3002 \u8bf7\u5c1d\u8bd5\u66f4\u591a\u91c7\u7528\u4e0d\u540c\u7684\u503c\u548c\u4e0d\u540c\u751f\u547d\u5468\u671f\u7684\u5f15\u7528\u4f5c\u4e3a longest \u51fd\u6570\u7684\u53c2\u6570\u548c\u8fd4\u56de\u503c\u7684\u5b9e\u9a8c\u3002\u5e76\u5728\u5f00\u59cb\u7f16\u8bd1\u524d\u731c\u60f3\u4f60\u7684\u5b9e\u9a8c\u80fd\u5426\u901a\u8fc7\u501f\u7528\u68c0\u67e5\u5668\uff0c\u63a5\u7740\u7f16\u8bd1\u4e00\u4e0b\u770b\u770b\u4f60\u7684\u7406\u89e3\u662f\u5426\u6b63\u786e\uff01","title":"\u51fd\u6570\u7b7e\u540d\u4e2d\u7684\u751f\u547d\u5468\u671f\u6ce8\u89e3"},{"location":"generics/#_14","text":"\u6307\u5b9a\u751f\u547d\u5468\u671f\u53c2\u6570\u7684\u6b63\u786e\u65b9\u5f0f\u4f9d\u8d56\u51fd\u6570\u5b9e\u73b0\u7684\u5177\u4f53\u529f\u80fd\u3002\u4f8b\u5982\uff0c\u5982\u679c\u5c06 longest \u51fd\u6570\u7684\u5b9e\u73b0\u4fee\u6539\u4e3a\u603b\u662f\u8fd4\u56de\u7b2c\u4e00\u4e2a\u53c2\u6570\u800c\u4e0d\u662f\u6700\u957f\u7684\u5b57\u7b26\u4e32 slice \uff0c\u5c31\u4e0d\u9700\u8981\u4e3a\u53c2\u6570 y \u6307\u5b9a\u4e00\u4e2a\u751f\u547d\u5468\u671f\u3002\u5982\u4e0b\u4ee3\u7801\u5c06\u80fd\u591f\u7f16\u8bd1\uff1a fn longest <' a > ( x : & ' a str , y : & str ) -> & ' a str { x } \u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u4e3a\u53c2\u6570 x \u548c\u8fd4\u56de\u503c\u6307\u5b9a\u4e86\u751f\u547d\u5468\u671f\u53c2\u6570 'a \uff0c\u4e0d\u8fc7\u6ca1\u6709\u4e3a\u53c2\u6570 y \u6307\u5b9a\uff0c\u56e0\u4e3a y \u7684\u751f\u547d\u5468\u671f\u4e0e\u53c2\u6570 x \u548c\u8fd4\u56de\u503c\u7684\u751f\u547d\u5468\u671f\u6ca1\u6709\u4efb\u4f55\u5173\u7cfb\u3002 \u5f53\u4ece\u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u5f15\u7528\uff0c\u8fd4\u56de\u503c\u7684\u751f\u547d\u5468\u671f\u53c2\u6570\u9700\u8981\u4e0e\u4e00\u4e2a\u53c2\u6570\u7684\u751f\u547d\u5468\u671f\u53c2\u6570\u76f8\u5339\u914d\u3002\u5982\u679c\u8fd4\u56de\u7684\u5f15\u7528 \u6ca1\u6709 \u6307\u5411\u4efb\u4f55\u4e00\u4e2a\u53c2\u6570\uff0c\u90a3\u4e48\u552f\u4e00\u7684\u53ef\u80fd\u5c31\u662f\u5b83\u6307\u5411\u4e00\u4e2a\u51fd\u6570\u5185\u90e8\u521b\u5efa\u7684\u503c\uff0c\u5b83\u5c06\u4f1a\u662f\u4e00\u4e2a\u60ac\u5782\u5f15\u7528\uff0c\u56e0\u4e3a\u5b83\u5c06\u4f1a\u5728\u51fd\u6570\u7ed3\u675f\u65f6\u79bb\u5f00\u4f5c\u7528\u57df\u3002\u5c1d\u8bd5\u8003\u8651\u8fd9\u4e2a\u5e76\u4e0d\u80fd\u7f16\u8bd1\u7684 longest \u51fd\u6570\u5b9e\u73b0\uff1a fn longest <' a > ( x : & str , y : & str ) -> & ' a str { let result = String :: from ( \"really long string\" ); result . as_str () } \u5373\u4fbf\u6211\u4eec\u4e3a\u8fd4\u56de\u503c\u6307\u5b9a\u4e86\u751f\u547d\u5468\u671f\u53c2\u6570 'a \uff0c\u8fd9\u4e2a\u5b9e\u73b0\u5374\u7f16\u8bd1\u5931\u8d25\u4e86\uff0c\u56e0\u4e3a\u8fd4\u56de\u503c\u7684\u751f\u547d\u5468\u671f\u4e0e\u53c2\u6570\u5b8c\u5168\u6ca1\u6709\u5173\u8054\u3002 \u8fd9\u91cc\u662f\u4f1a\u51fa\u73b0\u7684\u9519\u8bef\u4fe1\u606f\uff1a $ cargo run Compiling chapter10 v0 . 1.0 ( file : ///projects/chapter10) error [ E0515 ] : cannot return reference to local variable ` result ` - -> src / main . rs : 11 : 5 | 11 | result . as_str () | ^^^^^^^^^^^^^^^ returns a reference to data owned by the current function For more information about this error , try ` rustc -- explain E0515 ` . error : could not compile ` chapter10 ` due to previous error \u51fa\u73b0\u7684\u95ee\u9898\u662f result \u5728 longest \u51fd\u6570\u7684\u7ed3\u5c3e\u5c06\u79bb\u5f00\u4f5c\u7528\u57df\u5e76\u88ab\u6e05\u7406\uff0c\u800c\u6211\u4eec\u5c1d\u8bd5\u4ece\u51fd\u6570\u8fd4\u56de\u4e00\u4e2a result \u7684\u5f15\u7528\u3002 \u65e0\u6cd5\u6307\u5b9a\u751f\u547d\u5468\u671f\u53c2\u6570\u6765\u6539\u53d8\u60ac\u5782\u5f15\u7528\uff0c\u800c\u4e14 Rust \u4e5f\u4e0d\u5141\u8bb8\u6211\u4eec\u521b\u5efa\u4e00\u4e2a\u60ac\u5782\u5f15\u7528\u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\uff0c\u6700\u597d\u7684\u89e3\u51b3\u65b9\u6848\u662f\u8fd4\u56de\u4e00\u4e2a\u6709\u6240\u6709\u6743\u7684\u6570\u636e\u7c7b\u578b\u800c\u4e0d\u662f\u4e00\u4e2a\u5f15\u7528\uff0c\u8fd9\u6837\u51fd\u6570\u8c03\u7528\u8005\u5c31\u9700\u8981\u8d1f\u8d23\u6e05\u7406\u8fd9\u4e2a\u503c\u4e86\u3002 \u7efc\u4e0a\uff0c\u751f\u547d\u5468\u671f\u8bed\u6cd5\u662f\u7528\u4e8e\u5c06\u51fd\u6570\u7684\u591a\u4e2a\u53c2\u6570\u4e0e\u5176\u8fd4\u56de\u503c\u7684\u751f\u547d\u5468\u671f\u8fdb\u884c\u5173\u8054\u7684\u3002\u4e00\u65e6\u4ed6\u4eec\u5f62\u6210\u4e86\u67d0\u79cd\u5173\u8054\uff0cRust \u5c31\u6709\u4e86\u8db3\u591f\u7684\u4fe1\u606f\u6765\u5141\u8bb8\u5185\u5b58\u5b89\u5168\u7684\u64cd\u4f5c\u5e76\u963b\u6b62\u4f1a\u4ea7\u751f\u60ac\u5782\u6307\u9488\u4ea6\u6216\u662f\u8fdd\u53cd\u5185\u5b58\u5b89\u5168\u7684\u884c\u4e3a\u3002","title":"\u6df1\u5165\u7406\u89e3\u751f\u547d\u5468\u671f"},{"location":"generics/#_15","text":"\u76ee\u524d\u4e3a\u6b62\uff0c\u6211\u4eec\u53ea\u5b9a\u4e49\u8fc7\u6709\u6240\u6709\u6743\u7c7b\u578b\u7684\u7ed3\u6784\u4f53\u3002\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5c06\u5b9a\u4e49\u5305\u542b\u5f15\u7528\u7684\u7ed3\u6784\u4f53\uff0c\u4e0d\u8fc7\u8fd9\u9700\u8981\u4e3a\u7ed3\u6784\u4f53\u5b9a\u4e49\u4e2d\u7684\u6bcf\u4e00\u4e2a\u5f15\u7528\u6dfb\u52a0\u751f\u547d\u5468\u671f\u6ce8\u89e3\u3002\u793a\u4f8b\u4e2d\u6709\u4e00\u4e2a\u5b58\u653e\u4e86\u4e00\u4e2a\u5b57\u7b26\u4e32 slice \u7684\u7ed3\u6784\u4f53 ImportantExcerpt \uff1a // \u4e00\u4e2a\u5b58\u653e\u5f15\u7528\u7684\u7ed3\u6784\u4f53\uff0c\u6240\u4ee5\u5176\u5b9a\u4e49\u9700\u8981\u751f\u547d\u5468\u671f\u6ce8\u89e3 struct ImportantExcerpt <' a > { part : & ' a str , } fn main () { let novel = String :: from ( \"Call me Ishmael. Some years ago...\" ); let first_sentence = novel . split ( '.' ). next (). expect ( \"Could not find a '.'\" ); let i = ImportantExcerpt { part : first_sentence , }; } \u8fd9\u4e2a\u7ed3\u6784\u4f53\u6709\u4e00\u4e2a\u5b57\u6bb5\uff0c part \uff0c\u5b83\u5b58\u653e\u4e86\u4e00\u4e2a\u5b57\u7b26\u4e32 slice \uff0c\u8fd9\u662f\u4e00\u4e2a\u5f15\u7528\u3002\u7c7b\u4f3c\u4e8e\u6cdb\u578b\u53c2\u6570\u7c7b\u578b\uff0c\u5fc5\u987b\u5728\u7ed3\u6784\u4f53\u540d\u79f0\u540e\u9762\u7684\u5c16\u62ec\u53f7\u4e2d\u58f0\u660e\u6cdb\u578b\u751f\u547d\u5468\u671f\u53c2\u6570\uff0c\u4ee5\u4fbf\u5728\u7ed3\u6784\u4f53\u5b9a\u4e49\u4e2d\u4f7f\u7528\u751f\u547d\u5468\u671f\u53c2\u6570\u3002\u8fd9\u4e2a\u6ce8\u89e3\u610f\u5473\u7740 ImportantExcerpt \u7684\u5b9e\u4f8b\u4e0d\u80fd\u6bd4\u5176 part \u5b57\u6bb5\u4e2d\u7684\u5f15\u7528\u5b58\u5728\u7684\u66f4\u4e45\u3002 \u8fd9\u91cc\u7684 main \u51fd\u6570\u521b\u5efa\u4e86\u4e00\u4e2a ImportantExcerpt \u7684\u5b9e\u4f8b\uff0c\u5b83\u5b58\u653e\u4e86\u53d8\u91cf novel \u6240\u62e5\u6709\u7684 String \u7684\u7b2c\u4e00\u4e2a\u53e5\u5b50\u7684\u5f15\u7528\u3002 novel \u7684\u6570\u636e\u5728 ImportantExcerpt \u5b9e\u4f8b\u521b\u5efa\u4e4b\u524d\u5c31\u5b58\u5728\u3002\u53e6\u5916\uff0c\u76f4\u5230 ImportantExcerpt \u79bb\u5f00\u4f5c\u7528\u57df\u4e4b\u540e novel \u90fd\u4e0d\u4f1a\u79bb\u5f00\u4f5c\u7528\u57df\uff0c\u6240\u4ee5 ImportantExcerpt \u5b9e\u4f8b\u4e2d\u7684\u5f15\u7528\u662f\u6709\u6548\u7684\u3002","title":"\u7ed3\u6784\u4f53\u5b9a\u4e49\u4e2d\u7684\u751f\u547d\u5468\u671f\u6ce8\u89e3"},{"location":"generics/#lifetime-elision","text":"\u73b0\u5728\u6211\u4eec\u5df2\u7ecf\u77e5\u9053\u4e86\u6bcf\u4e00\u4e2a\u5f15\u7528\u90fd\u6709\u4e00\u4e2a\u751f\u547d\u5468\u671f\uff0c\u800c\u4e14\u6211\u4eec\u9700\u8981\u4e3a\u90a3\u4e9b\u4f7f\u7528\u4e86\u5f15\u7528\u7684\u51fd\u6570\u6216\u7ed3\u6784\u4f53\u6307\u5b9a\u751f\u547d\u5468\u671f\u3002 \u7136\u800c\uff0c\u7b2c\u56db\u7ae0\u4e2d\u6709\u4e00\u4e2a\u51fd\u6570\uff0c\u5982\u793a\u4f8b\u6240\u793a\uff0c\u5b83\u6ca1\u6709\u751f\u547d\u5468\u671f\u6ce8\u89e3\u5374\u80fd\u7f16\u8bd1\u6210\u529f\uff1a // \u5b9a\u4e49\u4e86\u4e00\u4e2a\u6ca1\u6709\u4f7f\u7528\u751f\u547d\u5468\u671f\u6ce8\u89e3\u7684\u51fd\u6570\uff0c\u5373\u4fbf\u5176\u53c2\u6570\u548c\u8fd4\u56de\u503c\u90fd\u662f\u5f15\u7528 fn first_word ( s : & str ) -> & str { let bytes = s . as_bytes (); for ( i , & item ) in bytes . iter (). enumerate () { if item == b' ' { return & s [ 0 .. i ]; } } & s [ .. ] } \u8fd9\u4e2a\u51fd\u6570\u6ca1\u6709\u751f\u547d\u5468\u671f\u6ce8\u89e3\u5374\u80fd\u7f16\u8bd1\u662f\u7531\u4e8e\u4e00\u4e9b\u5386\u53f2\u539f\u56e0\uff1a\u5728\u65e9\u671f\u7248\u672c\uff08pre-1.0\uff09\u7684 Rust \u4e2d\uff0c\u8fd9\u7684\u786e\u662f\u4e0d\u80fd\u7f16\u8bd1\u7684\u3002\u6bcf\u4e00\u4e2a\u5f15\u7528\u90fd\u5fc5\u987b\u6709\u660e\u786e\u7684\u751f\u547d\u5468\u671f\u3002\u90a3\u65f6\u7684\u51fd\u6570\u7b7e\u540d\u5c06\u4f1a\u5199\u6210\u8fd9\u6837\uff1a fn first_word <' a > ( s : & ' a str ) -> & ' a str { \u5728\u7f16\u5199\u4e86\u5f88\u591a Rust \u4ee3\u7801\u540e\uff0cRust \u56e2\u961f\u53d1\u73b0\u5728\u7279\u5b9a\u60c5\u51b5\u4e0b Rust \u7a0b\u5e8f\u5458\u4eec\u603b\u662f\u91cd\u590d\u5730\u7f16\u5199\u4e00\u6a21\u4e00\u6837\u7684\u751f\u547d\u5468\u671f\u6ce8\u89e3\u3002\u8fd9\u4e9b\u573a\u666f\u662f\u53ef\u9884\u6d4b\u7684\u5e76\u4e14\u9075\u5faa\u51e0\u4e2a\u660e\u786e\u7684\u6a21\u5f0f\u3002\u63a5\u7740 Rust \u56e2\u961f\u5c31\u628a\u8fd9\u4e9b\u6a21\u5f0f\u7f16\u7801\u8fdb\u4e86 Rust \u7f16\u8bd1\u5668\u4e2d\uff0c\u5982\u6b64\u501f\u7528\u68c0\u67e5\u5668\u5728\u8fd9\u4e9b\u60c5\u51b5\u4e0b\u5c31\u80fd\u63a8\u65ad\u51fa\u751f\u547d\u5468\u671f\u800c\u4e0d\u518d\u5f3a\u5236\u7a0b\u5e8f\u5458\u663e\u5f0f\u7684\u589e\u52a0\u6ce8\u89e3\u3002 \u8fd9\u91cc\u6211\u4eec\u63d0\u5230\u4e00\u4e9b Rust \u7684\u5386\u53f2\u662f\u56e0\u4e3a\u66f4\u591a\u7684\u660e\u786e\u7684\u6a21\u5f0f\u88ab\u5408\u5e76\u548c\u6dfb\u52a0\u5230\u7f16\u8bd1\u5668\u4e2d\u662f\u5b8c\u5168\u53ef\u80fd\u7684\u3002\u672a\u6765\u53ea\u4f1a\u9700\u8981\u66f4\u5c11\u7684\u751f\u547d\u5468\u671f\u6ce8\u89e3\u3002 \u88ab\u7f16\u7801\u8fdb Rust \u5f15\u7528\u5206\u6790\u7684\u6a21\u5f0f\u88ab\u79f0\u4e3a \u751f\u547d\u5468\u671f\u7701\u7565\u89c4\u5219 \uff08lifetime elision rules\uff09\u3002\u8fd9\u5e76\u4e0d\u662f\u9700\u8981\u7a0b\u5e8f\u5458\u9075\u5b88\u7684\u89c4\u5219\uff1b\u8fd9\u4e9b\u89c4\u5219\u662f\u4e00\u7cfb\u5217\u7279\u5b9a\u7684\u573a\u666f\uff0c\u6b64\u65f6\u7f16\u8bd1\u5668\u4f1a\u8003\u8651\uff0c\u5982\u679c\u4ee3\u7801\u7b26\u5408\u8fd9\u4e9b\u573a\u666f\uff0c\u5c31\u65e0\u9700\u660e\u786e\u6307\u5b9a\u751f\u547d\u5468\u671f\u3002 \u7701\u7565\u89c4\u5219\u5e76\u4e0d\u63d0\u4f9b\u5b8c\u6574\u7684\u63a8\u65ad\uff1a\u5982\u679c Rust \u5728\u660e\u786e\u9075\u5b88\u8fd9\u4e9b\u89c4\u5219\u7684\u524d\u63d0\u4e0b\u53d8\u91cf\u7684\u751f\u547d\u5468\u671f\u4ecd\u7136\u662f\u6a21\u68f1\u4e24\u53ef\u7684\u8bdd\uff0c\u5b83\u4e0d\u4f1a\u731c\u6d4b\u5269\u4f59\u5f15\u7528\u7684\u751f\u547d\u5468\u671f\u5e94\u8be5\u662f\u4ec0\u4e48\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\uff0c\u7f16\u8bd1\u5668\u4f1a\u7ed9\u51fa\u4e00\u4e2a\u9519\u8bef\uff0c\u8fd9\u53ef\u4ee5\u901a\u8fc7\u589e\u52a0\u5bf9\u5e94\u5f15\u7528\u4e4b\u95f4\u76f8\u8054\u7cfb\u7684\u751f\u547d\u5468\u671f\u6ce8\u89e3\u6765\u89e3\u51b3\u3002 \u51fd\u6570\u6216\u65b9\u6cd5\u7684\u53c2\u6570\u7684\u751f\u547d\u5468\u671f\u88ab\u79f0\u4e3a \u8f93\u5165\u751f\u547d\u5468\u671f \uff08input lifetimes\uff09\uff0c\u800c\u8fd4\u56de\u503c\u7684\u751f\u547d\u5468\u671f\u88ab\u79f0\u4e3a \u8f93\u51fa\u751f\u547d\u5468\u671f \uff08output lifetimes\uff09\u3002 \u7f16\u8bd1\u5668\u91c7\u7528\u4e09\u6761\u89c4\u5219\u6765\u5224\u65ad\u5f15\u7528\u4f55\u65f6\u4e0d\u9700\u8981\u660e\u786e\u7684\u6ce8\u89e3\u3002\u7b2c\u4e00\u6761\u89c4\u5219\u9002\u7528\u4e8e \u8f93\u5165\u751f\u547d\u5468\u671f \uff0c\u540e\u4e24\u6761\u89c4\u5219\u9002\u7528\u4e8e\u8f93\u51fa\u751f\u547d\u5468\u671f\u3002\u5982\u679c\u7f16\u8bd1\u5668\u68c0\u67e5\u5b8c\u8fd9\u4e09\u6761\u89c4\u5219\u540e\u4ecd\u7136\u5b58\u5728\u6ca1\u6709\u8ba1\u7b97\u51fa\u751f\u547d\u5468\u671f\u7684\u5f15\u7528\uff0c\u7f16\u8bd1\u5668\u5c06\u4f1a\u505c\u6b62\u5e76\u751f\u6210\u9519\u8bef\u3002\u8fd9\u4e9b\u89c4\u5219\u9002\u7528\u4e8e fn \u5b9a\u4e49\uff0c\u4ee5\u53ca impl \u5757\u3002 \u7b2c\u4e00\u6761\u89c4\u5219\u662f\u6bcf\u4e00\u4e2a\u662f\u5f15\u7528\u7684\u53c2\u6570\u90fd\u6709\u5b83\u81ea\u5df1\u7684\u751f\u547d\u5468\u671f\u53c2\u6570\u3002\u6362\u53e5\u8bdd\u8bf4\u5c31\u662f\uff0c\u6709\u4e00\u4e2a\u5f15\u7528\u53c2\u6570\u7684\u51fd\u6570\u6709\u4e00\u4e2a\u751f\u547d\u5468\u671f\u53c2\u6570\uff1a fn foo<'a>(x: &'a i32) \uff0c\u6709\u4e24\u4e2a\u5f15\u7528\u53c2\u6570\u7684\u51fd\u6570\u6709\u4e24\u4e2a\u4e0d\u540c\u7684\u751f\u547d\u5468\u671f\u53c2\u6570\uff0c fn foo<'a, 'b>(x: &'a i32, y: &'b i32) \uff0c\u4f9d\u6b64\u7c7b\u63a8\u3002 \u7b2c\u4e8c\u6761\u89c4\u5219\u662f\u5982\u679c\u53ea\u6709\u4e00\u4e2a\u8f93\u5165\u751f\u547d\u5468\u671f\u53c2\u6570\uff0c\u90a3\u4e48\u5b83\u88ab\u8d4b\u4e88\u6240\u6709\u8f93\u51fa\u751f\u547d\u5468\u671f\u53c2\u6570\uff1a fn foo<'a>(x: &'a i32) -> &'a i32 \u3002 \u7b2c\u4e09\u6761\u89c4\u5219\u662f\u5982\u679c\u65b9\u6cd5\u6709\u591a\u4e2a\u8f93\u5165\u751f\u547d\u5468\u671f\u53c2\u6570\u5e76\u4e14\u5176\u4e2d\u4e00\u4e2a\u53c2\u6570\u662f &self \u6216 &mut self \uff0c\u8bf4\u660e\u662f\u4e2a\u5bf9\u8c61\u7684\u65b9\u6cd5(method)(\u8bd1\u8005\u6ce8\uff1a \u8fd9\u91cc\u6d89\u53carust\u7684\u9762\u5411\u5bf9\u8c61\u53c2\u89c117\u7ae0)\uff0c\u90a3\u4e48\u6240\u6709\u8f93\u51fa\u751f\u547d\u5468\u671f\u53c2\u6570\u88ab\u8d4b\u4e88 self \u7684\u751f\u547d\u5468\u671f\u3002\u7b2c\u4e09\u6761\u89c4\u5219\u4f7f\u5f97\u65b9\u6cd5\u66f4\u5bb9\u6613\u8bfb\u5199\uff0c\u56e0\u4e3a\u53ea\u9700\u66f4\u5c11\u7684\u7b26\u53f7\u3002 \u5047\u8bbe\u6211\u4eec\u81ea\u5df1\u5c31\u662f\u7f16\u8bd1\u5668\u3002\u5e76\u5e94\u7528\u8fd9\u4e9b\u89c4\u5219\u6765\u8ba1\u7b97\u793a\u4f8b 10-26 \u4e2d first_word \u51fd\u6570\u7b7e\u540d\u4e2d\u7684\u5f15\u7528\u7684\u751f\u547d\u5468\u671f\u3002\u5f00\u59cb\u65f6\u7b7e\u540d\u4e2d\u7684\u5f15\u7528\u5e76\u6ca1\u6709\u5173\u8054\u4efb\u4f55\u751f\u547d\u5468\u671f\uff1a fn first_word ( s : & str ) -> & str { \u63a5\u7740\u7f16\u8bd1\u5668\u5e94\u7528\u7b2c\u4e00\u6761\u89c4\u5219\uff0c\u4e5f\u5c31\u662f\u6bcf\u4e2a\u5f15\u7528\u53c2\u6570\u90fd\u6709\u5176\u81ea\u5df1\u7684\u751f\u547d\u5468\u671f\u3002\u6211\u4eec\u50cf\u5f80\u5e38\u4e00\u6837\u79f0\u4e4b\u4e3a 'a \uff0c\u6240\u4ee5\u73b0\u5728\u7b7e\u540d\u770b\u8d77\u6765\u50cf\u8fd9\u6837\uff1a fn first_word <' a > ( s : & ' a str ) -> & str { \u5bf9\u4e8e\u7b2c\u4e8c\u6761\u89c4\u5219\uff0c\u56e0\u4e3a\u8fd9\u91cc\u6b63\u597d\u53ea\u6709\u4e00\u4e2a\u8f93\u5165\u751f\u547d\u5468\u671f\u53c2\u6570\u6240\u4ee5\u662f\u9002\u7528\u7684\u3002\u7b2c\u4e8c\u6761\u89c4\u5219\u8868\u660e\u8f93\u5165\u53c2\u6570\u7684\u751f\u547d\u5468\u671f\u5c06\u88ab\u8d4b\u4e88\u8f93\u51fa\u751f\u547d\u5468\u671f\u53c2\u6570\uff0c\u6240\u4ee5\u73b0\u5728\u7b7e\u540d\u770b\u8d77\u6765\u50cf\u8fd9\u6837\uff1a fn first_word <' a > ( s : & ' a str ) -> & ' a str { \u73b0\u5728\u8fd9\u4e2a\u51fd\u6570\u7b7e\u540d\u4e2d\u7684\u6240\u6709\u5f15\u7528\u90fd\u6709\u4e86\u751f\u547d\u5468\u671f\uff0c\u5982\u6b64\u7f16\u8bd1\u5668\u53ef\u4ee5\u7ee7\u7eed\u5b83\u7684\u5206\u6790\u800c\u65e0\u987b\u7a0b\u5e8f\u5458\u6807\u8bb0\u8fd9\u4e2a\u51fd\u6570\u7b7e\u540d\u4e2d\u7684\u751f\u547d\u5468\u671f\u3002 \u8ba9\u6211\u4eec\u518d\u770b\u770b\u53e6\u4e00\u4e2a\u4f8b\u5b50\uff0c\u8fd9\u6b21\u6211\u4eec\u4ece\u793a\u4f8b\u4e2d\u6ca1\u6709\u751f\u547d\u5468\u671f\u53c2\u6570\u7684 longest \u51fd\u6570\u5f00\u59cb\uff1a fn longest ( x : & str , y : & str ) -> & str { \u518d\u6b21\u5047\u8bbe\u6211\u4eec\u81ea\u5df1\u5c31\u662f\u7f16\u8bd1\u5668\u5e76\u5e94\u7528\u7b2c\u4e00\u6761\u89c4\u5219\uff1a\u6bcf\u4e2a\u5f15\u7528\u53c2\u6570\u90fd\u6709\u5176\u81ea\u5df1\u7684\u751f\u547d\u5468\u671f\u3002\u8fd9\u6b21\u6709\u4e24\u4e2a\u53c2\u6570\uff0c\u6240\u4ee5\u5c31\u6709\u4e24\u4e2a\uff08\u4e0d\u540c\u7684\uff09\u751f\u547d\u5468\u671f\uff1a fn longest <' a , ' b > ( x : & ' a str , y : & ' b str ) -> & str { \u518d\u6765\u5e94\u7528\u7b2c\u4e8c\u6761\u89c4\u5219\uff0c\u56e0\u4e3a\u51fd\u6570\u5b58\u5728\u591a\u4e2a\u8f93\u5165\u751f\u547d\u5468\u671f\uff0c\u5b83\u5e76\u4e0d\u9002\u7528\u4e8e\u8fd9\u79cd\u60c5\u51b5\u3002\u518d\u6765\u770b\u7b2c\u4e09\u6761\u89c4\u5219\uff0c\u5b83\u540c\u6837\u4e5f\u4e0d\u9002\u7528\uff0c\u8fd9\u662f\u56e0\u4e3a\u6ca1\u6709 self \u53c2\u6570\u3002\u5e94\u7528\u4e86\u4e09\u4e2a\u89c4\u5219\u4e4b\u540e\u7f16\u8bd1\u5668\u8fd8\u6ca1\u6709\u8ba1\u7b97\u51fa\u8fd4\u56de\u503c\u7c7b\u578b\u7684\u751f\u547d\u5468\u671f\u3002\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u5728\u7f16\u8bd1\u4ee3\u7801\u65f6\u4f1a\u51fa\u73b0\u9519\u8bef\u7684\u539f\u56e0\uff1a \u7f16\u8bd1\u5668\u4f7f\u7528\u6240\u6709\u5df2\u77e5\u7684\u751f\u547d\u5468\u671f\u7701\u7565\u89c4\u5219\uff0c\u4ecd\u4e0d\u80fd\u8ba1\u7b97\u51fa\u7b7e\u540d\u4e2d\u6240\u6709\u5f15\u7528\u7684\u751f\u547d\u5468\u671f\u3002 \u56e0\u4e3a\u7b2c\u4e09\u6761\u89c4\u5219\u771f\u6b63\u80fd\u591f\u9002\u7528\u7684\u5c31\u53ea\u6709\u65b9\u6cd5\u7b7e\u540d\uff0c\u73b0\u5728\u5c31\u8ba9\u6211\u4eec\u770b\u770b\u90a3\u79cd\u60c5\u51b5\u4e2d\u7684\u751f\u547d\u5468\u671f\uff0c\u5e76\u770b\u770b\u4e3a\u4ec0\u4e48\u8fd9\u6761\u89c4\u5219\u610f\u5473\u7740\u6211\u4eec\u7ecf\u5e38\u4e0d\u9700\u8981\u5728\u65b9\u6cd5\u7b7e\u540d\u4e2d\u6807\u6ce8\u751f\u547d\u5468\u671f\u3002","title":"\u751f\u547d\u5468\u671f\u7701\u7565\uff08Lifetime Elision\uff09"},{"location":"generics/#_16","text":"\u5f53\u4e3a\u5e26\u6709\u751f\u547d\u5468\u671f\u7684\u7ed3\u6784\u4f53\u5b9e\u73b0\u65b9\u6cd5\u65f6\uff0c\u5176\u8bed\u6cd5\u4f9d\u7136\u7c7b\u4f3c\u793a\u4f8b\u4e2d\u5c55\u793a\u7684\u6cdb\u578b\u7c7b\u578b\u53c2\u6570\u7684\u8bed\u6cd5\u3002 \u58f0\u660e\u548c\u4f7f\u7528\u751f\u547d\u5468\u671f\u53c2\u6570\u7684\u4f4d\u7f6e\u4f9d\u8d56\u4e8e\u751f\u547d\u5468\u671f\u53c2\u6570\u662f\u5426\u540c\u7ed3\u6784\u4f53\u5b57\u6bb5\u6216\u65b9\u6cd5\u53c2\u6570\u548c\u8fd4\u56de\u503c\u76f8\u5173\u3002 \uff08\u5b9e\u73b0\u65b9\u6cd5\u65f6\uff09\u7ed3\u6784\u4f53\u5b57\u6bb5\u7684\u751f\u547d\u5468\u671f\u5fc5\u987b\u603b\u662f\u5728 impl \u5173\u952e\u5b57\u4e4b\u540e\u58f0\u660e\u5e76\u5728\u7ed3\u6784\u4f53\u540d\u79f0\u4e4b\u540e\u88ab\u4f7f\u7528\uff0c\u56e0\u4e3a\u8fd9\u4e9b\u751f\u547d\u5468\u671f\u662f\u7ed3\u6784\u4f53\u7c7b\u578b\u7684\u4e00\u90e8\u5206\u3002 impl \u5757\u91cc\u7684\u65b9\u6cd5\u7b7e\u540d\u4e2d\uff0c\u5f15\u7528\u53ef\u80fd\u4e0e\u7ed3\u6784\u4f53\u5b57\u6bb5\u4e2d\u7684\u5f15\u7528\u76f8\u5173\u8054\uff0c\u4e5f\u53ef\u80fd\u662f\u72ec\u7acb\u7684\u3002 \u53e6\u5916\uff0c\u751f\u547d\u5468\u671f\u7701\u7565\u89c4\u5219\u4e5f\u7ecf\u5e38\u8ba9\u6211\u4eec\u65e0\u9700\u5728\u65b9\u6cd5\u7b7e\u540d\u4e2d\u4f7f\u7528\u751f\u547d\u5468\u671f\u6ce8\u89e3\u3002\u8ba9\u6211\u4eec\u770b\u770b\u4e00\u4e9b\u4f7f\u7528\u793a\u4f8b\u4e2d\u5b9a\u4e49\u7684\u7ed3\u6784\u4f53 ImportantExcerpt \u7684\u4f8b\u5b50\u3002 \u9996\u5148\uff0c\u8fd9\u91cc\u6709\u4e00\u4e2a\u65b9\u6cd5 level \u3002\u5176\u552f\u4e00\u7684\u53c2\u6570\u662f self \u7684\u5f15\u7528\uff0c\u800c\u4e14\u8fd4\u56de\u503c\u53ea\u662f\u4e00\u4e2a i32 \uff0c\u5e76\u4e0d\u5f15\u7528\u4efb\u4f55\u503c\uff1a impl <' a > ImportantExcerpt <' a > { fn level ( & self ) -> i32 { 3 } } impl \u4e4b\u540e\u548c\u7c7b\u578b\u540d\u79f0\u4e4b\u540e\u7684\u751f\u547d\u5468\u671f\u53c2\u6570\u662f\u5fc5\u8981\u7684\uff0c\u4e0d\u8fc7\u56e0\u4e3a\u7b2c\u4e00\u6761\u751f\u547d\u5468\u671f\u89c4\u5219\u6211\u4eec\u5e76\u4e0d\u5fc5\u987b\u6807\u6ce8 self \u5f15\u7528\u7684\u751f\u547d\u5468\u671f\u3002 \u8fd9\u91cc\u662f\u4e00\u4e2a\u9002\u7528\u4e8e\u7b2c\u4e09\u6761\u751f\u547d\u5468\u671f\u7701\u7565\u89c4\u5219\u7684\u4f8b\u5b50\uff1a impl <' a > ImportantExcerpt <' a > { fn announce_and_return_part ( & self , announcement : & str ) -> & str { println! ( \"Attention please: {}\" , announcement ); self . part } } \u8fd9\u91cc\u6709\u4e24\u4e2a\u8f93\u5165\u751f\u547d\u5468\u671f\uff0c\u6240\u4ee5 Rust \u5e94\u7528\u7b2c\u4e00\u6761\u751f\u547d\u5468\u671f\u7701\u7565\u89c4\u5219\u5e76\u7ed9\u4e88 &self \u548c announcement \u4ed6\u4eec\u5404\u81ea\u7684\u751f\u547d\u5468\u671f\u3002\u63a5\u7740\uff0c\u56e0\u4e3a\u5176\u4e2d\u4e00\u4e2a\u53c2\u6570\u662f &self \uff0c\u8fd4\u56de\u503c\u7c7b\u578b\u88ab\u8d4b\u4e88\u4e86 &self \u7684\u751f\u547d\u5468\u671f\uff0c\u8fd9\u6837\u6240\u6709\u7684\u751f\u547d\u5468\u671f\u90fd\u88ab\u8ba1\u7b97\u51fa\u6765\u4e86\u3002","title":"\u65b9\u6cd5\u5b9a\u4e49\u4e2d\u7684\u751f\u547d\u5468\u671f\u6ce8\u89e3"},{"location":"generics/#_17","text":"\u8fd9\u91cc\u6709\u4e00\u79cd\u7279\u6b8a\u7684\u751f\u547d\u5468\u671f\u503c\u5f97\u8ba8\u8bba\uff1a 'static \uff0c\u5176\u751f\u547d\u5468\u671f\u80fd\u591f\u5b58\u6d3b\u4e8e\u6574\u4e2a\u7a0b\u5e8f\u671f\u95f4\u3002\u6240\u6709\u7684\u5b57\u7b26\u4e32\u5b57\u9762\u503c\u90fd\u62e5\u6709 'static \u751f\u547d\u5468\u671f\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u9009\u62e9\u50cf\u4e0b\u9762\u8fd9\u6837\u6807\u6ce8\u51fa\u6765\uff1a let s : & ' static str = \"I have a static lifetime.\" ; \u8fd9\u4e2a\u5b57\u7b26\u4e32\u7684\u6587\u672c\u88ab\u76f4\u63a5\u50a8\u5b58\u5728\u7a0b\u5e8f\u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\u4e2d\u800c\u8fd9\u4e2a\u6587\u4ef6\u603b\u662f\u53ef\u7528\u7684\u3002\u56e0\u6b64\u6240\u6709\u7684\u5b57\u7b26\u4e32\u5b57\u9762\u503c\u90fd\u662f 'static \u7684\u3002 \u4f60\u53ef\u80fd\u5728\u9519\u8bef\u4fe1\u606f\u7684\u5e2e\u52a9\u6587\u672c\u4e2d\u89c1\u8fc7\u4f7f\u7528 'static \u751f\u547d\u5468\u671f\u7684\u5efa\u8bae\uff0c\u4e0d\u8fc7\u5c06\u5f15\u7528\u6307\u5b9a\u4e3a 'static \u4e4b\u524d\uff0c\u601d\u8003\u4e00\u4e0b\u8fd9\u4e2a\u5f15\u7528\u662f\u5426\u771f\u7684\u5728\u6574\u4e2a\u7a0b\u5e8f\u7684\u751f\u547d\u5468\u671f\u91cc\u90fd\u6709\u6548\u3002 \u4f60\u4e5f\u8bb8\u8981\u8003\u8651\u662f\u5426\u5e0c\u671b\u5b83\u5b58\u5728\u5f97\u8fd9\u4e48\u4e45\uff0c\u5373\u4f7f\u8fd9\u662f\u53ef\u80fd\u7684\u3002\u5927\u90e8\u5206\u60c5\u51b5\uff0c\u4ee3\u7801\u4e2d\u7684\u95ee\u9898\u662f\u5c1d\u8bd5\u521b\u5efa\u4e00\u4e2a\u60ac\u5782\u5f15\u7528\u6216\u8005\u53ef\u7528\u7684\u751f\u547d\u5468\u671f\u4e0d\u5339\u914d\uff0c\u8bf7\u89e3\u51b3\u8fd9\u4e9b\u95ee\u9898\u800c\u4e0d\u662f\u6307\u5b9a\u4e00\u4e2a 'static \u7684\u751f\u547d\u5468\u671f\u3002","title":"\u9759\u6001\u751f\u547d\u5468\u671f"},{"location":"generics/#trait-bounds","text":"\u8ba9\u6211\u4eec\u7b80\u8981\u7684\u770b\u4e00\u4e0b\u5728\u540c\u4e00\u51fd\u6570\u4e2d\u6307\u5b9a \u6cdb\u578b\u7c7b\u578b\u53c2\u6570 \u3001 trait bounds \u548c \u751f\u547d\u5468\u671f \u7684\u8bed\u6cd5\uff01 use std :: fmt :: Display ; fn longest_with_an_announcement <' a , T > ( x : & ' a str , y : & ' a str , ann : T , ) -> & ' a str where T : Display , { println! ( \"Announcement! {}\" , ann ); if x . len () > y . len () { x } else { y } } \u8fd9\u4e2a\u662f\u793a\u4f8b\u4e2d\u90a3\u4e2a\u8fd4\u56de\u4e24\u4e2a\u5b57\u7b26\u4e32 slice \u4e2d\u8f83\u957f\u8005\u7684 longest \u51fd\u6570\uff0c\u4e0d\u8fc7\u5e26\u6709\u4e00\u4e2a\u989d\u5916\u7684\u53c2\u6570 ann \u3002 ann \u7684\u7c7b\u578b\u662f\u6cdb\u578b T \uff0c\u5b83\u53ef\u4ee5\u88ab\u653e\u5165\u4efb\u4f55\u5b9e\u73b0\u4e86 where \u4ece\u53e5\u4e2d\u6307\u5b9a\u7684 Display trait \u7684\u7c7b\u578b\u3002\u8fd9\u4e2a\u989d\u5916\u7684\u53c2\u6570\u4f1a\u4f7f\u7528 {} \u6253\u5370\uff0c\u8fd9\u4e5f\u5c31\u662f\u4e3a\u4ec0\u4e48 Display trait bound \u662f\u5fc5\u987b\u7684\u3002 \u56e0\u4e3a\u751f\u547d\u5468\u671f\u4e5f\u662f\u6cdb\u578b\uff0c\u6240\u4ee5\u751f\u547d\u5468\u671f\u53c2\u6570 'a \u548c\u6cdb\u578b\u7c7b\u578b\u53c2\u6570 T \u90fd\u4f4d\u4e8e\u51fd\u6570\u540d\u540e\u7684\u540c\u4e00\u5c16\u62ec\u53f7\u5217\u8868\u4e2d\u3002","title":"\u7ed3\u5408\u6cdb\u578b\u7c7b\u578b\u53c2\u6570\u3001trait bounds \u548c\u751f\u547d\u5468\u671f"},{"location":"generics/#_18","text":"\u73b0\u5728\u4f60\u77e5\u9053\u4e86 \u6cdb\u578b\u7c7b\u578b\u53c2\u6570 \u3001 trait \u548c trait bounds \u4ee5\u53ca \u6cdb\u578b\u751f\u547d\u5468\u671f\u7c7b\u578b \uff0c\u4f60\u5df2\u7ecf\u51c6\u5907\u597d\u7f16\u5199\u65e2\u4e0d\u91cd\u590d\u53c8\u80fd\u9002\u7528\u4e8e\u591a\u79cd\u573a\u666f\u7684\u4ee3\u7801\u4e86\u3002\u6cdb\u578b\u7c7b\u578b\u53c2\u6570\u610f\u5473\u7740\u4ee3\u7801\u53ef\u4ee5\u9002\u7528\u4e8e\u4e0d\u540c\u7684\u7c7b\u578b\u3002 trait \u548c trait bounds \u4fdd\u8bc1\u4e86\u5373\u4f7f\u7c7b\u578b\u662f\u6cdb\u578b\u7684\uff0c\u8fd9\u4e9b\u7c7b\u578b\u4e5f\u4f1a\u62e5\u6709\u6240\u9700\u8981\u7684\u884c\u4e3a\u3002 \u7531\u751f\u547d\u5468\u671f\u6ce8\u89e3\u6240\u6307\u5b9a\u7684\u5f15\u7528\u751f\u547d\u5468\u671f\u4e4b\u95f4\u7684\u5173\u7cfb\u4fdd\u8bc1\u4e86\u8fd9\u4e9b\u7075\u6d3b\u591a\u53d8\u7684\u4ee3\u7801\u4e0d\u4f1a\u51fa\u73b0\u60ac\u5782\u5f15\u7528\u3002\u800c\u6240\u6709\u7684\u8fd9\u4e00\u5207\u53d1\u751f\u5728\u7f16\u8bd1\u65f6\u6240\u4ee5\u4e0d\u4f1a\u5f71\u54cd\u8fd0\u884c\u65f6\u6548\u7387\uff01 \u4f60\u53ef\u80fd\u4e0d\u4f1a\u76f8\u4fe1\uff0c\u8fd9\u4e2a\u8bdd\u9898\u8fd8\u6709\u66f4\u591a\u9700\u8981\u5b66\u4e60\u7684\u5185\u5bb9\uff1a\u7b2c\u5341\u4e03\u7ae0\u4f1a\u8ba8\u8bba trait \u5bf9\u8c61\uff0c\u8fd9\u662f\u53e6\u4e00\u79cd\u4f7f\u7528 trait \u7684\u65b9\u5f0f\u3002\u8fd8\u6709\u66f4\u591a\u66f4\u590d\u6742\u7684\u6d89\u53ca\u751f\u547d\u5468\u671f\u6ce8\u89e3\u7684\u573a\u666f\uff0c\u53ea\u6709\u5728\u975e\u5e38\u9ad8\u7ea7\u7684\u60c5\u51b5\u4e0b\u624d\u4f1a\u9700\u8981\u5b83\u4eec\uff1b\u5bf9\u4e8e\u8fd9\u4e9b\u5185\u5bb9\uff0c\u8bf7\u9605\u8bfb Rust Reference \u3002\u4e0d\u8fc7\u63a5\u4e0b\u6765\uff0c\u8ba9\u6211\u4eec\u804a\u804a\u5982\u4f55\u5728 Rust \u4e2d\u7f16\u5199\u6d4b\u8bd5\uff0c\u6765\u786e\u4fdd\u4ee3\u7801\u7684\u6240\u6709\u529f\u80fd\u80fd\u50cf\u6211\u4eec\u5e0c\u671b\u7684\u90a3\u6837\u5de5\u4f5c\uff01","title":"\u603b\u7ed3"},{"location":"guessing-game/","text":"\u731c\u6570\u6e38\u620f \u521b\u5efa\u65b0\u9879\u76ee cargo new guessing_game cd guessing_game \u5904\u7406\u4e00\u6b21\u731c\u6d4b\u8f93\u5165 \u6587\u4ef6\u540d: src/main.rs // \u9884\u5bfc\u5165 // io\u8f93\u5165/\u8f93\u51fa\u5e93\u5f15\u5165\u5f53\u524d\u4f5c\u7528\u57df; // io \u5e93\u6765\u81ea\u4e8e\u6807\u51c6\u5e93\uff0c\u4e5f\u88ab\u79f0\u4e3a std use std :: io ; // main \u51fd\u6570\u662f\u7a0b\u5e8f\u7684\u5165\u53e3\u70b9 // fn \u8bed\u6cd5\u58f0\u660e\u4e86\u4e00\u4e2a\u65b0\u51fd\u6570 // () \u8868\u660e\u6ca1\u6709\u53c2\u6570 // { \u4f5c\u4e3a\u51fd\u6570\u4f53\u7684\u5f00\u59cb fn main () { println! ( \"Guess the number!\" ); // println! \u662f\u4e00\u4e2a\u5728\u5c4f\u5e55\u4e0a\u6253\u5370\u5b57\u7b26\u4e32\u7684\u5b8f println! ( \"Please input your guess.\" ); // println! \u662f\u4e00\u4e2a\u5728\u5c4f\u5e55\u4e0a\u6253\u5370\u5b57\u7b26\u4e32\u7684\u5b8f // \u521b\u5efa\u4e00\u4e2a \u53d8\u91cf\uff08variable\uff09\u6765\u50a8\u5b58\u7528\u6237\u8f93\u5165 // \u5728 Rust \u4e2d\uff0c\u53d8\u91cf\u9ed8\u8ba4\u662f\u4e0d\u53ef\u53d8\u7684\uff0c\u8fd9\u610f\u5473\u7740\u4e00\u65e6\u6211\u4eec\u7ed9\u53d8\u91cf\u8d4b\u503c\uff0c\u8fd9\u4e2a\u503c\u5c31\u4e0d\u518d\u53ef\u4ee5\u4fee\u6539\u4e86\u3002 let mut guess = String :: new (); // \u5728\u53d8\u91cf\u540d\u524d\u4f7f\u7528 mut \u6765\u4f7f\u4e00\u4e2a\u53d8\u91cf\u53ef\u53d8 // String \u662f\u4e00\u4e2a\u6807\u51c6\u5e93\u63d0\u4f9b\u7684\u5b57\u7b26\u4e32\u7c7b\u578b\uff0c\u5b83\u662f UTF-8 \u7f16\u7801\u7684\u53ef\u589e\u957f\u6587\u672c\u5757\u3002 // ::new \u90a3\u4e00\u884c\u7684 :: \u8bed\u6cd5\u8868\u660e new \u662f String \u7c7b\u578b\u7684\u4e00\u4e2a \u5173\u8054\u51fd\u6570\uff08associated function\uff09\u3002 // \u5173\u8054\u51fd\u6570\u662f\u9488\u5bf9\u7c7b\u578b\u5b9e\u73b0\u7684\uff0c\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\u662f String\uff0c\u800c\u4e0d\u662f String \u7684\u67d0\u4e2a\u7279\u5b9a\u5b9e\u4f8b\u3002\u4e00\u4e9b\u8bed\u8a00\u4e2d\u628a\u5b83\u79f0\u4e3a \u9759\u6001\u65b9\u6cd5\uff08static method\uff09\u3002 // new \u51fd\u6570\u521b\u5efa\u4e86\u4e00\u4e2a\u65b0\u7684\u7a7a\u5b57\u7b26\u4e32\uff0c\u4f60\u4f1a\u53d1\u73b0\u5f88\u591a\u7c7b\u578b\u4e0a\u6709 new \u51fd\u6570\uff0c\u56e0\u4e3a\u5b83\u662f\u521b\u5efa\u7c7b\u578b\u5b9e\u4f8b\u7684\u60ef\u7528\u51fd\u6570\u540d\u3002 // \u603b\u7684\u6765\u8bf4\uff0clet mut guess = String::new(); \u8fd9\u4e00\u884c\u521b\u5efa\u4e86\u4e00\u4e2a\u53ef\u53d8\u53d8\u91cf\uff0c\u5f53\u524d\u5b83\u7ed1\u5b9a\u5230\u4e00\u4e2a\u65b0\u7684 String \u7a7a\u5b9e\u4f8b\u4e0a\u3002 // \u5982\u679c\u7a0b\u5e8f\u7684\u5f00\u5934\u6ca1\u6709\u4f7f\u7528 use std::io \u5f15\u5165 io \u5e93\uff0c\u6211\u4eec\u4ecd\u53ef\u4ee5\u901a\u8fc7\u628a\u51fd\u6570\u8c03\u7528\u5199\u6210 std::io::stdin \u6765\u4f7f\u7528\u51fd\u6570\u3002 // stdin \u51fd\u6570\u8fd4\u56de\u4e00\u4e2a std::io::Stdin \u7684\u5b9e\u4f8b\uff0c\u8fd9\u4ee3\u8868\u7ec8\u7aef\u6807\u51c6\u8f93\u5165\u53e5\u67c4\u7684\u7c7b\u578b\u3002 io :: stdin () . read_line ( & mut guess ) // \u4ece\u6807\u51c6\u8f93\u5165\u53e5\u67c4\u83b7\u53d6\u7528\u6237\u8f93\u5165\u3002 // \u5c06 &mut guess \u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\u7ed9 read_line() \u51fd\u6570\uff0c\u8ba9\u5176\u5c06\u7528\u6237\u8f93\u5165\u50a8\u5b58\u5230\u8fd9\u4e2a\u5b57\u7b26\u4e32\u4e2d\u3002 // read_line \u7684\u5de5\u4f5c\u662f\uff0c\u65e0\u8bba\u7528\u6237\u5728\u6807\u51c6\u8f93\u5165\u4e2d\u952e\u5165\u4ec0\u4e48\u5185\u5bb9\uff0c\u90fd\u5c06\u5176\u8ffd\u52a0\uff08\u4e0d\u4f1a\u8986\u76d6\u5176\u539f\u6709\u5185\u5bb9\uff09\u5230\u4e00\u4e2a\u5b57\u7b26\u4e32\u4e2d\uff0c\u56e0\u6b64\u5b83\u9700\u8981\u5b57\u7b26\u4e32\u4f5c\u4e3a\u53c2\u6570\u3002 // \u8fd9\u4e2a\u5b57\u7b26\u4e32\u53c2\u6570\u5e94\u8be5\u662f\u53ef\u53d8\u7684\uff0c\u4ee5\u4fbf read_line \u5c06\u7528\u6237\u8f93\u5165\u9644\u52a0\u4e0a\u53bb\u3002 // & \u8868\u793a\u8fd9\u4e2a\u53c2\u6570\u662f\u4e00\u4e2a \u5f15\u7528\uff08reference\uff09\uff0c\u5b83\u5141\u8bb8\u591a\u5904\u4ee3\u7801\u8bbf\u95ee\u540c\u4e00\u5904\u6570\u636e\uff0c\u800c\u65e0\u9700\u5728\u5185\u5b58\u4e2d\u591a\u6b21\u62f7\u8d1d\u3002 . expect ( \"Failed to read line\" ); // \u4f1a\u8fd4\u56de\u4e00\u4e2a\u7c7b\u578b\u4e3a Result \u7684\u503c\u3002 Result \u662f\u4e00\u79cd\u679a\u4e3e\u7c7b\u578b\uff0c\u901a\u5e38\u4e5f\u5199\u4f5c enum\u3002 // \u679a\u4e3e\u7c7b\u578b\u53d8\u91cf\u7684\u503c\u53ef\u4ee5\u662f\u591a\u79cd\u53ef\u80fd\u72b6\u6001\u4e2d\u7684\u4e00\u4e2a\u3002\u6211\u4eec\u628a\u6bcf\u79cd\u53ef\u80fd\u7684\u72b6\u6001\u79f0\u4e3a\u4e00\u79cd \u679a\u4e3e\u6210\u5458\uff08variant\uff09\u3002 // \u8fd9\u91cc\u7684 Result \u7c7b\u578b\u5c06\u7528\u6765\u7f16\u7801\u9519\u8bef\u5904\u7406\u7684\u4fe1\u606f\u3002 // Result \u7684\u6210\u5458\u662f Ok \u548c Err\uff0c // Ok \u6210\u5458\u8868\u793a\u64cd\u4f5c\u6210\u529f\uff0c\u5185\u90e8\u5305\u542b\u6210\u529f\u65f6\u4ea7\u751f\u7684\u503c\u3002 // Err \u6210\u5458\u5219\u610f\u5473\u7740\u64cd\u4f5c\u5931\u8d25\uff0c\u5e76\u4e14\u5305\u542b\u5931\u8d25\u7684\u524d\u56e0\u540e\u679c\u3002 // Result \u7c7b\u578b\u7684\u503c\uff0c\u50cf\u5176\u4ed6\u7c7b\u578b\u4e00\u6837\uff0c\u62e5\u6709\u5b9a\u4e49\u4e8e\u5176\u4e0a\u7684\u65b9\u6cd5\u3002Result \u7684\u5b9e\u4f8b\u62e5\u6709 expect \u65b9\u6cd5\u3002 // \u5982\u679c io::Result \u5b9e\u4f8b\u7684\u503c\u662f Err\uff0cexpect \u4f1a\u5bfc\u81f4\u7a0b\u5e8f\u5d29\u6e83\uff0c\u5e76\u663e\u793a\u5f53\u505a\u53c2\u6570\u4f20\u9012\u7ed9 expect \u7684\u4fe1\u606f\u3002 // \u5982\u679c read_line \u65b9\u6cd5\u8fd4\u56de Err\uff0c\u5219\u53ef\u80fd\u662f\u6765\u6e90\u4e8e\u5e95\u5c42\u64cd\u4f5c\u7cfb\u7edf\u9519\u8bef\u7684\u7ed3\u679c\u3002 // \u5982\u679c Result \u5b9e\u4f8b\u7684\u503c\u662f Ok\uff0cexpect \u4f1a\u83b7\u53d6 Ok \u4e2d\u7684\u503c\u5e76\u539f\u6837\u8fd4\u56de\u3002 // \u5728\u672c\u4f8b\u4e2d\uff0c\u8fd9\u4e2a\u503c\u662f\u7528\u6237\u8f93\u5165\u5230\u6807\u51c6\u8f93\u5165\u4e2d\u7684\u5b57\u8282\u6570\u3002 // \u5982\u679c\u4e0d\u8c03\u7528 expect\uff0c\u7a0b\u5e8f\u4e5f\u80fd\u7f16\u8bd1\uff0c\u4e0d\u8fc7\u4f1a\u51fa\u73b0\u4e00\u4e2a\u8b66\u544a\uff1a // note: this `Result` may be an `Err` variant, which should be handled // Rust \u8b66\u544a\u6211\u4eec\u6ca1\u6709\u4f7f\u7528 read_line \u7684\u8fd4\u56de\u503c Result\uff0c\u8bf4\u660e\u6709\u4e00\u4e2a\u53ef\u80fd\u7684\u9519\u8bef\u6ca1\u6709\u5904\u7406\u3002 // \u6d88\u9664\u8b66\u544a\u7684\u6b63\u786e\u505a\u6cd5\u662f\u5b9e\u9645\u53bb\u7f16\u5199\u9519\u8bef\u5904\u7406\u4ee3\u7801\uff0c\u4e0d\u8fc7\u7531\u4e8e\u6211\u4eec\u5c31\u662f\u5e0c\u671b\u7a0b\u5e8f\u5728\u51fa\u73b0\u95ee\u9898\u65f6\u7acb\u5373\u5d29\u6e83\uff0c\u6240\u4ee5\u76f4\u63a5\u4f7f\u7528 expect\u3002 // \u7ee7\u7eed\u6df1\u5165\u5b66\u4e60\u7684\u8bdd\uff0c\u5c06\u4f1a\u5b66\u4e60\u5230\u5982\u4f55\u4ece\u9519\u8bef\u4e2d\u6062\u590d\u3002 println! ( \"You guessed: {guess}\" ); // \u6253\u5370\u4e86\u5b58\u50a8\u7528\u6237\u8f93\u5165\u7684\u5b57\u7b26\u4e32\u3002 // \u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\uff0c\u91cc\u9762\u7684 {} \u662f\u9884\u7559\u5728\u7279\u5b9a\u4f4d\u7f6e\u7684\u5360\u4f4d\u7b26 // \u4f7f\u7528 {} \u4e5f\u53ef\u4ee5\u6253\u5370\u591a\u4e2a\u503c\uff1a // \u7b2c\u4e00\u5bf9 {} \u4f7f\u7528\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u4e4b\u540e\u7684\u7b2c\u4e00\u4e2a\u503c\uff0c\u7b2c\u4e8c\u5bf9\u5219\u4f7f\u7528\u7b2c\u4e8c\u4e2a\u503c\uff0c\u4f9d\u6b64\u7c7b\u63a8\u3002\u8c03 // \u7528\u4e00\u6b21 println! \u6253\u5370\u591a\u4e2a\u503c\u770b\u8d77\u6765\u50cf\u8fd9\u6837\uff1a // println!(\"x = {} and y = {}\", x, y); } \u751f\u6210\u4e00\u4e2a\u79d8\u5bc6\u6570\u5b57 Rust \u6807\u51c6\u5e93\u4e2d\u5c1a\u672a\u5305\u542b\u968f\u673a\u6570\u529f\u80fd\u3002\u7136\u800c\uff0cRust \u56e2\u961f\u8fd8\u662f\u63d0\u4f9b\u4e86\u4e00\u4e2a\u5305\u542b\u4e0a\u8ff0\u529f\u80fd\u7684 rand crate \u3002 rand crate \u662f\u4e00\u4e2a \u5e93 crate \uff0c \u5e93 crate \u53ef\u4ee5\u5305\u542b\u4efb\u610f\u80fd\u88ab\u5176\u4ed6\u7a0b\u5e8f\u4f7f\u7528\u7684\u4ee3\u7801\uff0c\u4f46\u662f\u4e0d\u80fd\u81ea\u6267\u884c\u3002 \u5728\u4f7f\u7528 rand \u7f16\u5199\u4ee3\u7801\u4e4b\u524d\uff0c\u9700\u8981\u4fee\u6539 Cargo.toml \u6587\u4ef6\uff0c\u5f15\u5165\u4e00\u4e2a rand \u4f9d\u8d56\u3002\u73b0\u5728\u6253\u5f00\u8fd9\u4e2a\u6587\u4ef6\u5e76\u5c06\u4e0b\u9762\u8fd9\u4e00\u884c\u6dfb\u52a0\u5230 [dependencies] \u7247\u6bb5\u6807\u9898\u4e4b\u4e0b\u3002 \u6587\u4ef6\u540d: Cargo.toml rand = \"0.8.3\" [dependencies] \u7247\u6bb5\u544a\u8bc9 Cargo \u672c\u9879\u76ee\u4f9d\u8d56\u4e86\u54ea\u4e9b\u5916\u90e8 crate \u53ca\u5176\u7248\u672c\u3002\u672c\u4f8b\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u8bed\u4e49\u5316\u7248\u672c 0.8.3 \u6765\u6307\u5b9a rand crate \u7684\u7248\u672c\u3002Cargo \u7406\u89e3 \u8bed\u4e49\u5316\u7248\u672c \uff08Semantic Versioning\uff09\uff08\u6709\u65f6\u4e5f\u79f0\u4e3a SemVer\uff09\uff0c\u8fd9\u662f\u4e00\u79cd\u5b9a\u4e49\u7248\u672c\u53f7\u7684\u6807\u51c6\u3002 0.8.3 \u4e8b\u5b9e\u4e0a\u662f ^0.8.3 \u7684\u7b80\u5199\uff0c\u5b83\u8868\u793a\u4efb\u4f55\u81f3\u5c11\u662f 0.8.3 \u4f46\u5c0f\u4e8e 0.9.0 \u7684\u7248\u672c\u3002 Cargo \u8ba4\u4e3a\u8fd9\u4e9b\u7248\u672c\u4e0e 0.8.3 \u7248\u672c\u7684\u516c\u6709 API \u76f8\u517c\u5bb9\uff0c\u8fd9\u6837\u7684\u7248\u672c\u6307\u5b9a\u786e\u4fdd\u4e86\u6211\u4eec\u53ef\u4ee5\u83b7\u53d6\u80fd\u4f7f\u672c\u7ae0\u4ee3\u7801\u7f16\u8bd1\u7684\u6700\u65b0\u7684\u8865\u4e01\uff08patch\uff09\u7248\u672c\u3002\u4efb\u4f55\u5927\u4e8e\u7b49\u4e8e 0.9.0 \u7684\u7248\u672c\u4e0d\u80fd\u4fdd\u8bc1\u548c\u63a5\u4e0b\u6765\u7684\u793a\u4f8b\u91c7\u7528\u4e86\u76f8\u540c\u7684 API\u3002 \u73b0\u5728\uff0c\u4e0d\u4fee\u6539\u4efb\u4f55\u4ee3\u7801\uff0c\u6784\u5efa\u9879\u76ee\uff0c\u5982\u4e0b\u6240\u793a\uff1a $ cargo build Updating crates.io index Downloaded ppv-lite86 v0.2.17 Downloaded rand v0.8.5 Downloaded rand_chacha v0.3.1 Downloaded rand_core v0.6.4 Downloaded cfg-if v1.0.0 Downloaded getrandom v0.2.8 Downloaded libc v0.2.138 Downloaded 7 crates ( 794 .8 KB ) in 2 .72s Compiling libc v0.2.138 Compiling cfg-if v1.0.0 Compiling ppv-lite86 v0.2.17 Compiling getrandom v0.2.8 Compiling rand_core v0.6.4 Compiling rand_chacha v0.3.1 Compiling rand v0.8.5 Compiling guessing-game v0.1.0 ( file:///projects/guessing_game ) Finished dev [ unoptimized + debuginfo ] target ( s ) in 3m 45s # \u5c06 rand crate \u6dfb\u52a0\u4e3a\u4f9d\u8d56\u4e4b\u540e\u8fd0\u884c cargo build \u7684\u8f93\u51fa \u73b0\u5728\u7cfb\u7edf\u6709\u4e86\u4e00\u4e2a\u5916\u90e8\u4f9d\u8d56\uff0cCargo \u4ece registry \u4e0a\u83b7\u53d6\u6240\u6709\u5305\u7684\u6700\u65b0\u7248\u672c\u4fe1\u606f\uff0c\u8fd9\u662f\u4e00\u4efd\u6765\u81ea Crates.io \u7684\u6570\u636e\u62f7\u8d1d\u3002Crates.io \u662f Rust \u751f\u6001\u73af\u5883\u4e2d\u7684\u5f00\u53d1\u8005\u4eec\u5411\u4ed6\u4eba\u8d21\u732e Rust \u5f00\u6e90\u9879\u76ee\u7684\u5730\u65b9\u3002 \u5728\u66f4\u65b0\u5b8c registry \u540e\uff0cCargo \u68c0\u67e5 [dependencies] \u90e8\u5206\u5e76\u4e0b\u8f7d\u5217\u8868\u4e2d\u5305\u542b\u4f46\u8fd8\u672a\u4e0b\u8f7d\u7684 crates \u3002\u672c\u4f8b\u4e2d\uff0c\u867d\u7136\u53ea\u58f0\u660e\u4e86 rand \u4e00\u4e2a\u4f9d\u8d56\uff0c\u7136\u800c Cargo \u8fd8\u662f\u989d\u5916\u83b7\u53d6\u4e86 rand \u6240\u9700\u8981\u7684\u5176\u4ed6 crates\uff0c\u56e0\u4e3a rand \u4f9d\u8d56\u5b83\u4eec\u6765\u6b63\u5e38\u5de5\u4f5c\u3002\u4e0b\u8f7d\u5b8c\u6210\u540e\uff0cRust \u7f16\u8bd1\u4f9d\u8d56\uff0c\u7136\u540e\u4f7f\u7528\u8fd9\u4e9b\u4f9d\u8d56\u7f16\u8bd1\u9879\u76ee\u3002 \u6587\u4ef6\u540d: src/main.rs // \u65b0\u589e\u4e86\u4e00\u884c use rand::Rng\u3002 // Rng \u662f\u4e00\u4e2a trait\uff0c\u5b83\u5b9a\u4e49\u4e86\u968f\u673a\u6570\u751f\u6210\u5668\u5e94\u5b9e\u73b0\u7684\u65b9\u6cd5\uff0c\u60f3\u4f7f\u7528\u8fd9\u4e9b\u65b9\u6cd5\u7684\u8bdd\uff0c\u6b64 trait \u5fc5\u987b\u5728\u4f5c\u7528\u57df\u4e2d\u3002 use rand :: Rng ; use std :: io ; fn main () { println! ( \"\u731c\u6570\u6e38\u620f\uff01\uff01\" ); let secret_number = rand :: thread_rng (). gen_range ( 1 ..= 100 ); // \u8c03\u7528\u4e86 rand::thread_rng \u51fd\u6570\u63d0\u4f9b\u5b9e\u9645\u4f7f\u7528\u7684\u968f\u673a\u6570\u751f\u6210\u5668\uff1a\u5b83\u4f4d\u4e8e\u5f53\u524d\u6267\u884c\u7ebf\u7a0b\u7684\u672c\u5730\u73af\u5883\u4e2d\uff0c\u5e76\u4ece\u64cd\u4f5c\u7cfb\u7edf\u83b7\u53d6 seed\u3002 // \u63a5\u7740\u8c03\u7528\u968f\u673a\u6570\u751f\u6210\u5668\u7684 gen_range \u65b9\u6cd5\u3002\u8fd9\u4e2a\u65b9\u6cd5\u7531 use rand::Rng \u8bed\u53e5\u5f15\u5165\u5230\u4f5c\u7528\u57df\u7684 Rng trait \u5b9a\u4e49\u3002 // gen_range \u65b9\u6cd5\u83b7\u53d6\u4e00\u4e2a\u8303\u56f4\u8868\u8fbe\u5f0f\uff08range expression\uff09\u4f5c\u4e3a\u53c2\u6570\uff0c\u5e76\u751f\u6210\u4e00\u4e2a\u5728\u6b64\u8303\u56f4\u4e4b\u95f4\u7684\u968f\u673a\u6570\u3002 // \u8fd9\u91cc\u4f7f\u7528\u7684\u8fd9\u7c7b\u8303\u56f4\u8868\u8fbe\u5f0f\u4f7f\u7528\u4e86 start..=end \u8fd9\u6837\u7684\u5f62\u5f0f\uff0c\u4e5f\u5c31\u662f\u8bf4\u5305\u542b\u4e86\u4e0a\u4e0b\u7aef\u70b9\uff0c\u6240\u4ee5\u9700\u8981\u6307\u5b9a 1..=100 \u6765\u8bf7\u6c42\u4e00\u4e2a 1 \u548c 100 \u4e4b\u95f4\u7684\u6570\u3002 println! ( \"\u751f\u6210\u7684\u5bc6\u7801\u6570\u5b57\u662f: {secret_number}\" ); println! ( \"\u8bf7\u8f93\u5165\u4e00\u4e2a\u503c:\" ); let mut guess = String :: new (); io :: stdin (). read_line ( & mut guess ). expect ( \"\u8bfb\u6570\u5931\u8d25!\" ); println! ( \"\u4f60\u731c\u6d4b\u7684\u6570\u4e3a: {guess}\" ) } \u6ce8\u610f \uff1a \u4f60\u4e0d\u53ef\u80fd\u51ed\u7a7a\u5c31\u77e5\u9053\u5e94\u8be5 use \u54ea\u4e2a trait \u4ee5\u53ca\u8be5\u4ece crate \u4e2d\u8c03\u7528\u54ea\u4e2a\u65b9\u6cd5\uff0c\u56e0\u6b64\u6bcf\u4e2acrate \u6709\u4f7f\u7528\u8bf4\u660e\u6587\u6863\u3002 Cargo \u6709\u4e00\u4e2a\u5f88\u68d2\u7684\u529f\u80fd\u662f\uff1a\u8fd0\u884c cargo doc --open \u547d\u4ee4\u6765\u6784\u5efa\u6240\u6709\u672c\u5730\u4f9d\u8d56\u63d0\u4f9b\u7684\u6587\u6863\uff0c\u5e76\u5728\u6d4f\u89c8\u5668\u4e2d\u6253\u5f00\u3002 \u4f8b\u5982\uff0c\u5047\u8bbe\u4f60\u5bf9 rand crate \u4e2d\u7684\u5176\u4ed6\u529f\u80fd\u611f\u5174\u8da3\uff0c\u4f60\u53ef\u4ee5\u8fd0\u884c cargo doc --open \u5e76\u70b9\u51fb\u5de6\u4fa7\u5bfc\u822a\u680f\u4e2d\u7684 rand\u3002 \u6bd4\u8f83\u731c\u6d4b\u7684\u6570\u5b57\u548c\u79d8\u5bc6\u6570\u5b57 \u6587\u4ef6\u540d: src/main.rs use rand :: Rng ; use std :: cmp :: Ordering ; // \u4ece\u6807\u51c6\u5e93\u5f15\u5165\u4e86\u4e00\u4e2a\u53eb\u505a std::cmp::Ordering \u7684\u7c7b\u578b\u5230\u4f5c\u7528\u57df\u4e2d\u3002 // Ordering \u4e5f\u662f\u4e00\u4e2a\u679a\u4e3e\uff0c\u4e0d\u8fc7\u5b83\u7684\u6210\u5458\u662f Less\u3001Greater \u548c Equal\u3002 // \u8fd9\u662f\u6bd4\u8f83\u4e24\u4e2a\u503c\u65f6\u53ef\u80fd\u51fa\u73b0\u7684\u4e09\u79cd\u7ed3\u679c\u3002 use std :: io ; fn main () { println! ( \"\u731c\u6570\u6e38\u620f\uff01\uff01\" ); let secret_number = rand :: thread_rng (). gen_range ( 1 ..= 100 ); println! ( \"\u751f\u6210\u7684\u5bc6\u7801\u6570\u5b57\u662f: {secret_number}\" ); println! ( \"\u8bf7\u8f93\u5165\u4e00\u4e2a\u503c:\" ); let mut guess = String :: new (); io :: stdin (). read_line ( & mut guess ). expect ( \"\u8bfb\u6570\u5931\u8d25!\" ); println! ( \"\u4f60\u731c\u6d4b\u7684\u6570\u4e3a: {guess}\" ); match guess . cmp ( & secret_number ){ // cmp \u65b9\u6cd5\u7528\u6765\u6bd4\u8f83\u4e24\u4e2a\u503c\u5e76\u53ef\u4ee5\u5728\u4efb\u4f55\u53ef\u6bd4\u8f83\u7684\u503c\u4e0a\u8c03\u7528\u3002 // \u5b83\u83b7\u53d6\u4e00\u4e2a\u88ab\u6bd4\u8f83\u503c\u7684\u5f15\u7528\uff1a\u8fd9\u91cc\u662f\u628a guess \u4e0e secret_number \u505a\u6bd4\u8f83\u3002 // \u7136\u540e\u5b83\u4f1a\u8fd4\u56de\u4e00\u4e2a\u521a\u624d\u901a\u8fc7 use \u5f15\u5165\u4f5c\u7528\u57df\u7684 Ordering \u679a\u4e3e\u7684\u6210\u5458\u3002 // \u4f7f\u7528\u4e00\u4e2a match \u8868\u8fbe\u5f0f\uff0c\u6839\u636e\u5bf9 guess \u548c secret_number \u8c03\u7528 cmp \u8fd4\u56de\u7684 Ordering \u6210\u5458\u6765\u51b3\u5b9a\u63a5\u4e0b\u6765\u505a\u4ec0\u4e48\u3002 Ordering :: Less => println! ( \"\u592a\u5c0f\u4e86\uff01\" ), Ordering :: Greater => println! ( \"\u592a\u5927\u4e86\uff01\" ), Ordering :: Equal => println! ( \"\u731c\u5bf9\u4e86\uff01\" ), } } \u4e00\u4e2a match \u8868\u8fbe\u5f0f\u7531 \u5206\u652f\uff08arms\uff09 \u6784\u6210\u3002 \u4e00\u4e2a\u5206\u652f\u5305\u542b\u4e00\u4e2a \u6a21\u5f0f\uff08pattern\uff09\u548c\u8868\u8fbe\u5f0f\u5f00\u5934\u7684\u503c\u4e0e\u5206\u652f\u6a21\u5f0f\u76f8\u5339\u914d\u65f6\u5e94\u8be5\u6267\u884c\u7684\u4ee3\u7801\u3002 Rust \u83b7\u53d6\u63d0\u4f9b\u7ed9 match \u7684\u503c\u5e76\u6328\u4e2a\u68c0\u67e5\u6bcf\u4e2a\u5206\u652f\u7684\u6a21\u5f0f\u3002 \u6b64\u65f6\u8fdb\u884c cargo build \u4f1a\u51fa\u73b0\u5982\u4e0b\u9519\u8bef: cargo build Compiling guessing-game v0.1.0 ( /files/rust-example-apps/src/guessing-game ) error [ E0308 ] : mismatched types --> src/main.rs:20:21 | 20 | match guess.cmp ( & secret_number ) { | --- ^^^^^^^^^^^^^^ expected struct ` String ` , found integer | | | arguments to this function are incorrect | = note: expected reference ` & String ` found reference ` & { integer } ` note: associated function defined here For more information about this error, try ` rustc --explain E0308 ` . error: could not compile ` guessing-game ` due to previous error \u9519\u8bef\u7684\u6838\u5fc3\u8868\u660e\u8fd9\u91cc\u6709 \u4e0d\u5339\u914d\u7684\u7c7b\u578b\uff08mismatched types\uff09 \u3002 Rust \u6709\u4e00\u4e2a\u9759\u6001\u5f3a\u7c7b\u578b\u7cfb\u7edf\uff0c\u540c\u65f6\u4e5f\u6709\u7c7b\u578b\u63a8\u65ad\u3002 \u5f53\u6211\u4eec\u5199\u51fa let guess = String::new() \u65f6\uff0cRust \u63a8\u65ad\u51fa guess \u5e94\u8be5\u662f String \u7c7b\u578b\uff0c\u5e76\u4e0d\u9700\u8981\u6211\u4eec\u5199\u51fa\u7c7b\u578b\u3002 \u53e6\u4e00\u65b9\u9762\uff0csecret_number\uff0c\u662f\u6570\u5b57\u7c7b\u578b\u3002\u51e0\u4e2a\u6570\u5b57\u7c7b\u578b\u62e5\u6709 1 \u5230 100 \u4e4b\u95f4\u7684\u503c\uff1a32 \u4f4d\u6570\u5b57 i32\uff1b32 \u4f4d\u65e0\u7b26\u53f7\u6570\u5b57 u32\uff1b64 \u4f4d\u6570\u5b57 i64 \u7b49\u7b49\u3002 Rust \u9ed8\u8ba4\u4f7f\u7528 i32\uff0c\u6240\u4ee5\u5b83\u662f secret_number \u7684\u7c7b\u578b\uff0c\u9664\u975e\u589e\u52a0\u7c7b\u578b\u4fe1\u606f\uff0c\u6216\u4efb\u4f55\u80fd\u8ba9 Rust \u63a8\u65ad\u51fa\u4e0d\u540c\u6570\u503c\u7c7b\u578b\u7684\u4fe1\u606f\u3002 \u8fd9\u91cc\u9519\u8bef\u7684\u539f\u56e0\u5728\u4e8e Rust \u4e0d\u4f1a\u6bd4\u8f83\u5b57\u7b26\u4e32\u7c7b\u578b\u548c\u6570\u5b57\u7c7b\u578b\u3002 \u6240\u4ee5\u6211\u4eec\u5fc5\u987b\u628a\u4ece\u8f93\u5165\u4e2d\u8bfb\u53d6\u5230\u7684 String \u8f6c\u6362\u4e3a\u4e00\u4e2a\u771f\u6b63\u7684\u6570\u5b57\u7c7b\u578b\uff0c\u624d\u597d\u4e0e\u79d8\u5bc6\u6570\u5b57\u8fdb\u884c\u6bd4\u8f83\u3002\u8fd9\u53ef\u4ee5\u901a\u8fc7\u5728 main \u51fd\u6570\u4f53\u4e2d\u589e\u52a0\u5982\u4e0b\u4ee3\u7801\u6765\u5b9e\u73b0\uff1a \u6587\u4ef6\u540d: src/main.rs use rand :: Rng ; use std :: cmp :: Ordering ; use std :: io ; fn main () { println! ( \"\u731c\u6570\u6e38\u620f\uff01\uff01\" ); let secret_number = rand :: thread_rng (). gen_range ( 1 ..= 100 ); println! ( \"\u751f\u6210\u7684\u5bc6\u7801\u6570\u5b57\u662f: {secret_number}\" ); println! ( \"\u8bf7\u8f93\u5165\u4e00\u4e2a\u503c:\" ); let mut guess = String :: new (); io :: stdin (). read_line ( & mut guess ). expect ( \"\u8bfb\u6570\u5931\u8d25!\" ); let guess : u32 = guess . trim (). parse (). expect ( \"\u8bf7\u8f93\u5165\u6570\u5b57!\" ); // \u8fd9\u91cc\u521b\u5efa\u4e86\u4e00\u4e2a\u53eb\u505a guess \u7684\u53d8\u91cf\u3002 // \u4e0d\u8fc7\u7b49\u7b49\uff0c\u4e0d\u662f\u5df2\u7ecf\u6709\u4e86\u4e00\u4e2a\u53eb\u505a guess \u7684\u53d8\u91cf\u4e86\u5417\uff1f // \u786e\u5b9e\u5982\u6b64\uff0c\u4e0d\u8fc7 Rust \u5141\u8bb8\u7528\u4e00\u4e2a\u65b0\u503c\u6765 \u9690\u85cf \uff08shadow\uff09 guess \u4e4b\u524d\u7684\u503c\u3002 // \u8fd9\u4e2a\u529f\u80fd\u5e38\u7528\u5728\u9700\u8981\u8f6c\u6362\u503c\u7c7b\u578b\u4e4b\u7c7b\u7684\u573a\u666f\u3002 // \u5b83\u5141\u8bb8\u6211\u4eec\u590d\u7528 guess \u53d8\u91cf\u7684\u540d\u5b57\uff0c\u800c\u4e0d\u662f\u88ab\u8feb\u521b\u5efa\u4e24\u4e2a\u4e0d\u540c\u53d8\u91cf\uff0c\u8bf8\u5982 guess_str \u548c guess \u4e4b\u7c7b\u3002 // \u5c06\u8fd9\u4e2a\u65b0\u53d8\u91cf\u7ed1\u5b9a\u5230 guess.trim().parse() \u8868\u8fbe\u5f0f\u4e0a\u3002 // \u8868\u8fbe\u5f0f\u4e2d\u7684 guess \u6307\u7684\u662f\u5305\u542b\u8f93\u5165\u7684\u5b57\u7b26\u4e32\u7c7b\u578b guess \u53d8\u91cf\u3002 // String \u5b9e\u4f8b\u7684 trim \u65b9\u6cd5\u4f1a\u53bb\u9664\u5b57\u7b26\u4e32\u5f00\u5934\u548c\u7ed3\u5c3e\u7684\u7a7a\u767d\u5b57\u7b26\uff0c\u6211\u4eec\u5fc5\u987b\u6267\u884c\u6b64\u65b9\u6cd5\u624d\u80fd\u5c06\u5b57\u7b26\u4e32\u4e0e u32 \u6bd4\u8f83\uff0c\u56e0\u4e3a u32 \u53ea\u80fd\u5305\u542b\u6570\u503c\u578b\u6570\u636e\u3002 // \u7528\u6237\u5fc5\u987b\u8f93\u5165 enter \u952e\u624d\u80fd\u8ba9 read_line \u8fd4\u56de\u5e76\u8f93\u5165\u4ed6\u4eec\u7684\u731c\u60f3\uff0c\u8fd9\u5c06\u4f1a\u5728\u5b57\u7b26\u4e32\u4e2d\u589e\u52a0\u4e00\u4e2a\u6362\u884c\uff08newline\uff09\u7b26\u3002 // \u4f8b\u5982\uff0c\u7528\u6237\u8f93\u5165 5 \u5e76\u6309\u4e0b enter, guess \u770b\u8d77\u6765\u50cf\u8fd9\u6837\uff1a5\\n \u6216\u8005 5\\r\\n\u3002 // \\n \u4ee3\u8868 \u201c\u6362\u884c\u201d\uff0c\u56de\u8f66\u952e\uff1b\\r \u4ee3\u8868 \u201c\u56de\u8f66\u201d\uff0c\u56de\u8f66\u952e\u3002 // trim \u65b9\u6cd5\u4f1a\u6d88\u9664 \\n \u6216\u8005 \\r\\n\uff0c\u53ea\u7559\u4e0b 5\u3002 // \u5b57\u7b26\u4e32\u7684 parse \u65b9\u6cd5 \u5c06\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u5176\u4ed6\u7c7b\u578b\u3002 // \u8fd9\u91cc\u7528\u5b83\u6765\u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u503c\u3002\u6211\u4eec\u9700\u8981\u544a\u8bc9 Rust \u5177\u4f53\u7684\u6570\u5b57\u7c7b\u578b\uff0c\u8fd9\u91cc\u901a\u8fc7 let guess: u32 \u6307\u5b9a\u3002 // guess \u540e\u9762\u7684\u5192\u53f7\uff08:\uff09\u544a\u8bc9 Rust \u6211\u4eec\u6307\u5b9a\u4e86\u53d8\u91cf\u7684\u7c7b\u578b\u3002 // Rust \u6709\u4e00\u4e9b\u5185\u5efa\u7684\u6570\u5b57\u7c7b\u578b\uff1bu32 \u662f\u4e00\u4e2a\u65e0\u7b26\u53f7\u7684 32 \u4f4d\u6574\u578b\u3002 // \u5bf9\u4e8e\u4e0d\u5927\u7684\u6b63\u6574\u6570\u6765\u8bf4\uff0c\u5b83\u662f\u4e0d\u9519\u7684\u9ed8\u8ba4\u7c7b\u578b\uff0c\u7b2c\u4e09\u7ae0\u8fd8\u4f1a\u8bb2\u5230\u5176\u4ed6\u6570\u5b57\u7c7b\u578b\u3002 // \u53e6\u5916\uff0c\u7a0b\u5e8f\u4e2d\u7684 u32 \u6ce8\u89e3\u4ee5\u53ca\u4e0e secret_number \u7684\u6bd4\u8f83\uff0c\u610f\u5473\u7740 Rust \u4f1a\u63a8\u65ad\u51fa secret_number \u4e5f\u662f u32 \u7c7b\u578b\u3002 // \u73b0\u5728\u53ef\u4ee5\u4f7f\u7528\u76f8\u540c\u7c7b\u578b\u6bd4\u8f83\u4e24\u4e2a\u503c\u4e86\uff01 // parse \u65b9\u6cd5\u53ea\u6709\u5728\u5b57\u7b26\u903b\u8f91\u4e0a\u53ef\u4ee5\u8f6c\u6362\u4e3a\u6570\u5b57\u7684\u65f6\u5019\u624d\u80fd\u5de5\u4f5c\u6240\u4ee5\u975e\u5e38\u5bb9\u6613\u51fa\u9519\u3002 // \u4f8b\u5982\uff0c\u5b57\u7b26\u4e32\u4e2d\u5305\u542b A\ud83d\udc4d%\uff0c\u5c31\u65e0\u6cd5\u5c06\u5176\u8f6c\u6362\u4e3a\u4e00\u4e2a\u6570\u5b57\u3002 // \u56e0\u6b64\uff0cparse \u65b9\u6cd5\u8fd4\u56de\u4e00\u4e2a Result \u7c7b\u578b\u3002 // \u50cf\u4e4b\u524d \u201c\u4f7f\u7528 Result \u7c7b\u578b\u6765\u5904\u7406\u6f5c\u5728\u7684\u9519\u8bef\u201d \u8ba8\u8bba\u7684 read_line \u65b9\u6cd5\u90a3\u6837\uff0c\u518d\u6b21\u6309\u90e8\u5c31\u73ed\u7684\u7528 expect \u65b9\u6cd5\u5904\u7406\u5373\u53ef\u3002 // \u5982\u679c parse \u4e0d\u80fd\u4ece\u5b57\u7b26\u4e32\u751f\u6210\u4e00\u4e2a\u6570\u5b57\uff0c\u8fd4\u56de\u4e00\u4e2a Result \u7684 Err \u6210\u5458\u65f6\uff0cexpect \u4f1a\u4f7f\u6e38\u620f\u5d29\u6e83\u5e76\u6253\u5370\u9644\u5e26\u7684\u4fe1\u606f\u3002 // \u5982\u679c parse \u6210\u529f\u5730\u5c06\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u4e00\u4e2a\u6570\u5b57\uff0c\u5b83\u4f1a\u8fd4\u56de Result \u7684 Ok \u6210\u5458\uff0c\u7136\u540e expect \u4f1a\u8fd4\u56de Ok \u503c\u4e2d\u7684\u6570\u5b57\u3002 println! ( \"\u4f60\u731c\u6d4b\u7684\u6570\u4e3a: {guess}\" ); match guess . cmp ( & secret_number ) { Ordering :: Less => println! ( \"\u592a\u5c0f\u4e86\uff01\" ), Ordering :: Greater => println! ( \"\u592a\u5927\u4e86\uff01\" ), Ordering :: Equal => println! ( \"\u731c\u5bf9\u4e86\uff01\" ), } } \u4f7f\u7528\u5faa\u73af\u6765\u5141\u8bb8\u591a\u6b21\u731c\u6d4b loop \u5173\u952e\u5b57\u521b\u5efa\u4e86\u4e00\u4e2a\u65e0\u9650\u5faa\u73af\u3002 \u6587\u4ef6\u540d: src/main.rs use rand :: Rng ; use std :: cmp :: Ordering ; use std :: io ; fn main () { println! ( \"\u731c\u6570\u6e38\u620f\uff01\uff01\" ); let secret_number = rand :: thread_rng (). gen_range ( 1 ..= 100 ); println! ( \"\u751f\u6210\u7684\u5bc6\u7801\u6570\u5b57\u662f: {secret_number}\" ); loop { println! ( \"\u8bf7\u8f93\u5165\u4e00\u4e2a\u503c:\" ); let mut guess = String :: new (); io :: stdin (). read_line ( & mut guess ). expect ( \"\u8bfb\u6570\u5931\u8d25!\" ); let guess : u32 = guess . trim (). parse (). expect ( \"\u8bf7\u8f93\u5165\u6570\u5b57!\" ); println! ( \"\u4f60\u731c\u6d4b\u7684\u6570\u4e3a: {guess}\" ); match guess . cmp ( & secret_number ) { Ordering :: Less => println! ( \"\u592a\u5c0f\u4e86\uff01\" ), Ordering :: Greater => println! ( \"\u592a\u5927\u4e86\uff01\" ), Ordering :: Equal => println! ( \"\u731c\u5bf9\u4e86\uff01\" ), } } } \u5982\u4e0a\u6240\u793a\uff0c\u6211\u4eec\u5c06\u63d0\u793a\u7528\u6237\u731c\u6d4b\u4e4b\u540e\u7684\u6240\u6709\u5185\u5bb9\u79fb\u52a8\u5230\u4e86\u5faa\u73af\u4e2d\u3002\u786e\u4fdd loop \u5faa\u73af\u4e2d\u7684\u4ee3\u7801\u591a\u7f29\u8fdb\u56db\u4e2a\u7a7a\u683c\uff0c\u518d\u6b21\u8fd0\u884c\u7a0b\u5e8f\u3002\u6ce8\u610f\u8fd9\u91cc\u6709\u4e00\u4e2a\u65b0\u95ee\u9898\uff0c\u56e0\u4e3a\u7a0b\u5e8f\u5fe0\u5b9e\u5730\u6267\u884c\u4e86\u6211\u4eec\u7684\u8981\u6c42\uff1a\u6c38\u8fdc\u5730\u8bf7\u6c42\u53e6\u4e00\u4e2a\u731c\u6d4b\uff0c\u7528\u6237\u597d\u50cf\u65e0\u6cd5\u9000\u51fa\u554a\uff01 \u7528\u6237\u603b\u80fd\u4f7f\u7528 ctrl-c \u7ec8\u6b62\u7a0b\u5e8f\u3002\u4e0d\u8fc7\u8fd8\u6709\u53e6\u4e00\u4e2a\u65b9\u6cd5\u8df3\u51fa\u65e0\u9650\u5faa\u73af\uff0c\u5c31\u662f \u201c\u6bd4\u8f83\u731c\u6d4b\u4e0e\u79d8\u5bc6\u6570\u5b57\u201d \u90e8\u5206\u63d0\u5230\u7684 parse\uff1a\u5982\u679c\u7528\u6237\u8f93\u5165\u7684\u7b54\u6848\u4e0d\u662f\u4e00\u4e2a\u6570\u5b57\uff0c\u7a0b\u5e8f\u4f1a\u5d29\u6e83\u3002\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u8fd9\u4e00\u70b9\u6765\u9000\u51fa\uff0c\u5982\u4e0b\u6240\u793a\uff1a $ cargo run Compiling guessing_game v0.1.0 ( file:///projects/guessing_game ) Finished dev [ unoptimized + debuginfo ] target ( s ) in 1 .50s Running ` target/debug/guessing_game ` \u731c\u6570\u6e38\u620f\uff01\uff01 \u751f\u6210\u7684\u5bc6\u7801\u6570\u5b57\u662f: 57 \u8bf7\u8f93\u5165\u4e00\u4e2a\u503c: 12 \u4f60\u731c\u6d4b\u7684\u6570\u4e3a: 12 \u592a\u5c0f\u4e86\uff01 \u8bf7\u8f93\u5165\u4e00\u4e2a\u503c: 57 \u4f60\u731c\u6d4b\u7684\u6570\u4e3a: 57 \u731c\u5bf9\u4e86\uff01 \u8bf7\u8f93\u5165\u4e00\u4e2a\u503c: asdf thread 'main' panicked at '\u8bf7\u8f93\u5165\u6570\u5b57!: ParseIntError { kind: InvalidDigit }' , src/main.rs:19:47 note: run with ` RUST_BACKTRACE = 1 ` environment variable to display a backtrace \u731c\u6d4b\u6b63\u786e\u540e\u9000\u51fa \u8ba9\u6211\u4eec\u589e\u52a0\u4e00\u4e2a break \u8bed\u53e5\uff0c\u5728\u7528\u6237\u731c\u5bf9\u65f6\u9000\u51fa\u6e38\u620f\uff1a \u6587\u4ef6\u540d: src/main.rs use rand :: Rng ; use std :: cmp :: Ordering ; use std :: io ; fn main () { println! ( \"\u731c\u6570\u6e38\u620f\uff01\uff01\" ); let secret_number = rand :: thread_rng (). gen_range ( 1 ..= 100 ); println! ( \"\u751f\u6210\u7684\u5bc6\u7801\u6570\u5b57\u662f: {secret_number}\" ); loop { println! ( \"\u8bf7\u8f93\u5165\u4e00\u4e2a\u503c:\" ); let mut guess = String :: new (); io :: stdin (). read_line ( & mut guess ). expect ( \"\u8bfb\u6570\u5931\u8d25!\" ); let guess : u32 = guess . trim (). parse (). expect ( \"\u8bf7\u8f93\u5165\u6570\u5b57!\" ); println! ( \"\u4f60\u731c\u6d4b\u7684\u6570\u4e3a: {guess}\" ); match guess . cmp ( & secret_number ) { Ordering :: Less => println! ( \"\u592a\u5c0f\u4e86\uff01\" ), Ordering :: Greater => println! ( \"\u592a\u5927\u4e86\uff01\" ), Ordering :: Equal => { println! ( \"\u731c\u5bf9\u4e86\uff01\" ); break ; } } } } a \u901a\u8fc7\u5728 You win! \u4e4b\u540e\u589e\u52a0\u4e00\u884c break\uff0c\u7528\u6237\u731c\u5bf9\u4e86\u795e\u79d8\u6570\u5b57\u540e\u4f1a\u9000\u51fa\u5faa\u73af\u3002\u9000\u51fa\u5faa\u73af\u4e5f\u610f\u5473\u7740\u9000\u51fa\u7a0b\u5e8f\uff0c\u56e0\u4e3a\u5faa\u73af\u662f main \u7684\u6700\u540e\u4e00\u90e8\u5206\u3002 \u5904\u7406\u65e0\u6548\u8f93\u5165 \u4e3a\u4e86\u8fdb\u4e00\u6b65\u6539\u5584\u6e38\u620f\u6027\uff0c\u4e0d\u8981\u5728\u7528\u6237\u8f93\u5165\u975e\u6570\u5b57\u65f6\u5d29\u6e83\uff0c\u9700\u8981\u5ffd\u7565\u975e\u6570\u5b57\uff0c\u8ba9\u7528\u6237\u53ef\u4ee5\u7ee7\u7eed\u731c\u6d4b\u3002\u53ef\u4ee5\u901a\u8fc7\u4fee\u6539 guess \u5c06 String \u8f6c\u5316\u4e3a u32 \u90a3\u90e8\u5206\u4ee3\u7801\u6765\u5b9e\u73b0 \u6587\u4ef6\u540d: src/main.rs use rand :: Rng ; use std :: cmp :: Ordering ; use std :: io ; fn main () { println! ( \"\u731c\u6570\u6e38\u620f\uff01\uff01\" ); let secret_number = rand :: thread_rng (). gen_range ( 1 ..= 100 ); println! ( \"\u751f\u6210\u7684\u5bc6\u7801\u6570\u5b57\u662f: {secret_number}\" ); loop { println! ( \"\u8bf7\u8f93\u5165\u4e00\u4e2a\u503c:\" ); let mut guess = String :: new (); io :: stdin (). read_line ( & mut guess ). expect ( \"\u8bfb\u6570\u5931\u8d25!\" ); let guess : u32 = match guess . trim (). parse () { Ok ( num ) => num , Err ( _ ) => continue , }; // \u5c06 expect \u8c03\u7528\u6362\u6210 match \u8bed\u53e5\uff0c\u4ee5\u4ece\u9047\u5230\u9519\u8bef\u5c31\u5d29\u6e83\u8f6c\u6362\u4e3a\u5904\u7406\u9519\u8bef\u3002 // \u987b\u77e5 parse \u8fd4\u56de\u4e00\u4e2a Result \u7c7b\u578b\uff0c\u800c Result \u662f\u4e00\u4e2a\u62e5\u6709 Ok \u6216 Err \u6210\u5458\u7684\u679a\u4e3e\u3002 // \u8fd9\u91cc\u4f7f\u7528\u7684 match \u8868\u8fbe\u5f0f\uff0c\u548c\u5904\u7406 cmp \u65b9\u6cd5\u8fd4\u56de Ordering \u65f6\u7528\u7684\u4e00\u6837\u3002 // \u5982\u679c parse \u80fd\u591f\u6210\u529f\u7684\u5c06\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u4e00\u4e2a\u6570\u5b57\uff0c\u5b83\u4f1a\u8fd4\u56de\u4e00\u4e2a\u5305\u542b\u7ed3\u679c\u6570\u5b57\u7684 Ok\u3002 // \u8fd9\u4e2a Ok \u503c\u4e0e match \u7b2c\u4e00\u4e2a\u5206\u652f\u7684\u6a21\u5f0f\u76f8\u5339\u914d\uff0c\u8be5\u5206\u652f\u5bf9\u5e94\u7684\u52a8\u4f5c\u8fd4\u56de Ok \u503c\u4e2d\u7684\u6570\u5b57 num\uff0c // \u6700\u540e\u5982\u613f\u53d8\u6210\u65b0\u521b\u5efa\u7684 guess \u53d8\u91cf\u3002 // \u5982\u679c parse \u4e0d\u80fd\u5c06\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u4e00\u4e2a\u6570\u5b57\uff0c\u5b83\u4f1a\u8fd4\u56de\u4e00\u4e2a\u5305\u542b\u66f4\u591a\u9519\u8bef\u4fe1\u606f\u7684 Err\u3002 // Err \u503c\u4e0d\u80fd\u5339\u914d\u7b2c\u4e00\u4e2a match \u5206\u652f\u7684 Ok(num) \u6a21\u5f0f\uff0c\u4f46\u662f\u4f1a\u5339\u914d\u7b2c\u4e8c\u4e2a\u5206\u652f\u7684 Err(_) \u6a21\u5f0f\uff1a // _ \u662f\u4e00\u4e2a\u901a\u914d\u7b26\u503c\uff0c\u672c\u4f8b\u4e2d\u7528\u6765\u5339\u914d\u6240\u6709 Err \u503c\uff0c\u4e0d\u7ba1\u5176\u4e2d\u6709\u4f55\u79cd\u4fe1\u606f\u3002 // \u6240\u4ee5\u7a0b\u5e8f\u4f1a\u6267\u884c\u7b2c\u4e8c\u4e2a\u5206\u652f\u7684\u52a8\u4f5c\uff0ccontinue \u610f\u5473\u7740\u8fdb\u5165 loop \u7684\u4e0b\u4e00\u6b21\u5faa\u73af\uff0c\u8bf7\u6c42\u53e6\u4e00\u4e2a\u731c\u6d4b\u3002 // \u8fd9\u6837\u7a0b\u5e8f\u5c31\u6709\u6548\u7684\u5ffd\u7565\u4e86 parse \u53ef\u80fd\u9047\u5230\u7684\u6240\u6709\u9519\u8bef\uff01 println! ( \"\u4f60\u731c\u6d4b\u7684\u6570\u4e3a: {guess}\" ); match guess . cmp ( & secret_number ) { Ordering :: Less => println! ( \"\u592a\u5c0f\u4e86\uff01\" ), Ordering :: Greater => println! ( \"\u592a\u5927\u4e86\uff01\" ), Ordering :: Equal => { println! ( \"\u731c\u5bf9\u4e86\uff01\" ); break ; } } } } \u73b0\u5728\u4e07\u4e8b\u4ff1\u5907\uff0c\u53ea\u9700\u8fd0\u884c cargo run\uff1a $ cargo run Compiling guessing_game v0.1.0 ( file:///projects/guessing_game ) Finished dev [ unoptimized + debuginfo ] target ( s ) in 4 .45s Running ` target/debug/guessing_game ` \u731c\u6570\u6e38\u620f\uff01\uff01 \u751f\u6210\u7684\u5bc6\u7801\u6570\u5b57\u662f: 66 \u8bf7\u8f93\u5165\u4e00\u4e2a\u503c: 12d \u8bf7\u8f93\u5165\u4e00\u4e2a\u503c: 12 \u4f60\u731c\u6d4b\u7684\u6570\u4e3a: 12 \u592a\u5c0f\u4e86\uff01 \u8bf7\u8f93\u5165\u4e00\u4e2a\u503c: 66 \u4f60\u731c\u6d4b\u7684\u6570\u4e3a: 66 \u731c\u5bf9\u4e86\uff01 \u6700\u7ec8\u7248\u672c \u592a\u68d2\u4e86\uff01\u518d\u6709\u6700\u540e\u4e00\u4e2a\u5c0f\u7684\u4fee\u6539\uff0c\u5c31\u80fd\u5b8c\u6210\u731c\u731c\u770b\u6e38\u620f\u4e86\uff1a\u8fd8\u8bb0\u5f97\u7a0b\u5e8f\u4f9d\u7136\u4f1a\u6253\u5370\u51fa\u79d8\u5bc6\u6570\u5b57\u3002\u5728\u6d4b\u8bd5\u65f6\u8fd8\u597d\uff0c\u4f46\u6b63\u5f0f\u53d1\u5e03\u65f6\u4f1a\u6bc1\u4e86\u6e38\u620f\u3002\u5220\u6389\u6253\u5370\u79d8\u5bc6\u6570\u5b57\u7684 println!\u3002 \u6700\u7ec8\u4ee3\u7801\uff1a \u6587\u4ef6\u540d: src/main.rs use rand :: Rng ; use std :: cmp :: Ordering ; use std :: io ; fn main () { println! ( \"\u731c\u6570\u6e38\u620f\uff01\uff01\" ); let secret_number = rand :: thread_rng (). gen_range ( 1 ..= 100 ); loop { println! ( \"\u8bf7\u8f93\u5165\u4e00\u4e2a\u503c:\" ); let mut guess = String :: new (); io :: stdin (). read_line ( & mut guess ). expect ( \"\u8bfb\u6570\u5931\u8d25!\" ); let guess : u32 = match guess . trim (). parse () { Ok ( num ) => num , Err ( _ ) => continue , }; println! ( \"\u4f60\u731c\u6d4b\u7684\u6570\u4e3a: {guess}\" ); match guess . cmp ( & secret_number ) { Ordering :: Less => println! ( \"\u592a\u5c0f\u4e86\uff01\" ), Ordering :: Greater => println! ( \"\u592a\u5927\u4e86\uff01\" ), Ordering :: Equal => { println! ( \"\u731c\u5bf9\u4e86\uff01\" ); break ; } } } }","title":"\u731c\u6570\u6e38\u620f"},{"location":"guessing-game/#_1","text":"","title":"\u731c\u6570\u6e38\u620f"},{"location":"guessing-game/#_2","text":"cargo new guessing_game cd guessing_game","title":"\u521b\u5efa\u65b0\u9879\u76ee"},{"location":"guessing-game/#_3","text":"\u6587\u4ef6\u540d: src/main.rs // \u9884\u5bfc\u5165 // io\u8f93\u5165/\u8f93\u51fa\u5e93\u5f15\u5165\u5f53\u524d\u4f5c\u7528\u57df; // io \u5e93\u6765\u81ea\u4e8e\u6807\u51c6\u5e93\uff0c\u4e5f\u88ab\u79f0\u4e3a std use std :: io ; // main \u51fd\u6570\u662f\u7a0b\u5e8f\u7684\u5165\u53e3\u70b9 // fn \u8bed\u6cd5\u58f0\u660e\u4e86\u4e00\u4e2a\u65b0\u51fd\u6570 // () \u8868\u660e\u6ca1\u6709\u53c2\u6570 // { \u4f5c\u4e3a\u51fd\u6570\u4f53\u7684\u5f00\u59cb fn main () { println! ( \"Guess the number!\" ); // println! \u662f\u4e00\u4e2a\u5728\u5c4f\u5e55\u4e0a\u6253\u5370\u5b57\u7b26\u4e32\u7684\u5b8f println! ( \"Please input your guess.\" ); // println! \u662f\u4e00\u4e2a\u5728\u5c4f\u5e55\u4e0a\u6253\u5370\u5b57\u7b26\u4e32\u7684\u5b8f // \u521b\u5efa\u4e00\u4e2a \u53d8\u91cf\uff08variable\uff09\u6765\u50a8\u5b58\u7528\u6237\u8f93\u5165 // \u5728 Rust \u4e2d\uff0c\u53d8\u91cf\u9ed8\u8ba4\u662f\u4e0d\u53ef\u53d8\u7684\uff0c\u8fd9\u610f\u5473\u7740\u4e00\u65e6\u6211\u4eec\u7ed9\u53d8\u91cf\u8d4b\u503c\uff0c\u8fd9\u4e2a\u503c\u5c31\u4e0d\u518d\u53ef\u4ee5\u4fee\u6539\u4e86\u3002 let mut guess = String :: new (); // \u5728\u53d8\u91cf\u540d\u524d\u4f7f\u7528 mut \u6765\u4f7f\u4e00\u4e2a\u53d8\u91cf\u53ef\u53d8 // String \u662f\u4e00\u4e2a\u6807\u51c6\u5e93\u63d0\u4f9b\u7684\u5b57\u7b26\u4e32\u7c7b\u578b\uff0c\u5b83\u662f UTF-8 \u7f16\u7801\u7684\u53ef\u589e\u957f\u6587\u672c\u5757\u3002 // ::new \u90a3\u4e00\u884c\u7684 :: \u8bed\u6cd5\u8868\u660e new \u662f String \u7c7b\u578b\u7684\u4e00\u4e2a \u5173\u8054\u51fd\u6570\uff08associated function\uff09\u3002 // \u5173\u8054\u51fd\u6570\u662f\u9488\u5bf9\u7c7b\u578b\u5b9e\u73b0\u7684\uff0c\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\u662f String\uff0c\u800c\u4e0d\u662f String \u7684\u67d0\u4e2a\u7279\u5b9a\u5b9e\u4f8b\u3002\u4e00\u4e9b\u8bed\u8a00\u4e2d\u628a\u5b83\u79f0\u4e3a \u9759\u6001\u65b9\u6cd5\uff08static method\uff09\u3002 // new \u51fd\u6570\u521b\u5efa\u4e86\u4e00\u4e2a\u65b0\u7684\u7a7a\u5b57\u7b26\u4e32\uff0c\u4f60\u4f1a\u53d1\u73b0\u5f88\u591a\u7c7b\u578b\u4e0a\u6709 new \u51fd\u6570\uff0c\u56e0\u4e3a\u5b83\u662f\u521b\u5efa\u7c7b\u578b\u5b9e\u4f8b\u7684\u60ef\u7528\u51fd\u6570\u540d\u3002 // \u603b\u7684\u6765\u8bf4\uff0clet mut guess = String::new(); \u8fd9\u4e00\u884c\u521b\u5efa\u4e86\u4e00\u4e2a\u53ef\u53d8\u53d8\u91cf\uff0c\u5f53\u524d\u5b83\u7ed1\u5b9a\u5230\u4e00\u4e2a\u65b0\u7684 String \u7a7a\u5b9e\u4f8b\u4e0a\u3002 // \u5982\u679c\u7a0b\u5e8f\u7684\u5f00\u5934\u6ca1\u6709\u4f7f\u7528 use std::io \u5f15\u5165 io \u5e93\uff0c\u6211\u4eec\u4ecd\u53ef\u4ee5\u901a\u8fc7\u628a\u51fd\u6570\u8c03\u7528\u5199\u6210 std::io::stdin \u6765\u4f7f\u7528\u51fd\u6570\u3002 // stdin \u51fd\u6570\u8fd4\u56de\u4e00\u4e2a std::io::Stdin \u7684\u5b9e\u4f8b\uff0c\u8fd9\u4ee3\u8868\u7ec8\u7aef\u6807\u51c6\u8f93\u5165\u53e5\u67c4\u7684\u7c7b\u578b\u3002 io :: stdin () . read_line ( & mut guess ) // \u4ece\u6807\u51c6\u8f93\u5165\u53e5\u67c4\u83b7\u53d6\u7528\u6237\u8f93\u5165\u3002 // \u5c06 &mut guess \u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\u7ed9 read_line() \u51fd\u6570\uff0c\u8ba9\u5176\u5c06\u7528\u6237\u8f93\u5165\u50a8\u5b58\u5230\u8fd9\u4e2a\u5b57\u7b26\u4e32\u4e2d\u3002 // read_line \u7684\u5de5\u4f5c\u662f\uff0c\u65e0\u8bba\u7528\u6237\u5728\u6807\u51c6\u8f93\u5165\u4e2d\u952e\u5165\u4ec0\u4e48\u5185\u5bb9\uff0c\u90fd\u5c06\u5176\u8ffd\u52a0\uff08\u4e0d\u4f1a\u8986\u76d6\u5176\u539f\u6709\u5185\u5bb9\uff09\u5230\u4e00\u4e2a\u5b57\u7b26\u4e32\u4e2d\uff0c\u56e0\u6b64\u5b83\u9700\u8981\u5b57\u7b26\u4e32\u4f5c\u4e3a\u53c2\u6570\u3002 // \u8fd9\u4e2a\u5b57\u7b26\u4e32\u53c2\u6570\u5e94\u8be5\u662f\u53ef\u53d8\u7684\uff0c\u4ee5\u4fbf read_line \u5c06\u7528\u6237\u8f93\u5165\u9644\u52a0\u4e0a\u53bb\u3002 // & \u8868\u793a\u8fd9\u4e2a\u53c2\u6570\u662f\u4e00\u4e2a \u5f15\u7528\uff08reference\uff09\uff0c\u5b83\u5141\u8bb8\u591a\u5904\u4ee3\u7801\u8bbf\u95ee\u540c\u4e00\u5904\u6570\u636e\uff0c\u800c\u65e0\u9700\u5728\u5185\u5b58\u4e2d\u591a\u6b21\u62f7\u8d1d\u3002 . expect ( \"Failed to read line\" ); // \u4f1a\u8fd4\u56de\u4e00\u4e2a\u7c7b\u578b\u4e3a Result \u7684\u503c\u3002 Result \u662f\u4e00\u79cd\u679a\u4e3e\u7c7b\u578b\uff0c\u901a\u5e38\u4e5f\u5199\u4f5c enum\u3002 // \u679a\u4e3e\u7c7b\u578b\u53d8\u91cf\u7684\u503c\u53ef\u4ee5\u662f\u591a\u79cd\u53ef\u80fd\u72b6\u6001\u4e2d\u7684\u4e00\u4e2a\u3002\u6211\u4eec\u628a\u6bcf\u79cd\u53ef\u80fd\u7684\u72b6\u6001\u79f0\u4e3a\u4e00\u79cd \u679a\u4e3e\u6210\u5458\uff08variant\uff09\u3002 // \u8fd9\u91cc\u7684 Result \u7c7b\u578b\u5c06\u7528\u6765\u7f16\u7801\u9519\u8bef\u5904\u7406\u7684\u4fe1\u606f\u3002 // Result \u7684\u6210\u5458\u662f Ok \u548c Err\uff0c // Ok \u6210\u5458\u8868\u793a\u64cd\u4f5c\u6210\u529f\uff0c\u5185\u90e8\u5305\u542b\u6210\u529f\u65f6\u4ea7\u751f\u7684\u503c\u3002 // Err \u6210\u5458\u5219\u610f\u5473\u7740\u64cd\u4f5c\u5931\u8d25\uff0c\u5e76\u4e14\u5305\u542b\u5931\u8d25\u7684\u524d\u56e0\u540e\u679c\u3002 // Result \u7c7b\u578b\u7684\u503c\uff0c\u50cf\u5176\u4ed6\u7c7b\u578b\u4e00\u6837\uff0c\u62e5\u6709\u5b9a\u4e49\u4e8e\u5176\u4e0a\u7684\u65b9\u6cd5\u3002Result \u7684\u5b9e\u4f8b\u62e5\u6709 expect \u65b9\u6cd5\u3002 // \u5982\u679c io::Result \u5b9e\u4f8b\u7684\u503c\u662f Err\uff0cexpect \u4f1a\u5bfc\u81f4\u7a0b\u5e8f\u5d29\u6e83\uff0c\u5e76\u663e\u793a\u5f53\u505a\u53c2\u6570\u4f20\u9012\u7ed9 expect \u7684\u4fe1\u606f\u3002 // \u5982\u679c read_line \u65b9\u6cd5\u8fd4\u56de Err\uff0c\u5219\u53ef\u80fd\u662f\u6765\u6e90\u4e8e\u5e95\u5c42\u64cd\u4f5c\u7cfb\u7edf\u9519\u8bef\u7684\u7ed3\u679c\u3002 // \u5982\u679c Result \u5b9e\u4f8b\u7684\u503c\u662f Ok\uff0cexpect \u4f1a\u83b7\u53d6 Ok \u4e2d\u7684\u503c\u5e76\u539f\u6837\u8fd4\u56de\u3002 // \u5728\u672c\u4f8b\u4e2d\uff0c\u8fd9\u4e2a\u503c\u662f\u7528\u6237\u8f93\u5165\u5230\u6807\u51c6\u8f93\u5165\u4e2d\u7684\u5b57\u8282\u6570\u3002 // \u5982\u679c\u4e0d\u8c03\u7528 expect\uff0c\u7a0b\u5e8f\u4e5f\u80fd\u7f16\u8bd1\uff0c\u4e0d\u8fc7\u4f1a\u51fa\u73b0\u4e00\u4e2a\u8b66\u544a\uff1a // note: this `Result` may be an `Err` variant, which should be handled // Rust \u8b66\u544a\u6211\u4eec\u6ca1\u6709\u4f7f\u7528 read_line \u7684\u8fd4\u56de\u503c Result\uff0c\u8bf4\u660e\u6709\u4e00\u4e2a\u53ef\u80fd\u7684\u9519\u8bef\u6ca1\u6709\u5904\u7406\u3002 // \u6d88\u9664\u8b66\u544a\u7684\u6b63\u786e\u505a\u6cd5\u662f\u5b9e\u9645\u53bb\u7f16\u5199\u9519\u8bef\u5904\u7406\u4ee3\u7801\uff0c\u4e0d\u8fc7\u7531\u4e8e\u6211\u4eec\u5c31\u662f\u5e0c\u671b\u7a0b\u5e8f\u5728\u51fa\u73b0\u95ee\u9898\u65f6\u7acb\u5373\u5d29\u6e83\uff0c\u6240\u4ee5\u76f4\u63a5\u4f7f\u7528 expect\u3002 // \u7ee7\u7eed\u6df1\u5165\u5b66\u4e60\u7684\u8bdd\uff0c\u5c06\u4f1a\u5b66\u4e60\u5230\u5982\u4f55\u4ece\u9519\u8bef\u4e2d\u6062\u590d\u3002 println! ( \"You guessed: {guess}\" ); // \u6253\u5370\u4e86\u5b58\u50a8\u7528\u6237\u8f93\u5165\u7684\u5b57\u7b26\u4e32\u3002 // \u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\uff0c\u91cc\u9762\u7684 {} \u662f\u9884\u7559\u5728\u7279\u5b9a\u4f4d\u7f6e\u7684\u5360\u4f4d\u7b26 // \u4f7f\u7528 {} \u4e5f\u53ef\u4ee5\u6253\u5370\u591a\u4e2a\u503c\uff1a // \u7b2c\u4e00\u5bf9 {} \u4f7f\u7528\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u4e4b\u540e\u7684\u7b2c\u4e00\u4e2a\u503c\uff0c\u7b2c\u4e8c\u5bf9\u5219\u4f7f\u7528\u7b2c\u4e8c\u4e2a\u503c\uff0c\u4f9d\u6b64\u7c7b\u63a8\u3002\u8c03 // \u7528\u4e00\u6b21 println! \u6253\u5370\u591a\u4e2a\u503c\u770b\u8d77\u6765\u50cf\u8fd9\u6837\uff1a // println!(\"x = {} and y = {}\", x, y); }","title":"\u5904\u7406\u4e00\u6b21\u731c\u6d4b\u8f93\u5165"},{"location":"guessing-game/#_4","text":"Rust \u6807\u51c6\u5e93\u4e2d\u5c1a\u672a\u5305\u542b\u968f\u673a\u6570\u529f\u80fd\u3002\u7136\u800c\uff0cRust \u56e2\u961f\u8fd8\u662f\u63d0\u4f9b\u4e86\u4e00\u4e2a\u5305\u542b\u4e0a\u8ff0\u529f\u80fd\u7684 rand crate \u3002 rand crate \u662f\u4e00\u4e2a \u5e93 crate \uff0c \u5e93 crate \u53ef\u4ee5\u5305\u542b\u4efb\u610f\u80fd\u88ab\u5176\u4ed6\u7a0b\u5e8f\u4f7f\u7528\u7684\u4ee3\u7801\uff0c\u4f46\u662f\u4e0d\u80fd\u81ea\u6267\u884c\u3002 \u5728\u4f7f\u7528 rand \u7f16\u5199\u4ee3\u7801\u4e4b\u524d\uff0c\u9700\u8981\u4fee\u6539 Cargo.toml \u6587\u4ef6\uff0c\u5f15\u5165\u4e00\u4e2a rand \u4f9d\u8d56\u3002\u73b0\u5728\u6253\u5f00\u8fd9\u4e2a\u6587\u4ef6\u5e76\u5c06\u4e0b\u9762\u8fd9\u4e00\u884c\u6dfb\u52a0\u5230 [dependencies] \u7247\u6bb5\u6807\u9898\u4e4b\u4e0b\u3002 \u6587\u4ef6\u540d: Cargo.toml rand = \"0.8.3\" [dependencies] \u7247\u6bb5\u544a\u8bc9 Cargo \u672c\u9879\u76ee\u4f9d\u8d56\u4e86\u54ea\u4e9b\u5916\u90e8 crate \u53ca\u5176\u7248\u672c\u3002\u672c\u4f8b\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u8bed\u4e49\u5316\u7248\u672c 0.8.3 \u6765\u6307\u5b9a rand crate \u7684\u7248\u672c\u3002Cargo \u7406\u89e3 \u8bed\u4e49\u5316\u7248\u672c \uff08Semantic Versioning\uff09\uff08\u6709\u65f6\u4e5f\u79f0\u4e3a SemVer\uff09\uff0c\u8fd9\u662f\u4e00\u79cd\u5b9a\u4e49\u7248\u672c\u53f7\u7684\u6807\u51c6\u3002 0.8.3 \u4e8b\u5b9e\u4e0a\u662f ^0.8.3 \u7684\u7b80\u5199\uff0c\u5b83\u8868\u793a\u4efb\u4f55\u81f3\u5c11\u662f 0.8.3 \u4f46\u5c0f\u4e8e 0.9.0 \u7684\u7248\u672c\u3002 Cargo \u8ba4\u4e3a\u8fd9\u4e9b\u7248\u672c\u4e0e 0.8.3 \u7248\u672c\u7684\u516c\u6709 API \u76f8\u517c\u5bb9\uff0c\u8fd9\u6837\u7684\u7248\u672c\u6307\u5b9a\u786e\u4fdd\u4e86\u6211\u4eec\u53ef\u4ee5\u83b7\u53d6\u80fd\u4f7f\u672c\u7ae0\u4ee3\u7801\u7f16\u8bd1\u7684\u6700\u65b0\u7684\u8865\u4e01\uff08patch\uff09\u7248\u672c\u3002\u4efb\u4f55\u5927\u4e8e\u7b49\u4e8e 0.9.0 \u7684\u7248\u672c\u4e0d\u80fd\u4fdd\u8bc1\u548c\u63a5\u4e0b\u6765\u7684\u793a\u4f8b\u91c7\u7528\u4e86\u76f8\u540c\u7684 API\u3002 \u73b0\u5728\uff0c\u4e0d\u4fee\u6539\u4efb\u4f55\u4ee3\u7801\uff0c\u6784\u5efa\u9879\u76ee\uff0c\u5982\u4e0b\u6240\u793a\uff1a $ cargo build Updating crates.io index Downloaded ppv-lite86 v0.2.17 Downloaded rand v0.8.5 Downloaded rand_chacha v0.3.1 Downloaded rand_core v0.6.4 Downloaded cfg-if v1.0.0 Downloaded getrandom v0.2.8 Downloaded libc v0.2.138 Downloaded 7 crates ( 794 .8 KB ) in 2 .72s Compiling libc v0.2.138 Compiling cfg-if v1.0.0 Compiling ppv-lite86 v0.2.17 Compiling getrandom v0.2.8 Compiling rand_core v0.6.4 Compiling rand_chacha v0.3.1 Compiling rand v0.8.5 Compiling guessing-game v0.1.0 ( file:///projects/guessing_game ) Finished dev [ unoptimized + debuginfo ] target ( s ) in 3m 45s # \u5c06 rand crate \u6dfb\u52a0\u4e3a\u4f9d\u8d56\u4e4b\u540e\u8fd0\u884c cargo build \u7684\u8f93\u51fa \u73b0\u5728\u7cfb\u7edf\u6709\u4e86\u4e00\u4e2a\u5916\u90e8\u4f9d\u8d56\uff0cCargo \u4ece registry \u4e0a\u83b7\u53d6\u6240\u6709\u5305\u7684\u6700\u65b0\u7248\u672c\u4fe1\u606f\uff0c\u8fd9\u662f\u4e00\u4efd\u6765\u81ea Crates.io \u7684\u6570\u636e\u62f7\u8d1d\u3002Crates.io \u662f Rust \u751f\u6001\u73af\u5883\u4e2d\u7684\u5f00\u53d1\u8005\u4eec\u5411\u4ed6\u4eba\u8d21\u732e Rust \u5f00\u6e90\u9879\u76ee\u7684\u5730\u65b9\u3002 \u5728\u66f4\u65b0\u5b8c registry \u540e\uff0cCargo \u68c0\u67e5 [dependencies] \u90e8\u5206\u5e76\u4e0b\u8f7d\u5217\u8868\u4e2d\u5305\u542b\u4f46\u8fd8\u672a\u4e0b\u8f7d\u7684 crates \u3002\u672c\u4f8b\u4e2d\uff0c\u867d\u7136\u53ea\u58f0\u660e\u4e86 rand \u4e00\u4e2a\u4f9d\u8d56\uff0c\u7136\u800c Cargo \u8fd8\u662f\u989d\u5916\u83b7\u53d6\u4e86 rand \u6240\u9700\u8981\u7684\u5176\u4ed6 crates\uff0c\u56e0\u4e3a rand \u4f9d\u8d56\u5b83\u4eec\u6765\u6b63\u5e38\u5de5\u4f5c\u3002\u4e0b\u8f7d\u5b8c\u6210\u540e\uff0cRust \u7f16\u8bd1\u4f9d\u8d56\uff0c\u7136\u540e\u4f7f\u7528\u8fd9\u4e9b\u4f9d\u8d56\u7f16\u8bd1\u9879\u76ee\u3002 \u6587\u4ef6\u540d: src/main.rs // \u65b0\u589e\u4e86\u4e00\u884c use rand::Rng\u3002 // Rng \u662f\u4e00\u4e2a trait\uff0c\u5b83\u5b9a\u4e49\u4e86\u968f\u673a\u6570\u751f\u6210\u5668\u5e94\u5b9e\u73b0\u7684\u65b9\u6cd5\uff0c\u60f3\u4f7f\u7528\u8fd9\u4e9b\u65b9\u6cd5\u7684\u8bdd\uff0c\u6b64 trait \u5fc5\u987b\u5728\u4f5c\u7528\u57df\u4e2d\u3002 use rand :: Rng ; use std :: io ; fn main () { println! ( \"\u731c\u6570\u6e38\u620f\uff01\uff01\" ); let secret_number = rand :: thread_rng (). gen_range ( 1 ..= 100 ); // \u8c03\u7528\u4e86 rand::thread_rng \u51fd\u6570\u63d0\u4f9b\u5b9e\u9645\u4f7f\u7528\u7684\u968f\u673a\u6570\u751f\u6210\u5668\uff1a\u5b83\u4f4d\u4e8e\u5f53\u524d\u6267\u884c\u7ebf\u7a0b\u7684\u672c\u5730\u73af\u5883\u4e2d\uff0c\u5e76\u4ece\u64cd\u4f5c\u7cfb\u7edf\u83b7\u53d6 seed\u3002 // \u63a5\u7740\u8c03\u7528\u968f\u673a\u6570\u751f\u6210\u5668\u7684 gen_range \u65b9\u6cd5\u3002\u8fd9\u4e2a\u65b9\u6cd5\u7531 use rand::Rng \u8bed\u53e5\u5f15\u5165\u5230\u4f5c\u7528\u57df\u7684 Rng trait \u5b9a\u4e49\u3002 // gen_range \u65b9\u6cd5\u83b7\u53d6\u4e00\u4e2a\u8303\u56f4\u8868\u8fbe\u5f0f\uff08range expression\uff09\u4f5c\u4e3a\u53c2\u6570\uff0c\u5e76\u751f\u6210\u4e00\u4e2a\u5728\u6b64\u8303\u56f4\u4e4b\u95f4\u7684\u968f\u673a\u6570\u3002 // \u8fd9\u91cc\u4f7f\u7528\u7684\u8fd9\u7c7b\u8303\u56f4\u8868\u8fbe\u5f0f\u4f7f\u7528\u4e86 start..=end \u8fd9\u6837\u7684\u5f62\u5f0f\uff0c\u4e5f\u5c31\u662f\u8bf4\u5305\u542b\u4e86\u4e0a\u4e0b\u7aef\u70b9\uff0c\u6240\u4ee5\u9700\u8981\u6307\u5b9a 1..=100 \u6765\u8bf7\u6c42\u4e00\u4e2a 1 \u548c 100 \u4e4b\u95f4\u7684\u6570\u3002 println! ( \"\u751f\u6210\u7684\u5bc6\u7801\u6570\u5b57\u662f: {secret_number}\" ); println! ( \"\u8bf7\u8f93\u5165\u4e00\u4e2a\u503c:\" ); let mut guess = String :: new (); io :: stdin (). read_line ( & mut guess ). expect ( \"\u8bfb\u6570\u5931\u8d25!\" ); println! ( \"\u4f60\u731c\u6d4b\u7684\u6570\u4e3a: {guess}\" ) } \u6ce8\u610f \uff1a \u4f60\u4e0d\u53ef\u80fd\u51ed\u7a7a\u5c31\u77e5\u9053\u5e94\u8be5 use \u54ea\u4e2a trait \u4ee5\u53ca\u8be5\u4ece crate \u4e2d\u8c03\u7528\u54ea\u4e2a\u65b9\u6cd5\uff0c\u56e0\u6b64\u6bcf\u4e2acrate \u6709\u4f7f\u7528\u8bf4\u660e\u6587\u6863\u3002 Cargo \u6709\u4e00\u4e2a\u5f88\u68d2\u7684\u529f\u80fd\u662f\uff1a\u8fd0\u884c cargo doc --open \u547d\u4ee4\u6765\u6784\u5efa\u6240\u6709\u672c\u5730\u4f9d\u8d56\u63d0\u4f9b\u7684\u6587\u6863\uff0c\u5e76\u5728\u6d4f\u89c8\u5668\u4e2d\u6253\u5f00\u3002 \u4f8b\u5982\uff0c\u5047\u8bbe\u4f60\u5bf9 rand crate \u4e2d\u7684\u5176\u4ed6\u529f\u80fd\u611f\u5174\u8da3\uff0c\u4f60\u53ef\u4ee5\u8fd0\u884c cargo doc --open \u5e76\u70b9\u51fb\u5de6\u4fa7\u5bfc\u822a\u680f\u4e2d\u7684 rand\u3002","title":"\u751f\u6210\u4e00\u4e2a\u79d8\u5bc6\u6570\u5b57"},{"location":"guessing-game/#_5","text":"\u6587\u4ef6\u540d: src/main.rs use rand :: Rng ; use std :: cmp :: Ordering ; // \u4ece\u6807\u51c6\u5e93\u5f15\u5165\u4e86\u4e00\u4e2a\u53eb\u505a std::cmp::Ordering \u7684\u7c7b\u578b\u5230\u4f5c\u7528\u57df\u4e2d\u3002 // Ordering \u4e5f\u662f\u4e00\u4e2a\u679a\u4e3e\uff0c\u4e0d\u8fc7\u5b83\u7684\u6210\u5458\u662f Less\u3001Greater \u548c Equal\u3002 // \u8fd9\u662f\u6bd4\u8f83\u4e24\u4e2a\u503c\u65f6\u53ef\u80fd\u51fa\u73b0\u7684\u4e09\u79cd\u7ed3\u679c\u3002 use std :: io ; fn main () { println! ( \"\u731c\u6570\u6e38\u620f\uff01\uff01\" ); let secret_number = rand :: thread_rng (). gen_range ( 1 ..= 100 ); println! ( \"\u751f\u6210\u7684\u5bc6\u7801\u6570\u5b57\u662f: {secret_number}\" ); println! ( \"\u8bf7\u8f93\u5165\u4e00\u4e2a\u503c:\" ); let mut guess = String :: new (); io :: stdin (). read_line ( & mut guess ). expect ( \"\u8bfb\u6570\u5931\u8d25!\" ); println! ( \"\u4f60\u731c\u6d4b\u7684\u6570\u4e3a: {guess}\" ); match guess . cmp ( & secret_number ){ // cmp \u65b9\u6cd5\u7528\u6765\u6bd4\u8f83\u4e24\u4e2a\u503c\u5e76\u53ef\u4ee5\u5728\u4efb\u4f55\u53ef\u6bd4\u8f83\u7684\u503c\u4e0a\u8c03\u7528\u3002 // \u5b83\u83b7\u53d6\u4e00\u4e2a\u88ab\u6bd4\u8f83\u503c\u7684\u5f15\u7528\uff1a\u8fd9\u91cc\u662f\u628a guess \u4e0e secret_number \u505a\u6bd4\u8f83\u3002 // \u7136\u540e\u5b83\u4f1a\u8fd4\u56de\u4e00\u4e2a\u521a\u624d\u901a\u8fc7 use \u5f15\u5165\u4f5c\u7528\u57df\u7684 Ordering \u679a\u4e3e\u7684\u6210\u5458\u3002 // \u4f7f\u7528\u4e00\u4e2a match \u8868\u8fbe\u5f0f\uff0c\u6839\u636e\u5bf9 guess \u548c secret_number \u8c03\u7528 cmp \u8fd4\u56de\u7684 Ordering \u6210\u5458\u6765\u51b3\u5b9a\u63a5\u4e0b\u6765\u505a\u4ec0\u4e48\u3002 Ordering :: Less => println! ( \"\u592a\u5c0f\u4e86\uff01\" ), Ordering :: Greater => println! ( \"\u592a\u5927\u4e86\uff01\" ), Ordering :: Equal => println! ( \"\u731c\u5bf9\u4e86\uff01\" ), } } \u4e00\u4e2a match \u8868\u8fbe\u5f0f\u7531 \u5206\u652f\uff08arms\uff09 \u6784\u6210\u3002 \u4e00\u4e2a\u5206\u652f\u5305\u542b\u4e00\u4e2a \u6a21\u5f0f\uff08pattern\uff09\u548c\u8868\u8fbe\u5f0f\u5f00\u5934\u7684\u503c\u4e0e\u5206\u652f\u6a21\u5f0f\u76f8\u5339\u914d\u65f6\u5e94\u8be5\u6267\u884c\u7684\u4ee3\u7801\u3002 Rust \u83b7\u53d6\u63d0\u4f9b\u7ed9 match \u7684\u503c\u5e76\u6328\u4e2a\u68c0\u67e5\u6bcf\u4e2a\u5206\u652f\u7684\u6a21\u5f0f\u3002 \u6b64\u65f6\u8fdb\u884c cargo build \u4f1a\u51fa\u73b0\u5982\u4e0b\u9519\u8bef: cargo build Compiling guessing-game v0.1.0 ( /files/rust-example-apps/src/guessing-game ) error [ E0308 ] : mismatched types --> src/main.rs:20:21 | 20 | match guess.cmp ( & secret_number ) { | --- ^^^^^^^^^^^^^^ expected struct ` String ` , found integer | | | arguments to this function are incorrect | = note: expected reference ` & String ` found reference ` & { integer } ` note: associated function defined here For more information about this error, try ` rustc --explain E0308 ` . error: could not compile ` guessing-game ` due to previous error \u9519\u8bef\u7684\u6838\u5fc3\u8868\u660e\u8fd9\u91cc\u6709 \u4e0d\u5339\u914d\u7684\u7c7b\u578b\uff08mismatched types\uff09 \u3002 Rust \u6709\u4e00\u4e2a\u9759\u6001\u5f3a\u7c7b\u578b\u7cfb\u7edf\uff0c\u540c\u65f6\u4e5f\u6709\u7c7b\u578b\u63a8\u65ad\u3002 \u5f53\u6211\u4eec\u5199\u51fa let guess = String::new() \u65f6\uff0cRust \u63a8\u65ad\u51fa guess \u5e94\u8be5\u662f String \u7c7b\u578b\uff0c\u5e76\u4e0d\u9700\u8981\u6211\u4eec\u5199\u51fa\u7c7b\u578b\u3002 \u53e6\u4e00\u65b9\u9762\uff0csecret_number\uff0c\u662f\u6570\u5b57\u7c7b\u578b\u3002\u51e0\u4e2a\u6570\u5b57\u7c7b\u578b\u62e5\u6709 1 \u5230 100 \u4e4b\u95f4\u7684\u503c\uff1a32 \u4f4d\u6570\u5b57 i32\uff1b32 \u4f4d\u65e0\u7b26\u53f7\u6570\u5b57 u32\uff1b64 \u4f4d\u6570\u5b57 i64 \u7b49\u7b49\u3002 Rust \u9ed8\u8ba4\u4f7f\u7528 i32\uff0c\u6240\u4ee5\u5b83\u662f secret_number \u7684\u7c7b\u578b\uff0c\u9664\u975e\u589e\u52a0\u7c7b\u578b\u4fe1\u606f\uff0c\u6216\u4efb\u4f55\u80fd\u8ba9 Rust \u63a8\u65ad\u51fa\u4e0d\u540c\u6570\u503c\u7c7b\u578b\u7684\u4fe1\u606f\u3002 \u8fd9\u91cc\u9519\u8bef\u7684\u539f\u56e0\u5728\u4e8e Rust \u4e0d\u4f1a\u6bd4\u8f83\u5b57\u7b26\u4e32\u7c7b\u578b\u548c\u6570\u5b57\u7c7b\u578b\u3002 \u6240\u4ee5\u6211\u4eec\u5fc5\u987b\u628a\u4ece\u8f93\u5165\u4e2d\u8bfb\u53d6\u5230\u7684 String \u8f6c\u6362\u4e3a\u4e00\u4e2a\u771f\u6b63\u7684\u6570\u5b57\u7c7b\u578b\uff0c\u624d\u597d\u4e0e\u79d8\u5bc6\u6570\u5b57\u8fdb\u884c\u6bd4\u8f83\u3002\u8fd9\u53ef\u4ee5\u901a\u8fc7\u5728 main \u51fd\u6570\u4f53\u4e2d\u589e\u52a0\u5982\u4e0b\u4ee3\u7801\u6765\u5b9e\u73b0\uff1a \u6587\u4ef6\u540d: src/main.rs use rand :: Rng ; use std :: cmp :: Ordering ; use std :: io ; fn main () { println! ( \"\u731c\u6570\u6e38\u620f\uff01\uff01\" ); let secret_number = rand :: thread_rng (). gen_range ( 1 ..= 100 ); println! ( \"\u751f\u6210\u7684\u5bc6\u7801\u6570\u5b57\u662f: {secret_number}\" ); println! ( \"\u8bf7\u8f93\u5165\u4e00\u4e2a\u503c:\" ); let mut guess = String :: new (); io :: stdin (). read_line ( & mut guess ). expect ( \"\u8bfb\u6570\u5931\u8d25!\" ); let guess : u32 = guess . trim (). parse (). expect ( \"\u8bf7\u8f93\u5165\u6570\u5b57!\" ); // \u8fd9\u91cc\u521b\u5efa\u4e86\u4e00\u4e2a\u53eb\u505a guess \u7684\u53d8\u91cf\u3002 // \u4e0d\u8fc7\u7b49\u7b49\uff0c\u4e0d\u662f\u5df2\u7ecf\u6709\u4e86\u4e00\u4e2a\u53eb\u505a guess \u7684\u53d8\u91cf\u4e86\u5417\uff1f // \u786e\u5b9e\u5982\u6b64\uff0c\u4e0d\u8fc7 Rust \u5141\u8bb8\u7528\u4e00\u4e2a\u65b0\u503c\u6765 \u9690\u85cf \uff08shadow\uff09 guess \u4e4b\u524d\u7684\u503c\u3002 // \u8fd9\u4e2a\u529f\u80fd\u5e38\u7528\u5728\u9700\u8981\u8f6c\u6362\u503c\u7c7b\u578b\u4e4b\u7c7b\u7684\u573a\u666f\u3002 // \u5b83\u5141\u8bb8\u6211\u4eec\u590d\u7528 guess \u53d8\u91cf\u7684\u540d\u5b57\uff0c\u800c\u4e0d\u662f\u88ab\u8feb\u521b\u5efa\u4e24\u4e2a\u4e0d\u540c\u53d8\u91cf\uff0c\u8bf8\u5982 guess_str \u548c guess \u4e4b\u7c7b\u3002 // \u5c06\u8fd9\u4e2a\u65b0\u53d8\u91cf\u7ed1\u5b9a\u5230 guess.trim().parse() \u8868\u8fbe\u5f0f\u4e0a\u3002 // \u8868\u8fbe\u5f0f\u4e2d\u7684 guess \u6307\u7684\u662f\u5305\u542b\u8f93\u5165\u7684\u5b57\u7b26\u4e32\u7c7b\u578b guess \u53d8\u91cf\u3002 // String \u5b9e\u4f8b\u7684 trim \u65b9\u6cd5\u4f1a\u53bb\u9664\u5b57\u7b26\u4e32\u5f00\u5934\u548c\u7ed3\u5c3e\u7684\u7a7a\u767d\u5b57\u7b26\uff0c\u6211\u4eec\u5fc5\u987b\u6267\u884c\u6b64\u65b9\u6cd5\u624d\u80fd\u5c06\u5b57\u7b26\u4e32\u4e0e u32 \u6bd4\u8f83\uff0c\u56e0\u4e3a u32 \u53ea\u80fd\u5305\u542b\u6570\u503c\u578b\u6570\u636e\u3002 // \u7528\u6237\u5fc5\u987b\u8f93\u5165 enter \u952e\u624d\u80fd\u8ba9 read_line \u8fd4\u56de\u5e76\u8f93\u5165\u4ed6\u4eec\u7684\u731c\u60f3\uff0c\u8fd9\u5c06\u4f1a\u5728\u5b57\u7b26\u4e32\u4e2d\u589e\u52a0\u4e00\u4e2a\u6362\u884c\uff08newline\uff09\u7b26\u3002 // \u4f8b\u5982\uff0c\u7528\u6237\u8f93\u5165 5 \u5e76\u6309\u4e0b enter, guess \u770b\u8d77\u6765\u50cf\u8fd9\u6837\uff1a5\\n \u6216\u8005 5\\r\\n\u3002 // \\n \u4ee3\u8868 \u201c\u6362\u884c\u201d\uff0c\u56de\u8f66\u952e\uff1b\\r \u4ee3\u8868 \u201c\u56de\u8f66\u201d\uff0c\u56de\u8f66\u952e\u3002 // trim \u65b9\u6cd5\u4f1a\u6d88\u9664 \\n \u6216\u8005 \\r\\n\uff0c\u53ea\u7559\u4e0b 5\u3002 // \u5b57\u7b26\u4e32\u7684 parse \u65b9\u6cd5 \u5c06\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u5176\u4ed6\u7c7b\u578b\u3002 // \u8fd9\u91cc\u7528\u5b83\u6765\u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u503c\u3002\u6211\u4eec\u9700\u8981\u544a\u8bc9 Rust \u5177\u4f53\u7684\u6570\u5b57\u7c7b\u578b\uff0c\u8fd9\u91cc\u901a\u8fc7 let guess: u32 \u6307\u5b9a\u3002 // guess \u540e\u9762\u7684\u5192\u53f7\uff08:\uff09\u544a\u8bc9 Rust \u6211\u4eec\u6307\u5b9a\u4e86\u53d8\u91cf\u7684\u7c7b\u578b\u3002 // Rust \u6709\u4e00\u4e9b\u5185\u5efa\u7684\u6570\u5b57\u7c7b\u578b\uff1bu32 \u662f\u4e00\u4e2a\u65e0\u7b26\u53f7\u7684 32 \u4f4d\u6574\u578b\u3002 // \u5bf9\u4e8e\u4e0d\u5927\u7684\u6b63\u6574\u6570\u6765\u8bf4\uff0c\u5b83\u662f\u4e0d\u9519\u7684\u9ed8\u8ba4\u7c7b\u578b\uff0c\u7b2c\u4e09\u7ae0\u8fd8\u4f1a\u8bb2\u5230\u5176\u4ed6\u6570\u5b57\u7c7b\u578b\u3002 // \u53e6\u5916\uff0c\u7a0b\u5e8f\u4e2d\u7684 u32 \u6ce8\u89e3\u4ee5\u53ca\u4e0e secret_number \u7684\u6bd4\u8f83\uff0c\u610f\u5473\u7740 Rust \u4f1a\u63a8\u65ad\u51fa secret_number \u4e5f\u662f u32 \u7c7b\u578b\u3002 // \u73b0\u5728\u53ef\u4ee5\u4f7f\u7528\u76f8\u540c\u7c7b\u578b\u6bd4\u8f83\u4e24\u4e2a\u503c\u4e86\uff01 // parse \u65b9\u6cd5\u53ea\u6709\u5728\u5b57\u7b26\u903b\u8f91\u4e0a\u53ef\u4ee5\u8f6c\u6362\u4e3a\u6570\u5b57\u7684\u65f6\u5019\u624d\u80fd\u5de5\u4f5c\u6240\u4ee5\u975e\u5e38\u5bb9\u6613\u51fa\u9519\u3002 // \u4f8b\u5982\uff0c\u5b57\u7b26\u4e32\u4e2d\u5305\u542b A\ud83d\udc4d%\uff0c\u5c31\u65e0\u6cd5\u5c06\u5176\u8f6c\u6362\u4e3a\u4e00\u4e2a\u6570\u5b57\u3002 // \u56e0\u6b64\uff0cparse \u65b9\u6cd5\u8fd4\u56de\u4e00\u4e2a Result \u7c7b\u578b\u3002 // \u50cf\u4e4b\u524d \u201c\u4f7f\u7528 Result \u7c7b\u578b\u6765\u5904\u7406\u6f5c\u5728\u7684\u9519\u8bef\u201d \u8ba8\u8bba\u7684 read_line \u65b9\u6cd5\u90a3\u6837\uff0c\u518d\u6b21\u6309\u90e8\u5c31\u73ed\u7684\u7528 expect \u65b9\u6cd5\u5904\u7406\u5373\u53ef\u3002 // \u5982\u679c parse \u4e0d\u80fd\u4ece\u5b57\u7b26\u4e32\u751f\u6210\u4e00\u4e2a\u6570\u5b57\uff0c\u8fd4\u56de\u4e00\u4e2a Result \u7684 Err \u6210\u5458\u65f6\uff0cexpect \u4f1a\u4f7f\u6e38\u620f\u5d29\u6e83\u5e76\u6253\u5370\u9644\u5e26\u7684\u4fe1\u606f\u3002 // \u5982\u679c parse \u6210\u529f\u5730\u5c06\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u4e00\u4e2a\u6570\u5b57\uff0c\u5b83\u4f1a\u8fd4\u56de Result \u7684 Ok \u6210\u5458\uff0c\u7136\u540e expect \u4f1a\u8fd4\u56de Ok \u503c\u4e2d\u7684\u6570\u5b57\u3002 println! ( \"\u4f60\u731c\u6d4b\u7684\u6570\u4e3a: {guess}\" ); match guess . cmp ( & secret_number ) { Ordering :: Less => println! ( \"\u592a\u5c0f\u4e86\uff01\" ), Ordering :: Greater => println! ( \"\u592a\u5927\u4e86\uff01\" ), Ordering :: Equal => println! ( \"\u731c\u5bf9\u4e86\uff01\" ), } }","title":"\u6bd4\u8f83\u731c\u6d4b\u7684\u6570\u5b57\u548c\u79d8\u5bc6\u6570\u5b57"},{"location":"guessing-game/#_6","text":"loop \u5173\u952e\u5b57\u521b\u5efa\u4e86\u4e00\u4e2a\u65e0\u9650\u5faa\u73af\u3002 \u6587\u4ef6\u540d: src/main.rs use rand :: Rng ; use std :: cmp :: Ordering ; use std :: io ; fn main () { println! ( \"\u731c\u6570\u6e38\u620f\uff01\uff01\" ); let secret_number = rand :: thread_rng (). gen_range ( 1 ..= 100 ); println! ( \"\u751f\u6210\u7684\u5bc6\u7801\u6570\u5b57\u662f: {secret_number}\" ); loop { println! ( \"\u8bf7\u8f93\u5165\u4e00\u4e2a\u503c:\" ); let mut guess = String :: new (); io :: stdin (). read_line ( & mut guess ). expect ( \"\u8bfb\u6570\u5931\u8d25!\" ); let guess : u32 = guess . trim (). parse (). expect ( \"\u8bf7\u8f93\u5165\u6570\u5b57!\" ); println! ( \"\u4f60\u731c\u6d4b\u7684\u6570\u4e3a: {guess}\" ); match guess . cmp ( & secret_number ) { Ordering :: Less => println! ( \"\u592a\u5c0f\u4e86\uff01\" ), Ordering :: Greater => println! ( \"\u592a\u5927\u4e86\uff01\" ), Ordering :: Equal => println! ( \"\u731c\u5bf9\u4e86\uff01\" ), } } } \u5982\u4e0a\u6240\u793a\uff0c\u6211\u4eec\u5c06\u63d0\u793a\u7528\u6237\u731c\u6d4b\u4e4b\u540e\u7684\u6240\u6709\u5185\u5bb9\u79fb\u52a8\u5230\u4e86\u5faa\u73af\u4e2d\u3002\u786e\u4fdd loop \u5faa\u73af\u4e2d\u7684\u4ee3\u7801\u591a\u7f29\u8fdb\u56db\u4e2a\u7a7a\u683c\uff0c\u518d\u6b21\u8fd0\u884c\u7a0b\u5e8f\u3002\u6ce8\u610f\u8fd9\u91cc\u6709\u4e00\u4e2a\u65b0\u95ee\u9898\uff0c\u56e0\u4e3a\u7a0b\u5e8f\u5fe0\u5b9e\u5730\u6267\u884c\u4e86\u6211\u4eec\u7684\u8981\u6c42\uff1a\u6c38\u8fdc\u5730\u8bf7\u6c42\u53e6\u4e00\u4e2a\u731c\u6d4b\uff0c\u7528\u6237\u597d\u50cf\u65e0\u6cd5\u9000\u51fa\u554a\uff01 \u7528\u6237\u603b\u80fd\u4f7f\u7528 ctrl-c \u7ec8\u6b62\u7a0b\u5e8f\u3002\u4e0d\u8fc7\u8fd8\u6709\u53e6\u4e00\u4e2a\u65b9\u6cd5\u8df3\u51fa\u65e0\u9650\u5faa\u73af\uff0c\u5c31\u662f \u201c\u6bd4\u8f83\u731c\u6d4b\u4e0e\u79d8\u5bc6\u6570\u5b57\u201d \u90e8\u5206\u63d0\u5230\u7684 parse\uff1a\u5982\u679c\u7528\u6237\u8f93\u5165\u7684\u7b54\u6848\u4e0d\u662f\u4e00\u4e2a\u6570\u5b57\uff0c\u7a0b\u5e8f\u4f1a\u5d29\u6e83\u3002\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u8fd9\u4e00\u70b9\u6765\u9000\u51fa\uff0c\u5982\u4e0b\u6240\u793a\uff1a $ cargo run Compiling guessing_game v0.1.0 ( file:///projects/guessing_game ) Finished dev [ unoptimized + debuginfo ] target ( s ) in 1 .50s Running ` target/debug/guessing_game ` \u731c\u6570\u6e38\u620f\uff01\uff01 \u751f\u6210\u7684\u5bc6\u7801\u6570\u5b57\u662f: 57 \u8bf7\u8f93\u5165\u4e00\u4e2a\u503c: 12 \u4f60\u731c\u6d4b\u7684\u6570\u4e3a: 12 \u592a\u5c0f\u4e86\uff01 \u8bf7\u8f93\u5165\u4e00\u4e2a\u503c: 57 \u4f60\u731c\u6d4b\u7684\u6570\u4e3a: 57 \u731c\u5bf9\u4e86\uff01 \u8bf7\u8f93\u5165\u4e00\u4e2a\u503c: asdf thread 'main' panicked at '\u8bf7\u8f93\u5165\u6570\u5b57!: ParseIntError { kind: InvalidDigit }' , src/main.rs:19:47 note: run with ` RUST_BACKTRACE = 1 ` environment variable to display a backtrace","title":"\u4f7f\u7528\u5faa\u73af\u6765\u5141\u8bb8\u591a\u6b21\u731c\u6d4b"},{"location":"guessing-game/#_7","text":"\u8ba9\u6211\u4eec\u589e\u52a0\u4e00\u4e2a break \u8bed\u53e5\uff0c\u5728\u7528\u6237\u731c\u5bf9\u65f6\u9000\u51fa\u6e38\u620f\uff1a \u6587\u4ef6\u540d: src/main.rs use rand :: Rng ; use std :: cmp :: Ordering ; use std :: io ; fn main () { println! ( \"\u731c\u6570\u6e38\u620f\uff01\uff01\" ); let secret_number = rand :: thread_rng (). gen_range ( 1 ..= 100 ); println! ( \"\u751f\u6210\u7684\u5bc6\u7801\u6570\u5b57\u662f: {secret_number}\" ); loop { println! ( \"\u8bf7\u8f93\u5165\u4e00\u4e2a\u503c:\" ); let mut guess = String :: new (); io :: stdin (). read_line ( & mut guess ). expect ( \"\u8bfb\u6570\u5931\u8d25!\" ); let guess : u32 = guess . trim (). parse (). expect ( \"\u8bf7\u8f93\u5165\u6570\u5b57!\" ); println! ( \"\u4f60\u731c\u6d4b\u7684\u6570\u4e3a: {guess}\" ); match guess . cmp ( & secret_number ) { Ordering :: Less => println! ( \"\u592a\u5c0f\u4e86\uff01\" ), Ordering :: Greater => println! ( \"\u592a\u5927\u4e86\uff01\" ), Ordering :: Equal => { println! ( \"\u731c\u5bf9\u4e86\uff01\" ); break ; } } } } a \u901a\u8fc7\u5728 You win! \u4e4b\u540e\u589e\u52a0\u4e00\u884c break\uff0c\u7528\u6237\u731c\u5bf9\u4e86\u795e\u79d8\u6570\u5b57\u540e\u4f1a\u9000\u51fa\u5faa\u73af\u3002\u9000\u51fa\u5faa\u73af\u4e5f\u610f\u5473\u7740\u9000\u51fa\u7a0b\u5e8f\uff0c\u56e0\u4e3a\u5faa\u73af\u662f main \u7684\u6700\u540e\u4e00\u90e8\u5206\u3002","title":"\u731c\u6d4b\u6b63\u786e\u540e\u9000\u51fa"},{"location":"guessing-game/#_8","text":"\u4e3a\u4e86\u8fdb\u4e00\u6b65\u6539\u5584\u6e38\u620f\u6027\uff0c\u4e0d\u8981\u5728\u7528\u6237\u8f93\u5165\u975e\u6570\u5b57\u65f6\u5d29\u6e83\uff0c\u9700\u8981\u5ffd\u7565\u975e\u6570\u5b57\uff0c\u8ba9\u7528\u6237\u53ef\u4ee5\u7ee7\u7eed\u731c\u6d4b\u3002\u53ef\u4ee5\u901a\u8fc7\u4fee\u6539 guess \u5c06 String \u8f6c\u5316\u4e3a u32 \u90a3\u90e8\u5206\u4ee3\u7801\u6765\u5b9e\u73b0 \u6587\u4ef6\u540d: src/main.rs use rand :: Rng ; use std :: cmp :: Ordering ; use std :: io ; fn main () { println! ( \"\u731c\u6570\u6e38\u620f\uff01\uff01\" ); let secret_number = rand :: thread_rng (). gen_range ( 1 ..= 100 ); println! ( \"\u751f\u6210\u7684\u5bc6\u7801\u6570\u5b57\u662f: {secret_number}\" ); loop { println! ( \"\u8bf7\u8f93\u5165\u4e00\u4e2a\u503c:\" ); let mut guess = String :: new (); io :: stdin (). read_line ( & mut guess ). expect ( \"\u8bfb\u6570\u5931\u8d25!\" ); let guess : u32 = match guess . trim (). parse () { Ok ( num ) => num , Err ( _ ) => continue , }; // \u5c06 expect \u8c03\u7528\u6362\u6210 match \u8bed\u53e5\uff0c\u4ee5\u4ece\u9047\u5230\u9519\u8bef\u5c31\u5d29\u6e83\u8f6c\u6362\u4e3a\u5904\u7406\u9519\u8bef\u3002 // \u987b\u77e5 parse \u8fd4\u56de\u4e00\u4e2a Result \u7c7b\u578b\uff0c\u800c Result \u662f\u4e00\u4e2a\u62e5\u6709 Ok \u6216 Err \u6210\u5458\u7684\u679a\u4e3e\u3002 // \u8fd9\u91cc\u4f7f\u7528\u7684 match \u8868\u8fbe\u5f0f\uff0c\u548c\u5904\u7406 cmp \u65b9\u6cd5\u8fd4\u56de Ordering \u65f6\u7528\u7684\u4e00\u6837\u3002 // \u5982\u679c parse \u80fd\u591f\u6210\u529f\u7684\u5c06\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u4e00\u4e2a\u6570\u5b57\uff0c\u5b83\u4f1a\u8fd4\u56de\u4e00\u4e2a\u5305\u542b\u7ed3\u679c\u6570\u5b57\u7684 Ok\u3002 // \u8fd9\u4e2a Ok \u503c\u4e0e match \u7b2c\u4e00\u4e2a\u5206\u652f\u7684\u6a21\u5f0f\u76f8\u5339\u914d\uff0c\u8be5\u5206\u652f\u5bf9\u5e94\u7684\u52a8\u4f5c\u8fd4\u56de Ok \u503c\u4e2d\u7684\u6570\u5b57 num\uff0c // \u6700\u540e\u5982\u613f\u53d8\u6210\u65b0\u521b\u5efa\u7684 guess \u53d8\u91cf\u3002 // \u5982\u679c parse \u4e0d\u80fd\u5c06\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u4e00\u4e2a\u6570\u5b57\uff0c\u5b83\u4f1a\u8fd4\u56de\u4e00\u4e2a\u5305\u542b\u66f4\u591a\u9519\u8bef\u4fe1\u606f\u7684 Err\u3002 // Err \u503c\u4e0d\u80fd\u5339\u914d\u7b2c\u4e00\u4e2a match \u5206\u652f\u7684 Ok(num) \u6a21\u5f0f\uff0c\u4f46\u662f\u4f1a\u5339\u914d\u7b2c\u4e8c\u4e2a\u5206\u652f\u7684 Err(_) \u6a21\u5f0f\uff1a // _ \u662f\u4e00\u4e2a\u901a\u914d\u7b26\u503c\uff0c\u672c\u4f8b\u4e2d\u7528\u6765\u5339\u914d\u6240\u6709 Err \u503c\uff0c\u4e0d\u7ba1\u5176\u4e2d\u6709\u4f55\u79cd\u4fe1\u606f\u3002 // \u6240\u4ee5\u7a0b\u5e8f\u4f1a\u6267\u884c\u7b2c\u4e8c\u4e2a\u5206\u652f\u7684\u52a8\u4f5c\uff0ccontinue \u610f\u5473\u7740\u8fdb\u5165 loop \u7684\u4e0b\u4e00\u6b21\u5faa\u73af\uff0c\u8bf7\u6c42\u53e6\u4e00\u4e2a\u731c\u6d4b\u3002 // \u8fd9\u6837\u7a0b\u5e8f\u5c31\u6709\u6548\u7684\u5ffd\u7565\u4e86 parse \u53ef\u80fd\u9047\u5230\u7684\u6240\u6709\u9519\u8bef\uff01 println! ( \"\u4f60\u731c\u6d4b\u7684\u6570\u4e3a: {guess}\" ); match guess . cmp ( & secret_number ) { Ordering :: Less => println! ( \"\u592a\u5c0f\u4e86\uff01\" ), Ordering :: Greater => println! ( \"\u592a\u5927\u4e86\uff01\" ), Ordering :: Equal => { println! ( \"\u731c\u5bf9\u4e86\uff01\" ); break ; } } } } \u73b0\u5728\u4e07\u4e8b\u4ff1\u5907\uff0c\u53ea\u9700\u8fd0\u884c cargo run\uff1a $ cargo run Compiling guessing_game v0.1.0 ( file:///projects/guessing_game ) Finished dev [ unoptimized + debuginfo ] target ( s ) in 4 .45s Running ` target/debug/guessing_game ` \u731c\u6570\u6e38\u620f\uff01\uff01 \u751f\u6210\u7684\u5bc6\u7801\u6570\u5b57\u662f: 66 \u8bf7\u8f93\u5165\u4e00\u4e2a\u503c: 12d \u8bf7\u8f93\u5165\u4e00\u4e2a\u503c: 12 \u4f60\u731c\u6d4b\u7684\u6570\u4e3a: 12 \u592a\u5c0f\u4e86\uff01 \u8bf7\u8f93\u5165\u4e00\u4e2a\u503c: 66 \u4f60\u731c\u6d4b\u7684\u6570\u4e3a: 66 \u731c\u5bf9\u4e86\uff01","title":"\u5904\u7406\u65e0\u6548\u8f93\u5165"},{"location":"guessing-game/#_9","text":"\u592a\u68d2\u4e86\uff01\u518d\u6709\u6700\u540e\u4e00\u4e2a\u5c0f\u7684\u4fee\u6539\uff0c\u5c31\u80fd\u5b8c\u6210\u731c\u731c\u770b\u6e38\u620f\u4e86\uff1a\u8fd8\u8bb0\u5f97\u7a0b\u5e8f\u4f9d\u7136\u4f1a\u6253\u5370\u51fa\u79d8\u5bc6\u6570\u5b57\u3002\u5728\u6d4b\u8bd5\u65f6\u8fd8\u597d\uff0c\u4f46\u6b63\u5f0f\u53d1\u5e03\u65f6\u4f1a\u6bc1\u4e86\u6e38\u620f\u3002\u5220\u6389\u6253\u5370\u79d8\u5bc6\u6570\u5b57\u7684 println!\u3002 \u6700\u7ec8\u4ee3\u7801\uff1a \u6587\u4ef6\u540d: src/main.rs use rand :: Rng ; use std :: cmp :: Ordering ; use std :: io ; fn main () { println! ( \"\u731c\u6570\u6e38\u620f\uff01\uff01\" ); let secret_number = rand :: thread_rng (). gen_range ( 1 ..= 100 ); loop { println! ( \"\u8bf7\u8f93\u5165\u4e00\u4e2a\u503c:\" ); let mut guess = String :: new (); io :: stdin (). read_line ( & mut guess ). expect ( \"\u8bfb\u6570\u5931\u8d25!\" ); let guess : u32 = match guess . trim (). parse () { Ok ( num ) => num , Err ( _ ) => continue , }; println! ( \"\u4f60\u731c\u6d4b\u7684\u6570\u4e3a: {guess}\" ); match guess . cmp ( & secret_number ) { Ordering :: Less => println! ( \"\u592a\u5c0f\u4e86\uff01\" ), Ordering :: Greater => println! ( \"\u592a\u5927\u4e86\uff01\" ), Ordering :: Equal => { println! ( \"\u731c\u5bf9\u4e86\uff01\" ); break ; } } } }","title":"\u6700\u7ec8\u7248\u672c"},{"location":"hello-cargo/","text":"Hello Cargo Cargo \u662f Rust \u7684\u6784\u5efa\u7cfb\u7edf\u548c\u5305\u7ba1\u7406\u5668\u3002 \u5b89\u88c5cargo \u5b98\u65b9\u81ea\u5e26\u7684 \u5b89\u88c5 \u90e8\u5206\u5df2\u7ecf\u5b89\u88c5\u4e86Cargo \u67e5\u770b\u7248\u672c $ cargo --version cargo 1 .66.0 ( d65d197ad 2022 -11-15 ) \u4f7f\u7528cargo\u521b\u5efa\u9879\u76ee cargo new Cargo \u5c06\u4ee3\u7801\u653e\u5728 src \u76ee\u5f55\uff0c\u540c\u65f6\u9879\u76ee\u6839\u76ee\u5f55\u5305\u542b\u4e00\u4e2a Cargo.toml \u914d\u7f6e\u6587\u4ef6\u3002 $ cargo new hello-cargo $ cd hello-cargo $ ls Cargo.toml src Cargo.toml \u914d\u7f6e\u6587\u4ef6\uff0c \u5982\u4e0b: # \u4e00\u4e2a\u7247\u6bb5\uff08section\uff09\u6807\u9898\uff0c\u8868\u660e\u4e0b\u9762\u7684\u8bed\u53e5\u7528\u6765\u914d\u7f6e\u4e00\u4e2a\u5305 [package] name = \"hello-cargo\" # \u9879\u76ee\u7684\u540d\u79f0 version = \"0.1.0\" # \u9879\u76ee\u7684\u7248\u672c edition = \"2021\" # Rust \u7248\u672c # See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html # \u7f57\u5217\u9879\u76ee\u4f9d\u8d56\u7684\u4ee3\u7801\u5305, \u4ee3\u7801\u5305\u88ab\u79f0\u4e3a crates\u3002\u8fd9\u4e2a\u9879\u76ee\u5e76\u4e0d\u9700\u8981\u5176\u4ed6\u7684 crate [dependencies] TOML \u683c\u5f0f\u662f Cargo \u914d\u7f6e\u6587\u4ef6\u7684\u683c\u5f0f\u3002 edition \u7684\u503c\u53c2\u8003 \u9644\u5f55E src \u9879\u76ee\u6e90\u6587\u4ef6\u5b58\u653e\u5728 src \u76ee\u5f55\u4e2d\u3002 \u9879\u76ee\u6839\u76ee\u5f55\u53ea\u5b58\u653e README \u3001 license \u4fe1\u606f\u3001 \u914d\u7f6e\u6587\u4ef6 \u548c \u5176\u4ed6\u8ddf\u4ee3\u7801\u65e0\u5173\u7684\u6587\u4ef6 \u3002 src/main.rs Cargo \u4e3a\u751f\u6210\u7684\u4e00\u4e2a \u201cHello, world!\u201d \u7a0b\u5e8f fn main () { println! ( \"Hello, world!\" ); } \u6784\u5efa\u5e76\u8fd0\u884c Cargo \u9879\u76ee \u901a\u8fc7 Cargo \u6784\u5efa\u548c\u8fd0\u884c \u201cHello, world!\u201d \u7a0b\u5e8f cargo build # \u5728hello-cargo\u76ee\u5f55\u6267\u884c $ cargo build Compiling hello_cargo v0.1.0 ( file:///projects/hello_cargo ) Finished dev [ unoptimized + debuginfo ] target ( s ) in 2 .85 secs $ ls Cargo.lock Cargo.toml src target # \u4f1a\u521b\u5efa\u4e00\u4e2a\u53ef\u6267\u884c\u6587\u4ef6 target/debug/hello-cargo, \u800c\u4e0d\u662f\u653e\u5728\u76ee\u524d\u76ee\u5f55\u4e0b\u3002 # \u7531\u4e8e\u9ed8\u8ba4\u7684\u6784\u5efa\u65b9\u6cd5\u662f\u8c03\u8bd5\u6784\u5efa\uff08debug build\uff09\uff0cCargo \u4f1a\u5c06\u53ef\u6267\u884c\u6587\u4ef6\u653e\u5728\u540d\u4e3a debug \u7684\u76ee\u5f55\u4e2d\u3002 \u8fd0\u884c\u53ef\u6267\u884c\u6587\u4ef6: $ ./target/debug/hello-cargo Hello, world! \u9996\u6b21\u8fd0\u884c cargo build \u65f6\uff0c\u4e5f\u4f1a\u4f7f Cargo \u5728\u9879\u76ee\u6839\u76ee\u5f55\u521b\u5efa\u4e00\u4e2a\u65b0\u6587\u4ef6\uff1a Cargo.lock \u3002\u8fd9\u4e2a\u6587\u4ef6\u8bb0\u5f55\u9879\u76ee\u4f9d\u8d56\u7684\u5b9e\u9645\u7248\u672c\u3002\u8fd9\u4e2a\u9879\u76ee\u5e76\u6ca1\u6709\u4f9d\u8d56\uff0c\u6240\u4ee5\u5176\u5185\u5bb9\u6bd4\u8f83\u5c11\u3002\u81ea\u5df1\u6c38\u8fdc\u4e5f\u4e0d\u9700\u8981\u78b0\u8fd9\u4e2a\u6587\u4ef6\uff0c\u8ba9 Cargo \u5904\u7406\u5b83\u5c31\u884c\u4e86\u3002 cargo run \u53ef\u4ee5\u4f7f\u7528 cargo run \u5728\u4e00\u4e2a\u547d\u4ee4\u4e2d\u540c\u65f6\u7f16\u8bd1\u5e76\u8fd0\u884c\u751f\u6210\u7684\u53ef\u6267\u884c\u6587\u4ef6\uff1a $ cargo run Finished dev [ unoptimized + debuginfo ] target ( s ) in 0 .00s Running ` target/debug/hello-cargo ` Hello, world! Cargo \u53d1\u73b0\u6587\u4ef6\u5e76\u6ca1\u6709\u88ab\u6539\u53d8\uff0c\u6240\u4ee5\u5b83\u5e76\u6ca1\u6709\u91cd\u65b0\u7f16\u8bd1\uff0c\u800c\u662f\u76f4\u63a5\u8fd0\u884c\u4e86\u53ef\u6267\u884c\u6587\u4ef6\u3002 \u5982\u679c\u4fee\u6539\u4e86\u6e90\u6587\u4ef6\u7684\u8bdd\uff0cCargo \u4f1a\u5728\u8fd0\u884c\u4e4b\u524d\u91cd\u65b0\u6784\u5efa\u9879\u76ee\uff0c\u5e76\u4f1a\u51fa\u73b0\u50cf\u8fd9\u6837\u7684\u8f93\u51fa\uff1a $ cargo run Compiling hello-cargo v0.1.0 ( file:///projects/hello_cargo ) Finished dev [ unoptimized + debuginfo ] target ( s ) in 0 .33 secs Running ` target/debug/hello_cargo ` Hello, world! cargo check \u8be5\u547d\u4ee4\u5feb\u901f\u68c0\u67e5\u4ee3\u7801\u786e\u4fdd\u5176\u53ef\u4ee5\u7f16\u8bd1\uff0c\u4f46\u5e76\u4e0d\u4ea7\u751f\u53ef\u6267\u884c\u6587\u4ef6: $ cargo check Checking hello_cargo v0.1.0 ( file:///projects/hello_cargo ) Finished dev [ unoptimized + debuginfo ] target ( s ) in 0 .32 secs \u4e3a\u4ec0\u4e48\u4f60\u4f1a\u4e0d\u9700\u8981\u53ef\u6267\u884c\u6587\u4ef6\u5462\uff1f \u901a\u5e38 cargo check \u8981\u6bd4 cargo build \u5feb\u5f97\u591a\uff0c\u56e0\u4e3a\u5b83\u7701\u7565\u4e86\u751f\u6210\u53ef\u6267\u884c\u6587\u4ef6\u7684\u6b65\u9aa4\u3002 \u5982\u679c\u4f60\u5728\u7f16\u5199\u4ee3\u7801\u65f6\u6301\u7eed\u7684\u8fdb\u884c\u68c0\u67e5\uff0c cargo check \u53ef\u4ee5\u8ba9\u4f60\u5feb\u901f\u4e86\u89e3\u73b0\u5728\u7684\u4ee3\u7801\u80fd\u4e0d\u80fd\u6b63\u5e38\u901a\u8fc7\u7f16\u8bd1\uff01 \u4e3a\u6b64\u5f88\u591a Rustaceans \u7f16\u5199\u4ee3\u7801\u65f6\u5b9a\u671f\u8fd0\u884c cargo check \u786e\u4fdd\u5b83\u4eec\u53ef\u4ee5\u7f16\u8bd1\u3002 \u5f53\u51c6\u5907\u597d\u4f7f\u7528\u53ef\u6267\u884c\u6587\u4ef6\u65f6\u624d\u8fd0\u884c cargo build \u3002 \u5176\u4ed6 git\u4ed3\u5e93 Cargo\u521b\u5efa\u9879\u76ee\u65f6\uff0c\u4f1a\u521d\u59cb\u5316\u4e00\u4e2a git \u4ed3\u5e93\uff0c\u4ee5\u53ca\u4e00\u4e2a .gitignore \u6587\u4ef6\u3002\u5982\u679c\u5728\u4e00\u4e2a\u5df2\u7ecf\u5b58\u5728\u7684 git \u4ed3\u5e93\u4e2d\u8fd0\u884c cargo new \uff0c\u5219\u8fd9\u4e9b git \u76f8\u5173\u6587\u4ef6\u5219\u4e0d\u4f1a\u751f\u6210\uff1b\u53ef\u4ee5\u901a\u8fc7\u8fd0\u884c cargo new --vcs=git \u6765\u8986\u76d6\u8fd9\u4e9b\u884c\u4e3a\u3002 \u53d1\u5e03\uff08release\uff09\u6784\u5efa \u5f53\u9879\u76ee\u6700\u7ec8\u51c6\u5907\u597d\u53d1\u5e03\u65f6\uff0c\u53ef\u4ee5\u4f7f\u7528 cargo build --release \u6765\u4f18\u5316\u7f16\u8bd1\u9879\u76ee\u3002 \u8fd9\u4f1a\u5728 target/release \u800c\u4e0d\u662f target/debug \u4e0b\u751f\u6210\u53ef\u6267\u884c\u6587\u4ef6\u3002 \u8fd9\u4e9b\u4f18\u5316\u53ef\u4ee5\u8ba9 Rust \u4ee3\u7801\u8fd0\u884c\u7684\u66f4\u5feb\uff0c\u4e0d\u8fc7\u542f\u7528\u8fd9\u4e9b\u4f18\u5316\u4e5f\u9700\u8981\u6d88\u8017\u66f4\u957f\u7684\u7f16\u8bd1\u65f6\u95f4\u3002 \u8fd9\u4e5f\u5c31\u662f\u4e3a\u4ec0\u4e48\u4f1a\u6709\u4e24\u79cd\u4e0d\u540c\u7684\u914d\u7f6e\uff1a \u4e00\u79cd\u662f\u4e3a\u4e86\u5f00\u53d1\uff0c\u4f60\u9700\u8981\u7ecf\u5e38\u5feb\u901f\u91cd\u65b0\u6784\u5efa\uff1b \u53e6\u4e00\u79cd\u662f\u4e3a\u7528\u6237\u6784\u5efa\u6700\u7ec8\u7a0b\u5e8f\uff0c\u5b83\u4eec\u4e0d\u4f1a\u7ecf\u5e38\u91cd\u65b0\u6784\u5efa\uff0c\u5e76\u4e14\u5e0c\u671b\u7a0b\u5e8f\u8fd0\u884c\u5f97\u8d8a\u5feb\u8d8a\u597d\u3002 \u5982\u679c\u4f60\u5728\u6d4b\u8bd5\u4ee3\u7801\u7684\u8fd0\u884c\u65f6\u95f4\uff0c\u8bf7\u786e\u4fdd\u8fd0\u884c cargo build --release \u5e76\u4f7f\u7528 target/release \u4e0b\u7684\u53ef\u6267\u884c\u6587\u4ef6\u8fdb\u884c\u6d4b\u8bd5\u3002 \u628a Cargo \u5f53\u4f5c\u4e60\u60ef \u5bf9\u4e8e\u7b80\u5355\u9879\u76ee\uff0c Cargo \u5e76\u4e0d\u6bd4 rustc \u63d0\u4f9b\u4e86\u66f4\u591a\u7684\u4f18\u52bf\uff0c\u4e0d\u8fc7\u968f\u7740\u5f00\u53d1\u7684\u6df1\u5165\uff0c\u7ec8\u5c06\u8bc1\u660e\u5176\u4ef7\u503c\u3002 \u4e00\u65e6\u7a0b\u5e8f\u58ee\u5927\u5230\u7531\u591a\u4e2a\u6587\u4ef6\u7ec4\u6210\uff0c\u4ea6\u6216\u8005\u662f\u9700\u8981\u5176\u4ed6\u7684\u4f9d\u8d56\uff0c\u8ba9 Cargo \u534f\u8c03\u6784\u5efa\u8fc7\u7a0b\u5c31\u4f1a\u7b80\u5355\u5f97\u591a\u3002 \u5373\u4fbf hello_cargo \u9879\u76ee\u5341\u5206\u7b80\u5355\uff0c\u5b83\u73b0\u5728\u4e5f\u4f7f\u7528\u4e86\u5f88\u591a\u5728\u4f60\u4e4b\u540e\u7684 Rust \u751f\u6daf\u5c06\u4f1a\u7528\u5230\u7684\u5b9e\u7528\u5de5\u5177\u3002 \u5176\u5b9e\uff0c\u8981\u5728\u4efb\u4f55\u5df2\u5b58\u5728\u7684\u9879\u76ee\u4e0a\u5de5\u4f5c\u65f6\uff0c\u53ef\u4ee5\u4f7f\u7528\u5982\u4e0b\u547d\u4ee4\u901a\u8fc7 Git \u68c0\u51fa\u4ee3\u7801\uff0c\u79fb\u52a8\u5230\u8be5\u9879\u76ee\u76ee\u5f55\u5e76\u6784\u5efa\uff1a git clone example.org/someproject cd someproject cargo build \u5173\u4e8e\u66f4\u591a Cargo \u7684\u4fe1\u606f\uff0c\u8bf7\u67e5\u9605 \u5176\u6587\u6863 \u3002","title":"Hello Cargo"},{"location":"hello-cargo/#hello-cargo","text":"Cargo \u662f Rust \u7684\u6784\u5efa\u7cfb\u7edf\u548c\u5305\u7ba1\u7406\u5668\u3002","title":"Hello Cargo"},{"location":"hello-cargo/#cargo","text":"\u5b98\u65b9\u81ea\u5e26\u7684 \u5b89\u88c5 \u90e8\u5206\u5df2\u7ecf\u5b89\u88c5\u4e86Cargo","title":"\u5b89\u88c5cargo"},{"location":"hello-cargo/#_1","text":"$ cargo --version cargo 1 .66.0 ( d65d197ad 2022 -11-15 )","title":"\u67e5\u770b\u7248\u672c"},{"location":"hello-cargo/#cargo_1","text":"","title":"\u4f7f\u7528cargo\u521b\u5efa\u9879\u76ee"},{"location":"hello-cargo/#cargo-new","text":"Cargo \u5c06\u4ee3\u7801\u653e\u5728 src \u76ee\u5f55\uff0c\u540c\u65f6\u9879\u76ee\u6839\u76ee\u5f55\u5305\u542b\u4e00\u4e2a Cargo.toml \u914d\u7f6e\u6587\u4ef6\u3002 $ cargo new hello-cargo $ cd hello-cargo $ ls Cargo.toml src","title":"cargo new"},{"location":"hello-cargo/#cargotoml","text":"\u914d\u7f6e\u6587\u4ef6\uff0c \u5982\u4e0b: # \u4e00\u4e2a\u7247\u6bb5\uff08section\uff09\u6807\u9898\uff0c\u8868\u660e\u4e0b\u9762\u7684\u8bed\u53e5\u7528\u6765\u914d\u7f6e\u4e00\u4e2a\u5305 [package] name = \"hello-cargo\" # \u9879\u76ee\u7684\u540d\u79f0 version = \"0.1.0\" # \u9879\u76ee\u7684\u7248\u672c edition = \"2021\" # Rust \u7248\u672c # See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html # \u7f57\u5217\u9879\u76ee\u4f9d\u8d56\u7684\u4ee3\u7801\u5305, \u4ee3\u7801\u5305\u88ab\u79f0\u4e3a crates\u3002\u8fd9\u4e2a\u9879\u76ee\u5e76\u4e0d\u9700\u8981\u5176\u4ed6\u7684 crate [dependencies] TOML \u683c\u5f0f\u662f Cargo \u914d\u7f6e\u6587\u4ef6\u7684\u683c\u5f0f\u3002 edition \u7684\u503c\u53c2\u8003 \u9644\u5f55E","title":"Cargo.toml"},{"location":"hello-cargo/#src","text":"\u9879\u76ee\u6e90\u6587\u4ef6\u5b58\u653e\u5728 src \u76ee\u5f55\u4e2d\u3002 \u9879\u76ee\u6839\u76ee\u5f55\u53ea\u5b58\u653e README \u3001 license \u4fe1\u606f\u3001 \u914d\u7f6e\u6587\u4ef6 \u548c \u5176\u4ed6\u8ddf\u4ee3\u7801\u65e0\u5173\u7684\u6587\u4ef6 \u3002","title":"src"},{"location":"hello-cargo/#srcmainrs","text":"Cargo \u4e3a\u751f\u6210\u7684\u4e00\u4e2a \u201cHello, world!\u201d \u7a0b\u5e8f fn main () { println! ( \"Hello, world!\" ); }","title":"src/main.rs"},{"location":"hello-cargo/#cargo_2","text":"\u901a\u8fc7 Cargo \u6784\u5efa\u548c\u8fd0\u884c \u201cHello, world!\u201d \u7a0b\u5e8f","title":"\u6784\u5efa\u5e76\u8fd0\u884c Cargo \u9879\u76ee"},{"location":"hello-cargo/#cargo-build","text":"# \u5728hello-cargo\u76ee\u5f55\u6267\u884c $ cargo build Compiling hello_cargo v0.1.0 ( file:///projects/hello_cargo ) Finished dev [ unoptimized + debuginfo ] target ( s ) in 2 .85 secs $ ls Cargo.lock Cargo.toml src target # \u4f1a\u521b\u5efa\u4e00\u4e2a\u53ef\u6267\u884c\u6587\u4ef6 target/debug/hello-cargo, \u800c\u4e0d\u662f\u653e\u5728\u76ee\u524d\u76ee\u5f55\u4e0b\u3002 # \u7531\u4e8e\u9ed8\u8ba4\u7684\u6784\u5efa\u65b9\u6cd5\u662f\u8c03\u8bd5\u6784\u5efa\uff08debug build\uff09\uff0cCargo \u4f1a\u5c06\u53ef\u6267\u884c\u6587\u4ef6\u653e\u5728\u540d\u4e3a debug \u7684\u76ee\u5f55\u4e2d\u3002 \u8fd0\u884c\u53ef\u6267\u884c\u6587\u4ef6: $ ./target/debug/hello-cargo Hello, world! \u9996\u6b21\u8fd0\u884c cargo build \u65f6\uff0c\u4e5f\u4f1a\u4f7f Cargo \u5728\u9879\u76ee\u6839\u76ee\u5f55\u521b\u5efa\u4e00\u4e2a\u65b0\u6587\u4ef6\uff1a Cargo.lock \u3002\u8fd9\u4e2a\u6587\u4ef6\u8bb0\u5f55\u9879\u76ee\u4f9d\u8d56\u7684\u5b9e\u9645\u7248\u672c\u3002\u8fd9\u4e2a\u9879\u76ee\u5e76\u6ca1\u6709\u4f9d\u8d56\uff0c\u6240\u4ee5\u5176\u5185\u5bb9\u6bd4\u8f83\u5c11\u3002\u81ea\u5df1\u6c38\u8fdc\u4e5f\u4e0d\u9700\u8981\u78b0\u8fd9\u4e2a\u6587\u4ef6\uff0c\u8ba9 Cargo \u5904\u7406\u5b83\u5c31\u884c\u4e86\u3002","title":"cargo build"},{"location":"hello-cargo/#cargo-run","text":"\u53ef\u4ee5\u4f7f\u7528 cargo run \u5728\u4e00\u4e2a\u547d\u4ee4\u4e2d\u540c\u65f6\u7f16\u8bd1\u5e76\u8fd0\u884c\u751f\u6210\u7684\u53ef\u6267\u884c\u6587\u4ef6\uff1a $ cargo run Finished dev [ unoptimized + debuginfo ] target ( s ) in 0 .00s Running ` target/debug/hello-cargo ` Hello, world! Cargo \u53d1\u73b0\u6587\u4ef6\u5e76\u6ca1\u6709\u88ab\u6539\u53d8\uff0c\u6240\u4ee5\u5b83\u5e76\u6ca1\u6709\u91cd\u65b0\u7f16\u8bd1\uff0c\u800c\u662f\u76f4\u63a5\u8fd0\u884c\u4e86\u53ef\u6267\u884c\u6587\u4ef6\u3002 \u5982\u679c\u4fee\u6539\u4e86\u6e90\u6587\u4ef6\u7684\u8bdd\uff0cCargo \u4f1a\u5728\u8fd0\u884c\u4e4b\u524d\u91cd\u65b0\u6784\u5efa\u9879\u76ee\uff0c\u5e76\u4f1a\u51fa\u73b0\u50cf\u8fd9\u6837\u7684\u8f93\u51fa\uff1a $ cargo run Compiling hello-cargo v0.1.0 ( file:///projects/hello_cargo ) Finished dev [ unoptimized + debuginfo ] target ( s ) in 0 .33 secs Running ` target/debug/hello_cargo ` Hello, world!","title":"cargo run"},{"location":"hello-cargo/#cargo-check","text":"\u8be5\u547d\u4ee4\u5feb\u901f\u68c0\u67e5\u4ee3\u7801\u786e\u4fdd\u5176\u53ef\u4ee5\u7f16\u8bd1\uff0c\u4f46\u5e76\u4e0d\u4ea7\u751f\u53ef\u6267\u884c\u6587\u4ef6: $ cargo check Checking hello_cargo v0.1.0 ( file:///projects/hello_cargo ) Finished dev [ unoptimized + debuginfo ] target ( s ) in 0 .32 secs \u4e3a\u4ec0\u4e48\u4f60\u4f1a\u4e0d\u9700\u8981\u53ef\u6267\u884c\u6587\u4ef6\u5462\uff1f \u901a\u5e38 cargo check \u8981\u6bd4 cargo build \u5feb\u5f97\u591a\uff0c\u56e0\u4e3a\u5b83\u7701\u7565\u4e86\u751f\u6210\u53ef\u6267\u884c\u6587\u4ef6\u7684\u6b65\u9aa4\u3002 \u5982\u679c\u4f60\u5728\u7f16\u5199\u4ee3\u7801\u65f6\u6301\u7eed\u7684\u8fdb\u884c\u68c0\u67e5\uff0c cargo check \u53ef\u4ee5\u8ba9\u4f60\u5feb\u901f\u4e86\u89e3\u73b0\u5728\u7684\u4ee3\u7801\u80fd\u4e0d\u80fd\u6b63\u5e38\u901a\u8fc7\u7f16\u8bd1\uff01 \u4e3a\u6b64\u5f88\u591a Rustaceans \u7f16\u5199\u4ee3\u7801\u65f6\u5b9a\u671f\u8fd0\u884c cargo check \u786e\u4fdd\u5b83\u4eec\u53ef\u4ee5\u7f16\u8bd1\u3002 \u5f53\u51c6\u5907\u597d\u4f7f\u7528\u53ef\u6267\u884c\u6587\u4ef6\u65f6\u624d\u8fd0\u884c cargo build \u3002","title":"cargo check"},{"location":"hello-cargo/#_2","text":"","title":"\u5176\u4ed6"},{"location":"hello-cargo/#git","text":"Cargo\u521b\u5efa\u9879\u76ee\u65f6\uff0c\u4f1a\u521d\u59cb\u5316\u4e00\u4e2a git \u4ed3\u5e93\uff0c\u4ee5\u53ca\u4e00\u4e2a .gitignore \u6587\u4ef6\u3002\u5982\u679c\u5728\u4e00\u4e2a\u5df2\u7ecf\u5b58\u5728\u7684 git \u4ed3\u5e93\u4e2d\u8fd0\u884c cargo new \uff0c\u5219\u8fd9\u4e9b git \u76f8\u5173\u6587\u4ef6\u5219\u4e0d\u4f1a\u751f\u6210\uff1b\u53ef\u4ee5\u901a\u8fc7\u8fd0\u884c cargo new --vcs=git \u6765\u8986\u76d6\u8fd9\u4e9b\u884c\u4e3a\u3002","title":"git\u4ed3\u5e93"},{"location":"hello-cargo/#release","text":"\u5f53\u9879\u76ee\u6700\u7ec8\u51c6\u5907\u597d\u53d1\u5e03\u65f6\uff0c\u53ef\u4ee5\u4f7f\u7528 cargo build --release \u6765\u4f18\u5316\u7f16\u8bd1\u9879\u76ee\u3002 \u8fd9\u4f1a\u5728 target/release \u800c\u4e0d\u662f target/debug \u4e0b\u751f\u6210\u53ef\u6267\u884c\u6587\u4ef6\u3002 \u8fd9\u4e9b\u4f18\u5316\u53ef\u4ee5\u8ba9 Rust \u4ee3\u7801\u8fd0\u884c\u7684\u66f4\u5feb\uff0c\u4e0d\u8fc7\u542f\u7528\u8fd9\u4e9b\u4f18\u5316\u4e5f\u9700\u8981\u6d88\u8017\u66f4\u957f\u7684\u7f16\u8bd1\u65f6\u95f4\u3002 \u8fd9\u4e5f\u5c31\u662f\u4e3a\u4ec0\u4e48\u4f1a\u6709\u4e24\u79cd\u4e0d\u540c\u7684\u914d\u7f6e\uff1a \u4e00\u79cd\u662f\u4e3a\u4e86\u5f00\u53d1\uff0c\u4f60\u9700\u8981\u7ecf\u5e38\u5feb\u901f\u91cd\u65b0\u6784\u5efa\uff1b \u53e6\u4e00\u79cd\u662f\u4e3a\u7528\u6237\u6784\u5efa\u6700\u7ec8\u7a0b\u5e8f\uff0c\u5b83\u4eec\u4e0d\u4f1a\u7ecf\u5e38\u91cd\u65b0\u6784\u5efa\uff0c\u5e76\u4e14\u5e0c\u671b\u7a0b\u5e8f\u8fd0\u884c\u5f97\u8d8a\u5feb\u8d8a\u597d\u3002 \u5982\u679c\u4f60\u5728\u6d4b\u8bd5\u4ee3\u7801\u7684\u8fd0\u884c\u65f6\u95f4\uff0c\u8bf7\u786e\u4fdd\u8fd0\u884c cargo build --release \u5e76\u4f7f\u7528 target/release \u4e0b\u7684\u53ef\u6267\u884c\u6587\u4ef6\u8fdb\u884c\u6d4b\u8bd5\u3002","title":"\u53d1\u5e03\uff08release\uff09\u6784\u5efa"},{"location":"hello-cargo/#cargo_3","text":"\u5bf9\u4e8e\u7b80\u5355\u9879\u76ee\uff0c Cargo \u5e76\u4e0d\u6bd4 rustc \u63d0\u4f9b\u4e86\u66f4\u591a\u7684\u4f18\u52bf\uff0c\u4e0d\u8fc7\u968f\u7740\u5f00\u53d1\u7684\u6df1\u5165\uff0c\u7ec8\u5c06\u8bc1\u660e\u5176\u4ef7\u503c\u3002 \u4e00\u65e6\u7a0b\u5e8f\u58ee\u5927\u5230\u7531\u591a\u4e2a\u6587\u4ef6\u7ec4\u6210\uff0c\u4ea6\u6216\u8005\u662f\u9700\u8981\u5176\u4ed6\u7684\u4f9d\u8d56\uff0c\u8ba9 Cargo \u534f\u8c03\u6784\u5efa\u8fc7\u7a0b\u5c31\u4f1a\u7b80\u5355\u5f97\u591a\u3002 \u5373\u4fbf hello_cargo \u9879\u76ee\u5341\u5206\u7b80\u5355\uff0c\u5b83\u73b0\u5728\u4e5f\u4f7f\u7528\u4e86\u5f88\u591a\u5728\u4f60\u4e4b\u540e\u7684 Rust \u751f\u6daf\u5c06\u4f1a\u7528\u5230\u7684\u5b9e\u7528\u5de5\u5177\u3002 \u5176\u5b9e\uff0c\u8981\u5728\u4efb\u4f55\u5df2\u5b58\u5728\u7684\u9879\u76ee\u4e0a\u5de5\u4f5c\u65f6\uff0c\u53ef\u4ee5\u4f7f\u7528\u5982\u4e0b\u547d\u4ee4\u901a\u8fc7 Git \u68c0\u51fa\u4ee3\u7801\uff0c\u79fb\u52a8\u5230\u8be5\u9879\u76ee\u76ee\u5f55\u5e76\u6784\u5efa\uff1a git clone example.org/someproject cd someproject cargo build \u5173\u4e8e\u66f4\u591a Cargo \u7684\u4fe1\u606f\uff0c\u8bf7\u67e5\u9605 \u5176\u6587\u6863 \u3002","title":"\u628a Cargo \u5f53\u4f5c\u4e60\u60ef"},{"location":"hello-world/","text":"hello world \u521b\u5efars\u6587\u4ef6 \u521b\u5efa helloworld.rs \u6587\u4ef6 fn main (){ println! ( \"Hello, world!\" ); } \u7f16\u8bd1 # \u7f16\u8bd1\u6e90\u6587\u4ef6 rustc helloworld.rs # \u751f\u6210 helloworld \u53ef\u6267\u884c\u6587\u4ef6. \u6267\u884c # \u6267\u884c\u53ef\u6267\u884c\u6587\u4ef6 ./helloworld # \u8f93\u51fa: Hello, world! \u91ca\u4e49 main \u51fd\u6570: \u5728\u53ef\u6267\u884c\u7684 Rust \u7a0b\u5e8f\u4e2d\uff0c\u5b83\u603b\u662f\u6700\u5148\u8fd0\u884c\u7684\u4ee3\u7801\u3002 \u53c2\u8003: \u5206\u6790\u8fd9\u4e2a Rust \u7a0b\u5e8f println! \u51fd\u6570: \u4e00\u4e2a Rust \u5b8f\uff08macro\uff09\u3002 \"Hello, world!\": \u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\u3002\u6211\u4eec\u628a\u8fd9\u4e2a\u5b57\u7b26\u4e32\u4f5c\u4e3a\u4e00\u4e2a\u53c2\u6570\u4f20\u9012\u7ed9 println!\uff0c\u5b57\u7b26\u4e32\u5c06\u88ab\u6253\u5370\u5230\u5c4f\u5e55\u4e0a\u3002 \u8be5\u884c\u4ee5\u5206\u53f7\u7ed3\u5c3e\uff08;\uff09: \u8fd9\u4ee3\u8868\u4e00\u4e2a\u8868\u8fbe\u5f0f\u7684\u7ed3\u675f\u548c\u4e0b\u4e00\u4e2a\u8868\u8fbe\u5f0f\u7684\u5f00\u59cb\u3002\u5927\u90e8\u5206 Rust \u4ee3\u7801\u884c\u4ee5\u5206\u53f7\u7ed3\u5c3e\u3002 \u7f16\u8bd1\u548c\u8fd0\u884c\u662f\u5f7c\u6b64\u72ec\u7acb\u7684\u6b65\u9aa4 # \u8fd0\u884c Rust \u7a0b\u5e8f\u4e4b\u524d\uff0c\u5fc5\u987b\u5148\u4f7f\u7528 Rust \u7f16\u8bd1\u5668\u7f16\u8bd1, $ rustc main.rs # \u8f93\u51fa\u4e00\u4e2a\u4e8c\u8fdb\u5236\u7684\u53ef\u6267\u884c\u6587\u4ef6, \u5728 shell \u4e2d\u8f93\u5165 ls \u547d\u4ee4\u53ef\u4ee5\u770b\u89c1\u8fd9\u4e2a\u53ef\u6267\u884c\u6587\u4ef6 $ ls helloword helloword.rs # \u4ece\u8fd9\u91cc\u5f00\u59cb\u8fd0\u884c helloword \u6587\u4ef6 $ ./helloword Hello, world! Rust \u662f\u4e00\u79cd \u9884\u7f16\u8bd1\u9759\u6001\u7c7b\u578b\uff08ahead-of-time compiled\uff09\u8bed\u8a00\uff0c\u8fd9\u610f\u5473\u7740\u4f60\u53ef\u4ee5\u7f16\u8bd1\u7a0b\u5e8f\uff0c\u5e76\u5c06\u53ef\u6267\u884c\u6587\u4ef6\u9001\u7ed9\u5176\u4ed6\u4eba\uff0c\u4ed6\u4eec\u751a\u81f3\u4e0d\u9700\u8981\u5b89\u88c5 Rust \u5c31\u53ef\u4ee5\u8fd0\u884c\u3002","title":"hello world"},{"location":"hello-world/#hello-world","text":"","title":"hello world"},{"location":"hello-world/#rs","text":"\u521b\u5efa helloworld.rs \u6587\u4ef6 fn main (){ println! ( \"Hello, world!\" ); }","title":"\u521b\u5efars\u6587\u4ef6"},{"location":"hello-world/#_1","text":"# \u7f16\u8bd1\u6e90\u6587\u4ef6 rustc helloworld.rs # \u751f\u6210 helloworld \u53ef\u6267\u884c\u6587\u4ef6.","title":"\u7f16\u8bd1"},{"location":"hello-world/#_2","text":"# \u6267\u884c\u53ef\u6267\u884c\u6587\u4ef6 ./helloworld # \u8f93\u51fa: Hello, world!","title":"\u6267\u884c"},{"location":"hello-world/#_3","text":"main \u51fd\u6570: \u5728\u53ef\u6267\u884c\u7684 Rust \u7a0b\u5e8f\u4e2d\uff0c\u5b83\u603b\u662f\u6700\u5148\u8fd0\u884c\u7684\u4ee3\u7801\u3002 \u53c2\u8003: \u5206\u6790\u8fd9\u4e2a Rust \u7a0b\u5e8f println! \u51fd\u6570: \u4e00\u4e2a Rust \u5b8f\uff08macro\uff09\u3002 \"Hello, world!\": \u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\u3002\u6211\u4eec\u628a\u8fd9\u4e2a\u5b57\u7b26\u4e32\u4f5c\u4e3a\u4e00\u4e2a\u53c2\u6570\u4f20\u9012\u7ed9 println!\uff0c\u5b57\u7b26\u4e32\u5c06\u88ab\u6253\u5370\u5230\u5c4f\u5e55\u4e0a\u3002 \u8be5\u884c\u4ee5\u5206\u53f7\u7ed3\u5c3e\uff08;\uff09: \u8fd9\u4ee3\u8868\u4e00\u4e2a\u8868\u8fbe\u5f0f\u7684\u7ed3\u675f\u548c\u4e0b\u4e00\u4e2a\u8868\u8fbe\u5f0f\u7684\u5f00\u59cb\u3002\u5927\u90e8\u5206 Rust \u4ee3\u7801\u884c\u4ee5\u5206\u53f7\u7ed3\u5c3e\u3002","title":"\u91ca\u4e49"},{"location":"hello-world/#_4","text":"# \u8fd0\u884c Rust \u7a0b\u5e8f\u4e4b\u524d\uff0c\u5fc5\u987b\u5148\u4f7f\u7528 Rust \u7f16\u8bd1\u5668\u7f16\u8bd1, $ rustc main.rs # \u8f93\u51fa\u4e00\u4e2a\u4e8c\u8fdb\u5236\u7684\u53ef\u6267\u884c\u6587\u4ef6, \u5728 shell \u4e2d\u8f93\u5165 ls \u547d\u4ee4\u53ef\u4ee5\u770b\u89c1\u8fd9\u4e2a\u53ef\u6267\u884c\u6587\u4ef6 $ ls helloword helloword.rs # \u4ece\u8fd9\u91cc\u5f00\u59cb\u8fd0\u884c helloword \u6587\u4ef6 $ ./helloword Hello, world! Rust \u662f\u4e00\u79cd \u9884\u7f16\u8bd1\u9759\u6001\u7c7b\u578b\uff08ahead-of-time compiled\uff09\u8bed\u8a00\uff0c\u8fd9\u610f\u5473\u7740\u4f60\u53ef\u4ee5\u7f16\u8bd1\u7a0b\u5e8f\uff0c\u5e76\u5c06\u53ef\u6267\u884c\u6587\u4ef6\u9001\u7ed9\u5176\u4ed6\u4eba\uff0c\u4ed6\u4eec\u751a\u81f3\u4e0d\u9700\u8981\u5b89\u88c5 Rust \u5c31\u53ef\u4ee5\u8fd0\u884c\u3002","title":"\u7f16\u8bd1\u548c\u8fd0\u884c\u662f\u5f7c\u6b64\u72ec\u7acb\u7684\u6b65\u9aa4"},{"location":"more-about-cargo/","text":"Cargo \u548c Cargo.io \u76ee\u524d\u4e3a\u6b62\u6211\u4eec\u53ea\u4f7f\u7528\u8fc7 Cargo \u6784\u5efa\u3001\u8fd0\u884c\u548c\u6d4b\u8bd5\u4ee3\u7801\u8fd9\u4e9b\u6700\u57fa\u672c\u7684\u529f\u80fd\uff0c\u4e0d\u8fc7\u5b83\u8fd8\u53ef\u4ee5\u505a\u5230\u66f4\u591a\u3002\u672c\u7ae0\u4f1a\u8ba8\u8bba Cargo \u5176\u4ed6\u4e00\u4e9b\u66f4\u4e3a\u9ad8\u7ea7\u7684\u529f\u80fd\uff0c\u6211\u4eec\u5c06\u5c55\u793a\u5982\u4f55\uff1a \u4f7f\u7528\u53d1\u5e03\u914d\u7f6e\u6765\u81ea\u5b9a\u4e49\u6784\u5efa \u5c06\u5e93\u53d1\u5e03\u5230 crates.io \u4f7f\u7528\u5de5\u4f5c\u7a7a\u95f4\u6765\u7ec4\u7ec7\u66f4\u5927\u7684\u9879\u76ee \u4ece crates.io \u5b89\u88c5\u4e8c\u8fdb\u5236\u6587\u4ef6 \u4f7f\u7528\u81ea\u5b9a\u4e49\u7684\u547d\u4ee4\u6765\u6269\u5c55 Cargo Cargo \u7684\u529f\u80fd\u4e0d\u6b62\u672c\u7ae0\u6240\u4ecb\u7ecd\u7684\uff0c\u5173\u4e8e\u5176\u5168\u90e8\u529f\u80fd\u7684\u8be6\u5c3d\u89e3\u91ca\uff0c\u8bf7\u67e5\u770b \u6587\u6863 \u53d1\u5e03\u6784\u5efa\u7684\u81ea\u5b9a\u4e49\u914d\u7f6e \u5728 Rust \u4e2d \u53d1\u5e03\u914d\u7f6e \uff08release profiles\uff09\u662f\u9884\u5b9a\u4e49\u7684\u3001\u53ef\u5b9a\u5236\u7684\u5e26\u6709\u4e0d\u540c\u9009\u9879\u7684\u914d\u7f6e\uff0c\u4ed6\u4eec\u5141\u8bb8\u7a0b\u5e8f\u5458\u66f4\u7075\u6d3b\u5730\u63a7\u5236\u4ee3\u7801\u7f16\u8bd1\u7684\u591a\u79cd\u9009\u9879\u3002\u6bcf\u4e00\u4e2a\u914d\u7f6e\u90fd\u5f7c\u6b64\u76f8\u4e92\u72ec\u7acb\u3002 Cargo \u6709\u4e24\u4e2a\u4e3b\u8981\u7684\u914d\u7f6e\uff1a \u8fd0\u884c cargo build \u65f6\u91c7\u7528\u7684 dev \u914d\u7f6e \u548c\u8fd0\u884c cargo build --release \u7684 release \u914d\u7f6e \u3002 dev \u914d\u7f6e \u88ab\u5b9a\u4e49\u4e3a \u5f00\u53d1 \u65f6\u7684\u597d\u7684\u9ed8\u8ba4\u914d\u7f6e\uff0c release \u914d\u7f6e \u5219\u6709\u7740\u826f\u597d\u7684 \u53d1\u5e03\u6784\u5efa \u7684\u9ed8\u8ba4\u914d\u7f6e\u3002 \u8fd9\u4e9b\u914d\u7f6e\u540d\u79f0\u53ef\u80fd\u5f88\u773c\u719f\uff0c\u56e0\u4e3a\u5b83\u4eec\u51fa\u73b0\u5728\u6784\u5efa\u7684\u8f93\u51fa\u4e2d\uff1a $ cargo build Finished dev [ unoptimized + debuginfo ] target ( s ) in 0 .0s $ cargo build --release Finished release [ optimized ] target ( s ) in 0 .0s \u6784\u5efa\u8f93\u51fa\u4e2d\u7684 dev \u548c release \u8868\u660e\u7f16\u8bd1\u5668\u5728\u4f7f\u7528\u4e0d\u540c\u7684\u914d\u7f6e\u3002 \u5f53\u9879\u76ee\u7684 Cargo.toml \u6587\u4ef6\u4e2d\u6ca1\u6709\u4efb\u4f55 [profile.*] \u90e8\u5206\u7684\u65f6\u5019\uff0cCargo \u4f1a\u5bf9\u6bcf\u4e00\u4e2a\u914d\u7f6e\u90fd\u91c7\u7528\u9ed8\u8ba4\u8bbe\u7f6e\u3002\u901a\u8fc7\u589e\u52a0\u4efb\u4f55\u5e0c\u671b\u5b9a\u5236\u7684\u914d\u7f6e\u5bf9\u5e94\u7684 [profile.*] \u90e8\u5206\uff0c\u6211\u4eec\u53ef\u4ee5\u9009\u62e9\u8986\u76d6\u4efb\u610f\u9ed8\u8ba4\u8bbe\u7f6e\u7684\u5b50\u96c6\u3002\u4f8b\u5982\uff0c\u5982\u4e0b\u662f dev \u548c release \u914d\u7f6e\u7684 opt-level \u8bbe\u7f6e\u7684\u9ed8\u8ba4\u503c\uff1a # Cargo.toml # opt-level \u8bbe\u7f6e\u63a7\u5236 Rust \u4f1a\u5bf9\u4ee3\u7801\u8fdb\u884c\u4f55\u79cd\u7a0b\u5ea6\u7684\u4f18\u5316\u3002 # \u8fd9\u4e2a\u914d\u7f6e\u7684\u503c\u4ece 0 \u5230 3\u3002 [profile.dev] opt-level = 0 [profile.release] opt-level = 3 \u8d8a\u9ad8\u7684\u4f18\u5316\u7ea7\u522b\u9700\u8981\u66f4\u591a\u7684\u65f6\u95f4\u7f16\u8bd1\uff0c\u6240\u4ee5\u5982\u679c\u4f60\u5728\u8fdb\u884c\u5f00\u53d1\u5e76\u7ecf\u5e38\u7f16\u8bd1\uff0c\u53ef\u80fd\u4f1a\u5e0c\u671b\u5728\u727a\u7272\u4e00\u4e9b\u4ee3\u7801\u6027\u80fd\u7684\u60c5\u51b5\u4e0b\u7f16\u8bd1\u5f97\u5feb\u4e00\u4e9b\u3002\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48 dev \u7684 opt-level \u9ed8\u8ba4\u4e3a 0 \u3002 \u5f53\u4f60\u51c6\u5907\u53d1\u5e03\u65f6\uff0c\u82b1\u8d39\u66f4\u591a\u65f6\u95f4\u5728\u7f16\u8bd1\u4e0a\u5219\u66f4\u597d\u3002\u53ea\u9700\u8981\u5728\u53d1\u5e03\u6a21\u5f0f\u7f16\u8bd1\u4e00\u6b21\uff0c\u800c\u7f16\u8bd1\u51fa\u6765\u7684\u7a0b\u5e8f\u5219\u4f1a\u8fd0\u884c\u5f88\u591a\u6b21\uff0c\u6240\u4ee5\u53d1\u5e03\u6a21\u5f0f\u7528\u66f4\u957f\u7684\u7f16\u8bd1\u65f6\u95f4\u6362\u53d6\u8fd0\u884c\u66f4\u5feb\u7684\u4ee3\u7801\u3002\u8fd9\u6b63\u662f\u4e3a\u4ec0\u4e48 release \u914d\u7f6e\u7684 opt-level \u9ed8\u8ba4\u4e3a 3 \u3002 \u6211\u4eec\u53ef\u4ee5\u9009\u62e9\u901a\u8fc7\u5728 Cargo.toml \u589e\u52a0\u4e0d\u540c\u7684\u503c\u6765\u8986\u76d6\u4efb\u4f55\u9ed8\u8ba4\u8bbe\u7f6e\u3002\u6bd4\u5982\uff0c\u5982\u679c\u6211\u4eec\u60f3\u8981\u5728\u5f00\u53d1\u914d\u7f6e\u4e2d\u4f7f\u7528\u7ea7\u522b 1 \u7684\u4f18\u5316\uff0c\u5219\u53ef\u4ee5\u5728 Cargo.toml \u4e2d\u589e\u52a0\u8fd9\u4e24\u884c\uff1a # Cargo.toml [profile.dev] opt-level = 1 \u8fd9\u4f1a\u8986\u76d6\u9ed8\u8ba4\u7684\u8bbe\u7f6e 0 \u3002\u73b0\u5728\u8fd0\u884c cargo build \u65f6\uff0cCargo \u5c06\u4f1a\u4f7f\u7528 dev \u7684\u9ed8\u8ba4\u914d\u7f6e\u52a0\u4e0a\u5b9a\u5236\u7684 opt-level \u3002\u56e0\u4e3a opt-level \u8bbe\u7f6e\u4e3a 1 \uff0cCargo \u4f1a\u6bd4\u9ed8\u8ba4\u8fdb\u884c\u66f4\u591a\u7684\u4f18\u5316\uff0c\u4f46\u662f\u6ca1\u6709\u53d1\u5e03\u6784\u5efa\u90a3\u4e48\u591a\u3002 \u5bf9\u4e8e\u6bcf\u4e2a\u914d\u7f6e\u7684\u8bbe\u7f6e\u548c\u5176\u9ed8\u8ba4\u503c\u7684\u5b8c\u6574\u5217\u8868\uff0c\u8bf7\u67e5\u770b Cargo \u7684\u6587\u6863 \u3002 \u53d1\u5e03\u5230 Crates.io \u6211\u4eec\u66fe\u7ecf\u5728\u9879\u76ee\u4e2d\u4f7f\u7528 crates.io \u4e0a\u7684\u5305\u4f5c\u4e3a\u4f9d\u8d56\uff0c\u4e0d\u8fc7\u4f60\u4e5f\u53ef\u4ee5\u901a\u8fc7\u53d1\u5e03\u81ea\u5df1\u7684\u5305\u6765\u5411\u4ed6\u4eba\u5206\u4eab\u4ee3\u7801\u3002 crates.io \u7528\u6765\u5206\u53d1\u5305\u7684\u6e90\u4ee3\u7801\uff0c\u6240\u4ee5\u5b83\u4e3b\u8981\u6258\u7ba1\u5f00\u6e90\u4ee3\u7801\u3002 Rust \u548c Cargo \u6709\u4e00\u4e9b\u5e2e\u52a9\u4ed6\u4eba\u66f4\u65b9\u4fbf\u627e\u5230\u548c\u4f7f\u7528\u4f60\u53d1\u5e03\u7684\u5305\u7684\u529f\u80fd\u3002\u6211\u4eec\u5c06\u4ecb\u7ecd\u4e00\u4e9b\u8fd9\u6837\u7684\u529f\u80fd\uff0c\u63a5\u7740\u8bb2\u5230\u5982\u4f55\u53d1\u5e03\u4e00\u4e2a\u5305\u3002 \u7f16\u5199\u6709\u7528\u7684\u6587\u6863\u6ce8\u91ca \u51c6\u786e\u7684\u5305\u6587\u6863\u6709\u52a9\u4e8e\u5176\u4ed6\u7528\u6237\u7406\u89e3\u5982\u4f55\u4ee5\u53ca\u4f55\u65f6\u4f7f\u7528\u4ed6\u4eec\uff0c\u6240\u4ee5\u82b1\u4e00\u4e9b\u65f6\u95f4\u7f16\u5199\u6587\u6863\u662f\u503c\u5f97\u7684\u3002 \u7b2c\u4e09\u7ae0\u4e2d\u6211\u4eec\u8ba8\u8bba\u4e86\u5982\u4f55\u4f7f\u7528\u4e24\u659c\u6760 // \u6ce8\u91ca Rust \u4ee3\u7801\u3002 Rust \u4e5f\u6709\u7279\u5b9a\u7684 \u7528\u4e8e\u6587\u6863\u7684\u6ce8\u91ca\u7c7b\u578b \uff0c\u901a\u5e38\u88ab\u79f0\u4e3a \u6587\u6863\u6ce8\u91ca \uff08documentation comments\uff09\uff0c\u4ed6\u4eec\u4f1a\u751f\u6210 HTML \u6587\u6863\u3002\u8fd9\u4e9b HTML \u5c55\u793a\u516c\u6709 API \u6587\u6863\u6ce8\u91ca\u7684\u5185\u5bb9\uff0c\u4ed6\u4eec\u610f\u5728\u8ba9\u5bf9\u5e93\u611f\u5174\u8da3\u7684\u7a0b\u5e8f\u5458\u7406\u89e3\u5982\u4f55 \u4f7f\u7528 \u8fd9\u4e2a crate\uff0c\u800c\u4e0d\u662f\u5b83\u662f\u5982\u4f55\u88ab \u5b9e\u73b0 \u7684\u3002 \u6587\u6863\u6ce8\u91ca\u4f7f\u7528\u4e09\u659c\u6760 /// \u800c\u4e0d\u662f\u4e24\u659c\u6746\u4ee5\u652f\u6301 Markdown \u6ce8\u89e3\u6765\u683c\u5f0f\u5316\u6587\u672c\u3002 \u6587\u6863\u6ce8\u91ca\u5c31\u4f4d\u4e8e\u9700\u8981\u6587\u6863\u7684\u9879\u7684\u4e4b\u524d\u3002\u793a\u4f8b\u5c55\u793a\u4e86\u4e00\u4e2a my_crate crate \u4e2d add_one \u51fd\u6570\u7684\u6587\u6863\u6ce8\u91ca\uff0c // \u4e00\u4e2a\u51fd\u6570\u7684\u6587\u6863\u6ce8\u91ca /// Adds one to the number given. /// /// # Examples /// /// ``` /// let arg = 5; /// let answer = my_crate::add_one(arg); /// /// assert_eq!(6, answer); /// ``` pub fn add_one ( x : i32 ) -> i32 { x + 1 } \u8fd9\u91cc\uff0c\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u4e2a add_one \u51fd\u6570\u5de5\u4f5c\u7684 \u63cf\u8ff0 \uff0c\u63a5\u7740\u5f00\u59cb\u4e86\u4e00\u4e2a\u6807\u9898\u4e3a Examples \u7684\u90e8\u5206\uff0c\u548c\u5c55\u793a\u5982\u4f55\u4f7f\u7528 add_one \u51fd\u6570\u7684\u4ee3\u7801\u3002\u53ef\u4ee5\u8fd0\u884c cargo doc \u6765\u751f\u6210\u8fd9\u4e2a\u6587\u6863\u6ce8\u91ca\u7684 HTML \u6587\u6863\u3002\u8fd9\u4e2a\u547d\u4ee4\u8fd0\u884c\u7531 Rust \u5206\u53d1\u7684\u5de5\u5177 rustdoc \u5e76\u5c06\u751f\u6210\u7684 HTML \u6587\u6863\u653e\u5165 target/doc \u76ee\u5f55\u3002 \u4e3a\u4e86\u65b9\u4fbf\u8d77\u89c1\uff0c\u8fd0\u884c cargo doc --open \u4f1a\u6784\u5efa\u5f53\u524d crate \u6587\u6863\uff08\u540c\u65f6\u8fd8\u6709\u6240\u6709 crate \u4f9d\u8d56\u7684\u6587\u6863\uff09\u7684 HTML \u5e76\u5728\u6d4f\u89c8\u5668\u4e2d\u6253\u5f00\u3002\u5bfc\u822a\u5230 add_one \u51fd\u6570\u5c06\u4f1a\u53d1\u73b0\u6587\u6863\u6ce8\u91ca\u7684\u6587\u672c\u662f\u5982\u4f55\u6e32\u67d3\u7684\uff0c \u5e38\u7528\uff08\u6587\u6863\u6ce8\u91ca\uff09\u90e8\u5206 \u793a\u4f8b\u4e2d\u4f7f\u7528\u4e86 # Examples Markdown \u6807\u9898\u5728 HTML \u4e2d\u521b\u5efa\u4e86\u4e00\u4e2a\u4ee5 \u201cExamples\u201d \u4e3a\u6807\u9898\u7684\u90e8\u5206\u3002\u5176\u4ed6\u4e00\u4e9b crate \u4f5c\u8005\u7ecf\u5e38\u5728\u6587\u6863\u6ce8\u91ca\u4e2d\u4f7f\u7528\u7684\u90e8\u5206\u6709\uff1a Panics \uff1a\u8fd9\u4e2a\u51fd\u6570\u53ef\u80fd\u4f1a panic! \u7684\u573a\u666f\u3002\u5e76\u4e0d\u5e0c\u671b\u7a0b\u5e8f\u5d29\u6e83\u7684\u51fd\u6570\u8c03\u7528\u8005\u5e94\u8be5\u786e\u4fdd\u4ed6\u4eec\u4e0d\u4f1a\u5728\u8fd9\u4e9b\u60c5\u51b5\u4e0b\u8c03\u7528\u6b64\u51fd\u6570\u3002 Errors \uff1a\u5982\u679c\u8fd9\u4e2a\u51fd\u6570\u8fd4\u56de Result \uff0c\u6b64\u90e8\u5206\u63cf\u8ff0\u53ef\u80fd\u4f1a\u51fa\u73b0\u4f55\u79cd\u9519\u8bef\u4ee5\u53ca\u4ec0\u4e48\u60c5\u51b5\u4f1a\u9020\u6210\u8fd9\u4e9b\u9519\u8bef\uff0c\u8fd9\u6709\u52a9\u4e8e\u8c03\u7528\u8005\u7f16\u5199\u4ee3\u7801\u6765\u91c7\u7528\u4e0d\u540c\u7684\u65b9\u5f0f\u5904\u7406\u4e0d\u540c\u7684\u9519\u8bef\u3002 Safety \uff1a\u5982\u679c\u8fd9\u4e2a\u51fd\u6570\u4f7f\u7528 unsafe \u4ee3\u7801\uff08\u8fd9\u4f1a\u5728\u7b2c\u5341\u4e5d\u7ae0\u8ba8\u8bba\uff09\uff0c\u8fd9\u4e00\u90e8\u5206\u5e94\u8be5\u4f1a\u6d89\u53ca\u5230\u671f\u671b\u51fd\u6570\u8c03\u7528\u8005\u652f\u6301\u7684\u786e\u4fdd unsafe \u5757\u4e2d\u4ee3\u7801\u6b63\u5e38\u5de5\u4f5c\u7684\u4e0d\u53d8\u6761\u4ef6\uff08invariants\uff09\u3002 \u5927\u90e8\u5206\u6587\u6863\u6ce8\u91ca\u4e0d\u9700\u8981\u6240\u6709\u8fd9\u4e9b\u90e8\u5206\uff0c\u4e0d\u8fc7\u8fd9\u662f\u4e00\u4e2a\u63d0\u9192\u4f60\u68c0\u67e5\u8c03\u7528\u4f60\u4ee3\u7801\u7684\u4eba\u6709\u5174\u8da3\u4e86\u89e3\u7684\u5185\u5bb9\u7684\u5217\u8868\u3002 \u6587\u6863\u6ce8\u91ca\u4f5c\u4e3a\u6d4b\u8bd5 \u5728\u6587\u6863\u6ce8\u91ca\u4e2d\u589e\u52a0\u793a\u4f8b\u4ee3\u7801\u5757\u662f\u4e00\u4e2a\u6e05\u695a\u7684\u8868\u660e\u5982\u4f55\u4f7f\u7528\u5e93\u7684\u65b9\u6cd5\uff0c\u8fd9\u4e48\u505a\u8fd8\u6709\u4e00\u4e2a\u989d\u5916\u7684\u597d\u5904\uff1a cargo test \u4e5f\u4f1a\u50cf\u6d4b\u8bd5\u90a3\u6837\u8fd0\u884c\u6587\u6863\u4e2d\u7684\u793a\u4f8b\u4ee3\u7801\uff01\u6ca1\u6709\u4ec0\u4e48\u6bd4\u6709\u4f8b\u5b50\u7684\u6587\u6863\u66f4\u597d\u7684\u4e86\uff0c\u4f46\u6700\u7cdf\u7cd5\u7684\u83ab\u8fc7\u4e8e\u5199\u5b8c\u6587\u6863\u540e\u6539\u52a8\u4e86\u4ee3\u7801\uff0c\u800c\u5bfc\u81f4\u4f8b\u5b50\u4e0d\u80fd\u6b63\u5e38\u5de5\u4f5c\u3002\u5c1d\u8bd5 cargo test \u8fd0\u884c\u50cf\u793a\u4f8b \u4e2d add_one \u51fd\u6570\u7684\u6587\u6863\uff1b\u5e94\u8be5\u5728\u6d4b\u8bd5\u7ed3\u679c\u4e2d\u770b\u5230\u50cf\u8fd9\u6837\u7684\u90e8\u5206\uff1a Doc-tests my_crate running 1 test test src/lib.rs - add_one ( line 5 ) ... ok test result: ok. 1 passed ; 0 failed ; 0 ignored ; 0 measured ; 0 filtered out ; finished in 0 .27s \u73b0\u5728\u5c1d\u8bd5\u6539\u53d8\u51fd\u6570\u6216\u4f8b\u5b50\u6765\u4f7f\u4f8b\u5b50\u4e2d\u7684 assert_eq! \u4ea7\u751f panic\u3002\u518d\u6b21\u8fd0\u884c cargo test \uff0c\u4f60\u5c06\u4f1a\u770b\u5230\u6587\u6863\u6d4b\u8bd5\u6355\u83b7\u5230\u4e86\u4f8b\u5b50\u4e0e\u4ee3\u7801\u4e0d\u518d\u540c\u6b65\uff01 \u6ce8\u91ca\u5305\u542b\u9879\u7684\u7ed3\u6784 \u8fd8\u6709\u53e6\u4e00\u79cd\u98ce\u683c\u7684\u6587\u6863\u6ce8\u91ca\uff0c //! \uff0c\u8fd9\u4e3a \u5305\u542b\u6ce8\u91ca\u7684\u9879 \uff0c\u800c\u4e0d\u662f\u4f4d\u4e8e\u6ce8\u91ca\u4e4b\u540e\u7684\u9879\u589e\u52a0\u6587\u6863\u3002\u8fd9\u901a\u5e38\u7528\u4e8e crate \u6839\u6587\u4ef6\uff08\u901a\u5e38\u662f src/lib.rs \uff09\u6216\u6a21\u5757\u7684\u6839\u6587\u4ef6\u4e3a crate \u6216\u6a21\u5757\u6574\u4f53\u63d0\u4f9b\u6587\u6863\u3002 \u4f5c\u4e3a\u4e00\u4e2a\u4f8b\u5b50\uff0c\u5982\u679c\u6211\u4eec\u5e0c\u671b\u589e\u52a0\u63cf\u8ff0\u5305\u542b add_one \u51fd\u6570\u7684 my_crate crate \u76ee\u7684\u7684\u6587\u6863\uff0c\u53ef\u4ee5\u5728 src/lib.rs \u5f00\u5934\u589e\u52a0\u4ee5 //! \u5f00\u5934\u7684\u6ce8\u91ca\uff0c\u5982\u793a\u4f8b\u6240\u793a\uff1a // src/lib.rs //! # My Crate //! //! `my_crate` is a collection of utilities to make performing certain //! calculations more convenient. /// Adds one to the number given. // --snip-- \u6ce8\u610f //! \u7684\u6700\u540e\u4e00\u884c\u4e4b\u540e\u6ca1\u6709\u4efb\u4f55\u4ee3\u7801\u3002\u56e0\u4e3a\u4ed6\u4eec\u4ee5 //! \u5f00\u5934\u800c\u4e0d\u662f /// \uff0c\u8fd9\u662f\u5c5e\u4e8e\u5305\u542b\u6b64\u6ce8\u91ca\u7684\u9879\u800c\u4e0d\u662f\u6ce8\u91ca\u4e4b\u540e\u9879\u7684\u6587\u6863\u3002\u5728\u8fd9\u4e2a\u60c5\u51b5\u4e2d\uff0c\u5305\u542b\u8fd9\u4e2a\u6ce8\u91ca\u7684\u9879\u662f src/lib.rs \u6587\u4ef6\uff0c\u4e5f\u5c31\u662f crate \u6839\u6587\u4ef6\u3002 \u8fd9\u4e9b\u6ce8\u91ca\u63cf\u8ff0\u4e86\u6574\u4e2a crate\u3002 \u5982\u679c\u8fd0\u884c cargo doc --open \uff0c\u5c06\u4f1a\u53d1\u73b0\u8fd9\u4e9b\u6ce8\u91ca\u663e\u793a\u5728 my_crate \u6587\u6863\u7684\u9996\u9875\uff0c\u4f4d\u4e8e crate \u4e2d\u516c\u6709\u9879\u5217\u8868\u4e4b\u4e0a\uff0c\u5982\u56fe\u6240\u793a\uff1a \u4f4d\u4e8e\u9879\u4e4b\u4e2d\u7684\u6587\u6863\u6ce8\u91ca\u5bf9\u4e8e \u63cf\u8ff0 crate \u548c\u6a21\u5757 \u7279\u522b\u6709\u7528\u3002\u4f7f\u7528\u4ed6\u4eec\u63cf\u8ff0\u5176\u5bb9\u5668\u6574\u4f53\u7684\u76ee\u7684\u6765\u5e2e\u52a9 crate \u7528\u6237\u7406\u89e3\u4f60\u7684\u4ee3\u7801\u7ec4\u7ec7\u3002 \u4f7f\u7528 pub use \u5bfc\u51fa\u5408\u9002\u7684\u516c\u6709 API \u7b2c\u4e03\u7ae0\u4ecb\u7ecd\u4e86\u5982\u4f55\u4f7f\u7528 mod \u5173\u952e\u5b57\u6765\u5c06\u4ee3\u7801\u7ec4\u7ec7\u8fdb\u6a21\u5757\u4e2d\uff0c\u5982\u4f55\u4f7f\u7528 pub \u5173\u952e\u5b57\u5c06\u9879\u53d8\u4e3a\u516c\u6709\uff0c\u548c\u5982\u4f55\u4f7f\u7528 use \u5173\u952e\u5b57\u5c06\u9879\u5f15\u5165\u4f5c\u7528\u57df\u3002 \u7136\u800c\u4f60\u5f00\u53d1\u65f6\u5019\u4f7f\u7528\u7684\u6587\u4ef6\u67b6\u6784\u53ef\u80fd\u5e76\u4e0d\u65b9\u4fbf\u7528\u6237\u3002\u4f60\u7684\u7ed3\u6784\u53ef\u80fd\u662f\u4e00\u4e2a\u5305\u542b\u591a\u4e2a\u5c42\u7ea7\u7684\u5206\u5c42\u7ed3\u6784\uff0c\u4e0d\u8fc7\u8fd9\u5bf9\u4e8e\u7528\u6237\u6765\u8bf4\u5e76\u4e0d\u65b9\u4fbf\u3002 \u8fd9\u662f\u56e0\u4e3a\u60f3\u8981\u4f7f\u7528\u88ab\u5b9a\u4e49\u5728\u5f88\u6df1\u5c42\u7ea7\u4e2d\u7684\u7c7b\u578b\u7684\u4eba\u53ef\u80fd\u5f88\u96be\u53d1\u73b0\u8fd9\u4e9b\u7c7b\u578b\u7684\u5b58\u5728\u3002\u4ed6\u4eec\u4e5f\u53ef\u80fd\u4f1a\u538c\u70e6\u8981\u4f7f\u7528 use my_crate::some_module::another_module::UsefulType; \u800c\u4e0d\u662f use my_crate::UsefulType; \u6765\u4f7f\u7528\u7c7b\u578b\u3002 \u516c\u6709 API \u7684\u7ed3\u6784\u662f\u4f60\u53d1\u5e03 crate \u65f6\u4e3b\u8981\u9700\u8981\u8003\u8651\u7684\u3002crate \u7528\u6237\u6ca1\u6709\u4f60\u90a3\u4e48\u719f\u6089\u5176\u7ed3\u6784\uff0c\u5e76\u4e14\u5982\u679c\u6a21\u5757\u5c42\u7ea7\u8fc7\u5927\u4ed6\u4eec\u53ef\u80fd\u4f1a\u96be\u4ee5\u627e\u5230\u6240\u9700\u7684\u90e8\u5206\u3002 \u597d\u6d88\u606f\u662f\uff0c\u5373\u4f7f\u6587\u4ef6\u7ed3\u6784\u5bf9\u4e8e\u7528\u6237\u6765\u8bf4 \u4e0d\u662f \u5f88\u65b9\u4fbf\uff0c\u4f60\u4e5f\u65e0\u9700\u91cd\u65b0\u5b89\u6392\u5185\u90e8\u7ec4\u7ec7\uff1a\u4f60\u53ef\u4ee5\u9009\u62e9\u4f7f\u7528 pub use \u91cd\u5bfc\u51fa \uff08re-export\uff09\u9879\u6765\u4f7f\u516c\u6709\u7ed3\u6784\u4e0d\u540c\u4e8e\u79c1\u6709\u7ed3\u6784\u3002\u91cd\u5bfc\u51fa\u83b7\u53d6\u4f4d\u4e8e\u4e00\u4e2a\u4f4d\u7f6e\u7684\u516c\u6709\u9879\u5e76\u5c06\u5176\u516c\u5f00\u5230\u53e6\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u597d\u50cf\u5b83\u5c31\u5b9a\u4e49\u5728\u8fd9\u4e2a\u65b0\u4f4d\u7f6e\u4e00\u6837\u3002 \u4f8b\u5982\uff0c\u5047\u8bbe\u6211\u4eec\u521b\u5efa\u4e86\u4e00\u4e2a\u63cf\u8ff0\u7f8e\u672f\u4fe1\u606f\u7684\u5e93 art \u3002\u8fd9\u4e2a\u5e93\u4e2d\u5305\u542b\u4e86\u4e00\u4e2a\u6709\u4e24\u4e2a\u679a\u4e3e PrimaryColor \u548c SecondaryColor \u7684\u6a21\u5757 kinds \uff0c\u4ee5\u53ca\u4e00\u4e2a\u5305\u542b\u51fd\u6570 mix \u7684\u6a21\u5757 utils \uff0c\u5982\u793a\u4f8b\u6240\u793a\uff1a // \u4e00\u4e2a\u5e93 art \u5176\u7ec4\u7ec7\u5305\u542b kinds \u548c utils \u6a21\u5757 //! # Art //! //! A library for modeling artistic concepts. pub mod kinds { /// The primary colors according to the RYB color model. pub enum PrimaryColor { Red , Yellow , Blue , } /// The secondary colors according to the RYB color model. pub enum SecondaryColor { Orange , Green , Purple , } } pub mod utils { use crate :: kinds :: * ; /// Combines two primary colors in equal amounts to create /// a secondary color. pub fn mix ( c1 : PrimaryColor , c2 : PrimaryColor ) -> SecondaryColor { // --snip-- } } cargo doc \u6240\u751f\u6210\u7684 crate \u6587\u6863\u9996\u9875\u5982\u56fe\u6240\u793a\uff1a \u6ce8\u610f PrimaryColor \u548c SecondaryColor \u7c7b\u578b\u3001\u4ee5\u53ca mix \u51fd\u6570\u90fd\u6ca1\u6709\u5728\u9996\u9875\u4e2d\u5217\u51fa\u3002\u6211\u4eec\u5fc5\u987b\u70b9\u51fb kinds \u6216 utils \u624d\u80fd\u770b\u5230\u4ed6\u4eec\u3002 \u53e6\u4e00\u4e2a\u4f9d\u8d56\u8fd9\u4e2a\u5e93\u7684 crate \u9700\u8981 use \u8bed\u53e5\u6765\u5bfc\u5165 art \u4e2d\u7684\u9879\uff0c\u8fd9\u5305\u542b\u6307\u5b9a\u5176\u5f53\u524d\u5b9a\u4e49\u7684\u6a21\u5757\u7ed3\u6784\u3002\u793a\u4f8b\u5c55\u793a\u4e86\u4e00\u4e2a\u4f7f\u7528 art crate \u4e2d PrimaryColor \u548c mix \u9879\u7684 crate \u7684\u4f8b\u5b50\uff1a use art :: kinds :: PrimaryColor ; use art :: utils :: mix ; fn main () { let red = PrimaryColor :: Red ; let yellow = PrimaryColor :: Yellow ; mix ( red , yellow ); } \u793a\u4f8b\u4e2d\u4f7f\u7528 art crate \u4ee3\u7801\u7684\u4f5c\u8005\u4e0d\u5f97\u4e0d\u641e\u6e05\u695a PrimaryColor \u4f4d\u4e8e kinds \u6a21\u5757\u800c mix \u4f4d\u4e8e utils \u6a21\u5757\u3002 art crate \u7684\u6a21\u5757\u7ed3\u6784\u76f8\u6bd4\u4f7f\u7528\u5b83\u7684\u5f00\u53d1\u8005\u6765\u8bf4\u5bf9\u7f16\u5199\u5b83\u7684\u5f00\u53d1\u8005\u66f4\u6709\u610f\u4e49\u3002\u5176\u5185\u90e8\u7684 kinds \u6a21\u5757\u548c utils \u6a21\u5757\u7684\u7ec4\u7ec7\u7ed3\u6784\u5e76\u6ca1\u6709\u5bf9\u5c1d\u8bd5\u7406\u89e3\u5982\u4f55\u4f7f\u7528\u5b83\u7684\u4eba\u63d0\u4f9b\u4efb\u4f55\u6709\u4ef7\u503c\u7684\u4fe1\u606f\u3002 art crate \u7684\u6a21\u5757\u7ed3\u6784\u56e0\u4e0d\u5f97\u4e0d\u641e\u6e05\u695a\u6240\u9700\u7684\u5185\u5bb9\u5728\u4f55\u5904\u548c\u5fc5\u987b\u5728 use \u8bed\u53e5\u4e2d\u6307\u5b9a\u6a21\u5757\u540d\u79f0\u800c\u663e\u5f97\u6df7\u4e71\u548c\u4e0d\u4fbf\u3002 \u4e3a\u4e86\u4ece\u516c\u6709 API \u4e2d\u53bb\u6389 crate \u7684\u5185\u90e8\u7ec4\u7ec7\uff0c\u6211\u4eec\u53ef\u4ee5\u91c7\u7528\u4e0b\u9762\u793a\u4f8b\u4e2d\u7684 art crate \u5e76\u589e\u52a0 pub use \u8bed\u53e5\u6765\u91cd\u5bfc\u51fa\u9879\u5230\u9876\u5c42\u7ed3\u6784\uff0c\u6240\u793a\uff1a // src/lib.rs // \u589e\u52a0 pub use \u8bed\u53e5\u91cd\u5bfc\u51fa\u9879 //! # Art //! //! A library for modeling artistic concepts. pub use self :: kinds :: PrimaryColor ; pub use self :: kinds :: SecondaryColor ; pub use self :: utils :: mix ; pub mod kinds { // --snip-- } pub mod utils { // --snip-- } \u73b0\u5728\u6b64 crate \u7531 cargo doc \u751f\u6210\u7684 API \u6587\u6863\u4f1a\u5728\u9996\u9875\u5217\u51fa\u91cd\u5bfc\u51fa\u7684\u9879\u4ee5\u53ca\u5176\u94fe\u63a5\uff0c\u5982\u56fe \u6240\u793a\uff0c\u8fd9\u4f7f\u5f97 PrimaryColor \u548c SecondaryColor \u7c7b\u578b\u548c mix \u51fd\u6570\u66f4\u6613\u4e8e\u67e5\u627e\u3002 art crate \u7684\u7528\u6237\u4ecd\u7136\u53ef\u4ee5\u770b\u89c1\u548c\u9009\u62e9\u4f7f\u7528\u793a\u4f8b\u4e2d\u7684\u5185\u90e8\u7ed3\u6784\uff0c\u6216\u8005\u53ef\u4ee5\u4f7f\u7528\u66f4\u4e3a\u65b9\u4fbf\u7684\u7ed3\u6784\uff0c\u5982\u793a\u4f8b\u6240\u793a\uff1a use art :: mix ; use art :: PrimaryColor ; fn main () { // --snip-- } \u5bf9\u4e8e\u6709\u5f88\u591a\u5d4c\u5957\u6a21\u5757\u7684\u60c5\u51b5\uff0c\u4f7f\u7528 pub use \u5c06\u7c7b\u578b\u91cd\u5bfc\u51fa\u5230\u9876\u7ea7\u7ed3\u6784\u5bf9\u4e8e\u4f7f\u7528 crate \u7684\u4eba\u6765\u8bf4\u5c06\u4f1a\u662f\u5927\u4e3a\u4e0d\u540c\u7684\u4f53\u9a8c\u3002 \u521b\u5efa\u4e00\u4e2a\u6709\u7528\u7684\u516c\u6709 API \u7ed3\u6784\u66f4\u50cf\u662f \u4e00\u95e8\u827a\u672f\u800c\u975e\u79d1\u5b66 \uff0c\u4f60\u53ef\u4ee5\u53cd\u590d\u68c0\u89c6\u4ed6\u4eec\u6765\u627e\u51fa\u6700\u9002\u5408\u7528\u6237\u7684 API \u3002 pub use \u63d0\u4f9b\u4e86 \u89e3\u8026\u7ec4\u7ec7 crate \u5185\u90e8\u7ed3\u6784\u548c\u4e0e\u7ec8\u7aef\u7528\u6237\u4f53\u73b0\u7684\u7075\u6d3b\u6027\u3002\u89c2\u5bdf\u4e00\u4e9b\u4f60\u6240\u5b89\u88c5\u7684 crate \u7684\u4ee3\u7801\u6765\u770b\u770b\u5176\u5185\u90e8\u7ed3\u6784\u662f\u5426\u4e0d\u540c\u4e8e\u516c\u6709 API\u3002 \u521b\u5efa Crates.io \u8d26\u53f7 \u5728\u4f60\u53ef\u4ee5\u53d1\u5e03\u4efb\u4f55 crate \u4e4b\u524d\uff0c\u9700\u8981\u5728 crates.io \u4e0a\u6ce8\u518c\u8d26\u53f7\u5e76\u83b7\u53d6\u4e00\u4e2a API token\u3002\u4e3a\u6b64\uff0c\u8bbf\u95ee\u4f4d\u4e8e crates.io \u7684\u9996\u9875\u5e76\u4f7f\u7528 GitHub \u8d26\u53f7\u767b\u5f55\u3002\uff08\u76ee\u524d GitHub \u8d26\u53f7\u662f\u5fc5\u987b\u7684\uff0c\u4e0d\u8fc7\u5c06\u6765\u8be5\u7f51\u7ad9\u53ef\u80fd\u4f1a\u652f\u6301\u5176\u4ed6\u521b\u5efa\u8d26\u53f7\u7684\u65b9\u6cd5\uff09\u4e00\u65e6\u767b\u5f55\u4e4b\u540e\uff0c\u67e5\u770b\u4f4d\u4e8e https://crates.io/me/ \u7684\u8d26\u6237\u8bbe\u7f6e\u9875\u9762\u5e76\u83b7\u53d6 API token\u3002\u63a5\u7740\u4f7f\u7528\u8be5 API token \u8fd0\u884c cargo login \u547d\u4ee4\uff0c\u50cf\u8fd9\u6837\uff1a cargo login abcdefghijklmnopqrstuvwxyz012345 \u8fd9\u4e2a\u547d\u4ee4\u4f1a\u901a\u77e5 Cargo \u4f60\u7684 API token \u5e76\u5c06\u5176\u50a8\u5b58\u5728\u672c\u5730\u7684 ~/.cargo/credentials \u6587\u4ef6\u4e2d\u3002\u6ce8\u610f\u8fd9\u4e2a token \u662f\u4e00\u4e2a \u79d8\u5bc6 \uff08secret\uff09\u4e14\u4e0d\u5e94\u8be5\u4e0e\u5176\u4ed6\u4eba\u5171\u4eab\u3002\u5982\u679c\u56e0\u4e3a\u4efb\u4f55\u539f\u56e0\u4e0e\u4ed6\u4eba\u5171\u4eab\u4e86\u8fd9\u4e2a\u4fe1\u606f\uff0c\u5e94\u8be5\u7acb\u5373\u5230 crates.io \u91cd\u65b0\u751f\u6210\u8fd9\u4e2a token\u3002 \u53d1\u5e03\u65b0 crate \u4e4b\u524d \u6709\u4e86\u8d26\u53f7\u4e4b\u540e\uff0c\u6bd4\u5982\u8bf4\u4f60\u5df2\u7ecf\u6709\u4e00\u4e2a\u5e0c\u671b\u53d1\u5e03\u7684 crate\u3002\u5728\u53d1\u5e03\u4e4b\u524d\uff0c\u4f60\u9700\u8981\u5728 crate \u7684 Cargo.toml \u6587\u4ef6\u7684 [package] \u90e8\u5206\u589e\u52a0\u4e00\u4e9b\u672c crate \u7684\u5143\u4fe1\u606f\uff08metadata\uff09\u3002 \u9996\u5148 crate \u9700\u8981\u4e00\u4e2a\u552f\u4e00\u7684\u540d\u79f0\u3002\u867d\u7136\u5728\u672c\u5730\u5f00\u53d1 crate \u65f6\uff0c\u53ef\u4ee5\u4f7f\u7528\u4efb\u4f55\u4f60\u559c\u6b22\u7684\u540d\u79f0\u3002\u4e0d\u8fc7 crates.io \u4e0a\u7684 crate \u540d\u79f0\u9075\u5b88\u5148 \u5230\u5148\u5f97\u7684\u5206\u914d\u539f\u5219 \u3002\u4e00\u65e6\u67d0\u4e2a crate \u540d\u79f0\u88ab\u4f7f\u7528\uff0c\u5176\u4ed6\u4eba\u5c31\u4e0d\u80fd\u518d\u53d1\u5e03\u8fd9\u4e2a\u540d\u79f0\u7684 crate \u4e86\u3002\u8bf7\u5728\u7f51\u7ad9\u4e0a\u641c\u7d22\u4f60\u5e0c\u671b\u4f7f\u7528\u7684\u540d\u79f0\u6765\u627e\u51fa\u5b83\u662f\u5426\u5df2\u88ab\u4f7f\u7528\u3002\u5982\u679c\u6ca1\u6709\uff0c\u4fee\u6539 Cargo.toml \u4e2d [package] \u91cc\u7684\u540d\u79f0\u4e3a\u4f60\u5e0c\u671b\u7528\u4e8e\u53d1\u5e03\u7684\u540d\u79f0\uff0c\u50cf\u8fd9\u6837\uff1a # Cargo.toml [package] name = \"guessing_game\" \u5373\u4f7f\u4f60\u9009\u62e9\u4e86\u4e00\u4e2a\u552f\u4e00\u7684\u540d\u79f0\uff0c\u5982\u679c\u6b64\u65f6\u5c1d\u8bd5\u8fd0\u884c cargo publish \u53d1\u5e03\u8be5 crate \u7684\u8bdd\uff0c\u4f1a\u5f97\u5230\u4e00\u4e2a\u8b66\u544a\u63a5\u7740\u662f\u4e00\u4e2a\u9519\u8bef\uff1a $ cargo publish Updating crates.io index warning: manifest has no description, license, license-file, documentation, homepage or repository. See https://doc.rust-lang.org/cargo/reference/manifest.html#package-metadata for more info. --snip-- error: failed to publish to registry at https://crates.io Caused by: the remote server responded with an error: missing or empty metadata fields: description, license. Please see https://doc.rust-lang.org/cargo/reference/manifest.html for how to upload metadata \u8fd9\u662f\u56e0\u4e3a\u6211\u4eec\u7f3a\u5c11\u4e00\u4e9b\u5173\u952e\u4fe1\u606f\uff1a \u5173\u4e8e\u8be5 crate \u7528\u9014\u7684\u63cf\u8ff0\u548c\u7528\u6237\u53ef\u80fd\u5728\u4f55\u79cd\u6761\u6b3e\u4e0b\u4f7f\u7528\u8be5 crate \u7684 license\u3002\u4e3a\u4e86\u4fee\u6b63\u8fd9\u4e2a\u9519\u8bef\uff0c\u9700\u8981\u5728 Cargo.toml \u4e2d\u5f15\u5165\u8fd9\u4e9b\u4fe1\u606f\u3002 \u63cf\u8ff0\u901a\u5e38\u662f\u4e00\u4e24\u53e5\u8bdd\uff0c\u56e0\u4e3a\u5b83\u4f1a\u51fa\u73b0\u5728 crate \u7684\u641c\u7d22\u7ed3\u679c\u4e2d\u548c crate \u9875\u9762\u91cc\u3002\u5bf9\u4e8e license \u5b57\u6bb5\uff0c\u4f60\u9700\u8981\u4e00\u4e2a license \u6807\u8bc6\u7b26\u503c\uff08license identifier value\uff09\u3002Linux \u57fa\u91d1\u4f1a\u7684 Software Package Data Exchange (SPDX) \u5217\u51fa\u4e86\u53ef\u4ee5\u4f7f\u7528\u7684\u6807\u8bc6\u7b26\u3002\u4f8b\u5982\uff0c\u4e3a\u4e86\u6307\u5b9a crate \u4f7f\u7528 MIT License\uff0c\u589e\u52a0 MIT \u6807\u8bc6\u7b26\uff1a # Cargo.toml [package] name = \"guessing_game\" license = \"MIT\" \u5982\u679c\u4f60\u5e0c\u671b\u4f7f\u7528\u4e0d\u5b58\u5728\u4e8e SPDX \u7684 license\uff0c\u5219\u9700\u8981\u5c06 license \u6587\u672c\u653e\u5165\u4e00\u4e2a\u6587\u4ef6\uff0c\u5c06\u8be5\u6587\u4ef6\u5305\u542b\u8fdb\u9879\u76ee\u4e2d\uff0c\u63a5\u7740\u4f7f\u7528 license-file \u6765\u6307\u5b9a\u6587\u4ef6\u540d\u800c\u4e0d\u662f\u4f7f\u7528 license \u5b57\u6bb5\u3002 \u5173\u4e8e\u9879\u76ee\u6240\u9002\u7528\u7684 license \u6307\u5bfc\u8d85\u51fa\u4e86\u672c\u4e66\u7684\u8303\u7574\u3002\u5f88\u591a Rust \u793e\u533a\u6210\u5458\u9009\u62e9\u4e0e Rust \u81ea\u8eab\u76f8\u540c\u7684 license \uff0c\u8fd9\u662f\u4e00\u4e2a\u53cc\u8bb8\u53ef\u7684 MIT OR Apache-2.0 \u3002\u8fd9\u4e2a\u5b9e\u8df5\u5c55\u793a\u4e86\u4e5f\u53ef\u4ee5\u901a\u8fc7 OR \u5206\u9694\u4e3a\u9879\u76ee\u6307\u5b9a\u591a\u4e2a license \u6807\u8bc6\u7b26\u3002 \u90a3\u4e48\uff0c\u6709\u4e86 \u552f\u4e00\u7684\u540d\u79f0 \u3001 \u7248\u672c\u53f7 \u3001\u7531 cargo new \u65b0\u5efa\u9879\u76ee\u65f6\u589e\u52a0\u7684 \u4f5c\u8005\u4fe1\u606f \u3001 \u63cf\u8ff0 \u548c\u6240\u9009\u62e9\u7684 license \uff0c\u5df2\u7ecf\u51c6\u5907\u597d\u53d1\u5e03\u7684\u9879\u76ee\u7684 Cargo.toml \u6587\u4ef6\u53ef\u80fd\u770b\u8d77\u6765\u50cf\u8fd9\u6837\uff1a # Cargo.toml [package] name = \"guessing_game\" version = \"0.1.0\" edition = \"2021\" description = \"A fun game where you guess what number the computer has chosen.\" license = \"MIT OR Apache-2.0\" [dependencies] Cargo \u7684\u6587\u6863 \u63cf\u8ff0\u4e86\u5176\u4ed6\u53ef\u4ee5\u6307\u5b9a\u7684\u5143\u4fe1\u606f\uff0c\u4ed6\u4eec\u53ef\u4ee5\u5e2e\u52a9\u4f60\u7684 crate \u66f4\u5bb9\u6613\u88ab\u53d1\u73b0\u548c\u4f7f\u7528\uff01 \u53d1\u5e03\u5230Crates.io \u73b0\u5728\u6211\u4eec\u521b\u5efa\u4e86\u4e00\u4e2a\u8d26\u53f7\uff0c\u4fdd\u5b58\u4e86 API token\uff0c\u4e3a crate \u9009\u62e9\u4e86\u4e00\u4e2a\u540d\u5b57\uff0c\u5e76\u6307\u5b9a\u4e86\u6240\u9700\u7684\u5143\u6570\u636e\uff0c\u4f60\u5df2\u7ecf\u51c6\u5907\u597d\u53d1\u5e03\u4e86\uff01\u53d1\u5e03 crate \u4f1a\u4e0a\u4f20\u7279\u5b9a\u7248\u672c\u7684 crate \u5230 crates.io \u4ee5\u4f9b\u4ed6\u4eba\u4f7f\u7528\u3002 \u53d1\u5e03 crate \u65f6\u8bf7\u591a\u52a0\u5c0f\u5fc3\uff0c\u56e0\u4e3a\u53d1\u5e03\u662f \u6c38\u4e45\u6027\u7684 \uff08permanent\uff09\u3002\u5bf9\u5e94\u7248\u672c\u4e0d\u53ef\u80fd\u88ab\u8986\u76d6\uff0c\u5176\u4ee3\u7801\u4e5f\u4e0d\u53ef\u80fd\u88ab\u5220\u9664\u3002 crates.io \u7684\u4e00\u4e2a\u4e3b\u8981\u76ee\u6807\u662f\u4f5c\u4e3a\u4e00\u4e2a\u5b58\u50a8\u4ee3\u7801\u7684\u6c38\u4e45\u6587\u6863\u670d\u52a1\u5668\uff0c\u8fd9\u6837\u6240\u6709\u4f9d\u8d56 crates.io \u4e2d\u7684 crate \u7684\u9879\u76ee\u90fd\u80fd\u4e00\u76f4\u6b63\u5e38\u5de5\u4f5c\u3002\u800c\u5141\u8bb8\u5220\u9664\u7248\u672c\u6ca1\u529e\u6cd5\u8fbe\u6210\u8fd9\u4e2a\u76ee\u6807\u3002\u7136\u800c\uff0c\u53ef\u4ee5\u88ab\u53d1\u5e03\u7684\u7248\u672c\u53f7\u5374\u6ca1\u6709\u9650\u5236\u3002 \u518d\u6b21\u8fd0\u884c cargo publish \u547d\u4ee4\u3002\u8fd9\u6b21\u5b83\u5e94\u8be5\u4f1a\u6210\u529f\uff1a $ cargo publish Updating crates.io index Packaging guessing_game v0.1.0 ( file:///projects/guessing_game ) Verifying guessing_game v0.1.0 ( file:///projects/guessing_game ) Compiling guessing_game v0.1.0 ( file:///projects/guessing_game/target/package/guessing_game-0.1.0 ) Finished dev [ unoptimized + debuginfo ] target ( s ) in 0 .19s Uploading guessing_game v0.1.0 ( file:///projects/guessing_game ) \u606d\u559c\uff01\u4f60\u73b0\u5728\u5411 Rust \u793e\u533a\u5206\u4eab\u4e86\u4ee3\u7801\uff0c\u800c\u4e14\u4efb\u4f55\u4eba\u90fd\u53ef\u4ee5\u8f7b\u677e\u7684\u5c06\u4f60\u7684 crate \u52a0\u5165\u4ed6\u4eec\u9879\u76ee\u7684\u4f9d\u8d56\u3002 \u53d1\u5e03\u73b0\u5b58 crate \u7684\u65b0\u7248\u672c \u5f53\u4f60\u4fee\u6539\u4e86 crate \u5e76\u51c6\u5907\u597d\u53d1\u5e03\u65b0\u7248\u672c\u65f6\uff0c\u6539\u53d8 Cargo.toml \u4e2d version \u6240\u6307\u5b9a\u7684\u503c\u3002\u8bf7\u4f7f\u7528 \u8bed\u4e49\u5316\u7248\u672c\u89c4\u5219 \u6765\u6839\u636e\u4fee\u6539\u7684\u7c7b\u578b\u51b3\u5b9a\u4e0b\u4e00\u4e2a\u7248\u672c\u53f7\u3002\u63a5\u7740\u8fd0\u884c cargo publish \u6765\u4e0a\u4f20\u65b0\u7248\u672c\u3002 \u4ece Crates.io \u64a4\u56de\u7248\u672c \u867d\u7136\u4f60\u4e0d\u80fd\u5220\u9664\u4e4b\u524d\u7248\u672c\u7684 crate\uff0c\u4f46\u662f\u53ef\u4ee5\u963b\u6b62\u4efb\u4f55\u5c06\u6765\u7684\u9879\u76ee\u5c06\u4ed6\u4eec\u52a0\u5165\u5230\u4f9d\u8d56\u4e2d\u3002\u8fd9\u5728\u67d0\u4e2a\u7248\u672c\u56e0\u4e3a\u8fd9\u6837\u6216\u90a3\u6837\u7684\u539f\u56e0\u88ab\u7834\u574f\u7684\u60c5\u51b5\u5f88\u6709\u7528\u3002\u5bf9\u4e8e\u8fd9\u79cd\u60c5\u51b5\uff0cCargo \u652f\u6301 \u64a4\u56de \uff08yanking\uff09\u67d0\u4e2a\u7248\u672c\u3002 \u64a4\u56de\u67d0\u4e2a\u7248\u672c\u4f1a\u963b\u6b62\u65b0\u9879\u76ee\u5f00\u59cb\u4f9d\u8d56\u6b64\u7248\u672c\uff0c\u4e0d\u8fc7\u6240\u6709\u73b0\u5b58\u6b64\u4f9d\u8d56\u7684\u9879\u76ee\u4ecd\u7136\u80fd\u591f\u4e0b\u8f7d\u548c\u4f9d\u8d56\u8fd9\u4e2a\u7248\u672c\u3002\u4ece\u672c\u8d28\u4e0a\u8bf4\uff0c\u64a4\u56de\u610f\u5473\u7740\u6240\u6709\u5e26\u6709 Cargo.lock \u7684\u9879\u76ee\u7684\u4f9d\u8d56\u4e0d\u4f1a\u88ab\u7834\u574f\uff0c\u540c\u65f6\u4efb\u4f55\u65b0\u751f\u6210\u7684 Cargo.lock \u5c06\u4e0d\u80fd\u4f7f\u7528\u88ab\u64a4\u56de\u7684\u7248\u672c\u3002 \u4e3a\u4e86\u64a4\u56de\u4e00\u4e2a crate\uff0c\u8fd0\u884c cargo yank \u5e76\u6307\u5b9a\u5e0c\u671b\u64a4\u56de\u7684\u7248\u672c\uff1a cargo yank --vers 1 .0.1 \u4e5f\u53ef\u4ee5\u64a4\u9500\u64a4\u56de\u64cd\u4f5c\uff0c\u5e76\u5141\u8bb8\u9879\u76ee\u53ef\u4ee5\u518d\u6b21\u5f00\u59cb\u4f9d\u8d56\u67d0\u4e2a\u7248\u672c\uff0c\u901a\u8fc7\u5728\u547d\u4ee4\u4e0a\u589e\u52a0 --undo \uff1a cargo yank --vers 1 .0.1 --undo \u64a4\u56de \u5e76\u6ca1\u6709 \u5220\u9664\u4efb\u4f55\u4ee3\u7801\u3002\u4e3e\u4f8b\u6765\u8bf4\uff0c\u64a4\u56de\u529f\u80fd\u5e76\u4e0d\u610f\u5728\u5220\u9664\u4e0d\u5c0f\u5fc3\u4e0a\u4f20\u7684\u79d8\u5bc6\u4fe1\u606f\u3002\u5982\u679c\u51fa\u73b0\u4e86\u8fd9\u79cd\u60c5\u51b5\uff0c\u8bf7\u7acb\u5373\u91cd\u65b0\u8bbe\u7f6e\u8fd9\u4e9b\u79d8\u5bc6\u4fe1\u606f\u3002 Cargo \u5de5\u4f5c\u7a7a\u95f4 \u7b2c\u5341\u4e8c\u7ae0\u4e2d\uff0c\u6211\u4eec\u6784\u5efa\u4e00\u4e2a\u5305\u542b\u4e8c\u8fdb\u5236 crate \u548c\u5e93 crate \u7684\u5305\u3002\u4f60\u53ef\u80fd\u4f1a\u53d1\u73b0\uff0c\u968f\u7740\u9879\u76ee\u5f00\u53d1\u7684\u6df1\u5165\uff0c\u5e93 crate \u6301\u7eed\u589e\u5927\uff0c\u800c\u4f60\u5e0c\u671b\u5c06\u5176\u8fdb\u4e00\u6b65\u62c6\u5206\u6210\u591a\u4e2a\u5e93 crate\u3002\u5bf9\u4e8e\u8fd9\u79cd\u60c5\u51b5\uff0cCargo \u63d0\u4f9b\u4e86\u4e00\u4e2a\u53eb \u5de5\u4f5c\u7a7a\u95f4 \uff08workspaces\uff09\u7684\u529f\u80fd\uff0c\u5b83\u53ef\u4ee5\u5e2e\u52a9\u6211\u4eec\u7ba1\u7406\u591a\u4e2a\u76f8\u5173\u7684\u534f\u540c\u5f00\u53d1\u7684\u5305\u3002 \u5de5\u4f5c\u7a7a\u95f4 \u662f\u4e00\u7cfb\u5217\u5171\u4eab\u540c\u6837\u7684 Cargo.lock \u548c\u8f93\u51fa\u76ee\u5f55\u7684\u5305\u3002\u8ba9\u6211\u4eec\u4f7f\u7528\u5de5\u4f5c\u7a7a\u95f4\u521b\u5efa\u4e00\u4e2a\u9879\u76ee \u2014\u2014 \u8fd9\u91cc\u91c7\u7528\u5e38\u89c1\u7684\u4ee3\u7801\u4ee5\u4fbf\u53ef\u4ee5\u5173\u6ce8\u5de5\u4f5c\u7a7a\u95f4\u7684\u7ed3\u6784\u3002\u6709\u591a\u79cd\u7ec4\u7ec7\u5de5\u4f5c\u7a7a\u95f4\u7684\u65b9\u5f0f\uff1b\u6211\u4eec\u5c06\u5c55\u793a\u4e00\u4e2a\u5e38\u7528\u65b9\u6cd5\u3002\u6211\u4eec\u7684\u5de5\u4f5c\u7a7a\u95f4\u6709\u4e00\u4e2a\u4e8c\u8fdb\u5236\u9879\u76ee\u548c\u4e24\u4e2a\u5e93\u3002\u4e8c\u8fdb\u5236\u9879\u76ee\u4f1a\u63d0\u4f9b\u4e3b\u8981\u529f\u80fd\uff0c\u5e76\u4f1a\u4f9d\u8d56\u53e6\u4e24\u4e2a\u5e93\u3002\u4e00\u4e2a\u5e93\u4f1a\u63d0\u4f9b add_one \u65b9\u6cd5\u800c\u7b2c\u4e8c\u4e2a\u4f1a\u63d0\u4f9b add_two \u65b9\u6cd5\u3002\u8fd9\u4e09\u4e2a crate \u5c06\u4f1a\u662f\u76f8\u540c\u5de5\u4f5c\u7a7a\u95f4\u7684\u4e00\u90e8\u5206\u3002\u8ba9\u6211\u4eec\u4ee5\u65b0\u5efa\u5de5\u4f5c\u7a7a\u95f4\u76ee\u5f55\u5f00\u59cb\uff1a mkdir add cd add \u63a5\u7740\u5728 add \u76ee\u5f55\u4e2d\uff0c\u521b\u5efa Cargo.toml \u6587\u4ef6\u3002\u8fd9\u4e2a Cargo.toml \u6587\u4ef6\u914d\u7f6e\u4e86\u6574\u4e2a\u5de5\u4f5c\u7a7a\u95f4\u3002\u5b83\u4e0d\u4f1a\u5305\u542b [package] \u6216\u5176\u4ed6\u6211\u4eec\u5728 Cargo.toml \u4e2d\u89c1\u8fc7\u7684\u5143\u4fe1\u606f\u3002\u76f8\u53cd\uff0c\u5b83\u4ee5 [workspace] \u90e8\u5206\u4f5c\u4e3a\u5f00\u59cb\uff0c\u5e76\u901a\u8fc7\u6307\u5b9a adder \u7684\u8def\u5f84\u6765\u4e3a\u5de5\u4f5c\u7a7a\u95f4\u589e\u52a0\u6210\u5458\uff0c\u5982\u4e0b\u4f1a\u52a0\u5165\u4e8c\u8fdb\u5236 crate\uff1a \u6587\u4ef6\u540d: Cargo.toml [workspace] members = [ \"adder\" , ] \u63a5\u4e0b\u6765\uff0c\u5728 add \u76ee\u5f55\u8fd0\u884c cargo new \u65b0\u5efa adder \u4e8c\u8fdb\u5236 crate\uff1a $ cargo new adder Created binary (application) `adder` package \u5230\u6b64\u4e3a\u6b62\uff0c\u53ef\u4ee5\u8fd0\u884c cargo build \u6765\u6784\u5efa\u5de5\u4f5c\u7a7a\u95f4\u3002 add \u76ee\u5f55\u4e2d\u7684\u6587\u4ef6\u5e94\u8be5\u770b\u8d77\u6765\u50cf\u8fd9\u6837\uff1a \u251c\u2500\u2500 Cargo.lock \u251c\u2500\u2500 Cargo.toml \u251c\u2500\u2500 adder \u2502 \u251c\u2500\u2500 Cargo.toml \u2502 \u2514\u2500\u2500 src \u2502 \u2514\u2500\u2500 main.rs \u2514\u2500\u2500 target \u5de5\u4f5c\u7a7a\u95f4\u5728\u9876\u7ea7\u76ee\u5f55\u6709\u4e00\u4e2a target \u76ee\u5f55\uff1b adder \u5e76\u6ca1\u6709\u81ea\u5df1\u7684 target \u76ee\u5f55\u3002\u5373\u4f7f\u8fdb\u5165 adder \u76ee\u5f55\u8fd0\u884c cargo build \uff0c\u6784\u5efa\u7ed3\u679c\u4e5f\u4f4d\u4e8e add/target \u800c\u4e0d\u662f add/adder/target \u3002\u5de5\u4f5c\u7a7a\u95f4\u4e2d\u7684 crate \u4e4b\u95f4\u76f8\u4e92\u4f9d\u8d56\u3002\u5982\u679c\u6bcf\u4e2a crate \u6709\u5176\u81ea\u5df1\u7684 target \u76ee\u5f55\uff0c\u4e3a\u4e86\u5728\u81ea\u5df1\u7684 target \u76ee\u5f55\u4e2d\u751f\u6210\u6784\u5efa\u7ed3\u679c\uff0c\u5de5\u4f5c\u7a7a\u95f4\u4e2d\u7684\u6bcf\u4e00\u4e2a crate \u90fd\u4e0d\u5f97\u4e0d\u76f8\u4e92\u91cd\u65b0\u7f16\u8bd1\u5176\u4ed6 crate\u3002\u901a\u8fc7\u5171\u4eab\u4e00\u4e2a target \u76ee\u5f55\uff0c\u5de5\u4f5c\u7a7a\u95f4\u53ef\u4ee5\u907f\u514d\u5176\u4ed6 crate \u591a\u4f59\u7684\u91cd\u590d\u6784\u5efa\u3002 \u5728\u5de5\u4f5c\u7a7a\u95f4\u4e2d\u521b\u5efa\u7b2c\u4e8c\u4e2a\u5305 \u63a5\u4e0b\u6765\uff0c\u8ba9\u6211\u4eec\u5728\u5de5\u4f5c\u7a7a\u95f4\u4e2d\u6307\u5b9a\u53e6\u4e00\u4e2a\u6210\u5458 crate\u3002\u8fd9\u4e2a crate \u4f4d\u4e8e add_one \u76ee\u5f55\u4e2d\uff0c\u6240\u4ee5\u4fee\u6539\u9876\u7ea7 Cargo.toml \u4e3a\u4e5f\u5305\u542b add_one \u8def\u5f84\uff1a \u6587\u4ef6\u540d: Cargo.toml [workspace] members = [ \"adder\" , \"add_one\" , ] \u63a5\u7740\u65b0\u751f\u6210\u4e00\u4e2a\u53eb\u505a add_one \u7684\u5e93\uff1a $ cargo new add_one --lib Created library `add_one` package \u73b0\u5728 add \u76ee\u5f55\u5e94\u8be5\u6709\u5982\u4e0b\u76ee\u5f55\u548c\u6587\u4ef6\uff1a \u251c\u2500\u2500 Cargo.lock \u251c\u2500\u2500 Cargo.toml \u251c\u2500\u2500 add_one \u2502 \u251c\u2500\u2500 Cargo.toml \u2502 \u2514\u2500\u2500 src \u2502 \u2514\u2500\u2500 lib.rs \u251c\u2500\u2500 adder \u2502 \u251c\u2500\u2500 Cargo.toml \u2502 \u2514\u2500\u2500 src \u2502 \u2514\u2500\u2500 main.rs \u2514\u2500\u2500 target \u5728 add_one/src/lib.rs \u6587\u4ef6\u4e2d\uff0c\u589e\u52a0\u4e00\u4e2a add_one \u51fd\u6570\uff1a \u6587\u4ef6\u540d: add_one/src/lib.rs pub fn add_one ( x : i32 ) -> i32 { x + 1 } \u73b0\u5728\u5de5\u4f5c\u7a7a\u95f4\u4e2d\u6709\u4e86\u4e00\u4e2a\u5e93 crate\uff0c\u8ba9 adder \u4f9d\u8d56\u5e93 crate add_one \u3002\u9996\u5148\u9700\u8981\u5728 adder/Cargo.toml \u6587\u4ef6\u4e2d\u589e\u52a0 add_one \u4f5c\u4e3a\u8def\u5f84\u4f9d\u8d56\uff1a \u6587\u4ef6\u540d: adder/Cargo.toml [dependencies] add_one = { path = \"../add_one\" } cargo\u5e76\u4e0d\u5047\u5b9a\u5de5\u4f5c\u7a7a\u95f4\u4e2d\u7684Crates\u4f1a\u76f8\u4e92\u4f9d\u8d56\uff0c\u6240\u4ee5\u9700\u8981\u660e\u786e\u8868\u660e\u5de5\u4f5c\u7a7a\u95f4\u4e2d crate \u7684\u4f9d\u8d56\u5173\u7cfb\u3002 \u63a5\u4e0b\u6765\uff0c\u5728 adder crate \u4e2d\u4f7f\u7528 add_one crate \u7684\u51fd\u6570 add_one \u3002\u6253\u5f00 adder/src/main.rs \u5728\u9876\u90e8\u589e\u52a0\u4e00\u884c use \u5c06\u65b0 add_one \u5e93 crate \u5f15\u5165\u4f5c\u7528\u57df\u3002\u63a5\u7740\u4fee\u6539 main \u51fd\u6570\u6765\u8c03\u7528 add_one \u51fd\u6570\uff0c\u5982\u793a\u4f8b 14-7 \u6240\u793a\u3002 \u6587\u4ef6\u540d: adder/src/main.rs use add_one ; fn main () { let num = 10 ; println! ( \"Hello, world! {} plus one is {}!\" , num , add_one :: add_one ( num ) ); } \u793a\u4f8b 14-7\uff1a\u5728 adder crate \u4e2d\u4f7f\u7528 add_one \u5e93 crate \u5728 add \u76ee\u5f55\u4e2d\u8fd0\u884c cargo build \u6765\u6784\u5efa\u5de5\u4f5c\u7a7a\u95f4\uff01 $ cargo build Compiling add_one v0.1.0 (file:///projects/add/add_one) Compiling adder v0.1.0 (file:///projects/add/adder) Finished dev [unoptimized + debuginfo] target(s) in 0.68s \u4e3a\u4e86\u5728\u9876\u5c42 add \u76ee\u5f55\u8fd0\u884c\u4e8c\u8fdb\u5236 crate\uff0c\u53ef\u4ee5\u901a\u8fc7 -p \u53c2\u6570\u548c\u5305\u540d\u79f0\u6765\u8fd0\u884c cargo run \u6307\u5b9a\u5de5\u4f5c\u7a7a\u95f4\u4e2d\u6211\u4eec\u5e0c\u671b\u4f7f\u7528\u7684\u5305\uff1a $ cargo run -p adder Finished dev [unoptimized + debuginfo] target(s) in 0.0s Running `target/debug/adder` Hello, world! 10 plus one is 11! \u8fd9\u4f1a\u8fd0\u884c adder/src/main.rs \u4e2d\u7684\u4ee3\u7801\uff0c\u5176\u4f9d\u8d56 add_one crate \u5728\u5de5\u4f5c\u7a7a\u95f4\u4e2d\u4f9d\u8d56\u5916\u90e8\u5305 \u8fd8\u9700\u6ce8\u610f\u7684\u662f\u5de5\u4f5c\u7a7a\u95f4\u53ea\u5728\u6839\u76ee\u5f55\u6709\u4e00\u4e2a Cargo.lock \uff0c\u800c\u4e0d\u662f\u5728\u6bcf\u4e00\u4e2a crate \u76ee\u5f55\u90fd\u6709 Cargo.lock \u3002\u8fd9\u786e\u4fdd\u4e86\u6240\u6709\u7684 crate \u90fd\u4f7f\u7528\u5b8c\u5168\u76f8\u540c\u7248\u672c\u7684\u4f9d\u8d56\u3002\u5982\u679c\u5728 Cargo.toml \u548c add_one/Cargo.toml \u4e2d\u90fd\u589e\u52a0 rand crate\uff0c\u5219 Cargo \u4f1a\u5c06\u5176\u90fd\u89e3\u6790\u4e3a\u540c\u4e00\u7248\u672c\u5e76\u8bb0\u5f55\u5230\u552f\u4e00\u7684 Cargo.lock \u4e2d\u3002\u4f7f\u5f97\u5de5\u4f5c\u7a7a\u95f4\u4e2d\u7684\u6240\u6709 crate \u90fd\u4f7f\u7528\u76f8\u540c\u7684\u4f9d\u8d56\u610f\u5473\u7740\u5176\u4e2d\u7684 crate \u90fd\u662f\u76f8\u4e92\u517c\u5bb9\u7684\u3002\u8ba9\u6211\u4eec\u5728 add_one/Cargo.toml \u4e2d\u7684 [dependencies] \u90e8\u5206\u589e\u52a0 rand crate \u4ee5\u4fbf\u80fd\u591f\u5728 add_one crate \u4e2d\u4f7f\u7528 rand crate\uff1a \u6587\u4ef6\u540d: add_one/Cargo.toml [dependencies] rand = \"0.8.3\" \u73b0\u5728\u5c31\u53ef\u4ee5\u5728 add_one/src/lib.rs \u4e2d\u589e\u52a0 use rand; \u4e86\uff0c\u63a5\u7740\u5728 add \u76ee\u5f55\u8fd0\u884c cargo build \u6784\u5efa\u6574\u4e2a\u5de5\u4f5c\u7a7a\u95f4\u5c31\u4f1a\u5f15\u5165\u5e76\u7f16\u8bd1 rand crate\uff1a $ cargo build Updating crates.io index Downloaded rand v0.8.3 --snip-- Compiling rand v0.8.3 Compiling add_one v0.1.0 (file:///projects/add/add_one) warning: unused import: `rand` --> add_one/src/lib.rs:1:5 | 1 | use rand; | ^^^^ | = note: `#[warn(unused_imports)]` on by default warning: 1 warning emitted Compiling adder v0.1.0 (file:///projects/add/adder) Finished dev [unoptimized + debuginfo] target(s) in 10.18s \u73b0\u5728\u9876\u7ea7\u7684 Cargo.lock \u5305\u542b\u4e86 add_one \u7684 rand \u4f9d\u8d56\u7684\u4fe1\u606f\u3002\u7136\u800c\uff0c\u5373\u4f7f rand \u88ab\u7528\u4e8e\u5de5\u4f5c\u7a7a\u95f4\u7684\u67d0\u5904\uff0c\u4e5f\u4e0d\u80fd\u5728\u5176\u4ed6 crate \u4e2d\u4f7f\u7528\u5b83\uff0c\u9664\u975e\u4e5f\u5728\u4ed6\u4eec\u7684 Cargo.toml \u4e2d\u52a0\u5165 rand \u3002\u4f8b\u5982\uff0c\u5982\u679c\u5728\u9876\u7ea7\u7684 adder crate \u7684 adder/src/main.rs \u4e2d\u589e\u52a0 use rand; \uff0c\u4f1a\u5f97\u5230\u4e00\u4e2a\u9519\u8bef\uff1a $ cargo build --snip-- Compiling adder v0.1.0 (file:///projects/add/adder) error[E0432]: unresolved import `rand` --> adder/src/main.rs:2:5 | 2 | use rand; | ^^^^ no external crate `rand` \u4e3a\u4e86\u4fee\u590d\u8fd9\u4e2a\u9519\u8bef\uff0c\u4fee\u6539\u9876\u7ea7 adder crate \u7684 Cargo.toml \u6765\u8868\u660e rand \u4e5f\u662f\u8fd9\u4e2a crate \u7684\u4f9d\u8d56\u3002\u6784\u5efa adder crate \u4f1a\u5c06 rand \u52a0\u5165\u5230 Cargo.lock \u4e2d adder \u7684\u4f9d\u8d56\u5217\u8868\u4e2d\uff0c\u4f46\u662f\u8fd9\u5e76\u4e0d\u4f1a\u4e0b\u8f7d rand \u7684\u989d\u5916\u62f7\u8d1d\u3002Cargo \u786e\u4fdd\u4e86\u5de5\u4f5c\u7a7a\u95f4\u4e2d\u4efb\u4f55\u4f7f\u7528 rand \u7684 crate \u90fd\u91c7\u7528\u76f8\u540c\u7684\u7248\u672c\u3002\u5728\u6574\u4e2a\u5de5\u4f5c\u7a7a\u95f4\u4e2d\u4f7f\u7528\u76f8\u540c\u7248\u672c\u7684 rand \u8282\u7701\u4e86\u7a7a\u95f4\uff0c\u56e0\u4e3a\u8fd9\u6837\u5c31\u65e0\u9700\u591a\u4e2a\u62f7\u8d1d\u5e76\u786e\u4fdd\u4e86\u5de5\u4f5c\u7a7a\u95f4\u4e2d\u7684 crate \u5c06\u662f\u76f8\u4e92\u517c\u5bb9\u7684\u3002 \u4e3a\u5de5\u4f5c\u7a7a\u95f4\u589e\u52a0\u6d4b\u8bd5 \u4f5c\u4e3a\u53e6\u4e00\u4e2a\u63d0\u5347\uff0c\u8ba9\u6211\u4eec\u4e3a add_one crate \u4e2d\u7684 add_one::add_one \u51fd\u6570\u589e\u52a0\u4e00\u4e2a\u6d4b\u8bd5\uff1a \u6587\u4ef6\u540d: add_one/src/lib.rs pub fn add_one ( x : i32 ) -> i32 { x + 1 } #[cfg(test)] mod tests { use super :: * ; #[test] fn it_works () { assert_eq! ( 3 , add_one ( 2 )); } } \u5728\u9876\u7ea7 add \u76ee\u5f55\u8fd0\u884c cargo test \uff1a $ cargo test Compiling add_one v0.1.0 (file:///projects/add/add_one) Compiling adder v0.1.0 (file:///projects/add/adder) Finished test [unoptimized + debuginfo] target(s) in 0.27s Running target/debug/deps/add_one-f0253159197f7841 running 1 test test tests::it_works ... ok test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s Running target/debug/deps/adder-49979ff40686fa8e running 0 tests test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s Doc-tests add_one running 0 tests test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s \u8f93\u51fa\u7684\u7b2c\u4e00\u90e8\u5206\u663e\u793a add_one crate \u7684 it_workstests \u6d4b\u8bd5\u901a\u8fc7\u4e86\u3002\u4e0b\u4e00\u4e2a\u90e8\u5206\u663e\u793a adder crate \u4e2d\u627e\u5230\u4e86 0 \u4e2a\u6d4b\u8bd5\uff0c\u6700\u540e\u4e00\u90e8\u5206\u663e\u793a add_one crate \u4e2d\u6709 0 \u4e2a\u6587\u6863\u6d4b\u8bd5\u3002\u5728\u50cf\u8fd9\u6837\u7684\u5de5\u4f5c\u7a7a\u95f4\u7ed3\u6784\u4e2d\u8fd0\u884c cargo test \u4f1a\u8fd0\u884c\u5de5\u4f5c\u7a7a\u95f4\u4e2d\u6240\u6709 crate \u7684\u6d4b\u8bd5\u3002 \u4e5f\u53ef\u4ee5\u9009\u62e9\u8fd0\u884c\u5de5\u4f5c\u7a7a\u95f4\u4e2d\u7279\u5b9a crate \u7684\u6d4b\u8bd5\uff0c\u901a\u8fc7\u5728\u6839\u76ee\u5f55\u4f7f\u7528 -p \u53c2\u6570\u5e76\u6307\u5b9a\u5e0c\u671b\u6d4b\u8bd5\u7684 crate \u540d\u79f0\uff1a $ cargo test -p add_one Finished test [unoptimized + debuginfo] target(s) in 0.00s Running target/debug/deps/add_one-b3235fea9a156f74 running 1 test test tests::it_works ... ok test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s Doc-tests add_one running 0 tests test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s \u8f93\u51fa\u663e\u793a\u4e86 cargo test \u53ea\u8fd0\u884c\u4e86 add_one crate \u7684\u6d4b\u8bd5\u800c\u6ca1\u6709\u8fd0\u884c adder crate \u7684\u6d4b\u8bd5\u3002 \u5982\u679c\u4f60\u9009\u62e9\u5411 crates.io \u53d1\u5e03\u5de5\u4f5c\u7a7a\u95f4\u4e2d\u7684 crate\uff0c\u6bcf\u4e00\u4e2a\u5de5\u4f5c\u7a7a\u95f4\u4e2d\u7684 crate \u9700\u8981\u5355\u72ec\u53d1\u5e03\u3002 cargo publish \u547d\u4ee4\u5e76\u6ca1\u6709 --all \u6216\u8005 -p \u53c2\u6570\uff0c\u6240\u4ee5\u5fc5\u987b\u8fdb\u5165\u6bcf\u4e00\u4e2a crate \u7684\u76ee\u5f55\u5e76\u8fd0\u884c cargo publish \u6765\u53d1\u5e03\u5de5\u4f5c\u7a7a\u95f4\u4e2d\u7684\u6bcf\u4e00\u4e2a crate\u3002 \u73b0\u5728\u5c1d\u8bd5\u4ee5\u7c7b\u4f3c add_one crate \u7684\u65b9\u5f0f\u5411\u5de5\u4f5c\u7a7a\u95f4\u589e\u52a0 add_two crate \u6765\u4f5c\u4e3a\u66f4\u591a\u7684\u7ec3\u4e60\uff01 \u968f\u7740\u9879\u76ee\u589e\u957f\uff0c\u8003\u8651\u4f7f\u7528\u5de5\u4f5c\u7a7a\u95f4\uff1a\u6bcf\u4e00\u4e2a\u66f4\u5c0f\u7684\u7ec4\u4ef6\u6bd4\u4e00\u5927\u5757\u4ee3\u7801\u8981\u5bb9\u6613\u7406\u89e3\u3002\u5982\u679c\u5b83\u4eec\u7ecf\u5e38\u9700\u8981\u540c\u65f6\u88ab\u4fee\u6539\u7684\u8bdd\uff0c\u5c06 crate \u4fdd\u6301\u5728\u5de5\u4f5c\u7a7a\u95f4\u4e2d\u66f4\u6613\u4e8e\u534f\u8c03\u4ed6\u4eec\u7684\u6539\u53d8\u3002 cargo install cargo install \u547d\u4ee4\u7528\u4e8e\u5728\u672c\u5730\u5b89\u88c5\u548c\u4f7f\u7528\u4e8c\u8fdb\u5236 crate\u3002\u5b83\u5e76\u4e0d\u6253\u7b97\u66ff\u6362\u7cfb\u7edf\u4e2d\u7684\u5305\uff1b\u5b83\u610f\u5728\u4f5c\u4e3a\u4e00\u4e2a\u65b9\u4fbf Rust \u5f00\u53d1\u8005\u4eec\u5b89\u88c5\u5176\u4ed6\u4eba\u5df2\u7ecf\u5728 crates.io \u4e0a\u5171\u4eab\u7684\u5de5\u5177\u7684\u624b\u6bb5\u3002\u53ea\u6709\u62e5\u6709\u4e8c\u8fdb\u5236\u76ee\u6807\u6587\u4ef6\u7684\u5305\u80fd\u591f\u88ab\u5b89\u88c5\u3002 \u4e8c\u8fdb\u5236\u76ee\u6807 \u6587\u4ef6\u662f\u5728 crate \u6709 src/main.rs \u6216\u8005\u5176\u4ed6\u6307\u5b9a\u4e3a\u4e8c\u8fdb\u5236\u6587\u4ef6\u65f6\u6240\u521b\u5efa\u7684\u53ef\u6267\u884c\u7a0b\u5e8f\uff0c\u8fd9\u4e0d\u540c\u4e8e\u81ea\u8eab\u4e0d\u80fd\u6267\u884c\u4f46\u9002\u5408\u5305\u542b\u5728\u5176\u4ed6\u7a0b\u5e8f\u4e2d\u7684\u5e93\u76ee\u6807\u6587\u4ef6\u3002\u901a\u5e38 crate \u7684 README \u6587\u4ef6\u4e2d\u6709\u8be5 crate \u662f\u5e93\u3001\u4e8c\u8fdb\u5236\u76ee\u6807\u8fd8\u662f\u4e24\u8005\u90fd\u662f\u7684\u4fe1\u606f\u3002 \u6240\u6709\u6765\u81ea cargo install \u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\u90fd\u5b89\u88c5\u5230 Rust \u5b89\u88c5\u6839\u76ee\u5f55\u7684 bin \u6587\u4ef6\u5939\u4e2d\u3002\u5982\u679c\u4f60\u4f7f\u7528 rustup.rs \u5b89\u88c5\u7684 Rust \u4e14\u6ca1\u6709\u81ea\u5b9a\u4e49\u4efb\u4f55\u914d\u7f6e\uff0c\u8fd9\u5c06\u662f $HOME/.cargo/bin \u3002\u786e\u4fdd\u5c06\u8fd9\u4e2a\u76ee\u5f55\u6dfb\u52a0\u5230 $PATH \u73af\u5883\u53d8\u91cf\u4e2d\u5c31\u80fd\u591f\u8fd0\u884c\u901a\u8fc7 cargo install \u5b89\u88c5\u7684\u7a0b\u5e8f\u4e86\u3002 \u4f8b\u5982\uff0c\u7b2c\u5341\u4e8c\u7ae0\u63d0\u5230\u7684\u53eb\u505a ripgrep \u7684\u7528\u4e8e\u641c\u7d22\u6587\u4ef6\u7684 grep \u7684 Rust \u5b9e\u73b0\u3002\u5982\u679c\u60f3\u8981\u5b89\u88c5 ripgrep \uff0c\u53ef\u4ee5\u8fd0\u884c\u5982\u4e0b\uff1a $ cargo install ripgrep Updating crates.io index Downloaded ripgrep v11.0.2 Downloaded 1 crate (243.3 KB) in 0.88s Installing ripgrep v11.0.2 --snip-- Compiling ripgrep v11.0.2 Finished release [optimized + debuginfo] target(s) in 3m 10s Installing ~/.cargo/bin/rg Installed package `ripgrep v11.0.2` (executable `rg`) \u6700\u540e\u4e00\u884c\u8f93\u51fa\u5c55\u793a\u4e86\u5b89\u88c5\u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\u7684\u4f4d\u7f6e\u548c\u540d\u79f0\uff0c\u5728\u8fd9\u91cc ripgrep \u88ab\u547d\u540d\u4e3a rg \u3002\u53ea\u8981\u4f60\u50cf\u4e0a\u9762\u63d0\u5230\u7684\u90a3\u6837\u5c06\u5b89\u88c5\u76ee\u5f55\u52a0\u5165 $PATH \uff0c\u5c31\u53ef\u4ee5\u8fd0\u884c rg --help \u5e76\u5f00\u59cb\u4f7f\u7528\u4e00\u4e2a\u66f4\u5feb\u66f4 Rust \u7684\u5de5\u5177\u6765\u641c\u7d22\u6587\u4ef6\u4e86\uff01 \u81ea\u5b9a\u4e49\u6269\u5c55\u547d\u4ee4 Cargo \u7684\u8bbe\u8ba1\u4f7f\u5f97\u5f00\u53d1\u8005\u53ef\u4ee5\u901a\u8fc7\u65b0\u7684\u5b50\u547d\u4ee4\u6765\u5bf9 Cargo \u8fdb\u884c\u6269\u5c55\uff0c\u800c\u65e0\u9700\u4fee\u6539 Cargo \u672c\u8eab\u3002\u5982\u679c $PATH \u4e2d\u6709\u7c7b\u4f3c cargo-something \u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\uff0c\u5c31\u53ef\u4ee5\u901a\u8fc7 cargo something \u6765\u50cf Cargo \u5b50\u547d\u4ee4\u4e00\u6837\u8fd0\u884c\u5b83\u3002\u50cf\u8fd9\u6837\u7684\u81ea\u5b9a\u4e49\u547d\u4ee4\u4e5f\u53ef\u4ee5\u8fd0\u884c cargo --list \u6765\u5c55\u793a\u51fa\u6765\u3002\u80fd\u591f\u901a\u8fc7 cargo install \u5411 Cargo \u5b89\u88c5\u6269\u5c55\u5e76\u53ef\u4ee5\u5982\u5185\u5efa Cargo \u5de5\u5177\u90a3\u6837\u8fd0\u884c\u4ed6\u4eec\u662f Cargo \u8bbe\u8ba1\u4e0a\u7684\u4e00\u4e2a\u975e\u5e38\u65b9\u4fbf\u7684\u4f18\u70b9\uff01 \u603b\u7ed3 \u901a\u8fc7 Cargo \u548c crates.io \u6765\u5206\u4eab\u4ee3\u7801\u662f\u4f7f\u5f97 Rust \u751f\u6001\u73af\u5883\u53ef\u4ee5\u7528\u4e8e\u8bb8\u591a\u4e0d\u540c\u7684\u4efb\u52a1\u7684\u91cd\u8981\u7ec4\u6210\u90e8\u5206\u3002Rust \u7684\u6807\u51c6\u5e93\u662f\u5c0f\u800c\u7a33\u5b9a\u7684\uff0c\u4e0d\u8fc7 crate \u6613\u4e8e\u5206\u4eab\u548c\u4f7f\u7528\uff0c\u5e76\u91c7\u7528\u4e00\u4e2a\u4e0d\u540c\u8bed\u8a00\u81ea\u8eab\u7684\u65f6\u95f4\u7ebf\u6765\u63d0\u4f9b\u6539\u8fdb\u3002\u4e0d\u8981\u7f9e\u4e8e\u5728 crates.io \u4e0a\u5171\u4eab\u5bf9\u4f60\u6709\u7528\u7684\u4ee3\u7801\uff1b\u56e0\u4e3a\u5b83\u5f88\u6709\u53ef\u80fd\u5bf9\u522b\u4eba\u4e5f\u5f88\u6709\u7528\uff01","title":"Cargo \u548c Cargo.io"},{"location":"more-about-cargo/#cargo-cargoio","text":"\u76ee\u524d\u4e3a\u6b62\u6211\u4eec\u53ea\u4f7f\u7528\u8fc7 Cargo \u6784\u5efa\u3001\u8fd0\u884c\u548c\u6d4b\u8bd5\u4ee3\u7801\u8fd9\u4e9b\u6700\u57fa\u672c\u7684\u529f\u80fd\uff0c\u4e0d\u8fc7\u5b83\u8fd8\u53ef\u4ee5\u505a\u5230\u66f4\u591a\u3002\u672c\u7ae0\u4f1a\u8ba8\u8bba Cargo \u5176\u4ed6\u4e00\u4e9b\u66f4\u4e3a\u9ad8\u7ea7\u7684\u529f\u80fd\uff0c\u6211\u4eec\u5c06\u5c55\u793a\u5982\u4f55\uff1a \u4f7f\u7528\u53d1\u5e03\u914d\u7f6e\u6765\u81ea\u5b9a\u4e49\u6784\u5efa \u5c06\u5e93\u53d1\u5e03\u5230 crates.io \u4f7f\u7528\u5de5\u4f5c\u7a7a\u95f4\u6765\u7ec4\u7ec7\u66f4\u5927\u7684\u9879\u76ee \u4ece crates.io \u5b89\u88c5\u4e8c\u8fdb\u5236\u6587\u4ef6 \u4f7f\u7528\u81ea\u5b9a\u4e49\u7684\u547d\u4ee4\u6765\u6269\u5c55 Cargo Cargo \u7684\u529f\u80fd\u4e0d\u6b62\u672c\u7ae0\u6240\u4ecb\u7ecd\u7684\uff0c\u5173\u4e8e\u5176\u5168\u90e8\u529f\u80fd\u7684\u8be6\u5c3d\u89e3\u91ca\uff0c\u8bf7\u67e5\u770b \u6587\u6863","title":"Cargo \u548c Cargo.io"},{"location":"more-about-cargo/#_1","text":"\u5728 Rust \u4e2d \u53d1\u5e03\u914d\u7f6e \uff08release profiles\uff09\u662f\u9884\u5b9a\u4e49\u7684\u3001\u53ef\u5b9a\u5236\u7684\u5e26\u6709\u4e0d\u540c\u9009\u9879\u7684\u914d\u7f6e\uff0c\u4ed6\u4eec\u5141\u8bb8\u7a0b\u5e8f\u5458\u66f4\u7075\u6d3b\u5730\u63a7\u5236\u4ee3\u7801\u7f16\u8bd1\u7684\u591a\u79cd\u9009\u9879\u3002\u6bcf\u4e00\u4e2a\u914d\u7f6e\u90fd\u5f7c\u6b64\u76f8\u4e92\u72ec\u7acb\u3002 Cargo \u6709\u4e24\u4e2a\u4e3b\u8981\u7684\u914d\u7f6e\uff1a \u8fd0\u884c cargo build \u65f6\u91c7\u7528\u7684 dev \u914d\u7f6e \u548c\u8fd0\u884c cargo build --release \u7684 release \u914d\u7f6e \u3002 dev \u914d\u7f6e \u88ab\u5b9a\u4e49\u4e3a \u5f00\u53d1 \u65f6\u7684\u597d\u7684\u9ed8\u8ba4\u914d\u7f6e\uff0c release \u914d\u7f6e \u5219\u6709\u7740\u826f\u597d\u7684 \u53d1\u5e03\u6784\u5efa \u7684\u9ed8\u8ba4\u914d\u7f6e\u3002 \u8fd9\u4e9b\u914d\u7f6e\u540d\u79f0\u53ef\u80fd\u5f88\u773c\u719f\uff0c\u56e0\u4e3a\u5b83\u4eec\u51fa\u73b0\u5728\u6784\u5efa\u7684\u8f93\u51fa\u4e2d\uff1a $ cargo build Finished dev [ unoptimized + debuginfo ] target ( s ) in 0 .0s $ cargo build --release Finished release [ optimized ] target ( s ) in 0 .0s \u6784\u5efa\u8f93\u51fa\u4e2d\u7684 dev \u548c release \u8868\u660e\u7f16\u8bd1\u5668\u5728\u4f7f\u7528\u4e0d\u540c\u7684\u914d\u7f6e\u3002 \u5f53\u9879\u76ee\u7684 Cargo.toml \u6587\u4ef6\u4e2d\u6ca1\u6709\u4efb\u4f55 [profile.*] \u90e8\u5206\u7684\u65f6\u5019\uff0cCargo \u4f1a\u5bf9\u6bcf\u4e00\u4e2a\u914d\u7f6e\u90fd\u91c7\u7528\u9ed8\u8ba4\u8bbe\u7f6e\u3002\u901a\u8fc7\u589e\u52a0\u4efb\u4f55\u5e0c\u671b\u5b9a\u5236\u7684\u914d\u7f6e\u5bf9\u5e94\u7684 [profile.*] \u90e8\u5206\uff0c\u6211\u4eec\u53ef\u4ee5\u9009\u62e9\u8986\u76d6\u4efb\u610f\u9ed8\u8ba4\u8bbe\u7f6e\u7684\u5b50\u96c6\u3002\u4f8b\u5982\uff0c\u5982\u4e0b\u662f dev \u548c release \u914d\u7f6e\u7684 opt-level \u8bbe\u7f6e\u7684\u9ed8\u8ba4\u503c\uff1a # Cargo.toml # opt-level \u8bbe\u7f6e\u63a7\u5236 Rust \u4f1a\u5bf9\u4ee3\u7801\u8fdb\u884c\u4f55\u79cd\u7a0b\u5ea6\u7684\u4f18\u5316\u3002 # \u8fd9\u4e2a\u914d\u7f6e\u7684\u503c\u4ece 0 \u5230 3\u3002 [profile.dev] opt-level = 0 [profile.release] opt-level = 3 \u8d8a\u9ad8\u7684\u4f18\u5316\u7ea7\u522b\u9700\u8981\u66f4\u591a\u7684\u65f6\u95f4\u7f16\u8bd1\uff0c\u6240\u4ee5\u5982\u679c\u4f60\u5728\u8fdb\u884c\u5f00\u53d1\u5e76\u7ecf\u5e38\u7f16\u8bd1\uff0c\u53ef\u80fd\u4f1a\u5e0c\u671b\u5728\u727a\u7272\u4e00\u4e9b\u4ee3\u7801\u6027\u80fd\u7684\u60c5\u51b5\u4e0b\u7f16\u8bd1\u5f97\u5feb\u4e00\u4e9b\u3002\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48 dev \u7684 opt-level \u9ed8\u8ba4\u4e3a 0 \u3002 \u5f53\u4f60\u51c6\u5907\u53d1\u5e03\u65f6\uff0c\u82b1\u8d39\u66f4\u591a\u65f6\u95f4\u5728\u7f16\u8bd1\u4e0a\u5219\u66f4\u597d\u3002\u53ea\u9700\u8981\u5728\u53d1\u5e03\u6a21\u5f0f\u7f16\u8bd1\u4e00\u6b21\uff0c\u800c\u7f16\u8bd1\u51fa\u6765\u7684\u7a0b\u5e8f\u5219\u4f1a\u8fd0\u884c\u5f88\u591a\u6b21\uff0c\u6240\u4ee5\u53d1\u5e03\u6a21\u5f0f\u7528\u66f4\u957f\u7684\u7f16\u8bd1\u65f6\u95f4\u6362\u53d6\u8fd0\u884c\u66f4\u5feb\u7684\u4ee3\u7801\u3002\u8fd9\u6b63\u662f\u4e3a\u4ec0\u4e48 release \u914d\u7f6e\u7684 opt-level \u9ed8\u8ba4\u4e3a 3 \u3002 \u6211\u4eec\u53ef\u4ee5\u9009\u62e9\u901a\u8fc7\u5728 Cargo.toml \u589e\u52a0\u4e0d\u540c\u7684\u503c\u6765\u8986\u76d6\u4efb\u4f55\u9ed8\u8ba4\u8bbe\u7f6e\u3002\u6bd4\u5982\uff0c\u5982\u679c\u6211\u4eec\u60f3\u8981\u5728\u5f00\u53d1\u914d\u7f6e\u4e2d\u4f7f\u7528\u7ea7\u522b 1 \u7684\u4f18\u5316\uff0c\u5219\u53ef\u4ee5\u5728 Cargo.toml \u4e2d\u589e\u52a0\u8fd9\u4e24\u884c\uff1a # Cargo.toml [profile.dev] opt-level = 1 \u8fd9\u4f1a\u8986\u76d6\u9ed8\u8ba4\u7684\u8bbe\u7f6e 0 \u3002\u73b0\u5728\u8fd0\u884c cargo build \u65f6\uff0cCargo \u5c06\u4f1a\u4f7f\u7528 dev \u7684\u9ed8\u8ba4\u914d\u7f6e\u52a0\u4e0a\u5b9a\u5236\u7684 opt-level \u3002\u56e0\u4e3a opt-level \u8bbe\u7f6e\u4e3a 1 \uff0cCargo \u4f1a\u6bd4\u9ed8\u8ba4\u8fdb\u884c\u66f4\u591a\u7684\u4f18\u5316\uff0c\u4f46\u662f\u6ca1\u6709\u53d1\u5e03\u6784\u5efa\u90a3\u4e48\u591a\u3002 \u5bf9\u4e8e\u6bcf\u4e2a\u914d\u7f6e\u7684\u8bbe\u7f6e\u548c\u5176\u9ed8\u8ba4\u503c\u7684\u5b8c\u6574\u5217\u8868\uff0c\u8bf7\u67e5\u770b Cargo \u7684\u6587\u6863 \u3002","title":"\u53d1\u5e03\u6784\u5efa\u7684\u81ea\u5b9a\u4e49\u914d\u7f6e"},{"location":"more-about-cargo/#cratesio","text":"\u6211\u4eec\u66fe\u7ecf\u5728\u9879\u76ee\u4e2d\u4f7f\u7528 crates.io \u4e0a\u7684\u5305\u4f5c\u4e3a\u4f9d\u8d56\uff0c\u4e0d\u8fc7\u4f60\u4e5f\u53ef\u4ee5\u901a\u8fc7\u53d1\u5e03\u81ea\u5df1\u7684\u5305\u6765\u5411\u4ed6\u4eba\u5206\u4eab\u4ee3\u7801\u3002 crates.io \u7528\u6765\u5206\u53d1\u5305\u7684\u6e90\u4ee3\u7801\uff0c\u6240\u4ee5\u5b83\u4e3b\u8981\u6258\u7ba1\u5f00\u6e90\u4ee3\u7801\u3002 Rust \u548c Cargo \u6709\u4e00\u4e9b\u5e2e\u52a9\u4ed6\u4eba\u66f4\u65b9\u4fbf\u627e\u5230\u548c\u4f7f\u7528\u4f60\u53d1\u5e03\u7684\u5305\u7684\u529f\u80fd\u3002\u6211\u4eec\u5c06\u4ecb\u7ecd\u4e00\u4e9b\u8fd9\u6837\u7684\u529f\u80fd\uff0c\u63a5\u7740\u8bb2\u5230\u5982\u4f55\u53d1\u5e03\u4e00\u4e2a\u5305\u3002","title":"\u53d1\u5e03\u5230 Crates.io"},{"location":"more-about-cargo/#_2","text":"\u51c6\u786e\u7684\u5305\u6587\u6863\u6709\u52a9\u4e8e\u5176\u4ed6\u7528\u6237\u7406\u89e3\u5982\u4f55\u4ee5\u53ca\u4f55\u65f6\u4f7f\u7528\u4ed6\u4eec\uff0c\u6240\u4ee5\u82b1\u4e00\u4e9b\u65f6\u95f4\u7f16\u5199\u6587\u6863\u662f\u503c\u5f97\u7684\u3002 \u7b2c\u4e09\u7ae0\u4e2d\u6211\u4eec\u8ba8\u8bba\u4e86\u5982\u4f55\u4f7f\u7528\u4e24\u659c\u6760 // \u6ce8\u91ca Rust \u4ee3\u7801\u3002 Rust \u4e5f\u6709\u7279\u5b9a\u7684 \u7528\u4e8e\u6587\u6863\u7684\u6ce8\u91ca\u7c7b\u578b \uff0c\u901a\u5e38\u88ab\u79f0\u4e3a \u6587\u6863\u6ce8\u91ca \uff08documentation comments\uff09\uff0c\u4ed6\u4eec\u4f1a\u751f\u6210 HTML \u6587\u6863\u3002\u8fd9\u4e9b HTML \u5c55\u793a\u516c\u6709 API \u6587\u6863\u6ce8\u91ca\u7684\u5185\u5bb9\uff0c\u4ed6\u4eec\u610f\u5728\u8ba9\u5bf9\u5e93\u611f\u5174\u8da3\u7684\u7a0b\u5e8f\u5458\u7406\u89e3\u5982\u4f55 \u4f7f\u7528 \u8fd9\u4e2a crate\uff0c\u800c\u4e0d\u662f\u5b83\u662f\u5982\u4f55\u88ab \u5b9e\u73b0 \u7684\u3002 \u6587\u6863\u6ce8\u91ca\u4f7f\u7528\u4e09\u659c\u6760 /// \u800c\u4e0d\u662f\u4e24\u659c\u6746\u4ee5\u652f\u6301 Markdown \u6ce8\u89e3\u6765\u683c\u5f0f\u5316\u6587\u672c\u3002 \u6587\u6863\u6ce8\u91ca\u5c31\u4f4d\u4e8e\u9700\u8981\u6587\u6863\u7684\u9879\u7684\u4e4b\u524d\u3002\u793a\u4f8b\u5c55\u793a\u4e86\u4e00\u4e2a my_crate crate \u4e2d add_one \u51fd\u6570\u7684\u6587\u6863\u6ce8\u91ca\uff0c // \u4e00\u4e2a\u51fd\u6570\u7684\u6587\u6863\u6ce8\u91ca /// Adds one to the number given. /// /// # Examples /// /// ``` /// let arg = 5; /// let answer = my_crate::add_one(arg); /// /// assert_eq!(6, answer); /// ``` pub fn add_one ( x : i32 ) -> i32 { x + 1 } \u8fd9\u91cc\uff0c\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u4e2a add_one \u51fd\u6570\u5de5\u4f5c\u7684 \u63cf\u8ff0 \uff0c\u63a5\u7740\u5f00\u59cb\u4e86\u4e00\u4e2a\u6807\u9898\u4e3a Examples \u7684\u90e8\u5206\uff0c\u548c\u5c55\u793a\u5982\u4f55\u4f7f\u7528 add_one \u51fd\u6570\u7684\u4ee3\u7801\u3002\u53ef\u4ee5\u8fd0\u884c cargo doc \u6765\u751f\u6210\u8fd9\u4e2a\u6587\u6863\u6ce8\u91ca\u7684 HTML \u6587\u6863\u3002\u8fd9\u4e2a\u547d\u4ee4\u8fd0\u884c\u7531 Rust \u5206\u53d1\u7684\u5de5\u5177 rustdoc \u5e76\u5c06\u751f\u6210\u7684 HTML \u6587\u6863\u653e\u5165 target/doc \u76ee\u5f55\u3002 \u4e3a\u4e86\u65b9\u4fbf\u8d77\u89c1\uff0c\u8fd0\u884c cargo doc --open \u4f1a\u6784\u5efa\u5f53\u524d crate \u6587\u6863\uff08\u540c\u65f6\u8fd8\u6709\u6240\u6709 crate \u4f9d\u8d56\u7684\u6587\u6863\uff09\u7684 HTML \u5e76\u5728\u6d4f\u89c8\u5668\u4e2d\u6253\u5f00\u3002\u5bfc\u822a\u5230 add_one \u51fd\u6570\u5c06\u4f1a\u53d1\u73b0\u6587\u6863\u6ce8\u91ca\u7684\u6587\u672c\u662f\u5982\u4f55\u6e32\u67d3\u7684\uff0c","title":"\u7f16\u5199\u6709\u7528\u7684\u6587\u6863\u6ce8\u91ca"},{"location":"more-about-cargo/#_3","text":"\u793a\u4f8b\u4e2d\u4f7f\u7528\u4e86 # Examples Markdown \u6807\u9898\u5728 HTML \u4e2d\u521b\u5efa\u4e86\u4e00\u4e2a\u4ee5 \u201cExamples\u201d \u4e3a\u6807\u9898\u7684\u90e8\u5206\u3002\u5176\u4ed6\u4e00\u4e9b crate \u4f5c\u8005\u7ecf\u5e38\u5728\u6587\u6863\u6ce8\u91ca\u4e2d\u4f7f\u7528\u7684\u90e8\u5206\u6709\uff1a Panics \uff1a\u8fd9\u4e2a\u51fd\u6570\u53ef\u80fd\u4f1a panic! \u7684\u573a\u666f\u3002\u5e76\u4e0d\u5e0c\u671b\u7a0b\u5e8f\u5d29\u6e83\u7684\u51fd\u6570\u8c03\u7528\u8005\u5e94\u8be5\u786e\u4fdd\u4ed6\u4eec\u4e0d\u4f1a\u5728\u8fd9\u4e9b\u60c5\u51b5\u4e0b\u8c03\u7528\u6b64\u51fd\u6570\u3002 Errors \uff1a\u5982\u679c\u8fd9\u4e2a\u51fd\u6570\u8fd4\u56de Result \uff0c\u6b64\u90e8\u5206\u63cf\u8ff0\u53ef\u80fd\u4f1a\u51fa\u73b0\u4f55\u79cd\u9519\u8bef\u4ee5\u53ca\u4ec0\u4e48\u60c5\u51b5\u4f1a\u9020\u6210\u8fd9\u4e9b\u9519\u8bef\uff0c\u8fd9\u6709\u52a9\u4e8e\u8c03\u7528\u8005\u7f16\u5199\u4ee3\u7801\u6765\u91c7\u7528\u4e0d\u540c\u7684\u65b9\u5f0f\u5904\u7406\u4e0d\u540c\u7684\u9519\u8bef\u3002 Safety \uff1a\u5982\u679c\u8fd9\u4e2a\u51fd\u6570\u4f7f\u7528 unsafe \u4ee3\u7801\uff08\u8fd9\u4f1a\u5728\u7b2c\u5341\u4e5d\u7ae0\u8ba8\u8bba\uff09\uff0c\u8fd9\u4e00\u90e8\u5206\u5e94\u8be5\u4f1a\u6d89\u53ca\u5230\u671f\u671b\u51fd\u6570\u8c03\u7528\u8005\u652f\u6301\u7684\u786e\u4fdd unsafe \u5757\u4e2d\u4ee3\u7801\u6b63\u5e38\u5de5\u4f5c\u7684\u4e0d\u53d8\u6761\u4ef6\uff08invariants\uff09\u3002 \u5927\u90e8\u5206\u6587\u6863\u6ce8\u91ca\u4e0d\u9700\u8981\u6240\u6709\u8fd9\u4e9b\u90e8\u5206\uff0c\u4e0d\u8fc7\u8fd9\u662f\u4e00\u4e2a\u63d0\u9192\u4f60\u68c0\u67e5\u8c03\u7528\u4f60\u4ee3\u7801\u7684\u4eba\u6709\u5174\u8da3\u4e86\u89e3\u7684\u5185\u5bb9\u7684\u5217\u8868\u3002","title":"\u5e38\u7528\uff08\u6587\u6863\u6ce8\u91ca\uff09\u90e8\u5206"},{"location":"more-about-cargo/#_4","text":"\u5728\u6587\u6863\u6ce8\u91ca\u4e2d\u589e\u52a0\u793a\u4f8b\u4ee3\u7801\u5757\u662f\u4e00\u4e2a\u6e05\u695a\u7684\u8868\u660e\u5982\u4f55\u4f7f\u7528\u5e93\u7684\u65b9\u6cd5\uff0c\u8fd9\u4e48\u505a\u8fd8\u6709\u4e00\u4e2a\u989d\u5916\u7684\u597d\u5904\uff1a cargo test \u4e5f\u4f1a\u50cf\u6d4b\u8bd5\u90a3\u6837\u8fd0\u884c\u6587\u6863\u4e2d\u7684\u793a\u4f8b\u4ee3\u7801\uff01\u6ca1\u6709\u4ec0\u4e48\u6bd4\u6709\u4f8b\u5b50\u7684\u6587\u6863\u66f4\u597d\u7684\u4e86\uff0c\u4f46\u6700\u7cdf\u7cd5\u7684\u83ab\u8fc7\u4e8e\u5199\u5b8c\u6587\u6863\u540e\u6539\u52a8\u4e86\u4ee3\u7801\uff0c\u800c\u5bfc\u81f4\u4f8b\u5b50\u4e0d\u80fd\u6b63\u5e38\u5de5\u4f5c\u3002\u5c1d\u8bd5 cargo test \u8fd0\u884c\u50cf\u793a\u4f8b \u4e2d add_one \u51fd\u6570\u7684\u6587\u6863\uff1b\u5e94\u8be5\u5728\u6d4b\u8bd5\u7ed3\u679c\u4e2d\u770b\u5230\u50cf\u8fd9\u6837\u7684\u90e8\u5206\uff1a Doc-tests my_crate running 1 test test src/lib.rs - add_one ( line 5 ) ... ok test result: ok. 1 passed ; 0 failed ; 0 ignored ; 0 measured ; 0 filtered out ; finished in 0 .27s \u73b0\u5728\u5c1d\u8bd5\u6539\u53d8\u51fd\u6570\u6216\u4f8b\u5b50\u6765\u4f7f\u4f8b\u5b50\u4e2d\u7684 assert_eq! \u4ea7\u751f panic\u3002\u518d\u6b21\u8fd0\u884c cargo test \uff0c\u4f60\u5c06\u4f1a\u770b\u5230\u6587\u6863\u6d4b\u8bd5\u6355\u83b7\u5230\u4e86\u4f8b\u5b50\u4e0e\u4ee3\u7801\u4e0d\u518d\u540c\u6b65\uff01","title":"\u6587\u6863\u6ce8\u91ca\u4f5c\u4e3a\u6d4b\u8bd5"},{"location":"more-about-cargo/#_5","text":"\u8fd8\u6709\u53e6\u4e00\u79cd\u98ce\u683c\u7684\u6587\u6863\u6ce8\u91ca\uff0c //! \uff0c\u8fd9\u4e3a \u5305\u542b\u6ce8\u91ca\u7684\u9879 \uff0c\u800c\u4e0d\u662f\u4f4d\u4e8e\u6ce8\u91ca\u4e4b\u540e\u7684\u9879\u589e\u52a0\u6587\u6863\u3002\u8fd9\u901a\u5e38\u7528\u4e8e crate \u6839\u6587\u4ef6\uff08\u901a\u5e38\u662f src/lib.rs \uff09\u6216\u6a21\u5757\u7684\u6839\u6587\u4ef6\u4e3a crate \u6216\u6a21\u5757\u6574\u4f53\u63d0\u4f9b\u6587\u6863\u3002 \u4f5c\u4e3a\u4e00\u4e2a\u4f8b\u5b50\uff0c\u5982\u679c\u6211\u4eec\u5e0c\u671b\u589e\u52a0\u63cf\u8ff0\u5305\u542b add_one \u51fd\u6570\u7684 my_crate crate \u76ee\u7684\u7684\u6587\u6863\uff0c\u53ef\u4ee5\u5728 src/lib.rs \u5f00\u5934\u589e\u52a0\u4ee5 //! \u5f00\u5934\u7684\u6ce8\u91ca\uff0c\u5982\u793a\u4f8b\u6240\u793a\uff1a // src/lib.rs //! # My Crate //! //! `my_crate` is a collection of utilities to make performing certain //! calculations more convenient. /// Adds one to the number given. // --snip-- \u6ce8\u610f //! \u7684\u6700\u540e\u4e00\u884c\u4e4b\u540e\u6ca1\u6709\u4efb\u4f55\u4ee3\u7801\u3002\u56e0\u4e3a\u4ed6\u4eec\u4ee5 //! \u5f00\u5934\u800c\u4e0d\u662f /// \uff0c\u8fd9\u662f\u5c5e\u4e8e\u5305\u542b\u6b64\u6ce8\u91ca\u7684\u9879\u800c\u4e0d\u662f\u6ce8\u91ca\u4e4b\u540e\u9879\u7684\u6587\u6863\u3002\u5728\u8fd9\u4e2a\u60c5\u51b5\u4e2d\uff0c\u5305\u542b\u8fd9\u4e2a\u6ce8\u91ca\u7684\u9879\u662f src/lib.rs \u6587\u4ef6\uff0c\u4e5f\u5c31\u662f crate \u6839\u6587\u4ef6\u3002 \u8fd9\u4e9b\u6ce8\u91ca\u63cf\u8ff0\u4e86\u6574\u4e2a crate\u3002 \u5982\u679c\u8fd0\u884c cargo doc --open \uff0c\u5c06\u4f1a\u53d1\u73b0\u8fd9\u4e9b\u6ce8\u91ca\u663e\u793a\u5728 my_crate \u6587\u6863\u7684\u9996\u9875\uff0c\u4f4d\u4e8e crate \u4e2d\u516c\u6709\u9879\u5217\u8868\u4e4b\u4e0a\uff0c\u5982\u56fe\u6240\u793a\uff1a \u4f4d\u4e8e\u9879\u4e4b\u4e2d\u7684\u6587\u6863\u6ce8\u91ca\u5bf9\u4e8e \u63cf\u8ff0 crate \u548c\u6a21\u5757 \u7279\u522b\u6709\u7528\u3002\u4f7f\u7528\u4ed6\u4eec\u63cf\u8ff0\u5176\u5bb9\u5668\u6574\u4f53\u7684\u76ee\u7684\u6765\u5e2e\u52a9 crate \u7528\u6237\u7406\u89e3\u4f60\u7684\u4ee3\u7801\u7ec4\u7ec7\u3002","title":"\u6ce8\u91ca\u5305\u542b\u9879\u7684\u7ed3\u6784"},{"location":"more-about-cargo/#pub-use-api","text":"\u7b2c\u4e03\u7ae0\u4ecb\u7ecd\u4e86\u5982\u4f55\u4f7f\u7528 mod \u5173\u952e\u5b57\u6765\u5c06\u4ee3\u7801\u7ec4\u7ec7\u8fdb\u6a21\u5757\u4e2d\uff0c\u5982\u4f55\u4f7f\u7528 pub \u5173\u952e\u5b57\u5c06\u9879\u53d8\u4e3a\u516c\u6709\uff0c\u548c\u5982\u4f55\u4f7f\u7528 use \u5173\u952e\u5b57\u5c06\u9879\u5f15\u5165\u4f5c\u7528\u57df\u3002 \u7136\u800c\u4f60\u5f00\u53d1\u65f6\u5019\u4f7f\u7528\u7684\u6587\u4ef6\u67b6\u6784\u53ef\u80fd\u5e76\u4e0d\u65b9\u4fbf\u7528\u6237\u3002\u4f60\u7684\u7ed3\u6784\u53ef\u80fd\u662f\u4e00\u4e2a\u5305\u542b\u591a\u4e2a\u5c42\u7ea7\u7684\u5206\u5c42\u7ed3\u6784\uff0c\u4e0d\u8fc7\u8fd9\u5bf9\u4e8e\u7528\u6237\u6765\u8bf4\u5e76\u4e0d\u65b9\u4fbf\u3002 \u8fd9\u662f\u56e0\u4e3a\u60f3\u8981\u4f7f\u7528\u88ab\u5b9a\u4e49\u5728\u5f88\u6df1\u5c42\u7ea7\u4e2d\u7684\u7c7b\u578b\u7684\u4eba\u53ef\u80fd\u5f88\u96be\u53d1\u73b0\u8fd9\u4e9b\u7c7b\u578b\u7684\u5b58\u5728\u3002\u4ed6\u4eec\u4e5f\u53ef\u80fd\u4f1a\u538c\u70e6\u8981\u4f7f\u7528 use my_crate::some_module::another_module::UsefulType; \u800c\u4e0d\u662f use my_crate::UsefulType; \u6765\u4f7f\u7528\u7c7b\u578b\u3002 \u516c\u6709 API \u7684\u7ed3\u6784\u662f\u4f60\u53d1\u5e03 crate \u65f6\u4e3b\u8981\u9700\u8981\u8003\u8651\u7684\u3002crate \u7528\u6237\u6ca1\u6709\u4f60\u90a3\u4e48\u719f\u6089\u5176\u7ed3\u6784\uff0c\u5e76\u4e14\u5982\u679c\u6a21\u5757\u5c42\u7ea7\u8fc7\u5927\u4ed6\u4eec\u53ef\u80fd\u4f1a\u96be\u4ee5\u627e\u5230\u6240\u9700\u7684\u90e8\u5206\u3002 \u597d\u6d88\u606f\u662f\uff0c\u5373\u4f7f\u6587\u4ef6\u7ed3\u6784\u5bf9\u4e8e\u7528\u6237\u6765\u8bf4 \u4e0d\u662f \u5f88\u65b9\u4fbf\uff0c\u4f60\u4e5f\u65e0\u9700\u91cd\u65b0\u5b89\u6392\u5185\u90e8\u7ec4\u7ec7\uff1a\u4f60\u53ef\u4ee5\u9009\u62e9\u4f7f\u7528 pub use \u91cd\u5bfc\u51fa \uff08re-export\uff09\u9879\u6765\u4f7f\u516c\u6709\u7ed3\u6784\u4e0d\u540c\u4e8e\u79c1\u6709\u7ed3\u6784\u3002\u91cd\u5bfc\u51fa\u83b7\u53d6\u4f4d\u4e8e\u4e00\u4e2a\u4f4d\u7f6e\u7684\u516c\u6709\u9879\u5e76\u5c06\u5176\u516c\u5f00\u5230\u53e6\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u597d\u50cf\u5b83\u5c31\u5b9a\u4e49\u5728\u8fd9\u4e2a\u65b0\u4f4d\u7f6e\u4e00\u6837\u3002 \u4f8b\u5982\uff0c\u5047\u8bbe\u6211\u4eec\u521b\u5efa\u4e86\u4e00\u4e2a\u63cf\u8ff0\u7f8e\u672f\u4fe1\u606f\u7684\u5e93 art \u3002\u8fd9\u4e2a\u5e93\u4e2d\u5305\u542b\u4e86\u4e00\u4e2a\u6709\u4e24\u4e2a\u679a\u4e3e PrimaryColor \u548c SecondaryColor \u7684\u6a21\u5757 kinds \uff0c\u4ee5\u53ca\u4e00\u4e2a\u5305\u542b\u51fd\u6570 mix \u7684\u6a21\u5757 utils \uff0c\u5982\u793a\u4f8b\u6240\u793a\uff1a // \u4e00\u4e2a\u5e93 art \u5176\u7ec4\u7ec7\u5305\u542b kinds \u548c utils \u6a21\u5757 //! # Art //! //! A library for modeling artistic concepts. pub mod kinds { /// The primary colors according to the RYB color model. pub enum PrimaryColor { Red , Yellow , Blue , } /// The secondary colors according to the RYB color model. pub enum SecondaryColor { Orange , Green , Purple , } } pub mod utils { use crate :: kinds :: * ; /// Combines two primary colors in equal amounts to create /// a secondary color. pub fn mix ( c1 : PrimaryColor , c2 : PrimaryColor ) -> SecondaryColor { // --snip-- } } cargo doc \u6240\u751f\u6210\u7684 crate \u6587\u6863\u9996\u9875\u5982\u56fe\u6240\u793a\uff1a \u6ce8\u610f PrimaryColor \u548c SecondaryColor \u7c7b\u578b\u3001\u4ee5\u53ca mix \u51fd\u6570\u90fd\u6ca1\u6709\u5728\u9996\u9875\u4e2d\u5217\u51fa\u3002\u6211\u4eec\u5fc5\u987b\u70b9\u51fb kinds \u6216 utils \u624d\u80fd\u770b\u5230\u4ed6\u4eec\u3002 \u53e6\u4e00\u4e2a\u4f9d\u8d56\u8fd9\u4e2a\u5e93\u7684 crate \u9700\u8981 use \u8bed\u53e5\u6765\u5bfc\u5165 art \u4e2d\u7684\u9879\uff0c\u8fd9\u5305\u542b\u6307\u5b9a\u5176\u5f53\u524d\u5b9a\u4e49\u7684\u6a21\u5757\u7ed3\u6784\u3002\u793a\u4f8b\u5c55\u793a\u4e86\u4e00\u4e2a\u4f7f\u7528 art crate \u4e2d PrimaryColor \u548c mix \u9879\u7684 crate \u7684\u4f8b\u5b50\uff1a use art :: kinds :: PrimaryColor ; use art :: utils :: mix ; fn main () { let red = PrimaryColor :: Red ; let yellow = PrimaryColor :: Yellow ; mix ( red , yellow ); } \u793a\u4f8b\u4e2d\u4f7f\u7528 art crate \u4ee3\u7801\u7684\u4f5c\u8005\u4e0d\u5f97\u4e0d\u641e\u6e05\u695a PrimaryColor \u4f4d\u4e8e kinds \u6a21\u5757\u800c mix \u4f4d\u4e8e utils \u6a21\u5757\u3002 art crate \u7684\u6a21\u5757\u7ed3\u6784\u76f8\u6bd4\u4f7f\u7528\u5b83\u7684\u5f00\u53d1\u8005\u6765\u8bf4\u5bf9\u7f16\u5199\u5b83\u7684\u5f00\u53d1\u8005\u66f4\u6709\u610f\u4e49\u3002\u5176\u5185\u90e8\u7684 kinds \u6a21\u5757\u548c utils \u6a21\u5757\u7684\u7ec4\u7ec7\u7ed3\u6784\u5e76\u6ca1\u6709\u5bf9\u5c1d\u8bd5\u7406\u89e3\u5982\u4f55\u4f7f\u7528\u5b83\u7684\u4eba\u63d0\u4f9b\u4efb\u4f55\u6709\u4ef7\u503c\u7684\u4fe1\u606f\u3002 art crate \u7684\u6a21\u5757\u7ed3\u6784\u56e0\u4e0d\u5f97\u4e0d\u641e\u6e05\u695a\u6240\u9700\u7684\u5185\u5bb9\u5728\u4f55\u5904\u548c\u5fc5\u987b\u5728 use \u8bed\u53e5\u4e2d\u6307\u5b9a\u6a21\u5757\u540d\u79f0\u800c\u663e\u5f97\u6df7\u4e71\u548c\u4e0d\u4fbf\u3002 \u4e3a\u4e86\u4ece\u516c\u6709 API \u4e2d\u53bb\u6389 crate \u7684\u5185\u90e8\u7ec4\u7ec7\uff0c\u6211\u4eec\u53ef\u4ee5\u91c7\u7528\u4e0b\u9762\u793a\u4f8b\u4e2d\u7684 art crate \u5e76\u589e\u52a0 pub use \u8bed\u53e5\u6765\u91cd\u5bfc\u51fa\u9879\u5230\u9876\u5c42\u7ed3\u6784\uff0c\u6240\u793a\uff1a // src/lib.rs // \u589e\u52a0 pub use \u8bed\u53e5\u91cd\u5bfc\u51fa\u9879 //! # Art //! //! A library for modeling artistic concepts. pub use self :: kinds :: PrimaryColor ; pub use self :: kinds :: SecondaryColor ; pub use self :: utils :: mix ; pub mod kinds { // --snip-- } pub mod utils { // --snip-- } \u73b0\u5728\u6b64 crate \u7531 cargo doc \u751f\u6210\u7684 API \u6587\u6863\u4f1a\u5728\u9996\u9875\u5217\u51fa\u91cd\u5bfc\u51fa\u7684\u9879\u4ee5\u53ca\u5176\u94fe\u63a5\uff0c\u5982\u56fe \u6240\u793a\uff0c\u8fd9\u4f7f\u5f97 PrimaryColor \u548c SecondaryColor \u7c7b\u578b\u548c mix \u51fd\u6570\u66f4\u6613\u4e8e\u67e5\u627e\u3002 art crate \u7684\u7528\u6237\u4ecd\u7136\u53ef\u4ee5\u770b\u89c1\u548c\u9009\u62e9\u4f7f\u7528\u793a\u4f8b\u4e2d\u7684\u5185\u90e8\u7ed3\u6784\uff0c\u6216\u8005\u53ef\u4ee5\u4f7f\u7528\u66f4\u4e3a\u65b9\u4fbf\u7684\u7ed3\u6784\uff0c\u5982\u793a\u4f8b\u6240\u793a\uff1a use art :: mix ; use art :: PrimaryColor ; fn main () { // --snip-- } \u5bf9\u4e8e\u6709\u5f88\u591a\u5d4c\u5957\u6a21\u5757\u7684\u60c5\u51b5\uff0c\u4f7f\u7528 pub use \u5c06\u7c7b\u578b\u91cd\u5bfc\u51fa\u5230\u9876\u7ea7\u7ed3\u6784\u5bf9\u4e8e\u4f7f\u7528 crate \u7684\u4eba\u6765\u8bf4\u5c06\u4f1a\u662f\u5927\u4e3a\u4e0d\u540c\u7684\u4f53\u9a8c\u3002 \u521b\u5efa\u4e00\u4e2a\u6709\u7528\u7684\u516c\u6709 API \u7ed3\u6784\u66f4\u50cf\u662f \u4e00\u95e8\u827a\u672f\u800c\u975e\u79d1\u5b66 \uff0c\u4f60\u53ef\u4ee5\u53cd\u590d\u68c0\u89c6\u4ed6\u4eec\u6765\u627e\u51fa\u6700\u9002\u5408\u7528\u6237\u7684 API \u3002 pub use \u63d0\u4f9b\u4e86 \u89e3\u8026\u7ec4\u7ec7 crate \u5185\u90e8\u7ed3\u6784\u548c\u4e0e\u7ec8\u7aef\u7528\u6237\u4f53\u73b0\u7684\u7075\u6d3b\u6027\u3002\u89c2\u5bdf\u4e00\u4e9b\u4f60\u6240\u5b89\u88c5\u7684 crate \u7684\u4ee3\u7801\u6765\u770b\u770b\u5176\u5185\u90e8\u7ed3\u6784\u662f\u5426\u4e0d\u540c\u4e8e\u516c\u6709 API\u3002","title":"\u4f7f\u7528 pub use \u5bfc\u51fa\u5408\u9002\u7684\u516c\u6709 API"},{"location":"more-about-cargo/#cratesio_1","text":"\u5728\u4f60\u53ef\u4ee5\u53d1\u5e03\u4efb\u4f55 crate \u4e4b\u524d\uff0c\u9700\u8981\u5728 crates.io \u4e0a\u6ce8\u518c\u8d26\u53f7\u5e76\u83b7\u53d6\u4e00\u4e2a API token\u3002\u4e3a\u6b64\uff0c\u8bbf\u95ee\u4f4d\u4e8e crates.io \u7684\u9996\u9875\u5e76\u4f7f\u7528 GitHub \u8d26\u53f7\u767b\u5f55\u3002\uff08\u76ee\u524d GitHub \u8d26\u53f7\u662f\u5fc5\u987b\u7684\uff0c\u4e0d\u8fc7\u5c06\u6765\u8be5\u7f51\u7ad9\u53ef\u80fd\u4f1a\u652f\u6301\u5176\u4ed6\u521b\u5efa\u8d26\u53f7\u7684\u65b9\u6cd5\uff09\u4e00\u65e6\u767b\u5f55\u4e4b\u540e\uff0c\u67e5\u770b\u4f4d\u4e8e https://crates.io/me/ \u7684\u8d26\u6237\u8bbe\u7f6e\u9875\u9762\u5e76\u83b7\u53d6 API token\u3002\u63a5\u7740\u4f7f\u7528\u8be5 API token \u8fd0\u884c cargo login \u547d\u4ee4\uff0c\u50cf\u8fd9\u6837\uff1a cargo login abcdefghijklmnopqrstuvwxyz012345 \u8fd9\u4e2a\u547d\u4ee4\u4f1a\u901a\u77e5 Cargo \u4f60\u7684 API token \u5e76\u5c06\u5176\u50a8\u5b58\u5728\u672c\u5730\u7684 ~/.cargo/credentials \u6587\u4ef6\u4e2d\u3002\u6ce8\u610f\u8fd9\u4e2a token \u662f\u4e00\u4e2a \u79d8\u5bc6 \uff08secret\uff09\u4e14\u4e0d\u5e94\u8be5\u4e0e\u5176\u4ed6\u4eba\u5171\u4eab\u3002\u5982\u679c\u56e0\u4e3a\u4efb\u4f55\u539f\u56e0\u4e0e\u4ed6\u4eba\u5171\u4eab\u4e86\u8fd9\u4e2a\u4fe1\u606f\uff0c\u5e94\u8be5\u7acb\u5373\u5230 crates.io \u91cd\u65b0\u751f\u6210\u8fd9\u4e2a token\u3002","title":"\u521b\u5efa Crates.io \u8d26\u53f7"},{"location":"more-about-cargo/#crate","text":"\u6709\u4e86\u8d26\u53f7\u4e4b\u540e\uff0c\u6bd4\u5982\u8bf4\u4f60\u5df2\u7ecf\u6709\u4e00\u4e2a\u5e0c\u671b\u53d1\u5e03\u7684 crate\u3002\u5728\u53d1\u5e03\u4e4b\u524d\uff0c\u4f60\u9700\u8981\u5728 crate \u7684 Cargo.toml \u6587\u4ef6\u7684 [package] \u90e8\u5206\u589e\u52a0\u4e00\u4e9b\u672c crate \u7684\u5143\u4fe1\u606f\uff08metadata\uff09\u3002 \u9996\u5148 crate \u9700\u8981\u4e00\u4e2a\u552f\u4e00\u7684\u540d\u79f0\u3002\u867d\u7136\u5728\u672c\u5730\u5f00\u53d1 crate \u65f6\uff0c\u53ef\u4ee5\u4f7f\u7528\u4efb\u4f55\u4f60\u559c\u6b22\u7684\u540d\u79f0\u3002\u4e0d\u8fc7 crates.io \u4e0a\u7684 crate \u540d\u79f0\u9075\u5b88\u5148 \u5230\u5148\u5f97\u7684\u5206\u914d\u539f\u5219 \u3002\u4e00\u65e6\u67d0\u4e2a crate \u540d\u79f0\u88ab\u4f7f\u7528\uff0c\u5176\u4ed6\u4eba\u5c31\u4e0d\u80fd\u518d\u53d1\u5e03\u8fd9\u4e2a\u540d\u79f0\u7684 crate \u4e86\u3002\u8bf7\u5728\u7f51\u7ad9\u4e0a\u641c\u7d22\u4f60\u5e0c\u671b\u4f7f\u7528\u7684\u540d\u79f0\u6765\u627e\u51fa\u5b83\u662f\u5426\u5df2\u88ab\u4f7f\u7528\u3002\u5982\u679c\u6ca1\u6709\uff0c\u4fee\u6539 Cargo.toml \u4e2d [package] \u91cc\u7684\u540d\u79f0\u4e3a\u4f60\u5e0c\u671b\u7528\u4e8e\u53d1\u5e03\u7684\u540d\u79f0\uff0c\u50cf\u8fd9\u6837\uff1a # Cargo.toml [package] name = \"guessing_game\" \u5373\u4f7f\u4f60\u9009\u62e9\u4e86\u4e00\u4e2a\u552f\u4e00\u7684\u540d\u79f0\uff0c\u5982\u679c\u6b64\u65f6\u5c1d\u8bd5\u8fd0\u884c cargo publish \u53d1\u5e03\u8be5 crate \u7684\u8bdd\uff0c\u4f1a\u5f97\u5230\u4e00\u4e2a\u8b66\u544a\u63a5\u7740\u662f\u4e00\u4e2a\u9519\u8bef\uff1a $ cargo publish Updating crates.io index warning: manifest has no description, license, license-file, documentation, homepage or repository. See https://doc.rust-lang.org/cargo/reference/manifest.html#package-metadata for more info. --snip-- error: failed to publish to registry at https://crates.io Caused by: the remote server responded with an error: missing or empty metadata fields: description, license. Please see https://doc.rust-lang.org/cargo/reference/manifest.html for how to upload metadata \u8fd9\u662f\u56e0\u4e3a\u6211\u4eec\u7f3a\u5c11\u4e00\u4e9b\u5173\u952e\u4fe1\u606f\uff1a \u5173\u4e8e\u8be5 crate \u7528\u9014\u7684\u63cf\u8ff0\u548c\u7528\u6237\u53ef\u80fd\u5728\u4f55\u79cd\u6761\u6b3e\u4e0b\u4f7f\u7528\u8be5 crate \u7684 license\u3002\u4e3a\u4e86\u4fee\u6b63\u8fd9\u4e2a\u9519\u8bef\uff0c\u9700\u8981\u5728 Cargo.toml \u4e2d\u5f15\u5165\u8fd9\u4e9b\u4fe1\u606f\u3002 \u63cf\u8ff0\u901a\u5e38\u662f\u4e00\u4e24\u53e5\u8bdd\uff0c\u56e0\u4e3a\u5b83\u4f1a\u51fa\u73b0\u5728 crate \u7684\u641c\u7d22\u7ed3\u679c\u4e2d\u548c crate \u9875\u9762\u91cc\u3002\u5bf9\u4e8e license \u5b57\u6bb5\uff0c\u4f60\u9700\u8981\u4e00\u4e2a license \u6807\u8bc6\u7b26\u503c\uff08license identifier value\uff09\u3002Linux \u57fa\u91d1\u4f1a\u7684 Software Package Data Exchange (SPDX) \u5217\u51fa\u4e86\u53ef\u4ee5\u4f7f\u7528\u7684\u6807\u8bc6\u7b26\u3002\u4f8b\u5982\uff0c\u4e3a\u4e86\u6307\u5b9a crate \u4f7f\u7528 MIT License\uff0c\u589e\u52a0 MIT \u6807\u8bc6\u7b26\uff1a # Cargo.toml [package] name = \"guessing_game\" license = \"MIT\" \u5982\u679c\u4f60\u5e0c\u671b\u4f7f\u7528\u4e0d\u5b58\u5728\u4e8e SPDX \u7684 license\uff0c\u5219\u9700\u8981\u5c06 license \u6587\u672c\u653e\u5165\u4e00\u4e2a\u6587\u4ef6\uff0c\u5c06\u8be5\u6587\u4ef6\u5305\u542b\u8fdb\u9879\u76ee\u4e2d\uff0c\u63a5\u7740\u4f7f\u7528 license-file \u6765\u6307\u5b9a\u6587\u4ef6\u540d\u800c\u4e0d\u662f\u4f7f\u7528 license \u5b57\u6bb5\u3002 \u5173\u4e8e\u9879\u76ee\u6240\u9002\u7528\u7684 license \u6307\u5bfc\u8d85\u51fa\u4e86\u672c\u4e66\u7684\u8303\u7574\u3002\u5f88\u591a Rust \u793e\u533a\u6210\u5458\u9009\u62e9\u4e0e Rust \u81ea\u8eab\u76f8\u540c\u7684 license \uff0c\u8fd9\u662f\u4e00\u4e2a\u53cc\u8bb8\u53ef\u7684 MIT OR Apache-2.0 \u3002\u8fd9\u4e2a\u5b9e\u8df5\u5c55\u793a\u4e86\u4e5f\u53ef\u4ee5\u901a\u8fc7 OR \u5206\u9694\u4e3a\u9879\u76ee\u6307\u5b9a\u591a\u4e2a license \u6807\u8bc6\u7b26\u3002 \u90a3\u4e48\uff0c\u6709\u4e86 \u552f\u4e00\u7684\u540d\u79f0 \u3001 \u7248\u672c\u53f7 \u3001\u7531 cargo new \u65b0\u5efa\u9879\u76ee\u65f6\u589e\u52a0\u7684 \u4f5c\u8005\u4fe1\u606f \u3001 \u63cf\u8ff0 \u548c\u6240\u9009\u62e9\u7684 license \uff0c\u5df2\u7ecf\u51c6\u5907\u597d\u53d1\u5e03\u7684\u9879\u76ee\u7684 Cargo.toml \u6587\u4ef6\u53ef\u80fd\u770b\u8d77\u6765\u50cf\u8fd9\u6837\uff1a # Cargo.toml [package] name = \"guessing_game\" version = \"0.1.0\" edition = \"2021\" description = \"A fun game where you guess what number the computer has chosen.\" license = \"MIT OR Apache-2.0\" [dependencies] Cargo \u7684\u6587\u6863 \u63cf\u8ff0\u4e86\u5176\u4ed6\u53ef\u4ee5\u6307\u5b9a\u7684\u5143\u4fe1\u606f\uff0c\u4ed6\u4eec\u53ef\u4ee5\u5e2e\u52a9\u4f60\u7684 crate \u66f4\u5bb9\u6613\u88ab\u53d1\u73b0\u548c\u4f7f\u7528\uff01","title":"\u53d1\u5e03\u65b0 crate \u4e4b\u524d"},{"location":"more-about-cargo/#cratesio_2","text":"\u73b0\u5728\u6211\u4eec\u521b\u5efa\u4e86\u4e00\u4e2a\u8d26\u53f7\uff0c\u4fdd\u5b58\u4e86 API token\uff0c\u4e3a crate \u9009\u62e9\u4e86\u4e00\u4e2a\u540d\u5b57\uff0c\u5e76\u6307\u5b9a\u4e86\u6240\u9700\u7684\u5143\u6570\u636e\uff0c\u4f60\u5df2\u7ecf\u51c6\u5907\u597d\u53d1\u5e03\u4e86\uff01\u53d1\u5e03 crate \u4f1a\u4e0a\u4f20\u7279\u5b9a\u7248\u672c\u7684 crate \u5230 crates.io \u4ee5\u4f9b\u4ed6\u4eba\u4f7f\u7528\u3002 \u53d1\u5e03 crate \u65f6\u8bf7\u591a\u52a0\u5c0f\u5fc3\uff0c\u56e0\u4e3a\u53d1\u5e03\u662f \u6c38\u4e45\u6027\u7684 \uff08permanent\uff09\u3002\u5bf9\u5e94\u7248\u672c\u4e0d\u53ef\u80fd\u88ab\u8986\u76d6\uff0c\u5176\u4ee3\u7801\u4e5f\u4e0d\u53ef\u80fd\u88ab\u5220\u9664\u3002 crates.io \u7684\u4e00\u4e2a\u4e3b\u8981\u76ee\u6807\u662f\u4f5c\u4e3a\u4e00\u4e2a\u5b58\u50a8\u4ee3\u7801\u7684\u6c38\u4e45\u6587\u6863\u670d\u52a1\u5668\uff0c\u8fd9\u6837\u6240\u6709\u4f9d\u8d56 crates.io \u4e2d\u7684 crate \u7684\u9879\u76ee\u90fd\u80fd\u4e00\u76f4\u6b63\u5e38\u5de5\u4f5c\u3002\u800c\u5141\u8bb8\u5220\u9664\u7248\u672c\u6ca1\u529e\u6cd5\u8fbe\u6210\u8fd9\u4e2a\u76ee\u6807\u3002\u7136\u800c\uff0c\u53ef\u4ee5\u88ab\u53d1\u5e03\u7684\u7248\u672c\u53f7\u5374\u6ca1\u6709\u9650\u5236\u3002 \u518d\u6b21\u8fd0\u884c cargo publish \u547d\u4ee4\u3002\u8fd9\u6b21\u5b83\u5e94\u8be5\u4f1a\u6210\u529f\uff1a $ cargo publish Updating crates.io index Packaging guessing_game v0.1.0 ( file:///projects/guessing_game ) Verifying guessing_game v0.1.0 ( file:///projects/guessing_game ) Compiling guessing_game v0.1.0 ( file:///projects/guessing_game/target/package/guessing_game-0.1.0 ) Finished dev [ unoptimized + debuginfo ] target ( s ) in 0 .19s Uploading guessing_game v0.1.0 ( file:///projects/guessing_game ) \u606d\u559c\uff01\u4f60\u73b0\u5728\u5411 Rust \u793e\u533a\u5206\u4eab\u4e86\u4ee3\u7801\uff0c\u800c\u4e14\u4efb\u4f55\u4eba\u90fd\u53ef\u4ee5\u8f7b\u677e\u7684\u5c06\u4f60\u7684 crate \u52a0\u5165\u4ed6\u4eec\u9879\u76ee\u7684\u4f9d\u8d56\u3002","title":"\u53d1\u5e03\u5230Crates.io"},{"location":"more-about-cargo/#crate_1","text":"\u5f53\u4f60\u4fee\u6539\u4e86 crate \u5e76\u51c6\u5907\u597d\u53d1\u5e03\u65b0\u7248\u672c\u65f6\uff0c\u6539\u53d8 Cargo.toml \u4e2d version \u6240\u6307\u5b9a\u7684\u503c\u3002\u8bf7\u4f7f\u7528 \u8bed\u4e49\u5316\u7248\u672c\u89c4\u5219 \u6765\u6839\u636e\u4fee\u6539\u7684\u7c7b\u578b\u51b3\u5b9a\u4e0b\u4e00\u4e2a\u7248\u672c\u53f7\u3002\u63a5\u7740\u8fd0\u884c cargo publish \u6765\u4e0a\u4f20\u65b0\u7248\u672c\u3002","title":"\u53d1\u5e03\u73b0\u5b58 crate \u7684\u65b0\u7248\u672c"},{"location":"more-about-cargo/#cratesio_3","text":"\u867d\u7136\u4f60\u4e0d\u80fd\u5220\u9664\u4e4b\u524d\u7248\u672c\u7684 crate\uff0c\u4f46\u662f\u53ef\u4ee5\u963b\u6b62\u4efb\u4f55\u5c06\u6765\u7684\u9879\u76ee\u5c06\u4ed6\u4eec\u52a0\u5165\u5230\u4f9d\u8d56\u4e2d\u3002\u8fd9\u5728\u67d0\u4e2a\u7248\u672c\u56e0\u4e3a\u8fd9\u6837\u6216\u90a3\u6837\u7684\u539f\u56e0\u88ab\u7834\u574f\u7684\u60c5\u51b5\u5f88\u6709\u7528\u3002\u5bf9\u4e8e\u8fd9\u79cd\u60c5\u51b5\uff0cCargo \u652f\u6301 \u64a4\u56de \uff08yanking\uff09\u67d0\u4e2a\u7248\u672c\u3002 \u64a4\u56de\u67d0\u4e2a\u7248\u672c\u4f1a\u963b\u6b62\u65b0\u9879\u76ee\u5f00\u59cb\u4f9d\u8d56\u6b64\u7248\u672c\uff0c\u4e0d\u8fc7\u6240\u6709\u73b0\u5b58\u6b64\u4f9d\u8d56\u7684\u9879\u76ee\u4ecd\u7136\u80fd\u591f\u4e0b\u8f7d\u548c\u4f9d\u8d56\u8fd9\u4e2a\u7248\u672c\u3002\u4ece\u672c\u8d28\u4e0a\u8bf4\uff0c\u64a4\u56de\u610f\u5473\u7740\u6240\u6709\u5e26\u6709 Cargo.lock \u7684\u9879\u76ee\u7684\u4f9d\u8d56\u4e0d\u4f1a\u88ab\u7834\u574f\uff0c\u540c\u65f6\u4efb\u4f55\u65b0\u751f\u6210\u7684 Cargo.lock \u5c06\u4e0d\u80fd\u4f7f\u7528\u88ab\u64a4\u56de\u7684\u7248\u672c\u3002 \u4e3a\u4e86\u64a4\u56de\u4e00\u4e2a crate\uff0c\u8fd0\u884c cargo yank \u5e76\u6307\u5b9a\u5e0c\u671b\u64a4\u56de\u7684\u7248\u672c\uff1a cargo yank --vers 1 .0.1 \u4e5f\u53ef\u4ee5\u64a4\u9500\u64a4\u56de\u64cd\u4f5c\uff0c\u5e76\u5141\u8bb8\u9879\u76ee\u53ef\u4ee5\u518d\u6b21\u5f00\u59cb\u4f9d\u8d56\u67d0\u4e2a\u7248\u672c\uff0c\u901a\u8fc7\u5728\u547d\u4ee4\u4e0a\u589e\u52a0 --undo \uff1a cargo yank --vers 1 .0.1 --undo \u64a4\u56de \u5e76\u6ca1\u6709 \u5220\u9664\u4efb\u4f55\u4ee3\u7801\u3002\u4e3e\u4f8b\u6765\u8bf4\uff0c\u64a4\u56de\u529f\u80fd\u5e76\u4e0d\u610f\u5728\u5220\u9664\u4e0d\u5c0f\u5fc3\u4e0a\u4f20\u7684\u79d8\u5bc6\u4fe1\u606f\u3002\u5982\u679c\u51fa\u73b0\u4e86\u8fd9\u79cd\u60c5\u51b5\uff0c\u8bf7\u7acb\u5373\u91cd\u65b0\u8bbe\u7f6e\u8fd9\u4e9b\u79d8\u5bc6\u4fe1\u606f\u3002","title":"\u4ece Crates.io \u64a4\u56de\u7248\u672c"},{"location":"more-about-cargo/#cargo","text":"\u7b2c\u5341\u4e8c\u7ae0\u4e2d\uff0c\u6211\u4eec\u6784\u5efa\u4e00\u4e2a\u5305\u542b\u4e8c\u8fdb\u5236 crate \u548c\u5e93 crate \u7684\u5305\u3002\u4f60\u53ef\u80fd\u4f1a\u53d1\u73b0\uff0c\u968f\u7740\u9879\u76ee\u5f00\u53d1\u7684\u6df1\u5165\uff0c\u5e93 crate \u6301\u7eed\u589e\u5927\uff0c\u800c\u4f60\u5e0c\u671b\u5c06\u5176\u8fdb\u4e00\u6b65\u62c6\u5206\u6210\u591a\u4e2a\u5e93 crate\u3002\u5bf9\u4e8e\u8fd9\u79cd\u60c5\u51b5\uff0cCargo \u63d0\u4f9b\u4e86\u4e00\u4e2a\u53eb \u5de5\u4f5c\u7a7a\u95f4 \uff08workspaces\uff09\u7684\u529f\u80fd\uff0c\u5b83\u53ef\u4ee5\u5e2e\u52a9\u6211\u4eec\u7ba1\u7406\u591a\u4e2a\u76f8\u5173\u7684\u534f\u540c\u5f00\u53d1\u7684\u5305\u3002 \u5de5\u4f5c\u7a7a\u95f4 \u662f\u4e00\u7cfb\u5217\u5171\u4eab\u540c\u6837\u7684 Cargo.lock \u548c\u8f93\u51fa\u76ee\u5f55\u7684\u5305\u3002\u8ba9\u6211\u4eec\u4f7f\u7528\u5de5\u4f5c\u7a7a\u95f4\u521b\u5efa\u4e00\u4e2a\u9879\u76ee \u2014\u2014 \u8fd9\u91cc\u91c7\u7528\u5e38\u89c1\u7684\u4ee3\u7801\u4ee5\u4fbf\u53ef\u4ee5\u5173\u6ce8\u5de5\u4f5c\u7a7a\u95f4\u7684\u7ed3\u6784\u3002\u6709\u591a\u79cd\u7ec4\u7ec7\u5de5\u4f5c\u7a7a\u95f4\u7684\u65b9\u5f0f\uff1b\u6211\u4eec\u5c06\u5c55\u793a\u4e00\u4e2a\u5e38\u7528\u65b9\u6cd5\u3002\u6211\u4eec\u7684\u5de5\u4f5c\u7a7a\u95f4\u6709\u4e00\u4e2a\u4e8c\u8fdb\u5236\u9879\u76ee\u548c\u4e24\u4e2a\u5e93\u3002\u4e8c\u8fdb\u5236\u9879\u76ee\u4f1a\u63d0\u4f9b\u4e3b\u8981\u529f\u80fd\uff0c\u5e76\u4f1a\u4f9d\u8d56\u53e6\u4e24\u4e2a\u5e93\u3002\u4e00\u4e2a\u5e93\u4f1a\u63d0\u4f9b add_one \u65b9\u6cd5\u800c\u7b2c\u4e8c\u4e2a\u4f1a\u63d0\u4f9b add_two \u65b9\u6cd5\u3002\u8fd9\u4e09\u4e2a crate \u5c06\u4f1a\u662f\u76f8\u540c\u5de5\u4f5c\u7a7a\u95f4\u7684\u4e00\u90e8\u5206\u3002\u8ba9\u6211\u4eec\u4ee5\u65b0\u5efa\u5de5\u4f5c\u7a7a\u95f4\u76ee\u5f55\u5f00\u59cb\uff1a mkdir add cd add \u63a5\u7740\u5728 add \u76ee\u5f55\u4e2d\uff0c\u521b\u5efa Cargo.toml \u6587\u4ef6\u3002\u8fd9\u4e2a Cargo.toml \u6587\u4ef6\u914d\u7f6e\u4e86\u6574\u4e2a\u5de5\u4f5c\u7a7a\u95f4\u3002\u5b83\u4e0d\u4f1a\u5305\u542b [package] \u6216\u5176\u4ed6\u6211\u4eec\u5728 Cargo.toml \u4e2d\u89c1\u8fc7\u7684\u5143\u4fe1\u606f\u3002\u76f8\u53cd\uff0c\u5b83\u4ee5 [workspace] \u90e8\u5206\u4f5c\u4e3a\u5f00\u59cb\uff0c\u5e76\u901a\u8fc7\u6307\u5b9a adder \u7684\u8def\u5f84\u6765\u4e3a\u5de5\u4f5c\u7a7a\u95f4\u589e\u52a0\u6210\u5458\uff0c\u5982\u4e0b\u4f1a\u52a0\u5165\u4e8c\u8fdb\u5236 crate\uff1a \u6587\u4ef6\u540d: Cargo.toml [workspace] members = [ \"adder\" , ] \u63a5\u4e0b\u6765\uff0c\u5728 add \u76ee\u5f55\u8fd0\u884c cargo new \u65b0\u5efa adder \u4e8c\u8fdb\u5236 crate\uff1a $ cargo new adder Created binary (application) `adder` package \u5230\u6b64\u4e3a\u6b62\uff0c\u53ef\u4ee5\u8fd0\u884c cargo build \u6765\u6784\u5efa\u5de5\u4f5c\u7a7a\u95f4\u3002 add \u76ee\u5f55\u4e2d\u7684\u6587\u4ef6\u5e94\u8be5\u770b\u8d77\u6765\u50cf\u8fd9\u6837\uff1a \u251c\u2500\u2500 Cargo.lock \u251c\u2500\u2500 Cargo.toml \u251c\u2500\u2500 adder \u2502 \u251c\u2500\u2500 Cargo.toml \u2502 \u2514\u2500\u2500 src \u2502 \u2514\u2500\u2500 main.rs \u2514\u2500\u2500 target \u5de5\u4f5c\u7a7a\u95f4\u5728\u9876\u7ea7\u76ee\u5f55\u6709\u4e00\u4e2a target \u76ee\u5f55\uff1b adder \u5e76\u6ca1\u6709\u81ea\u5df1\u7684 target \u76ee\u5f55\u3002\u5373\u4f7f\u8fdb\u5165 adder \u76ee\u5f55\u8fd0\u884c cargo build \uff0c\u6784\u5efa\u7ed3\u679c\u4e5f\u4f4d\u4e8e add/target \u800c\u4e0d\u662f add/adder/target \u3002\u5de5\u4f5c\u7a7a\u95f4\u4e2d\u7684 crate \u4e4b\u95f4\u76f8\u4e92\u4f9d\u8d56\u3002\u5982\u679c\u6bcf\u4e2a crate \u6709\u5176\u81ea\u5df1\u7684 target \u76ee\u5f55\uff0c\u4e3a\u4e86\u5728\u81ea\u5df1\u7684 target \u76ee\u5f55\u4e2d\u751f\u6210\u6784\u5efa\u7ed3\u679c\uff0c\u5de5\u4f5c\u7a7a\u95f4\u4e2d\u7684\u6bcf\u4e00\u4e2a crate \u90fd\u4e0d\u5f97\u4e0d\u76f8\u4e92\u91cd\u65b0\u7f16\u8bd1\u5176\u4ed6 crate\u3002\u901a\u8fc7\u5171\u4eab\u4e00\u4e2a target \u76ee\u5f55\uff0c\u5de5\u4f5c\u7a7a\u95f4\u53ef\u4ee5\u907f\u514d\u5176\u4ed6 crate \u591a\u4f59\u7684\u91cd\u590d\u6784\u5efa\u3002","title":"Cargo \u5de5\u4f5c\u7a7a\u95f4"},{"location":"more-about-cargo/#_6","text":"\u63a5\u4e0b\u6765\uff0c\u8ba9\u6211\u4eec\u5728\u5de5\u4f5c\u7a7a\u95f4\u4e2d\u6307\u5b9a\u53e6\u4e00\u4e2a\u6210\u5458 crate\u3002\u8fd9\u4e2a crate \u4f4d\u4e8e add_one \u76ee\u5f55\u4e2d\uff0c\u6240\u4ee5\u4fee\u6539\u9876\u7ea7 Cargo.toml \u4e3a\u4e5f\u5305\u542b add_one \u8def\u5f84\uff1a \u6587\u4ef6\u540d: Cargo.toml [workspace] members = [ \"adder\" , \"add_one\" , ] \u63a5\u7740\u65b0\u751f\u6210\u4e00\u4e2a\u53eb\u505a add_one \u7684\u5e93\uff1a $ cargo new add_one --lib Created library `add_one` package \u73b0\u5728 add \u76ee\u5f55\u5e94\u8be5\u6709\u5982\u4e0b\u76ee\u5f55\u548c\u6587\u4ef6\uff1a \u251c\u2500\u2500 Cargo.lock \u251c\u2500\u2500 Cargo.toml \u251c\u2500\u2500 add_one \u2502 \u251c\u2500\u2500 Cargo.toml \u2502 \u2514\u2500\u2500 src \u2502 \u2514\u2500\u2500 lib.rs \u251c\u2500\u2500 adder \u2502 \u251c\u2500\u2500 Cargo.toml \u2502 \u2514\u2500\u2500 src \u2502 \u2514\u2500\u2500 main.rs \u2514\u2500\u2500 target \u5728 add_one/src/lib.rs \u6587\u4ef6\u4e2d\uff0c\u589e\u52a0\u4e00\u4e2a add_one \u51fd\u6570\uff1a \u6587\u4ef6\u540d: add_one/src/lib.rs pub fn add_one ( x : i32 ) -> i32 { x + 1 } \u73b0\u5728\u5de5\u4f5c\u7a7a\u95f4\u4e2d\u6709\u4e86\u4e00\u4e2a\u5e93 crate\uff0c\u8ba9 adder \u4f9d\u8d56\u5e93 crate add_one \u3002\u9996\u5148\u9700\u8981\u5728 adder/Cargo.toml \u6587\u4ef6\u4e2d\u589e\u52a0 add_one \u4f5c\u4e3a\u8def\u5f84\u4f9d\u8d56\uff1a \u6587\u4ef6\u540d: adder/Cargo.toml [dependencies] add_one = { path = \"../add_one\" } cargo\u5e76\u4e0d\u5047\u5b9a\u5de5\u4f5c\u7a7a\u95f4\u4e2d\u7684Crates\u4f1a\u76f8\u4e92\u4f9d\u8d56\uff0c\u6240\u4ee5\u9700\u8981\u660e\u786e\u8868\u660e\u5de5\u4f5c\u7a7a\u95f4\u4e2d crate \u7684\u4f9d\u8d56\u5173\u7cfb\u3002 \u63a5\u4e0b\u6765\uff0c\u5728 adder crate \u4e2d\u4f7f\u7528 add_one crate \u7684\u51fd\u6570 add_one \u3002\u6253\u5f00 adder/src/main.rs \u5728\u9876\u90e8\u589e\u52a0\u4e00\u884c use \u5c06\u65b0 add_one \u5e93 crate \u5f15\u5165\u4f5c\u7528\u57df\u3002\u63a5\u7740\u4fee\u6539 main \u51fd\u6570\u6765\u8c03\u7528 add_one \u51fd\u6570\uff0c\u5982\u793a\u4f8b 14-7 \u6240\u793a\u3002 \u6587\u4ef6\u540d: adder/src/main.rs use add_one ; fn main () { let num = 10 ; println! ( \"Hello, world! {} plus one is {}!\" , num , add_one :: add_one ( num ) ); } \u793a\u4f8b 14-7\uff1a\u5728 adder crate \u4e2d\u4f7f\u7528 add_one \u5e93 crate \u5728 add \u76ee\u5f55\u4e2d\u8fd0\u884c cargo build \u6765\u6784\u5efa\u5de5\u4f5c\u7a7a\u95f4\uff01 $ cargo build Compiling add_one v0.1.0 (file:///projects/add/add_one) Compiling adder v0.1.0 (file:///projects/add/adder) Finished dev [unoptimized + debuginfo] target(s) in 0.68s \u4e3a\u4e86\u5728\u9876\u5c42 add \u76ee\u5f55\u8fd0\u884c\u4e8c\u8fdb\u5236 crate\uff0c\u53ef\u4ee5\u901a\u8fc7 -p \u53c2\u6570\u548c\u5305\u540d\u79f0\u6765\u8fd0\u884c cargo run \u6307\u5b9a\u5de5\u4f5c\u7a7a\u95f4\u4e2d\u6211\u4eec\u5e0c\u671b\u4f7f\u7528\u7684\u5305\uff1a $ cargo run -p adder Finished dev [unoptimized + debuginfo] target(s) in 0.0s Running `target/debug/adder` Hello, world! 10 plus one is 11! \u8fd9\u4f1a\u8fd0\u884c adder/src/main.rs \u4e2d\u7684\u4ee3\u7801\uff0c\u5176\u4f9d\u8d56 add_one crate","title":"\u5728\u5de5\u4f5c\u7a7a\u95f4\u4e2d\u521b\u5efa\u7b2c\u4e8c\u4e2a\u5305"},{"location":"more-about-cargo/#_7","text":"\u8fd8\u9700\u6ce8\u610f\u7684\u662f\u5de5\u4f5c\u7a7a\u95f4\u53ea\u5728\u6839\u76ee\u5f55\u6709\u4e00\u4e2a Cargo.lock \uff0c\u800c\u4e0d\u662f\u5728\u6bcf\u4e00\u4e2a crate \u76ee\u5f55\u90fd\u6709 Cargo.lock \u3002\u8fd9\u786e\u4fdd\u4e86\u6240\u6709\u7684 crate \u90fd\u4f7f\u7528\u5b8c\u5168\u76f8\u540c\u7248\u672c\u7684\u4f9d\u8d56\u3002\u5982\u679c\u5728 Cargo.toml \u548c add_one/Cargo.toml \u4e2d\u90fd\u589e\u52a0 rand crate\uff0c\u5219 Cargo \u4f1a\u5c06\u5176\u90fd\u89e3\u6790\u4e3a\u540c\u4e00\u7248\u672c\u5e76\u8bb0\u5f55\u5230\u552f\u4e00\u7684 Cargo.lock \u4e2d\u3002\u4f7f\u5f97\u5de5\u4f5c\u7a7a\u95f4\u4e2d\u7684\u6240\u6709 crate \u90fd\u4f7f\u7528\u76f8\u540c\u7684\u4f9d\u8d56\u610f\u5473\u7740\u5176\u4e2d\u7684 crate \u90fd\u662f\u76f8\u4e92\u517c\u5bb9\u7684\u3002\u8ba9\u6211\u4eec\u5728 add_one/Cargo.toml \u4e2d\u7684 [dependencies] \u90e8\u5206\u589e\u52a0 rand crate \u4ee5\u4fbf\u80fd\u591f\u5728 add_one crate \u4e2d\u4f7f\u7528 rand crate\uff1a \u6587\u4ef6\u540d: add_one/Cargo.toml [dependencies] rand = \"0.8.3\" \u73b0\u5728\u5c31\u53ef\u4ee5\u5728 add_one/src/lib.rs \u4e2d\u589e\u52a0 use rand; \u4e86\uff0c\u63a5\u7740\u5728 add \u76ee\u5f55\u8fd0\u884c cargo build \u6784\u5efa\u6574\u4e2a\u5de5\u4f5c\u7a7a\u95f4\u5c31\u4f1a\u5f15\u5165\u5e76\u7f16\u8bd1 rand crate\uff1a $ cargo build Updating crates.io index Downloaded rand v0.8.3 --snip-- Compiling rand v0.8.3 Compiling add_one v0.1.0 (file:///projects/add/add_one) warning: unused import: `rand` --> add_one/src/lib.rs:1:5 | 1 | use rand; | ^^^^ | = note: `#[warn(unused_imports)]` on by default warning: 1 warning emitted Compiling adder v0.1.0 (file:///projects/add/adder) Finished dev [unoptimized + debuginfo] target(s) in 10.18s \u73b0\u5728\u9876\u7ea7\u7684 Cargo.lock \u5305\u542b\u4e86 add_one \u7684 rand \u4f9d\u8d56\u7684\u4fe1\u606f\u3002\u7136\u800c\uff0c\u5373\u4f7f rand \u88ab\u7528\u4e8e\u5de5\u4f5c\u7a7a\u95f4\u7684\u67d0\u5904\uff0c\u4e5f\u4e0d\u80fd\u5728\u5176\u4ed6 crate \u4e2d\u4f7f\u7528\u5b83\uff0c\u9664\u975e\u4e5f\u5728\u4ed6\u4eec\u7684 Cargo.toml \u4e2d\u52a0\u5165 rand \u3002\u4f8b\u5982\uff0c\u5982\u679c\u5728\u9876\u7ea7\u7684 adder crate \u7684 adder/src/main.rs \u4e2d\u589e\u52a0 use rand; \uff0c\u4f1a\u5f97\u5230\u4e00\u4e2a\u9519\u8bef\uff1a $ cargo build --snip-- Compiling adder v0.1.0 (file:///projects/add/adder) error[E0432]: unresolved import `rand` --> adder/src/main.rs:2:5 | 2 | use rand; | ^^^^ no external crate `rand` \u4e3a\u4e86\u4fee\u590d\u8fd9\u4e2a\u9519\u8bef\uff0c\u4fee\u6539\u9876\u7ea7 adder crate \u7684 Cargo.toml \u6765\u8868\u660e rand \u4e5f\u662f\u8fd9\u4e2a crate \u7684\u4f9d\u8d56\u3002\u6784\u5efa adder crate \u4f1a\u5c06 rand \u52a0\u5165\u5230 Cargo.lock \u4e2d adder \u7684\u4f9d\u8d56\u5217\u8868\u4e2d\uff0c\u4f46\u662f\u8fd9\u5e76\u4e0d\u4f1a\u4e0b\u8f7d rand \u7684\u989d\u5916\u62f7\u8d1d\u3002Cargo \u786e\u4fdd\u4e86\u5de5\u4f5c\u7a7a\u95f4\u4e2d\u4efb\u4f55\u4f7f\u7528 rand \u7684 crate \u90fd\u91c7\u7528\u76f8\u540c\u7684\u7248\u672c\u3002\u5728\u6574\u4e2a\u5de5\u4f5c\u7a7a\u95f4\u4e2d\u4f7f\u7528\u76f8\u540c\u7248\u672c\u7684 rand \u8282\u7701\u4e86\u7a7a\u95f4\uff0c\u56e0\u4e3a\u8fd9\u6837\u5c31\u65e0\u9700\u591a\u4e2a\u62f7\u8d1d\u5e76\u786e\u4fdd\u4e86\u5de5\u4f5c\u7a7a\u95f4\u4e2d\u7684 crate \u5c06\u662f\u76f8\u4e92\u517c\u5bb9\u7684\u3002","title":"\u5728\u5de5\u4f5c\u7a7a\u95f4\u4e2d\u4f9d\u8d56\u5916\u90e8\u5305"},{"location":"more-about-cargo/#_8","text":"\u4f5c\u4e3a\u53e6\u4e00\u4e2a\u63d0\u5347\uff0c\u8ba9\u6211\u4eec\u4e3a add_one crate \u4e2d\u7684 add_one::add_one \u51fd\u6570\u589e\u52a0\u4e00\u4e2a\u6d4b\u8bd5\uff1a \u6587\u4ef6\u540d: add_one/src/lib.rs pub fn add_one ( x : i32 ) -> i32 { x + 1 } #[cfg(test)] mod tests { use super :: * ; #[test] fn it_works () { assert_eq! ( 3 , add_one ( 2 )); } } \u5728\u9876\u7ea7 add \u76ee\u5f55\u8fd0\u884c cargo test \uff1a $ cargo test Compiling add_one v0.1.0 (file:///projects/add/add_one) Compiling adder v0.1.0 (file:///projects/add/adder) Finished test [unoptimized + debuginfo] target(s) in 0.27s Running target/debug/deps/add_one-f0253159197f7841 running 1 test test tests::it_works ... ok test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s Running target/debug/deps/adder-49979ff40686fa8e running 0 tests test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s Doc-tests add_one running 0 tests test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s \u8f93\u51fa\u7684\u7b2c\u4e00\u90e8\u5206\u663e\u793a add_one crate \u7684 it_workstests \u6d4b\u8bd5\u901a\u8fc7\u4e86\u3002\u4e0b\u4e00\u4e2a\u90e8\u5206\u663e\u793a adder crate \u4e2d\u627e\u5230\u4e86 0 \u4e2a\u6d4b\u8bd5\uff0c\u6700\u540e\u4e00\u90e8\u5206\u663e\u793a add_one crate \u4e2d\u6709 0 \u4e2a\u6587\u6863\u6d4b\u8bd5\u3002\u5728\u50cf\u8fd9\u6837\u7684\u5de5\u4f5c\u7a7a\u95f4\u7ed3\u6784\u4e2d\u8fd0\u884c cargo test \u4f1a\u8fd0\u884c\u5de5\u4f5c\u7a7a\u95f4\u4e2d\u6240\u6709 crate \u7684\u6d4b\u8bd5\u3002 \u4e5f\u53ef\u4ee5\u9009\u62e9\u8fd0\u884c\u5de5\u4f5c\u7a7a\u95f4\u4e2d\u7279\u5b9a crate \u7684\u6d4b\u8bd5\uff0c\u901a\u8fc7\u5728\u6839\u76ee\u5f55\u4f7f\u7528 -p \u53c2\u6570\u5e76\u6307\u5b9a\u5e0c\u671b\u6d4b\u8bd5\u7684 crate \u540d\u79f0\uff1a $ cargo test -p add_one Finished test [unoptimized + debuginfo] target(s) in 0.00s Running target/debug/deps/add_one-b3235fea9a156f74 running 1 test test tests::it_works ... ok test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s Doc-tests add_one running 0 tests test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s \u8f93\u51fa\u663e\u793a\u4e86 cargo test \u53ea\u8fd0\u884c\u4e86 add_one crate \u7684\u6d4b\u8bd5\u800c\u6ca1\u6709\u8fd0\u884c adder crate \u7684\u6d4b\u8bd5\u3002 \u5982\u679c\u4f60\u9009\u62e9\u5411 crates.io \u53d1\u5e03\u5de5\u4f5c\u7a7a\u95f4\u4e2d\u7684 crate\uff0c\u6bcf\u4e00\u4e2a\u5de5\u4f5c\u7a7a\u95f4\u4e2d\u7684 crate \u9700\u8981\u5355\u72ec\u53d1\u5e03\u3002 cargo publish \u547d\u4ee4\u5e76\u6ca1\u6709 --all \u6216\u8005 -p \u53c2\u6570\uff0c\u6240\u4ee5\u5fc5\u987b\u8fdb\u5165\u6bcf\u4e00\u4e2a crate \u7684\u76ee\u5f55\u5e76\u8fd0\u884c cargo publish \u6765\u53d1\u5e03\u5de5\u4f5c\u7a7a\u95f4\u4e2d\u7684\u6bcf\u4e00\u4e2a crate\u3002 \u73b0\u5728\u5c1d\u8bd5\u4ee5\u7c7b\u4f3c add_one crate \u7684\u65b9\u5f0f\u5411\u5de5\u4f5c\u7a7a\u95f4\u589e\u52a0 add_two crate \u6765\u4f5c\u4e3a\u66f4\u591a\u7684\u7ec3\u4e60\uff01 \u968f\u7740\u9879\u76ee\u589e\u957f\uff0c\u8003\u8651\u4f7f\u7528\u5de5\u4f5c\u7a7a\u95f4\uff1a\u6bcf\u4e00\u4e2a\u66f4\u5c0f\u7684\u7ec4\u4ef6\u6bd4\u4e00\u5927\u5757\u4ee3\u7801\u8981\u5bb9\u6613\u7406\u89e3\u3002\u5982\u679c\u5b83\u4eec\u7ecf\u5e38\u9700\u8981\u540c\u65f6\u88ab\u4fee\u6539\u7684\u8bdd\uff0c\u5c06 crate \u4fdd\u6301\u5728\u5de5\u4f5c\u7a7a\u95f4\u4e2d\u66f4\u6613\u4e8e\u534f\u8c03\u4ed6\u4eec\u7684\u6539\u53d8\u3002","title":"\u4e3a\u5de5\u4f5c\u7a7a\u95f4\u589e\u52a0\u6d4b\u8bd5"},{"location":"more-about-cargo/#cargo-install","text":"cargo install \u547d\u4ee4\u7528\u4e8e\u5728\u672c\u5730\u5b89\u88c5\u548c\u4f7f\u7528\u4e8c\u8fdb\u5236 crate\u3002\u5b83\u5e76\u4e0d\u6253\u7b97\u66ff\u6362\u7cfb\u7edf\u4e2d\u7684\u5305\uff1b\u5b83\u610f\u5728\u4f5c\u4e3a\u4e00\u4e2a\u65b9\u4fbf Rust \u5f00\u53d1\u8005\u4eec\u5b89\u88c5\u5176\u4ed6\u4eba\u5df2\u7ecf\u5728 crates.io \u4e0a\u5171\u4eab\u7684\u5de5\u5177\u7684\u624b\u6bb5\u3002\u53ea\u6709\u62e5\u6709\u4e8c\u8fdb\u5236\u76ee\u6807\u6587\u4ef6\u7684\u5305\u80fd\u591f\u88ab\u5b89\u88c5\u3002 \u4e8c\u8fdb\u5236\u76ee\u6807 \u6587\u4ef6\u662f\u5728 crate \u6709 src/main.rs \u6216\u8005\u5176\u4ed6\u6307\u5b9a\u4e3a\u4e8c\u8fdb\u5236\u6587\u4ef6\u65f6\u6240\u521b\u5efa\u7684\u53ef\u6267\u884c\u7a0b\u5e8f\uff0c\u8fd9\u4e0d\u540c\u4e8e\u81ea\u8eab\u4e0d\u80fd\u6267\u884c\u4f46\u9002\u5408\u5305\u542b\u5728\u5176\u4ed6\u7a0b\u5e8f\u4e2d\u7684\u5e93\u76ee\u6807\u6587\u4ef6\u3002\u901a\u5e38 crate \u7684 README \u6587\u4ef6\u4e2d\u6709\u8be5 crate \u662f\u5e93\u3001\u4e8c\u8fdb\u5236\u76ee\u6807\u8fd8\u662f\u4e24\u8005\u90fd\u662f\u7684\u4fe1\u606f\u3002 \u6240\u6709\u6765\u81ea cargo install \u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\u90fd\u5b89\u88c5\u5230 Rust \u5b89\u88c5\u6839\u76ee\u5f55\u7684 bin \u6587\u4ef6\u5939\u4e2d\u3002\u5982\u679c\u4f60\u4f7f\u7528 rustup.rs \u5b89\u88c5\u7684 Rust \u4e14\u6ca1\u6709\u81ea\u5b9a\u4e49\u4efb\u4f55\u914d\u7f6e\uff0c\u8fd9\u5c06\u662f $HOME/.cargo/bin \u3002\u786e\u4fdd\u5c06\u8fd9\u4e2a\u76ee\u5f55\u6dfb\u52a0\u5230 $PATH \u73af\u5883\u53d8\u91cf\u4e2d\u5c31\u80fd\u591f\u8fd0\u884c\u901a\u8fc7 cargo install \u5b89\u88c5\u7684\u7a0b\u5e8f\u4e86\u3002 \u4f8b\u5982\uff0c\u7b2c\u5341\u4e8c\u7ae0\u63d0\u5230\u7684\u53eb\u505a ripgrep \u7684\u7528\u4e8e\u641c\u7d22\u6587\u4ef6\u7684 grep \u7684 Rust \u5b9e\u73b0\u3002\u5982\u679c\u60f3\u8981\u5b89\u88c5 ripgrep \uff0c\u53ef\u4ee5\u8fd0\u884c\u5982\u4e0b\uff1a $ cargo install ripgrep Updating crates.io index Downloaded ripgrep v11.0.2 Downloaded 1 crate (243.3 KB) in 0.88s Installing ripgrep v11.0.2 --snip-- Compiling ripgrep v11.0.2 Finished release [optimized + debuginfo] target(s) in 3m 10s Installing ~/.cargo/bin/rg Installed package `ripgrep v11.0.2` (executable `rg`) \u6700\u540e\u4e00\u884c\u8f93\u51fa\u5c55\u793a\u4e86\u5b89\u88c5\u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\u7684\u4f4d\u7f6e\u548c\u540d\u79f0\uff0c\u5728\u8fd9\u91cc ripgrep \u88ab\u547d\u540d\u4e3a rg \u3002\u53ea\u8981\u4f60\u50cf\u4e0a\u9762\u63d0\u5230\u7684\u90a3\u6837\u5c06\u5b89\u88c5\u76ee\u5f55\u52a0\u5165 $PATH \uff0c\u5c31\u53ef\u4ee5\u8fd0\u884c rg --help \u5e76\u5f00\u59cb\u4f7f\u7528\u4e00\u4e2a\u66f4\u5feb\u66f4 Rust \u7684\u5de5\u5177\u6765\u641c\u7d22\u6587\u4ef6\u4e86\uff01","title":"cargo install"},{"location":"more-about-cargo/#_9","text":"Cargo \u7684\u8bbe\u8ba1\u4f7f\u5f97\u5f00\u53d1\u8005\u53ef\u4ee5\u901a\u8fc7\u65b0\u7684\u5b50\u547d\u4ee4\u6765\u5bf9 Cargo \u8fdb\u884c\u6269\u5c55\uff0c\u800c\u65e0\u9700\u4fee\u6539 Cargo \u672c\u8eab\u3002\u5982\u679c $PATH \u4e2d\u6709\u7c7b\u4f3c cargo-something \u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\uff0c\u5c31\u53ef\u4ee5\u901a\u8fc7 cargo something \u6765\u50cf Cargo \u5b50\u547d\u4ee4\u4e00\u6837\u8fd0\u884c\u5b83\u3002\u50cf\u8fd9\u6837\u7684\u81ea\u5b9a\u4e49\u547d\u4ee4\u4e5f\u53ef\u4ee5\u8fd0\u884c cargo --list \u6765\u5c55\u793a\u51fa\u6765\u3002\u80fd\u591f\u901a\u8fc7 cargo install \u5411 Cargo \u5b89\u88c5\u6269\u5c55\u5e76\u53ef\u4ee5\u5982\u5185\u5efa Cargo \u5de5\u5177\u90a3\u6837\u8fd0\u884c\u4ed6\u4eec\u662f Cargo \u8bbe\u8ba1\u4e0a\u7684\u4e00\u4e2a\u975e\u5e38\u65b9\u4fbf\u7684\u4f18\u70b9\uff01","title":"\u81ea\u5b9a\u4e49\u6269\u5c55\u547d\u4ee4"},{"location":"more-about-cargo/#_10","text":"\u901a\u8fc7 Cargo \u548c crates.io \u6765\u5206\u4eab\u4ee3\u7801\u662f\u4f7f\u5f97 Rust \u751f\u6001\u73af\u5883\u53ef\u4ee5\u7528\u4e8e\u8bb8\u591a\u4e0d\u540c\u7684\u4efb\u52a1\u7684\u91cd\u8981\u7ec4\u6210\u90e8\u5206\u3002Rust \u7684\u6807\u51c6\u5e93\u662f\u5c0f\u800c\u7a33\u5b9a\u7684\uff0c\u4e0d\u8fc7 crate \u6613\u4e8e\u5206\u4eab\u548c\u4f7f\u7528\uff0c\u5e76\u91c7\u7528\u4e00\u4e2a\u4e0d\u540c\u8bed\u8a00\u81ea\u8eab\u7684\u65f6\u95f4\u7ebf\u6765\u63d0\u4f9b\u6539\u8fdb\u3002\u4e0d\u8981\u7f9e\u4e8e\u5728 crates.io \u4e0a\u5171\u4eab\u5bf9\u4f60\u6709\u7528\u7684\u4ee3\u7801\uff1b\u56e0\u4e3a\u5b83\u5f88\u6709\u53ef\u80fd\u5bf9\u522b\u4eba\u4e5f\u5f88\u6709\u7528\uff01","title":"\u603b\u7ed3"},{"location":"ownership/","text":"\u6240\u6709\u6743 Rust \u7684\u6838\u5fc3\u529f\u80fd\uff08\u4e4b\u4e00\uff09\u662f \u6240\u6709\u6743\uff08ownership\uff09\u3002 \u6240\u6709\u7a0b\u5e8f\u90fd\u5fc5\u987b\u7ba1\u7406\u5176\u8fd0\u884c\u65f6\u4f7f\u7528\u8ba1\u7b97\u673a\u5185\u5b58\u7684\u65b9\u5f0f\u3002 \u4e00\u4e9b\u8bed\u8a00\u4e2d\u5177\u6709\u5783\u573e\u56de\u6536\u673a\u5236\uff0c\u5728\u7a0b\u5e8f\u8fd0\u884c\u65f6\u6709\u89c4\u5f8b\u5730\u5bfb\u627e\u4e0d\u518d\u4f7f\u7528\u7684\u5185\u5b58\uff1b \u5728\u53e6\u4e00\u4e9b\u8bed\u8a00\u4e2d\uff0c\u7a0b\u5e8f\u5458\u5fc5\u987b\u4eb2\u81ea\u5206\u914d\u548c\u91ca\u653e\u5185\u5b58\u3002 Rust \u5219\u9009\u62e9\u4e86\u7b2c\u4e09\u79cd\u65b9\u5f0f\uff1a \u901a\u8fc7\u6240\u6709\u6743\u7cfb\u7edf\u7ba1\u7406\u5185\u5b58\uff0c\u7f16\u8bd1\u5668\u5728\u7f16\u8bd1\u65f6\u4f1a\u6839\u636e\u4e00\u7cfb\u5217\u7684\u89c4\u5219\u8fdb\u884c\u68c0\u67e5\u3002\u5982\u679c\u8fdd\u53cd\u4e86\u4efb\u4f55\u8fd9\u4e9b\u89c4\u5219\uff0c\u7a0b\u5e8f\u90fd\u4e0d\u80fd\u7f16\u8bd1\u3002\u5728\u8fd0\u884c\u65f6\uff0c\u6240\u6709\u6743\u7cfb\u7edf\u7684\u4efb\u4f55\u529f\u80fd\u90fd\u4e0d\u4f1a\u51cf\u6162\u7a0b\u5e8f\u3002 \u7b80\u4ecb \u6808\uff08Stack\uff09\u4e0e\u5806\uff08Heap\uff09 \u5728\u5f88\u591a\u8bed\u8a00\u4e2d\uff0c\u4f60\u5e76\u4e0d\u9700\u8981\u7ecf\u5e38\u8003\u8651\u5230\u6808\u4e0e\u5806\u3002\u4e0d\u8fc7\u5728\u50cf Rust \u8fd9\u6837\u7684\u7cfb\u7edf\u7f16\u7a0b\u8bed\u8a00\u4e2d\uff0c\u503c\u662f\u4f4d\u4e8e\u6808\u4e0a\u8fd8\u662f\u5806\u4e0a\u5728\u66f4\u5927\u7a0b\u5ea6\u4e0a\u5f71\u54cd\u4e86\u8bed\u8a00\u7684\u884c\u4e3a\u4ee5\u53ca\u4e3a\u4f55\u5fc5\u987b\u505a\u51fa\u8fd9\u6837\u7684\u6289\u62e9\u3002 \u6808\u548c\u5806\u90fd\u662f\u4ee3\u7801\u5728\u8fd0\u884c\u65f6\u53ef\u4f9b\u4f7f\u7528\u7684\u5185\u5b58\uff0c\u4f46\u662f\u5b83\u4eec\u7684\u7ed3\u6784\u4e0d\u540c\u3002 \u6808\u4ee5\u653e\u5165\u503c\u7684\u987a\u5e8f\u5b58\u50a8\u503c\u5e76\u4ee5\u76f8\u53cd\u987a\u5e8f\u53d6\u51fa\u503c \u3002\u8fd9\u4e5f\u88ab\u79f0\u4f5c \u540e\u8fdb\u5148\u51fa \uff08last in, first out\uff09\u3002\u60f3\u8c61\u4e00\u4e0b\u4e00\u53e0\u76d8\u5b50\uff1a\u5f53\u589e\u52a0\u66f4\u591a\u76d8\u5b50\u65f6\uff0c\u628a\u5b83\u4eec\u653e\u5728\u76d8\u5b50\u5806\u7684\u9876\u90e8\uff0c\u5f53\u9700\u8981\u76d8\u5b50\u65f6\uff0c\u4e5f\u4ece\u9876\u90e8\u62ff\u8d70\u3002\u4e0d\u80fd\u4ece\u4e2d\u95f4\u4e5f\u4e0d\u80fd\u4ece\u5e95\u90e8\u589e\u52a0\u6216\u62ff\u8d70\u76d8\u5b50\uff01\u589e\u52a0\u6570\u636e\u53eb\u505a \u8fdb\u6808 \uff08pushing onto the stack\uff09\uff0c\u800c\u79fb\u51fa\u6570\u636e\u53eb\u505a \u51fa\u6808 \uff08popping off the stack\uff09\u3002 \u6808\u4e2d\u7684\u6240\u6709\u6570\u636e\u90fd\u5fc5\u987b\u5360\u7528\u5df2\u77e5\u4e14\u56fa\u5b9a\u7684\u5927\u5c0f \u3002 \u5728\u7f16\u8bd1\u65f6\u5927\u5c0f\u672a\u77e5\u6216\u5927\u5c0f\u53ef\u80fd\u53d8\u5316\u7684\u6570\u636e\uff0c\u8981\u6539\u4e3a\u5b58\u50a8\u5728\u5806\u4e0a \u3002 \u5806\u662f\u7f3a\u4e4f\u7ec4\u7ec7\u7684\uff1a\u5f53\u5411\u5806\u653e\u5165\u6570\u636e\u65f6\uff0c\u4f60\u8981\u8bf7\u6c42\u4e00\u5b9a\u5927\u5c0f\u7684\u7a7a\u95f4\u3002 \u5185\u5b58\u5206\u914d\u5668 \uff08memory allocator\uff09\u5728\u5806\u7684\u67d0\u5904\u627e\u5230\u4e00\u5757\u8db3\u591f\u5927\u7684\u7a7a\u4f4d\uff0c\u628a\u5b83\u6807\u8bb0\u4e3a\u5df2\u4f7f\u7528\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a\u8868\u793a\u8be5\u4f4d\u7f6e\u5730\u5740\u7684 \u6307\u9488 \uff08pointer\uff09\u3002\u8fd9\u4e2a\u8fc7\u7a0b\u79f0\u4f5c \u5728\u5806\u4e0a\u5206\u914d\u5185\u5b58 \uff08allocating on the heap\uff09\uff0c\u6709\u65f6\u7b80\u79f0\u4e3a \u201c \u5206\u914d \u201d\uff08allocating\uff09\u3002\uff08\u5c06\u6570\u636e\u63a8\u5165\u6808\u4e2d\u5e76\u4e0d\u88ab\u8ba4\u4e3a\u662f\u5206\u914d\uff09\u3002\u56e0\u4e3a\u6307\u5411\u653e\u5165\u5806\u4e2d\u6570\u636e\u7684\u6307\u9488\u662f\u5df2\u77e5\u7684\u5e76\u4e14\u5927\u5c0f\u662f\u56fa\u5b9a\u7684\uff0c\u4f60\u53ef\u4ee5\u5c06\u8be5\u6307\u9488\u5b58\u50a8\u5728\u6808\u4e0a\uff0c\u4e0d\u8fc7\u5f53\u9700\u8981\u5b9e\u9645\u6570\u636e\u65f6\uff0c\u5fc5\u987b\u8bbf\u95ee\u6307\u9488\u3002\u60f3\u8c61\u4e00\u4e0b\u53bb\u9910\u9986\u5c31\u5ea7\u5403\u996d\u3002\u5f53\u8fdb\u5165\u65f6\uff0c\u4f60\u8bf4\u660e\u6709\u51e0\u4e2a\u4eba\uff0c\u9910\u9986\u5458\u5de5\u4f1a\u627e\u5230\u4e00\u4e2a\u591f\u5927\u7684\u7a7a\u684c\u5b50\u5e76\u9886\u4f60\u4eec\u8fc7\u53bb\u3002\u5982\u679c\u6709\u4eba\u6765\u8fdf\u4e86\uff0c\u4ed6\u4eec\u4e5f\u53ef\u4ee5\u901a\u8fc7\u8be2\u95ee\u6765\u627e\u5230\u4f60\u4eec\u5750\u5728\u54ea\u3002 \u5165\u6808\u6bd4\u5728\u5806\u4e0a\u5206\u914d\u5185\u5b58\u8981\u5feb \uff0c\u56e0\u4e3a\uff08\u5165\u6808\u65f6\uff09\u5206\u914d\u5668\u65e0\u9700\u4e3a\u5b58\u50a8\u65b0\u6570\u636e\u53bb\u641c\u7d22\u5185\u5b58\u7a7a\u95f4\uff1b\u5176\u4f4d\u7f6e\u603b\u662f\u5728\u6808\u9876\u3002\u76f8\u6bd4\u4e4b\u4e0b\uff0c \u5728\u5806\u4e0a\u5206\u914d\u5185\u5b58\u5219\u9700\u8981\u66f4\u591a\u7684\u5de5\u4f5c\uff0c\u8fd9\u662f\u56e0\u4e3a\u5206\u914d\u5668\u5fc5\u987b\u9996\u5148\u627e\u5230\u4e00\u5757\u8db3\u591f\u5b58\u653e\u6570\u636e\u7684\u5185\u5b58\u7a7a\u95f4\uff0c\u5e76\u63a5\u7740\u505a\u4e00\u4e9b\u8bb0\u5f55\u4e3a\u4e0b\u4e00\u6b21\u5206\u914d\u505a\u51c6\u5907\u3002 \u8bbf\u95ee\u5806\u4e0a\u7684\u6570\u636e\u6bd4\u8bbf\u95ee\u6808\u4e0a\u7684\u6570\u636e\u6162\uff0c\u56e0\u4e3a\u5fc5\u987b\u901a\u8fc7\u6307\u9488\u6765\u8bbf\u95ee \u3002\u73b0\u4ee3\u5904\u7406\u5668\u5728\u5185\u5b58\u4e2d\u8df3\u8f6c\u8d8a\u5c11\u5c31\u8d8a\u5feb\uff08\u7f13\u5b58\uff09\u3002\u7ee7\u7eed\u7c7b\u6bd4\uff0c\u5047\u8bbe\u6709\u4e00\u4e2a\u670d\u52a1\u5458\u5728\u9910\u5385\u91cc\u5904\u7406\u591a\u4e2a\u684c\u5b50\u7684\u70b9\u83dc\u3002\u5728\u4e00\u4e2a\u684c\u5b50\u62a5\u5b8c\u6240\u6709\u83dc\u540e\u518d\u79fb\u52a8\u5230\u4e0b\u4e00\u4e2a\u684c\u5b50\u662f\u6700\u6709\u6548\u7387\u7684\u3002\u4ece\u684c\u5b50 A \u542c\u4e00\u4e2a\u83dc\uff0c\u63a5\u7740\u684c\u5b50 B \u542c\u4e00\u4e2a\u83dc\uff0c\u7136\u540e\u518d\u684c\u5b50 A\uff0c\u7136\u540e\u518d\u684c\u5b50 B \u8fd9\u6837\u7684\u6d41\u7a0b\u4f1a\u66f4\u52a0\u7f13\u6162\u3002\u51fa\u4e8e\u540c\u6837\u539f\u56e0\uff0c\u5904\u7406\u5668\u5728\u5904\u7406\u7684\u6570\u636e\u5f7c\u6b64\u8f83\u8fd1\u7684\u65f6\u5019\uff08\u6bd4\u5982\u5728\u6808\u4e0a\uff09\u6bd4\u8f83\u8fdc\u7684\u65f6\u5019\uff08\u6bd4\u5982\u53ef\u80fd\u5728\u5806\u4e0a\uff09\u80fd\u66f4\u597d\u7684\u5de5\u4f5c\u3002 \u5f53\u4f60\u7684\u4ee3\u7801\u8c03\u7528\u4e00\u4e2a\u51fd\u6570\u65f6\uff0c\u4f20\u9012\u7ed9\u51fd\u6570\u7684\u503c\uff08\u5305\u62ec\u53ef\u80fd\u6307\u5411\u5806\u4e0a\u6570\u636e\u7684\u6307\u9488\uff09\u548c\u51fd\u6570\u7684\u5c40\u90e8\u53d8\u91cf\u88ab\u538b\u5165\u6808\u4e2d\u3002\u5f53\u51fd\u6570\u7ed3\u675f\u65f6\uff0c\u8fd9\u4e9b\u503c\u88ab\u79fb\u51fa\u6808\u3002 \u8ddf\u8e2a\u54ea\u90e8\u5206\u4ee3\u7801\u6b63\u5728\u4f7f\u7528\u5806\u4e0a\u7684\u54ea\u4e9b\u6570\u636e\uff0c\u6700\u5927\u9650\u5ea6\u7684\u51cf\u5c11\u5806\u4e0a\u7684\u91cd\u590d\u6570\u636e\u7684\u6570\u91cf\uff0c\u4ee5\u53ca\u6e05\u7406\u5806\u4e0a\u4e0d\u518d\u4f7f\u7528\u7684\u6570\u636e\u786e\u4fdd\u4e0d\u4f1a\u8017\u5c3d\u7a7a\u95f4\uff0c\u8fd9\u4e9b\u95ee\u9898\u6b63\u662f\u6240\u6709\u6743\u7cfb\u7edf\u8981\u5904\u7406\u7684 \u3002\u4e00\u65e6\u7406\u89e3\u4e86\u6240\u6709\u6743\uff0c\u4f60\u5c31\u4e0d\u9700\u8981\u7ecf\u5e38\u8003\u8651\u6808\u548c\u5806\u4e86\uff0c\u4e0d\u8fc7\u660e\u767d\u4e86\u6240\u6709\u6743\u7684\u4e3b\u8981\u76ee\u7684\u5c31\u662f\u4e3a\u4e86\u7ba1\u7406\u5806\u6570\u636e\uff0c\u80fd\u591f\u5e2e\u52a9\u89e3\u91ca\u4e3a\u4ec0\u4e48\u6240\u6709\u6743\u8981\u4ee5\u8fd9\u79cd\u65b9\u5f0f\u5de5\u4f5c\u3002 \u6240\u6709\u6743\u89c4\u5219 \u9996\u5148\uff0c\u8ba9\u6211\u4eec\u770b\u4e00\u4e0b\u6240\u6709\u6743\u7684\u89c4\u5219. Rust \u4e2d\u7684\u6bcf\u4e00\u4e2a\u503c\u90fd\u6709\u4e00\u4e2a \u6240\u6709\u8005 \uff08owner\uff09\u3002 \u503c\u5728\u4efb\u4e00\u65f6\u523b\u6709\u4e14\u53ea\u6709\u4e00\u4e2a\u6240\u6709\u8005\u3002 \u5f53\u6240\u6709\u8005\uff08\u53d8\u91cf\uff09\u79bb\u5f00\u4f5c\u7528\u57df\uff0c\u8fd9\u4e2a\u503c\u5c06\u88ab\u4e22\u5f03\u3002 \u53d8\u91cf\u4f5c\u7528\u57df \u4f5c\u7528\u57df\u662f\u4e00\u4e2a\u9879\uff08item\uff09\u5728\u7a0b\u5e8f\u4e2d\u6709\u6548\u7684\u8303\u56f4\u3002\u5047\u8bbe\u6709\u8fd9\u6837\u4e00\u4e2a\u53d8\u91cf\uff1a { // s \u5728\u8fd9\u91cc\u65e0\u6548, \u5b83\u5c1a\u672a\u58f0\u660e let s = \"hello\" ; // \u4ece\u6b64\u5904\u8d77\uff0cs \u662f\u6709\u6548\u7684 // \u4f7f\u7528 s println! ( \"s is {s}\" ) } // \u6b64\u4f5c\u7528\u57df\u5df2\u7ed3\u675f\uff0cs \u4e0d\u518d\u6709\u6548 \u4e24\u4e2a\u91cd\u8981\u7684\u65f6\u95f4\u70b9\uff1a \u5f53 s \u8fdb\u5165\u4f5c\u7528\u57df \u65f6\uff0c\u5b83\u5c31\u662f\u6709\u6548\u7684\u3002 \u8fd9\u4e00\u76f4\u6301\u7eed\u5230\u5b83 \u79bb\u5f00\u4f5c\u7528\u57df \u4e3a\u6b62\u3002 String \u7c7b\u578b \u5df2\u7ecf\u89c1\u8fc7\u5b57\u7b26\u4e32\u5b57\u9762\u503c\uff0c\u5373\u88ab\u786c\u7f16\u7801\u8fdb\u7a0b\u5e8f\u91cc\u7684\u5b57\u7b26\u4e32\u503c\u3002\u5b57\u7b26\u4e32\u5b57\u9762\u503c\u662f\u5f88\u65b9\u4fbf\u7684\uff0c\u4e0d\u8fc7\u5b83\u4eec\u5e76\u4e0d\u9002\u5408\u4f7f\u7528\u6587\u672c\u7684\u6bcf\u4e00\u79cd\u573a\u666f\u3002\u539f\u56e0\u4e4b\u4e00\u5c31\u662f \u5b83\u4eec\u662f\u4e0d\u53ef\u53d8\u7684 \u3002\u53e6\u4e00\u4e2a\u539f\u56e0\u662f \u5e76\u975e\u6240\u6709\u5b57\u7b26\u4e32\u7684\u503c\u90fd\u80fd\u5728\u7f16\u5199\u4ee3\u7801\u65f6\u5c31\u77e5\u9053 \uff1a\u4f8b\u5982\uff0c\u8981\u662f\u60f3\u83b7\u53d6\u7528\u6237\u8f93\u5165\u5e76\u5b58\u50a8\u8be5\u600e\u4e48\u529e\u5462\uff1f\u4e3a\u6b64\uff0cRust \u6709\u7b2c\u4e8c\u4e2a\u5b57\u7b26\u4e32\u7c7b\u578b\uff0cString\u3002\u8fd9\u4e2a\u7c7b\u578b\u7ba1\u7406\u88ab\u5206\u914d\u5230\u5806\u4e0a\u7684\u6570\u636e\uff0c\u6240\u4ee5\u80fd\u591f\u5b58\u50a8\u5728\u7f16\u8bd1\u65f6\u672a\u77e5\u5927\u5c0f\u7684\u6587\u672c\u3002\u53ef\u4ee5\u4f7f\u7528 from \u51fd\u6570\u57fa\u4e8e\u5b57\u7b26\u4e32\u5b57\u9762\u503c\u6765\u521b\u5efa String \uff0c\u5982\u4e0b\uff1a let s = String :: from ( \"hello\" ); // \u4e24\u4e2a\u5192\u53f7 :: \u662f\u8fd0\u7b97\u7b26\uff0c\u5141\u8bb8\u5c06\u7279\u5b9a\u7684 from \u51fd\u6570\u7f6e\u4e8e String \u7c7b\u578b\u7684\u547d\u540d\u7a7a\u95f4\uff08namespace\uff09\u4e0b\uff0c\u800c\u4e0d\u9700\u8981\u4f7f\u7528\u7c7b\u4f3c string_from \u8fd9\u6837\u7684\u540d\u5b57\u3002 \u53ef\u4ee5 \u4fee\u6539\u6b64\u7c7b\u5b57\u7b26\u4e32 \uff1a let mut s = String :: from ( \"hello\" ); s . push_str ( \", world!\" ); // push_str() \u5728\u5b57\u7b26\u4e32\u540e\u8ffd\u52a0\u5b57\u9762\u503c println! ( \"{}\" , s ); // \u5c06\u6253\u5370 `hello, world!` // \u90a3\u4e48\u8fd9\u91cc\u6709\u4ec0\u4e48\u533a\u522b\u5462\uff1f // \u4e3a\u4ec0\u4e48 String \u53ef\u53d8\u800c\u5b57\u9762\u503c\u5374\u4e0d\u884c\u5462\uff1f // \u533a\u522b\u5728\u4e8e\u4e24\u4e2a\u7c7b\u578b\u5bf9\u5185\u5b58\u7684\u5904\u7406\u4e0a\u3002 \u5185\u5b58\u4e0e\u5206\u914d \u5c31\u5b57\u7b26\u4e32\u5b57\u9762\u503c\u6765\u8bf4\uff0c\u6211\u4eec\u5728\u7f16\u8bd1\u65f6\u5c31\u77e5\u9053\u5176\u5185\u5bb9\uff0c\u6240\u4ee5\u6587\u672c\u88ab\u76f4\u63a5\u786c\u7f16\u7801\u8fdb\u6700\u7ec8\u7684\u53ef\u6267\u884c\u6587\u4ef6\u4e2d\u3002\u8fd9\u4f7f\u5f97\u5b57\u7b26\u4e32\u5b57\u9762\u503c\u5feb\u901f\u4e14\u9ad8\u6548\u3002 \u4e0d\u8fc7\u8fd9\u4e9b\u7279\u6027\u90fd\u53ea\u5f97\u76ca\u4e8e\u5b57\u7b26\u4e32\u5b57\u9762\u503c\u7684\u4e0d\u53ef\u53d8\u6027\u3002 \u4e0d\u5e78\u7684\u662f\uff0c\u6211\u4eec\u4e0d\u80fd\u4e3a\u4e86\u6bcf\u4e00\u4e2a\u5728\u7f16\u8bd1\u65f6\u5927\u5c0f\u672a\u77e5\u7684\u6587\u672c\u800c\u5c06\u4e00\u5757\u5185\u5b58\u653e\u5165\u4e8c\u8fdb\u5236\u6587\u4ef6\u4e2d\uff0c\u5e76\u4e14\u5b83\u7684\u5927\u5c0f\u8fd8\u53ef\u80fd\u968f\u7740\u7a0b\u5e8f\u8fd0\u884c\u800c\u6539\u53d8\u3002 \u5bf9\u4e8e String \u7c7b\u578b\uff0c\u4e3a\u4e86\u652f\u6301\u4e00\u4e2a\u53ef\u53d8\uff0c\u53ef\u589e\u957f\u7684\u6587\u672c\u7247\u6bb5\uff0c \u9700\u8981\u5728\u5806\u4e0a\u5206\u914d\u4e00\u5757\u5728\u7f16\u8bd1\u65f6\u672a\u77e5\u5927\u5c0f\u7684\u5185\u5b58\u6765\u5b58\u653e\u5185\u5bb9 \u3002\u8fd9\u610f\u5473\u7740\uff1a \u5fc5\u987b\u5728\u8fd0\u884c\u65f6\u5411\u5185\u5b58\u5206\u914d\u5668\uff08memory allocator\uff09\u8bf7\u6c42\u5185\u5b58\u3002 \u9700\u8981\u4e00\u4e2a\u5f53\u6211\u4eec\u5904\u7406\u5b8c String \u65f6\u5c06\u5185\u5b58\u8fd4\u56de\u7ed9\u5206\u914d\u5668\u7684\u65b9\u6cd5\u3002 \u7b2c\u4e00\u90e8\u5206\u7531\u6211\u4eec\u5b8c\u6210\uff1a\u5f53\u8c03\u7528 String::from \u65f6\uff0c\u5b83\u7684\u5b9e\u73b0 (implementation) \u8bf7\u6c42\u5176\u6240\u9700\u7684\u5185\u5b58\u3002\u8fd9\u5728\u7f16\u7a0b\u8bed\u8a00\u4e2d\u662f\u975e\u5e38\u901a\u7528\u7684\u3002 \u7136\u800c\uff0c\u7b2c\u4e8c\u90e8\u5206\u5b9e\u73b0\u8d77\u6765\u5c31\u5404\u6709\u533a\u522b\u4e86\u3002\u5728\u6709 \u5783\u573e\u56de\u6536 \uff08garbage collector\uff0c GC \uff09\u7684\u8bed\u8a00\u4e2d\uff0c GC \u8bb0\u5f55\u5e76\u6e05\u9664\u4e0d\u518d\u4f7f\u7528\u7684\u5185\u5b58\uff0c\u800c\u6211\u4eec\u5e76\u4e0d\u9700\u8981\u5173\u5fc3\u5b83\u3002\u5728\u5927\u90e8\u5206\u6ca1\u6709 GC \u7684\u8bed\u8a00\u4e2d\uff0c\u8bc6\u522b\u51fa\u4e0d\u518d\u4f7f\u7528\u7684\u5185\u5b58\u5e76\u8c03\u7528\u4ee3\u7801\u663e\u5f0f\u91ca\u653e\u5c31\u662f\u6211\u4eec\u7684\u8d23\u4efb\u4e86\uff0c\u8ddf\u8bf7\u6c42\u5185\u5b58\u7684\u65f6\u5019\u4e00\u6837\u3002\u4ece\u5386\u53f2\u7684\u89d2\u5ea6\u4e0a\u8bf4\u6b63\u786e\u5904\u7406\u5185\u5b58\u56de\u6536\u66fe\u7ecf\u662f\u4e00\u4e2a\u56f0\u96be\u7684\u7f16\u7a0b\u95ee\u9898\u3002\u5982\u679c\u5fd8\u8bb0\u56de\u6536\u4e86\u4f1a\u6d6a\u8d39\u5185\u5b58\u3002\u5982\u679c\u8fc7\u65e9\u56de\u6536\u4e86\uff0c\u5c06\u4f1a\u51fa\u73b0\u65e0\u6548\u53d8\u91cf\u3002\u5982\u679c\u91cd\u590d\u56de\u6536\uff0c\u8fd9\u4e5f\u662f\u4e2a bug\u3002\u6211\u4eec\u9700\u8981 \u7cbe\u786e\u7684\u4e3a\u4e00\u4e2a allocate \u914d\u5bf9\u4e00\u4e2a free \u3002 Rust \u91c7\u53d6\u4e86\u4e00\u4e2a\u4e0d\u540c\u7684\u7b56\u7565\uff1a \u5185\u5b58\u5728\u62e5\u6709\u5b83\u7684\u53d8\u91cf\u79bb\u5f00\u4f5c\u7528\u57df\u540e\u5c31\u88ab\u81ea\u52a8\u91ca\u653e \u3002\u4e0b\u9762\u662f\u4f5c\u7528\u57df\u4f8b\u5b50\u7684\u4e00\u4e2a\u4f7f\u7528 String \u800c\u4e0d\u662f\u5b57\u7b26\u4e32\u5b57\u9762\u503c\u7684\u7248\u672c\uff1a { let s = String :: from ( \"hello\" ); // \u4ece\u6b64\u5904\u8d77\uff0cs \u662f\u6709\u6548\u7684 // \u4f7f\u7528 s println! ( \"s is {s}\" ) } // \u6b64\u4f5c\u7528\u57df\u5df2\u7ed3\u675f\uff0c // s \u4e0d\u518d\u6709\u6548 \u5f53\u53d8\u91cf\u79bb\u5f00\u4f5c\u7528\u57df\uff0cRust \u4e3a\u6211\u4eec\u8c03\u7528\u4e00\u4e2a\u7279\u6b8a\u7684\u51fd\u6570\u3002\u8fd9\u4e2a\u51fd\u6570\u53eb\u505a drop \uff0cRust \u5728\u7ed3\u5c3e\u7684 } \u5904\u81ea\u52a8\u8c03\u7528 drop \u3002 \u6570\u636e\u4ea4\u4e92\uff1a\u79fb\u52a8 \u591a\u4e2a\u53d8\u91cf\u53ef\u4ee5\u91c7\u53d6\u4e0d\u540c\u7684\u65b9\u5f0f\u4e0e\u540c\u4e00\u6570\u636e\u8fdb\u884c\u4ea4\u4e92\u3002 fn main () { let x = 5 ; let y = x ; // \u5c06\u53d8\u91cf x \u7684\u6574\u6570\u503c\u8d4b\u7ed9 y } \u201c\u5c06 5 \u7ed1\u5b9a\u5230 x\uff1b\u63a5\u7740\u751f\u6210\u4e00\u4e2a\u503c x \u7684\u62f7\u8d1d\u5e76\u7ed1\u5b9a\u5230 y\u201d\u3002 \u73b0\u5728\u6709\u4e86\u4e24\u4e2a\u53d8\u91cf\uff0cx \u548c y\uff0c\u90fd\u7b49\u4e8e 5\u3002\u8fd9\u4e5f\u6b63\u662f\u4e8b\u5b9e\u4e0a\u53d1\u751f\u4e86\u7684\uff0c\u56e0\u4e3a\u6574\u6570\u662f\u6709 \u5df2\u77e5\u56fa\u5b9a\u5927\u5c0f \u7684\u7b80\u5355\u503c\uff0c\u6240\u4ee5\u8fd9 \u4e24\u4e2a 5 \u88ab\u653e\u5165\u4e86\u6808\u4e2d \u3002 String \u7248\u672c\uff1a let s1 = String :: from ( \"hello\" ); let s2 = s1 ; // \u5f53\u6211\u4eec\u5c06 s1 \u8d4b\u503c\u7ed9 s2\uff0cString \u7684\u6570\u636e\u88ab\u590d\u5236\u4e86\uff0c\u8fd9\u610f\u5473\u7740\u6211\u4eec\u4ece\u6808\u4e0a\u62f7\u8d1d\u4e86\u5b83\u7684\u6307\u9488\u3001\u957f\u5ea6\u548c\u5bb9\u91cf\u3002 // Rust\u5e76\u6ca1\u6709\u590d\u5236\u6307\u9488\u6307\u5411\u7684\u5806\u4e0a\u6570\u636e\u3002 // \u5982\u679c Rust \u4e5f\u62f7\u8d1d\u4e86\u5806\u4e0a\u7684\u6570\u636e\uff0c\u90a3\u4e48\u64cd\u4f5c s2 = s1 \u5728\u5806\u4e0a\u6570\u636e\u6bd4\u8f83\u5927\u7684\u65f6\u5019\u4f1a\u5bf9\u8fd0\u884c\u65f6\u6027\u80fd\u9020\u6210\u975e\u5e38\u5927\u7684\u5f71\u54cd\u3002 \u8fc7\u5f53\u53d8\u91cf\u79bb\u5f00\u4f5c\u7528\u57df\u540e\uff0cRust \u81ea\u52a8\u8c03\u7528 drop \u51fd\u6570\u5e76\u6e05\u7406\u53d8\u91cf\u7684\u5806\u5185\u5b58\u3002\u4e0d\u8fc7\u4e24\u4e2a\u6570\u636e\u6307\u9488\u6307\u5411\u4e86\u540c\u4e00\u4f4d\u7f6e\u3002 \u8fd9\u5c31\u6709\u4e86\u4e00\u4e2a\u95ee\u9898\uff1a\u5f53 s2 \u548c s1 \u79bb\u5f00\u4f5c\u7528\u57df\uff0c\u4ed6\u4eec\u90fd\u4f1a\u5c1d\u8bd5\u91ca\u653e\u76f8\u540c\u7684\u5185\u5b58\u3002 \u8fd9\u662f\u4e00\u4e2a\u53eb\u505a \u4e8c\u6b21\u91ca\u653e \uff08double free\uff09\u7684\u9519\u8bef\uff0c\u4e5f\u662f\u4e4b\u524d\u63d0\u5230\u8fc7\u7684\u5185\u5b58\u5b89\u5168\u6027 bug \u4e4b\u4e00\u3002 \u4e24\u6b21\u91ca\u653e \uff08\u76f8\u540c\uff09\u5185\u5b58\u4f1a\u5bfc\u81f4\u5185\u5b58\u6c61\u67d3\uff0c\u5b83\u53ef\u80fd\u4f1a\u5bfc\u81f4\u6f5c\u5728\u7684\u5b89\u5168\u6f0f\u6d1e\u3002 \u4e3a\u4e86\u786e\u4fdd\u5185\u5b58\u5b89\u5168\uff0c\u5728 let s2 = s1 \u4e4b\u540e\uff0cRust \u8ba4\u4e3a s1 \u4e0d\u518d\u6709\u6548\uff0c\u56e0\u6b64 Rust \u4e0d\u9700\u8981\u5728 s1 \u79bb\u5f00\u4f5c\u7528\u57df\u540e\u6e05\u7406\u4efb\u4f55\u4e1c\u897f\u3002 \u5728 s2 \u88ab\u521b\u5efa\u4e4b\u540e\u5c1d\u8bd5\u4f7f\u7528 s1 \u4f1a\u53d1\u751f\u4ec0\u4e48\uff1b\u8fd9\u6bb5\u4ee3\u7801\u4e0d\u80fd\u8fd0\u884c\uff1a let s1 = String :: from ( \"hello\" ); let s2 = s1 ; println! ( \"{}, world!\" , s1 ); // \u4f1a\u5f97\u5230\u4e00\u4e2a\u9519\u8bef: value borrowed here after move // \u56e0\u4e3a Rust \u7981\u6b62\u4f7f\u7528\u65e0\u6548\u7684\u5f15\u7528\u3002 \u5982\u679c\u5728\u5176\u4ed6\u8bed\u8a00\u4e2d\u542c\u8bf4\u8fc7\u672f\u8bed \u6d45\u62f7\u8d1d \uff08shallow copy\uff09\u548c \u6df1\u62f7\u8d1d \uff08deep copy\uff09\uff0c\u90a3\u4e48\u62f7\u8d1d\u6307\u9488\u3001\u957f\u5ea6\u548c\u5bb9\u91cf\u800c\u4e0d\u62f7\u8d1d\u6570\u636e\u53ef\u80fd\u542c\u8d77\u6765\u50cf\u6d45\u62f7\u8d1d\u3002\u4e0d\u8fc7\u56e0\u4e3a Rust \u540c\u65f6\u4f7f\u7b2c\u4e00\u4e2a\u53d8\u91cf\u65e0\u6548\u4e86\uff0c\u8fd9\u4e2a\u64cd\u4f5c\u88ab\u79f0\u4e3a \u79fb\u52a8 \uff08move\uff09\uff0c\u800c\u4e0d\u662f\u6d45\u62f7\u8d1d\u3002\u4e0a\u9762\u7684\u4f8b\u5b50\u53ef\u4ee5\u89e3\u8bfb\u4e3a s1 \u88ab \u79fb\u52a8 \u5230\u4e86 s2 \u4e2d\u3002 \u8fd9\u6837\u5c31\u89e3\u51b3\u4e86\u4e8c\u6b21\u91ca\u653e\u7684\u95ee\u9898\uff01\u56e0\u4e3a\u53ea\u6709 s2 \u662f\u6709\u6548\u7684\uff0c\u5f53\u5176\u79bb\u5f00\u4f5c\u7528\u57df\uff0c\u5b83\u5c31\u91ca\u653e\u4e86\u81ea\u5df1\u7684\u5185\u5b58\u3002 \u8fd9\u91cc\u8fd8\u9690\u542b\u4e86\u4e00\u4e2a\u8bbe\u8ba1\u9009\u62e9\uff1a Rust \u6c38\u8fdc\u4e5f\u4e0d\u4f1a\u81ea\u52a8\u521b\u5efa\u6570\u636e\u7684 \u201c\u6df1\u62f7\u8d1d\u201d \u3002\u56e0\u6b64\uff0c\u4efb\u4f55 \u81ea\u52a8 \u7684\u590d\u5236\u53ef\u4ee5\u88ab\u8ba4\u4e3a\u5bf9\u8fd0\u884c\u65f6\u6027\u80fd\u5f71\u54cd\u8f83\u5c0f\u3002 \u6570\u636e\u4ea4\u4e92\uff1a\u514b\u9686 \u5982\u679c \u786e\u5b9e \u9700\u8981\u6df1\u5ea6\u590d\u5236 String \u4e2d\u5806\u4e0a\u7684\u6570\u636e\uff0c\u800c\u4e0d\u4ec5\u4ec5\u662f\u6808\u4e0a\u7684\u6570\u636e\uff0c\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a\u53eb\u505a clone \u7684\u901a\u7528\u51fd\u6570\u3002 let s1 = String :: from ( \"hello\" ); let s2 = s1 . clone (); println! ( \"s1 = {}, s2 = {}\" , s1 , s2 ); \u8fd9\u6bb5\u4ee3\u7801\u80fd\u6b63\u5e38\u8fd0\u884c\uff0c\u8fd9\u91cc\u5806\u4e0a\u7684\u6570\u636e \u786e\u5b9e \u88ab\u590d\u5236\u4e86\u3002 \u5f53\u51fa\u73b0 clone \u8c03\u7528\u65f6\uff0c\u4f60\u77e5\u9053\u4e00\u4e9b\u7279\u5b9a\u7684\u4ee3\u7801\u88ab\u6267\u884c\u800c\u4e14\u8fd9\u4e9b\u4ee3\u7801\u53ef\u80fd\u76f8\u5f53\u6d88\u8017\u8d44\u6e90\u3002 \u62f7\u8d1d \u8fd9\u91cc\u8fd8\u6709\u4e00\u4e2a\u6ca1\u6709\u63d0\u5230\u7684\u5c0f\u7a8d\u95e8\u3002\u8fd9\u4e9b\u4ee3\u7801\u4f7f\u7528\u4e86\u6574\u578b\u5e76\u4e14\u662f\u6709\u6548\u7684! let x = 5 ; let y = x ; println! ( \"x = {}, y = {}\" , x , y ); \u4f46\u8fd9\u6bb5\u4ee3\u7801\u4f3c\u4e4e\u4e0e\u521a\u521a\u5b66\u5230\u7684\u5185\u5bb9\u76f8\u77db\u76fe\uff1a\u6ca1\u6709\u8c03\u7528 clone\uff0c\u4e0d\u8fc7 x \u4f9d\u7136\u6709\u6548\u4e14\u6ca1\u6709\u88ab\u79fb\u52a8\u5230 y \u4e2d\u3002 \u539f\u56e0\u662f\u50cf\u6574\u578b\u8fd9\u6837\u7684\u5728\u7f16\u8bd1\u65f6\u5df2\u77e5\u5927\u5c0f\u7684\u7c7b\u578b\u88ab\u6574\u4e2a\u5b58\u50a8\u5728\u6808\u4e0a\uff0c\u6240\u4ee5\u62f7\u8d1d\u5176\u5b9e\u9645\u7684\u503c\u662f\u5feb\u901f\u7684\u3002\u8fd9\u610f\u5473\u7740\u6ca1\u6709\u7406\u7531\u5728\u521b\u5efa\u53d8\u91cf y \u540e\u4f7f x \u65e0\u6548\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c \u8fd9\u91cc\u6ca1\u6709\u6df1\u6d45\u62f7\u8d1d\u7684\u533a\u522b \uff0c\u6240\u4ee5\u8fd9\u91cc\u8c03\u7528 clone \u5e76\u4e0d\u4f1a\u4e0e\u901a\u5e38\u7684\u6d45\u62f7\u8d1d\u6709\u4ec0\u4e48\u4e0d\u540c\uff0c\u6211\u4eec\u53ef\u4ee5\u4e0d\u7528\u7ba1\u5b83\u3002 Rust \u6709\u4e00\u4e2a\u53eb\u505a Copy trait \u7684\u7279\u6b8a\u6ce8\u89e3\uff0c\u53ef\u4ee5\u7528\u5728\u7c7b\u4f3c\u6574\u578b\u8fd9\u6837\u7684\u5b58\u50a8\u5728\u6808\u4e0a\u7684\u7c7b\u578b\u4e0a\uff08 \u7b2c\u5341\u7ae0 \u5c06\u4f1a\u8be6\u7ec6\u8bb2\u89e3 trait\uff09\u3002\u5982\u679c\u4e00\u4e2a\u7c7b\u578b\u5b9e\u73b0\u4e86 Copy trait \uff0c\u90a3\u4e48\u4e00\u4e2a\u65e7\u7684\u53d8\u91cf\u5728\u5c06\u5176\u8d4b\u503c\u7ed9\u5176\u4ed6\u53d8\u91cf\u540e\u4ecd\u7136\u53ef\u7528\u3002 Rust \u4e0d\u5141\u8bb8\u81ea\u8eab\u6216\u5176\u4efb\u4f55\u90e8\u5206\u5b9e\u73b0\u4e86 Drop trait \u7684\u7c7b\u578b\u4f7f\u7528 Copy trait \u3002\u5982\u679c\u6211\u4eec\u5bf9\u5176\u503c\u79bb\u5f00\u4f5c\u7528\u57df\u65f6\u9700\u8981\u7279\u6b8a\u5904\u7406\u7684\u7c7b\u578b\u4f7f\u7528 Copy \u6ce8\u89e3\uff0c\u5c06\u4f1a\u51fa\u73b0\u4e00\u4e2a\u7f16\u8bd1\u65f6\u9519\u8bef\u3002\u8981\u5b66\u4e60\u5982\u4f55\u4e3a\u4f60\u7684\u7c7b\u578b\u6dfb\u52a0 Copy \u6ce8\u89e3\u4ee5\u5b9e\u73b0\u8be5 trait\uff0c\u8bf7\u9605\u8bfb \u9644\u5f55 C \u4e2d\u7684 \u201c\u53ef\u6d3e\u751f\u7684 trait\u201d \u3002 \u90a3\u4e48\u54ea\u4e9b\u7c7b\u578b\u5b9e\u73b0\u4e86 Copy trait \u5462\uff1f\u53ef\u4ee5\u67e5\u770b\u7ed9\u5b9a\u7c7b\u578b\u7684\u6587\u6863\u6765\u786e\u8ba4\uff0c\u4e0d\u8fc7\u4f5c\u4e3a\u4e00\u4e2a\u901a\u7528\u7684\u89c4\u5219\uff0c\u4efb\u4f55\u4e00\u7ec4\u7b80\u5355\u6807\u91cf\u503c\u7684\u7ec4\u5408\u90fd\u53ef\u4ee5\u5b9e\u73b0 Copy\uff0c\u4efb\u4f55\u4e0d\u9700\u8981\u5206\u914d\u5185\u5b58\u6216\u67d0\u79cd\u5f62\u5f0f\u8d44\u6e90\u7684\u7c7b\u578b\u90fd\u53ef\u4ee5\u5b9e\u73b0 Copy \u3002\u5982\u4e0b\u662f\u4e00\u4e9b Copy \u7684\u7c7b\u578b\uff1a \u6240\u6709\u6574\u6570\u7c7b\u578b\uff0c\u6bd4\u5982 u32\u3002 \u5e03\u5c14\u7c7b\u578b\uff0cbool\uff0c\u5b83\u7684\u503c\u662f true \u548c false\u3002 \u6240\u6709\u6d6e\u70b9\u6570\u7c7b\u578b\uff0c\u6bd4\u5982 f64\u3002 \u5b57\u7b26\u7c7b\u578b\uff0cchar\u3002 \u5143\u7ec4\uff0c\u5f53\u4e14\u4ec5\u5f53\u5176\u5305\u542b\u7684\u7c7b\u578b\u4e5f\u90fd\u5b9e\u73b0 Copy \u7684\u65f6\u5019\u3002\u6bd4\u5982\uff0c(i32, i32) \u5b9e\u73b0\u4e86 Copy\uff0c\u4f46 (i32, String) \u5c31\u6ca1\u6709\u3002 \u6240\u6709\u6743\u4e0e\u51fd\u6570 \u5c06\u503c\u4f20\u9012\u7ed9\u51fd\u6570\u4e0e\u7ed9\u53d8\u91cf\u8d4b\u503c\u7684\u539f\u7406\u76f8\u4f3c\u3002\u5411\u51fd\u6570\u4f20\u9012\u503c\u53ef\u80fd\u4f1a\u79fb\u52a8\u6216\u8005\u590d\u5236\uff0c\u5c31\u50cf\u8d4b\u503c\u8bed\u53e5\u4e00\u6837\u3002 fn main () { let s = String :: from ( \"hello\" ); // s \u8fdb\u5165\u4f5c\u7528\u57df takes_ownership ( s ); // s \u7684\u503c\u79fb\u52a8\u5230\u51fd\u6570\u91cc ... // ... \u6240\u4ee5\u5230\u8fd9\u91cc\u4e0d\u518d\u6709\u6548 let x = 5 ; // x \u8fdb\u5165\u4f5c\u7528\u57df makes_copy ( x ); // x \u5e94\u8be5\u79fb\u52a8\u51fd\u6570\u91cc\uff0c // \u4f46 i32 \u662f Copy \u7684\uff0c // \u6240\u4ee5\u5728\u540e\u9762\u53ef\u7ee7\u7eed\u4f7f\u7528 x } // \u8fd9\u91cc, x \u5148\u79fb\u51fa\u4e86\u4f5c\u7528\u57df\uff0c\u7136\u540e\u662f s\u3002\u4f46\u56e0\u4e3a s \u7684\u503c\u5df2\u88ab\u79fb\u8d70\uff0c // \u6ca1\u6709\u7279\u6b8a\u4e4b\u5904 fn takes_ownership ( some_string : String ) { // some_string \u8fdb\u5165\u4f5c\u7528\u57df println! ( \"{}\" , some_string ); } // \u8fd9\u91cc\uff0csome_string \u79fb\u51fa\u4f5c\u7528\u57df\u5e76\u8c03\u7528 `drop` \u65b9\u6cd5\u3002 // \u5360\u7528\u7684\u5185\u5b58\u88ab\u91ca\u653e fn makes_copy ( some_integer : i32 ) { // some_integer \u8fdb\u5165\u4f5c\u7528\u57df println! ( \"{}\" , some_integer ); } // \u8fd9\u91cc\uff0csome_integer \u79fb\u51fa\u4f5c\u7528\u57df\u3002\u6ca1\u6709\u7279\u6b8a\u4e4b\u5904 \u5f53\u5c1d\u8bd5\u5728\u8c03\u7528 takes_ownership \u540e\u4f7f\u7528 s \u65f6\uff0cRust \u4f1a\u629b\u51fa\u4e00\u4e2a\u7f16\u8bd1\u65f6\u9519\u8bef\u3002\u8fd9\u4e9b\u9759\u6001\u68c0\u67e5\u4f7f\u6211\u4eec\u514d\u4e8e\u72af\u9519\u3002 \u8bd5\u8bd5\u5728 main \u51fd\u6570\u4e2d\u6dfb\u52a0\u4f7f\u7528 s \u548c x \u7684\u4ee3\u7801\u6765\u770b\u770b\u54ea\u91cc\u80fd\u4f7f\u7528\u4ed6\u4eec\uff0c\u4ee5\u53ca\u6240\u6709\u6743\u89c4\u5219\u4f1a\u5728\u54ea\u91cc\u963b\u6b62\u6211\u4eec\u8fd9\u4e48\u505a\u3002 \u8fd4\u56de\u503c\u4e0e\u4f5c\u7528\u57df \u8fd4\u56de\u503c\u4e5f\u53ef\u4ee5\u8f6c\u79fb\u6240\u6709\u6743\u3002 ffn main () { let s1 = gives_ownership (); // gives_ownership \u5c06\u8fd4\u56de\u503c // \u8f6c\u79fb\u7ed9 s1 let s2 = String :: from ( \"hello\" ); // s2 \u8fdb\u5165\u4f5c\u7528\u57df let s3 = takes_and_gives_back ( s2 ); // s2 \u88ab\u79fb\u52a8\u5230 // takes_and_gives_back \u4e2d, // \u5b83\u4e5f\u5c06\u8fd4\u56de\u503c\u79fb\u7ed9 s3 } // \u8fd9\u91cc, s3 \u79fb\u51fa\u4f5c\u7528\u57df\u5e76\u88ab\u4e22\u5f03\u3002s2 \u4e5f\u79fb\u51fa\u4f5c\u7528\u57df\uff0c\u4f46\u5df2\u88ab\u79fb\u8d70\uff0c // \u6240\u4ee5\u4ec0\u4e48\u4e5f\u4e0d\u4f1a\u53d1\u751f\u3002s1 \u79bb\u5f00\u4f5c\u7528\u57df\u5e76\u88ab\u4e22\u5f03 fn gives_ownership () -> String { // gives_ownership \u4f1a\u5c06 // \u8fd4\u56de\u503c\u79fb\u52a8\u7ed9 // \u8c03\u7528\u5b83\u7684\u51fd\u6570 let some_string = String :: from ( \"yours\" ); // some_string \u8fdb\u5165\u4f5c\u7528\u57df. some_string // \u8fd4\u56de some_string // \u5e76\u79fb\u51fa\u7ed9\u8c03\u7528\u7684\u51fd\u6570 // } // takes_and_gives_back \u5c06\u4f20\u5165\u5b57\u7b26\u4e32\u5e76\u8fd4\u56de\u8be5\u503c fn takes_and_gives_back ( a_string : String ) -> String { // a_string \u8fdb\u5165\u4f5c\u7528\u57df // a_string // \u8fd4\u56de a_string \u5e76\u79fb\u51fa\u7ed9\u8c03\u7528\u7684\u51fd\u6570 } \u53d8\u91cf\u7684\u6240\u6709\u6743\u603b\u662f\u9075\u5faa\u76f8\u540c\u7684\u6a21\u5f0f\uff1a \u5c06\u503c\u8d4b\u7ed9\u53e6\u4e00\u4e2a\u53d8\u91cf\u65f6\u79fb\u52a8\u5b83\u3002\u5f53\u6301\u6709\u5806\u4e2d\u6570\u636e\u503c\u7684\u53d8\u91cf\u79bb\u5f00\u4f5c\u7528\u57df\u65f6\uff0c\u5176\u503c\u5c06\u901a\u8fc7 drop \u88ab\u6e05\u7406\u6389\uff0c\u9664\u975e\u6570\u636e\u88ab\u79fb\u52a8\u4e3a\u53e6\u4e00\u4e2a\u53d8\u91cf\u6240\u6709\u3002 \u867d\u7136\u8fd9\u6837\u662f\u53ef\u4ee5\u7684\uff0c\u4f46\u662f\u5728\u6bcf\u4e00\u4e2a\u51fd\u6570\u4e2d\u90fd\u83b7\u53d6\u6240\u6709\u6743\u5e76\u63a5\u7740\u8fd4\u56de\u6240\u6709\u6743\u6709\u4e9b\u5570\u55e6\u3002\u5982\u679c\u6211\u4eec\u60f3\u8981\u51fd\u6570\u4f7f\u7528\u4e00\u4e2a\u503c\u4f46\u4e0d\u83b7\u53d6\u6240\u6709\u6743\u8be5\u600e\u4e48\u529e\u5462\uff1f\u5982\u679c\u6211\u4eec\u8fd8\u8981\u63a5\u7740\u4f7f\u7528\u5b83\u7684\u8bdd\uff0c\u6bcf\u6b21\u90fd\u4f20\u8fdb\u53bb\u518d\u8fd4\u56de\u6765\u5c31\u6709\u70b9\u70e6\u4eba\u4e86\uff0c\u9664\u6b64\u4e4b\u5916\uff0c\u6211\u4eec\u4e5f\u53ef\u80fd\u60f3\u8fd4\u56de\u51fd\u6570\u4f53\u4e2d\u4ea7\u751f\u7684\u4e00\u4e9b\u6570\u636e\u3002 \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u5143\u7ec4\u6765\u8fd4\u56de\u591a\u4e2a\u503c\uff0c\u793a\u4f8b\uff1a fn main () { let s1 = String :: from ( \"hello\" ); let ( s2 , len ) = calculate_length ( s1 ); println! ( \"The length of '{}' is {}.\" , s2 , len ); } fn calculate_length ( s : String ) -> ( String , usize ) { let length = s . len (); // len() \u8fd4\u56de\u5b57\u7b26\u4e32\u7684\u957f\u5ea6 ( s , length ) } \u4f46\u662f\u8fd9\u672a\u514d\u6709\u4e9b\u5f62\u5f0f\u4e3b\u4e49\uff0c\u800c\u4e14\u8fd9\u79cd\u573a\u666f\u5e94\u8be5\u5f88\u5e38\u89c1\u3002\u5e78\u8fd0\u7684\u662f\uff0cRust \u5bf9\u6b64\u63d0\u4f9b\u4e86\u4e00\u4e2a\u4e0d\u7528\u83b7\u53d6\u6240\u6709\u6743\u5c31\u53ef\u4ee5\u4f7f\u7528\u503c\u7684\u529f\u80fd\uff0c\u53eb\u505a \u5f15\u7528 \uff08references\uff09\u3002 \u5f15\u7528\u4e0e\u501f\u7528 \u4ee5\u63d0\u4f9b\u4e00\u4e2a String \u503c\u7684\u5f15\u7528\uff08reference\uff09\u3002 \u5f15\u7528 \uff08reference\uff09\u50cf\u4e00\u4e2a\u6307\u9488\uff0c\u56e0\u4e3a\u5b83\u662f\u4e00\u4e2a\u5730\u5740\uff0c\u6211\u4eec\u53ef\u4ee5\u7531\u6b64\u8bbf\u95ee\u50a8\u5b58\u4e8e\u8be5\u5730\u5740\u7684\u5c5e\u4e8e\u5176\u4ed6\u53d8\u91cf\u7684\u6570\u636e\u3002 \u4e0e\u6307\u9488\u4e0d\u540c\uff0c \u5f15\u7528\u786e\u4fdd\u6307\u5411\u67d0\u4e2a\u7279\u5b9a\u7c7b\u578b\u7684\u6709\u6548\u503c \u3002 fn main () { let s1 = String :: from ( \"hello\" ); // \u4f20\u9012 &s1 \u7ed9 calculate_length // \u8fd9\u4e9b & \u7b26\u53f7\u5c31\u662f \u5f15\u7528\uff0c\u5b83\u4eec\u5141\u8bb8\u4f60\u4f7f\u7528\u503c\u4f46\u4e0d\u83b7\u53d6\u5176\u6240\u6709\u6743\u3002 // &s1 \u8bed\u6cd5\u8ba9\u6211\u4eec\u521b\u5efa\u4e00\u4e2a \u6307\u5411 \u503c s1 \u7684\u5f15\u7528\uff0c\u4f46\u662f\u5e76\u4e0d\u62e5\u6709\u5b83\u3002 // \u56e0\u4e3a\u5e76\u4e0d\u62e5\u6709\u8fd9\u4e2a\u503c\uff0c\u6240\u4ee5\u5f53\u5f15\u7528\u505c\u6b62\u4f7f\u7528\u65f6\uff0c\u5b83\u6240\u6307\u5411\u7684\u503c\u4e5f\u4e0d\u4f1a\u88ab\u4e22\u5f03\u3002 let len = calculate_length ( & s1 ); println! ( \"The length of '{}' is {}.\" , s1 , len ); } // \u51fd\u6570\u7b7e\u540d\u4f7f\u7528 & \u6765\u8868\u660e\u53c2\u6570 s \u7684\u7c7b\u578b\u662f\u4e00\u4e2a\u5f15\u7528\u3002 fn calculate_length ( s : & String ) -> usize { // s\u662fString\u7684\u5f15\u7528 s . len () } // \u8fd9\u91cc\uff0cs \u79bb\u5f00\u4e86\u4f5c\u7528\u57df\u3002\u4f46\u56e0\u4e3a\u5b83\u5e76\u4e0d\u62e5\u6709\u5f15\u7528\u503c\u7684\u6240\u6709\u6743\uff0c // \u6240\u4ee5\u4ec0\u4e48\u4e5f\u4e0d\u4f1a\u53d1\u751f (Rust \u4e0d\u4f1a\u8c03\u7528drop) \u5f53\u51fd\u6570\u4f7f\u7528\u5f15\u7528\u800c\u4e0d\u662f\u5b9e\u9645\u503c\u4f5c\u4e3a\u53c2\u6570\uff0c\u65e0\u9700\u8fd4\u56de\u503c\u6765\u4ea4\u8fd8\u6240\u6709\u6743\uff0c\u56e0\u4e3a\u5c31\u4e0d\u66fe\u62e5\u6709\u6240\u6709\u6743\u3002 \u5c06\u521b\u5efa\u4e00\u4e2a\u5f15\u7528\u7684\u884c\u4e3a\u79f0\u4e3a \u501f\u7528 \uff08borrowing\uff09\u3002\u6b63\u5982\u73b0\u5b9e\u751f\u6d3b\u4e2d\uff0c\u5982\u679c\u4e00\u4e2a\u4eba\u62e5\u6709\u67d0\u6837\u4e1c\u897f\uff0c\u4f60\u53ef\u4ee5\u4ece\u4ed6\u90a3\u91cc\u501f\u6765\u3002\u5f53\u4f60\u4f7f\u7528\u5b8c\u6bd5\uff0c\u5fc5\u987b\u8fd8\u56de\u53bb\u3002 \u6b63\u5982\u53d8\u91cf\u9ed8\u8ba4\u662f\u4e0d\u53ef\u53d8\u7684\uff0c\u5f15\u7528\u4e5f\u4e00\u6837\u3002\uff08\u9ed8\u8ba4\uff09\u4e0d\u5141\u8bb8\u4fee\u6539 \u5f15\u7528 \u7684\u503c\u3002 \u53ef\u53d8\u5f15\u7528 \u5141\u8bb8\u6211\u4eec\u4fee\u6539\u4e00\u4e2a\u501f\u7528\u7684\u503c\uff0c\u8fd9\u5c31\u662f \u53ef\u53d8\u5f15\u7528 \uff08mutable reference\uff09 fn main () { let mut s = String :: from ( \"hello\" ); // \u5fc5\u987b\u5c06 s \u6539\u4e3a mut\uff0c \u58f0\u660e\u53ef\u53d8 change ( & mut s ); // \u4f20\u5165\u53ef\u53d8\u5f15\u7528 } // \u58f0\u660e\u53ef\u53d8\u5f15\u7528 fn change ( some_string : & mut String ) { some_string . push_str ( \", world\" ); // \u56e0\u4e3a\u53ef\u53d8\uff0c\u6240\u4ee5\u53ef\u4ee5\u66f4\u6539\u3002 } \u53ef\u53d8\u5f15\u7528\u6709\u4e00\u4e2a\u5f88\u5927\u7684\u9650\u5236\uff1a \u5982\u679c\u4f60\u6709\u4e00\u4e2a\u5bf9\u8be5\u53d8\u91cf\u7684\u53ef\u53d8\u5f15\u7528\uff0c\u4f60\u5c31\u4e0d\u80fd\u518d\u521b\u5efa\u5bf9\u8be5\u53d8\u91cf\u7684\u5f15\u7528 \u3002\u8fd9\u4e9b\u5c1d\u8bd5\u521b\u5efa\u4e24\u4e2a s \u7684\u53ef\u53d8\u5f15\u7528\u7684\u4ee3\u7801\u4f1a\u5931\u8d25\uff1a let mut s = String :: from ( \"hello\" ); let r1 = & mut s ; // \u6709\u4e00\u4e2a\u4e86 let r2 = & mut s ; // \u7b2c\u4e8c\u4e2a\u5c06\u4f1a\u62a5\u9519\u3002 println! ( \"{}, {}\" , r1 , r2 ); \u62a5\u9519\u5982\u4e0b: $ cargo run Compiling ownership v0 . 1.0 ( file : ///projects/ownership) error [ E0499 ] : cannot borrow ` s ` as mutable more than once at a time - -> src / main . rs : 5 : 14 | 4 | let r1 = & mut s ; | ------ first mutable borrow occurs here 5 | let r2 = & mut s ; | ^^^^^^ second mutable borrow occurs here 6 | 7 | println! ( \"{}, {}\" , r1 , r2 ); | -- first borrow later used here For more information about this error , try ` rustc -- explain E0499 ` . error : could not compile ` ownership ` due to previous error \u8fd9\u4e00\u9650\u5236\u4ee5\u4e00\u79cd\u975e\u5e38\u5c0f\u5fc3\u8c28\u614e\u7684\u65b9\u5f0f\u5141\u8bb8\u53ef\u53d8\u6027\uff0c \u9632\u6b62\u540c\u4e00\u65f6\u95f4\u5bf9\u540c\u4e00\u6570\u636e\u5b58\u5728\u591a\u4e2a\u53ef\u53d8\u5f15\u7528 \u3002\u65b0 Rustacean \u4eec\u7ecf\u5e38\u96be\u4ee5\u9002\u5e94\u8fd9\u4e00\u70b9\uff0c\u56e0\u4e3a\u5927\u90e8\u5206\u8bed\u8a00\u4e2d\u53d8\u91cf\u4efb\u4f55\u65f6\u5019\u90fd\u662f\u53ef\u53d8\u7684\u3002\u8fd9\u4e2a\u9650\u5236\u7684\u597d\u5904\u662f Rust \u53ef\u4ee5\u5728\u7f16\u8bd1\u65f6\u5c31\u907f\u514d\u6570\u636e\u7ade\u4e89\u3002 \u6570\u636e\u7ade\u4e89 \uff08data race\uff09\u7c7b\u4f3c\u4e8e\u7ade\u6001\u6761\u4ef6\uff0c\u5b83\u53ef\u7531\u8fd9\u4e09\u4e2a\u884c\u4e3a\u9020\u6210\uff1a \u4e24\u4e2a\u6216\u66f4\u591a\u6307\u9488\u540c\u65f6\u8bbf\u95ee\u540c\u4e00\u6570\u636e\u3002 \u81f3\u5c11\u6709\u4e00\u4e2a\u6307\u9488\u88ab\u7528\u6765\u5199\u5165\u6570\u636e\u3002 \u6ca1\u6709\u540c\u6b65\u6570\u636e\u8bbf\u95ee\u7684\u673a\u5236\u3002 \u6570\u636e\u7ade\u4e89\u4f1a\u5bfc\u81f4\u672a\u5b9a\u4e49\u884c\u4e3a\uff0c\u96be\u4ee5\u5728\u8fd0\u884c\u65f6\u8ffd\u8e2a\uff0c\u5e76\u4e14\u96be\u4ee5\u8bca\u65ad\u548c\u4fee\u590d\uff1bRust \u907f\u514d\u4e86\u8fd9\u79cd\u60c5\u51b5\u7684\u53d1\u751f\uff0c\u56e0\u4e3a\u5b83\u751a\u81f3\u4e0d\u4f1a\u7f16\u8bd1\u5b58\u5728\u6570\u636e\u7ade\u4e89\u7684\u4ee3\u7801\uff01 \u4e00\u5982\u65e2\u5f80\uff0c\u53ef\u4ee5\u4f7f\u7528\u5927\u62ec\u53f7\u6765\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u4f5c\u7528\u57df\uff0c\u4ee5\u5141\u8bb8\u62e5\u6709\u591a\u4e2a\u53ef\u53d8\u5f15\u7528\uff0c\u53ea\u662f\u4e0d\u80fd \u540c\u65f6 \u62e5\u6709\uff1a fn main () { let mut s = String :: from ( \"hello\" ); { let r1 = & mut s ; } // r1 \u5728\u8fd9\u91cc\u79bb\u5f00\u4e86\u4f5c\u7528\u57df\uff0c\u6240\u4ee5\u6211\u4eec\u5b8c\u5168\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u5f15\u7528 let r2 = & mut s ; } Rust \u5728\u540c\u65f6\u4f7f\u7528\u53ef\u53d8\u4e0e\u4e0d\u53ef\u53d8\u5f15\u7528\u65f6\u4e5f\u91c7\u7528\u7684\u7c7b\u4f3c\u7684\u89c4\u5219\u3002\u8fd9\u4e9b\u4ee3\u7801\u4f1a\u5bfc\u81f4\u4e00\u4e2a\u9519\u8bef\uff1a let mut s = String :: from ( \"hello\" ); let r1 = & s ; // \u6ca1\u95ee\u9898 let r2 = & s ; // \u6ca1\u95ee\u9898 let r3 = & mut s ; // \u5927\u95ee\u9898 println! ( \"{}, {}, and {}\" , r1 , r2 , r3 ); // \u4f7f\u7528\u4e0d\u53ef\u53d8\u5f15\u7528\u65f6\uff0c\u540c\u65f6\u53c8\u4f7f\u7528\u4e86\u53ef\u53d8\u5f15\u7528\u3002 \u9519\u8bef\u5982\u4e0b\uff1a $ cargo run Compiling ownership v0 . 1.0 ( file : ///projects/ownership) error [ E0502 ] : cannot borrow ` s ` as mutable because it is also borrowed as immutable - -> src / main . rs : 6 : 14 | 4 | let r1 = & s ; // no problem | -- immutable borrow occurs here 5 | let r2 = & s ; // no problem 6 | let r3 = & mut s ; // BIG PROBLEM | ^^^^^^ mutable borrow occurs here 7 | 8 | println! ( \"{}, {}, and {}\" , r1 , r2 , r3 ); | -- immutable borrow later used here For more information about this error , try ` rustc -- explain E0502 ` . error : could not compile ` ownership ` due to previous error \u54c7\u54e6\uff01\u6211\u4eec \u4e5f \u4e0d\u80fd\u5728\u62e5\u6709\u4e0d\u53ef\u53d8\u5f15\u7528\u7684\u540c\u65f6\u62e5\u6709\u53ef\u53d8\u5f15\u7528\u3002 \u6ce8\u610f \u4e00\u4e2a\u5f15\u7528\u7684\u4f5c\u7528\u57df\u4ece\u58f0\u660e\u7684\u5730\u65b9\u5f00\u59cb\u4e00\u76f4\u6301\u7eed\u5230\u6700\u540e\u4e00\u6b21\u4f7f\u7528\u4e3a\u6b62 \u3002\u4f8b\u5982\uff0c\u56e0\u4e3a\u6700\u540e\u4e00\u6b21\u4f7f\u7528 \u4e0d\u53ef\u53d8\u5f15\u7528 \uff08println!)\uff0c\u53d1\u751f\u5728\u58f0\u660e\u53ef\u53d8\u5f15\u7528\u4e4b\u524d\uff0c\u6240\u4ee5\u5982\u4e0b\u4ee3\u7801\u662f\u53ef\u4ee5\u7f16\u8bd1\u7684\uff1a let mut s = String :: from ( \"hello\" ); let r1 = & s ; // \u6ca1\u95ee\u9898 let r2 = & s ; // \u6ca1\u95ee\u9898 println! ( \"{} and {}\" , r1 , r2 ); // \u6b64\u4f4d\u7f6e\u4e4b\u540e r1 \u548c r2 \u4e0d\u518d\u4f7f\u7528 let r3 = & mut s ; // \u6ca1\u95ee\u9898 println! ( \"{}\" , r3 ); \u4e0d\u53ef\u53d8\u5f15\u7528 r1 \u548c r2 \u7684\u4f5c\u7528\u57df\u5728 println! \u6700\u540e\u4e00\u6b21\u4f7f\u7528\u4e4b\u540e\u7ed3\u675f\uff0c\u8fd9\u4e5f\u662f\u521b\u5efa\u53ef\u53d8\u5f15\u7528 r3 \u7684\u5730\u65b9\u3002\u5b83\u4eec\u7684\u4f5c\u7528\u57df \u6ca1\u6709\u91cd\u53e0 \uff0c\u6240\u4ee5\u4ee3\u7801\u662f\u53ef\u4ee5\u7f16\u8bd1\u7684\u3002 \u7f16\u8bd1\u5668\u5728\u4f5c\u7528\u57df\u7ed3\u675f\u4e4b\u524d\u5224\u65ad\u4e0d\u518d\u4f7f\u7528\u7684\u5f15\u7528\u7684\u80fd\u529b\u88ab\u79f0\u4e3a \u975e\u8bcd\u6cd5\u4f5c\u7528\u57df\u751f\u547d\u5468\u671f \uff08Non-Lexical Lifetimes\uff0c\u7b80\u79f0 NLL\uff09\u3002\u4f60\u53ef\u4ee5\u5728 The Edition Guide \u4e2d\u9605\u8bfb\u66f4\u591a\u5173\u4e8e\u5b83\u7684\u4fe1\u606f\u3002 \u60ac\u5782\u5f15\u7528\uff08Dangling References\uff09 \u6240\u8c13 \u60ac\u5782\u6307\u9488 \u662f\u5176\u6307\u5411\u7684\u5185\u5b58\u53ef\u80fd\u5df2\u7ecf\u88ab\u5206\u914d\u7ed9\u5176\u5b83\u6301\u6709\u8005\u3002\u76f8\u6bd4\u4e4b\u4e0b\uff0c\u5728 Rust \u4e2d\u7f16\u8bd1\u5668\u786e\u4fdd\u5f15\u7528\u6c38\u8fdc\u4e5f\u4e0d\u4f1a\u53d8\u6210\u60ac\u5782\u72b6\u6001\uff1a \u5f53\u4f60\u62e5\u6709\u4e00\u4e9b\u6570\u636e\u7684\u5f15\u7528\uff0c\u7f16\u8bd1\u5668\u786e\u4fdd\u6570\u636e\u4e0d\u4f1a\u5728\u5176\u5f15\u7528\u4e4b\u524d\u79bb\u5f00\u4f5c\u7528\u57df\u3002 \u5f53\u5c1d\u8bd5\u521b\u5efa\u4e00\u4e2a\u60ac\u5782\u5f15\u7528\u65f6\uff0cRust \u4f1a\u901a\u8fc7\u4e00\u4e2a\u7f16\u8bd1\u65f6\u9519\u8bef\u6765\u907f\u514d\uff1a fn main () { let reference_to_nothing = dangle (); } fn dangle () -> & String { // dangle \u8fd4\u56de\u4e00\u4e2a\u5b57\u7b26\u4e32\u7684\u5f15\u7528 let s = String :: from ( \"hello\" ); // s \u662f\u4e00\u4e2a\u65b0\u5b57\u7b26\u4e32 & s // \u8fd4\u56de\u5b57\u7b26\u4e32 s \u7684\u5f15\u7528 } // \u8fd9\u91cc s \u79bb\u5f00\u4f5c\u7528\u57df\u5e76\u88ab\u4e22\u5f03\u3002\u5176\u5185\u5b58\u88ab\u91ca\u653e\u3002 // \u5371\u9669\uff01 \u9519\u8bef: $ cargo run Compiling ownership v0.1.0 ( file:///projects/ownership ) error [ E0106 ] : missing lifetime specifier --> src/main.rs:5:16 | 5 | fn dangle () -> & String { | ^ expected named lifetime parameter | = help: this function 's return type contains a borrowed value, but there is no value for it to be borrowed from help: consider using the `' static ` lifetime | 5 | fn dangle () -> & ' static String { | ~~~~~~~~ For more information about this error, try ` rustc --explain E0106 ` . error: could not compile ` ownership ` due to previous error \u56e0\u4e3a s \u662f\u5728 dangle \u51fd\u6570\u5185\u521b\u5efa\u7684\uff0c\u5f53 dangle \u7684\u4ee3\u7801\u6267\u884c\u5b8c\u6bd5\u540e\uff0cs \u5c06\u88ab\u91ca\u653e\u3002\u4e0d\u8fc7\u6211\u4eec\u5c1d\u8bd5\u8fd4\u56de\u5b83\u7684\u5f15\u7528\u3002\u8fd9\u610f\u5473\u7740\u8fd9\u4e2a\u5f15\u7528\u4f1a\u6307\u5411\u4e00\u4e2a\u65e0\u6548\u7684 String\uff0c\u8fd9\u53ef\u4e0d\u5bf9\uff01Rust \u4e0d\u4f1a\u5141\u8bb8\u8fd9\u4e48\u505a\u3002 \u8fd9\u91cc\u7684\u89e3\u51b3\u65b9\u6cd5\u662f\u76f4\u63a5\u8fd4\u56de String\uff1a fn no_dangle () -> String { let s = String :: from ( \"hello\" ); s // \u76f4\u63a5\u8fd4\u56des // \u6240\u6709\u6743\u88ab\u79fb\u52a8\u51fa\u53bb\uff0c\u6240\u4ee5\u6ca1\u6709\u503c\u88ab\u91ca\u653e\u3002 } \u5f15\u7528\u7684\u89c4\u5219 \u5728\u4efb\u610f\u7ed9\u5b9a\u65f6\u95f4\uff0c\u8981\u4e48 \u53ea\u80fd\u6709\u4e00\u4e2a\u53ef\u53d8\u5f15\u7528\uff0c\u8981\u4e48 \u53ea\u80fd\u6709\u591a\u4e2a\u4e0d\u53ef\u53d8\u5f15\u7528\u3002 \u5f15\u7528\u5fc5\u987b\u603b\u662f\u6709\u6548\u7684\u3002 Slice\u7c7b\u578b slice \u5141\u8bb8\u4f60\u5f15\u7528\u96c6\u5408\u4e2d\u4e00\u6bb5\u8fde\u7eed\u7684\u5143\u7d20\u5e8f\u5217\uff0c\u800c\u4e0d\u7528\u5f15\u7528\u6574\u4e2a\u96c6\u5408\u3002 slice \u662f\u4e00\u7c7b\u5f15\u7528\uff0c\u6240\u4ee5\u5b83\u6ca1\u6709\u6240\u6709\u6743\u3002 \u5c0f\u7ec3\u4e60\uff1a \u7f16\u5199\u4e00\u4e2a\u51fd\u6570\uff0c\u8be5\u51fd\u6570\u63a5\u6536\u4e00\u4e2a\u7528\u7a7a\u683c\u5206\u9694\u5355\u8bcd\u7684\u5b57\u7b26\u4e32\uff0c\u5e76\u8fd4\u56de\u5728\u8be5\u5b57\u7b26\u4e32\u4e2d\u627e\u5230\u7684\u7b2c\u4e00\u4e2a\u5355\u8bcd, \u5982\u679c\u51fd\u6570\u5728\u8be5\u5b57\u7b26\u4e32\u4e2d\u5e76\u672a\u627e\u5230\u7a7a\u683c\uff0c\u5219\u6574\u4e2a\u5b57\u7b26\u4e32\u5c31\u662f\u4e00\u4e2a\u5355\u8bcd\uff0c\u6240\u4ee5\u5e94\u8be5\u8fd4\u56de\u6574\u4e2a\u5b57\u7b26\u4e32\u3002 fn first_word ( s : & String ) -> ? first_word \u51fd\u6570\u6709\u4e00\u4e2a\u53c2\u6570 &String \u3002\u56e0\u4e3a\u6211\u4eec\u4e0d\u9700\u8981\u6240\u6709\u6743\uff0c\u6240\u4ee5\u8fd9\u6ca1\u6709\u95ee\u9898\u3002\u4e0d\u8fc7\u5e94\u8be5\u8fd4\u56de\u4ec0\u4e48\u5462\uff1f\u6211\u4eec\u5e76\u6ca1\u6709\u4e00\u4e2a\u771f\u6b63\u83b7\u53d6 \u90e8\u5206 \u5b57\u7b26\u4e32\u7684\u529e\u6cd5\u3002\u4e0d\u8fc7\uff0c\u6211\u4eec\u53ef\u4ee5\u8fd4\u56de\u5355\u8bcd\u7ed3\u5c3e\u7684\u7d22\u5f15\uff0c\u7ed3\u5c3e\u7531\u4e00\u4e2a\u7a7a\u683c\u8868\u793a\u3002 fn first_word ( s : & String ) -> usize { // \u7528 as_bytes \u65b9\u6cd5\u5c06 String \u8f6c\u5316\u4e3a\u5b57\u8282\u6570\u7ec4 let bytes = s . as_bytes (); // \u4f7f\u7528 iter \u65b9\u6cd5\u5728\u5b57\u8282\u6570\u7ec4\u4e0a\u521b\u5efa\u4e00\u4e2a\u8fed\u4ee3\u5668\uff1a // enumerate \u5305\u88c5\u4e86 iter \u7684\u7ed3\u679c\uff0c\u5c06\u8fd9\u4e9b\u5143\u7d20\u4f5c\u4e3a\u5143\u7ec4\u7684\u4e00\u90e8\u5206\u6765\u8fd4\u56de\u3002 // enumerate \u8fd4\u56de\u7684\u5143\u7ec4\u4e2d\uff0c\u7b2c\u4e00\u4e2a\u5143\u7d20\u662f\u7d22\u5f15\uff0c\u7b2c\u4e8c\u4e2a\u5143\u7d20\u662f\u96c6\u5408\u4e2d\u5143\u7d20\u7684\u5f15\u7528\u3002 // \u56e0\u4e3a enumerate \u65b9\u6cd5\u8fd4\u56de\u4e00\u4e2a\u5143\u7ec4\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u6a21\u5f0f\u6765\u89e3\u6784 // \u5143\u7ec4\u4e2d\u7684 i \u662f\u7d22\u5f15\u800c\u5143\u7ec4\u4e2d\u7684 &item \u662f\u5355\u4e2a\u5b57\u8282\u3002 // \u56e0\u4e3a\u6211\u4eec\u4ece .iter().enumerate() \u4e2d\u83b7\u53d6\u4e86\u96c6\u5408\u5143\u7d20\u7684\u5f15\u7528\uff0c\u6240\u4ee5\u6a21\u5f0f\u4e2d\u4f7f\u7528\u4e86 &\u3002 for ( i , & item ) in bytes . iter (). enumerate () { // \u901a\u8fc7\u5b57\u8282\u7684\u5b57\u9762\u503c\u8bed\u6cd5\u6765\u5bfb\u627e\u4ee3\u8868\u7a7a\u683c\u7684\u5b57\u8282\u3002 // \u5982\u679c\u627e\u5230\u4e86\u4e00\u4e2a\u7a7a\u683c\uff0c\u8fd4\u56de\u5b83\u7684\u4f4d\u7f6e\u3002 if item == b' ' { return i ; } } // \u5426\u5219\uff0c\u4f7f\u7528 s.len() \u8fd4\u56de\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\uff1a s . len () } \u73b0\u5728\u6709\u4e86\u4e00\u4e2a\u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7b2c\u4e00\u4e2a\u5355\u8bcd\u7ed3\u5c3e\u7d22\u5f15\u7684\u65b9\u6cd5\uff0c\u4e0d\u8fc7\u8fd9\u6709\u4e00\u4e2a\u95ee\u9898\u3002 \u6211\u4eec\u8fd4\u56de\u4e86\u4e00\u4e2a\u72ec\u7acb\u7684 usize \uff0c\u4e0d\u8fc7\u5b83\u53ea\u5728 &String \u7684\u4e0a\u4e0b\u6587\u4e2d\u624d\u662f\u4e00\u4e2a\u6709\u610f\u4e49\u7684\u6570\u5b57\u3002 \u6362\u53e5\u8bdd\u8bf4\uff0c\u56e0\u4e3a\u5b83\u662f\u4e00\u4e2a\u4e0e String \u76f8\u5206\u79bb\u7684\u503c\uff0c\u65e0\u6cd5\u4fdd\u8bc1\u5c06\u6765\u5b83\u4ecd\u7136\u6709\u6548\u3002 fn main () { let mut s = String :: from ( \"hello world\" ); let word = first_word ( & s ); // word \u7684\u503c\u4e3a 5 s . clear (); // \u8fd9\u6e05\u7a7a\u4e86\u5b57\u7b26\u4e32\uff0c\u4f7f\u5176\u7b49\u4e8e \"\" // word \u5728\u6b64\u5904\u7684\u503c\u4ecd\u7136\u662f 5\uff0c // \u4f46\u662f\u6ca1\u6709\u66f4\u591a\u7684\u5b57\u7b26\u4e32\u8ba9\u6211\u4eec\u53ef\u4ee5\u6709\u6548\u5730\u5e94\u7528\u6570\u503c 5\u3002word \u7684\u503c\u73b0\u5728\u5b8c\u5168\u65e0\u6548\uff01 } \u8fd9\u4e2a\u7a0b\u5e8f\u7f16\u8bd1\u65f6\u6ca1\u6709\u4efb\u4f55\u9519\u8bef\uff0c\u800c\u4e14\u5728\u8c03\u7528 s.clear() \u4e4b\u540e\u4f7f\u7528 word \u4e5f\u4e0d\u4f1a\u51fa\u9519\u3002\u56e0\u4e3a word \u4e0e s \u72b6\u6001\u5b8c\u5168\u6ca1\u6709\u8054\u7cfb\uff0c\u6240\u4ee5 word \u4ecd\u7136\u5305\u542b\u503c 5\u3002 \u53ef\u4ee5\u5c1d\u8bd5\u7528\u503c 5 \u6765\u63d0\u53d6\u53d8\u91cf s \u7684\u7b2c\u4e00\u4e2a\u5355\u8bcd\uff0c\u4e0d\u8fc7\u8fd9\u662f\u6709 bug \u7684\uff0c\u56e0\u4e3a\u5728\u6211\u4eec\u5c06 5 \u4fdd\u5b58\u5230 word \u4e4b\u540e s \u7684\u5185\u5bb9\u5df2\u7ecf\u6539\u53d8\u3002 \u6211\u4eec\u4e0d\u5f97\u4e0d\u65f6\u523b\u62c5\u5fc3 word \u7684\u7d22\u5f15\u4e0e s \u4e2d\u7684\u6570\u636e\u4e0d\u518d\u540c\u6b65\uff0c\u8fd9\u5f88\u5570\u55e6\u4e14\u6613\u51fa\u9519\uff01\u5982\u679c\u7f16\u5199\u8fd9\u4e48\u4e00\u4e2a second_word \u51fd\u6570\u7684\u8bdd\uff0c\u7ba1\u7406\u7d22\u5f15\u8fd9\u4ef6\u4e8b\u5c06\u66f4\u52a0\u5bb9\u6613\u51fa\u95ee\u9898\u3002\u5b83\u7684\u7b7e\u540d\u770b\u8d77\u6765\u50cf\u8fd9\u6837\uff1a fn second_word ( s : & String ) -> ( usize , usize ) { \u73b0\u5728\u6211\u4eec\u8981\u8ddf\u8e2a\u4e00\u4e2a \u5f00\u59cb\u7d22\u5f15 \u548c \u4e00\u4e2a \u7ed3\u5c3e\u7d22\u5f15 \uff0c\u540c\u65f6\u6709\u4e86\u66f4\u591a\u4ece\u6570\u636e\u7684\u67d0\u4e2a\u7279\u5b9a\u72b6\u6001\u8ba1\u7b97\u800c\u6765\u7684\u503c\uff0c\u4f46\u90fd\u5b8c\u5168\u6ca1\u6709\u4e0e\u8fd9\u4e2a\u72b6\u6001\u76f8\u5173\u8054\u3002\u73b0\u5728\u6709\u4e09\u4e2a\u98d8\u5ffd\u4e0d\u5b9a\u7684\u4e0d\u76f8\u5173\u53d8\u91cf\u9700\u8981\u4fdd\u6301\u540c\u6b65\u3002 \u5b57\u7b26\u4e32Slice \u5b57\u7b26\u4e32 slice \uff08string slice\uff09\u662f String \u4e2d\u4e00\u90e8\u5206\u503c\u7684\u5f15\u7528\uff0c\u5b83\u770b\u8d77\u6765\u50cf\u8fd9\u6837\uff1a let s = String :: from ( \"hello world\" ); let hello = & s [ 0 .. 5 ]; // hello \u662f\u4e00\u4e2a\u90e8\u5206 String \u7684\u5f15\u7528\uff0c\u7531\u4e00\u4e2a\u989d\u5916\u7684 [0..5] \u90e8\u5206\u6307\u5b9a\u3002 let world = & s [ 6 .. 11 ]; // \u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a\u7531\u4e2d\u62ec\u53f7\u4e2d\u7684 [starting_index..ending_index] \u6307\u5b9a\u7684 range \u521b\u5efa\u4e00\u4e2a slice\uff0c\u5176\u4e2d starting_index \u662f slice \u7684\u7b2c\u4e00\u4e2a\u4f4d\u7f6e\uff0cending_index \u5219\u662f slice \u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\u7684\u540e\u4e00\u4e2a\u503c\u3002 \u5728\u5176\u5185\u90e8\uff0c slice \u7684\u6570\u636e\u7ed3\u6784\u5b58\u50a8\u4e86 slice \u7684\u5f00\u59cb\u4f4d\u7f6e\u548c\u957f\u5ea6\uff0c\u957f\u5ea6\u5bf9\u5e94\u4e8e ending_index \u51cf\u53bb starting_index \u7684\u503c\u3002 \u6240\u4ee5\u5bf9\u4e8e let world = &s[6..11]; \u7684\u60c5\u51b5\uff0cworld \u5c06\u662f\u4e00\u4e2a\u5305\u542b\u6307\u5411 s \u7d22\u5f15 6 \u7684\u6307\u9488\u548c\u957f\u5ea6\u503c 5 \u7684 slice\u3002 \u5bf9\u4e8e Rust \u7684 .. range \u8bed\u6cd5\uff0c\u5982\u679c\u60f3\u8981\u4ece\u7d22\u5f15 0 \u5f00\u59cb\uff0c\u53ef\u4ee5 \u4e0d\u5199\u4e24\u4e2a\u70b9\u53f7\u4e4b\u524d\u7684\u503c \u3002\u5982\u4e0b\u4e24\u4e2a\u8bed\u53e5\u662f\u76f8\u540c\u7684\uff1a let s = String :: from ( \"hello\" ); let slice = & s [ 0 .. 2 ]; let slice = & s [ .. 2 ]; \u4f9d\u6b64\u7c7b\u63a8\uff0c\u5982\u679c slice \u5305\u542b String \u7684\u6700\u540e\u4e00\u4e2a\u5b57\u8282\uff0c\u4e5f\u53ef\u4ee5 \u820d\u5f03\u5c3e\u90e8 \u7684\u6570\u5b57\u3002\u8fd9\u610f\u5473\u7740\u5982\u4e0b\u4e5f\u662f\u76f8\u540c\u7684\uff1a let s = String :: from ( \"hello\" ); let len = s . len (); let slice = & s [ 3 .. len ]; let slice = & s [ 3 .. ]; \u4e5f\u53ef\u4ee5 \u540c\u65f6\u820d\u5f03 \u8fd9\u4e24\u4e2a\u503c\u6765\u83b7\u53d6\u6574\u4e2a\u5b57\u7b26\u4e32\u7684 slice\u3002\u6240\u4ee5\u5982\u4e0b\u4ea6\u662f\u76f8\u540c\u7684\uff1a let s = String :: from ( \"hello\" ); let len = s . len (); let slice = & s [ 0 .. len ]; let slice = & s [ .. ]; \u6ce8\u610f \u5b57\u7b26\u4e32 slice range \u7684\u7d22\u5f15\u5fc5\u987b\u4f4d\u4e8e\u6709\u6548\u7684 UTF-8 \u5b57\u7b26\u8fb9\u754c\u5185\uff0c\u5982\u679c\u5c1d\u8bd5\u4ece\u4e00\u4e2a\u591a\u5b57\u8282\u5b57\u7b26\u7684\u4e2d\u95f4\u4f4d\u7f6e\u521b\u5efa\u5b57\u7b26\u4e32 slice\uff0c\u5219\u7a0b\u5e8f\u5c06\u4f1a\u56e0\u9519\u8bef\u800c\u9000\u51fa\u3002 \u51fa\u4e8e\u4ecb\u7ecd\u5b57\u7b26\u4e32 slice \u7684\u76ee\u7684\uff0c\u672c\u90e8\u5206\u5047\u8bbe\u53ea\u4f7f\u7528 ASCII \u5b57\u7b26\u96c6\uff1b\u7b2c\u516b\u7ae0\u7684 \u201c \u4f7f\u7528\u5b57\u7b26\u4e32\u5b58\u50a8 UTF-8 \u7f16\u7801\u7684\u6587\u672c \u201d \u90e8\u5206\u4f1a\u66f4\u52a0\u5168\u9762\u7684\u8ba8\u8bba UTF-8 \u5904\u7406\u95ee\u9898\u3002 \u91cd\u5199 first_word \u6765\u8fd4\u56de\u4e00\u4e2a slice \u3002 \u201c\u5b57\u7b26\u4e32 slice\u201d \u7684\u7c7b\u578b\u58f0\u660e\u5199\u4f5c &str \uff1a fn first_word ( s : & String ) -> & str { let bytes = s . as_bytes (); for ( i , & item ) in bytes . iter (). enumerate () { if item == b' ' { return & s [ 0 .. i ]; } } & s [ .. ] } \u73b0\u5728\u5f53\u8c03\u7528 first_word \u65f6\uff0c\u4f1a\u8fd4\u56de\u4e0e\u5e95\u5c42\u6570\u636e\u5173\u8054\u7684\u5355\u4e2a\u503c\u3002\u8fd9\u4e2a\u503c\u7531\u4e00\u4e2a slice \u5f00\u59cb\u4f4d\u7f6e\u7684\u5f15\u7528\u548c slice \u4e2d\u5143\u7d20\u7684\u6570\u91cf\u7ec4\u6210 \u3002 second_word \u51fd\u6570\u4e5f\u53ef\u4ee5\u6539\u4e3a\u8fd4\u56de\u4e00\u4e2a slice \uff1a fn second_word ( s : & String ) -> & str { \u73b0\u5728\u6709\u4e86\u4e00\u4e2a\u4e0d\u6613\u6df7\u6dc6\u4e14\u76f4\u89c2\u7684 API \u4e86\uff0c \u56e0\u4e3a\u7f16\u8bd1\u5668\u4f1a\u786e\u4fdd\u6307\u5411 String \u7684\u5f15\u7528\u6301\u7eed\u6709\u6548\u3002 \u4f7f\u7528 slice \u7248\u672c\u7684 first_word \u4f1a\u629b\u51fa\u4e00\u4e2a\u7f16\u8bd1\u65f6\u9519\u8bef\uff1a fn main () { let mut s = String :: from ( \"hello world\" ); let word = first_word ( & s ); s . clear (); // \u9519\u8bef! println! ( \"the first word is: {}\" , word ); } \u7f16\u8bd1\u9519\u8bef\uff1a $ cargo run Compiling ownership v0 . 1.0 ( file : ///projects/ownership) error [ E0502 ] : cannot borrow ` s ` as mutable because it is also borrowed as immutable - -> src / main . rs : 18 : 5 | 16 | let word = first_word ( & s ); | -- immutable borrow occurs here 17 | 18 | s . clear (); // error! | ^^^^^^^^^ mutable borrow occurs here 19 | 20 | println! ( \"the first word is: {}\" , word ); | ---- immutable borrow later used here For more information about this error , try ` rustc -- explain E0502 ` . error : could not compile ` ownership ` due to previous error \u56de\u5fc6\u4e00\u4e0b \u501f\u7528\u89c4\u5219 \uff0c\u5f53\u62e5\u6709\u67d0\u503c\u7684\u4e0d\u53ef\u53d8\u5f15\u7528\u65f6\uff0c\u5c31\u4e0d\u80fd\u518d\u83b7\u53d6\u4e00\u4e2a\u53ef\u53d8\u5f15\u7528\u3002\u56e0\u4e3a clear \u9700\u8981\u6e05\u7a7a String\uff0c\u5b83\u5c1d\u8bd5\u83b7\u53d6\u4e00\u4e2a\u53ef\u53d8\u5f15\u7528\u3002 \u5728\u8c03\u7528 clear \u4e4b\u540e\u7684 println! \u4f7f\u7528\u4e86 word \u4e2d\u7684\u5f15\u7528\uff0c\u6240\u4ee5\u8fd9\u4e2a\u4e0d\u53ef\u53d8\u7684\u5f15\u7528\u5728\u6b64\u65f6\u5fc5\u987b\u4ecd\u7136\u6709\u6548\u3002 Rust \u4e0d\u5141\u8bb8 clear \u4e2d\u7684\u53ef\u53d8\u5f15\u7528\u548c word \u4e2d\u7684\u4e0d\u53ef\u53d8\u5f15\u7528\u540c\u65f6\u5b58\u5728\uff0c\u56e0\u6b64\u7f16\u8bd1\u5931\u8d25\u3002 Rust \u4e0d\u4ec5\u4f7f\u5f97\u6211\u4eec\u7684 API \u7b80\u5355\u6613\u7528\uff0c\u4e5f\u5728\u7f16\u8bd1\u65f6\u5c31\u6d88\u9664\u4e86\u4e00\u6574\u7c7b\u7684\u9519\u8bef\uff01 \u5b57\u7b26\u4e32\u5b57\u9762\u503c\u5c31\u662f slice \u8fd8\u8bb0\u5f97\u8bb2\u5230\u8fc7\u5b57\u7b26\u4e32\u5b57\u9762\u503c\u88ab\u50a8\u5b58\u5728\u4e8c\u8fdb\u5236\u6587\u4ef6\u4e2d\u5417\uff1f\u73b0\u5728\u77e5\u9053 slice \u4e86\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u6b63\u786e\u5730\u7406\u89e3\u5b57\u7b26\u4e32\u5b57\u9762\u503c\u4e86\uff1a let s = \"Hello, world!\" ; \u8fd9\u91cc s \u7684\u7c7b\u578b\u662f &str \uff1a\u5b83\u662f\u4e00\u4e2a\u6307\u5411\u4e8c\u8fdb\u5236\u7a0b\u5e8f\u7279\u5b9a\u4f4d\u7f6e\u7684 slice\u3002\u8fd9\u4e5f\u5c31\u662f\u4e3a\u4ec0\u4e48\u5b57\u7b26\u4e32\u5b57\u9762\u503c\u662f\u4e0d\u53ef\u53d8\u7684\uff1b &str \u662f\u4e00\u4e2a\u4e0d\u53ef\u53d8\u5f15\u7528 \u3002 \u5b57\u7b26\u4e32 slice \u4f5c\u4e3a\u53c2\u6570 \u5728\u77e5\u9053\u4e86\u80fd\u591f\u83b7\u53d6\u5b57\u9762\u503c\u548c String \u7684 slice \u540e\uff0c\u6211\u4eec\u5bf9 first_word \u505a\u4e86\u6539\u8fdb\uff0c\u8fd9\u662f\u5b83\u7684\u7b7e\u540d\uff1a fn first_word ( s : & String ) -> & str { \u800c\u66f4\u6709\u7ecf\u9a8c\u7684 Rustacean \u4f1a\u7f16\u5199\u51fa\u8fd9\u6837\u7684\u51fd\u6570\u7b7e\u540d\uff0c\u56e0\u4e3a\u5b83\u4f7f\u5f97\u53ef\u4ee5\u5bf9 &String \u503c\u548c &str \u503c\u4f7f\u7528\u76f8\u540c\u7684\u51fd\u6570\uff1a fn first_word ( s : & str ) -> & str { \u5982\u679c\u6709\u4e00\u4e2a\u5b57\u7b26\u4e32 slice\uff0c\u53ef\u4ee5\u76f4\u63a5\u4f20\u9012\u5b83\u3002\u5982\u679c\u6709\u4e00\u4e2a String \uff0c\u5219\u53ef\u4ee5\u4f20\u9012\u6574\u4e2a String \u7684 slice \u6216\u5bf9 String \u7684\u5f15\u7528\u3002 \u8fd9\u79cd\u7075\u6d3b\u6027\u5229\u7528\u4e86 deref coercions \u7684\u4f18\u52bf\uff0c\u8fd9\u4e2a\u7279\u6027\u6211\u4eec\u5c06\u5728\u201c \u51fd\u6570\u548c\u65b9\u6cd5\u7684\u9690\u5f0f Deref \u5f3a\u5236\u8f6c\u6362 \u201d\u7ae0\u8282\u4e2d\u4ecb\u7ecd\u3002 \u5b9a\u4e49\u4e00\u4e2a\u83b7\u53d6\u5b57\u7b26\u4e32 slice \u800c\u4e0d\u662f String \u5f15\u7528\u7684\u51fd\u6570\u4f7f\u5f97\u6211\u4eec\u7684 API \u66f4\u52a0\u901a\u7528 \u5e76\u4e14\u4e0d\u4f1a\u4e22\u5931\u4efb\u4f55\u529f\u80fd\uff1a fn main () { let my_string = String :: from ( \"hello world\" ); // `first_word` \u9002\u7528\u4e8e `String`\uff08\u7684 slice\uff09\uff0c\u6574\u4f53\u6216\u5168\u90e8 let word = first_word ( & my_string [ 0 .. 6 ]); let word = first_word ( & my_string [ .. ]); // `first_word` \u4e5f\u9002\u7528\u4e8e `String` \u7684\u5f15\u7528\uff0c // \u8fd9\u7b49\u4ef7\u4e8e\u6574\u4e2a `String` \u7684 slice let word = first_word ( & my_string ); let my_string_literal = \"hello world\" ; // `first_word` \u9002\u7528\u4e8e\u5b57\u7b26\u4e32\u5b57\u9762\u503c\uff0c\u6574\u4f53\u6216\u5168\u90e8 let word = first_word ( & my_string_literal [ 0 .. 6 ]); let word = first_word ( & my_string_literal [ .. ]); // \u56e0\u4e3a\u5b57\u7b26\u4e32\u5b57\u9762\u503c\u5df2\u7ecf \u662f \u5b57\u7b26\u4e32 slice \u4e86\uff0c // \u8fd9\u4e5f\u662f\u9002\u7528\u7684\uff0c\u65e0\u9700 slice \u8bed\u6cd5\uff01 let word = first_word ( my_string_literal ); } \u5176\u4ed6\u7c7b\u578b\u7684 slice \u5b57\u7b26\u4e32 slice\uff0c\u6b63\u5982\u4f60\u60f3\u8c61\u7684\u90a3\u6837\uff0c\u662f\u9488\u5bf9\u5b57\u7b26\u4e32\u7684\u3002\u4e0d\u8fc7\u4e5f\u6709\u66f4\u901a\u7528\u7684 slice \u7c7b\u578b\u3002\u8003\u8651\u4e00\u4e0b\u8fd9\u4e2a\u6570\u7ec4\uff1a let a = [ 1 , 2 , 3 , 4 , 5 ]; \u5c31\u8ddf\u60f3\u8981\u83b7\u53d6\u5b57\u7b26\u4e32\u7684\u4e00\u90e8\u5206\u90a3\u6837\uff0c\u4e5f\u4f1a\u60f3\u8981\u5f15\u7528\u6570\u7ec4\u7684\u4e00\u90e8\u5206\u3002\u53ef\u4ee5\u8fd9\u6837\u505a\uff1a let a = [ 1 , 2 , 3 , 4 , 5 ]; let slice = & a [ 1 .. 3 ]; // \u8fd9\u4e2a slice \u7684\u7c7b\u578b\u662f &[i32]\u3002 assert_eq! ( slice , & [ 2 , 3 ]); \u5b83\u8ddf\u5b57\u7b26\u4e32 slice \u7684\u5de5\u4f5c\u65b9\u5f0f\u4e00\u6837\uff0c\u901a\u8fc7 \u5b58\u50a8\u7b2c\u4e00\u4e2a\u96c6\u5408\u5143\u7d20\u7684\u5f15\u7528\u548c\u4e00\u4e2a\u96c6\u5408\u603b\u957f\u5ea6 \u3002\u4f60\u53ef\u4ee5\u5bf9\u5176\u4ed6\u6240\u6709\u96c6\u5408\u4f7f\u7528\u8fd9\u7c7b slice\u3002\u7b2c\u516b\u7ae0\u8bb2\u5230 vector \u65f6\u4f1a\u8be6\u7ec6\u8ba8\u8bba\u8fd9\u4e9b\u96c6\u5408\u3002 \u603b\u7ed3 \u6240\u6709\u6743 \u3001 \u501f\u7528 \u548c slice \u8fd9\u4e9b\u6982\u5ff5\u8ba9 Rust \u7a0b\u5e8f\u5728\u7f16\u8bd1\u65f6\u786e\u4fdd\u5185\u5b58\u5b89\u5168\u3002 Rust \u8bed\u8a00\u63d0\u4f9b\u4e86\u8ddf\u5176\u4ed6\u7cfb\u7edf\u7f16\u7a0b\u8bed\u8a00\u76f8\u540c\u7684\u65b9\u5f0f\u6765\u63a7\u5236\u4f60\u4f7f\u7528\u7684\u5185\u5b58\uff0c\u4f46\u62e5\u6709\u6570\u636e\u6240\u6709\u8005\u5728\u79bb\u5f00\u4f5c\u7528\u57df\u540e\u81ea\u52a8\u6e05\u9664\u5176\u6570\u636e\u7684\u529f\u80fd\u610f\u5473\u7740\u4f60\u65e0\u987b\u989d\u5916\u7f16\u5199\u548c\u8c03\u8bd5\u76f8\u5173\u7684\u63a7\u5236\u4ee3\u7801\u3002","title":"\u6240\u6709\u6743"},{"location":"ownership/#_1","text":"Rust \u7684\u6838\u5fc3\u529f\u80fd\uff08\u4e4b\u4e00\uff09\u662f \u6240\u6709\u6743\uff08ownership\uff09\u3002 \u6240\u6709\u7a0b\u5e8f\u90fd\u5fc5\u987b\u7ba1\u7406\u5176\u8fd0\u884c\u65f6\u4f7f\u7528\u8ba1\u7b97\u673a\u5185\u5b58\u7684\u65b9\u5f0f\u3002 \u4e00\u4e9b\u8bed\u8a00\u4e2d\u5177\u6709\u5783\u573e\u56de\u6536\u673a\u5236\uff0c\u5728\u7a0b\u5e8f\u8fd0\u884c\u65f6\u6709\u89c4\u5f8b\u5730\u5bfb\u627e\u4e0d\u518d\u4f7f\u7528\u7684\u5185\u5b58\uff1b \u5728\u53e6\u4e00\u4e9b\u8bed\u8a00\u4e2d\uff0c\u7a0b\u5e8f\u5458\u5fc5\u987b\u4eb2\u81ea\u5206\u914d\u548c\u91ca\u653e\u5185\u5b58\u3002 Rust \u5219\u9009\u62e9\u4e86\u7b2c\u4e09\u79cd\u65b9\u5f0f\uff1a \u901a\u8fc7\u6240\u6709\u6743\u7cfb\u7edf\u7ba1\u7406\u5185\u5b58\uff0c\u7f16\u8bd1\u5668\u5728\u7f16\u8bd1\u65f6\u4f1a\u6839\u636e\u4e00\u7cfb\u5217\u7684\u89c4\u5219\u8fdb\u884c\u68c0\u67e5\u3002\u5982\u679c\u8fdd\u53cd\u4e86\u4efb\u4f55\u8fd9\u4e9b\u89c4\u5219\uff0c\u7a0b\u5e8f\u90fd\u4e0d\u80fd\u7f16\u8bd1\u3002\u5728\u8fd0\u884c\u65f6\uff0c\u6240\u6709\u6743\u7cfb\u7edf\u7684\u4efb\u4f55\u529f\u80fd\u90fd\u4e0d\u4f1a\u51cf\u6162\u7a0b\u5e8f\u3002","title":"\u6240\u6709\u6743"},{"location":"ownership/#_2","text":"\u6808\uff08Stack\uff09\u4e0e\u5806\uff08Heap\uff09 \u5728\u5f88\u591a\u8bed\u8a00\u4e2d\uff0c\u4f60\u5e76\u4e0d\u9700\u8981\u7ecf\u5e38\u8003\u8651\u5230\u6808\u4e0e\u5806\u3002\u4e0d\u8fc7\u5728\u50cf Rust \u8fd9\u6837\u7684\u7cfb\u7edf\u7f16\u7a0b\u8bed\u8a00\u4e2d\uff0c\u503c\u662f\u4f4d\u4e8e\u6808\u4e0a\u8fd8\u662f\u5806\u4e0a\u5728\u66f4\u5927\u7a0b\u5ea6\u4e0a\u5f71\u54cd\u4e86\u8bed\u8a00\u7684\u884c\u4e3a\u4ee5\u53ca\u4e3a\u4f55\u5fc5\u987b\u505a\u51fa\u8fd9\u6837\u7684\u6289\u62e9\u3002 \u6808\u548c\u5806\u90fd\u662f\u4ee3\u7801\u5728\u8fd0\u884c\u65f6\u53ef\u4f9b\u4f7f\u7528\u7684\u5185\u5b58\uff0c\u4f46\u662f\u5b83\u4eec\u7684\u7ed3\u6784\u4e0d\u540c\u3002 \u6808\u4ee5\u653e\u5165\u503c\u7684\u987a\u5e8f\u5b58\u50a8\u503c\u5e76\u4ee5\u76f8\u53cd\u987a\u5e8f\u53d6\u51fa\u503c \u3002\u8fd9\u4e5f\u88ab\u79f0\u4f5c \u540e\u8fdb\u5148\u51fa \uff08last in, first out\uff09\u3002\u60f3\u8c61\u4e00\u4e0b\u4e00\u53e0\u76d8\u5b50\uff1a\u5f53\u589e\u52a0\u66f4\u591a\u76d8\u5b50\u65f6\uff0c\u628a\u5b83\u4eec\u653e\u5728\u76d8\u5b50\u5806\u7684\u9876\u90e8\uff0c\u5f53\u9700\u8981\u76d8\u5b50\u65f6\uff0c\u4e5f\u4ece\u9876\u90e8\u62ff\u8d70\u3002\u4e0d\u80fd\u4ece\u4e2d\u95f4\u4e5f\u4e0d\u80fd\u4ece\u5e95\u90e8\u589e\u52a0\u6216\u62ff\u8d70\u76d8\u5b50\uff01\u589e\u52a0\u6570\u636e\u53eb\u505a \u8fdb\u6808 \uff08pushing onto the stack\uff09\uff0c\u800c\u79fb\u51fa\u6570\u636e\u53eb\u505a \u51fa\u6808 \uff08popping off the stack\uff09\u3002 \u6808\u4e2d\u7684\u6240\u6709\u6570\u636e\u90fd\u5fc5\u987b\u5360\u7528\u5df2\u77e5\u4e14\u56fa\u5b9a\u7684\u5927\u5c0f \u3002 \u5728\u7f16\u8bd1\u65f6\u5927\u5c0f\u672a\u77e5\u6216\u5927\u5c0f\u53ef\u80fd\u53d8\u5316\u7684\u6570\u636e\uff0c\u8981\u6539\u4e3a\u5b58\u50a8\u5728\u5806\u4e0a \u3002 \u5806\u662f\u7f3a\u4e4f\u7ec4\u7ec7\u7684\uff1a\u5f53\u5411\u5806\u653e\u5165\u6570\u636e\u65f6\uff0c\u4f60\u8981\u8bf7\u6c42\u4e00\u5b9a\u5927\u5c0f\u7684\u7a7a\u95f4\u3002 \u5185\u5b58\u5206\u914d\u5668 \uff08memory allocator\uff09\u5728\u5806\u7684\u67d0\u5904\u627e\u5230\u4e00\u5757\u8db3\u591f\u5927\u7684\u7a7a\u4f4d\uff0c\u628a\u5b83\u6807\u8bb0\u4e3a\u5df2\u4f7f\u7528\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a\u8868\u793a\u8be5\u4f4d\u7f6e\u5730\u5740\u7684 \u6307\u9488 \uff08pointer\uff09\u3002\u8fd9\u4e2a\u8fc7\u7a0b\u79f0\u4f5c \u5728\u5806\u4e0a\u5206\u914d\u5185\u5b58 \uff08allocating on the heap\uff09\uff0c\u6709\u65f6\u7b80\u79f0\u4e3a \u201c \u5206\u914d \u201d\uff08allocating\uff09\u3002\uff08\u5c06\u6570\u636e\u63a8\u5165\u6808\u4e2d\u5e76\u4e0d\u88ab\u8ba4\u4e3a\u662f\u5206\u914d\uff09\u3002\u56e0\u4e3a\u6307\u5411\u653e\u5165\u5806\u4e2d\u6570\u636e\u7684\u6307\u9488\u662f\u5df2\u77e5\u7684\u5e76\u4e14\u5927\u5c0f\u662f\u56fa\u5b9a\u7684\uff0c\u4f60\u53ef\u4ee5\u5c06\u8be5\u6307\u9488\u5b58\u50a8\u5728\u6808\u4e0a\uff0c\u4e0d\u8fc7\u5f53\u9700\u8981\u5b9e\u9645\u6570\u636e\u65f6\uff0c\u5fc5\u987b\u8bbf\u95ee\u6307\u9488\u3002\u60f3\u8c61\u4e00\u4e0b\u53bb\u9910\u9986\u5c31\u5ea7\u5403\u996d\u3002\u5f53\u8fdb\u5165\u65f6\uff0c\u4f60\u8bf4\u660e\u6709\u51e0\u4e2a\u4eba\uff0c\u9910\u9986\u5458\u5de5\u4f1a\u627e\u5230\u4e00\u4e2a\u591f\u5927\u7684\u7a7a\u684c\u5b50\u5e76\u9886\u4f60\u4eec\u8fc7\u53bb\u3002\u5982\u679c\u6709\u4eba\u6765\u8fdf\u4e86\uff0c\u4ed6\u4eec\u4e5f\u53ef\u4ee5\u901a\u8fc7\u8be2\u95ee\u6765\u627e\u5230\u4f60\u4eec\u5750\u5728\u54ea\u3002 \u5165\u6808\u6bd4\u5728\u5806\u4e0a\u5206\u914d\u5185\u5b58\u8981\u5feb \uff0c\u56e0\u4e3a\uff08\u5165\u6808\u65f6\uff09\u5206\u914d\u5668\u65e0\u9700\u4e3a\u5b58\u50a8\u65b0\u6570\u636e\u53bb\u641c\u7d22\u5185\u5b58\u7a7a\u95f4\uff1b\u5176\u4f4d\u7f6e\u603b\u662f\u5728\u6808\u9876\u3002\u76f8\u6bd4\u4e4b\u4e0b\uff0c \u5728\u5806\u4e0a\u5206\u914d\u5185\u5b58\u5219\u9700\u8981\u66f4\u591a\u7684\u5de5\u4f5c\uff0c\u8fd9\u662f\u56e0\u4e3a\u5206\u914d\u5668\u5fc5\u987b\u9996\u5148\u627e\u5230\u4e00\u5757\u8db3\u591f\u5b58\u653e\u6570\u636e\u7684\u5185\u5b58\u7a7a\u95f4\uff0c\u5e76\u63a5\u7740\u505a\u4e00\u4e9b\u8bb0\u5f55\u4e3a\u4e0b\u4e00\u6b21\u5206\u914d\u505a\u51c6\u5907\u3002 \u8bbf\u95ee\u5806\u4e0a\u7684\u6570\u636e\u6bd4\u8bbf\u95ee\u6808\u4e0a\u7684\u6570\u636e\u6162\uff0c\u56e0\u4e3a\u5fc5\u987b\u901a\u8fc7\u6307\u9488\u6765\u8bbf\u95ee \u3002\u73b0\u4ee3\u5904\u7406\u5668\u5728\u5185\u5b58\u4e2d\u8df3\u8f6c\u8d8a\u5c11\u5c31\u8d8a\u5feb\uff08\u7f13\u5b58\uff09\u3002\u7ee7\u7eed\u7c7b\u6bd4\uff0c\u5047\u8bbe\u6709\u4e00\u4e2a\u670d\u52a1\u5458\u5728\u9910\u5385\u91cc\u5904\u7406\u591a\u4e2a\u684c\u5b50\u7684\u70b9\u83dc\u3002\u5728\u4e00\u4e2a\u684c\u5b50\u62a5\u5b8c\u6240\u6709\u83dc\u540e\u518d\u79fb\u52a8\u5230\u4e0b\u4e00\u4e2a\u684c\u5b50\u662f\u6700\u6709\u6548\u7387\u7684\u3002\u4ece\u684c\u5b50 A \u542c\u4e00\u4e2a\u83dc\uff0c\u63a5\u7740\u684c\u5b50 B \u542c\u4e00\u4e2a\u83dc\uff0c\u7136\u540e\u518d\u684c\u5b50 A\uff0c\u7136\u540e\u518d\u684c\u5b50 B \u8fd9\u6837\u7684\u6d41\u7a0b\u4f1a\u66f4\u52a0\u7f13\u6162\u3002\u51fa\u4e8e\u540c\u6837\u539f\u56e0\uff0c\u5904\u7406\u5668\u5728\u5904\u7406\u7684\u6570\u636e\u5f7c\u6b64\u8f83\u8fd1\u7684\u65f6\u5019\uff08\u6bd4\u5982\u5728\u6808\u4e0a\uff09\u6bd4\u8f83\u8fdc\u7684\u65f6\u5019\uff08\u6bd4\u5982\u53ef\u80fd\u5728\u5806\u4e0a\uff09\u80fd\u66f4\u597d\u7684\u5de5\u4f5c\u3002 \u5f53\u4f60\u7684\u4ee3\u7801\u8c03\u7528\u4e00\u4e2a\u51fd\u6570\u65f6\uff0c\u4f20\u9012\u7ed9\u51fd\u6570\u7684\u503c\uff08\u5305\u62ec\u53ef\u80fd\u6307\u5411\u5806\u4e0a\u6570\u636e\u7684\u6307\u9488\uff09\u548c\u51fd\u6570\u7684\u5c40\u90e8\u53d8\u91cf\u88ab\u538b\u5165\u6808\u4e2d\u3002\u5f53\u51fd\u6570\u7ed3\u675f\u65f6\uff0c\u8fd9\u4e9b\u503c\u88ab\u79fb\u51fa\u6808\u3002 \u8ddf\u8e2a\u54ea\u90e8\u5206\u4ee3\u7801\u6b63\u5728\u4f7f\u7528\u5806\u4e0a\u7684\u54ea\u4e9b\u6570\u636e\uff0c\u6700\u5927\u9650\u5ea6\u7684\u51cf\u5c11\u5806\u4e0a\u7684\u91cd\u590d\u6570\u636e\u7684\u6570\u91cf\uff0c\u4ee5\u53ca\u6e05\u7406\u5806\u4e0a\u4e0d\u518d\u4f7f\u7528\u7684\u6570\u636e\u786e\u4fdd\u4e0d\u4f1a\u8017\u5c3d\u7a7a\u95f4\uff0c\u8fd9\u4e9b\u95ee\u9898\u6b63\u662f\u6240\u6709\u6743\u7cfb\u7edf\u8981\u5904\u7406\u7684 \u3002\u4e00\u65e6\u7406\u89e3\u4e86\u6240\u6709\u6743\uff0c\u4f60\u5c31\u4e0d\u9700\u8981\u7ecf\u5e38\u8003\u8651\u6808\u548c\u5806\u4e86\uff0c\u4e0d\u8fc7\u660e\u767d\u4e86\u6240\u6709\u6743\u7684\u4e3b\u8981\u76ee\u7684\u5c31\u662f\u4e3a\u4e86\u7ba1\u7406\u5806\u6570\u636e\uff0c\u80fd\u591f\u5e2e\u52a9\u89e3\u91ca\u4e3a\u4ec0\u4e48\u6240\u6709\u6743\u8981\u4ee5\u8fd9\u79cd\u65b9\u5f0f\u5de5\u4f5c\u3002","title":"\u7b80\u4ecb"},{"location":"ownership/#_3","text":"\u9996\u5148\uff0c\u8ba9\u6211\u4eec\u770b\u4e00\u4e0b\u6240\u6709\u6743\u7684\u89c4\u5219. Rust \u4e2d\u7684\u6bcf\u4e00\u4e2a\u503c\u90fd\u6709\u4e00\u4e2a \u6240\u6709\u8005 \uff08owner\uff09\u3002 \u503c\u5728\u4efb\u4e00\u65f6\u523b\u6709\u4e14\u53ea\u6709\u4e00\u4e2a\u6240\u6709\u8005\u3002 \u5f53\u6240\u6709\u8005\uff08\u53d8\u91cf\uff09\u79bb\u5f00\u4f5c\u7528\u57df\uff0c\u8fd9\u4e2a\u503c\u5c06\u88ab\u4e22\u5f03\u3002","title":"\u6240\u6709\u6743\u89c4\u5219"},{"location":"ownership/#_4","text":"\u4f5c\u7528\u57df\u662f\u4e00\u4e2a\u9879\uff08item\uff09\u5728\u7a0b\u5e8f\u4e2d\u6709\u6548\u7684\u8303\u56f4\u3002\u5047\u8bbe\u6709\u8fd9\u6837\u4e00\u4e2a\u53d8\u91cf\uff1a { // s \u5728\u8fd9\u91cc\u65e0\u6548, \u5b83\u5c1a\u672a\u58f0\u660e let s = \"hello\" ; // \u4ece\u6b64\u5904\u8d77\uff0cs \u662f\u6709\u6548\u7684 // \u4f7f\u7528 s println! ( \"s is {s}\" ) } // \u6b64\u4f5c\u7528\u57df\u5df2\u7ed3\u675f\uff0cs \u4e0d\u518d\u6709\u6548 \u4e24\u4e2a\u91cd\u8981\u7684\u65f6\u95f4\u70b9\uff1a \u5f53 s \u8fdb\u5165\u4f5c\u7528\u57df \u65f6\uff0c\u5b83\u5c31\u662f\u6709\u6548\u7684\u3002 \u8fd9\u4e00\u76f4\u6301\u7eed\u5230\u5b83 \u79bb\u5f00\u4f5c\u7528\u57df \u4e3a\u6b62\u3002","title":"\u53d8\u91cf\u4f5c\u7528\u57df"},{"location":"ownership/#string","text":"\u5df2\u7ecf\u89c1\u8fc7\u5b57\u7b26\u4e32\u5b57\u9762\u503c\uff0c\u5373\u88ab\u786c\u7f16\u7801\u8fdb\u7a0b\u5e8f\u91cc\u7684\u5b57\u7b26\u4e32\u503c\u3002\u5b57\u7b26\u4e32\u5b57\u9762\u503c\u662f\u5f88\u65b9\u4fbf\u7684\uff0c\u4e0d\u8fc7\u5b83\u4eec\u5e76\u4e0d\u9002\u5408\u4f7f\u7528\u6587\u672c\u7684\u6bcf\u4e00\u79cd\u573a\u666f\u3002\u539f\u56e0\u4e4b\u4e00\u5c31\u662f \u5b83\u4eec\u662f\u4e0d\u53ef\u53d8\u7684 \u3002\u53e6\u4e00\u4e2a\u539f\u56e0\u662f \u5e76\u975e\u6240\u6709\u5b57\u7b26\u4e32\u7684\u503c\u90fd\u80fd\u5728\u7f16\u5199\u4ee3\u7801\u65f6\u5c31\u77e5\u9053 \uff1a\u4f8b\u5982\uff0c\u8981\u662f\u60f3\u83b7\u53d6\u7528\u6237\u8f93\u5165\u5e76\u5b58\u50a8\u8be5\u600e\u4e48\u529e\u5462\uff1f\u4e3a\u6b64\uff0cRust \u6709\u7b2c\u4e8c\u4e2a\u5b57\u7b26\u4e32\u7c7b\u578b\uff0cString\u3002\u8fd9\u4e2a\u7c7b\u578b\u7ba1\u7406\u88ab\u5206\u914d\u5230\u5806\u4e0a\u7684\u6570\u636e\uff0c\u6240\u4ee5\u80fd\u591f\u5b58\u50a8\u5728\u7f16\u8bd1\u65f6\u672a\u77e5\u5927\u5c0f\u7684\u6587\u672c\u3002\u53ef\u4ee5\u4f7f\u7528 from \u51fd\u6570\u57fa\u4e8e\u5b57\u7b26\u4e32\u5b57\u9762\u503c\u6765\u521b\u5efa String \uff0c\u5982\u4e0b\uff1a let s = String :: from ( \"hello\" ); // \u4e24\u4e2a\u5192\u53f7 :: \u662f\u8fd0\u7b97\u7b26\uff0c\u5141\u8bb8\u5c06\u7279\u5b9a\u7684 from \u51fd\u6570\u7f6e\u4e8e String \u7c7b\u578b\u7684\u547d\u540d\u7a7a\u95f4\uff08namespace\uff09\u4e0b\uff0c\u800c\u4e0d\u9700\u8981\u4f7f\u7528\u7c7b\u4f3c string_from \u8fd9\u6837\u7684\u540d\u5b57\u3002 \u53ef\u4ee5 \u4fee\u6539\u6b64\u7c7b\u5b57\u7b26\u4e32 \uff1a let mut s = String :: from ( \"hello\" ); s . push_str ( \", world!\" ); // push_str() \u5728\u5b57\u7b26\u4e32\u540e\u8ffd\u52a0\u5b57\u9762\u503c println! ( \"{}\" , s ); // \u5c06\u6253\u5370 `hello, world!` // \u90a3\u4e48\u8fd9\u91cc\u6709\u4ec0\u4e48\u533a\u522b\u5462\uff1f // \u4e3a\u4ec0\u4e48 String \u53ef\u53d8\u800c\u5b57\u9762\u503c\u5374\u4e0d\u884c\u5462\uff1f // \u533a\u522b\u5728\u4e8e\u4e24\u4e2a\u7c7b\u578b\u5bf9\u5185\u5b58\u7684\u5904\u7406\u4e0a\u3002","title":"String \u7c7b\u578b"},{"location":"ownership/#_5","text":"\u5c31\u5b57\u7b26\u4e32\u5b57\u9762\u503c\u6765\u8bf4\uff0c\u6211\u4eec\u5728\u7f16\u8bd1\u65f6\u5c31\u77e5\u9053\u5176\u5185\u5bb9\uff0c\u6240\u4ee5\u6587\u672c\u88ab\u76f4\u63a5\u786c\u7f16\u7801\u8fdb\u6700\u7ec8\u7684\u53ef\u6267\u884c\u6587\u4ef6\u4e2d\u3002\u8fd9\u4f7f\u5f97\u5b57\u7b26\u4e32\u5b57\u9762\u503c\u5feb\u901f\u4e14\u9ad8\u6548\u3002 \u4e0d\u8fc7\u8fd9\u4e9b\u7279\u6027\u90fd\u53ea\u5f97\u76ca\u4e8e\u5b57\u7b26\u4e32\u5b57\u9762\u503c\u7684\u4e0d\u53ef\u53d8\u6027\u3002 \u4e0d\u5e78\u7684\u662f\uff0c\u6211\u4eec\u4e0d\u80fd\u4e3a\u4e86\u6bcf\u4e00\u4e2a\u5728\u7f16\u8bd1\u65f6\u5927\u5c0f\u672a\u77e5\u7684\u6587\u672c\u800c\u5c06\u4e00\u5757\u5185\u5b58\u653e\u5165\u4e8c\u8fdb\u5236\u6587\u4ef6\u4e2d\uff0c\u5e76\u4e14\u5b83\u7684\u5927\u5c0f\u8fd8\u53ef\u80fd\u968f\u7740\u7a0b\u5e8f\u8fd0\u884c\u800c\u6539\u53d8\u3002 \u5bf9\u4e8e String \u7c7b\u578b\uff0c\u4e3a\u4e86\u652f\u6301\u4e00\u4e2a\u53ef\u53d8\uff0c\u53ef\u589e\u957f\u7684\u6587\u672c\u7247\u6bb5\uff0c \u9700\u8981\u5728\u5806\u4e0a\u5206\u914d\u4e00\u5757\u5728\u7f16\u8bd1\u65f6\u672a\u77e5\u5927\u5c0f\u7684\u5185\u5b58\u6765\u5b58\u653e\u5185\u5bb9 \u3002\u8fd9\u610f\u5473\u7740\uff1a \u5fc5\u987b\u5728\u8fd0\u884c\u65f6\u5411\u5185\u5b58\u5206\u914d\u5668\uff08memory allocator\uff09\u8bf7\u6c42\u5185\u5b58\u3002 \u9700\u8981\u4e00\u4e2a\u5f53\u6211\u4eec\u5904\u7406\u5b8c String \u65f6\u5c06\u5185\u5b58\u8fd4\u56de\u7ed9\u5206\u914d\u5668\u7684\u65b9\u6cd5\u3002 \u7b2c\u4e00\u90e8\u5206\u7531\u6211\u4eec\u5b8c\u6210\uff1a\u5f53\u8c03\u7528 String::from \u65f6\uff0c\u5b83\u7684\u5b9e\u73b0 (implementation) \u8bf7\u6c42\u5176\u6240\u9700\u7684\u5185\u5b58\u3002\u8fd9\u5728\u7f16\u7a0b\u8bed\u8a00\u4e2d\u662f\u975e\u5e38\u901a\u7528\u7684\u3002 \u7136\u800c\uff0c\u7b2c\u4e8c\u90e8\u5206\u5b9e\u73b0\u8d77\u6765\u5c31\u5404\u6709\u533a\u522b\u4e86\u3002\u5728\u6709 \u5783\u573e\u56de\u6536 \uff08garbage collector\uff0c GC \uff09\u7684\u8bed\u8a00\u4e2d\uff0c GC \u8bb0\u5f55\u5e76\u6e05\u9664\u4e0d\u518d\u4f7f\u7528\u7684\u5185\u5b58\uff0c\u800c\u6211\u4eec\u5e76\u4e0d\u9700\u8981\u5173\u5fc3\u5b83\u3002\u5728\u5927\u90e8\u5206\u6ca1\u6709 GC \u7684\u8bed\u8a00\u4e2d\uff0c\u8bc6\u522b\u51fa\u4e0d\u518d\u4f7f\u7528\u7684\u5185\u5b58\u5e76\u8c03\u7528\u4ee3\u7801\u663e\u5f0f\u91ca\u653e\u5c31\u662f\u6211\u4eec\u7684\u8d23\u4efb\u4e86\uff0c\u8ddf\u8bf7\u6c42\u5185\u5b58\u7684\u65f6\u5019\u4e00\u6837\u3002\u4ece\u5386\u53f2\u7684\u89d2\u5ea6\u4e0a\u8bf4\u6b63\u786e\u5904\u7406\u5185\u5b58\u56de\u6536\u66fe\u7ecf\u662f\u4e00\u4e2a\u56f0\u96be\u7684\u7f16\u7a0b\u95ee\u9898\u3002\u5982\u679c\u5fd8\u8bb0\u56de\u6536\u4e86\u4f1a\u6d6a\u8d39\u5185\u5b58\u3002\u5982\u679c\u8fc7\u65e9\u56de\u6536\u4e86\uff0c\u5c06\u4f1a\u51fa\u73b0\u65e0\u6548\u53d8\u91cf\u3002\u5982\u679c\u91cd\u590d\u56de\u6536\uff0c\u8fd9\u4e5f\u662f\u4e2a bug\u3002\u6211\u4eec\u9700\u8981 \u7cbe\u786e\u7684\u4e3a\u4e00\u4e2a allocate \u914d\u5bf9\u4e00\u4e2a free \u3002 Rust \u91c7\u53d6\u4e86\u4e00\u4e2a\u4e0d\u540c\u7684\u7b56\u7565\uff1a \u5185\u5b58\u5728\u62e5\u6709\u5b83\u7684\u53d8\u91cf\u79bb\u5f00\u4f5c\u7528\u57df\u540e\u5c31\u88ab\u81ea\u52a8\u91ca\u653e \u3002\u4e0b\u9762\u662f\u4f5c\u7528\u57df\u4f8b\u5b50\u7684\u4e00\u4e2a\u4f7f\u7528 String \u800c\u4e0d\u662f\u5b57\u7b26\u4e32\u5b57\u9762\u503c\u7684\u7248\u672c\uff1a { let s = String :: from ( \"hello\" ); // \u4ece\u6b64\u5904\u8d77\uff0cs \u662f\u6709\u6548\u7684 // \u4f7f\u7528 s println! ( \"s is {s}\" ) } // \u6b64\u4f5c\u7528\u57df\u5df2\u7ed3\u675f\uff0c // s \u4e0d\u518d\u6709\u6548 \u5f53\u53d8\u91cf\u79bb\u5f00\u4f5c\u7528\u57df\uff0cRust \u4e3a\u6211\u4eec\u8c03\u7528\u4e00\u4e2a\u7279\u6b8a\u7684\u51fd\u6570\u3002\u8fd9\u4e2a\u51fd\u6570\u53eb\u505a drop \uff0cRust \u5728\u7ed3\u5c3e\u7684 } \u5904\u81ea\u52a8\u8c03\u7528 drop \u3002","title":"\u5185\u5b58\u4e0e\u5206\u914d"},{"location":"ownership/#_6","text":"\u591a\u4e2a\u53d8\u91cf\u53ef\u4ee5\u91c7\u53d6\u4e0d\u540c\u7684\u65b9\u5f0f\u4e0e\u540c\u4e00\u6570\u636e\u8fdb\u884c\u4ea4\u4e92\u3002 fn main () { let x = 5 ; let y = x ; // \u5c06\u53d8\u91cf x \u7684\u6574\u6570\u503c\u8d4b\u7ed9 y } \u201c\u5c06 5 \u7ed1\u5b9a\u5230 x\uff1b\u63a5\u7740\u751f\u6210\u4e00\u4e2a\u503c x \u7684\u62f7\u8d1d\u5e76\u7ed1\u5b9a\u5230 y\u201d\u3002 \u73b0\u5728\u6709\u4e86\u4e24\u4e2a\u53d8\u91cf\uff0cx \u548c y\uff0c\u90fd\u7b49\u4e8e 5\u3002\u8fd9\u4e5f\u6b63\u662f\u4e8b\u5b9e\u4e0a\u53d1\u751f\u4e86\u7684\uff0c\u56e0\u4e3a\u6574\u6570\u662f\u6709 \u5df2\u77e5\u56fa\u5b9a\u5927\u5c0f \u7684\u7b80\u5355\u503c\uff0c\u6240\u4ee5\u8fd9 \u4e24\u4e2a 5 \u88ab\u653e\u5165\u4e86\u6808\u4e2d \u3002 String \u7248\u672c\uff1a let s1 = String :: from ( \"hello\" ); let s2 = s1 ; // \u5f53\u6211\u4eec\u5c06 s1 \u8d4b\u503c\u7ed9 s2\uff0cString \u7684\u6570\u636e\u88ab\u590d\u5236\u4e86\uff0c\u8fd9\u610f\u5473\u7740\u6211\u4eec\u4ece\u6808\u4e0a\u62f7\u8d1d\u4e86\u5b83\u7684\u6307\u9488\u3001\u957f\u5ea6\u548c\u5bb9\u91cf\u3002 // Rust\u5e76\u6ca1\u6709\u590d\u5236\u6307\u9488\u6307\u5411\u7684\u5806\u4e0a\u6570\u636e\u3002 // \u5982\u679c Rust \u4e5f\u62f7\u8d1d\u4e86\u5806\u4e0a\u7684\u6570\u636e\uff0c\u90a3\u4e48\u64cd\u4f5c s2 = s1 \u5728\u5806\u4e0a\u6570\u636e\u6bd4\u8f83\u5927\u7684\u65f6\u5019\u4f1a\u5bf9\u8fd0\u884c\u65f6\u6027\u80fd\u9020\u6210\u975e\u5e38\u5927\u7684\u5f71\u54cd\u3002 \u8fc7\u5f53\u53d8\u91cf\u79bb\u5f00\u4f5c\u7528\u57df\u540e\uff0cRust \u81ea\u52a8\u8c03\u7528 drop \u51fd\u6570\u5e76\u6e05\u7406\u53d8\u91cf\u7684\u5806\u5185\u5b58\u3002\u4e0d\u8fc7\u4e24\u4e2a\u6570\u636e\u6307\u9488\u6307\u5411\u4e86\u540c\u4e00\u4f4d\u7f6e\u3002 \u8fd9\u5c31\u6709\u4e86\u4e00\u4e2a\u95ee\u9898\uff1a\u5f53 s2 \u548c s1 \u79bb\u5f00\u4f5c\u7528\u57df\uff0c\u4ed6\u4eec\u90fd\u4f1a\u5c1d\u8bd5\u91ca\u653e\u76f8\u540c\u7684\u5185\u5b58\u3002 \u8fd9\u662f\u4e00\u4e2a\u53eb\u505a \u4e8c\u6b21\u91ca\u653e \uff08double free\uff09\u7684\u9519\u8bef\uff0c\u4e5f\u662f\u4e4b\u524d\u63d0\u5230\u8fc7\u7684\u5185\u5b58\u5b89\u5168\u6027 bug \u4e4b\u4e00\u3002 \u4e24\u6b21\u91ca\u653e \uff08\u76f8\u540c\uff09\u5185\u5b58\u4f1a\u5bfc\u81f4\u5185\u5b58\u6c61\u67d3\uff0c\u5b83\u53ef\u80fd\u4f1a\u5bfc\u81f4\u6f5c\u5728\u7684\u5b89\u5168\u6f0f\u6d1e\u3002 \u4e3a\u4e86\u786e\u4fdd\u5185\u5b58\u5b89\u5168\uff0c\u5728 let s2 = s1 \u4e4b\u540e\uff0cRust \u8ba4\u4e3a s1 \u4e0d\u518d\u6709\u6548\uff0c\u56e0\u6b64 Rust \u4e0d\u9700\u8981\u5728 s1 \u79bb\u5f00\u4f5c\u7528\u57df\u540e\u6e05\u7406\u4efb\u4f55\u4e1c\u897f\u3002 \u5728 s2 \u88ab\u521b\u5efa\u4e4b\u540e\u5c1d\u8bd5\u4f7f\u7528 s1 \u4f1a\u53d1\u751f\u4ec0\u4e48\uff1b\u8fd9\u6bb5\u4ee3\u7801\u4e0d\u80fd\u8fd0\u884c\uff1a let s1 = String :: from ( \"hello\" ); let s2 = s1 ; println! ( \"{}, world!\" , s1 ); // \u4f1a\u5f97\u5230\u4e00\u4e2a\u9519\u8bef: value borrowed here after move // \u56e0\u4e3a Rust \u7981\u6b62\u4f7f\u7528\u65e0\u6548\u7684\u5f15\u7528\u3002 \u5982\u679c\u5728\u5176\u4ed6\u8bed\u8a00\u4e2d\u542c\u8bf4\u8fc7\u672f\u8bed \u6d45\u62f7\u8d1d \uff08shallow copy\uff09\u548c \u6df1\u62f7\u8d1d \uff08deep copy\uff09\uff0c\u90a3\u4e48\u62f7\u8d1d\u6307\u9488\u3001\u957f\u5ea6\u548c\u5bb9\u91cf\u800c\u4e0d\u62f7\u8d1d\u6570\u636e\u53ef\u80fd\u542c\u8d77\u6765\u50cf\u6d45\u62f7\u8d1d\u3002\u4e0d\u8fc7\u56e0\u4e3a Rust \u540c\u65f6\u4f7f\u7b2c\u4e00\u4e2a\u53d8\u91cf\u65e0\u6548\u4e86\uff0c\u8fd9\u4e2a\u64cd\u4f5c\u88ab\u79f0\u4e3a \u79fb\u52a8 \uff08move\uff09\uff0c\u800c\u4e0d\u662f\u6d45\u62f7\u8d1d\u3002\u4e0a\u9762\u7684\u4f8b\u5b50\u53ef\u4ee5\u89e3\u8bfb\u4e3a s1 \u88ab \u79fb\u52a8 \u5230\u4e86 s2 \u4e2d\u3002 \u8fd9\u6837\u5c31\u89e3\u51b3\u4e86\u4e8c\u6b21\u91ca\u653e\u7684\u95ee\u9898\uff01\u56e0\u4e3a\u53ea\u6709 s2 \u662f\u6709\u6548\u7684\uff0c\u5f53\u5176\u79bb\u5f00\u4f5c\u7528\u57df\uff0c\u5b83\u5c31\u91ca\u653e\u4e86\u81ea\u5df1\u7684\u5185\u5b58\u3002 \u8fd9\u91cc\u8fd8\u9690\u542b\u4e86\u4e00\u4e2a\u8bbe\u8ba1\u9009\u62e9\uff1a Rust \u6c38\u8fdc\u4e5f\u4e0d\u4f1a\u81ea\u52a8\u521b\u5efa\u6570\u636e\u7684 \u201c\u6df1\u62f7\u8d1d\u201d \u3002\u56e0\u6b64\uff0c\u4efb\u4f55 \u81ea\u52a8 \u7684\u590d\u5236\u53ef\u4ee5\u88ab\u8ba4\u4e3a\u5bf9\u8fd0\u884c\u65f6\u6027\u80fd\u5f71\u54cd\u8f83\u5c0f\u3002","title":"\u6570\u636e\u4ea4\u4e92\uff1a\u79fb\u52a8"},{"location":"ownership/#_7","text":"\u5982\u679c \u786e\u5b9e \u9700\u8981\u6df1\u5ea6\u590d\u5236 String \u4e2d\u5806\u4e0a\u7684\u6570\u636e\uff0c\u800c\u4e0d\u4ec5\u4ec5\u662f\u6808\u4e0a\u7684\u6570\u636e\uff0c\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a\u53eb\u505a clone \u7684\u901a\u7528\u51fd\u6570\u3002 let s1 = String :: from ( \"hello\" ); let s2 = s1 . clone (); println! ( \"s1 = {}, s2 = {}\" , s1 , s2 ); \u8fd9\u6bb5\u4ee3\u7801\u80fd\u6b63\u5e38\u8fd0\u884c\uff0c\u8fd9\u91cc\u5806\u4e0a\u7684\u6570\u636e \u786e\u5b9e \u88ab\u590d\u5236\u4e86\u3002 \u5f53\u51fa\u73b0 clone \u8c03\u7528\u65f6\uff0c\u4f60\u77e5\u9053\u4e00\u4e9b\u7279\u5b9a\u7684\u4ee3\u7801\u88ab\u6267\u884c\u800c\u4e14\u8fd9\u4e9b\u4ee3\u7801\u53ef\u80fd\u76f8\u5f53\u6d88\u8017\u8d44\u6e90\u3002","title":"\u6570\u636e\u4ea4\u4e92\uff1a\u514b\u9686"},{"location":"ownership/#_8","text":"\u8fd9\u91cc\u8fd8\u6709\u4e00\u4e2a\u6ca1\u6709\u63d0\u5230\u7684\u5c0f\u7a8d\u95e8\u3002\u8fd9\u4e9b\u4ee3\u7801\u4f7f\u7528\u4e86\u6574\u578b\u5e76\u4e14\u662f\u6709\u6548\u7684! let x = 5 ; let y = x ; println! ( \"x = {}, y = {}\" , x , y ); \u4f46\u8fd9\u6bb5\u4ee3\u7801\u4f3c\u4e4e\u4e0e\u521a\u521a\u5b66\u5230\u7684\u5185\u5bb9\u76f8\u77db\u76fe\uff1a\u6ca1\u6709\u8c03\u7528 clone\uff0c\u4e0d\u8fc7 x \u4f9d\u7136\u6709\u6548\u4e14\u6ca1\u6709\u88ab\u79fb\u52a8\u5230 y \u4e2d\u3002 \u539f\u56e0\u662f\u50cf\u6574\u578b\u8fd9\u6837\u7684\u5728\u7f16\u8bd1\u65f6\u5df2\u77e5\u5927\u5c0f\u7684\u7c7b\u578b\u88ab\u6574\u4e2a\u5b58\u50a8\u5728\u6808\u4e0a\uff0c\u6240\u4ee5\u62f7\u8d1d\u5176\u5b9e\u9645\u7684\u503c\u662f\u5feb\u901f\u7684\u3002\u8fd9\u610f\u5473\u7740\u6ca1\u6709\u7406\u7531\u5728\u521b\u5efa\u53d8\u91cf y \u540e\u4f7f x \u65e0\u6548\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c \u8fd9\u91cc\u6ca1\u6709\u6df1\u6d45\u62f7\u8d1d\u7684\u533a\u522b \uff0c\u6240\u4ee5\u8fd9\u91cc\u8c03\u7528 clone \u5e76\u4e0d\u4f1a\u4e0e\u901a\u5e38\u7684\u6d45\u62f7\u8d1d\u6709\u4ec0\u4e48\u4e0d\u540c\uff0c\u6211\u4eec\u53ef\u4ee5\u4e0d\u7528\u7ba1\u5b83\u3002 Rust \u6709\u4e00\u4e2a\u53eb\u505a Copy trait \u7684\u7279\u6b8a\u6ce8\u89e3\uff0c\u53ef\u4ee5\u7528\u5728\u7c7b\u4f3c\u6574\u578b\u8fd9\u6837\u7684\u5b58\u50a8\u5728\u6808\u4e0a\u7684\u7c7b\u578b\u4e0a\uff08 \u7b2c\u5341\u7ae0 \u5c06\u4f1a\u8be6\u7ec6\u8bb2\u89e3 trait\uff09\u3002\u5982\u679c\u4e00\u4e2a\u7c7b\u578b\u5b9e\u73b0\u4e86 Copy trait \uff0c\u90a3\u4e48\u4e00\u4e2a\u65e7\u7684\u53d8\u91cf\u5728\u5c06\u5176\u8d4b\u503c\u7ed9\u5176\u4ed6\u53d8\u91cf\u540e\u4ecd\u7136\u53ef\u7528\u3002 Rust \u4e0d\u5141\u8bb8\u81ea\u8eab\u6216\u5176\u4efb\u4f55\u90e8\u5206\u5b9e\u73b0\u4e86 Drop trait \u7684\u7c7b\u578b\u4f7f\u7528 Copy trait \u3002\u5982\u679c\u6211\u4eec\u5bf9\u5176\u503c\u79bb\u5f00\u4f5c\u7528\u57df\u65f6\u9700\u8981\u7279\u6b8a\u5904\u7406\u7684\u7c7b\u578b\u4f7f\u7528 Copy \u6ce8\u89e3\uff0c\u5c06\u4f1a\u51fa\u73b0\u4e00\u4e2a\u7f16\u8bd1\u65f6\u9519\u8bef\u3002\u8981\u5b66\u4e60\u5982\u4f55\u4e3a\u4f60\u7684\u7c7b\u578b\u6dfb\u52a0 Copy \u6ce8\u89e3\u4ee5\u5b9e\u73b0\u8be5 trait\uff0c\u8bf7\u9605\u8bfb \u9644\u5f55 C \u4e2d\u7684 \u201c\u53ef\u6d3e\u751f\u7684 trait\u201d \u3002 \u90a3\u4e48\u54ea\u4e9b\u7c7b\u578b\u5b9e\u73b0\u4e86 Copy trait \u5462\uff1f\u53ef\u4ee5\u67e5\u770b\u7ed9\u5b9a\u7c7b\u578b\u7684\u6587\u6863\u6765\u786e\u8ba4\uff0c\u4e0d\u8fc7\u4f5c\u4e3a\u4e00\u4e2a\u901a\u7528\u7684\u89c4\u5219\uff0c\u4efb\u4f55\u4e00\u7ec4\u7b80\u5355\u6807\u91cf\u503c\u7684\u7ec4\u5408\u90fd\u53ef\u4ee5\u5b9e\u73b0 Copy\uff0c\u4efb\u4f55\u4e0d\u9700\u8981\u5206\u914d\u5185\u5b58\u6216\u67d0\u79cd\u5f62\u5f0f\u8d44\u6e90\u7684\u7c7b\u578b\u90fd\u53ef\u4ee5\u5b9e\u73b0 Copy \u3002\u5982\u4e0b\u662f\u4e00\u4e9b Copy \u7684\u7c7b\u578b\uff1a \u6240\u6709\u6574\u6570\u7c7b\u578b\uff0c\u6bd4\u5982 u32\u3002 \u5e03\u5c14\u7c7b\u578b\uff0cbool\uff0c\u5b83\u7684\u503c\u662f true \u548c false\u3002 \u6240\u6709\u6d6e\u70b9\u6570\u7c7b\u578b\uff0c\u6bd4\u5982 f64\u3002 \u5b57\u7b26\u7c7b\u578b\uff0cchar\u3002 \u5143\u7ec4\uff0c\u5f53\u4e14\u4ec5\u5f53\u5176\u5305\u542b\u7684\u7c7b\u578b\u4e5f\u90fd\u5b9e\u73b0 Copy \u7684\u65f6\u5019\u3002\u6bd4\u5982\uff0c(i32, i32) \u5b9e\u73b0\u4e86 Copy\uff0c\u4f46 (i32, String) \u5c31\u6ca1\u6709\u3002","title":"\u62f7\u8d1d"},{"location":"ownership/#_9","text":"\u5c06\u503c\u4f20\u9012\u7ed9\u51fd\u6570\u4e0e\u7ed9\u53d8\u91cf\u8d4b\u503c\u7684\u539f\u7406\u76f8\u4f3c\u3002\u5411\u51fd\u6570\u4f20\u9012\u503c\u53ef\u80fd\u4f1a\u79fb\u52a8\u6216\u8005\u590d\u5236\uff0c\u5c31\u50cf\u8d4b\u503c\u8bed\u53e5\u4e00\u6837\u3002 fn main () { let s = String :: from ( \"hello\" ); // s \u8fdb\u5165\u4f5c\u7528\u57df takes_ownership ( s ); // s \u7684\u503c\u79fb\u52a8\u5230\u51fd\u6570\u91cc ... // ... \u6240\u4ee5\u5230\u8fd9\u91cc\u4e0d\u518d\u6709\u6548 let x = 5 ; // x \u8fdb\u5165\u4f5c\u7528\u57df makes_copy ( x ); // x \u5e94\u8be5\u79fb\u52a8\u51fd\u6570\u91cc\uff0c // \u4f46 i32 \u662f Copy \u7684\uff0c // \u6240\u4ee5\u5728\u540e\u9762\u53ef\u7ee7\u7eed\u4f7f\u7528 x } // \u8fd9\u91cc, x \u5148\u79fb\u51fa\u4e86\u4f5c\u7528\u57df\uff0c\u7136\u540e\u662f s\u3002\u4f46\u56e0\u4e3a s \u7684\u503c\u5df2\u88ab\u79fb\u8d70\uff0c // \u6ca1\u6709\u7279\u6b8a\u4e4b\u5904 fn takes_ownership ( some_string : String ) { // some_string \u8fdb\u5165\u4f5c\u7528\u57df println! ( \"{}\" , some_string ); } // \u8fd9\u91cc\uff0csome_string \u79fb\u51fa\u4f5c\u7528\u57df\u5e76\u8c03\u7528 `drop` \u65b9\u6cd5\u3002 // \u5360\u7528\u7684\u5185\u5b58\u88ab\u91ca\u653e fn makes_copy ( some_integer : i32 ) { // some_integer \u8fdb\u5165\u4f5c\u7528\u57df println! ( \"{}\" , some_integer ); } // \u8fd9\u91cc\uff0csome_integer \u79fb\u51fa\u4f5c\u7528\u57df\u3002\u6ca1\u6709\u7279\u6b8a\u4e4b\u5904 \u5f53\u5c1d\u8bd5\u5728\u8c03\u7528 takes_ownership \u540e\u4f7f\u7528 s \u65f6\uff0cRust \u4f1a\u629b\u51fa\u4e00\u4e2a\u7f16\u8bd1\u65f6\u9519\u8bef\u3002\u8fd9\u4e9b\u9759\u6001\u68c0\u67e5\u4f7f\u6211\u4eec\u514d\u4e8e\u72af\u9519\u3002 \u8bd5\u8bd5\u5728 main \u51fd\u6570\u4e2d\u6dfb\u52a0\u4f7f\u7528 s \u548c x \u7684\u4ee3\u7801\u6765\u770b\u770b\u54ea\u91cc\u80fd\u4f7f\u7528\u4ed6\u4eec\uff0c\u4ee5\u53ca\u6240\u6709\u6743\u89c4\u5219\u4f1a\u5728\u54ea\u91cc\u963b\u6b62\u6211\u4eec\u8fd9\u4e48\u505a\u3002","title":"\u6240\u6709\u6743\u4e0e\u51fd\u6570"},{"location":"ownership/#_10","text":"\u8fd4\u56de\u503c\u4e5f\u53ef\u4ee5\u8f6c\u79fb\u6240\u6709\u6743\u3002 ffn main () { let s1 = gives_ownership (); // gives_ownership \u5c06\u8fd4\u56de\u503c // \u8f6c\u79fb\u7ed9 s1 let s2 = String :: from ( \"hello\" ); // s2 \u8fdb\u5165\u4f5c\u7528\u57df let s3 = takes_and_gives_back ( s2 ); // s2 \u88ab\u79fb\u52a8\u5230 // takes_and_gives_back \u4e2d, // \u5b83\u4e5f\u5c06\u8fd4\u56de\u503c\u79fb\u7ed9 s3 } // \u8fd9\u91cc, s3 \u79fb\u51fa\u4f5c\u7528\u57df\u5e76\u88ab\u4e22\u5f03\u3002s2 \u4e5f\u79fb\u51fa\u4f5c\u7528\u57df\uff0c\u4f46\u5df2\u88ab\u79fb\u8d70\uff0c // \u6240\u4ee5\u4ec0\u4e48\u4e5f\u4e0d\u4f1a\u53d1\u751f\u3002s1 \u79bb\u5f00\u4f5c\u7528\u57df\u5e76\u88ab\u4e22\u5f03 fn gives_ownership () -> String { // gives_ownership \u4f1a\u5c06 // \u8fd4\u56de\u503c\u79fb\u52a8\u7ed9 // \u8c03\u7528\u5b83\u7684\u51fd\u6570 let some_string = String :: from ( \"yours\" ); // some_string \u8fdb\u5165\u4f5c\u7528\u57df. some_string // \u8fd4\u56de some_string // \u5e76\u79fb\u51fa\u7ed9\u8c03\u7528\u7684\u51fd\u6570 // } // takes_and_gives_back \u5c06\u4f20\u5165\u5b57\u7b26\u4e32\u5e76\u8fd4\u56de\u8be5\u503c fn takes_and_gives_back ( a_string : String ) -> String { // a_string \u8fdb\u5165\u4f5c\u7528\u57df // a_string // \u8fd4\u56de a_string \u5e76\u79fb\u51fa\u7ed9\u8c03\u7528\u7684\u51fd\u6570 } \u53d8\u91cf\u7684\u6240\u6709\u6743\u603b\u662f\u9075\u5faa\u76f8\u540c\u7684\u6a21\u5f0f\uff1a \u5c06\u503c\u8d4b\u7ed9\u53e6\u4e00\u4e2a\u53d8\u91cf\u65f6\u79fb\u52a8\u5b83\u3002\u5f53\u6301\u6709\u5806\u4e2d\u6570\u636e\u503c\u7684\u53d8\u91cf\u79bb\u5f00\u4f5c\u7528\u57df\u65f6\uff0c\u5176\u503c\u5c06\u901a\u8fc7 drop \u88ab\u6e05\u7406\u6389\uff0c\u9664\u975e\u6570\u636e\u88ab\u79fb\u52a8\u4e3a\u53e6\u4e00\u4e2a\u53d8\u91cf\u6240\u6709\u3002 \u867d\u7136\u8fd9\u6837\u662f\u53ef\u4ee5\u7684\uff0c\u4f46\u662f\u5728\u6bcf\u4e00\u4e2a\u51fd\u6570\u4e2d\u90fd\u83b7\u53d6\u6240\u6709\u6743\u5e76\u63a5\u7740\u8fd4\u56de\u6240\u6709\u6743\u6709\u4e9b\u5570\u55e6\u3002\u5982\u679c\u6211\u4eec\u60f3\u8981\u51fd\u6570\u4f7f\u7528\u4e00\u4e2a\u503c\u4f46\u4e0d\u83b7\u53d6\u6240\u6709\u6743\u8be5\u600e\u4e48\u529e\u5462\uff1f\u5982\u679c\u6211\u4eec\u8fd8\u8981\u63a5\u7740\u4f7f\u7528\u5b83\u7684\u8bdd\uff0c\u6bcf\u6b21\u90fd\u4f20\u8fdb\u53bb\u518d\u8fd4\u56de\u6765\u5c31\u6709\u70b9\u70e6\u4eba\u4e86\uff0c\u9664\u6b64\u4e4b\u5916\uff0c\u6211\u4eec\u4e5f\u53ef\u80fd\u60f3\u8fd4\u56de\u51fd\u6570\u4f53\u4e2d\u4ea7\u751f\u7684\u4e00\u4e9b\u6570\u636e\u3002 \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u5143\u7ec4\u6765\u8fd4\u56de\u591a\u4e2a\u503c\uff0c\u793a\u4f8b\uff1a fn main () { let s1 = String :: from ( \"hello\" ); let ( s2 , len ) = calculate_length ( s1 ); println! ( \"The length of '{}' is {}.\" , s2 , len ); } fn calculate_length ( s : String ) -> ( String , usize ) { let length = s . len (); // len() \u8fd4\u56de\u5b57\u7b26\u4e32\u7684\u957f\u5ea6 ( s , length ) } \u4f46\u662f\u8fd9\u672a\u514d\u6709\u4e9b\u5f62\u5f0f\u4e3b\u4e49\uff0c\u800c\u4e14\u8fd9\u79cd\u573a\u666f\u5e94\u8be5\u5f88\u5e38\u89c1\u3002\u5e78\u8fd0\u7684\u662f\uff0cRust \u5bf9\u6b64\u63d0\u4f9b\u4e86\u4e00\u4e2a\u4e0d\u7528\u83b7\u53d6\u6240\u6709\u6743\u5c31\u53ef\u4ee5\u4f7f\u7528\u503c\u7684\u529f\u80fd\uff0c\u53eb\u505a \u5f15\u7528 \uff08references\uff09\u3002","title":"\u8fd4\u56de\u503c\u4e0e\u4f5c\u7528\u57df"},{"location":"ownership/#_11","text":"\u4ee5\u63d0\u4f9b\u4e00\u4e2a String \u503c\u7684\u5f15\u7528\uff08reference\uff09\u3002 \u5f15\u7528 \uff08reference\uff09\u50cf\u4e00\u4e2a\u6307\u9488\uff0c\u56e0\u4e3a\u5b83\u662f\u4e00\u4e2a\u5730\u5740\uff0c\u6211\u4eec\u53ef\u4ee5\u7531\u6b64\u8bbf\u95ee\u50a8\u5b58\u4e8e\u8be5\u5730\u5740\u7684\u5c5e\u4e8e\u5176\u4ed6\u53d8\u91cf\u7684\u6570\u636e\u3002 \u4e0e\u6307\u9488\u4e0d\u540c\uff0c \u5f15\u7528\u786e\u4fdd\u6307\u5411\u67d0\u4e2a\u7279\u5b9a\u7c7b\u578b\u7684\u6709\u6548\u503c \u3002 fn main () { let s1 = String :: from ( \"hello\" ); // \u4f20\u9012 &s1 \u7ed9 calculate_length // \u8fd9\u4e9b & \u7b26\u53f7\u5c31\u662f \u5f15\u7528\uff0c\u5b83\u4eec\u5141\u8bb8\u4f60\u4f7f\u7528\u503c\u4f46\u4e0d\u83b7\u53d6\u5176\u6240\u6709\u6743\u3002 // &s1 \u8bed\u6cd5\u8ba9\u6211\u4eec\u521b\u5efa\u4e00\u4e2a \u6307\u5411 \u503c s1 \u7684\u5f15\u7528\uff0c\u4f46\u662f\u5e76\u4e0d\u62e5\u6709\u5b83\u3002 // \u56e0\u4e3a\u5e76\u4e0d\u62e5\u6709\u8fd9\u4e2a\u503c\uff0c\u6240\u4ee5\u5f53\u5f15\u7528\u505c\u6b62\u4f7f\u7528\u65f6\uff0c\u5b83\u6240\u6307\u5411\u7684\u503c\u4e5f\u4e0d\u4f1a\u88ab\u4e22\u5f03\u3002 let len = calculate_length ( & s1 ); println! ( \"The length of '{}' is {}.\" , s1 , len ); } // \u51fd\u6570\u7b7e\u540d\u4f7f\u7528 & \u6765\u8868\u660e\u53c2\u6570 s \u7684\u7c7b\u578b\u662f\u4e00\u4e2a\u5f15\u7528\u3002 fn calculate_length ( s : & String ) -> usize { // s\u662fString\u7684\u5f15\u7528 s . len () } // \u8fd9\u91cc\uff0cs \u79bb\u5f00\u4e86\u4f5c\u7528\u57df\u3002\u4f46\u56e0\u4e3a\u5b83\u5e76\u4e0d\u62e5\u6709\u5f15\u7528\u503c\u7684\u6240\u6709\u6743\uff0c // \u6240\u4ee5\u4ec0\u4e48\u4e5f\u4e0d\u4f1a\u53d1\u751f (Rust \u4e0d\u4f1a\u8c03\u7528drop) \u5f53\u51fd\u6570\u4f7f\u7528\u5f15\u7528\u800c\u4e0d\u662f\u5b9e\u9645\u503c\u4f5c\u4e3a\u53c2\u6570\uff0c\u65e0\u9700\u8fd4\u56de\u503c\u6765\u4ea4\u8fd8\u6240\u6709\u6743\uff0c\u56e0\u4e3a\u5c31\u4e0d\u66fe\u62e5\u6709\u6240\u6709\u6743\u3002 \u5c06\u521b\u5efa\u4e00\u4e2a\u5f15\u7528\u7684\u884c\u4e3a\u79f0\u4e3a \u501f\u7528 \uff08borrowing\uff09\u3002\u6b63\u5982\u73b0\u5b9e\u751f\u6d3b\u4e2d\uff0c\u5982\u679c\u4e00\u4e2a\u4eba\u62e5\u6709\u67d0\u6837\u4e1c\u897f\uff0c\u4f60\u53ef\u4ee5\u4ece\u4ed6\u90a3\u91cc\u501f\u6765\u3002\u5f53\u4f60\u4f7f\u7528\u5b8c\u6bd5\uff0c\u5fc5\u987b\u8fd8\u56de\u53bb\u3002 \u6b63\u5982\u53d8\u91cf\u9ed8\u8ba4\u662f\u4e0d\u53ef\u53d8\u7684\uff0c\u5f15\u7528\u4e5f\u4e00\u6837\u3002\uff08\u9ed8\u8ba4\uff09\u4e0d\u5141\u8bb8\u4fee\u6539 \u5f15\u7528 \u7684\u503c\u3002","title":"\u5f15\u7528\u4e0e\u501f\u7528"},{"location":"ownership/#_12","text":"\u5141\u8bb8\u6211\u4eec\u4fee\u6539\u4e00\u4e2a\u501f\u7528\u7684\u503c\uff0c\u8fd9\u5c31\u662f \u53ef\u53d8\u5f15\u7528 \uff08mutable reference\uff09 fn main () { let mut s = String :: from ( \"hello\" ); // \u5fc5\u987b\u5c06 s \u6539\u4e3a mut\uff0c \u58f0\u660e\u53ef\u53d8 change ( & mut s ); // \u4f20\u5165\u53ef\u53d8\u5f15\u7528 } // \u58f0\u660e\u53ef\u53d8\u5f15\u7528 fn change ( some_string : & mut String ) { some_string . push_str ( \", world\" ); // \u56e0\u4e3a\u53ef\u53d8\uff0c\u6240\u4ee5\u53ef\u4ee5\u66f4\u6539\u3002 } \u53ef\u53d8\u5f15\u7528\u6709\u4e00\u4e2a\u5f88\u5927\u7684\u9650\u5236\uff1a \u5982\u679c\u4f60\u6709\u4e00\u4e2a\u5bf9\u8be5\u53d8\u91cf\u7684\u53ef\u53d8\u5f15\u7528\uff0c\u4f60\u5c31\u4e0d\u80fd\u518d\u521b\u5efa\u5bf9\u8be5\u53d8\u91cf\u7684\u5f15\u7528 \u3002\u8fd9\u4e9b\u5c1d\u8bd5\u521b\u5efa\u4e24\u4e2a s \u7684\u53ef\u53d8\u5f15\u7528\u7684\u4ee3\u7801\u4f1a\u5931\u8d25\uff1a let mut s = String :: from ( \"hello\" ); let r1 = & mut s ; // \u6709\u4e00\u4e2a\u4e86 let r2 = & mut s ; // \u7b2c\u4e8c\u4e2a\u5c06\u4f1a\u62a5\u9519\u3002 println! ( \"{}, {}\" , r1 , r2 ); \u62a5\u9519\u5982\u4e0b: $ cargo run Compiling ownership v0 . 1.0 ( file : ///projects/ownership) error [ E0499 ] : cannot borrow ` s ` as mutable more than once at a time - -> src / main . rs : 5 : 14 | 4 | let r1 = & mut s ; | ------ first mutable borrow occurs here 5 | let r2 = & mut s ; | ^^^^^^ second mutable borrow occurs here 6 | 7 | println! ( \"{}, {}\" , r1 , r2 ); | -- first borrow later used here For more information about this error , try ` rustc -- explain E0499 ` . error : could not compile ` ownership ` due to previous error \u8fd9\u4e00\u9650\u5236\u4ee5\u4e00\u79cd\u975e\u5e38\u5c0f\u5fc3\u8c28\u614e\u7684\u65b9\u5f0f\u5141\u8bb8\u53ef\u53d8\u6027\uff0c \u9632\u6b62\u540c\u4e00\u65f6\u95f4\u5bf9\u540c\u4e00\u6570\u636e\u5b58\u5728\u591a\u4e2a\u53ef\u53d8\u5f15\u7528 \u3002\u65b0 Rustacean \u4eec\u7ecf\u5e38\u96be\u4ee5\u9002\u5e94\u8fd9\u4e00\u70b9\uff0c\u56e0\u4e3a\u5927\u90e8\u5206\u8bed\u8a00\u4e2d\u53d8\u91cf\u4efb\u4f55\u65f6\u5019\u90fd\u662f\u53ef\u53d8\u7684\u3002\u8fd9\u4e2a\u9650\u5236\u7684\u597d\u5904\u662f Rust \u53ef\u4ee5\u5728\u7f16\u8bd1\u65f6\u5c31\u907f\u514d\u6570\u636e\u7ade\u4e89\u3002 \u6570\u636e\u7ade\u4e89 \uff08data race\uff09\u7c7b\u4f3c\u4e8e\u7ade\u6001\u6761\u4ef6\uff0c\u5b83\u53ef\u7531\u8fd9\u4e09\u4e2a\u884c\u4e3a\u9020\u6210\uff1a \u4e24\u4e2a\u6216\u66f4\u591a\u6307\u9488\u540c\u65f6\u8bbf\u95ee\u540c\u4e00\u6570\u636e\u3002 \u81f3\u5c11\u6709\u4e00\u4e2a\u6307\u9488\u88ab\u7528\u6765\u5199\u5165\u6570\u636e\u3002 \u6ca1\u6709\u540c\u6b65\u6570\u636e\u8bbf\u95ee\u7684\u673a\u5236\u3002 \u6570\u636e\u7ade\u4e89\u4f1a\u5bfc\u81f4\u672a\u5b9a\u4e49\u884c\u4e3a\uff0c\u96be\u4ee5\u5728\u8fd0\u884c\u65f6\u8ffd\u8e2a\uff0c\u5e76\u4e14\u96be\u4ee5\u8bca\u65ad\u548c\u4fee\u590d\uff1bRust \u907f\u514d\u4e86\u8fd9\u79cd\u60c5\u51b5\u7684\u53d1\u751f\uff0c\u56e0\u4e3a\u5b83\u751a\u81f3\u4e0d\u4f1a\u7f16\u8bd1\u5b58\u5728\u6570\u636e\u7ade\u4e89\u7684\u4ee3\u7801\uff01 \u4e00\u5982\u65e2\u5f80\uff0c\u53ef\u4ee5\u4f7f\u7528\u5927\u62ec\u53f7\u6765\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u4f5c\u7528\u57df\uff0c\u4ee5\u5141\u8bb8\u62e5\u6709\u591a\u4e2a\u53ef\u53d8\u5f15\u7528\uff0c\u53ea\u662f\u4e0d\u80fd \u540c\u65f6 \u62e5\u6709\uff1a fn main () { let mut s = String :: from ( \"hello\" ); { let r1 = & mut s ; } // r1 \u5728\u8fd9\u91cc\u79bb\u5f00\u4e86\u4f5c\u7528\u57df\uff0c\u6240\u4ee5\u6211\u4eec\u5b8c\u5168\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u5f15\u7528 let r2 = & mut s ; } Rust \u5728\u540c\u65f6\u4f7f\u7528\u53ef\u53d8\u4e0e\u4e0d\u53ef\u53d8\u5f15\u7528\u65f6\u4e5f\u91c7\u7528\u7684\u7c7b\u4f3c\u7684\u89c4\u5219\u3002\u8fd9\u4e9b\u4ee3\u7801\u4f1a\u5bfc\u81f4\u4e00\u4e2a\u9519\u8bef\uff1a let mut s = String :: from ( \"hello\" ); let r1 = & s ; // \u6ca1\u95ee\u9898 let r2 = & s ; // \u6ca1\u95ee\u9898 let r3 = & mut s ; // \u5927\u95ee\u9898 println! ( \"{}, {}, and {}\" , r1 , r2 , r3 ); // \u4f7f\u7528\u4e0d\u53ef\u53d8\u5f15\u7528\u65f6\uff0c\u540c\u65f6\u53c8\u4f7f\u7528\u4e86\u53ef\u53d8\u5f15\u7528\u3002 \u9519\u8bef\u5982\u4e0b\uff1a $ cargo run Compiling ownership v0 . 1.0 ( file : ///projects/ownership) error [ E0502 ] : cannot borrow ` s ` as mutable because it is also borrowed as immutable - -> src / main . rs : 6 : 14 | 4 | let r1 = & s ; // no problem | -- immutable borrow occurs here 5 | let r2 = & s ; // no problem 6 | let r3 = & mut s ; // BIG PROBLEM | ^^^^^^ mutable borrow occurs here 7 | 8 | println! ( \"{}, {}, and {}\" , r1 , r2 , r3 ); | -- immutable borrow later used here For more information about this error , try ` rustc -- explain E0502 ` . error : could not compile ` ownership ` due to previous error \u54c7\u54e6\uff01\u6211\u4eec \u4e5f \u4e0d\u80fd\u5728\u62e5\u6709\u4e0d\u53ef\u53d8\u5f15\u7528\u7684\u540c\u65f6\u62e5\u6709\u53ef\u53d8\u5f15\u7528\u3002 \u6ce8\u610f \u4e00\u4e2a\u5f15\u7528\u7684\u4f5c\u7528\u57df\u4ece\u58f0\u660e\u7684\u5730\u65b9\u5f00\u59cb\u4e00\u76f4\u6301\u7eed\u5230\u6700\u540e\u4e00\u6b21\u4f7f\u7528\u4e3a\u6b62 \u3002\u4f8b\u5982\uff0c\u56e0\u4e3a\u6700\u540e\u4e00\u6b21\u4f7f\u7528 \u4e0d\u53ef\u53d8\u5f15\u7528 \uff08println!)\uff0c\u53d1\u751f\u5728\u58f0\u660e\u53ef\u53d8\u5f15\u7528\u4e4b\u524d\uff0c\u6240\u4ee5\u5982\u4e0b\u4ee3\u7801\u662f\u53ef\u4ee5\u7f16\u8bd1\u7684\uff1a let mut s = String :: from ( \"hello\" ); let r1 = & s ; // \u6ca1\u95ee\u9898 let r2 = & s ; // \u6ca1\u95ee\u9898 println! ( \"{} and {}\" , r1 , r2 ); // \u6b64\u4f4d\u7f6e\u4e4b\u540e r1 \u548c r2 \u4e0d\u518d\u4f7f\u7528 let r3 = & mut s ; // \u6ca1\u95ee\u9898 println! ( \"{}\" , r3 ); \u4e0d\u53ef\u53d8\u5f15\u7528 r1 \u548c r2 \u7684\u4f5c\u7528\u57df\u5728 println! \u6700\u540e\u4e00\u6b21\u4f7f\u7528\u4e4b\u540e\u7ed3\u675f\uff0c\u8fd9\u4e5f\u662f\u521b\u5efa\u53ef\u53d8\u5f15\u7528 r3 \u7684\u5730\u65b9\u3002\u5b83\u4eec\u7684\u4f5c\u7528\u57df \u6ca1\u6709\u91cd\u53e0 \uff0c\u6240\u4ee5\u4ee3\u7801\u662f\u53ef\u4ee5\u7f16\u8bd1\u7684\u3002 \u7f16\u8bd1\u5668\u5728\u4f5c\u7528\u57df\u7ed3\u675f\u4e4b\u524d\u5224\u65ad\u4e0d\u518d\u4f7f\u7528\u7684\u5f15\u7528\u7684\u80fd\u529b\u88ab\u79f0\u4e3a \u975e\u8bcd\u6cd5\u4f5c\u7528\u57df\u751f\u547d\u5468\u671f \uff08Non-Lexical Lifetimes\uff0c\u7b80\u79f0 NLL\uff09\u3002\u4f60\u53ef\u4ee5\u5728 The Edition Guide \u4e2d\u9605\u8bfb\u66f4\u591a\u5173\u4e8e\u5b83\u7684\u4fe1\u606f\u3002","title":"\u53ef\u53d8\u5f15\u7528"},{"location":"ownership/#dangling-references","text":"\u6240\u8c13 \u60ac\u5782\u6307\u9488 \u662f\u5176\u6307\u5411\u7684\u5185\u5b58\u53ef\u80fd\u5df2\u7ecf\u88ab\u5206\u914d\u7ed9\u5176\u5b83\u6301\u6709\u8005\u3002\u76f8\u6bd4\u4e4b\u4e0b\uff0c\u5728 Rust \u4e2d\u7f16\u8bd1\u5668\u786e\u4fdd\u5f15\u7528\u6c38\u8fdc\u4e5f\u4e0d\u4f1a\u53d8\u6210\u60ac\u5782\u72b6\u6001\uff1a \u5f53\u4f60\u62e5\u6709\u4e00\u4e9b\u6570\u636e\u7684\u5f15\u7528\uff0c\u7f16\u8bd1\u5668\u786e\u4fdd\u6570\u636e\u4e0d\u4f1a\u5728\u5176\u5f15\u7528\u4e4b\u524d\u79bb\u5f00\u4f5c\u7528\u57df\u3002 \u5f53\u5c1d\u8bd5\u521b\u5efa\u4e00\u4e2a\u60ac\u5782\u5f15\u7528\u65f6\uff0cRust \u4f1a\u901a\u8fc7\u4e00\u4e2a\u7f16\u8bd1\u65f6\u9519\u8bef\u6765\u907f\u514d\uff1a fn main () { let reference_to_nothing = dangle (); } fn dangle () -> & String { // dangle \u8fd4\u56de\u4e00\u4e2a\u5b57\u7b26\u4e32\u7684\u5f15\u7528 let s = String :: from ( \"hello\" ); // s \u662f\u4e00\u4e2a\u65b0\u5b57\u7b26\u4e32 & s // \u8fd4\u56de\u5b57\u7b26\u4e32 s \u7684\u5f15\u7528 } // \u8fd9\u91cc s \u79bb\u5f00\u4f5c\u7528\u57df\u5e76\u88ab\u4e22\u5f03\u3002\u5176\u5185\u5b58\u88ab\u91ca\u653e\u3002 // \u5371\u9669\uff01 \u9519\u8bef: $ cargo run Compiling ownership v0.1.0 ( file:///projects/ownership ) error [ E0106 ] : missing lifetime specifier --> src/main.rs:5:16 | 5 | fn dangle () -> & String { | ^ expected named lifetime parameter | = help: this function 's return type contains a borrowed value, but there is no value for it to be borrowed from help: consider using the `' static ` lifetime | 5 | fn dangle () -> & ' static String { | ~~~~~~~~ For more information about this error, try ` rustc --explain E0106 ` . error: could not compile ` ownership ` due to previous error \u56e0\u4e3a s \u662f\u5728 dangle \u51fd\u6570\u5185\u521b\u5efa\u7684\uff0c\u5f53 dangle \u7684\u4ee3\u7801\u6267\u884c\u5b8c\u6bd5\u540e\uff0cs \u5c06\u88ab\u91ca\u653e\u3002\u4e0d\u8fc7\u6211\u4eec\u5c1d\u8bd5\u8fd4\u56de\u5b83\u7684\u5f15\u7528\u3002\u8fd9\u610f\u5473\u7740\u8fd9\u4e2a\u5f15\u7528\u4f1a\u6307\u5411\u4e00\u4e2a\u65e0\u6548\u7684 String\uff0c\u8fd9\u53ef\u4e0d\u5bf9\uff01Rust \u4e0d\u4f1a\u5141\u8bb8\u8fd9\u4e48\u505a\u3002 \u8fd9\u91cc\u7684\u89e3\u51b3\u65b9\u6cd5\u662f\u76f4\u63a5\u8fd4\u56de String\uff1a fn no_dangle () -> String { let s = String :: from ( \"hello\" ); s // \u76f4\u63a5\u8fd4\u56des // \u6240\u6709\u6743\u88ab\u79fb\u52a8\u51fa\u53bb\uff0c\u6240\u4ee5\u6ca1\u6709\u503c\u88ab\u91ca\u653e\u3002 }","title":"\u60ac\u5782\u5f15\u7528\uff08Dangling References\uff09"},{"location":"ownership/#_13","text":"\u5728\u4efb\u610f\u7ed9\u5b9a\u65f6\u95f4\uff0c\u8981\u4e48 \u53ea\u80fd\u6709\u4e00\u4e2a\u53ef\u53d8\u5f15\u7528\uff0c\u8981\u4e48 \u53ea\u80fd\u6709\u591a\u4e2a\u4e0d\u53ef\u53d8\u5f15\u7528\u3002 \u5f15\u7528\u5fc5\u987b\u603b\u662f\u6709\u6548\u7684\u3002","title":"\u5f15\u7528\u7684\u89c4\u5219"},{"location":"ownership/#slice","text":"slice \u5141\u8bb8\u4f60\u5f15\u7528\u96c6\u5408\u4e2d\u4e00\u6bb5\u8fde\u7eed\u7684\u5143\u7d20\u5e8f\u5217\uff0c\u800c\u4e0d\u7528\u5f15\u7528\u6574\u4e2a\u96c6\u5408\u3002 slice \u662f\u4e00\u7c7b\u5f15\u7528\uff0c\u6240\u4ee5\u5b83\u6ca1\u6709\u6240\u6709\u6743\u3002 \u5c0f\u7ec3\u4e60\uff1a \u7f16\u5199\u4e00\u4e2a\u51fd\u6570\uff0c\u8be5\u51fd\u6570\u63a5\u6536\u4e00\u4e2a\u7528\u7a7a\u683c\u5206\u9694\u5355\u8bcd\u7684\u5b57\u7b26\u4e32\uff0c\u5e76\u8fd4\u56de\u5728\u8be5\u5b57\u7b26\u4e32\u4e2d\u627e\u5230\u7684\u7b2c\u4e00\u4e2a\u5355\u8bcd, \u5982\u679c\u51fd\u6570\u5728\u8be5\u5b57\u7b26\u4e32\u4e2d\u5e76\u672a\u627e\u5230\u7a7a\u683c\uff0c\u5219\u6574\u4e2a\u5b57\u7b26\u4e32\u5c31\u662f\u4e00\u4e2a\u5355\u8bcd\uff0c\u6240\u4ee5\u5e94\u8be5\u8fd4\u56de\u6574\u4e2a\u5b57\u7b26\u4e32\u3002 fn first_word ( s : & String ) -> ? first_word \u51fd\u6570\u6709\u4e00\u4e2a\u53c2\u6570 &String \u3002\u56e0\u4e3a\u6211\u4eec\u4e0d\u9700\u8981\u6240\u6709\u6743\uff0c\u6240\u4ee5\u8fd9\u6ca1\u6709\u95ee\u9898\u3002\u4e0d\u8fc7\u5e94\u8be5\u8fd4\u56de\u4ec0\u4e48\u5462\uff1f\u6211\u4eec\u5e76\u6ca1\u6709\u4e00\u4e2a\u771f\u6b63\u83b7\u53d6 \u90e8\u5206 \u5b57\u7b26\u4e32\u7684\u529e\u6cd5\u3002\u4e0d\u8fc7\uff0c\u6211\u4eec\u53ef\u4ee5\u8fd4\u56de\u5355\u8bcd\u7ed3\u5c3e\u7684\u7d22\u5f15\uff0c\u7ed3\u5c3e\u7531\u4e00\u4e2a\u7a7a\u683c\u8868\u793a\u3002 fn first_word ( s : & String ) -> usize { // \u7528 as_bytes \u65b9\u6cd5\u5c06 String \u8f6c\u5316\u4e3a\u5b57\u8282\u6570\u7ec4 let bytes = s . as_bytes (); // \u4f7f\u7528 iter \u65b9\u6cd5\u5728\u5b57\u8282\u6570\u7ec4\u4e0a\u521b\u5efa\u4e00\u4e2a\u8fed\u4ee3\u5668\uff1a // enumerate \u5305\u88c5\u4e86 iter \u7684\u7ed3\u679c\uff0c\u5c06\u8fd9\u4e9b\u5143\u7d20\u4f5c\u4e3a\u5143\u7ec4\u7684\u4e00\u90e8\u5206\u6765\u8fd4\u56de\u3002 // enumerate \u8fd4\u56de\u7684\u5143\u7ec4\u4e2d\uff0c\u7b2c\u4e00\u4e2a\u5143\u7d20\u662f\u7d22\u5f15\uff0c\u7b2c\u4e8c\u4e2a\u5143\u7d20\u662f\u96c6\u5408\u4e2d\u5143\u7d20\u7684\u5f15\u7528\u3002 // \u56e0\u4e3a enumerate \u65b9\u6cd5\u8fd4\u56de\u4e00\u4e2a\u5143\u7ec4\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u6a21\u5f0f\u6765\u89e3\u6784 // \u5143\u7ec4\u4e2d\u7684 i \u662f\u7d22\u5f15\u800c\u5143\u7ec4\u4e2d\u7684 &item \u662f\u5355\u4e2a\u5b57\u8282\u3002 // \u56e0\u4e3a\u6211\u4eec\u4ece .iter().enumerate() \u4e2d\u83b7\u53d6\u4e86\u96c6\u5408\u5143\u7d20\u7684\u5f15\u7528\uff0c\u6240\u4ee5\u6a21\u5f0f\u4e2d\u4f7f\u7528\u4e86 &\u3002 for ( i , & item ) in bytes . iter (). enumerate () { // \u901a\u8fc7\u5b57\u8282\u7684\u5b57\u9762\u503c\u8bed\u6cd5\u6765\u5bfb\u627e\u4ee3\u8868\u7a7a\u683c\u7684\u5b57\u8282\u3002 // \u5982\u679c\u627e\u5230\u4e86\u4e00\u4e2a\u7a7a\u683c\uff0c\u8fd4\u56de\u5b83\u7684\u4f4d\u7f6e\u3002 if item == b' ' { return i ; } } // \u5426\u5219\uff0c\u4f7f\u7528 s.len() \u8fd4\u56de\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\uff1a s . len () } \u73b0\u5728\u6709\u4e86\u4e00\u4e2a\u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u7b2c\u4e00\u4e2a\u5355\u8bcd\u7ed3\u5c3e\u7d22\u5f15\u7684\u65b9\u6cd5\uff0c\u4e0d\u8fc7\u8fd9\u6709\u4e00\u4e2a\u95ee\u9898\u3002 \u6211\u4eec\u8fd4\u56de\u4e86\u4e00\u4e2a\u72ec\u7acb\u7684 usize \uff0c\u4e0d\u8fc7\u5b83\u53ea\u5728 &String \u7684\u4e0a\u4e0b\u6587\u4e2d\u624d\u662f\u4e00\u4e2a\u6709\u610f\u4e49\u7684\u6570\u5b57\u3002 \u6362\u53e5\u8bdd\u8bf4\uff0c\u56e0\u4e3a\u5b83\u662f\u4e00\u4e2a\u4e0e String \u76f8\u5206\u79bb\u7684\u503c\uff0c\u65e0\u6cd5\u4fdd\u8bc1\u5c06\u6765\u5b83\u4ecd\u7136\u6709\u6548\u3002 fn main () { let mut s = String :: from ( \"hello world\" ); let word = first_word ( & s ); // word \u7684\u503c\u4e3a 5 s . clear (); // \u8fd9\u6e05\u7a7a\u4e86\u5b57\u7b26\u4e32\uff0c\u4f7f\u5176\u7b49\u4e8e \"\" // word \u5728\u6b64\u5904\u7684\u503c\u4ecd\u7136\u662f 5\uff0c // \u4f46\u662f\u6ca1\u6709\u66f4\u591a\u7684\u5b57\u7b26\u4e32\u8ba9\u6211\u4eec\u53ef\u4ee5\u6709\u6548\u5730\u5e94\u7528\u6570\u503c 5\u3002word \u7684\u503c\u73b0\u5728\u5b8c\u5168\u65e0\u6548\uff01 } \u8fd9\u4e2a\u7a0b\u5e8f\u7f16\u8bd1\u65f6\u6ca1\u6709\u4efb\u4f55\u9519\u8bef\uff0c\u800c\u4e14\u5728\u8c03\u7528 s.clear() \u4e4b\u540e\u4f7f\u7528 word \u4e5f\u4e0d\u4f1a\u51fa\u9519\u3002\u56e0\u4e3a word \u4e0e s \u72b6\u6001\u5b8c\u5168\u6ca1\u6709\u8054\u7cfb\uff0c\u6240\u4ee5 word \u4ecd\u7136\u5305\u542b\u503c 5\u3002 \u53ef\u4ee5\u5c1d\u8bd5\u7528\u503c 5 \u6765\u63d0\u53d6\u53d8\u91cf s \u7684\u7b2c\u4e00\u4e2a\u5355\u8bcd\uff0c\u4e0d\u8fc7\u8fd9\u662f\u6709 bug \u7684\uff0c\u56e0\u4e3a\u5728\u6211\u4eec\u5c06 5 \u4fdd\u5b58\u5230 word \u4e4b\u540e s \u7684\u5185\u5bb9\u5df2\u7ecf\u6539\u53d8\u3002 \u6211\u4eec\u4e0d\u5f97\u4e0d\u65f6\u523b\u62c5\u5fc3 word \u7684\u7d22\u5f15\u4e0e s \u4e2d\u7684\u6570\u636e\u4e0d\u518d\u540c\u6b65\uff0c\u8fd9\u5f88\u5570\u55e6\u4e14\u6613\u51fa\u9519\uff01\u5982\u679c\u7f16\u5199\u8fd9\u4e48\u4e00\u4e2a second_word \u51fd\u6570\u7684\u8bdd\uff0c\u7ba1\u7406\u7d22\u5f15\u8fd9\u4ef6\u4e8b\u5c06\u66f4\u52a0\u5bb9\u6613\u51fa\u95ee\u9898\u3002\u5b83\u7684\u7b7e\u540d\u770b\u8d77\u6765\u50cf\u8fd9\u6837\uff1a fn second_word ( s : & String ) -> ( usize , usize ) { \u73b0\u5728\u6211\u4eec\u8981\u8ddf\u8e2a\u4e00\u4e2a \u5f00\u59cb\u7d22\u5f15 \u548c \u4e00\u4e2a \u7ed3\u5c3e\u7d22\u5f15 \uff0c\u540c\u65f6\u6709\u4e86\u66f4\u591a\u4ece\u6570\u636e\u7684\u67d0\u4e2a\u7279\u5b9a\u72b6\u6001\u8ba1\u7b97\u800c\u6765\u7684\u503c\uff0c\u4f46\u90fd\u5b8c\u5168\u6ca1\u6709\u4e0e\u8fd9\u4e2a\u72b6\u6001\u76f8\u5173\u8054\u3002\u73b0\u5728\u6709\u4e09\u4e2a\u98d8\u5ffd\u4e0d\u5b9a\u7684\u4e0d\u76f8\u5173\u53d8\u91cf\u9700\u8981\u4fdd\u6301\u540c\u6b65\u3002","title":"Slice\u7c7b\u578b"},{"location":"ownership/#slice_1","text":"\u5b57\u7b26\u4e32 slice \uff08string slice\uff09\u662f String \u4e2d\u4e00\u90e8\u5206\u503c\u7684\u5f15\u7528\uff0c\u5b83\u770b\u8d77\u6765\u50cf\u8fd9\u6837\uff1a let s = String :: from ( \"hello world\" ); let hello = & s [ 0 .. 5 ]; // hello \u662f\u4e00\u4e2a\u90e8\u5206 String \u7684\u5f15\u7528\uff0c\u7531\u4e00\u4e2a\u989d\u5916\u7684 [0..5] \u90e8\u5206\u6307\u5b9a\u3002 let world = & s [ 6 .. 11 ]; // \u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a\u7531\u4e2d\u62ec\u53f7\u4e2d\u7684 [starting_index..ending_index] \u6307\u5b9a\u7684 range \u521b\u5efa\u4e00\u4e2a slice\uff0c\u5176\u4e2d starting_index \u662f slice \u7684\u7b2c\u4e00\u4e2a\u4f4d\u7f6e\uff0cending_index \u5219\u662f slice \u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\u7684\u540e\u4e00\u4e2a\u503c\u3002 \u5728\u5176\u5185\u90e8\uff0c slice \u7684\u6570\u636e\u7ed3\u6784\u5b58\u50a8\u4e86 slice \u7684\u5f00\u59cb\u4f4d\u7f6e\u548c\u957f\u5ea6\uff0c\u957f\u5ea6\u5bf9\u5e94\u4e8e ending_index \u51cf\u53bb starting_index \u7684\u503c\u3002 \u6240\u4ee5\u5bf9\u4e8e let world = &s[6..11]; \u7684\u60c5\u51b5\uff0cworld \u5c06\u662f\u4e00\u4e2a\u5305\u542b\u6307\u5411 s \u7d22\u5f15 6 \u7684\u6307\u9488\u548c\u957f\u5ea6\u503c 5 \u7684 slice\u3002 \u5bf9\u4e8e Rust \u7684 .. range \u8bed\u6cd5\uff0c\u5982\u679c\u60f3\u8981\u4ece\u7d22\u5f15 0 \u5f00\u59cb\uff0c\u53ef\u4ee5 \u4e0d\u5199\u4e24\u4e2a\u70b9\u53f7\u4e4b\u524d\u7684\u503c \u3002\u5982\u4e0b\u4e24\u4e2a\u8bed\u53e5\u662f\u76f8\u540c\u7684\uff1a let s = String :: from ( \"hello\" ); let slice = & s [ 0 .. 2 ]; let slice = & s [ .. 2 ]; \u4f9d\u6b64\u7c7b\u63a8\uff0c\u5982\u679c slice \u5305\u542b String \u7684\u6700\u540e\u4e00\u4e2a\u5b57\u8282\uff0c\u4e5f\u53ef\u4ee5 \u820d\u5f03\u5c3e\u90e8 \u7684\u6570\u5b57\u3002\u8fd9\u610f\u5473\u7740\u5982\u4e0b\u4e5f\u662f\u76f8\u540c\u7684\uff1a let s = String :: from ( \"hello\" ); let len = s . len (); let slice = & s [ 3 .. len ]; let slice = & s [ 3 .. ]; \u4e5f\u53ef\u4ee5 \u540c\u65f6\u820d\u5f03 \u8fd9\u4e24\u4e2a\u503c\u6765\u83b7\u53d6\u6574\u4e2a\u5b57\u7b26\u4e32\u7684 slice\u3002\u6240\u4ee5\u5982\u4e0b\u4ea6\u662f\u76f8\u540c\u7684\uff1a let s = String :: from ( \"hello\" ); let len = s . len (); let slice = & s [ 0 .. len ]; let slice = & s [ .. ]; \u6ce8\u610f \u5b57\u7b26\u4e32 slice range \u7684\u7d22\u5f15\u5fc5\u987b\u4f4d\u4e8e\u6709\u6548\u7684 UTF-8 \u5b57\u7b26\u8fb9\u754c\u5185\uff0c\u5982\u679c\u5c1d\u8bd5\u4ece\u4e00\u4e2a\u591a\u5b57\u8282\u5b57\u7b26\u7684\u4e2d\u95f4\u4f4d\u7f6e\u521b\u5efa\u5b57\u7b26\u4e32 slice\uff0c\u5219\u7a0b\u5e8f\u5c06\u4f1a\u56e0\u9519\u8bef\u800c\u9000\u51fa\u3002 \u51fa\u4e8e\u4ecb\u7ecd\u5b57\u7b26\u4e32 slice \u7684\u76ee\u7684\uff0c\u672c\u90e8\u5206\u5047\u8bbe\u53ea\u4f7f\u7528 ASCII \u5b57\u7b26\u96c6\uff1b\u7b2c\u516b\u7ae0\u7684 \u201c \u4f7f\u7528\u5b57\u7b26\u4e32\u5b58\u50a8 UTF-8 \u7f16\u7801\u7684\u6587\u672c \u201d \u90e8\u5206\u4f1a\u66f4\u52a0\u5168\u9762\u7684\u8ba8\u8bba UTF-8 \u5904\u7406\u95ee\u9898\u3002 \u91cd\u5199 first_word \u6765\u8fd4\u56de\u4e00\u4e2a slice \u3002 \u201c\u5b57\u7b26\u4e32 slice\u201d \u7684\u7c7b\u578b\u58f0\u660e\u5199\u4f5c &str \uff1a fn first_word ( s : & String ) -> & str { let bytes = s . as_bytes (); for ( i , & item ) in bytes . iter (). enumerate () { if item == b' ' { return & s [ 0 .. i ]; } } & s [ .. ] } \u73b0\u5728\u5f53\u8c03\u7528 first_word \u65f6\uff0c\u4f1a\u8fd4\u56de\u4e0e\u5e95\u5c42\u6570\u636e\u5173\u8054\u7684\u5355\u4e2a\u503c\u3002\u8fd9\u4e2a\u503c\u7531\u4e00\u4e2a slice \u5f00\u59cb\u4f4d\u7f6e\u7684\u5f15\u7528\u548c slice \u4e2d\u5143\u7d20\u7684\u6570\u91cf\u7ec4\u6210 \u3002 second_word \u51fd\u6570\u4e5f\u53ef\u4ee5\u6539\u4e3a\u8fd4\u56de\u4e00\u4e2a slice \uff1a fn second_word ( s : & String ) -> & str { \u73b0\u5728\u6709\u4e86\u4e00\u4e2a\u4e0d\u6613\u6df7\u6dc6\u4e14\u76f4\u89c2\u7684 API \u4e86\uff0c \u56e0\u4e3a\u7f16\u8bd1\u5668\u4f1a\u786e\u4fdd\u6307\u5411 String \u7684\u5f15\u7528\u6301\u7eed\u6709\u6548\u3002 \u4f7f\u7528 slice \u7248\u672c\u7684 first_word \u4f1a\u629b\u51fa\u4e00\u4e2a\u7f16\u8bd1\u65f6\u9519\u8bef\uff1a fn main () { let mut s = String :: from ( \"hello world\" ); let word = first_word ( & s ); s . clear (); // \u9519\u8bef! println! ( \"the first word is: {}\" , word ); } \u7f16\u8bd1\u9519\u8bef\uff1a $ cargo run Compiling ownership v0 . 1.0 ( file : ///projects/ownership) error [ E0502 ] : cannot borrow ` s ` as mutable because it is also borrowed as immutable - -> src / main . rs : 18 : 5 | 16 | let word = first_word ( & s ); | -- immutable borrow occurs here 17 | 18 | s . clear (); // error! | ^^^^^^^^^ mutable borrow occurs here 19 | 20 | println! ( \"the first word is: {}\" , word ); | ---- immutable borrow later used here For more information about this error , try ` rustc -- explain E0502 ` . error : could not compile ` ownership ` due to previous error \u56de\u5fc6\u4e00\u4e0b \u501f\u7528\u89c4\u5219 \uff0c\u5f53\u62e5\u6709\u67d0\u503c\u7684\u4e0d\u53ef\u53d8\u5f15\u7528\u65f6\uff0c\u5c31\u4e0d\u80fd\u518d\u83b7\u53d6\u4e00\u4e2a\u53ef\u53d8\u5f15\u7528\u3002\u56e0\u4e3a clear \u9700\u8981\u6e05\u7a7a String\uff0c\u5b83\u5c1d\u8bd5\u83b7\u53d6\u4e00\u4e2a\u53ef\u53d8\u5f15\u7528\u3002 \u5728\u8c03\u7528 clear \u4e4b\u540e\u7684 println! \u4f7f\u7528\u4e86 word \u4e2d\u7684\u5f15\u7528\uff0c\u6240\u4ee5\u8fd9\u4e2a\u4e0d\u53ef\u53d8\u7684\u5f15\u7528\u5728\u6b64\u65f6\u5fc5\u987b\u4ecd\u7136\u6709\u6548\u3002 Rust \u4e0d\u5141\u8bb8 clear \u4e2d\u7684\u53ef\u53d8\u5f15\u7528\u548c word \u4e2d\u7684\u4e0d\u53ef\u53d8\u5f15\u7528\u540c\u65f6\u5b58\u5728\uff0c\u56e0\u6b64\u7f16\u8bd1\u5931\u8d25\u3002 Rust \u4e0d\u4ec5\u4f7f\u5f97\u6211\u4eec\u7684 API \u7b80\u5355\u6613\u7528\uff0c\u4e5f\u5728\u7f16\u8bd1\u65f6\u5c31\u6d88\u9664\u4e86\u4e00\u6574\u7c7b\u7684\u9519\u8bef\uff01","title":"\u5b57\u7b26\u4e32Slice"},{"location":"ownership/#slice_2","text":"\u8fd8\u8bb0\u5f97\u8bb2\u5230\u8fc7\u5b57\u7b26\u4e32\u5b57\u9762\u503c\u88ab\u50a8\u5b58\u5728\u4e8c\u8fdb\u5236\u6587\u4ef6\u4e2d\u5417\uff1f\u73b0\u5728\u77e5\u9053 slice \u4e86\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u6b63\u786e\u5730\u7406\u89e3\u5b57\u7b26\u4e32\u5b57\u9762\u503c\u4e86\uff1a let s = \"Hello, world!\" ; \u8fd9\u91cc s \u7684\u7c7b\u578b\u662f &str \uff1a\u5b83\u662f\u4e00\u4e2a\u6307\u5411\u4e8c\u8fdb\u5236\u7a0b\u5e8f\u7279\u5b9a\u4f4d\u7f6e\u7684 slice\u3002\u8fd9\u4e5f\u5c31\u662f\u4e3a\u4ec0\u4e48\u5b57\u7b26\u4e32\u5b57\u9762\u503c\u662f\u4e0d\u53ef\u53d8\u7684\uff1b &str \u662f\u4e00\u4e2a\u4e0d\u53ef\u53d8\u5f15\u7528 \u3002","title":"\u5b57\u7b26\u4e32\u5b57\u9762\u503c\u5c31\u662f slice"},{"location":"ownership/#slice_3","text":"\u5728\u77e5\u9053\u4e86\u80fd\u591f\u83b7\u53d6\u5b57\u9762\u503c\u548c String \u7684 slice \u540e\uff0c\u6211\u4eec\u5bf9 first_word \u505a\u4e86\u6539\u8fdb\uff0c\u8fd9\u662f\u5b83\u7684\u7b7e\u540d\uff1a fn first_word ( s : & String ) -> & str { \u800c\u66f4\u6709\u7ecf\u9a8c\u7684 Rustacean \u4f1a\u7f16\u5199\u51fa\u8fd9\u6837\u7684\u51fd\u6570\u7b7e\u540d\uff0c\u56e0\u4e3a\u5b83\u4f7f\u5f97\u53ef\u4ee5\u5bf9 &String \u503c\u548c &str \u503c\u4f7f\u7528\u76f8\u540c\u7684\u51fd\u6570\uff1a fn first_word ( s : & str ) -> & str { \u5982\u679c\u6709\u4e00\u4e2a\u5b57\u7b26\u4e32 slice\uff0c\u53ef\u4ee5\u76f4\u63a5\u4f20\u9012\u5b83\u3002\u5982\u679c\u6709\u4e00\u4e2a String \uff0c\u5219\u53ef\u4ee5\u4f20\u9012\u6574\u4e2a String \u7684 slice \u6216\u5bf9 String \u7684\u5f15\u7528\u3002 \u8fd9\u79cd\u7075\u6d3b\u6027\u5229\u7528\u4e86 deref coercions \u7684\u4f18\u52bf\uff0c\u8fd9\u4e2a\u7279\u6027\u6211\u4eec\u5c06\u5728\u201c \u51fd\u6570\u548c\u65b9\u6cd5\u7684\u9690\u5f0f Deref \u5f3a\u5236\u8f6c\u6362 \u201d\u7ae0\u8282\u4e2d\u4ecb\u7ecd\u3002 \u5b9a\u4e49\u4e00\u4e2a\u83b7\u53d6\u5b57\u7b26\u4e32 slice \u800c\u4e0d\u662f String \u5f15\u7528\u7684\u51fd\u6570\u4f7f\u5f97\u6211\u4eec\u7684 API \u66f4\u52a0\u901a\u7528 \u5e76\u4e14\u4e0d\u4f1a\u4e22\u5931\u4efb\u4f55\u529f\u80fd\uff1a fn main () { let my_string = String :: from ( \"hello world\" ); // `first_word` \u9002\u7528\u4e8e `String`\uff08\u7684 slice\uff09\uff0c\u6574\u4f53\u6216\u5168\u90e8 let word = first_word ( & my_string [ 0 .. 6 ]); let word = first_word ( & my_string [ .. ]); // `first_word` \u4e5f\u9002\u7528\u4e8e `String` \u7684\u5f15\u7528\uff0c // \u8fd9\u7b49\u4ef7\u4e8e\u6574\u4e2a `String` \u7684 slice let word = first_word ( & my_string ); let my_string_literal = \"hello world\" ; // `first_word` \u9002\u7528\u4e8e\u5b57\u7b26\u4e32\u5b57\u9762\u503c\uff0c\u6574\u4f53\u6216\u5168\u90e8 let word = first_word ( & my_string_literal [ 0 .. 6 ]); let word = first_word ( & my_string_literal [ .. ]); // \u56e0\u4e3a\u5b57\u7b26\u4e32\u5b57\u9762\u503c\u5df2\u7ecf \u662f \u5b57\u7b26\u4e32 slice \u4e86\uff0c // \u8fd9\u4e5f\u662f\u9002\u7528\u7684\uff0c\u65e0\u9700 slice \u8bed\u6cd5\uff01 let word = first_word ( my_string_literal ); }","title":"\u5b57\u7b26\u4e32 slice \u4f5c\u4e3a\u53c2\u6570"},{"location":"ownership/#slice_4","text":"\u5b57\u7b26\u4e32 slice\uff0c\u6b63\u5982\u4f60\u60f3\u8c61\u7684\u90a3\u6837\uff0c\u662f\u9488\u5bf9\u5b57\u7b26\u4e32\u7684\u3002\u4e0d\u8fc7\u4e5f\u6709\u66f4\u901a\u7528\u7684 slice \u7c7b\u578b\u3002\u8003\u8651\u4e00\u4e0b\u8fd9\u4e2a\u6570\u7ec4\uff1a let a = [ 1 , 2 , 3 , 4 , 5 ]; \u5c31\u8ddf\u60f3\u8981\u83b7\u53d6\u5b57\u7b26\u4e32\u7684\u4e00\u90e8\u5206\u90a3\u6837\uff0c\u4e5f\u4f1a\u60f3\u8981\u5f15\u7528\u6570\u7ec4\u7684\u4e00\u90e8\u5206\u3002\u53ef\u4ee5\u8fd9\u6837\u505a\uff1a let a = [ 1 , 2 , 3 , 4 , 5 ]; let slice = & a [ 1 .. 3 ]; // \u8fd9\u4e2a slice \u7684\u7c7b\u578b\u662f &[i32]\u3002 assert_eq! ( slice , & [ 2 , 3 ]); \u5b83\u8ddf\u5b57\u7b26\u4e32 slice \u7684\u5de5\u4f5c\u65b9\u5f0f\u4e00\u6837\uff0c\u901a\u8fc7 \u5b58\u50a8\u7b2c\u4e00\u4e2a\u96c6\u5408\u5143\u7d20\u7684\u5f15\u7528\u548c\u4e00\u4e2a\u96c6\u5408\u603b\u957f\u5ea6 \u3002\u4f60\u53ef\u4ee5\u5bf9\u5176\u4ed6\u6240\u6709\u96c6\u5408\u4f7f\u7528\u8fd9\u7c7b slice\u3002\u7b2c\u516b\u7ae0\u8bb2\u5230 vector \u65f6\u4f1a\u8be6\u7ec6\u8ba8\u8bba\u8fd9\u4e9b\u96c6\u5408\u3002","title":"\u5176\u4ed6\u7c7b\u578b\u7684 slice"},{"location":"ownership/#_14","text":"\u6240\u6709\u6743 \u3001 \u501f\u7528 \u548c slice \u8fd9\u4e9b\u6982\u5ff5\u8ba9 Rust \u7a0b\u5e8f\u5728\u7f16\u8bd1\u65f6\u786e\u4fdd\u5185\u5b58\u5b89\u5168\u3002 Rust \u8bed\u8a00\u63d0\u4f9b\u4e86\u8ddf\u5176\u4ed6\u7cfb\u7edf\u7f16\u7a0b\u8bed\u8a00\u76f8\u540c\u7684\u65b9\u5f0f\u6765\u63a7\u5236\u4f60\u4f7f\u7528\u7684\u5185\u5b58\uff0c\u4f46\u62e5\u6709\u6570\u636e\u6240\u6709\u8005\u5728\u79bb\u5f00\u4f5c\u7528\u57df\u540e\u81ea\u52a8\u6e05\u9664\u5176\u6570\u636e\u7684\u529f\u80fd\u610f\u5473\u7740\u4f60\u65e0\u987b\u989d\u5916\u7f16\u5199\u548c\u8c03\u8bd5\u76f8\u5173\u7684\u63a7\u5236\u4ee3\u7801\u3002","title":"\u603b\u7ed3"},{"location":"packages/","text":"\u5305\u3001crate\u3001\u6a21\u5757 \u5f53\u7f16\u5199\u5927\u578b\u7a0b\u5e8f\u65f6\uff0c\u7ec4\u7ec7\u4f60\u7684\u4ee3\u7801\u663e\u5f97\u5c24\u4e3a\u91cd\u8981\u3002 \u6982\u5ff5 \u201c \u4f5c\u7528\u57df\uff08scope\uff09 \u201d\uff1a\u4ee3\u7801\u6240\u5728\u7684\u5d4c\u5957\u4e0a\u4e0b\u6587\u6709\u4e00\u7ec4\u5b9a\u4e49\u4e3a \u201c in scope \u201d \u7684\u540d\u79f0\u3002 \u5f53\u9605\u8bfb\u3001\u7f16\u5199\u548c\u7f16\u8bd1\u4ee3\u7801\u65f6\uff0c\u7a0b\u5e8f\u5458\u548c\u7f16\u8bd1\u5668\u9700\u8981\u77e5\u9053\u7279\u5b9a\u4f4d\u7f6e\u7684\u7279\u5b9a\u540d\u79f0\u662f\u5426\u5f15\u7528\u4e86 \u53d8\u91cf \u3001 \u51fd\u6570 \u3001 \u7ed3\u6784\u4f53 \u3001 \u679a\u4e3e \u3001 \u6a21\u5757 \u3001 \u5e38\u91cf \u6216\u8005\u5176\u4ed6\u6709\u610f\u4e49\u7684 \u9879 \u3002 \u4f60\u53ef\u4ee5\u521b\u5efa\u4f5c\u7528\u57df\uff0c\u4ee5\u53ca\u6539\u53d8\u54ea\u4e9b\u540d\u79f0\u5728\u4f5c\u7528\u57df\u5185\u8fd8\u662f\u4f5c\u7528\u57df\u5916\u3002 \u540c\u4e00\u4e2a\u4f5c\u7528\u57df\u5185\u4e0d\u80fd\u62e5\u6709\u4e24\u4e2a\u76f8\u540c\u540d\u79f0\u7684\u9879 \u3002 Rust \u6709\u8bb8\u591a\u529f\u80fd\u53ef\u4ee5 \u7ba1\u7406\u4ee3\u7801\u7684\u7ec4\u7ec7 \uff0c\u5305\u62ec\u54ea\u4e9b\u5185\u5bb9\u53ef\u4ee5\u88ab\u516c\u5f00\uff0c\u54ea\u4e9b\u5185\u5bb9\u4f5c\u4e3a\u79c1\u6709\u90e8\u5206\uff0c\u4ee5\u53ca\u7a0b\u5e8f\u6bcf\u4e2a\u4f5c\u7528\u57df\u4e2d\u7684\u540d\u5b57\u3002\u8fd9\u4e9b\u529f\u80fd\u3002\u8fd9\u6709\u65f6\u88ab\u79f0\u4e3a \u201c \u6a21\u5757\u7cfb\u7edf \uff08the module system\uff09\u201d\uff0c\u5305\u62ec\uff1a \u5305\uff08Packages\uff09 \uff1a Cargo \u7684\u4e00\u4e2a\u529f\u80fd\uff0c\u5b83\u5141\u8bb8\u4f60\u6784\u5efa\u3001\u6d4b\u8bd5\u548c\u5206\u4eab crate\u3002 Crates \uff1a\u4e00\u4e2a\u6a21\u5757\u7684\u6811\u5f62\u7ed3\u6784\uff0c\u5b83\u5f62\u6210\u4e86\u5e93\u6216\u4e8c\u8fdb\u5236\u9879\u76ee\u3002 \u6a21\u5757\uff08Modules\uff09\u548c use \uff1a \u5141\u8bb8\u4f60\u63a7\u5236\u4f5c\u7528\u57df\u548c\u8def\u5f84\u7684\u79c1\u6709\u6027\u3002 \u8def\u5f84\uff08path\uff09 \uff1a\u4e00\u4e2a\u547d\u540d\u4f8b\u5982\u7ed3\u6784\u4f53\u3001\u51fd\u6570\u6216\u6a21\u5757\u7b49\u9879\u7684\u65b9\u5f0f \u5305\u548ccrate crate \u662f Rust \u5728\u7f16\u8bd1\u65f6\u6700\u5c0f\u7684\u4ee3\u7801\u5355\u4f4d\u3002\u5982\u679c\u7528 rustc \u800c\u4e0d\u662f cargo \u6765\u7f16\u8bd1\u4e00\u4e2a\u6587\u4ef6\uff0c\u7f16\u8bd1\u5668\u8fd8\u662f\u4f1a\u5c06\u90a3\u4e2a\u6587\u4ef6\u8ba4\u4f5c\u4e00\u4e2a crate \u3002 crate \u53ef\u4ee5\u5305\u542b\u6a21\u5757\uff0c\u6a21\u5757\u53ef\u4ee5\u5b9a\u4e49\u5728\u5176\u4ed6\u6587\u4ef6\uff0c\u7136\u540e\u548c crate \u4e00\u8d77\u7f16\u8bd1\uff0c\u6211\u4eec\u4f1a\u5728\u63a5\u4e0b\u6765\u7684\u7ae0\u8282\u4e2d\u9047\u5230\u3002 crate \u6709\u4e24\u79cd\u5f62\u5f0f\uff1a \u4e8c\u8fdb\u5236\u9879 \u548c \u5e93 \u3002 \u4e8c\u8fdb\u5236\u9879 \u53ef\u4ee5\u88ab\u7f16\u8bd1\u4e3a\u53ef\u6267\u884c\u7a0b\u5e8f\uff0c\u6bd4\u5982\u4e00\u4e2a\u547d\u4ee4\u884c\u7a0b\u5e8f\u6216\u8005\u4e00\u4e2a\u670d\u52a1\u5668\u3002 \u5b83\u4eec\u5fc5\u987b\u6709\u4e00\u4e2a main \u51fd\u6570\u6765\u5b9a\u4e49\u5f53\u7a0b\u5e8f\u88ab\u6267\u884c\u7684\u65f6\u5019\u6240\u9700\u8981\u505a\u7684\u4e8b\u60c5\u3002 \u76ee\u524d\u4e3a\u6b62\u793a\u4f8b\u4e2d\u6240\u521b\u5efa\u7684 crate \u90fd\u662f\u4e8c\u8fdb\u5236\u9879\u3002 \u5e93 \u5e76\u6ca1\u6709 main \u51fd\u6570\uff0c\u5b83\u4eec\u4e5f\u4e0d\u4f1a\u7f16\u8bd1\u4e3a\u53ef\u6267\u884c\u7a0b\u5e8f\uff0c\u5b83\u4eec\u63d0\u4f9b\u4e00\u4e9b\u8bf8\u5982\u51fd\u6570\u4e4b\u7c7b\u7684\u4e1c\u897f \uff0c\u4f7f\u5176\u4ed6\u9879\u76ee\u4e5f\u80fd\u4f7f\u7528\u8fd9\u4e9b\u4e1c\u897f\u3002 \u6bd4\u5982 rand crate \u5c31\u63d0\u4f9b\u4e86\u751f\u6210\u968f\u673a\u6570\u7684\u4e1c\u897f\u3002\u5927\u591a\u6570\u65f6\u95f4 Rustaceans \u8bf4\u7684 crate \u6307\u7684\u90fd\u662f \u5e93 \uff0c\u8fd9\u4e0e\u5176\u4ed6\u7f16\u7a0b\u8bed\u8a00\u4e2d library \u6982\u5ff5\u4e00\u81f4\u3002 crate root \u662f\u4e00\u4e2a\u6e90\u6587\u4ef6\uff0cRust \u7f16\u8bd1\u5668\u4ee5\u5b83\u4e3a\u8d77\u59cb\u70b9\uff0c\u5e76\u6784\u6210\u4f60\u7684 crate \u7684\u6839\u6a21\u5757\uff08\u6211\u4eec\u5c06\u5728 \u201c \u5b9a\u4e49\u6a21\u5757\u6765\u63a7\u5236\u4f5c\u7528\u57df\u4e0e\u79c1\u6709\u6027 \u201d \u4e00\u8282\u6df1\u5165\u89e3\u8bfb\uff09\u3002 \u5305\uff08package\uff09 \u662f \u63d0\u4f9b\u4e00\u7cfb\u5217\u529f\u80fd\u7684\u4e00\u4e2a\u6216\u8005\u591a\u4e2a crate \u3002\u4e00\u4e2a\u5305\u4f1a\u5305\u542b\u4e00\u4e2a Cargo.toml \u6587\u4ef6\uff0c\u9610\u8ff0\u5982\u4f55\u53bb\u6784\u5efa\u8fd9\u4e9b crate \u3002 Cargo \u5c31\u662f\u4e00\u4e2a\u5305\u542b\u6784\u5efa\u4f60\u4ee3\u7801\u7684\u4e8c\u8fdb\u5236\u9879\u7684\u5305\u3002Cargo \u4e5f\u5305\u542b\u8fd9\u4e9b\u4e8c\u8fdb\u5236\u9879\u6240\u4f9d\u8d56\u7684 \u5e93 \u3002\u5176\u4ed6\u9879\u76ee\u4e5f\u80fd\u7528 Cargo \u5e93\u6765\u5b9e\u73b0\u4e0e Cargo \u547d\u4ee4\u884c\u7a0b\u5e8f\u4e00\u6837\u7684\u903b\u8f91\u3002 \u5305\u4e2d\u53ef\u4ee5\u5305\u542b\u81f3\u591a\u4e00\u4e2a\u5e93 crate(library crate)\u3002\u5305\u4e2d\u53ef\u4ee5\u5305\u542b\u4efb\u610f\u591a\u4e2a\u4e8c\u8fdb\u5236 crate (binary crate)\uff0c\u4f46\u662f\u5fc5\u987b\u81f3\u5c11\u5305\u542b\u4e00\u4e2a crate \uff08\u65e0\u8bba\u662f\u5e93\u7684\u8fd8\u662f\u4e8c\u8fdb\u5236\u7684\uff09\u3002 \u770b\u770b\u521b\u5efa\u5305\u7684\u65f6\u5019\u4f1a\u53d1\u751f\u4ec0\u4e48\u3002\u9996\u5148\uff0c\u8f93\u5165\u547d\u4ee4 cargo new \uff1a $ cargo new my-project Created binary ( application ) ` my-project ` package $ ls my-project Cargo.toml src # Cargo \u9075\u5faa\u7684\u4e00\u4e2a\u7ea6\u5b9a\uff1asrc/main.rs \u5c31\u662f\u4e00\u4e2a\u4e0e\u5305\u540c\u540d\u7684\u4e8c\u8fdb\u5236 crate \u7684 crate \u6839\u3002 $ ls my-project/src main.rs # \u540c\u6837\u7684\uff0cCargo \u77e5\u9053\u5982\u679c\u5305\u76ee\u5f55\u4e2d\u5305\u542b src/lib.rs\uff0c\u5219\u5305\u5e26\u6709\u4e0e\u5176\u540c\u540d\u7684\u5e93 crate\uff0c\u4e14 src/lib.rs \u662f crate \u6839\u3002 # crate \u6839\u6587\u4ef6\u5c06\u7531 Cargo \u4f20\u9012\u7ed9 rustc \u6765\u5b9e\u9645\u6784\u5efa\u5e93\u6216\u8005\u4e8c\u8fdb\u5236\u9879\u76ee\u3002 \u5728\u6b64\uff0c\u6211\u4eec\u6709\u4e86\u4e00\u4e2a\u53ea\u5305\u542b src/main.rs \u7684\u5305\uff0c \u610f\u5473\u7740\u5b83\u53ea\u542b\u6709\u4e00\u4e2a\u540d\u4e3a my-project \u7684\u4e8c\u8fdb\u5236 crate \u3002 \u5982\u679c\u4e00\u4e2a\u5305\u540c\u65f6\u542b\u6709 src/main.rs \u548c src/lib.rs \uff0c\u5219\u5b83\u6709 \u4e24\u4e2a crate \uff1a\u4e00\u4e2a\u4e8c\u8fdb\u5236\u7684\u548c\u4e00\u4e2a\u5e93\u7684\uff0c\u4e14\u540d\u5b57\u90fd\u4e0e\u5305\u76f8\u540c\u3002 \u901a\u8fc7\u5c06\u6587\u4ef6\u653e\u5728 src/bin \u76ee\u5f55\u4e0b\uff0c\u4e00\u4e2a\u5305\u53ef\u4ee5\u62e5\u6709\u591a\u4e2a\u4e8c\u8fdb\u5236 crate \uff1a \u6bcf\u4e2a src/bin \u4e0b\u7684\u6587\u4ef6\u90fd\u4f1a\u88ab\u7f16\u8bd1\u6210\u4e00\u4e2a\u72ec\u7acb\u7684\u4e8c\u8fdb\u5236 crate\u3002 \u5b9a\u4e49\u6a21\u5757 \u4e00\u4e2a\u7b80\u5355\u7684\u53c2\u8003\uff0c\u7528\u6765\u89e3\u91ca\u6a21\u5757\u3001\u8def\u5f84\u3001use\u5173\u952e\u8bcd\u548cpub\u5173\u952e\u8bcd\u5982\u4f55\u5728\u7f16\u8bd1\u5668\u4e2d\u5de5\u4f5c\uff0c\u4ee5\u53ca\u5927\u90e8\u5206\u5f00\u53d1\u8005\u5982\u4f55\u7ec4\u7ec7\u4ed6\u4eec\u7684\u4ee3\u7801\u3002 \u4ececrate\u6839\u8282\u70b9\u5f00\u59cb : \u5f53\u7f16\u8bd1\u4e00\u4e2acrate, \u7f16\u8bd1\u5668\u9996\u5148\u5728crate\u6839\u6587\u4ef6\uff08\u901a\u5e38\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u5e93crate\u800c\u8a00\u662f src/lib.rs \uff0c\u5bf9\u4e8e\u4e00\u4e2a\u4e8c\u8fdb\u5236crate\u800c\u8a00\u662f src/main.rs \uff09\u4e2d\u5bfb\u627e\u9700\u8981\u88ab\u7f16\u8bd1\u7684\u4ee3\u7801\u3002 \u58f0\u660e\u6a21\u5757 : \u5728crate\u6839\u6587\u4ef6\u4e2d\uff0c\u4f60\u53ef\u4ee5\u58f0\u660e\u4e00\u4e2a\u65b0\u6a21\u5757\uff1b\u6bd4\u5982\uff0c\u4f60\u7528 mod garden \u58f0\u660e\u4e86\u4e00\u4e2a\u53eb\u505agarden\u7684\u6a21\u5757\u3002\u7f16\u8bd1\u5668\u4f1a\u5728\u4e0b\u5217\u8def\u5f84\u4e2d\u5bfb\u627e\u6a21\u5757\u4ee3\u7801\uff1a \u5185\u8054\uff0c\u5728\u5927\u62ec\u53f7\u4e2d\uff0c\u5f53 mod garden \u540e\u65b9\u4e0d\u662f\u4e00\u4e2a\u5206\u53f7\u800c\u662f\u4e00\u4e2a\u5927\u62ec\u53f7 \u5728\u6587\u4ef6 src/garden.rs \u5728\u6587\u4ef6 src/garden/mod.rs \u58f0\u660e\u5b50\u6a21\u5757 : \u5728\u9664\u4e86crate\u6839\u8282\u70b9\u4ee5\u5916\u7684\u5176\u4ed6\u6587\u4ef6\u4e2d\uff0c\u4f60\u53ef\u4ee5\u5b9a\u4e49 \u5b50\u6a21\u5757 \u3002\u6bd4\u5982\uff0c\u4f60\u53ef\u80fd\u5728 src/garden.rs \u4e2d\u5b9a\u4e49\u4e86 mod vegetables ;\u3002\u7f16\u8bd1\u5668\u4f1a\u5728\u4ee5\u7236\u6a21\u5757\u547d\u540d\u7684\u76ee\u5f55\u4e2d\u5bfb\u627e\u5b50\u6a21\u5757\u4ee3\u7801\uff1a \u5185\u8054, \u5728\u5927\u62ec\u53f7\u4e2d\uff0c\u5f53 mod vegetables \u540e\u65b9\u4e0d\u662f\u4e00\u4e2a\u5206\u53f7\u800c\u662f\u4e00\u4e2a\u5927\u62ec\u53f7 \u5728\u6587\u4ef6 src/garden/vegetables.rs \u5728\u6587\u4ef6 src/garden/vegetables/mod.rs \u6a21\u5757\u4e2d\u7684\u4ee3\u7801\u8def\u5f84 : \u4e00\u65e6\u4e00\u4e2a\u6a21\u5757\u662f\u4f60crate\u7684\u4e00\u90e8\u5206\uff0c \u4f60\u53ef\u4ee5\u5728\u9690\u79c1\u89c4\u5219\u5141\u8bb8\u7684\u524d\u63d0\u4e0b\uff0c\u4ece\u540c\u4e00\u4e2acrate\u5185\u7684\u4efb\u610f\u5730\u65b9\uff0c\u901a\u8fc7\u4ee3\u7801\u8def\u5f84\u5f15\u7528\u8be5\u6a21\u5757\u7684\u4ee3\u7801\u3002\u4e3e\u4f8b\u800c\u8a00\uff0c\u4e00\u4e2a garden vegetables \u6a21\u5757\u4e0b\u7684Asparagus\u7c7b\u578b\u53ef\u4ee5\u5728 crate::garden::vegetables::Asparagus \u88ab\u627e\u5230\u3002 \u79c1\u6709 vs \u516c\u7528 : \u4e00\u4e2a\u6a21\u5757\u91cc\u7684\u4ee3\u7801\u9ed8\u8ba4\u5bf9\u5176\u7236\u6a21\u5757\u79c1\u6709\u3002\u4e3a\u4e86\u4f7f\u4e00\u4e2a\u6a21\u5757\u516c\u7528\uff0c\u5e94\u5f53\u5728\u58f0\u660e\u65f6\u4f7f\u7528 pub mod \u66ff\u4ee3 mod \u3002\u4e3a\u4e86\u4f7f\u4e00\u4e2a\u516c\u7528\u6a21\u5757\u5185\u90e8\u7684\u6210\u5458\u516c\u7528\uff0c\u5e94\u5f53\u5728\u58f0\u660e\u524d\u4f7f\u7528 pub \u3002 use \u5173\u952e\u5b57 : \u5728\u4e00\u4e2a\u4f5c\u7528\u57df\u5185\uff0c use \u5173\u952e\u5b57\u521b\u5efa\u4e86\u4e00\u4e2a\u6210\u5458\u7684\u5feb\u6377\u65b9\u5f0f\uff0c\u7528\u6765\u51cf\u5c11\u957f\u8def\u5f84\u7684\u91cd\u590d\u3002\u5728\u4efb\u4f55\u53ef\u4ee5\u5f15\u7528 crate::garden::vegetables::Asparagus \u7684\u4f5c\u7528\u57df, \u4f60\u53ef\u4ee5\u901a\u8fc7 use crate::garden::vegetables::Asparagus; \u521b\u5efa\u4e00\u4e2a\u5feb\u6377\u65b9\u5f0f\uff0c\u7136\u540e\u4f60\u5c31\u53ef\u4ee5\u5728\u4f5c\u7528\u57df\u4e2d\u53ea\u5199Asparagus\u6765\u4f7f\u7528\u8be5\u7c7b\u578b\u3002 \u8fd9\u91cc\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a backyard \u7684 \u4e8c\u8fdb\u5236 crate \u6765\u8bf4\u660e\u8fd9\u4e9b\u89c4\u5219\u3002\u8be5 crate \u7684\u8def\u5f84\u540c\u6837\u547d\u540d\u4e3abackyard\uff0c\u8be5\u8def\u5f84\u5305\u542b\u4e86\u8fd9\u4e9b\u6587\u4ef6\u548c\u76ee\u5f55\uff1a backyard \u251c\u2500\u2500 Cargo.lock \u251c\u2500\u2500 Cargo.toml \u2514\u2500\u2500 src \u251c\u2500\u2500 garden \u2502 \u2514\u2500\u2500 vegetables.rs \u251c\u2500\u2500 garden.rs \u2514\u2500\u2500 main.rs # crate\u6839\u6587\u4ef6 \u6587\u4ef6\u540d: src/main.rs use crate :: garden :: vegetables :: Asparagus ; pub mod garden ; // \u544a\u8bc9\u7f16\u8bd1\u5668\u5e94\u8be5\u5305\u542b\u5728src/garden.rs\u6587\u4ef6\u4e2d\u53d1\u73b0\u7684\u4ee3\u7801 fn main () { let plant = Asparagus {}; println! ( \"I'm growing {:?}!\" , plant ); } \u6587\u4ef6\u540d: src/garden.rs pub mod vegetables ; // \u610f\u5473\u7740\u5728src/garden/vegetables.rs\u4e2d\u7684\u4ee3\u7801\u4e5f\u5e94\u8be5\u88ab\u5305\u62ec\u3002 \u6587\u4ef6\u540d: src/garden/vegetables.rs #[derive(Debug)] pub struct Asparagus {} \u5bf9\u76f8\u5173\u4ee3\u7801\u8fdb\u884c\u5206\u7ec4 \u6a21\u5757 \u53ef\u4ee5\u5c06\u4e00\u4e2a crate \u4e2d\u7684\u4ee3\u7801\u8fdb\u884c\u5206\u7ec4\uff0c\u4ee5\u63d0\u9ad8\u53ef\u8bfb\u6027\u4e0e\u91cd\u7528\u6027\u3002 \u56e0\u4e3a\u4e00\u4e2a \u6a21\u5757\u4e2d\u7684\u4ee3\u7801\u9ed8\u8ba4\u662f\u79c1\u6709\u7684 \uff0c\u6240\u4ee5\u8fd8\u53ef\u4ee5\u5229\u7528\u6a21\u5757\u63a7\u5236\u9879\u7684 \u79c1\u6709\u6027 \u3002 \u79c1\u6709\u9879\u662f\u4e0d\u53ef\u4e3a\u5916\u90e8\u4f7f\u7528\u7684\u5185\u5728\u8be6\u7ec6\u5b9e\u73b0\u3002\u4e5f\u53ef\u4ee5\u5c06\u6a21\u5757\u548c\u5b83\u5176\u4e2d\u7684\u9879\u6807\u8bb0\u4e3a\u516c\u5f00\u7684\uff0c\u8fd9\u6837\uff0c\u5916\u90e8\u4ee3\u7801\u5c31\u53ef\u4ee5\u4f7f\u7528\u5e76\u4f9d\u8d56\u4e0e\u5b83\u4eec\u3002 \u5728\u9910\u996e\u4e1a\uff0c\u9910\u9986\u4e2d\u4f1a\u6709\u4e00\u4e9b\u5730\u65b9\u88ab\u79f0\u4e4b\u4e3a \u524d\u53f0 \uff08front of house\uff09\uff0c\u8fd8\u6709\u53e6\u5916\u4e00\u4e9b\u5730\u65b9\u88ab\u79f0\u4e4b\u4e3a \u540e\u53f0 \uff08back of house\uff09\u3002 \u524d\u53f0\u662f\u62db\u5f85\u987e\u5ba2\u7684\u5730\u65b9\uff0c\u5728\u8fd9\u91cc\uff0c\u5e97\u4e3b\u53ef\u4ee5\u4e3a\u987e\u5ba2\u5b89\u6392\u5ea7\u4f4d\uff0c\u670d\u52a1\u5458\u63a5\u53d7\u987e\u5ba2\u4e0b\u5355\u548c\u4ed8\u6b3e\uff0c\u8c03\u9152\u5e08\u4f1a\u5236\u4f5c\u996e\u54c1\u3002 \u540e\u53f0\u5219\u662f\u7531\u53a8\u5e08\u5de5\u4f5c\u7684\u53a8\u623f\uff0c\u6d17\u7897\u5de5\u7684\u5de5\u4f5c\u5730\u70b9\uff0c\u4ee5\u53ca\u7ecf\u7406\u505a\u884c\u653f\u5de5\u4f5c\u7684\u5730\u65b9\u7ec4\u6210\u3002 \u53ef\u4ee5\u5c06\u51fd\u6570\u653e\u7f6e\u5230\u5d4c\u5957\u7684\u6a21\u5757\u4e2d\uff0c\u6765\u4f7f\u6211\u4eec\u7684 crate \u7ed3\u6784\u4e0e\u5b9e\u9645\u7684\u9879\u76ee\u4e1a\u52a1\u7ed3\u6784\u76f8\u540c\u3002\u901a\u8fc7\u6267\u884c cargo new --lib restaurant \uff0c \u6765\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u540d\u4e3a restaurant \u7684\u5e93\u3002\u7136\u540e\u5c06\u793a\u4f8b\u4e2d\u6240\u7f57\u5217\u51fa\u6765\u7684\u4ee3\u7801\u653e\u5165 src/lib.rs \u4e2d\uff0c\u6765\u5b9a\u4e49\u4e00\u4e9b\u6a21\u5757\u548c\u51fd\u6570\u3002 \u6587\u4ef6\u540d: src/lib.rs // \u4e00\u4e2a\u5305\u542b\u4e86\u5176\u4ed6\u5185\u7f6e\u4e86\u51fd\u6570\u7684\u6a21\u5757\u7684 front_of_house \u6a21\u5757 // \u5b9a\u4e49\u4e00\u4e2a\u6a21\u5757\uff0c\u662f\u4ee5 mod \u5173\u952e\u5b57\u4e3a\u8d77\u59cb\uff0c\u7136\u540e\u6307\u5b9a\u6a21\u5757\u7684\u540d\u5b57\uff08\u53eb\u505a front_of_house\uff09\uff0c\u5e76\u4e14\u7528\u82b1\u62ec\u53f7\u5305\u56f4\u6a21\u5757\u7684\u4e3b\u4f53\u3002 mod front_of_house { // \u5728\u6a21\u5757\u5185\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u5b9a\u4e49\u5176\u4ed6\u7684\u6a21\u5757\uff0c // hosting \u6a21\u5757 mod hosting { // \u6a21\u5757\u8fd8\u53ef\u4ee5\u4fdd\u5b58\u4e00\u4e9b\u5b9a\u4e49\u7684\u5176\u4ed6\u9879 // \u6bd4\u5982\u7ed3\u6784\u4f53\u3001\u679a\u4e3e\u3001\u5e38\u91cf\u3001traits\u3001\u6216\u8005\u51fd\u6570\u3002 fn add_to_waitlist () {} fn seat_at_table () {} } // serving \u6a21\u5757 mod serving { fn take_order () {} fn serve_order () {} fn take_payment () {} } } \u901a\u8fc7\u4f7f\u7528\u6a21\u5757\uff0c\u53ef\u4ee5\u5c06\u76f8\u5173\u7684\u5b9a\u4e49\u5206\u7ec4\u5230\u4e00\u8d77\uff0c\u5e76\u6307\u51fa\u4ed6\u4eec\u4e3a\u4ec0\u4e48\u76f8\u5173 \u3002 \u7a0b\u5e8f\u5458\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528\u8fd9\u6bb5\u4ee3\u7801\uff0c\u66f4\u52a0\u5bb9\u6613\u5730\u627e\u5230\u4ed6\u4eec\u60f3\u8981\u7684\u5b9a\u4e49\uff0c\u56e0\u4e3a\u4ed6\u4eec\u53ef\u4ee5\u57fa\u4e8e\u5206\u7ec4\u6765\u5bf9\u4ee3\u7801\u8fdb\u884c\u5bfc\u822a\uff0c\u800c\u4e0d\u9700\u8981\u9605\u8bfb\u6240\u6709\u7684\u5b9a\u4e49\u3002 \u7a0b\u5e8f\u5458\u5411\u8fd9\u6bb5\u4ee3\u7801\u4e2d\u6dfb\u52a0\u4e00\u4e2a\u65b0\u7684\u529f\u80fd\u65f6\uff0c\u4ed6\u4eec\u4e5f\u4f1a\u77e5\u9053\u4ee3\u7801\u5e94\u8be5\u653e\u7f6e\u5728\u4f55\u5904\uff0c\u53ef\u4ee5\u4fdd\u6301\u7a0b\u5e8f\u7684\u7ec4\u7ec7\u6027\u3002 \u5728\u524d\u9762\u63d0\u5230\u4e86\uff0c src/main.rs \u548c src/lib.rs \u53eb\u505a crate \u6839\u3002 \u4e4b\u6240\u4ee5\u8fd9\u6837\u53eb\u5b83\u4eec\u662f\u56e0\u4e3a\u8fd9\u4e24\u4e2a\u6587\u4ef6\u7684\u5185\u5bb9\u90fd\u5206\u522b\u5728 crate \u6a21\u5757\u7ed3\u6784\u7684\u6839\u7ec4\u6210\u4e86\u4e00\u4e2a\u540d\u4e3a crate \u7684\u6a21\u5757\uff0c\u8be5\u7ed3\u6784\u88ab\u79f0\u4e3a \u6a21\u5757\u6811 \uff08module tree\uff09\u3002 # \u793a\u4f8b\u7684\u6a21\u5757\u6811 # \u8fd9\u4e2a\u6811\u5c55\u793a\u4e86\u4e00\u4e9b\u6a21\u5757\u662f\u5982\u4f55\u88ab\u5d4c\u5165\u5230\u53e6\u4e00\u4e2a\u6a21\u5757\u7684 # \u8fd8\u5c55\u793a\u4e86\u4e00\u4e9b\u6a21\u5757\u662f\u4e92\u4e3a \u5144\u5f1f\uff08siblings\uff09 \u7684\uff0c\u8fd9\u610f\u5473\u7740\u5b83\u4eec\u5b9a\u4e49\u5728\u540c\u4e00\u6a21\u5757\u4e2d # \uff08hosting \u548c serving \u88ab\u4e00\u8d77\u5b9a\u4e49\u5728 front_of_house \u4e2d\uff09\u3002 crate \u2514\u2500\u2500 front_of_house \u251c\u2500\u2500 hosting \u2502 \u251c\u2500\u2500 add_to_waitlist \u2502 \u2514\u2500\u2500 seat_at_table \u2514\u2500\u2500 serving \u251c\u2500\u2500 take_order \u251c\u2500\u2500 serve_order \u2514\u2500\u2500 take_payment \u6cbf\u7528\u5bb6\u5ead\u5173\u7cfb\u7684\u6bd4\u55bb\uff0c\u5982\u679c\u4e00\u4e2a\u6a21\u5757 A \u88ab\u5305\u542b\u5728\u6a21\u5757 B \u4e2d\uff0c\u6211\u4eec\u5c06\u6a21\u5757 A \u79f0\u4e3a\u6a21\u5757 B \u7684 \u5b50\u6a21\u5757 \uff08child\uff09\uff0c\u6a21\u5757 B \u5219\u662f\u6a21\u5757 A \u7684 \u7236\u6a21\u5757 \uff08parent\uff09\u3002\u6ce8\u610f\uff0c\u6574\u4e2a\u6a21\u5757\u6811\u90fd\u690d\u6839\u4e8e\u540d\u4e3a crate \u7684\u9690\u5f0f\u6a21\u5757\u4e0b\u3002 \u8fd9\u4e2a\u6a21\u5757\u6811\u5f88\u50cf\u7535\u8111\u4e0a\u6587\u4ef6\u7cfb\u7edf\u7684 \u76ee\u5f55\u6811 \uff1b\u8fd9\u662f\u4e00\u4e2a\u975e\u5e38\u6070\u5f53\u7684\u7c7b\u6bd4\uff01\u5c31\u50cf\u6587\u4ef6\u7cfb\u7edf\u7684\u76ee\u5f55\uff0c\u53ef\u4ee5\u4f7f\u7528\u6a21\u5757\u6765\u7ec4\u7ec7\u4f60\u7684\u4ee3\u7801\u3002 \u5f15\u7528\u6a21\u5757 \u4f7f\u7528\u8def\u5f84\u7684\u65b9\u5f0f\uff0c\u5c31\u50cf\u5728\u6587\u4ef6\u7cfb\u7edf\u4f7f\u7528\u8def\u5f84\u4e00\u6837\u3002 \u8def\u5f84\u6709\u4e24\u79cd\u5f62\u5f0f\uff1a \u7edd\u5bf9\u8def\u5f84 \uff08absolute path\uff09\u4ece crate \u6839\u5f00\u59cb\uff0c\u4ee5 crate \u540d\u6216\u8005 \u5b57\u9762\u503c crate \u5f00\u5934\u3002 \u76f8\u5bf9\u8def\u5f84 \uff08relative path\uff09\u4ece\u5f53\u524d\u6a21\u5757\u5f00\u59cb\uff0c\u4ee5 self \u3001 super \u6216 \u5f53\u524d\u6a21\u5757\u7684\u6807\u8bc6\u7b26 \u5f00\u5934\u3002 \u7edd\u5bf9\u8def\u5f84\u548c\u76f8\u5bf9\u8def\u5f84\u90fd\u540e\u8ddf\u4e00\u4e2a\u6216\u591a\u4e2a\u7531\u53cc\u5192\u53f7\uff08 :: \uff09\u5206\u5272\u7684\u6807\u8bc6\u7b26\u3002 \u6587\u4ef6\u540d: src/lib.rs mod front_of_house { mod hosting { fn add_to_waitlist () {} } } pub fn eat_at_restaurant () { // \u7edd\u5bf9\u8def\u5f84 // \u88ab\u5b9a\u4e49\u5728\u540c\u4e00 crate \u4e2d\uff0c\u8fd9\u610f\u5473\u7740\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 crate \u5173\u952e\u5b57\u4e3a\u8d77\u59cb\u7684\u7edd\u5bf9\u8def\u5f84\u3002 crate :: front_of_house :: hosting :: add_to_waitlist (); // \u76f8\u5bf9\u8def\u5f84 // \u4ee5 front_of_house \u4e3a\u8d77\u59cb // \u4ee5\u540d\u79f0\u4e3a\u8d77\u59cb\uff0c\u610f\u5473\u7740\u8be5\u8def\u5f84\u662f\u76f8\u5bf9\u8def\u5f84\u3002 front_of_house :: hosting :: add_to_waitlist (); } // \u8fd9\u4e2a\u4f8b\u5b50\u65e0\u6cd5\u7f16\u8bd1\u901a\u8fc7, \u56e0\u4e3a hosting \u5b50\u6a21\u5757\u662f\u79c1\u6709\u7684\uff08\u9ed8\u8ba4\uff09 \u9009\u62e9\u4f7f\u7528\u76f8\u5bf9\u8def\u5f84\u8fd8\u662f\u7edd\u5bf9\u8def\u5f84\uff0c\u8fd8\u662f\u8981\u53d6\u51b3\u4e8e\u4f60\u7684\u9879\u76ee\u3002\u53d6\u51b3\u4e8e\u4f60\u662f\u66f4\u503e\u5411\u4e8e\u5c06\u9879\u7684\u5b9a\u4e49\u4ee3\u7801\u4e0e\u4f7f\u7528\u8be5\u9879\u7684\u4ee3\u7801\u5206\u5f00\u6765\u79fb\u52a8\uff0c\u8fd8\u662f\u4e00\u8d77\u79fb\u52a8\u3002 build \u62a5\u9519: $ cargo build Compiling restaurant v0.1.0 ( file:///projects/restaurant ) error [ E0603 ] : module ` hosting ` is private --> src/lib.rs:9:28 | 9 | crate::front_of_house::hosting::add_to_waitlist () ; | ^^^^^^^ private module | note: the module ` hosting ` is defined here --> src/lib.rs:2:5 | 2 | mod hosting { | ^^^^^^^^^^^ error [ E0603 ] : module ` hosting ` is private --> src/lib.rs:12:21 | 12 | front_of_house::hosting::add_to_waitlist () ; | ^^^^^^^ private module | note: the module ` hosting ` is defined here --> src/lib.rs:2:5 | 2 | mod hosting { | ^^^^^^^^^^^ For more information about this error, try ` rustc --explain E0603 ` . error: could not compile ` restaurant ` due to 2 previous errors \u9519\u8bef\u4fe1\u606f\u8bf4 hosting \u6a21\u5757\u662f\u79c1\u6709\u7684\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u793a\u4f8b\u62e5\u6709 hosting \u6a21\u5757\u548c add_to_waitlist \u51fd\u6570\u7684\u7684\u6b63\u786e\u8def\u5f84\uff0c\u4f46\u662f Rust \u4e0d\u8ba9\u6211\u4eec\u4f7f\u7528\uff0c\u56e0\u4e3a\u5b83 \u4e0d\u80fd\u8bbf\u95ee\u79c1\u6709\u7247\u6bb5 \u3002 \u6a21\u5757\u4e0d\u4ec5\u5bf9\u4e8e\u7ec4\u7ec7\u4ee3\u7801\u5f88\u6709\u7528\u3002\u8fd8\u5b9a\u4e49\u4e86 Rust \u7684 \u79c1\u6709\u6027\u8fb9\u754c \uff08privacy boundary\uff09\uff1a\u8fd9\u6761\u754c\u7ebf\u4e0d\u5141\u8bb8\u5916\u90e8\u4ee3\u7801\u4e86\u89e3\u3001\u8c03\u7528\u548c\u4f9d\u8d56\u88ab\u5c01\u88c5\u7684\u5b9e\u73b0\u7ec6\u8282\u3002\u6240\u4ee5\uff0c\u5982\u679c\u5e0c\u671b\u521b\u5efa\u4e00\u4e2a\u79c1\u6709\u51fd\u6570\u6216\u7ed3\u6784\u4f53\uff0c\u53ef\u4ee5\u5c06\u5176\u653e\u5165\u6a21\u5757\u3002 Rust \u4e2d \u9ed8\u8ba4 \u6240\u6709\u9879\uff08\u51fd\u6570\u3001\u65b9\u6cd5\u3001\u7ed3\u6784\u4f53\u3001\u679a\u4e3e\u3001\u6a21\u5757\u548c\u5e38\u91cf\uff09\u90fd\u662f\u79c1\u6709\u7684\u3002\u7236\u6a21\u5757\u4e2d\u7684\u9879\u4e0d\u80fd\u4f7f\u7528\u5b50\u6a21\u5757\u4e2d\u7684\u79c1\u6709\u9879\uff0c\u4f46\u662f\u5b50\u6a21\u5757\u4e2d\u7684\u9879\u53ef\u4ee5\u4f7f\u7528\u4ed6\u4eec\u7236\u6a21\u5757\u4e2d\u7684\u9879\u3002 \u8fd9\u662f\u56e0\u4e3a\u5b50\u6a21\u5757\u5c01\u88c5\u5e76\u9690\u85cf\u4e86\u4ed6\u4eec\u7684\u5b9e\u73b0\u8be6\u60c5\uff0c\u4f46\u662f\u5b50\u6a21\u5757\u53ef\u4ee5\u770b\u5230\u4ed6\u4eec\u5b9a\u4e49\u7684\u4e0a\u4e0b\u6587\u3002 \u7ee7\u7eed\u62ff\u9910\u9986\u4f5c\u6bd4\u55bb\uff0c\u628a\u79c1\u6709\u6027\u89c4\u5219\u60f3\u8c61\u6210\u9910\u9986\u7684\u540e\u53f0\u529e\u516c\u5ba4\uff1a\u9910\u9986\u5185\u7684\u4e8b\u52a1\u5bf9\u9910\u5385\u987e\u5ba2\u6765\u8bf4\u662f\u4e0d\u53ef\u77e5\u7684\uff0c\u4f46\u529e\u516c\u5ba4\u7ecf\u7406\u53ef\u4ee5\u6d1e\u6089\u5176\u7ecf\u8425\u7684\u9910\u5385\u5e76\u5728\u5176\u4e2d\u505a\u4efb\u4f55\u4e8b\u60c5\u3002 Rust \u9009\u62e9\u4ee5\u8fd9\u79cd\u65b9\u5f0f\u6765\u5b9e\u73b0\u6a21\u5757\u7cfb\u7edf\u529f\u80fd\uff0c\u56e0\u6b64\u9ed8\u8ba4\u9690\u85cf\u5185\u90e8\u5b9e\u73b0\u7ec6\u8282\u3002\u8fd9\u6837\u4e00\u6765\uff0c\u5c31\u77e5\u9053\u53ef\u4ee5\u66f4\u6539\u5185\u90e8\u4ee3\u7801\u7684\u54ea\u4e9b\u90e8\u5206\u800c\u4e0d\u4f1a\u7834\u574f\u5916\u90e8\u4ee3\u7801\u3002\u8fd8\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528 pub \u5173\u952e\u5b57\u6765\u521b\u5efa\u516c\u5171\u9879\uff0c\u4f7f\u5b50\u6a21\u5757\u7684\u5185\u90e8\u90e8\u5206\u66b4\u9732\u7ed9\u4e0a\u7ea7\u6a21\u5757\u3002 pub\u5173\u952e\u5b57 \u5728\u4e0a\u9762\u793a\u4f8b\u7684\u62a5\u9519\u4fe1\u606f\u4e2d\uff0c\u5b83\u544a\u8bc9\u6211\u4eec hosting \u6a21\u5757\u662f\u79c1\u6709\u7684\u3002\u60f3\u8ba9\u7236\u6a21\u5757\u4e2d\u7684 eat_at_restaurant \u51fd\u6570\u53ef\u4ee5\u8bbf\u95ee\u5b50\u6a21\u5757\u4e2d\u7684 add_to_waitlist \u51fd\u6570\uff0c\u56e0\u6b64\u6211\u4eec\u4f7f\u7528 pub \u5173\u952e\u5b57\u6765\u6807\u8bb0 hosting \u6a21\u5757\uff0c \u6587\u4ef6\u540d: src/lib.rs mod front_of_house { // \u6dfb\u52a0pub\u5173\u952e\u5b57\u4f7f\u6a21\u5757\u516c\u5f00 pub mod hosting { // \u6dfb\u52a0pub\u5173\u952e\u5b57\u4f7f\u51fd\u6570\u516c\u5f00 pub fn add_to_waitlist () {} } } pub fn eat_at_restaurant () { // \u7edd\u5bf9\u8def\u5f84 crate :: front_of_house :: hosting :: add_to_waitlist (); // \u76f8\u5bf9\u8def\u5f84 front_of_house :: hosting :: add_to_waitlist (); } // \u73b0\u5728\u4ee3\u7801\u53ef\u4ee5\u7f16\u8bd1\u901a\u8fc7\u4e86\uff01 \u79c1\u6709\u6027\u89c4\u5219\u4e0d\u4f46\u5e94\u7528\u4e8e\u6a21\u5757\uff0c\u8fd8\u5e94\u7528\u4e8e\u7ed3\u6784\u4f53\u3001\u679a\u4e3e\u3001\u51fd\u6570\u548c\u65b9\u6cd5\u3002 super\u76f8\u5bf9\u8def\u5f84 \u8fd8\u53ef\u4ee5\u4f7f\u7528 super \u5f00\u5934\u6765\u6784\u5efa\u4ece\u7236\u6a21\u5757\u5f00\u59cb\u7684\u76f8\u5bf9\u8def\u5f84\u3002 \u4f3c\u4e8e\u6587\u4ef6\u7cfb\u7edf\u4e2d\u4ee5 .. \u5f00\u5934\u7684\u8bed\u6cd5\u3002 \u6587\u4ef6\u540d: src/lib.rs // \u4f7f\u7528\u4ee5 super \u5f00\u5934\u7684\u76f8\u5bf9\u8def\u5f84\u4ece\u7236\u76ee\u5f55\u5f00\u59cb\u8c03\u7528\u51fd\u6570 fn serve_order () {} mod back_of_house { fn fix_incorrect_order () { cook_order (); // super\u8868\u793a\u7236\u7ea7\u7684\u6a21\u5757 super :: serve_order (); } fn cook_order () {} } \u516c\u6709\u7684\u7ed3\u6784\u4f53\u548c\u679a\u4e3e \u8fd8\u53ef\u4ee5\u4f7f\u7528 pub \u6765\u8bbe\u8ba1\u516c\u6709\u7684 \u7ed3\u6784\u4f53 \u548c \u679a\u4e3e \uff0c\u4e0d\u8fc7\u6709\u4e00\u4e9b\u989d\u5916\u7684\u7ec6\u8282\u9700\u8981\u6ce8\u610f\u3002 \u5982\u679c\u6211\u4eec\u5728\u4e00\u4e2a\u7ed3\u6784\u4f53\u5b9a\u4e49\u7684\u524d\u9762\u4f7f\u7528\u4e86 pub \uff0c\u8fd9\u4e2a\u7ed3\u6784\u4f53\u4f1a\u53d8\u6210\u516c\u6709\u7684\uff0c\u4f46\u662f\u8fd9\u4e2a\u7ed3\u6784\u4f53\u7684\u5b57\u6bb5\u4ecd\u7136\u662f\u79c1\u6709\u7684\u3002\u53ef\u4ee5\u6839\u636e\u60c5\u51b5\u51b3\u5b9a\u6bcf\u4e2a\u5b57\u6bb5\u662f\u5426\u516c\u6709\u3002 \u5728\u793a\u4f8b\u4e2d\uff0c\u5b9a\u4e49\u4e86\u4e00\u4e2a\u516c\u6709\u7ed3\u6784\u4f53 back_of_house:Breakfast \uff0c\u5176\u4e2d\u6709\u4e00\u4e2a\u516c\u6709\u5b57\u6bb5 toast \u548c\u79c1\u6709\u5b57\u6bb5 seasonal_fruit \u3002 \u8fd9\u4e2a\u4f8b\u5b50\u6a21\u62df\u7684\u60c5\u51b5\u662f\uff0c\u5728\u4e00\u5bb6\u9910\u9986\u4e2d\uff0c\u987e\u5ba2\u53ef\u4ee5\u9009\u62e9\u968f\u9910\u9644\u8d60\u7684\u9762\u5305\u7c7b\u578b\uff0c\u4f46\u662f\u53a8\u5e08\u4f1a\u6839\u636e\u5b63\u8282\u548c\u5e93\u5b58\u60c5\u51b5\u6765\u51b3\u5b9a\u968f\u9910\u642d\u914d\u7684\u6c34\u679c\u3002\u9910\u9986\u53ef\u7528\u7684\u6c34\u679c\u53d8\u5316\u662f\u5f88\u5feb\u7684\uff0c\u6240\u4ee5\u987e\u5ba2\u4e0d\u80fd\u9009\u62e9\u6c34\u679c\uff0c\u751a\u81f3\u65e0\u6cd5\u770b\u5230\u4ed6\u4eec\u5c06\u4f1a\u5f97\u5230\u4ec0\u4e48\u6c34\u679c\u3002 mod back_of_house { pub struct Breakfast { pub toast : String , seasonal_fruit : String , } impl Breakfast { pub fn summer ( toast : & str ) -> Breakfast { Breakfast { toast : String :: from ( toast ), seasonal_fruit : String :: from ( \"peaches\" ), } } } } pub fn eat_at_restaurant () { // \u5728\u590f\u5929\u8ba2\u8d2d\u4e00\u4e2a\u9ed1\u9ea6\u571f\u53f8\u4f5c\u4e3a\u65e9\u9910 let mut meal = back_of_house :: Breakfast :: summer ( \"Rye\" ); // toast \u5b57\u6bb5\u662f\u516c\u6709\u7684, \u6240\u4ee5\u53ef\u4ee5\u4f7f\u7528\u70b9\u53f7\u6765\u968f\u610f\u7684\u8bfb\u5199 toast \u5b57\u6bb5\u3002 // \u6539\u53d8\u4e3b\u610f\u66f4\u6362\u60f3\u8981\u9762\u5305\u7684\u7c7b\u578b meal . toast = String :: from ( \"Wheat\" ); println! ( \"I'd like {} toast please\" , meal . toast ); // \u5982\u679c\u53d6\u6d88\u4e0b\u4e00\u884c\u7684\u6ce8\u91ca\u4ee3\u7801\u4e0d\u80fd\u7f16\u8bd1\uff1b // \u4e0d\u5141\u8bb8\u67e5\u770b\u6216\u4fee\u6539\u65e9\u9910\u9644\u5e26\u7684\u5b63\u8282\u6c34\u679c // \u56e0\u4e3a seasonal_fruit \u662f\u79c1\u6709\u7684, \u6240\u4ee5\u4e0d\u80fd\u7528\u70b9\u53f7\u6765\u968f\u610f\u7684\u8bfb\u5199 seasonal_fruit \u5b57\u6bb5\u3002 // meal.seasonal_fruit = String::from(\"blueberries\"); } \u6ce8\u610f \u56e0\u4e3a back_of_house::Breakfast \u5177\u6709\u79c1\u6709\u5b57\u6bb5\uff0c\u6240\u4ee5\u8fd9\u4e2a\u7ed3\u6784\u4f53 \u9700\u8981\u63d0\u4f9b\u4e00\u4e2a\u516c\u5171\u7684\u5173\u8054\u51fd\u6570\u6765\u6784\u9020 Breakfast \u7684\u5b9e\u4f8b (\u8fd9\u91cc\u547d\u540d\u4e3a summer )\u3002 \u5982\u679c Breakfast \u6ca1\u6709\u8fd9\u6837\u7684\u51fd\u6570\uff0c\u5c06\u65e0\u6cd5\u5728 eat_at_restaurant \u4e2d\u521b\u5efa Breakfast \u5b9e\u4f8b\uff0c \u56e0\u4e3a\u6211\u4eec\u4e0d\u80fd\u5728 eat_at_restaurant \u4e2d\u8bbe\u7f6e\u79c1\u6709\u5b57\u6bb5 seasonal_fruit \u7684\u503c\u3002 \u4e0e\u4e4b\u76f8\u53cd\uff0c\u5982\u679c\u5c06 \u679a\u4e3e \u8bbe\u4e3a\u516c\u6709\uff0c\u5219\u5b83\u7684\u6240\u6709\u6210\u5458\u90fd\u5c06\u53d8\u4e3a\u516c\u6709\u3002\u53ea\u9700\u8981\u5728 enum \u5173\u952e\u5b57\u524d\u9762\u52a0\u4e0a pub // \u8bbe\u8ba1\u516c\u6709\u679a\u4e3e\uff0c\u4f7f\u5176\u6240\u6709\u6210\u5458\u516c\u6709 mod back_of_house { pub enum Appetizer { Soup , Salad , } } pub fn eat_at_restaurant () { let order1 = back_of_house :: Appetizer :: Soup ; let order2 = back_of_house :: Appetizer :: Salad ; } \u5982\u679c\u679a\u4e3e\u6210\u5458\u4e0d\u662f\u516c\u6709\u7684\uff0c\u90a3\u4e48\u679a\u4e3e\u4f1a\u663e\u5f97\u7528\u5904\u4e0d\u5927\uff1b \u7ed9\u679a\u4e3e\u7684\u6240\u6709\u6210\u5458\u6328\u4e2a\u6dfb\u52a0 pub \u662f\u5f88\u4ee4\u4eba\u607c\u706b\u7684\uff0c\u56e0\u6b64\u679a\u4e3e\u6210\u5458\u9ed8\u8ba4\u5c31\u662f\u516c\u6709\u7684\u3002 \u7ed3\u6784\u4f53\u901a\u5e38\u4f7f\u7528\u65f6\uff0c\u4e0d\u5fc5\u5c06\u5b83\u4eec\u7684\u5b57\u6bb5\u516c\u6709\u5316\uff0c\u56e0\u6b64\u7ed3\u6784\u4f53\u9075\u5faa\u5e38\u89c4\uff0c\u5185\u5bb9\u5168\u90e8\u662f\u79c1\u6709\u7684\uff0c\u9664\u975e\u4f7f\u7528 pub \u5173\u952e\u5b57\u3002 use\u5173\u952e\u5b57 \u53ef\u4ee5\u4f7f\u7528 use \u5173\u952e\u5b57\u5c06\u8def\u5f84\u4e00\u6b21\u6027\u5f15\u5165\u4f5c\u7528\u57df\uff0c\u7136\u540e\u8c03\u7528\u8be5\u8def\u5f84\u4e2d\u7684\u9879\uff0c\u5c31\u5982\u540c\u5b83\u4eec\u662f\u672c\u5730\u9879\u4e00\u6837\u3002 mod front_of_house { pub mod hosting { pub fn add_to_waitlist () {} } } // \u4f7f\u7528 use \u5c06\u6a21\u5757\u5f15\u5165\u4f5c\u7528\u57df use crate :: front_of_house :: hosting ; pub fn eat_at_restaurant () { hosting :: add_to_waitlist (); hosting :: add_to_waitlist (); hosting :: add_to_waitlist (); } \u4f5c\u7528\u57df\u4e2d\u589e\u52a0 use \u548c\u8def\u5f84\u7c7b\u4f3c\u4e8e\u5728\u6587\u4ef6\u7cfb\u7edf\u4e2d\u521b\u5efa\u8f6f\u8fde\u63a5\uff08\u7b26\u53f7\u8fde\u63a5\uff0csymbolic link\uff09 \u901a\u8fc7\u5728 crate \u6839\u589e\u52a0 use crate::front_of_house::hosting \uff0c\u73b0\u5728 hosting \u5728\u4f5c\u7528\u57df\u4e2d\u5c31\u662f\u6709\u6548\u7684\u540d\u79f0\u4e86\uff0c \u5982\u540c hosting \u6a21\u5757 \u88ab\u5b9a\u4e49 \u4e8e crate \u6839\u4e00\u6837\u3002\u901a\u8fc7 use \u5f15\u5165\u4f5c\u7528\u57df\u7684\u8def\u5f84 \u4e5f\u4f1a\u68c0\u67e5\u79c1\u6709\u6027 \uff0c\u540c\u5176\u5b83\u8def\u5f84\u4e00\u6837\u3002 // \u5f15\u5165\u4f5c\u7528\u57df\u7684\u4e60\u60ef\u7528\u6cd5 mod front_of_house { pub mod hosting { pub fn add_to_waitlist () {} } } // \u4f7f\u7528 use \u548c\u76f8\u5bf9\u8def\u5f84\u6765\u5c06\u4e00\u4e2a\u9879\u5f15\u5165\u4f5c\u7528\u57df use self :: front_of_house :: hosting ; pub fn eat_at_restaurant () { hosting :: add_to_waitlist (); hosting :: add_to_waitlist (); hosting :: add_to_waitlist (); } mod front_of_house { pub mod hosting { pub fn add_to_waitlist () {} } } use crate :: front_of_house :: hosting :: add_to_waitlist ; pub fn eat_at_restaurant () { add_to_waitlist (); add_to_waitlist (); add_to_waitlist (); } \u60ef\u7528\u7684 use \u8def\u5f84 use \u5c06\u51fd\u6570\u5f15\u5165\u4f5c\u7528\u57df\u7684\u4e60\u60ef\u7528\u6cd5\u3002\u5c31\u662f\u4f7f\u7528 use \u5c06\u51fd\u6570\u7684\u7236\u6a21\u5757\u5f15\u5165\u4f5c\u7528\u57df\uff0c\u5fc5\u987b\u5728\u8c03\u7528\u51fd\u6570\u65f6\u6307\u5b9a\u7236\u6a21\u5757\uff0c\u8fd9\u6837\u53ef\u4ee5\u6e05\u6670\u5730\u8868\u660e\u51fd\u6570\u4e0d\u662f\u5728\u672c\u5730\u5b9a\u4e49\u7684\uff0c\u540c\u65f6\u4f7f\u5b8c\u6574\u8def\u5f84\u7684\u91cd\u590d\u5ea6\u6700\u5c0f\u5316\u3002 \u5982\u4e0b\u793a\u4f8b\u4e2d\u7684\u4ee3\u7801\u4e0d\u6e05\u695a add_to_waitlist \u662f\u5728\u54ea\u91cc\u88ab\u5b9a\u4e49\u7684\u3002 mod front_of_house { pub mod hosting { pub fn add_to_waitlist () {} } } use crate :: front_of_house :: hosting :: add_to_waitlist ; pub fn eat_at_restaurant () { // \u6b64\u65f6\u5bb9\u6613\u4e0d\u77e5 add_to_waitlist \u662f\u5728\u54ea\u91cc\u88ab\u5b9a\u4e49\u7684\u3002 add_to_waitlist (); add_to_waitlist (); add_to_waitlist (); } \u4f7f\u7528 use \u5f15\u5165\u7ed3\u6784\u4f53\u3001\u679a\u4e3e\u548c\u5176\u4ed6\u9879\u65f6\uff0c\u4e60\u60ef\u662f\u6307\u5b9a\u5b83\u4eec\u7684\u5b8c\u6574\u8def\u5f84\u3002 // \u5c06 HashMap \u5f15\u5165\u4f5c\u7528\u57df\u7684\u4e60\u60ef\u7528\u6cd5 use std :: collections :: HashMap ; fn main () { let mut map = HashMap :: new (); map . insert ( 1 , 2 ); } \u8fd9\u79cd\u4e60\u60ef\u7528\u6cd5\u80cc\u540e\u6ca1\u6709\u4ec0\u4e48\u786c\u6027\u8981\u6c42\uff1a\u5b83\u53ea\u662f\u4e00\u79cd\u60ef\u4f8b\uff0c\u4eba\u4eec\u5df2\u7ecf\u4e60\u60ef\u4e86\u4ee5\u8fd9\u79cd\u65b9\u5f0f\u9605\u8bfb\u548c\u7f16\u5199 Rust \u4ee3\u7801\u3002 \u8fd9\u4e2a\u4e60\u60ef\u7528\u6cd5\u6709\u4e00\u4e2a\u4f8b\u5916\uff0c\u90a3\u5c31\u662f\u6211\u4eec\u60f3\u4f7f\u7528 use \u8bed\u53e5\u5c06\u4e24\u4e2a\u5177\u6709\u76f8\u540c\u540d\u79f0\u7684\u9879\u5e26\u5165\u4f5c\u7528\u57df\uff0c\u56e0\u4e3a Rust \u4e0d\u5141\u8bb8\u8fd9\u6837\u505a\u3002 // \u5c55\u793a\u4e86\u5982\u4f55\u5c06\u4e24\u4e2a\u5177\u6709\u76f8\u540c\u540d\u79f0\u4f46\u4e0d\u540c\u7236\u6a21\u5757\u7684 Result \u7c7b\u578b\u5f15\u5165\u4f5c\u7528\u57df\uff0c\u4ee5\u53ca\u5982\u4f55\u5f15\u7528\u5b83\u4eec\u3002 use std :: fmt ; use std :: io ; fn function1 () -> fmt :: Result { // --snip-- } fn function2 () -> io :: Result < () > { // --snip-- } // \u4f7f\u7528\u7236\u6a21\u5757\u53ef\u4ee5\u533a\u5206\u8fd9\u4e24\u4e2a Result \u7c7b\u578b\u3002 as \u5173\u952e\u5b57 \u4f7f\u7528 use \u5c06\u4e24\u4e2a\u540c\u540d\u7c7b\u578b\u5f15\u5165\u540c\u4e00\u4f5c\u7528\u57df\u8fd9\u4e2a\u95ee\u9898\u8fd8\u6709\u53e6\u4e00\u4e2a\u89e3\u51b3\u529e\u6cd5\uff1a \u5728\u8fd9\u4e2a\u7c7b\u578b\u7684\u8def\u5f84\u540e\u9762\uff0c\u4f7f\u7528 as \u6307\u5b9a\u4e00\u4e2a\u65b0\u7684\u672c\u5730\u540d\u79f0\u6216\u8005\u522b\u540d\u3002 // \u901a\u8fc7 as \u91cd\u547d\u540d\u5176\u4e2d\u4e00\u4e2a Result \u7c7b\u578b use std :: fmt :: Result ; use std :: io :: Result as IoResult ; fn function1 () -> Result { // --snip-- } fn function2 () -> IoResult < () > { // --snip-- } pub use\u91cd\u5bfc\u51fa \u4f7f\u7528 use \u5173\u952e\u5b57\uff0c \u5c06\u67d0\u4e2a\u540d\u79f0\u5bfc\u5165\u5f53\u524d\u4f5c\u7528\u57df\u540e\uff0c\u8fd9\u4e2a\u540d\u79f0\u5728\u6b64\u4f5c\u7528\u57df\u4e2d\u5c31\u53ef\u4ee5\u4f7f\u7528\u4e86\uff0c\u4f46\u5b83\u5bf9\u6b64\u4f5c\u7528\u57df\u4e4b\u5916\u8fd8\u662f\u79c1\u6709\u7684 \u3002 \u5982\u679c\u60f3\u8ba9\u5176\u4ed6\u4eba\u8c03\u7528\u6211\u4eec\u7684\u4ee3\u7801\u65f6\uff0c\u4e5f\u80fd\u591f\u6b63\u5e38\u4f7f\u7528\u8fd9\u4e2a\u540d\u79f0\uff0c\u5c31\u597d\u50cf\u5b83\u672c\u6765\u5c31\u5728\u5f53\u524d\u4f5c\u7528\u57df\u4e00\u6837\uff0c\u90a3\u6211\u4eec\u53ef\u4ee5\u5c06 pub \u548c use \u5408\u8d77\u6765\u4f7f\u7528\u3002 \u8fd9\u79cd\u6280\u672f\u88ab\u79f0\u4e3a \u201c \u91cd\u5bfc\u51fa \uff08re-exporting\uff09\u201d\uff1a\u6211\u4eec\u4e0d\u4ec5\u5c06\u4e00\u4e2a\u540d\u79f0\u5bfc\u5165\u4e86\u5f53\u524d\u4f5c\u7528\u57df\uff0c\u8fd8\u5141\u8bb8\u522b\u4eba\u628a\u5b83\u5bfc\u5165\u4ed6\u4eec\u81ea\u5df1\u7684\u4f5c\u7528\u57df\u3002 mod front_of_house { pub mod hosting { pub fn add_to_waitlist () {} } } pub use crate :: front_of_house :: hosting ; pub fn eat_at_restaurant () { hosting :: add_to_waitlist (); hosting :: add_to_waitlist (); hosting :: add_to_waitlist (); } \u901a\u8fc7 pub use \u91cd\u5bfc\u51fa\uff0c\u5916\u90e8\u4ee3\u7801\u73b0\u5728\u53ef\u4ee5\u901a\u8fc7\u65b0\u8def\u5f84 restaurant::hosting::add_to_waitlist \u6765\u8c03\u7528 add_to_waitlist \u51fd\u6570\u3002 \u5982\u679c\u6ca1\u6709\u6307\u5b9a pub use \uff0c\u5916\u90e8\u4ee3\u7801\u9700\u5728\u5176\u4f5c\u7528\u57df\u4e2d\u8c03\u7528 restaurant::front_of_house::hosting::add_to_waitlist \u3002 \u5f53\u4f60\u4ee3\u7801\u7684\u5185\u90e8\u7ed3\u6784\u4e0e\u8c03\u7528\u4f60\u4ee3\u7801\u7684\u7a0b\u5e8f\u5458\u6240\u60f3\u8c61\u7684\u7ed3\u6784\u4e0d\u540c\u65f6\uff0c\u91cd\u5bfc\u51fa\u4f1a\u5f88\u6709\u7528\u3002 \u4f8b\u5982\uff0c\u5728\u8fd9\u4e2a\u9910\u9986\u7684\u6bd4\u55bb\u4e2d\uff0c\u7ecf\u8425\u9910\u9986\u7684\u4eba\u4f1a\u60f3\u5230\u201c\u524d\u53f0\u201d\u548c\u201c\u540e\u53f0\u201d\u3002\u4f46\u987e\u5ba2\u5728\u5149\u987e\u4e00\u5bb6\u9910\u9986\u65f6\uff0c\u53ef\u80fd\u4e0d\u4f1a\u4ee5\u8fd9\u4e9b\u672f\u8bed\u6765\u8003\u8651\u9910\u9986\u7684\u5404\u4e2a\u90e8\u5206\u3002 \u4f7f\u7528 pub use \uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4e00\u79cd\u7ed3\u6784\u7f16\u5199\u4ee3\u7801\uff0c\u5374\u5c06\u4e0d\u540c\u7684\u7ed3\u6784\u5f62\u5f0f\u66b4\u9732\u51fa\u6765\u3002\u8fd9\u6837\u505a\u4f7f\u6211\u4eec\u7684\u5e93 \u4e95\u4e95\u6709\u6761 \uff0c \u4e5f\u4f7f\u5f00\u53d1\u8fd9\u4e2a\u5e93\u7684\u7a0b\u5e8f\u5458\u548c\u8c03\u7528\u8fd9\u4e2a\u5e93\u7684\u7a0b\u5e8f\u5458\u90fd\u66f4\u52a0\u65b9\u4fbf\u3002 \u4f7f\u7528\u5916\u90e8\u5305 \u5728\u7f16\u5199\u731c\u731c\u770b\u6e38\u620f\u65f6\u3002\u9879\u76ee\u4f7f\u7528\u4e86\u4e00\u4e2a\u5916\u90e8\u5305\uff0c rand \uff0c\u6765\u751f\u6210\u968f\u673a\u6570\u3002\u4e3a\u4e86\u5728\u9879\u76ee\u4e2d\u4f7f\u7528 rand \uff0c\u5728 Cargo.toml \u4e2d\u52a0\u5165\u4e86\u5982\u4e0b\u884c\uff1a rand = \"0.8.3\" // \u544a\u8bc9\u4e86 Cargo \u8981\u4ece crates.io \u4e0b\u8f7d rand \u548c\u5176\u4f9d\u8d56\uff0c\u5e76\u4f7f\u5176\u53ef\u5728\u9879\u76ee\u4ee3\u7801\u4e2d\u4f7f\u7528\u3002 \u63a5\u7740\uff0c\u4e3a\u4e86\u5c06 rand \u5b9a\u4e49\u5f15\u5165\u9879\u76ee\u5305\u7684\u4f5c\u7528\u57df\uff0c\u52a0\u5165\u4e00\u884c use \u8d77\u59cb\u7684\u5305\u540d\uff0c\u5b83\u4ee5 rand \u5305\u540d\u5f00\u5934\u5e76\u5217\u51fa\u4e86\u9700\u8981\u5f15\u5165\u4f5c\u7528\u57df\u7684\u9879\u3002\u66fe\u5c06 Rng trait \u5f15\u5165\u4f5c\u7528\u57df\u5e76\u8c03\u7528\u4e86 rand::thread_rng \u51fd\u6570\uff1a use rand :: Rng ; fn main () { let secret_number = rand :: thread_rng (). gen_range ( 1 ..= 100 ); } crates.io \u4e0a\u6709\u5f88\u591a Rust \u793e\u533a\u6210\u5458\u53d1\u5e03\u7684\u5305\uff0c\u5c06\u5176\u5f15\u5165\u81ea\u5df1\u7684\u9879\u76ee\u90fd\u9700\u8981\u4e00\u9053\u76f8\u540c\u7684\u6b65\u9aa4\uff1a \u5728 Cargo.toml \u5217\u51fa\u5b83\u4eec\u5e76\u901a\u8fc7 use \u5c06\u5176\u4e2d\u5b9a\u4e49\u7684\u9879\u5f15\u5165\u9879\u76ee\u5305\u7684\u4f5c\u7528\u57df\u4e2d\u3002 \u6ce8\u610f \u6807\u51c6\u5e93\uff08std\uff09 \u5bf9\u4e8e\u4f60\u7684\u5305\u6765\u8bf4\u4e5f\u662f\u5916\u90e8 crate \u3002\u56e0\u4e3a\u6807\u51c6\u5e93\u968f Rust \u8bed\u8a00\u4e00\u540c\u5206\u53d1\uff0c\u65e0\u9700\u4fee\u6539 Cargo.toml \u6765\u5f15\u5165 std \uff0c\u4e0d\u8fc7\u9700\u8981\u901a\u8fc7 use \u5c06\u6807\u51c6\u5e93\u4e2d\u5b9a\u4e49\u7684\u9879\u5f15\u5165\u9879\u76ee\u5305\u7684\u4f5c\u7528\u57df\u4e2d\u6765\u5f15\u7528\u5b83\u4eec\uff0c\u6bd4\u5982\u4f7f\u7528\u7684 HashMap \uff1a use std :: collections :: HashMap ; // \u4ee5\u6807\u51c6\u5e93 crate \u540d std \u5f00\u5934\u7684\u7edd\u5bf9\u8def\u5f84\u3002 \u5d4c\u5957\u8def\u5f84 \u5f53\u9700\u8981\u5f15\u5165\u5f88\u591a\u5b9a\u4e49\u4e8e\u76f8\u540c\u5305\u6216\u76f8\u540c\u6a21\u5757\u7684\u9879\u65f6\uff0c\u4e3a\u6bcf\u4e00\u9879\u5355\u72ec\u5217\u51fa\u4e00\u884c\u4f1a\u5360\u7528\u6e90\u7801\u5f88\u5927\u7684\u7a7a\u95f4\u3002 // --snip-- use std :: cmp :: Ordering ; use std :: io ; // --snip-- \u53ef\u4ee5\u4f7f\u7528\u5d4c\u5957\u8def\u5f84\u5c06\u76f8\u540c\u7684\u9879\u5728\u4e00\u884c\u4e2d\u5f15\u5165\u4f5c\u7528\u57df\u3002 // --snip-- use std :: { cmp :: Ordering , io }; // --snip-- \u5728\u8f83\u5927\u7684\u7a0b\u5e8f\u4e2d\uff0c\u4f7f\u7528\u5d4c\u5957\u8def\u5f84\u4ece\u76f8\u540c\u5305\u6216\u6a21\u5757\u4e2d\u5f15\u5165\u5f88\u591a\u9879\uff0c\u53ef\u4ee5\u663e\u8457\u51cf\u5c11\u6240\u9700\u7684\u72ec\u7acb use \u8bed\u53e5\u7684\u6570\u91cf\uff01 \u53ef\u4ee5\u5728\u8def\u5f84\u7684\u4efb\u4f55\u5c42\u7ea7\u4f7f\u7528\u5d4c\u5957\u8def\u5f84\uff0c\u8fd9\u5728\u7ec4\u5408\u4e24\u4e2a\u5171\u4eab\u5b50\u8def\u5f84\u7684 use \u8bed\u53e5\u65f6\u975e\u5e38\u6709\u7528\u3002 use std :: io ; use std :: io :: Write ; \u4e3a: // \u540c\u65f6\u5f15\u5165\u4f5c\u7528\u57df\u3002 use std :: io :: { self , Write }; glob\u8fd0\u7b97\u7b26 \u5982\u679c\u5e0c\u671b\u5c06\u4e00\u4e2a\u8def\u5f84\u4e0b \u6240\u6709 \u516c\u6709\u9879\u5f15\u5165\u4f5c\u7528\u57df\uff0c\u53ef\u4ee5\u6307\u5b9a\u8def\u5f84\u540e\u8ddf * \uff0cglob \u8fd0\u7b97\u7b26\uff1a use std :: collections :: * ; // \u4f7f\u7528 glob \u8fd0\u7b97\u7b26\u65f6\u8bf7\u591a\u52a0\u5c0f\u5fc3\uff01 // Glob \u4f1a\u4f7f\u5f97\u6211\u4eec\u96be\u4ee5\u63a8\u5bfc\u4f5c\u7528\u57df\u4e2d\u6709\u4ec0\u4e48\u540d\u79f0\u548c\u5b83\u4eec\u662f\u5728\u4f55\u5904\u5b9a\u4e49\u7684\u3002 glob \u8fd0\u7b97\u7b26\u7ecf\u5e38\u7528\u4e8e\u6d4b\u8bd5\u6a21\u5757 tests \u4e2d\uff0c\u8fd9\u65f6\u4f1a\u5c06\u6240\u6709\u5185\u5bb9\u5f15\u5165\u4f5c\u7528\u57df\uff1b glob \u8fd0\u7b97\u7b26\u6709\u65f6\u4e5f\u7528\u4e8e prelude \u6a21\u5f0f\uff1b\u67e5\u770b \u6807\u51c6\u5e93\u4e2d\u7684\u6587\u6863 \u4e86\u89e3\u8fd9\u4e2a\u6a21\u5f0f\u7684\u66f4\u591a\u7ec6\u8282\u3002 \u6a21\u5757\u62c6\u5206 \u5f53\u6a21\u5757\u53d8\u5f97\u66f4\u5927\u65f6\uff0c\u53ef\u80fd\u60f3\u8981\u5c06\u5b83\u4eec\u7684\u5b9a\u4e49\u79fb\u52a8\u5230\u5355\u72ec\u7684\u6587\u4ef6\u4e2d\uff0c\u4ece\u800c\u4f7f\u4ee3\u7801\u66f4\u5bb9\u6613\u9605\u8bfb\u3002 \u4f8b\u5982\uff0c\u5c06 front_of_house \u6a21\u5757\u79fb\u52a8\u5230\u5c5e\u4e8e\u5b83\u81ea\u5df1\u7684\u6587\u4ef6 src/front_of_house.rs \u4e2d\uff0c\u901a\u8fc7\u6539\u53d8 crate \u6839\u6587\u4ef6\uff0c\u4f7f\u5176\u5305\u542b\u793a\u4f8b\u7684\u4ee3\u7801\u3002 \u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0ccrate \u6839\u6587\u4ef6\u662f src/lib.rs \uff0c\u8fd9\u4e5f\u540c\u6837\u9002\u7528\u4e8e\u4ee5 src/main.rs \u4e3a crate \u6839\u6587\u4ef6\u7684\u4e8c\u8fdb\u5236 crate \u9879\u3002 // \u6587\u4ef6\u540d: src/lib.rs // \u58f0\u660e front_of_house \u6a21\u5757\uff0c\u5176\u5185\u5bb9\u5c06\u4f4d\u4e8e src/front_of_house.rs mod front_of_house ; pub use crate :: front_of_house :: hosting ; pub fn eat_at_restaurant () { hosting :: add_to_waitlist (); hosting :: add_to_waitlist (); hosting :: add_to_waitlist (); } src/front_of_house.rs \u4f1a\u83b7\u53d6 front_of_house \u6a21\u5757\u7684\u5b9a\u4e49\u5185\u5bb9 // \u6587\u4ef6\u540d: src/front_of_house.rs // \u5728 src/front_of_house.rs \u4e2d\u5b9a\u4e49 front_of_house \u6a21\u5757 pub mod hosting { pub fn add_to_waitlist () {} } \u5728 mod front_of_house \u540e\u4f7f\u7528 \u5206\u53f7 \uff0c\u800c\u4e0d\u662f \u4ee3\u7801\u5757 \uff0c\u8fd9\u5c06\u544a\u8bc9 Rust \u5728\u53e6\u4e00\u4e2a\u4e0e\u6a21\u5757\u540c\u540d\u7684\u6587\u4ef6\u4e2d\u52a0\u8f7d\u6a21\u5757\u7684\u5185\u5bb9\u3002 \u7ee7\u7eed\u91cd\u6784\u4f8b\u5b50\uff0c\u5c06 hosting \u6a21\u5757\u4e5f\u63d0\u53d6\u5230\u5176\u81ea\u5df1\u7684\u6587\u4ef6\u4e2d\uff0c\u4ec5\u5bf9 src/front_of_house.rs \u5305\u542b hosting \u6a21\u5757\u7684\u58f0\u660e\u8fdb\u884c\u4fee\u6539\uff1a // \u6587\u4ef6\u540d: src/front_of_house.rs pub mod hosting ; \u63a5\u7740\u6211\u4eec\u521b\u5efa\u4e00\u4e2a src/front_of_house \u76ee\u5f55\u548c\u4e00\u4e2a\u5305\u542b hosting \u6a21\u5757\u5b9a\u4e49\u7684 src/front_of_house/hosting.rs \u6587\u4ef6\uff1a // \u6587\u4ef6\u540d: src/front_of_house/hosting.rs pub fn add_to_waitlist () {} \u6a21\u5757\u6811\u4f9d\u7136\u4fdd\u6301\u76f8\u540c\uff0c eat_at_restaurant \u4e2d\u7684\u51fd\u6570\u8c03\u7528\u4e5f\u65e0\u9700\u4fee\u6539\u7ee7\u7eed\u4fdd\u6301\u6709\u6548\uff0c\u5373\u4fbf\u5176\u5b9a\u4e49\u5b58\u5728\u4e8e\u4e0d\u540c\u7684\u6587\u4ef6\u4e2d\u3002 \u8fd9\u4e2a\u6280\u5de7\u53ef\u4ee5\u5728\u6a21\u5757\u4ee3\u7801\u589e\u957f\u65f6\uff0c\u5c06\u5b83\u4eec\u79fb\u52a8\u5230\u65b0\u6587\u4ef6\u4e2d\u3002 \u6ce8\u610f\uff0c src/lib.rs \u4e2d\u7684 pub use crate::front_of_house::hosting \u8bed\u53e5\u662f\u6ca1\u6709\u6539\u53d8\u7684\uff0c\u5728\u6587\u4ef6\u4f5c\u4e3a crate \u7684\u4e00\u90e8\u5206\u800c\u7f16\u8bd1\u65f6\uff0c use \u4e0d\u4f1a\u6709\u4efb\u4f55\u5f71\u54cd\u3002 mod \u5173\u952e\u5b57\u58f0\u660e\u4e86\u6a21\u5757\uff0cRust \u4f1a\u5728\u4e0e\u6a21\u5757\u540c\u540d\u7684\u6587\u4ef6\u4e2d\u67e5\u627e\u6a21\u5757\u7684\u4ee3\u7801\u3002 \u603b\u7ed3 Rust \u63d0\u4f9b\u4e86\u5c06\u5305\u5206\u6210\u591a\u4e2a crate \uff0c\u5c06 crate \u5206\u6210\u6a21\u5757\uff0c\u4ee5\u53ca\u901a\u8fc7\u6307\u5b9a\u7edd\u5bf9\u6216\u76f8\u5bf9\u8def\u5f84\u4ece\u4e00\u4e2a\u6a21\u5757\u5f15\u7528\u53e6\u4e00\u4e2a\u6a21\u5757\u4e2d\u5b9a\u4e49\u7684\u9879\u7684\u65b9\u5f0f\u3002 \u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528 use \u8bed\u53e5\u5c06\u8def\u5f84\u5f15\u5165\u4f5c\u7528\u57df\uff0c\u8fd9\u6837\u5728\u591a\u6b21\u4f7f\u7528\u65f6\u53ef\u4ee5\u4f7f\u7528\u66f4\u77ed\u7684\u8def\u5f84\u3002 \u6a21\u5757\u5b9a\u4e49\u7684\u4ee3\u7801\u9ed8\u8ba4\u662f\u79c1\u6709\u7684\uff0c\u4e0d\u8fc7\u53ef\u4ee5\u9009\u62e9\u589e\u52a0 pub \u5173\u952e\u5b57\u4f7f\u5176\u5b9a\u4e49\u53d8\u4e3a\u516c\u6709\u3002","title":"\u5305\u3001crate\u3001\u6a21\u5757"},{"location":"packages/#crate","text":"\u5f53\u7f16\u5199\u5927\u578b\u7a0b\u5e8f\u65f6\uff0c\u7ec4\u7ec7\u4f60\u7684\u4ee3\u7801\u663e\u5f97\u5c24\u4e3a\u91cd\u8981\u3002 \u6982\u5ff5 \u201c \u4f5c\u7528\u57df\uff08scope\uff09 \u201d\uff1a\u4ee3\u7801\u6240\u5728\u7684\u5d4c\u5957\u4e0a\u4e0b\u6587\u6709\u4e00\u7ec4\u5b9a\u4e49\u4e3a \u201c in scope \u201d \u7684\u540d\u79f0\u3002 \u5f53\u9605\u8bfb\u3001\u7f16\u5199\u548c\u7f16\u8bd1\u4ee3\u7801\u65f6\uff0c\u7a0b\u5e8f\u5458\u548c\u7f16\u8bd1\u5668\u9700\u8981\u77e5\u9053\u7279\u5b9a\u4f4d\u7f6e\u7684\u7279\u5b9a\u540d\u79f0\u662f\u5426\u5f15\u7528\u4e86 \u53d8\u91cf \u3001 \u51fd\u6570 \u3001 \u7ed3\u6784\u4f53 \u3001 \u679a\u4e3e \u3001 \u6a21\u5757 \u3001 \u5e38\u91cf \u6216\u8005\u5176\u4ed6\u6709\u610f\u4e49\u7684 \u9879 \u3002 \u4f60\u53ef\u4ee5\u521b\u5efa\u4f5c\u7528\u57df\uff0c\u4ee5\u53ca\u6539\u53d8\u54ea\u4e9b\u540d\u79f0\u5728\u4f5c\u7528\u57df\u5185\u8fd8\u662f\u4f5c\u7528\u57df\u5916\u3002 \u540c\u4e00\u4e2a\u4f5c\u7528\u57df\u5185\u4e0d\u80fd\u62e5\u6709\u4e24\u4e2a\u76f8\u540c\u540d\u79f0\u7684\u9879 \u3002 Rust \u6709\u8bb8\u591a\u529f\u80fd\u53ef\u4ee5 \u7ba1\u7406\u4ee3\u7801\u7684\u7ec4\u7ec7 \uff0c\u5305\u62ec\u54ea\u4e9b\u5185\u5bb9\u53ef\u4ee5\u88ab\u516c\u5f00\uff0c\u54ea\u4e9b\u5185\u5bb9\u4f5c\u4e3a\u79c1\u6709\u90e8\u5206\uff0c\u4ee5\u53ca\u7a0b\u5e8f\u6bcf\u4e2a\u4f5c\u7528\u57df\u4e2d\u7684\u540d\u5b57\u3002\u8fd9\u4e9b\u529f\u80fd\u3002\u8fd9\u6709\u65f6\u88ab\u79f0\u4e3a \u201c \u6a21\u5757\u7cfb\u7edf \uff08the module system\uff09\u201d\uff0c\u5305\u62ec\uff1a \u5305\uff08Packages\uff09 \uff1a Cargo \u7684\u4e00\u4e2a\u529f\u80fd\uff0c\u5b83\u5141\u8bb8\u4f60\u6784\u5efa\u3001\u6d4b\u8bd5\u548c\u5206\u4eab crate\u3002 Crates \uff1a\u4e00\u4e2a\u6a21\u5757\u7684\u6811\u5f62\u7ed3\u6784\uff0c\u5b83\u5f62\u6210\u4e86\u5e93\u6216\u4e8c\u8fdb\u5236\u9879\u76ee\u3002 \u6a21\u5757\uff08Modules\uff09\u548c use \uff1a \u5141\u8bb8\u4f60\u63a7\u5236\u4f5c\u7528\u57df\u548c\u8def\u5f84\u7684\u79c1\u6709\u6027\u3002 \u8def\u5f84\uff08path\uff09 \uff1a\u4e00\u4e2a\u547d\u540d\u4f8b\u5982\u7ed3\u6784\u4f53\u3001\u51fd\u6570\u6216\u6a21\u5757\u7b49\u9879\u7684\u65b9\u5f0f","title":"\u5305\u3001crate\u3001\u6a21\u5757"},{"location":"packages/#crate_1","text":"crate \u662f Rust \u5728\u7f16\u8bd1\u65f6\u6700\u5c0f\u7684\u4ee3\u7801\u5355\u4f4d\u3002\u5982\u679c\u7528 rustc \u800c\u4e0d\u662f cargo \u6765\u7f16\u8bd1\u4e00\u4e2a\u6587\u4ef6\uff0c\u7f16\u8bd1\u5668\u8fd8\u662f\u4f1a\u5c06\u90a3\u4e2a\u6587\u4ef6\u8ba4\u4f5c\u4e00\u4e2a crate \u3002 crate \u53ef\u4ee5\u5305\u542b\u6a21\u5757\uff0c\u6a21\u5757\u53ef\u4ee5\u5b9a\u4e49\u5728\u5176\u4ed6\u6587\u4ef6\uff0c\u7136\u540e\u548c crate \u4e00\u8d77\u7f16\u8bd1\uff0c\u6211\u4eec\u4f1a\u5728\u63a5\u4e0b\u6765\u7684\u7ae0\u8282\u4e2d\u9047\u5230\u3002 crate \u6709\u4e24\u79cd\u5f62\u5f0f\uff1a \u4e8c\u8fdb\u5236\u9879 \u548c \u5e93 \u3002 \u4e8c\u8fdb\u5236\u9879 \u53ef\u4ee5\u88ab\u7f16\u8bd1\u4e3a\u53ef\u6267\u884c\u7a0b\u5e8f\uff0c\u6bd4\u5982\u4e00\u4e2a\u547d\u4ee4\u884c\u7a0b\u5e8f\u6216\u8005\u4e00\u4e2a\u670d\u52a1\u5668\u3002 \u5b83\u4eec\u5fc5\u987b\u6709\u4e00\u4e2a main \u51fd\u6570\u6765\u5b9a\u4e49\u5f53\u7a0b\u5e8f\u88ab\u6267\u884c\u7684\u65f6\u5019\u6240\u9700\u8981\u505a\u7684\u4e8b\u60c5\u3002 \u76ee\u524d\u4e3a\u6b62\u793a\u4f8b\u4e2d\u6240\u521b\u5efa\u7684 crate \u90fd\u662f\u4e8c\u8fdb\u5236\u9879\u3002 \u5e93 \u5e76\u6ca1\u6709 main \u51fd\u6570\uff0c\u5b83\u4eec\u4e5f\u4e0d\u4f1a\u7f16\u8bd1\u4e3a\u53ef\u6267\u884c\u7a0b\u5e8f\uff0c\u5b83\u4eec\u63d0\u4f9b\u4e00\u4e9b\u8bf8\u5982\u51fd\u6570\u4e4b\u7c7b\u7684\u4e1c\u897f \uff0c\u4f7f\u5176\u4ed6\u9879\u76ee\u4e5f\u80fd\u4f7f\u7528\u8fd9\u4e9b\u4e1c\u897f\u3002 \u6bd4\u5982 rand crate \u5c31\u63d0\u4f9b\u4e86\u751f\u6210\u968f\u673a\u6570\u7684\u4e1c\u897f\u3002\u5927\u591a\u6570\u65f6\u95f4 Rustaceans \u8bf4\u7684 crate \u6307\u7684\u90fd\u662f \u5e93 \uff0c\u8fd9\u4e0e\u5176\u4ed6\u7f16\u7a0b\u8bed\u8a00\u4e2d library \u6982\u5ff5\u4e00\u81f4\u3002 crate root \u662f\u4e00\u4e2a\u6e90\u6587\u4ef6\uff0cRust \u7f16\u8bd1\u5668\u4ee5\u5b83\u4e3a\u8d77\u59cb\u70b9\uff0c\u5e76\u6784\u6210\u4f60\u7684 crate \u7684\u6839\u6a21\u5757\uff08\u6211\u4eec\u5c06\u5728 \u201c \u5b9a\u4e49\u6a21\u5757\u6765\u63a7\u5236\u4f5c\u7528\u57df\u4e0e\u79c1\u6709\u6027 \u201d \u4e00\u8282\u6df1\u5165\u89e3\u8bfb\uff09\u3002 \u5305\uff08package\uff09 \u662f \u63d0\u4f9b\u4e00\u7cfb\u5217\u529f\u80fd\u7684\u4e00\u4e2a\u6216\u8005\u591a\u4e2a crate \u3002\u4e00\u4e2a\u5305\u4f1a\u5305\u542b\u4e00\u4e2a Cargo.toml \u6587\u4ef6\uff0c\u9610\u8ff0\u5982\u4f55\u53bb\u6784\u5efa\u8fd9\u4e9b crate \u3002 Cargo \u5c31\u662f\u4e00\u4e2a\u5305\u542b\u6784\u5efa\u4f60\u4ee3\u7801\u7684\u4e8c\u8fdb\u5236\u9879\u7684\u5305\u3002Cargo \u4e5f\u5305\u542b\u8fd9\u4e9b\u4e8c\u8fdb\u5236\u9879\u6240\u4f9d\u8d56\u7684 \u5e93 \u3002\u5176\u4ed6\u9879\u76ee\u4e5f\u80fd\u7528 Cargo \u5e93\u6765\u5b9e\u73b0\u4e0e Cargo \u547d\u4ee4\u884c\u7a0b\u5e8f\u4e00\u6837\u7684\u903b\u8f91\u3002 \u5305\u4e2d\u53ef\u4ee5\u5305\u542b\u81f3\u591a\u4e00\u4e2a\u5e93 crate(library crate)\u3002\u5305\u4e2d\u53ef\u4ee5\u5305\u542b\u4efb\u610f\u591a\u4e2a\u4e8c\u8fdb\u5236 crate (binary crate)\uff0c\u4f46\u662f\u5fc5\u987b\u81f3\u5c11\u5305\u542b\u4e00\u4e2a crate \uff08\u65e0\u8bba\u662f\u5e93\u7684\u8fd8\u662f\u4e8c\u8fdb\u5236\u7684\uff09\u3002 \u770b\u770b\u521b\u5efa\u5305\u7684\u65f6\u5019\u4f1a\u53d1\u751f\u4ec0\u4e48\u3002\u9996\u5148\uff0c\u8f93\u5165\u547d\u4ee4 cargo new \uff1a $ cargo new my-project Created binary ( application ) ` my-project ` package $ ls my-project Cargo.toml src # Cargo \u9075\u5faa\u7684\u4e00\u4e2a\u7ea6\u5b9a\uff1asrc/main.rs \u5c31\u662f\u4e00\u4e2a\u4e0e\u5305\u540c\u540d\u7684\u4e8c\u8fdb\u5236 crate \u7684 crate \u6839\u3002 $ ls my-project/src main.rs # \u540c\u6837\u7684\uff0cCargo \u77e5\u9053\u5982\u679c\u5305\u76ee\u5f55\u4e2d\u5305\u542b src/lib.rs\uff0c\u5219\u5305\u5e26\u6709\u4e0e\u5176\u540c\u540d\u7684\u5e93 crate\uff0c\u4e14 src/lib.rs \u662f crate \u6839\u3002 # crate \u6839\u6587\u4ef6\u5c06\u7531 Cargo \u4f20\u9012\u7ed9 rustc \u6765\u5b9e\u9645\u6784\u5efa\u5e93\u6216\u8005\u4e8c\u8fdb\u5236\u9879\u76ee\u3002 \u5728\u6b64\uff0c\u6211\u4eec\u6709\u4e86\u4e00\u4e2a\u53ea\u5305\u542b src/main.rs \u7684\u5305\uff0c \u610f\u5473\u7740\u5b83\u53ea\u542b\u6709\u4e00\u4e2a\u540d\u4e3a my-project \u7684\u4e8c\u8fdb\u5236 crate \u3002 \u5982\u679c\u4e00\u4e2a\u5305\u540c\u65f6\u542b\u6709 src/main.rs \u548c src/lib.rs \uff0c\u5219\u5b83\u6709 \u4e24\u4e2a crate \uff1a\u4e00\u4e2a\u4e8c\u8fdb\u5236\u7684\u548c\u4e00\u4e2a\u5e93\u7684\uff0c\u4e14\u540d\u5b57\u90fd\u4e0e\u5305\u76f8\u540c\u3002 \u901a\u8fc7\u5c06\u6587\u4ef6\u653e\u5728 src/bin \u76ee\u5f55\u4e0b\uff0c\u4e00\u4e2a\u5305\u53ef\u4ee5\u62e5\u6709\u591a\u4e2a\u4e8c\u8fdb\u5236 crate \uff1a \u6bcf\u4e2a src/bin \u4e0b\u7684\u6587\u4ef6\u90fd\u4f1a\u88ab\u7f16\u8bd1\u6210\u4e00\u4e2a\u72ec\u7acb\u7684\u4e8c\u8fdb\u5236 crate\u3002","title":"\u5305\u548ccrate"},{"location":"packages/#_1","text":"\u4e00\u4e2a\u7b80\u5355\u7684\u53c2\u8003\uff0c\u7528\u6765\u89e3\u91ca\u6a21\u5757\u3001\u8def\u5f84\u3001use\u5173\u952e\u8bcd\u548cpub\u5173\u952e\u8bcd\u5982\u4f55\u5728\u7f16\u8bd1\u5668\u4e2d\u5de5\u4f5c\uff0c\u4ee5\u53ca\u5927\u90e8\u5206\u5f00\u53d1\u8005\u5982\u4f55\u7ec4\u7ec7\u4ed6\u4eec\u7684\u4ee3\u7801\u3002 \u4ececrate\u6839\u8282\u70b9\u5f00\u59cb : \u5f53\u7f16\u8bd1\u4e00\u4e2acrate, \u7f16\u8bd1\u5668\u9996\u5148\u5728crate\u6839\u6587\u4ef6\uff08\u901a\u5e38\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u5e93crate\u800c\u8a00\u662f src/lib.rs \uff0c\u5bf9\u4e8e\u4e00\u4e2a\u4e8c\u8fdb\u5236crate\u800c\u8a00\u662f src/main.rs \uff09\u4e2d\u5bfb\u627e\u9700\u8981\u88ab\u7f16\u8bd1\u7684\u4ee3\u7801\u3002 \u58f0\u660e\u6a21\u5757 : \u5728crate\u6839\u6587\u4ef6\u4e2d\uff0c\u4f60\u53ef\u4ee5\u58f0\u660e\u4e00\u4e2a\u65b0\u6a21\u5757\uff1b\u6bd4\u5982\uff0c\u4f60\u7528 mod garden \u58f0\u660e\u4e86\u4e00\u4e2a\u53eb\u505agarden\u7684\u6a21\u5757\u3002\u7f16\u8bd1\u5668\u4f1a\u5728\u4e0b\u5217\u8def\u5f84\u4e2d\u5bfb\u627e\u6a21\u5757\u4ee3\u7801\uff1a \u5185\u8054\uff0c\u5728\u5927\u62ec\u53f7\u4e2d\uff0c\u5f53 mod garden \u540e\u65b9\u4e0d\u662f\u4e00\u4e2a\u5206\u53f7\u800c\u662f\u4e00\u4e2a\u5927\u62ec\u53f7 \u5728\u6587\u4ef6 src/garden.rs \u5728\u6587\u4ef6 src/garden/mod.rs \u58f0\u660e\u5b50\u6a21\u5757 : \u5728\u9664\u4e86crate\u6839\u8282\u70b9\u4ee5\u5916\u7684\u5176\u4ed6\u6587\u4ef6\u4e2d\uff0c\u4f60\u53ef\u4ee5\u5b9a\u4e49 \u5b50\u6a21\u5757 \u3002\u6bd4\u5982\uff0c\u4f60\u53ef\u80fd\u5728 src/garden.rs \u4e2d\u5b9a\u4e49\u4e86 mod vegetables ;\u3002\u7f16\u8bd1\u5668\u4f1a\u5728\u4ee5\u7236\u6a21\u5757\u547d\u540d\u7684\u76ee\u5f55\u4e2d\u5bfb\u627e\u5b50\u6a21\u5757\u4ee3\u7801\uff1a \u5185\u8054, \u5728\u5927\u62ec\u53f7\u4e2d\uff0c\u5f53 mod vegetables \u540e\u65b9\u4e0d\u662f\u4e00\u4e2a\u5206\u53f7\u800c\u662f\u4e00\u4e2a\u5927\u62ec\u53f7 \u5728\u6587\u4ef6 src/garden/vegetables.rs \u5728\u6587\u4ef6 src/garden/vegetables/mod.rs \u6a21\u5757\u4e2d\u7684\u4ee3\u7801\u8def\u5f84 : \u4e00\u65e6\u4e00\u4e2a\u6a21\u5757\u662f\u4f60crate\u7684\u4e00\u90e8\u5206\uff0c \u4f60\u53ef\u4ee5\u5728\u9690\u79c1\u89c4\u5219\u5141\u8bb8\u7684\u524d\u63d0\u4e0b\uff0c\u4ece\u540c\u4e00\u4e2acrate\u5185\u7684\u4efb\u610f\u5730\u65b9\uff0c\u901a\u8fc7\u4ee3\u7801\u8def\u5f84\u5f15\u7528\u8be5\u6a21\u5757\u7684\u4ee3\u7801\u3002\u4e3e\u4f8b\u800c\u8a00\uff0c\u4e00\u4e2a garden vegetables \u6a21\u5757\u4e0b\u7684Asparagus\u7c7b\u578b\u53ef\u4ee5\u5728 crate::garden::vegetables::Asparagus \u88ab\u627e\u5230\u3002 \u79c1\u6709 vs \u516c\u7528 : \u4e00\u4e2a\u6a21\u5757\u91cc\u7684\u4ee3\u7801\u9ed8\u8ba4\u5bf9\u5176\u7236\u6a21\u5757\u79c1\u6709\u3002\u4e3a\u4e86\u4f7f\u4e00\u4e2a\u6a21\u5757\u516c\u7528\uff0c\u5e94\u5f53\u5728\u58f0\u660e\u65f6\u4f7f\u7528 pub mod \u66ff\u4ee3 mod \u3002\u4e3a\u4e86\u4f7f\u4e00\u4e2a\u516c\u7528\u6a21\u5757\u5185\u90e8\u7684\u6210\u5458\u516c\u7528\uff0c\u5e94\u5f53\u5728\u58f0\u660e\u524d\u4f7f\u7528 pub \u3002 use \u5173\u952e\u5b57 : \u5728\u4e00\u4e2a\u4f5c\u7528\u57df\u5185\uff0c use \u5173\u952e\u5b57\u521b\u5efa\u4e86\u4e00\u4e2a\u6210\u5458\u7684\u5feb\u6377\u65b9\u5f0f\uff0c\u7528\u6765\u51cf\u5c11\u957f\u8def\u5f84\u7684\u91cd\u590d\u3002\u5728\u4efb\u4f55\u53ef\u4ee5\u5f15\u7528 crate::garden::vegetables::Asparagus \u7684\u4f5c\u7528\u57df, \u4f60\u53ef\u4ee5\u901a\u8fc7 use crate::garden::vegetables::Asparagus; \u521b\u5efa\u4e00\u4e2a\u5feb\u6377\u65b9\u5f0f\uff0c\u7136\u540e\u4f60\u5c31\u53ef\u4ee5\u5728\u4f5c\u7528\u57df\u4e2d\u53ea\u5199Asparagus\u6765\u4f7f\u7528\u8be5\u7c7b\u578b\u3002 \u8fd9\u91cc\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a backyard \u7684 \u4e8c\u8fdb\u5236 crate \u6765\u8bf4\u660e\u8fd9\u4e9b\u89c4\u5219\u3002\u8be5 crate \u7684\u8def\u5f84\u540c\u6837\u547d\u540d\u4e3abackyard\uff0c\u8be5\u8def\u5f84\u5305\u542b\u4e86\u8fd9\u4e9b\u6587\u4ef6\u548c\u76ee\u5f55\uff1a backyard \u251c\u2500\u2500 Cargo.lock \u251c\u2500\u2500 Cargo.toml \u2514\u2500\u2500 src \u251c\u2500\u2500 garden \u2502 \u2514\u2500\u2500 vegetables.rs \u251c\u2500\u2500 garden.rs \u2514\u2500\u2500 main.rs # crate\u6839\u6587\u4ef6 \u6587\u4ef6\u540d: src/main.rs use crate :: garden :: vegetables :: Asparagus ; pub mod garden ; // \u544a\u8bc9\u7f16\u8bd1\u5668\u5e94\u8be5\u5305\u542b\u5728src/garden.rs\u6587\u4ef6\u4e2d\u53d1\u73b0\u7684\u4ee3\u7801 fn main () { let plant = Asparagus {}; println! ( \"I'm growing {:?}!\" , plant ); } \u6587\u4ef6\u540d: src/garden.rs pub mod vegetables ; // \u610f\u5473\u7740\u5728src/garden/vegetables.rs\u4e2d\u7684\u4ee3\u7801\u4e5f\u5e94\u8be5\u88ab\u5305\u62ec\u3002 \u6587\u4ef6\u540d: src/garden/vegetables.rs #[derive(Debug)] pub struct Asparagus {}","title":"\u5b9a\u4e49\u6a21\u5757"},{"location":"packages/#_2","text":"\u6a21\u5757 \u53ef\u4ee5\u5c06\u4e00\u4e2a crate \u4e2d\u7684\u4ee3\u7801\u8fdb\u884c\u5206\u7ec4\uff0c\u4ee5\u63d0\u9ad8\u53ef\u8bfb\u6027\u4e0e\u91cd\u7528\u6027\u3002 \u56e0\u4e3a\u4e00\u4e2a \u6a21\u5757\u4e2d\u7684\u4ee3\u7801\u9ed8\u8ba4\u662f\u79c1\u6709\u7684 \uff0c\u6240\u4ee5\u8fd8\u53ef\u4ee5\u5229\u7528\u6a21\u5757\u63a7\u5236\u9879\u7684 \u79c1\u6709\u6027 \u3002 \u79c1\u6709\u9879\u662f\u4e0d\u53ef\u4e3a\u5916\u90e8\u4f7f\u7528\u7684\u5185\u5728\u8be6\u7ec6\u5b9e\u73b0\u3002\u4e5f\u53ef\u4ee5\u5c06\u6a21\u5757\u548c\u5b83\u5176\u4e2d\u7684\u9879\u6807\u8bb0\u4e3a\u516c\u5f00\u7684\uff0c\u8fd9\u6837\uff0c\u5916\u90e8\u4ee3\u7801\u5c31\u53ef\u4ee5\u4f7f\u7528\u5e76\u4f9d\u8d56\u4e0e\u5b83\u4eec\u3002 \u5728\u9910\u996e\u4e1a\uff0c\u9910\u9986\u4e2d\u4f1a\u6709\u4e00\u4e9b\u5730\u65b9\u88ab\u79f0\u4e4b\u4e3a \u524d\u53f0 \uff08front of house\uff09\uff0c\u8fd8\u6709\u53e6\u5916\u4e00\u4e9b\u5730\u65b9\u88ab\u79f0\u4e4b\u4e3a \u540e\u53f0 \uff08back of house\uff09\u3002 \u524d\u53f0\u662f\u62db\u5f85\u987e\u5ba2\u7684\u5730\u65b9\uff0c\u5728\u8fd9\u91cc\uff0c\u5e97\u4e3b\u53ef\u4ee5\u4e3a\u987e\u5ba2\u5b89\u6392\u5ea7\u4f4d\uff0c\u670d\u52a1\u5458\u63a5\u53d7\u987e\u5ba2\u4e0b\u5355\u548c\u4ed8\u6b3e\uff0c\u8c03\u9152\u5e08\u4f1a\u5236\u4f5c\u996e\u54c1\u3002 \u540e\u53f0\u5219\u662f\u7531\u53a8\u5e08\u5de5\u4f5c\u7684\u53a8\u623f\uff0c\u6d17\u7897\u5de5\u7684\u5de5\u4f5c\u5730\u70b9\uff0c\u4ee5\u53ca\u7ecf\u7406\u505a\u884c\u653f\u5de5\u4f5c\u7684\u5730\u65b9\u7ec4\u6210\u3002 \u53ef\u4ee5\u5c06\u51fd\u6570\u653e\u7f6e\u5230\u5d4c\u5957\u7684\u6a21\u5757\u4e2d\uff0c\u6765\u4f7f\u6211\u4eec\u7684 crate \u7ed3\u6784\u4e0e\u5b9e\u9645\u7684\u9879\u76ee\u4e1a\u52a1\u7ed3\u6784\u76f8\u540c\u3002\u901a\u8fc7\u6267\u884c cargo new --lib restaurant \uff0c \u6765\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u540d\u4e3a restaurant \u7684\u5e93\u3002\u7136\u540e\u5c06\u793a\u4f8b\u4e2d\u6240\u7f57\u5217\u51fa\u6765\u7684\u4ee3\u7801\u653e\u5165 src/lib.rs \u4e2d\uff0c\u6765\u5b9a\u4e49\u4e00\u4e9b\u6a21\u5757\u548c\u51fd\u6570\u3002 \u6587\u4ef6\u540d: src/lib.rs // \u4e00\u4e2a\u5305\u542b\u4e86\u5176\u4ed6\u5185\u7f6e\u4e86\u51fd\u6570\u7684\u6a21\u5757\u7684 front_of_house \u6a21\u5757 // \u5b9a\u4e49\u4e00\u4e2a\u6a21\u5757\uff0c\u662f\u4ee5 mod \u5173\u952e\u5b57\u4e3a\u8d77\u59cb\uff0c\u7136\u540e\u6307\u5b9a\u6a21\u5757\u7684\u540d\u5b57\uff08\u53eb\u505a front_of_house\uff09\uff0c\u5e76\u4e14\u7528\u82b1\u62ec\u53f7\u5305\u56f4\u6a21\u5757\u7684\u4e3b\u4f53\u3002 mod front_of_house { // \u5728\u6a21\u5757\u5185\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u5b9a\u4e49\u5176\u4ed6\u7684\u6a21\u5757\uff0c // hosting \u6a21\u5757 mod hosting { // \u6a21\u5757\u8fd8\u53ef\u4ee5\u4fdd\u5b58\u4e00\u4e9b\u5b9a\u4e49\u7684\u5176\u4ed6\u9879 // \u6bd4\u5982\u7ed3\u6784\u4f53\u3001\u679a\u4e3e\u3001\u5e38\u91cf\u3001traits\u3001\u6216\u8005\u51fd\u6570\u3002 fn add_to_waitlist () {} fn seat_at_table () {} } // serving \u6a21\u5757 mod serving { fn take_order () {} fn serve_order () {} fn take_payment () {} } } \u901a\u8fc7\u4f7f\u7528\u6a21\u5757\uff0c\u53ef\u4ee5\u5c06\u76f8\u5173\u7684\u5b9a\u4e49\u5206\u7ec4\u5230\u4e00\u8d77\uff0c\u5e76\u6307\u51fa\u4ed6\u4eec\u4e3a\u4ec0\u4e48\u76f8\u5173 \u3002 \u7a0b\u5e8f\u5458\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528\u8fd9\u6bb5\u4ee3\u7801\uff0c\u66f4\u52a0\u5bb9\u6613\u5730\u627e\u5230\u4ed6\u4eec\u60f3\u8981\u7684\u5b9a\u4e49\uff0c\u56e0\u4e3a\u4ed6\u4eec\u53ef\u4ee5\u57fa\u4e8e\u5206\u7ec4\u6765\u5bf9\u4ee3\u7801\u8fdb\u884c\u5bfc\u822a\uff0c\u800c\u4e0d\u9700\u8981\u9605\u8bfb\u6240\u6709\u7684\u5b9a\u4e49\u3002 \u7a0b\u5e8f\u5458\u5411\u8fd9\u6bb5\u4ee3\u7801\u4e2d\u6dfb\u52a0\u4e00\u4e2a\u65b0\u7684\u529f\u80fd\u65f6\uff0c\u4ed6\u4eec\u4e5f\u4f1a\u77e5\u9053\u4ee3\u7801\u5e94\u8be5\u653e\u7f6e\u5728\u4f55\u5904\uff0c\u53ef\u4ee5\u4fdd\u6301\u7a0b\u5e8f\u7684\u7ec4\u7ec7\u6027\u3002 \u5728\u524d\u9762\u63d0\u5230\u4e86\uff0c src/main.rs \u548c src/lib.rs \u53eb\u505a crate \u6839\u3002 \u4e4b\u6240\u4ee5\u8fd9\u6837\u53eb\u5b83\u4eec\u662f\u56e0\u4e3a\u8fd9\u4e24\u4e2a\u6587\u4ef6\u7684\u5185\u5bb9\u90fd\u5206\u522b\u5728 crate \u6a21\u5757\u7ed3\u6784\u7684\u6839\u7ec4\u6210\u4e86\u4e00\u4e2a\u540d\u4e3a crate \u7684\u6a21\u5757\uff0c\u8be5\u7ed3\u6784\u88ab\u79f0\u4e3a \u6a21\u5757\u6811 \uff08module tree\uff09\u3002 # \u793a\u4f8b\u7684\u6a21\u5757\u6811 # \u8fd9\u4e2a\u6811\u5c55\u793a\u4e86\u4e00\u4e9b\u6a21\u5757\u662f\u5982\u4f55\u88ab\u5d4c\u5165\u5230\u53e6\u4e00\u4e2a\u6a21\u5757\u7684 # \u8fd8\u5c55\u793a\u4e86\u4e00\u4e9b\u6a21\u5757\u662f\u4e92\u4e3a \u5144\u5f1f\uff08siblings\uff09 \u7684\uff0c\u8fd9\u610f\u5473\u7740\u5b83\u4eec\u5b9a\u4e49\u5728\u540c\u4e00\u6a21\u5757\u4e2d # \uff08hosting \u548c serving \u88ab\u4e00\u8d77\u5b9a\u4e49\u5728 front_of_house \u4e2d\uff09\u3002 crate \u2514\u2500\u2500 front_of_house \u251c\u2500\u2500 hosting \u2502 \u251c\u2500\u2500 add_to_waitlist \u2502 \u2514\u2500\u2500 seat_at_table \u2514\u2500\u2500 serving \u251c\u2500\u2500 take_order \u251c\u2500\u2500 serve_order \u2514\u2500\u2500 take_payment \u6cbf\u7528\u5bb6\u5ead\u5173\u7cfb\u7684\u6bd4\u55bb\uff0c\u5982\u679c\u4e00\u4e2a\u6a21\u5757 A \u88ab\u5305\u542b\u5728\u6a21\u5757 B \u4e2d\uff0c\u6211\u4eec\u5c06\u6a21\u5757 A \u79f0\u4e3a\u6a21\u5757 B \u7684 \u5b50\u6a21\u5757 \uff08child\uff09\uff0c\u6a21\u5757 B \u5219\u662f\u6a21\u5757 A \u7684 \u7236\u6a21\u5757 \uff08parent\uff09\u3002\u6ce8\u610f\uff0c\u6574\u4e2a\u6a21\u5757\u6811\u90fd\u690d\u6839\u4e8e\u540d\u4e3a crate \u7684\u9690\u5f0f\u6a21\u5757\u4e0b\u3002 \u8fd9\u4e2a\u6a21\u5757\u6811\u5f88\u50cf\u7535\u8111\u4e0a\u6587\u4ef6\u7cfb\u7edf\u7684 \u76ee\u5f55\u6811 \uff1b\u8fd9\u662f\u4e00\u4e2a\u975e\u5e38\u6070\u5f53\u7684\u7c7b\u6bd4\uff01\u5c31\u50cf\u6587\u4ef6\u7cfb\u7edf\u7684\u76ee\u5f55\uff0c\u53ef\u4ee5\u4f7f\u7528\u6a21\u5757\u6765\u7ec4\u7ec7\u4f60\u7684\u4ee3\u7801\u3002","title":"\u5bf9\u76f8\u5173\u4ee3\u7801\u8fdb\u884c\u5206\u7ec4"},{"location":"packages/#_3","text":"\u4f7f\u7528\u8def\u5f84\u7684\u65b9\u5f0f\uff0c\u5c31\u50cf\u5728\u6587\u4ef6\u7cfb\u7edf\u4f7f\u7528\u8def\u5f84\u4e00\u6837\u3002 \u8def\u5f84\u6709\u4e24\u79cd\u5f62\u5f0f\uff1a \u7edd\u5bf9\u8def\u5f84 \uff08absolute path\uff09\u4ece crate \u6839\u5f00\u59cb\uff0c\u4ee5 crate \u540d\u6216\u8005 \u5b57\u9762\u503c crate \u5f00\u5934\u3002 \u76f8\u5bf9\u8def\u5f84 \uff08relative path\uff09\u4ece\u5f53\u524d\u6a21\u5757\u5f00\u59cb\uff0c\u4ee5 self \u3001 super \u6216 \u5f53\u524d\u6a21\u5757\u7684\u6807\u8bc6\u7b26 \u5f00\u5934\u3002 \u7edd\u5bf9\u8def\u5f84\u548c\u76f8\u5bf9\u8def\u5f84\u90fd\u540e\u8ddf\u4e00\u4e2a\u6216\u591a\u4e2a\u7531\u53cc\u5192\u53f7\uff08 :: \uff09\u5206\u5272\u7684\u6807\u8bc6\u7b26\u3002 \u6587\u4ef6\u540d: src/lib.rs mod front_of_house { mod hosting { fn add_to_waitlist () {} } } pub fn eat_at_restaurant () { // \u7edd\u5bf9\u8def\u5f84 // \u88ab\u5b9a\u4e49\u5728\u540c\u4e00 crate \u4e2d\uff0c\u8fd9\u610f\u5473\u7740\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 crate \u5173\u952e\u5b57\u4e3a\u8d77\u59cb\u7684\u7edd\u5bf9\u8def\u5f84\u3002 crate :: front_of_house :: hosting :: add_to_waitlist (); // \u76f8\u5bf9\u8def\u5f84 // \u4ee5 front_of_house \u4e3a\u8d77\u59cb // \u4ee5\u540d\u79f0\u4e3a\u8d77\u59cb\uff0c\u610f\u5473\u7740\u8be5\u8def\u5f84\u662f\u76f8\u5bf9\u8def\u5f84\u3002 front_of_house :: hosting :: add_to_waitlist (); } // \u8fd9\u4e2a\u4f8b\u5b50\u65e0\u6cd5\u7f16\u8bd1\u901a\u8fc7, \u56e0\u4e3a hosting \u5b50\u6a21\u5757\u662f\u79c1\u6709\u7684\uff08\u9ed8\u8ba4\uff09 \u9009\u62e9\u4f7f\u7528\u76f8\u5bf9\u8def\u5f84\u8fd8\u662f\u7edd\u5bf9\u8def\u5f84\uff0c\u8fd8\u662f\u8981\u53d6\u51b3\u4e8e\u4f60\u7684\u9879\u76ee\u3002\u53d6\u51b3\u4e8e\u4f60\u662f\u66f4\u503e\u5411\u4e8e\u5c06\u9879\u7684\u5b9a\u4e49\u4ee3\u7801\u4e0e\u4f7f\u7528\u8be5\u9879\u7684\u4ee3\u7801\u5206\u5f00\u6765\u79fb\u52a8\uff0c\u8fd8\u662f\u4e00\u8d77\u79fb\u52a8\u3002 build \u62a5\u9519: $ cargo build Compiling restaurant v0.1.0 ( file:///projects/restaurant ) error [ E0603 ] : module ` hosting ` is private --> src/lib.rs:9:28 | 9 | crate::front_of_house::hosting::add_to_waitlist () ; | ^^^^^^^ private module | note: the module ` hosting ` is defined here --> src/lib.rs:2:5 | 2 | mod hosting { | ^^^^^^^^^^^ error [ E0603 ] : module ` hosting ` is private --> src/lib.rs:12:21 | 12 | front_of_house::hosting::add_to_waitlist () ; | ^^^^^^^ private module | note: the module ` hosting ` is defined here --> src/lib.rs:2:5 | 2 | mod hosting { | ^^^^^^^^^^^ For more information about this error, try ` rustc --explain E0603 ` . error: could not compile ` restaurant ` due to 2 previous errors \u9519\u8bef\u4fe1\u606f\u8bf4 hosting \u6a21\u5757\u662f\u79c1\u6709\u7684\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u793a\u4f8b\u62e5\u6709 hosting \u6a21\u5757\u548c add_to_waitlist \u51fd\u6570\u7684\u7684\u6b63\u786e\u8def\u5f84\uff0c\u4f46\u662f Rust \u4e0d\u8ba9\u6211\u4eec\u4f7f\u7528\uff0c\u56e0\u4e3a\u5b83 \u4e0d\u80fd\u8bbf\u95ee\u79c1\u6709\u7247\u6bb5 \u3002 \u6a21\u5757\u4e0d\u4ec5\u5bf9\u4e8e\u7ec4\u7ec7\u4ee3\u7801\u5f88\u6709\u7528\u3002\u8fd8\u5b9a\u4e49\u4e86 Rust \u7684 \u79c1\u6709\u6027\u8fb9\u754c \uff08privacy boundary\uff09\uff1a\u8fd9\u6761\u754c\u7ebf\u4e0d\u5141\u8bb8\u5916\u90e8\u4ee3\u7801\u4e86\u89e3\u3001\u8c03\u7528\u548c\u4f9d\u8d56\u88ab\u5c01\u88c5\u7684\u5b9e\u73b0\u7ec6\u8282\u3002\u6240\u4ee5\uff0c\u5982\u679c\u5e0c\u671b\u521b\u5efa\u4e00\u4e2a\u79c1\u6709\u51fd\u6570\u6216\u7ed3\u6784\u4f53\uff0c\u53ef\u4ee5\u5c06\u5176\u653e\u5165\u6a21\u5757\u3002 Rust \u4e2d \u9ed8\u8ba4 \u6240\u6709\u9879\uff08\u51fd\u6570\u3001\u65b9\u6cd5\u3001\u7ed3\u6784\u4f53\u3001\u679a\u4e3e\u3001\u6a21\u5757\u548c\u5e38\u91cf\uff09\u90fd\u662f\u79c1\u6709\u7684\u3002\u7236\u6a21\u5757\u4e2d\u7684\u9879\u4e0d\u80fd\u4f7f\u7528\u5b50\u6a21\u5757\u4e2d\u7684\u79c1\u6709\u9879\uff0c\u4f46\u662f\u5b50\u6a21\u5757\u4e2d\u7684\u9879\u53ef\u4ee5\u4f7f\u7528\u4ed6\u4eec\u7236\u6a21\u5757\u4e2d\u7684\u9879\u3002 \u8fd9\u662f\u56e0\u4e3a\u5b50\u6a21\u5757\u5c01\u88c5\u5e76\u9690\u85cf\u4e86\u4ed6\u4eec\u7684\u5b9e\u73b0\u8be6\u60c5\uff0c\u4f46\u662f\u5b50\u6a21\u5757\u53ef\u4ee5\u770b\u5230\u4ed6\u4eec\u5b9a\u4e49\u7684\u4e0a\u4e0b\u6587\u3002 \u7ee7\u7eed\u62ff\u9910\u9986\u4f5c\u6bd4\u55bb\uff0c\u628a\u79c1\u6709\u6027\u89c4\u5219\u60f3\u8c61\u6210\u9910\u9986\u7684\u540e\u53f0\u529e\u516c\u5ba4\uff1a\u9910\u9986\u5185\u7684\u4e8b\u52a1\u5bf9\u9910\u5385\u987e\u5ba2\u6765\u8bf4\u662f\u4e0d\u53ef\u77e5\u7684\uff0c\u4f46\u529e\u516c\u5ba4\u7ecf\u7406\u53ef\u4ee5\u6d1e\u6089\u5176\u7ecf\u8425\u7684\u9910\u5385\u5e76\u5728\u5176\u4e2d\u505a\u4efb\u4f55\u4e8b\u60c5\u3002 Rust \u9009\u62e9\u4ee5\u8fd9\u79cd\u65b9\u5f0f\u6765\u5b9e\u73b0\u6a21\u5757\u7cfb\u7edf\u529f\u80fd\uff0c\u56e0\u6b64\u9ed8\u8ba4\u9690\u85cf\u5185\u90e8\u5b9e\u73b0\u7ec6\u8282\u3002\u8fd9\u6837\u4e00\u6765\uff0c\u5c31\u77e5\u9053\u53ef\u4ee5\u66f4\u6539\u5185\u90e8\u4ee3\u7801\u7684\u54ea\u4e9b\u90e8\u5206\u800c\u4e0d\u4f1a\u7834\u574f\u5916\u90e8\u4ee3\u7801\u3002\u8fd8\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528 pub \u5173\u952e\u5b57\u6765\u521b\u5efa\u516c\u5171\u9879\uff0c\u4f7f\u5b50\u6a21\u5757\u7684\u5185\u90e8\u90e8\u5206\u66b4\u9732\u7ed9\u4e0a\u7ea7\u6a21\u5757\u3002","title":"\u5f15\u7528\u6a21\u5757"},{"location":"packages/#pub","text":"\u5728\u4e0a\u9762\u793a\u4f8b\u7684\u62a5\u9519\u4fe1\u606f\u4e2d\uff0c\u5b83\u544a\u8bc9\u6211\u4eec hosting \u6a21\u5757\u662f\u79c1\u6709\u7684\u3002\u60f3\u8ba9\u7236\u6a21\u5757\u4e2d\u7684 eat_at_restaurant \u51fd\u6570\u53ef\u4ee5\u8bbf\u95ee\u5b50\u6a21\u5757\u4e2d\u7684 add_to_waitlist \u51fd\u6570\uff0c\u56e0\u6b64\u6211\u4eec\u4f7f\u7528 pub \u5173\u952e\u5b57\u6765\u6807\u8bb0 hosting \u6a21\u5757\uff0c \u6587\u4ef6\u540d: src/lib.rs mod front_of_house { // \u6dfb\u52a0pub\u5173\u952e\u5b57\u4f7f\u6a21\u5757\u516c\u5f00 pub mod hosting { // \u6dfb\u52a0pub\u5173\u952e\u5b57\u4f7f\u51fd\u6570\u516c\u5f00 pub fn add_to_waitlist () {} } } pub fn eat_at_restaurant () { // \u7edd\u5bf9\u8def\u5f84 crate :: front_of_house :: hosting :: add_to_waitlist (); // \u76f8\u5bf9\u8def\u5f84 front_of_house :: hosting :: add_to_waitlist (); } // \u73b0\u5728\u4ee3\u7801\u53ef\u4ee5\u7f16\u8bd1\u901a\u8fc7\u4e86\uff01 \u79c1\u6709\u6027\u89c4\u5219\u4e0d\u4f46\u5e94\u7528\u4e8e\u6a21\u5757\uff0c\u8fd8\u5e94\u7528\u4e8e\u7ed3\u6784\u4f53\u3001\u679a\u4e3e\u3001\u51fd\u6570\u548c\u65b9\u6cd5\u3002","title":"pub\u5173\u952e\u5b57"},{"location":"packages/#super","text":"\u8fd8\u53ef\u4ee5\u4f7f\u7528 super \u5f00\u5934\u6765\u6784\u5efa\u4ece\u7236\u6a21\u5757\u5f00\u59cb\u7684\u76f8\u5bf9\u8def\u5f84\u3002 \u4f3c\u4e8e\u6587\u4ef6\u7cfb\u7edf\u4e2d\u4ee5 .. \u5f00\u5934\u7684\u8bed\u6cd5\u3002 \u6587\u4ef6\u540d: src/lib.rs // \u4f7f\u7528\u4ee5 super \u5f00\u5934\u7684\u76f8\u5bf9\u8def\u5f84\u4ece\u7236\u76ee\u5f55\u5f00\u59cb\u8c03\u7528\u51fd\u6570 fn serve_order () {} mod back_of_house { fn fix_incorrect_order () { cook_order (); // super\u8868\u793a\u7236\u7ea7\u7684\u6a21\u5757 super :: serve_order (); } fn cook_order () {} }","title":"super\u76f8\u5bf9\u8def\u5f84"},{"location":"packages/#_4","text":"\u8fd8\u53ef\u4ee5\u4f7f\u7528 pub \u6765\u8bbe\u8ba1\u516c\u6709\u7684 \u7ed3\u6784\u4f53 \u548c \u679a\u4e3e \uff0c\u4e0d\u8fc7\u6709\u4e00\u4e9b\u989d\u5916\u7684\u7ec6\u8282\u9700\u8981\u6ce8\u610f\u3002 \u5982\u679c\u6211\u4eec\u5728\u4e00\u4e2a\u7ed3\u6784\u4f53\u5b9a\u4e49\u7684\u524d\u9762\u4f7f\u7528\u4e86 pub \uff0c\u8fd9\u4e2a\u7ed3\u6784\u4f53\u4f1a\u53d8\u6210\u516c\u6709\u7684\uff0c\u4f46\u662f\u8fd9\u4e2a\u7ed3\u6784\u4f53\u7684\u5b57\u6bb5\u4ecd\u7136\u662f\u79c1\u6709\u7684\u3002\u53ef\u4ee5\u6839\u636e\u60c5\u51b5\u51b3\u5b9a\u6bcf\u4e2a\u5b57\u6bb5\u662f\u5426\u516c\u6709\u3002 \u5728\u793a\u4f8b\u4e2d\uff0c\u5b9a\u4e49\u4e86\u4e00\u4e2a\u516c\u6709\u7ed3\u6784\u4f53 back_of_house:Breakfast \uff0c\u5176\u4e2d\u6709\u4e00\u4e2a\u516c\u6709\u5b57\u6bb5 toast \u548c\u79c1\u6709\u5b57\u6bb5 seasonal_fruit \u3002 \u8fd9\u4e2a\u4f8b\u5b50\u6a21\u62df\u7684\u60c5\u51b5\u662f\uff0c\u5728\u4e00\u5bb6\u9910\u9986\u4e2d\uff0c\u987e\u5ba2\u53ef\u4ee5\u9009\u62e9\u968f\u9910\u9644\u8d60\u7684\u9762\u5305\u7c7b\u578b\uff0c\u4f46\u662f\u53a8\u5e08\u4f1a\u6839\u636e\u5b63\u8282\u548c\u5e93\u5b58\u60c5\u51b5\u6765\u51b3\u5b9a\u968f\u9910\u642d\u914d\u7684\u6c34\u679c\u3002\u9910\u9986\u53ef\u7528\u7684\u6c34\u679c\u53d8\u5316\u662f\u5f88\u5feb\u7684\uff0c\u6240\u4ee5\u987e\u5ba2\u4e0d\u80fd\u9009\u62e9\u6c34\u679c\uff0c\u751a\u81f3\u65e0\u6cd5\u770b\u5230\u4ed6\u4eec\u5c06\u4f1a\u5f97\u5230\u4ec0\u4e48\u6c34\u679c\u3002 mod back_of_house { pub struct Breakfast { pub toast : String , seasonal_fruit : String , } impl Breakfast { pub fn summer ( toast : & str ) -> Breakfast { Breakfast { toast : String :: from ( toast ), seasonal_fruit : String :: from ( \"peaches\" ), } } } } pub fn eat_at_restaurant () { // \u5728\u590f\u5929\u8ba2\u8d2d\u4e00\u4e2a\u9ed1\u9ea6\u571f\u53f8\u4f5c\u4e3a\u65e9\u9910 let mut meal = back_of_house :: Breakfast :: summer ( \"Rye\" ); // toast \u5b57\u6bb5\u662f\u516c\u6709\u7684, \u6240\u4ee5\u53ef\u4ee5\u4f7f\u7528\u70b9\u53f7\u6765\u968f\u610f\u7684\u8bfb\u5199 toast \u5b57\u6bb5\u3002 // \u6539\u53d8\u4e3b\u610f\u66f4\u6362\u60f3\u8981\u9762\u5305\u7684\u7c7b\u578b meal . toast = String :: from ( \"Wheat\" ); println! ( \"I'd like {} toast please\" , meal . toast ); // \u5982\u679c\u53d6\u6d88\u4e0b\u4e00\u884c\u7684\u6ce8\u91ca\u4ee3\u7801\u4e0d\u80fd\u7f16\u8bd1\uff1b // \u4e0d\u5141\u8bb8\u67e5\u770b\u6216\u4fee\u6539\u65e9\u9910\u9644\u5e26\u7684\u5b63\u8282\u6c34\u679c // \u56e0\u4e3a seasonal_fruit \u662f\u79c1\u6709\u7684, \u6240\u4ee5\u4e0d\u80fd\u7528\u70b9\u53f7\u6765\u968f\u610f\u7684\u8bfb\u5199 seasonal_fruit \u5b57\u6bb5\u3002 // meal.seasonal_fruit = String::from(\"blueberries\"); } \u6ce8\u610f \u56e0\u4e3a back_of_house::Breakfast \u5177\u6709\u79c1\u6709\u5b57\u6bb5\uff0c\u6240\u4ee5\u8fd9\u4e2a\u7ed3\u6784\u4f53 \u9700\u8981\u63d0\u4f9b\u4e00\u4e2a\u516c\u5171\u7684\u5173\u8054\u51fd\u6570\u6765\u6784\u9020 Breakfast \u7684\u5b9e\u4f8b (\u8fd9\u91cc\u547d\u540d\u4e3a summer )\u3002 \u5982\u679c Breakfast \u6ca1\u6709\u8fd9\u6837\u7684\u51fd\u6570\uff0c\u5c06\u65e0\u6cd5\u5728 eat_at_restaurant \u4e2d\u521b\u5efa Breakfast \u5b9e\u4f8b\uff0c \u56e0\u4e3a\u6211\u4eec\u4e0d\u80fd\u5728 eat_at_restaurant \u4e2d\u8bbe\u7f6e\u79c1\u6709\u5b57\u6bb5 seasonal_fruit \u7684\u503c\u3002 \u4e0e\u4e4b\u76f8\u53cd\uff0c\u5982\u679c\u5c06 \u679a\u4e3e \u8bbe\u4e3a\u516c\u6709\uff0c\u5219\u5b83\u7684\u6240\u6709\u6210\u5458\u90fd\u5c06\u53d8\u4e3a\u516c\u6709\u3002\u53ea\u9700\u8981\u5728 enum \u5173\u952e\u5b57\u524d\u9762\u52a0\u4e0a pub // \u8bbe\u8ba1\u516c\u6709\u679a\u4e3e\uff0c\u4f7f\u5176\u6240\u6709\u6210\u5458\u516c\u6709 mod back_of_house { pub enum Appetizer { Soup , Salad , } } pub fn eat_at_restaurant () { let order1 = back_of_house :: Appetizer :: Soup ; let order2 = back_of_house :: Appetizer :: Salad ; } \u5982\u679c\u679a\u4e3e\u6210\u5458\u4e0d\u662f\u516c\u6709\u7684\uff0c\u90a3\u4e48\u679a\u4e3e\u4f1a\u663e\u5f97\u7528\u5904\u4e0d\u5927\uff1b \u7ed9\u679a\u4e3e\u7684\u6240\u6709\u6210\u5458\u6328\u4e2a\u6dfb\u52a0 pub \u662f\u5f88\u4ee4\u4eba\u607c\u706b\u7684\uff0c\u56e0\u6b64\u679a\u4e3e\u6210\u5458\u9ed8\u8ba4\u5c31\u662f\u516c\u6709\u7684\u3002 \u7ed3\u6784\u4f53\u901a\u5e38\u4f7f\u7528\u65f6\uff0c\u4e0d\u5fc5\u5c06\u5b83\u4eec\u7684\u5b57\u6bb5\u516c\u6709\u5316\uff0c\u56e0\u6b64\u7ed3\u6784\u4f53\u9075\u5faa\u5e38\u89c4\uff0c\u5185\u5bb9\u5168\u90e8\u662f\u79c1\u6709\u7684\uff0c\u9664\u975e\u4f7f\u7528 pub \u5173\u952e\u5b57\u3002","title":"\u516c\u6709\u7684\u7ed3\u6784\u4f53\u548c\u679a\u4e3e"},{"location":"packages/#use","text":"\u53ef\u4ee5\u4f7f\u7528 use \u5173\u952e\u5b57\u5c06\u8def\u5f84\u4e00\u6b21\u6027\u5f15\u5165\u4f5c\u7528\u57df\uff0c\u7136\u540e\u8c03\u7528\u8be5\u8def\u5f84\u4e2d\u7684\u9879\uff0c\u5c31\u5982\u540c\u5b83\u4eec\u662f\u672c\u5730\u9879\u4e00\u6837\u3002 mod front_of_house { pub mod hosting { pub fn add_to_waitlist () {} } } // \u4f7f\u7528 use \u5c06\u6a21\u5757\u5f15\u5165\u4f5c\u7528\u57df use crate :: front_of_house :: hosting ; pub fn eat_at_restaurant () { hosting :: add_to_waitlist (); hosting :: add_to_waitlist (); hosting :: add_to_waitlist (); } \u4f5c\u7528\u57df\u4e2d\u589e\u52a0 use \u548c\u8def\u5f84\u7c7b\u4f3c\u4e8e\u5728\u6587\u4ef6\u7cfb\u7edf\u4e2d\u521b\u5efa\u8f6f\u8fde\u63a5\uff08\u7b26\u53f7\u8fde\u63a5\uff0csymbolic link\uff09 \u901a\u8fc7\u5728 crate \u6839\u589e\u52a0 use crate::front_of_house::hosting \uff0c\u73b0\u5728 hosting \u5728\u4f5c\u7528\u57df\u4e2d\u5c31\u662f\u6709\u6548\u7684\u540d\u79f0\u4e86\uff0c \u5982\u540c hosting \u6a21\u5757 \u88ab\u5b9a\u4e49 \u4e8e crate \u6839\u4e00\u6837\u3002\u901a\u8fc7 use \u5f15\u5165\u4f5c\u7528\u57df\u7684\u8def\u5f84 \u4e5f\u4f1a\u68c0\u67e5\u79c1\u6709\u6027 \uff0c\u540c\u5176\u5b83\u8def\u5f84\u4e00\u6837\u3002 // \u5f15\u5165\u4f5c\u7528\u57df\u7684\u4e60\u60ef\u7528\u6cd5 mod front_of_house { pub mod hosting { pub fn add_to_waitlist () {} } } // \u4f7f\u7528 use \u548c\u76f8\u5bf9\u8def\u5f84\u6765\u5c06\u4e00\u4e2a\u9879\u5f15\u5165\u4f5c\u7528\u57df use self :: front_of_house :: hosting ; pub fn eat_at_restaurant () { hosting :: add_to_waitlist (); hosting :: add_to_waitlist (); hosting :: add_to_waitlist (); } mod front_of_house { pub mod hosting { pub fn add_to_waitlist () {} } } use crate :: front_of_house :: hosting :: add_to_waitlist ; pub fn eat_at_restaurant () { add_to_waitlist (); add_to_waitlist (); add_to_waitlist (); }","title":"use\u5173\u952e\u5b57"},{"location":"packages/#use_1","text":"use \u5c06\u51fd\u6570\u5f15\u5165\u4f5c\u7528\u57df\u7684\u4e60\u60ef\u7528\u6cd5\u3002\u5c31\u662f\u4f7f\u7528 use \u5c06\u51fd\u6570\u7684\u7236\u6a21\u5757\u5f15\u5165\u4f5c\u7528\u57df\uff0c\u5fc5\u987b\u5728\u8c03\u7528\u51fd\u6570\u65f6\u6307\u5b9a\u7236\u6a21\u5757\uff0c\u8fd9\u6837\u53ef\u4ee5\u6e05\u6670\u5730\u8868\u660e\u51fd\u6570\u4e0d\u662f\u5728\u672c\u5730\u5b9a\u4e49\u7684\uff0c\u540c\u65f6\u4f7f\u5b8c\u6574\u8def\u5f84\u7684\u91cd\u590d\u5ea6\u6700\u5c0f\u5316\u3002 \u5982\u4e0b\u793a\u4f8b\u4e2d\u7684\u4ee3\u7801\u4e0d\u6e05\u695a add_to_waitlist \u662f\u5728\u54ea\u91cc\u88ab\u5b9a\u4e49\u7684\u3002 mod front_of_house { pub mod hosting { pub fn add_to_waitlist () {} } } use crate :: front_of_house :: hosting :: add_to_waitlist ; pub fn eat_at_restaurant () { // \u6b64\u65f6\u5bb9\u6613\u4e0d\u77e5 add_to_waitlist \u662f\u5728\u54ea\u91cc\u88ab\u5b9a\u4e49\u7684\u3002 add_to_waitlist (); add_to_waitlist (); add_to_waitlist (); } \u4f7f\u7528 use \u5f15\u5165\u7ed3\u6784\u4f53\u3001\u679a\u4e3e\u548c\u5176\u4ed6\u9879\u65f6\uff0c\u4e60\u60ef\u662f\u6307\u5b9a\u5b83\u4eec\u7684\u5b8c\u6574\u8def\u5f84\u3002 // \u5c06 HashMap \u5f15\u5165\u4f5c\u7528\u57df\u7684\u4e60\u60ef\u7528\u6cd5 use std :: collections :: HashMap ; fn main () { let mut map = HashMap :: new (); map . insert ( 1 , 2 ); } \u8fd9\u79cd\u4e60\u60ef\u7528\u6cd5\u80cc\u540e\u6ca1\u6709\u4ec0\u4e48\u786c\u6027\u8981\u6c42\uff1a\u5b83\u53ea\u662f\u4e00\u79cd\u60ef\u4f8b\uff0c\u4eba\u4eec\u5df2\u7ecf\u4e60\u60ef\u4e86\u4ee5\u8fd9\u79cd\u65b9\u5f0f\u9605\u8bfb\u548c\u7f16\u5199 Rust \u4ee3\u7801\u3002 \u8fd9\u4e2a\u4e60\u60ef\u7528\u6cd5\u6709\u4e00\u4e2a\u4f8b\u5916\uff0c\u90a3\u5c31\u662f\u6211\u4eec\u60f3\u4f7f\u7528 use \u8bed\u53e5\u5c06\u4e24\u4e2a\u5177\u6709\u76f8\u540c\u540d\u79f0\u7684\u9879\u5e26\u5165\u4f5c\u7528\u57df\uff0c\u56e0\u4e3a Rust \u4e0d\u5141\u8bb8\u8fd9\u6837\u505a\u3002 // \u5c55\u793a\u4e86\u5982\u4f55\u5c06\u4e24\u4e2a\u5177\u6709\u76f8\u540c\u540d\u79f0\u4f46\u4e0d\u540c\u7236\u6a21\u5757\u7684 Result \u7c7b\u578b\u5f15\u5165\u4f5c\u7528\u57df\uff0c\u4ee5\u53ca\u5982\u4f55\u5f15\u7528\u5b83\u4eec\u3002 use std :: fmt ; use std :: io ; fn function1 () -> fmt :: Result { // --snip-- } fn function2 () -> io :: Result < () > { // --snip-- } // \u4f7f\u7528\u7236\u6a21\u5757\u53ef\u4ee5\u533a\u5206\u8fd9\u4e24\u4e2a Result \u7c7b\u578b\u3002","title":"\u60ef\u7528\u7684 use \u8def\u5f84"},{"location":"packages/#as","text":"\u4f7f\u7528 use \u5c06\u4e24\u4e2a\u540c\u540d\u7c7b\u578b\u5f15\u5165\u540c\u4e00\u4f5c\u7528\u57df\u8fd9\u4e2a\u95ee\u9898\u8fd8\u6709\u53e6\u4e00\u4e2a\u89e3\u51b3\u529e\u6cd5\uff1a \u5728\u8fd9\u4e2a\u7c7b\u578b\u7684\u8def\u5f84\u540e\u9762\uff0c\u4f7f\u7528 as \u6307\u5b9a\u4e00\u4e2a\u65b0\u7684\u672c\u5730\u540d\u79f0\u6216\u8005\u522b\u540d\u3002 // \u901a\u8fc7 as \u91cd\u547d\u540d\u5176\u4e2d\u4e00\u4e2a Result \u7c7b\u578b use std :: fmt :: Result ; use std :: io :: Result as IoResult ; fn function1 () -> Result { // --snip-- } fn function2 () -> IoResult < () > { // --snip-- }","title":"as \u5173\u952e\u5b57"},{"location":"packages/#pub-use","text":"\u4f7f\u7528 use \u5173\u952e\u5b57\uff0c \u5c06\u67d0\u4e2a\u540d\u79f0\u5bfc\u5165\u5f53\u524d\u4f5c\u7528\u57df\u540e\uff0c\u8fd9\u4e2a\u540d\u79f0\u5728\u6b64\u4f5c\u7528\u57df\u4e2d\u5c31\u53ef\u4ee5\u4f7f\u7528\u4e86\uff0c\u4f46\u5b83\u5bf9\u6b64\u4f5c\u7528\u57df\u4e4b\u5916\u8fd8\u662f\u79c1\u6709\u7684 \u3002 \u5982\u679c\u60f3\u8ba9\u5176\u4ed6\u4eba\u8c03\u7528\u6211\u4eec\u7684\u4ee3\u7801\u65f6\uff0c\u4e5f\u80fd\u591f\u6b63\u5e38\u4f7f\u7528\u8fd9\u4e2a\u540d\u79f0\uff0c\u5c31\u597d\u50cf\u5b83\u672c\u6765\u5c31\u5728\u5f53\u524d\u4f5c\u7528\u57df\u4e00\u6837\uff0c\u90a3\u6211\u4eec\u53ef\u4ee5\u5c06 pub \u548c use \u5408\u8d77\u6765\u4f7f\u7528\u3002 \u8fd9\u79cd\u6280\u672f\u88ab\u79f0\u4e3a \u201c \u91cd\u5bfc\u51fa \uff08re-exporting\uff09\u201d\uff1a\u6211\u4eec\u4e0d\u4ec5\u5c06\u4e00\u4e2a\u540d\u79f0\u5bfc\u5165\u4e86\u5f53\u524d\u4f5c\u7528\u57df\uff0c\u8fd8\u5141\u8bb8\u522b\u4eba\u628a\u5b83\u5bfc\u5165\u4ed6\u4eec\u81ea\u5df1\u7684\u4f5c\u7528\u57df\u3002 mod front_of_house { pub mod hosting { pub fn add_to_waitlist () {} } } pub use crate :: front_of_house :: hosting ; pub fn eat_at_restaurant () { hosting :: add_to_waitlist (); hosting :: add_to_waitlist (); hosting :: add_to_waitlist (); } \u901a\u8fc7 pub use \u91cd\u5bfc\u51fa\uff0c\u5916\u90e8\u4ee3\u7801\u73b0\u5728\u53ef\u4ee5\u901a\u8fc7\u65b0\u8def\u5f84 restaurant::hosting::add_to_waitlist \u6765\u8c03\u7528 add_to_waitlist \u51fd\u6570\u3002 \u5982\u679c\u6ca1\u6709\u6307\u5b9a pub use \uff0c\u5916\u90e8\u4ee3\u7801\u9700\u5728\u5176\u4f5c\u7528\u57df\u4e2d\u8c03\u7528 restaurant::front_of_house::hosting::add_to_waitlist \u3002 \u5f53\u4f60\u4ee3\u7801\u7684\u5185\u90e8\u7ed3\u6784\u4e0e\u8c03\u7528\u4f60\u4ee3\u7801\u7684\u7a0b\u5e8f\u5458\u6240\u60f3\u8c61\u7684\u7ed3\u6784\u4e0d\u540c\u65f6\uff0c\u91cd\u5bfc\u51fa\u4f1a\u5f88\u6709\u7528\u3002 \u4f8b\u5982\uff0c\u5728\u8fd9\u4e2a\u9910\u9986\u7684\u6bd4\u55bb\u4e2d\uff0c\u7ecf\u8425\u9910\u9986\u7684\u4eba\u4f1a\u60f3\u5230\u201c\u524d\u53f0\u201d\u548c\u201c\u540e\u53f0\u201d\u3002\u4f46\u987e\u5ba2\u5728\u5149\u987e\u4e00\u5bb6\u9910\u9986\u65f6\uff0c\u53ef\u80fd\u4e0d\u4f1a\u4ee5\u8fd9\u4e9b\u672f\u8bed\u6765\u8003\u8651\u9910\u9986\u7684\u5404\u4e2a\u90e8\u5206\u3002 \u4f7f\u7528 pub use \uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4e00\u79cd\u7ed3\u6784\u7f16\u5199\u4ee3\u7801\uff0c\u5374\u5c06\u4e0d\u540c\u7684\u7ed3\u6784\u5f62\u5f0f\u66b4\u9732\u51fa\u6765\u3002\u8fd9\u6837\u505a\u4f7f\u6211\u4eec\u7684\u5e93 \u4e95\u4e95\u6709\u6761 \uff0c \u4e5f\u4f7f\u5f00\u53d1\u8fd9\u4e2a\u5e93\u7684\u7a0b\u5e8f\u5458\u548c\u8c03\u7528\u8fd9\u4e2a\u5e93\u7684\u7a0b\u5e8f\u5458\u90fd\u66f4\u52a0\u65b9\u4fbf\u3002","title":"pub use\u91cd\u5bfc\u51fa"},{"location":"packages/#_5","text":"\u5728\u7f16\u5199\u731c\u731c\u770b\u6e38\u620f\u65f6\u3002\u9879\u76ee\u4f7f\u7528\u4e86\u4e00\u4e2a\u5916\u90e8\u5305\uff0c rand \uff0c\u6765\u751f\u6210\u968f\u673a\u6570\u3002\u4e3a\u4e86\u5728\u9879\u76ee\u4e2d\u4f7f\u7528 rand \uff0c\u5728 Cargo.toml \u4e2d\u52a0\u5165\u4e86\u5982\u4e0b\u884c\uff1a rand = \"0.8.3\" // \u544a\u8bc9\u4e86 Cargo \u8981\u4ece crates.io \u4e0b\u8f7d rand \u548c\u5176\u4f9d\u8d56\uff0c\u5e76\u4f7f\u5176\u53ef\u5728\u9879\u76ee\u4ee3\u7801\u4e2d\u4f7f\u7528\u3002 \u63a5\u7740\uff0c\u4e3a\u4e86\u5c06 rand \u5b9a\u4e49\u5f15\u5165\u9879\u76ee\u5305\u7684\u4f5c\u7528\u57df\uff0c\u52a0\u5165\u4e00\u884c use \u8d77\u59cb\u7684\u5305\u540d\uff0c\u5b83\u4ee5 rand \u5305\u540d\u5f00\u5934\u5e76\u5217\u51fa\u4e86\u9700\u8981\u5f15\u5165\u4f5c\u7528\u57df\u7684\u9879\u3002\u66fe\u5c06 Rng trait \u5f15\u5165\u4f5c\u7528\u57df\u5e76\u8c03\u7528\u4e86 rand::thread_rng \u51fd\u6570\uff1a use rand :: Rng ; fn main () { let secret_number = rand :: thread_rng (). gen_range ( 1 ..= 100 ); } crates.io \u4e0a\u6709\u5f88\u591a Rust \u793e\u533a\u6210\u5458\u53d1\u5e03\u7684\u5305\uff0c\u5c06\u5176\u5f15\u5165\u81ea\u5df1\u7684\u9879\u76ee\u90fd\u9700\u8981\u4e00\u9053\u76f8\u540c\u7684\u6b65\u9aa4\uff1a \u5728 Cargo.toml \u5217\u51fa\u5b83\u4eec\u5e76\u901a\u8fc7 use \u5c06\u5176\u4e2d\u5b9a\u4e49\u7684\u9879\u5f15\u5165\u9879\u76ee\u5305\u7684\u4f5c\u7528\u57df\u4e2d\u3002 \u6ce8\u610f \u6807\u51c6\u5e93\uff08std\uff09 \u5bf9\u4e8e\u4f60\u7684\u5305\u6765\u8bf4\u4e5f\u662f\u5916\u90e8 crate \u3002\u56e0\u4e3a\u6807\u51c6\u5e93\u968f Rust \u8bed\u8a00\u4e00\u540c\u5206\u53d1\uff0c\u65e0\u9700\u4fee\u6539 Cargo.toml \u6765\u5f15\u5165 std \uff0c\u4e0d\u8fc7\u9700\u8981\u901a\u8fc7 use \u5c06\u6807\u51c6\u5e93\u4e2d\u5b9a\u4e49\u7684\u9879\u5f15\u5165\u9879\u76ee\u5305\u7684\u4f5c\u7528\u57df\u4e2d\u6765\u5f15\u7528\u5b83\u4eec\uff0c\u6bd4\u5982\u4f7f\u7528\u7684 HashMap \uff1a use std :: collections :: HashMap ; // \u4ee5\u6807\u51c6\u5e93 crate \u540d std \u5f00\u5934\u7684\u7edd\u5bf9\u8def\u5f84\u3002","title":"\u4f7f\u7528\u5916\u90e8\u5305"},{"location":"packages/#_6","text":"\u5f53\u9700\u8981\u5f15\u5165\u5f88\u591a\u5b9a\u4e49\u4e8e\u76f8\u540c\u5305\u6216\u76f8\u540c\u6a21\u5757\u7684\u9879\u65f6\uff0c\u4e3a\u6bcf\u4e00\u9879\u5355\u72ec\u5217\u51fa\u4e00\u884c\u4f1a\u5360\u7528\u6e90\u7801\u5f88\u5927\u7684\u7a7a\u95f4\u3002 // --snip-- use std :: cmp :: Ordering ; use std :: io ; // --snip-- \u53ef\u4ee5\u4f7f\u7528\u5d4c\u5957\u8def\u5f84\u5c06\u76f8\u540c\u7684\u9879\u5728\u4e00\u884c\u4e2d\u5f15\u5165\u4f5c\u7528\u57df\u3002 // --snip-- use std :: { cmp :: Ordering , io }; // --snip-- \u5728\u8f83\u5927\u7684\u7a0b\u5e8f\u4e2d\uff0c\u4f7f\u7528\u5d4c\u5957\u8def\u5f84\u4ece\u76f8\u540c\u5305\u6216\u6a21\u5757\u4e2d\u5f15\u5165\u5f88\u591a\u9879\uff0c\u53ef\u4ee5\u663e\u8457\u51cf\u5c11\u6240\u9700\u7684\u72ec\u7acb use \u8bed\u53e5\u7684\u6570\u91cf\uff01 \u53ef\u4ee5\u5728\u8def\u5f84\u7684\u4efb\u4f55\u5c42\u7ea7\u4f7f\u7528\u5d4c\u5957\u8def\u5f84\uff0c\u8fd9\u5728\u7ec4\u5408\u4e24\u4e2a\u5171\u4eab\u5b50\u8def\u5f84\u7684 use \u8bed\u53e5\u65f6\u975e\u5e38\u6709\u7528\u3002 use std :: io ; use std :: io :: Write ; \u4e3a: // \u540c\u65f6\u5f15\u5165\u4f5c\u7528\u57df\u3002 use std :: io :: { self , Write };","title":"\u5d4c\u5957\u8def\u5f84"},{"location":"packages/#glob","text":"\u5982\u679c\u5e0c\u671b\u5c06\u4e00\u4e2a\u8def\u5f84\u4e0b \u6240\u6709 \u516c\u6709\u9879\u5f15\u5165\u4f5c\u7528\u57df\uff0c\u53ef\u4ee5\u6307\u5b9a\u8def\u5f84\u540e\u8ddf * \uff0cglob \u8fd0\u7b97\u7b26\uff1a use std :: collections :: * ; // \u4f7f\u7528 glob \u8fd0\u7b97\u7b26\u65f6\u8bf7\u591a\u52a0\u5c0f\u5fc3\uff01 // Glob \u4f1a\u4f7f\u5f97\u6211\u4eec\u96be\u4ee5\u63a8\u5bfc\u4f5c\u7528\u57df\u4e2d\u6709\u4ec0\u4e48\u540d\u79f0\u548c\u5b83\u4eec\u662f\u5728\u4f55\u5904\u5b9a\u4e49\u7684\u3002 glob \u8fd0\u7b97\u7b26\u7ecf\u5e38\u7528\u4e8e\u6d4b\u8bd5\u6a21\u5757 tests \u4e2d\uff0c\u8fd9\u65f6\u4f1a\u5c06\u6240\u6709\u5185\u5bb9\u5f15\u5165\u4f5c\u7528\u57df\uff1b glob \u8fd0\u7b97\u7b26\u6709\u65f6\u4e5f\u7528\u4e8e prelude \u6a21\u5f0f\uff1b\u67e5\u770b \u6807\u51c6\u5e93\u4e2d\u7684\u6587\u6863 \u4e86\u89e3\u8fd9\u4e2a\u6a21\u5f0f\u7684\u66f4\u591a\u7ec6\u8282\u3002","title":"glob\u8fd0\u7b97\u7b26"},{"location":"packages/#_7","text":"\u5f53\u6a21\u5757\u53d8\u5f97\u66f4\u5927\u65f6\uff0c\u53ef\u80fd\u60f3\u8981\u5c06\u5b83\u4eec\u7684\u5b9a\u4e49\u79fb\u52a8\u5230\u5355\u72ec\u7684\u6587\u4ef6\u4e2d\uff0c\u4ece\u800c\u4f7f\u4ee3\u7801\u66f4\u5bb9\u6613\u9605\u8bfb\u3002 \u4f8b\u5982\uff0c\u5c06 front_of_house \u6a21\u5757\u79fb\u52a8\u5230\u5c5e\u4e8e\u5b83\u81ea\u5df1\u7684\u6587\u4ef6 src/front_of_house.rs \u4e2d\uff0c\u901a\u8fc7\u6539\u53d8 crate \u6839\u6587\u4ef6\uff0c\u4f7f\u5176\u5305\u542b\u793a\u4f8b\u7684\u4ee3\u7801\u3002 \u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0ccrate \u6839\u6587\u4ef6\u662f src/lib.rs \uff0c\u8fd9\u4e5f\u540c\u6837\u9002\u7528\u4e8e\u4ee5 src/main.rs \u4e3a crate \u6839\u6587\u4ef6\u7684\u4e8c\u8fdb\u5236 crate \u9879\u3002 // \u6587\u4ef6\u540d: src/lib.rs // \u58f0\u660e front_of_house \u6a21\u5757\uff0c\u5176\u5185\u5bb9\u5c06\u4f4d\u4e8e src/front_of_house.rs mod front_of_house ; pub use crate :: front_of_house :: hosting ; pub fn eat_at_restaurant () { hosting :: add_to_waitlist (); hosting :: add_to_waitlist (); hosting :: add_to_waitlist (); } src/front_of_house.rs \u4f1a\u83b7\u53d6 front_of_house \u6a21\u5757\u7684\u5b9a\u4e49\u5185\u5bb9 // \u6587\u4ef6\u540d: src/front_of_house.rs // \u5728 src/front_of_house.rs \u4e2d\u5b9a\u4e49 front_of_house \u6a21\u5757 pub mod hosting { pub fn add_to_waitlist () {} } \u5728 mod front_of_house \u540e\u4f7f\u7528 \u5206\u53f7 \uff0c\u800c\u4e0d\u662f \u4ee3\u7801\u5757 \uff0c\u8fd9\u5c06\u544a\u8bc9 Rust \u5728\u53e6\u4e00\u4e2a\u4e0e\u6a21\u5757\u540c\u540d\u7684\u6587\u4ef6\u4e2d\u52a0\u8f7d\u6a21\u5757\u7684\u5185\u5bb9\u3002 \u7ee7\u7eed\u91cd\u6784\u4f8b\u5b50\uff0c\u5c06 hosting \u6a21\u5757\u4e5f\u63d0\u53d6\u5230\u5176\u81ea\u5df1\u7684\u6587\u4ef6\u4e2d\uff0c\u4ec5\u5bf9 src/front_of_house.rs \u5305\u542b hosting \u6a21\u5757\u7684\u58f0\u660e\u8fdb\u884c\u4fee\u6539\uff1a // \u6587\u4ef6\u540d: src/front_of_house.rs pub mod hosting ; \u63a5\u7740\u6211\u4eec\u521b\u5efa\u4e00\u4e2a src/front_of_house \u76ee\u5f55\u548c\u4e00\u4e2a\u5305\u542b hosting \u6a21\u5757\u5b9a\u4e49\u7684 src/front_of_house/hosting.rs \u6587\u4ef6\uff1a // \u6587\u4ef6\u540d: src/front_of_house/hosting.rs pub fn add_to_waitlist () {} \u6a21\u5757\u6811\u4f9d\u7136\u4fdd\u6301\u76f8\u540c\uff0c eat_at_restaurant \u4e2d\u7684\u51fd\u6570\u8c03\u7528\u4e5f\u65e0\u9700\u4fee\u6539\u7ee7\u7eed\u4fdd\u6301\u6709\u6548\uff0c\u5373\u4fbf\u5176\u5b9a\u4e49\u5b58\u5728\u4e8e\u4e0d\u540c\u7684\u6587\u4ef6\u4e2d\u3002 \u8fd9\u4e2a\u6280\u5de7\u53ef\u4ee5\u5728\u6a21\u5757\u4ee3\u7801\u589e\u957f\u65f6\uff0c\u5c06\u5b83\u4eec\u79fb\u52a8\u5230\u65b0\u6587\u4ef6\u4e2d\u3002 \u6ce8\u610f\uff0c src/lib.rs \u4e2d\u7684 pub use crate::front_of_house::hosting \u8bed\u53e5\u662f\u6ca1\u6709\u6539\u53d8\u7684\uff0c\u5728\u6587\u4ef6\u4f5c\u4e3a crate \u7684\u4e00\u90e8\u5206\u800c\u7f16\u8bd1\u65f6\uff0c use \u4e0d\u4f1a\u6709\u4efb\u4f55\u5f71\u54cd\u3002 mod \u5173\u952e\u5b57\u58f0\u660e\u4e86\u6a21\u5757\uff0cRust \u4f1a\u5728\u4e0e\u6a21\u5757\u540c\u540d\u7684\u6587\u4ef6\u4e2d\u67e5\u627e\u6a21\u5757\u7684\u4ee3\u7801\u3002","title":"\u6a21\u5757\u62c6\u5206"},{"location":"packages/#_8","text":"Rust \u63d0\u4f9b\u4e86\u5c06\u5305\u5206\u6210\u591a\u4e2a crate \uff0c\u5c06 crate \u5206\u6210\u6a21\u5757\uff0c\u4ee5\u53ca\u901a\u8fc7\u6307\u5b9a\u7edd\u5bf9\u6216\u76f8\u5bf9\u8def\u5f84\u4ece\u4e00\u4e2a\u6a21\u5757\u5f15\u7528\u53e6\u4e00\u4e2a\u6a21\u5757\u4e2d\u5b9a\u4e49\u7684\u9879\u7684\u65b9\u5f0f\u3002 \u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528 use \u8bed\u53e5\u5c06\u8def\u5f84\u5f15\u5165\u4f5c\u7528\u57df\uff0c\u8fd9\u6837\u5728\u591a\u6b21\u4f7f\u7528\u65f6\u53ef\u4ee5\u4f7f\u7528\u66f4\u77ed\u7684\u8def\u5f84\u3002 \u6a21\u5757\u5b9a\u4e49\u7684\u4ee3\u7801\u9ed8\u8ba4\u662f\u79c1\u6709\u7684\uff0c\u4e0d\u8fc7\u53ef\u4ee5\u9009\u62e9\u589e\u52a0 pub \u5173\u952e\u5b57\u4f7f\u5176\u5b9a\u4e49\u53d8\u4e3a\u516c\u6709\u3002","title":"\u603b\u7ed3"},{"location":"smart-pointers/","text":"\u667a\u80fd\u6307\u9488 ch15-00-smart-pointers.md commit 1fedfc4b96c2017f64ecfcf41a0a07e2e815f24f \u7b80\u4ecb \u6307\u9488 \uff08 pointer \uff09\u662f\u4e00\u4e2a\u5305\u542b\u5185\u5b58\u5730\u5740\u7684\u53d8\u91cf\u7684\u901a\u7528\u6982\u5ff5\u3002\u8fd9\u4e2a\u5730\u5740\u5f15\u7528\uff0c\u6216 \u201c\u6307\u5411\u201d\uff08points at\uff09\u4e00\u4e9b\u5176\u4ed6\u6570\u636e\u3002 Rust \u4e2d\u6700\u5e38\u89c1\u7684\u6307\u9488\u662f\u7b2c\u56db\u7ae0\u4ecb\u7ecd\u7684 \u5f15\u7528 \uff08 reference \uff09\u3002 \u5f15\u7528\u4ee5 & \u7b26\u53f7\u4e3a\u6807\u5fd7\u5e76\u501f\u7528\u4e86\u4ed6\u4eec\u6240\u6307\u5411\u7684\u503c\u3002 \u9664\u4e86\u5f15\u7528\u6570\u636e\u6ca1\u6709\u4efb\u4f55\u5176\u4ed6\u7279\u6b8a\u529f\u80fd\u3002 \u5b83\u4eec\u4e5f\u6ca1\u6709\u4efb\u4f55\u989d\u5916\u5f00\u9500\uff0c\u6240\u4ee5\u5e94\u7528\u5f97\u6700\u591a\u3002 \u53e6\u4e00\u65b9\u9762\uff0c \u667a\u80fd\u6307\u9488 \uff08 smart pointers \uff09\u662f\u4e00\u7c7b \u6570\u636e\u7ed3\u6784 \uff0c\u4ed6\u4eec\u7684\u8868\u73b0\u7c7b\u4f3c\u6307\u9488\uff0c\u4f46\u662f\u4e5f\u62e5\u6709\u989d\u5916\u7684\u5143\u6570\u636e\u548c\u529f\u80fd\u3002 \u667a\u80fd\u6307\u9488\u7684\u6982\u5ff5\u5e76\u4e0d\u4e3a Rust \u6240\u72ec\u6709\uff1b\u5176\u8d77\u6e90\u4e8e C++ \u5e76\u5b58\u5728\u4e8e\u5176\u4ed6\u8bed\u8a00\u4e2d\u3002 Rust \u6807\u51c6\u5e93\u4e2d\u4e0d\u540c\u7684\u667a\u80fd\u6307\u9488\u63d0\u4f9b\u4e86\u591a\u4e8e\u5f15\u7528\u7684\u989d\u5916\u529f\u80fd\u3002 \u672c\u7ae0\u5c06\u4f1a\u63a2\u7d22\u7684\u4e00\u4e2a\u4f8b\u5b50\u4fbf\u662f \u5f15\u7528\u8ba1\u6570 \uff08 reference counting \uff09 \u667a\u80fd\u6307\u9488\u7c7b\u578b\uff0c\u5176\u5141\u8bb8\u6570\u636e\u6709\u591a\u4e2a\u6240\u6709\u8005\u3002\u5f15\u7528\u8ba1\u6570\u667a\u80fd\u6307\u9488\u8bb0\u5f55\u603b\u5171\u6709\u591a\u5c11\u4e2a\u6240\u6709\u8005\uff0c\u5e76\u5f53\u6ca1\u6709\u4efb\u4f55\u6240\u6709\u8005\u65f6\u8d1f\u8d23\u6e05\u7406\u6570\u636e\u3002 \u5728 Rust \u4e2d\uff0c\u666e\u901a\u5f15\u7528\u548c\u667a\u80fd\u6307\u9488\u7684\u4e00\u4e2a\u989d\u5916\u7684 \u533a\u522b \u662f\u5f15\u7528\u662f\u4e00\u7c7b\u53ea\u501f\u7528\u6570\u636e\u7684\u6307\u9488\uff1b\u76f8\u53cd\uff0c\u5728\u5927\u90e8\u5206\u60c5\u51b5\u4e0b\uff0c\u667a\u80fd\u6307\u9488 \u62e5\u6709 \u4ed6\u4eec\u6307\u5411\u7684\u6570\u636e\u3002 \u5b9e\u9645\u4e0a\u672c\u4e66\u4e2d\u5df2\u7ecf\u51fa\u73b0\u8fc7\u4e00\u4e9b\u667a\u80fd\u6307\u9488\uff0c\u6bd4\u5982\u7b2c\u516b\u7ae0\u7684 String \u548c Vec<T> \uff0c\u867d\u7136\u5f53\u65f6\u6211\u4eec\u5e76\u4e0d\u8fd9\u4e48\u79f0\u547c\u5b83\u4eec\u3002\u8fd9\u4e9b\u7c7b\u578b\u90fd\u5c5e\u4e8e\u667a\u80fd\u6307\u9488\u56e0\u4e3a\u5b83\u4eec\u62e5\u6709\u4e00\u4e9b\u6570\u636e\u5e76\u5141\u8bb8\u4f60\u4fee\u6539\u5b83\u4eec\u3002\u5b83\u4eec\u4e5f\u5e26\u6709\u5143\u6570\u636e\uff08\u6bd4\u5982\u4ed6\u4eec\u7684\u5bb9\u91cf\uff09\u548c\u989d\u5916\u7684\u529f\u80fd\u6216\u4fdd\u8bc1\uff08 String \u7684\u6570\u636e\u603b\u662f\u6709\u6548\u7684 UTF-8 \u7f16\u7801\uff09\u3002 \u667a\u80fd\u6307\u9488\u901a\u5e38\u4f7f\u7528\u7ed3\u6784\u4f53\u5b9e\u73b0\u3002 \u667a\u80fd\u6307\u9488\u533a\u522b\u4e8e\u5e38\u89c4\u7ed3\u6784\u4f53\u7684\u663e\u8457\u7279\u6027\u5728\u4e8e\u5176\u5b9e\u73b0\u4e86 Deref \u548c Drop trait\u3002 Deref trait \u5141\u8bb8\u667a\u80fd\u6307\u9488\u7ed3\u6784\u4f53\u5b9e\u4f8b\u8868\u73b0\u7684\u50cf\u5f15\u7528\u4e00\u6837\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u7f16\u5199\u65e2\u7528\u4e8e\u5f15\u7528\u3001\u53c8\u7528\u4e8e\u667a\u80fd\u6307\u9488\u7684\u4ee3\u7801\u3002 Drop trait \u5141\u8bb8\u6211\u4eec\u81ea\u5b9a\u4e49\u5f53\u667a\u80fd\u6307\u9488\u79bb\u5f00\u4f5c\u7528\u57df\u65f6\u8fd0\u884c\u7684\u4ee3\u7801\u3002 \u672c\u7ae0\u4f1a\u8ba8\u8bba\u8fd9\u4e9b trait \u4ee5\u53ca\u4e3a\u4ec0\u4e48 \u5bf9\u4e8e\u667a\u80fd\u6307\u9488\u6765\u8bf4\u4ed6\u4eec\u5f88\u91cd\u8981\u3002 \u8003\u8651\u5230\u667a\u80fd\u6307\u9488\u662f\u4e00\u4e2a\u5728 Rust \u7ecf\u5e38\u88ab\u4f7f\u7528\u7684\u901a\u7528\u8bbe\u8ba1\u6a21\u5f0f\uff0c\u672c\u7ae0\u5e76\u4e0d\u4f1a\u8986\u76d6\u6240\u6709\u73b0\u5b58\u7684\u667a\u80fd\u6307\u9488\u3002\u5f88\u591a\u5e93\u90fd\u6709\u81ea\u5df1\u7684\u667a\u80fd\u6307\u9488\u800c\u4f60\u4e5f\u53ef\u4ee5\u7f16\u5199\u5c5e\u4e8e\u4f60\u81ea\u5df1\u7684\u667a\u80fd\u6307\u9488\u3002\u8fd9\u91cc\u5c06\u4f1a\u8bb2\u5230\u7684\u662f\u6765\u81ea\u6807\u51c6\u5e93\u4e2d\u6700\u5e38\u7528\u7684\u4e00\u4e9b\uff1a Box<T> \uff0c\u7528\u4e8e\u5728\u5806\u4e0a\u5206\u914d\u503c\u3002 Rc<T> \uff0c\u4e00\u4e2a\u5f15\u7528\u8ba1\u6570\u7c7b\u578b\uff0c\u5176\u6570\u636e\u53ef\u4ee5\u6709\u591a\u4e2a\u6240\u6709\u8005\u3002 Ref<T> \u548c RefMut<T> \uff0c\u901a\u8fc7 RefCell<T> \u8bbf\u95ee\u3002\uff08 RefCell<T> \u662f\u4e00\u4e2a\u5728\u8fd0\u884c\u65f6\u800c\u4e0d\u662f\u5728\u7f16\u8bd1\u65f6\u6267\u884c\u501f\u7528\u89c4\u5219\u7684\u7c7b\u578b\uff09\u3002 \u53e6\u5916\u6211\u4eec\u4f1a\u6d89\u53ca \u5185\u90e8\u53ef\u53d8\u6027 \uff08 interior mutability \uff09\u6a21\u5f0f\uff0c\u8fd9\u662f\u4e0d\u53ef\u53d8\u7c7b\u578b\u66b4\u9732\u51fa\u6539\u53d8\u5176\u5185\u90e8\u503c\u7684 API\u3002 \u6211\u4eec\u4e5f\u4f1a\u8ba8\u8bba \u5f15\u7528\u5faa\u73af \uff08 reference cycles \uff09\u4f1a\u5982\u4f55\u6cc4\u6f0f\u5185\u5b58\uff0c\u4ee5\u53ca\u5982\u4f55\u907f\u514d\u3002 \u8ba9\u6211\u4eec\u5f00\u59cb\u5427\uff01 \u4f7f\u7528 Box<T> \u6307\u5411\u5806\u4e0a\u7684\u6570\u636e ch15-01-box.md commit 359895c6b2e440275a663ee1a3c17e6a94fdc62b \u6700\u7b80\u5355\u76f4\u63a5\u7684\u667a\u80fd\u6307\u9488\u662f box \uff0c\u5176\u7c7b\u578b\u662f Box<T> \u3002 box \u5141\u8bb8\u4f60\u5c06\u4e00\u4e2a\u503c\u653e\u5728\u5806\u4e0a\u800c\u4e0d\u662f\u6808\u4e0a\u3002\u7559\u5728\u6808\u4e0a\u7684\u5219\u662f\u6307\u5411\u5806\u6570\u636e\u7684\u6307\u9488\u3002 \u5982\u679c\u4f60\u60f3\u56de\u987e\u4e00\u4e0b\u6808\u4e0e\u5806\u7684\u533a\u522b\u8bf7\u53c2\u8003\u7b2c\u56db\u7ae0\u3002 \u9664\u4e86\u6570\u636e\u88ab\u50a8\u5b58\u5728\u5806\u4e0a\u800c\u4e0d\u662f\u6808\u4e0a\u4e4b\u5916\uff0cbox \u6ca1\u6709\u6027\u80fd\u635f\u5931 \u3002\u4e0d\u8fc7\u4e5f\u6ca1\u6709\u5f88\u591a\u989d\u5916\u7684\u529f\u80fd\u3002\u5b83\u4eec\u591a\u7528\u4e8e\u5982\u4e0b\u573a\u666f\uff1a \u5f53\u6709\u4e00\u4e2a\u5728\u7f16\u8bd1\u65f6\u672a\u77e5\u5927\u5c0f\u7684\u7c7b\u578b\uff0c\u800c\u53c8\u60f3\u8981\u5728\u9700\u8981\u786e\u5207\u5927\u5c0f\u7684\u4e0a\u4e0b\u6587\u4e2d\u4f7f\u7528\u8fd9\u4e2a\u7c7b\u578b\u503c\u7684\u65f6\u5019 \u5f53\u6709\u5927\u91cf\u6570\u636e\u5e76\u5e0c\u671b\u5728\u786e\u4fdd\u6570\u636e\u4e0d\u88ab\u62f7\u8d1d\u7684\u60c5\u51b5\u4e0b\u8f6c\u79fb\u6240\u6709\u6743\u7684\u65f6\u5019 \u5f53\u5e0c\u671b\u62e5\u6709\u4e00\u4e2a\u503c\u5e76\u53ea\u5173\u5fc3\u5b83\u7684\u7c7b\u578b\u662f\u5426\u5b9e\u73b0\u4e86\u7279\u5b9a trait \u800c\u4e0d\u662f\u5176\u5177\u4f53\u7c7b\u578b\u7684\u65f6\u5019 \u6211\u4eec\u4f1a\u5728 \u201cbox \u5141\u8bb8\u521b\u5efa\u9012\u5f52\u7c7b\u578b\u201d \u90e8\u5206\u5c55\u793a\u7b2c\u4e00\u79cd\u573a\u666f\u3002\u5728\u7b2c\u4e8c\u79cd\u60c5\u51b5\u4e2d\uff0c\u8f6c\u79fb\u5927\u91cf\u6570\u636e\u7684\u6240\u6709\u6743\u53ef\u80fd\u4f1a\u82b1\u8d39\u5f88\u957f\u7684\u65f6\u95f4\uff0c\u56e0\u4e3a\u6570\u636e\u5728\u6808\u4e0a\u8fdb\u884c\u4e86\u62f7\u8d1d\u3002\u4e3a\u4e86\u6539\u5584\u8fd9\u79cd\u60c5\u51b5\u4e0b\u7684\u6027\u80fd\uff0c\u53ef\u4ee5\u901a\u8fc7 box \u5c06\u8fd9\u4e9b\u6570\u636e\u50a8\u5b58\u5728\u5806\u4e0a\u3002\u63a5\u7740\uff0c\u53ea\u6709\u5c11\u91cf\u7684\u6307\u9488\u6570\u636e\u5728\u6808\u4e0a\u88ab\u62f7\u8d1d\u3002\u7b2c\u4e09\u79cd\u60c5\u51b5\u88ab\u79f0\u4e3a trait \u5bf9\u8c61 \uff08 trait object \uff09\uff0c\u7b2c\u5341\u4e03\u7ae0\u521a\u597d\u6709\u4e00\u6574\u4e2a\u90e8\u5206 \u201c\u987e\u53ca\u4e0d\u540c\u7c7b\u578b\u503c\u7684 trait \u5bf9\u8c61\u201d \u4e13\u95e8\u8bb2\u89e3\u8fd9\u4e2a\u4e3b\u9898\u3002\u6240\u4ee5\u8fd9\u91cc\u6240\u5b66\u7684\u5185\u5bb9\u4f1a\u5728\u7b2c\u5341\u4e03\u7ae0\u518d\u6b21\u7528\u4e0a\uff01 \u4f7f\u7528 Box<T> \u5728\u5806\u4e0a\u50a8\u5b58\u6570\u636e \u5728\u8ba8\u8bba Box<T> \u7684\u7528\u4f8b\u4e4b\u524d\uff0c\u8ba9\u6211\u4eec\u719f\u6089\u4e00\u4e0b\u8bed\u6cd5\u4ee5\u53ca\u5982\u4f55\u4e0e\u50a8\u5b58\u5728 Box<T> \u4e2d\u7684\u503c\u8fdb\u884c\u4ea4\u4e92\u3002 \u793a\u4f8b 15-1 \u5c55\u793a\u4e86\u5982\u4f55\u4f7f\u7528 box \u5728\u5806\u4e0a\u50a8\u5b58\u4e00\u4e2a i32 \uff1a \u6587\u4ef6\u540d: src/main.rs fn main () { let b = Box :: new ( 5 ); // \u5176\u503c\u662f\u4e00\u4e2a\u6307\u5411\u88ab\u5206\u914d\u5728\u5806\u4e0a\u7684\u503c 5 \u7684 Box println! ( \"b = {}\" , b ); // \u6253\u5370\u51fa `b = 5`\uff1b } \u793a\u4f8b 15-1\uff1a\u4f7f\u7528 box \u5728\u5806\u4e0a\u50a8\u5b58\u4e00\u4e2a i32 \u503c \u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u50cf\u6570\u636e\u662f\u50a8\u5b58\u5728\u6808\u4e0a\u7684\u90a3\u6837\u8bbf\u95ee box \u4e2d\u7684\u6570\u636e\u3002\u6b63\u5982\u4efb\u4f55\u62e5\u6709\u6570\u636e\u6240\u6709\u6743\u7684\u503c\u90a3\u6837\uff0c\u5f53\u50cf b \u8fd9\u6837\u7684 box \u5728 main \u7684\u672b\u5c3e\u79bb\u5f00\u4f5c\u7528\u57df\u65f6\uff0c\u5b83\u5c06\u88ab\u91ca\u653e\u3002 \u8fd9\u4e2a\u91ca\u653e\u8fc7\u7a0b\u4f5c\u7528\u4e8e box \u672c\u8eab\uff08\u4f4d\u4e8e\u6808\u4e0a\uff09\u548c\u5b83\u6240\u6307\u5411\u7684\u6570\u636e\uff08\u4f4d\u4e8e\u5806\u4e0a\uff09\u3002 \u5c06\u4e00\u4e2a\u5355\u72ec\u7684\u503c\u5b58\u653e\u5728\u5806\u4e0a\u5e76\u4e0d\u662f\u5f88\u6709\u610f\u4e49\uff0c\u6240\u4ee5\u50cf\u793a\u4f8b 15-1 \u8fd9\u6837\u5355\u72ec\u4f7f\u7528 box \u5e76\u4e0d\u5e38\u89c1\u3002\u5c06\u50cf\u5355\u4e2a i32 \u8fd9\u6837\u7684\u503c\u50a8\u5b58\u5728\u6808\u4e0a\uff0c\u4e5f\u5c31\u662f\u5176\u9ed8\u8ba4\u5b58\u653e\u7684\u5730\u65b9\u5728\u5927\u90e8\u5206\u4f7f\u7528\u573a\u666f\u4e2d\u66f4\u4e3a\u5408\u9002\u3002\u8ba9\u6211\u4eec\u770b\u770b\u4e00\u4e2a\u4e0d\u4f7f\u7528 box \u65f6\u65e0\u6cd5\u5b9a\u4e49\u7684\u7c7b\u578b\u7684\u4f8b\u5b50\u3002 Box \u5141\u8bb8\u521b\u5efa\u9012\u5f52\u7c7b\u578b Rust \u9700\u8981\u5728\u7f16\u8bd1\u65f6\u77e5\u9053\u7c7b\u578b\u5360\u7528\u591a\u5c11\u7a7a\u95f4\u3002\u4e00\u79cd\u65e0\u6cd5\u5728\u7f16\u8bd1\u65f6\u77e5\u9053\u5927\u5c0f\u7684\u7c7b\u578b\u662f \u9012\u5f52\u7c7b\u578b \uff08 recursive type \uff09\uff0c\u5176\u503c\u7684\u4e00\u90e8\u5206\u53ef\u4ee5\u662f\u76f8\u540c\u7c7b\u578b\u7684\u53e6\u4e00\u4e2a\u503c\u3002\u8fd9\u79cd\u503c\u7684\u5d4c\u5957\u7406\u8bba\u4e0a\u53ef\u4ee5\u65e0\u9650\u7684\u8fdb\u884c\u4e0b\u53bb\uff0c\u6240\u4ee5 Rust \u4e0d\u77e5\u9053\u9012\u5f52\u7c7b\u578b\u9700\u8981\u591a\u5c11\u7a7a\u95f4\u3002\u4e0d\u8fc7 box \u6709\u4e00\u4e2a\u5df2\u77e5\u7684\u5927\u5c0f\uff0c\u6240\u4ee5\u901a\u8fc7\u5728\u5faa\u73af\u7c7b\u578b\u5b9a\u4e49\u4e2d\u63d2\u5165 box\uff0c\u5c31\u53ef\u4ee5\u521b\u5efa\u9012\u5f52\u7c7b\u578b\u4e86\u3002 \u8ba9\u6211\u4eec\u63a2\u7d22\u4e00\u4e0b cons list \uff0c\u4e00\u4e2a\u51fd\u6570\u5f0f\u7f16\u7a0b\u8bed\u8a00\u4e2d\u7684\u5e38\u89c1\u7c7b\u578b\uff0c\u6765\u5c55\u793a\u8fd9\u4e2a\uff08\u9012\u5f52\u7c7b\u578b\uff09\u6982\u5ff5\u3002\u9664\u4e86\u9012\u5f52\u4e4b\u5916\uff0c\u6211\u4eec\u5c06\u8981\u5b9a\u4e49\u7684 cons list \u7c7b\u578b\u662f\u5f88\u76f4\u767d\u7684\uff0c\u6240\u4ee5\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\u7684\u6982\u5ff5\uff0c\u5728\u4efb\u4f55\u9047\u5230\u66f4\u4e3a\u590d\u6742\u7684\u6d89\u53ca\u5230\u9012\u5f52\u7c7b\u578b\u7684\u573a\u666f\u65f6\u90fd\u5f88\u5b9e\u7528\u3002 cons list \u7684\u66f4\u591a\u5185\u5bb9 cons list \u662f\u4e00\u4e2a\u6765\u6e90\u4e8e Lisp \u7f16\u7a0b\u8bed\u8a00\u53ca\u5176\u65b9\u8a00\u7684\u6570\u636e\u7ed3\u6784\u3002\u5728 Lisp \u4e2d\uff0c cons \u51fd\u6570\uff08\u201cconstruct function\" \u7684\u7f29\u5199\uff09\u5229\u7528\u4e24\u4e2a\u53c2\u6570\u6765\u6784\u9020\u4e00\u4e2a\u65b0\u7684\u5217\u8868\uff0c\u4ed6\u4eec\u901a\u5e38\u662f\u4e00\u4e2a\u5355\u72ec\u7684\u503c\u548c\u53e6\u4e00\u4e2a\u5217\u8868\u3002 cons \u51fd\u6570\u7684\u6982\u5ff5\u6d89\u53ca\u5230\u66f4\u5e38\u89c1\u7684\u51fd\u6570\u5f0f\u7f16\u7a0b\u672f\u8bed\uff1b\u201c\u5c06 x \u4e0e y \u8fde\u63a5\u201d \u901a\u5e38\u610f\u5473\u7740\u6784\u5efa\u4e00\u4e2a\u65b0\u7684\u5bb9\u5668\u800c\u5c06 x \u7684\u5143\u7d20\u653e\u5728\u65b0\u5bb9\u5668\u7684\u5f00\u5934\uff0c\u5176\u540e\u5219\u662f\u5bb9\u5668 y \u7684\u5143\u7d20\u3002 cons list \u7684\u6bcf\u4e00\u9879\u90fd\u5305\u542b\u4e24\u4e2a\u5143\u7d20\uff1a\u5f53\u524d\u9879\u7684\u503c\u548c\u4e0b\u4e00\u9879\u3002\u5176\u6700\u540e\u4e00\u9879\u503c\u5305\u542b\u4e00\u4e2a\u53eb\u505a Nil \u7684\u503c\u4e14\u6ca1\u6709\u4e0b\u4e00\u9879\u3002cons list \u901a\u8fc7\u9012\u5f52\u8c03\u7528 cons \u51fd\u6570\u4ea7\u751f\u3002\u4ee3\u8868\u9012\u5f52\u7684\u7ec8\u6b62\u6761\u4ef6\uff08base case\uff09\u7684\u89c4\u8303\u540d\u79f0\u662f Nil \uff0c\u5b83\u5ba3\u5e03\u5217\u8868\u7684\u7ec8\u6b62\u3002\u6ce8\u610f\u8fd9\u4e0d\u540c\u4e8e\u7b2c\u516d\u7ae0\u4e2d\u7684 \u201cnull\u201d \u6216 \u201cnil\u201d \u7684\u6982\u5ff5\uff0c\u4ed6\u4eec\u4ee3\u8868\u65e0\u6548\u6216\u7f3a\u5931\u7684\u503c\u3002 \u6ce8\u610f\u867d\u7136\u51fd\u6570\u5f0f\u7f16\u7a0b\u8bed\u8a00\u7ecf\u5e38\u4f7f\u7528 cons list\uff0c\u4f46\u662f\u5b83\u5e76\u4e0d\u662f\u4e00\u4e2a Rust \u4e2d\u5e38\u89c1\u7684\u7c7b\u578b\u3002\u5927\u90e8\u5206\u5728 Rust \u4e2d\u9700\u8981\u5217\u8868\u7684\u65f6\u5019\uff0c Vec<T> \u662f\u4e00\u4e2a\u66f4\u597d\u7684\u9009\u62e9\u3002\u5176\u4ed6\u66f4\u4e3a\u590d\u6742\u7684\u9012\u5f52\u6570\u636e\u7c7b\u578b \u786e\u5b9e \u5728 Rust \u7684\u5f88\u591a\u573a\u666f\u4e2d\u5f88\u6709\u7528\uff0c\u4e0d\u8fc7\u901a\u8fc7\u4ee5 cons list \u4f5c\u4e3a\u5f00\u59cb\uff0c\u6211\u4eec\u53ef\u4ee5\u63a2\u7d22\u5982\u4f55\u4f7f\u7528 box \u6beb\u4e0d\u8d39\u529b\u7684\u5b9a\u4e49\u4e00\u4e2a\u9012\u5f52\u6570\u636e\u7c7b\u578b\u3002 \u793a\u4f8b 15-2 \u5305\u542b\u4e00\u4e2a cons list \u7684\u679a\u4e3e\u5b9a\u4e49\u3002\u6ce8\u610f\u8fd9\u8fd8\u4e0d\u80fd\u7f16\u8bd1\u56e0\u4e3a\u8fd9\u4e2a\u7c7b\u578b\u6ca1\u6709\u5df2\u77e5\u7684\u5927\u5c0f\uff0c\u4e4b\u540e\u6211\u4eec\u4f1a\u5c55\u793a\uff1a \u6587\u4ef6\u540d: src/main.rs enum List { Cons ( i32 , List ), Nil , } \u793a\u4f8b 15-2\uff1a\u7b2c\u4e00\u6b21\u5c1d\u8bd5\u5b9a\u4e49\u4e00\u4e2a\u4ee3\u8868 i32 \u503c\u7684 cons list \u6570\u636e\u7ed3\u6784\u7684\u679a\u4e3e \u6ce8\u610f\uff1a\u51fa\u4e8e\u793a\u4f8b\u7684\u9700\u8981\u6211\u4eec\u9009\u62e9\u5b9e\u73b0\u4e00\u4e2a\u53ea\u5b58\u653e i32 \u503c\u7684 cons list\u3002\u4e5f\u53ef\u4ee5\u7528\u6cdb\u578b\uff0c\u6b63\u5982\u7b2c\u5341\u7ae0\u8bb2\u5230\u7684\uff0c\u6765\u5b9a\u4e49\u4e00\u4e2a\u53ef\u4ee5\u5b58\u653e\u4efb\u4f55\u7c7b\u578b\u503c\u7684 cons list \u7c7b\u578b\u3002 \u4f7f\u7528\u8fd9\u4e2a cons list \u6765\u50a8\u5b58\u5217\u8868 1, 2, 3 \u5c06\u770b\u8d77\u6765\u5982\u793a\u4f8b 15-3 \u6240\u793a\uff1a \u6587\u4ef6\u540d: src/main.rs use crate :: List :: { Cons , Nil }; fn main () { let list = Cons ( 1 , Cons ( 2 , Cons ( 3 , Nil ))); } \u793a\u4f8b 15-3\uff1a\u4f7f\u7528 List \u679a\u4e3e\u50a8\u5b58\u5217\u8868 1, 2, 3 \u7b2c\u4e00\u4e2a Cons \u50a8\u5b58\u4e86 1 \u548c\u53e6\u4e00\u4e2a List \u503c\u3002\u8fd9\u4e2a List \u662f\u53e6\u4e00\u4e2a\u5305\u542b 2 \u7684 Cons \u503c\u548c\u4e0b\u4e00\u4e2a List \u503c\u3002 \u63a5\u7740\u53c8\u6709\u53e6\u4e00\u4e2a\u5b58\u653e\u4e86 3 \u7684 Cons \u503c\u548c\u6700\u540e\u4e00\u4e2a\u503c\u4e3a Nil \u7684 List \uff0c\u975e\u9012\u5f52\u6210\u5458\u4ee3\u8868\u4e86\u5217\u8868\u7684\u7ed3\u5c3e\u3002 \u5982\u679c\u5c1d\u8bd5\u7f16\u8bd1\u793a\u4f8b 15-3 \u7684\u4ee3\u7801\uff0c\u4f1a\u5f97\u5230\u5982\u793a\u4f8b 15-4 \u6240\u793a\u7684\u9519\u8bef\uff1a $ cargo run Compiling cons-list v0.1.0 (file:///projects/cons-list) error[E0072]: recursive type `List` has infinite size --> src/main.rs:1:1 | 1 | enum List { | ^^^^^^^^^ recursive type has infinite size 2 | Cons(i32, List), | ---- recursive without indirection | help: insert some indirection (e.g., a `Box`, `Rc`, or `&`) to make `List` representable | 2 | Cons(i32, Box<List>), | ++++ + error[E0391]: cycle detected when computing drop-check constraints for `List` --> src/main.rs:1:1 | 1 | enum List { | ^^^^^^^^^ | = note: ...which immediately requires computing drop-check constraints for `List` again = note: cycle used when computing dropck types for `Canonical { max_universe: U0, variables: [], value: ParamEnvAnd { param_env: ParamEnv { caller_bounds: [], reveal: UserFacing }, value: List } }` Some errors have detailed explanations: E0072, E0391. For more information about an error, try `rustc --explain E0072`. error: could not compile `cons-list` due to 2 previous errors \u793a\u4f8b 15-4\uff1a\u5c1d\u8bd5\u5b9a\u4e49\u4e00\u4e2a\u9012\u5f52\u679a\u4e3e\u65f6\u5f97\u5230\u7684\u9519\u8bef \u8fd9\u4e2a\u9519\u8bef\u8868\u660e\u8fd9\u4e2a\u7c7b\u578b \u201c\u6709\u65e0\u9650\u7684\u5927\u5c0f\u201d\u3002\u5176\u539f\u56e0\u662f List \u7684\u4e00\u4e2a\u6210\u5458\u88ab\u5b9a\u4e49\u4e3a\u662f \u9012\u5f52\u7684 \uff1a\u5b83\u76f4\u63a5\u5b58\u653e\u4e86\u53e6\u4e00\u4e2a\u76f8\u540c\u7c7b\u578b\u7684\u503c\u3002\u8fd9\u610f\u5473\u7740 Rust \u65e0\u6cd5\u8ba1\u7b97\u4e3a\u4e86\u5b58\u653e List \u503c\u5230\u5e95\u9700\u8981\u591a\u5c11\u7a7a\u95f4\u3002\u8ba9\u6211\u4eec\u4e00\u70b9\u4e00\u70b9\u6765\u770b\uff1a\u9996\u5148\u4e86\u89e3\u4e00\u4e0b Rust \u5982\u4f55\u51b3\u5b9a\u9700\u8981\u591a\u5c11\u7a7a\u95f4\u6765\u5b58\u653e\u4e00\u4e2a\u975e\u9012\u5f52\u7c7b\u578b\u3002 \u8ba1\u7b97\u975e\u9012\u5f52\u7c7b\u578b\u7684\u5927\u5c0f \u56de\u5fc6\u4e00\u4e0b\u7b2c\u516d\u7ae0\u8ba8\u8bba\u679a\u4e3e\u5b9a\u4e49\u65f6\u793a\u4f8b 6-2 \u4e2d\u5b9a\u4e49\u7684 Message \u679a\u4e3e\uff1a enum Message { Quit , Move { x : i32 , y : i32 }, Write ( String ), ChangeColor ( i32 , i32 , i32 ), } \u5f53 Rust \u9700\u8981\u77e5\u9053\u8981\u4e3a Message \u503c\u5206\u914d\u591a\u5c11\u7a7a\u95f4\u65f6\uff0c\u5b83\u53ef\u4ee5\u68c0\u67e5\u6bcf\u4e00\u4e2a\u6210\u5458\u5e76\u53d1\u73b0 Message::Quit \u5e76\u4e0d\u9700\u8981\u4efb\u4f55\u7a7a\u95f4\uff0c Message::Move \u9700\u8981\u8db3\u591f\u50a8\u5b58\u4e24\u4e2a i32 \u503c\u7684\u7a7a\u95f4\uff0c\u4f9d\u6b64\u7c7b\u63a8\u3002\u56e0\u4e3a enum \u5b9e\u9645\u4e0a\u53ea\u4f1a\u4f7f\u7528\u5176\u4e2d\u7684\u4e00\u4e2a\u6210\u5458\uff0c\u6240\u4ee5 Message \u503c\u6240\u9700\u7684\u7a7a\u95f4\u7b49\u4e8e\u50a8\u5b58\u5176\u6700\u5927\u6210\u5458\u7684\u7a7a\u95f4\u5927\u5c0f\u3002 \u4e0e\u6b64\u76f8\u5bf9\u5f53 Rust \u7f16\u8bd1\u5668\u68c0\u67e5\u50cf\u793a\u4f8b 15-2 \u4e2d\u7684 List \u8fd9\u6837\u7684\u9012\u5f52\u7c7b\u578b\u65f6\u4f1a\u53d1\u751f\u4ec0\u4e48\u5462\u3002\u7f16\u8bd1\u5668\u5c1d\u8bd5\u8ba1\u7b97\u51fa\u50a8\u5b58\u4e00\u4e2a List \u679a\u4e3e\u9700\u8981\u591a\u5c11\u5185\u5b58\uff0c\u5e76\u5f00\u59cb\u68c0\u67e5 Cons \u6210\u5458\uff0c\u90a3\u4e48 Cons \u9700\u8981\u7684\u7a7a\u95f4\u7b49\u4e8e i32 \u7684\u5927\u5c0f\u52a0\u4e0a List \u7684\u5927\u5c0f\u3002\u4e3a\u4e86\u8ba1\u7b97 List \u9700\u8981\u591a\u5c11\u5185\u5b58\uff0c\u5b83\u68c0\u67e5\u5176\u6210\u5458\uff0c\u4ece Cons \u6210\u5458\u5f00\u59cb\u3002 Cons \u6210\u5458\u50a8\u5b58\u4e86\u4e00\u4e2a i32 \u503c\u548c\u4e00\u4e2a List \u503c\uff0c\u8fd9\u6837\u7684\u8ba1\u7b97\u5c06\u65e0\u9650\u8fdb\u884c\u4e0b\u53bb\uff0c\u5982\u56fe 15-1 \u6240\u793a\uff1a \u56fe 15-1\uff1a\u4e00\u4e2a\u5305\u542b\u65e0\u9650\u4e2a Cons \u6210\u5458\u7684\u65e0\u9650 List \u4f7f\u7528 Box<T> \u7ed9\u9012\u5f52\u7c7b\u578b\u4e00\u4e2a\u5df2\u77e5\u7684\u5927\u5c0f Rust \u65e0\u6cd5\u8ba1\u7b97\u51fa\u8981\u4e3a\u5b9a\u4e49\u4e3a\u9012\u5f52\u7684\u7c7b\u578b\u5206\u914d\u591a\u5c11\u7a7a\u95f4\uff0c\u6240\u4ee5\u7f16\u8bd1\u5668\u7ed9\u51fa\u4e86\u793a\u4f8b 15-4 \u4e2d\u7684\u9519\u8bef\u3002\u8fd9\u4e2a\u9519\u8bef\u4e5f\u5305\u62ec\u4e86\u6709\u7528\u7684\u5efa\u8bae\uff1a help: insert some indirection (e.g., a `Box`, `Rc`, or `&`) to make `List` representable | 2 | Cons(i32, Box<List>), | ^^^^ ^ \u5728\u5efa\u8bae\u4e2d\uff0c\u201cindirection\u201d \u610f\u5473\u7740\u4e0d\u540c\u4e8e\u76f4\u63a5\u50a8\u5b58\u4e00\u4e2a\u503c\uff0c\u6211\u4eec\u5c06\u95f4\u63a5\u7684\u50a8\u5b58\u4e00\u4e2a\u6307\u5411\u503c\u7684\u6307\u9488\u3002 \u56e0\u4e3a Box<T> \u662f\u4e00\u4e2a\u6307\u9488\uff0c\u6211\u4eec\u603b\u662f\u77e5\u9053\u5b83\u9700\u8981\u591a\u5c11\u7a7a\u95f4\uff1a \u6307\u9488\u7684\u5927\u5c0f\u5e76\u4e0d\u4f1a\u6839\u636e\u5176\u6307\u5411\u7684\u6570\u636e\u91cf\u800c\u6539\u53d8\u3002 \u8fd9\u610f\u5473\u7740\u53ef\u4ee5\u5c06 Box \u653e\u5165 Cons \u6210\u5458\u4e2d\u800c\u4e0d\u662f\u76f4\u63a5\u5b58\u653e\u53e6\u4e00\u4e2a List \u503c\u3002 Box \u4f1a\u6307\u5411\u53e6\u4e00\u4e2a\u4f4d\u4e8e\u5806\u4e0a\u7684 List \u503c\uff0c\u800c\u4e0d\u662f\u5b58\u653e\u5728 Cons \u6210\u5458\u4e2d\u3002\u4ece\u6982\u5ff5\u4e0a\u8bb2\uff0c\u6211\u4eec\u4ecd\u7136\u6709\u4e00\u4e2a\u901a\u8fc7\u5728\u5176\u4e2d \u201c\u5b58\u653e\u201d \u5176\u4ed6\u5217\u8868\u521b\u5efa\u7684\u5217\u8868\uff0c\u4e0d\u8fc7\u73b0\u5728\u5b9e\u73b0\u8fd9\u4e2a\u6982\u5ff5\u7684\u65b9\u5f0f\u66f4\u50cf\u662f\u4e00\u4e2a\u9879\u6328\u7740\u53e6\u4e00\u9879\uff0c\u800c\u4e0d\u662f\u4e00\u9879\u5305\u542b\u53e6\u4e00\u9879\u3002 \u6211\u4eec\u53ef\u4ee5\u4fee\u6539\u793a\u4f8b 15-2 \u4e2d List \u679a\u4e3e\u7684\u5b9a\u4e49\u548c\u793a\u4f8b 15-3 \u4e2d\u5bf9 List \u7684\u5e94\u7528\uff0c\u5982\u793a\u4f8b 15-65 \u6240\u793a\uff0c\u8fd9\u662f\u53ef\u4ee5\u7f16\u8bd1\u7684\uff1a \u6587\u4ef6\u540d: src/main.rs enum List { Cons ( i32 , Box < List > ), Nil , } use crate :: List :: { Cons , Nil }; fn main () { let list = Cons ( 1 , Box :: new ( Cons ( 2 , Box :: new ( Cons ( 3 , Box :: new ( Nil )))))); } \u793a\u4f8b 15-5\uff1a\u4e3a\u4e86\u62e5\u6709\u5df2\u77e5\u5927\u5c0f\u800c\u4f7f\u7528 Box<T> \u7684 List \u5b9a\u4e49 Cons \u6210\u5458\u5c06\u4f1a\u9700\u8981\u4e00\u4e2a i32 \u7684\u5927\u5c0f\u52a0\u4e0a\u50a8\u5b58 box \u6307\u9488\u6570\u636e\u7684\u7a7a\u95f4\u3002 Nil \u6210\u5458\u4e0d\u50a8\u5b58\u503c\uff0c\u6240\u4ee5\u5b83\u6bd4 Cons \u6210\u5458\u9700\u8981\u66f4\u5c11\u7684\u7a7a\u95f4\u3002\u73b0\u5728\u6211\u4eec\u77e5\u9053\u4e86\u4efb\u4f55 List \u503c\u6700\u591a\u9700\u8981\u4e00\u4e2a i32 \u52a0\u4e0a box \u6307\u9488\u6570\u636e\u7684\u5927\u5c0f\u3002\u901a\u8fc7\u4f7f\u7528 box \uff0c\u6253\u7834\u4e86\u8fd9\u65e0\u9650\u9012\u5f52\u7684\u8fde\u9501\uff0c\u8fd9\u6837\u7f16\u8bd1\u5668\u5c31\u80fd\u591f\u8ba1\u7b97\u51fa\u50a8\u5b58 List \u503c\u9700\u8981\u7684\u5927\u5c0f\u4e86\u3002\u56fe 15-2 \u5c55\u793a\u4e86\u73b0\u5728 Cons \u6210\u5458\u770b\u8d77\u6765\u50cf\u4ec0\u4e48\uff1a \u56fe 15-2\uff1a\u56e0\u4e3a Cons \u5b58\u653e\u4e00\u4e2a Box \u6240\u4ee5 List \u4e0d\u662f\u65e0\u9650\u5927\u5c0f\u7684\u4e86 box \u53ea\u63d0\u4f9b\u4e86\u95f4\u63a5\u5b58\u50a8\u548c\u5806\u5206\u914d\uff1b\u4ed6\u4eec\u5e76\u6ca1\u6709\u4efb\u4f55\u5176\u4ed6\u7279\u6b8a\u7684\u529f\u80fd \uff0c \u6bd4\u5982\u6211\u4eec\u5c06\u4f1a\u89c1\u5230\u7684\u5176\u4ed6\u667a\u80fd\u6307\u9488\u3002 \u5b83\u4eec\u4e5f\u6ca1\u6709\u8fd9\u4e9b\u7279\u6b8a\u529f\u80fd\u5e26\u6765\u7684\u6027\u80fd\u635f\u5931\uff0c\u6240\u4ee5\u4ed6\u4eec\u53ef\u4ee5\u7528\u4e8e\u50cf cons list \u8fd9\u6837\u95f4\u63a5\u5b58\u50a8\u662f\u552f\u4e00\u6240\u9700\u529f\u80fd\u7684\u573a\u666f\u3002\u6211\u4eec\u8fd8\u5c06\u5728\u7b2c\u5341\u4e03\u7ae0\u770b\u5230 box \u7684\u66f4\u591a\u5e94\u7528\u573a\u666f\u3002 Box<T> \u7c7b\u578b\u662f\u4e00\u4e2a\u667a\u80fd\u6307\u9488\uff0c\u56e0\u4e3a\u5b83\u5b9e\u73b0\u4e86 Deref trait\uff0c\u5b83\u5141\u8bb8 Box<T> \u503c\u88ab\u5f53\u4f5c\u5f15\u7528\u5bf9\u5f85\u3002 \u5f53 Box<T> \u503c\u79bb\u5f00\u4f5c\u7528\u57df\u65f6\uff0c\u7531\u4e8e Box<T> \u7c7b\u578b Drop trait \u7684\u5b9e\u73b0\uff0cbox \u6240\u6307\u5411\u7684\u5806\u6570\u636e\u4e5f\u4f1a\u88ab\u6e05\u9664\u3002 \u8ba9\u6211\u4eec\u66f4\u8be6\u7ec6\u7684\u63a2\u7d22\u4e00\u4e0b\u8fd9\u4e24\u4e2a trait\u3002\u8fd9\u4e24\u4e2a trait \u5bf9\u4e8e\u5728\u672c\u7ae0\u4f59\u4e0b\u8ba8\u8bba\u7684\u5176\u4ed6\u667a\u80fd\u6307\u9488\u6240\u63d0\u4f9b\u7684\u529f\u80fd\u4e2d\uff0c\u5c06\u4f1a\u66f4\u4e3a\u91cd\u8981\u3002 \u901a\u8fc7 Deref trait \u5c06\u667a\u80fd\u6307\u9488\u5f53\u4f5c\u5e38\u89c4\u5f15\u7528\u5904\u7406 ch15-02-deref.md commit 5bebc80f61d33438f5598c1f7a20cc16be88ed08 \u5b9e\u73b0 Deref trait \u5141\u8bb8\u6211\u4eec\u91cd\u8f7d \u89e3\u5f15\u7528\u8fd0\u7b97\u7b26 \uff08 dereference operator \uff09 * \uff08\u4e0e\u4e58\u6cd5\u8fd0\u7b97\u7b26\u6216\u901a\u914d\u7b26\u76f8\u533a\u522b\uff09\u3002\u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\u5b9e\u73b0 Deref trait \u7684\u667a\u80fd\u6307\u9488\u53ef\u4ee5\u88ab\u5f53\u4f5c\u5e38\u89c4\u5f15\u7528\u6765\u5bf9\u5f85\uff0c\u53ef\u4ee5\u7f16\u5199\u64cd\u4f5c\u5f15\u7528\u7684\u4ee3\u7801\u5e76\u7528\u4e8e\u667a\u80fd\u6307\u9488\u3002 \u8ba9\u6211\u4eec\u9996\u5148\u770b\u770b\u89e3\u5f15\u7528\u8fd0\u7b97\u7b26\u5982\u4f55\u5904\u7406\u5e38\u89c4\u5f15\u7528\uff0c\u63a5\u7740\u5c1d\u8bd5\u5b9a\u4e49\u6211\u4eec\u81ea\u5df1\u7684\u7c7b\u4f3c Box<T> \u7684\u7c7b\u578b\u5e76\u770b\u770b\u4e3a\u4f55\u89e3\u5f15\u7528\u8fd0\u7b97\u7b26\u4e0d\u80fd\u50cf\u5f15\u7528\u4e00\u6837\u5de5\u4f5c\u3002\u6211\u4eec\u4f1a\u63a2\u7d22\u5982\u4f55\u5b9e\u73b0 Deref trait \u4f7f\u5f97\u667a\u80fd\u6307\u9488\u4ee5\u7c7b\u4f3c\u5f15\u7528\u7684\u65b9\u5f0f\u5de5\u4f5c\u53d8\u4e3a\u53ef\u80fd\u3002\u6700\u540e\uff0c\u6211\u4eec\u4f1a\u8ba8\u8bba Rust \u7684 Deref \u5f3a\u5236\u8f6c\u6362 \uff08 deref coercions \uff09\u529f\u80fd\u4ee5\u53ca\u5b83\u662f\u5982\u4f55\u5904\u7406\u5f15\u7528\u6216\u667a\u80fd\u6307\u9488\u7684\u3002 \u6211\u4eec\u5c06\u8981\u6784\u5efa\u7684 MyBox<T> \u7c7b\u578b\u4e0e\u771f\u6b63\u7684 Box<T> \u6709\u4e00\u4e2a\u5f88\u5927\u7684\u533a\u522b\uff1a\u6211\u4eec\u7684\u7248\u672c\u4e0d\u4f1a\u5728\u5806\u4e0a\u50a8\u5b58\u6570\u636e\u3002\u8fd9\u4e2a\u4f8b\u5b50\u91cd\u70b9\u5173\u6ce8 Deref \uff0c\u6240\u4ee5\u5176\u6570\u636e\u5b9e\u9645\u5b58\u653e\u5728\u4f55\u5904\uff0c\u76f8\u6bd4\u5176\u7c7b\u4f3c\u6307\u9488\u7684\u884c\u4e3a\u6765\u8bf4\u4e0d\u7b97\u91cd\u8981\u3002 \u901a\u8fc7\u89e3\u5f15\u7528\u8fd0\u7b97\u7b26\u8ffd\u8e2a\u6307\u9488\u7684\u503c \u5e38\u89c4\u5f15\u7528\u662f\u4e00\u4e2a\u6307\u9488\u7c7b\u578b\uff0c\u4e00\u79cd\u7406\u89e3\u6307\u9488\u7684\u65b9\u5f0f\u662f\u5c06\u5176\u770b\u6210\u6307\u5411\u50a8\u5b58\u5728\u5176\u4ed6\u67d0\u5904\u503c\u7684\u7bad\u5934\u3002\u5728\u793a\u4f8b 15-6 \u4e2d\uff0c\u521b\u5efa\u4e86\u4e00\u4e2a i32 \u503c\u7684\u5f15\u7528\uff0c\u63a5\u7740\u4f7f\u7528\u89e3\u5f15\u7528\u8fd0\u7b97\u7b26\u6765\u8ddf\u8e2a\u6240\u5f15\u7528\u7684\u6570\u636e\uff1a \u6587\u4ef6\u540d: src/main.rs fn main () { let x = 5 ; let y = & x ; assert_eq! ( 5 , x ); assert_eq! ( 5 , * y ); } \u793a\u4f8b 15-6\uff1a\u4f7f\u7528\u89e3\u5f15\u7528\u8fd0\u7b97\u7b26\u6765\u8ddf\u8e2a i32 \u503c\u7684\u5f15\u7528 \u53d8\u91cf x \u5b58\u653e\u4e86\u4e00\u4e2a i32 \u503c 5 \u3002 y \u7b49\u4e8e x \u7684\u4e00\u4e2a\u5f15\u7528\u3002\u53ef\u4ee5\u65ad\u8a00 x \u7b49\u4e8e 5 \u3002 \u7136\u800c\uff0c\u5982\u679c\u5e0c\u671b\u5bf9 y \u7684\u503c\u505a\u51fa\u65ad\u8a00\uff0c\u5fc5\u987b\u4f7f\u7528 *y \u6765\u8ffd\u8e2a\u5f15\u7528\u6240\u6307\u5411\u7684\u503c\uff08\u4e5f\u5c31\u662f \u89e3\u5f15\u7528 \uff09\u3002 \u4e00\u65e6\u89e3\u5f15\u7528\u4e86 y \uff0c\u5c31\u53ef\u4ee5\u8bbf\u95ee y \u6240\u6307\u5411\u7684\u6574\u578b\u503c\u5e76\u53ef\u4ee5\u4e0e 5 \u505a\u6bd4\u8f83\u3002 \u76f8\u53cd\u5982\u679c\u5c1d\u8bd5\u7f16\u5199 assert_eq!(5, y); \uff0c\u5219\u4f1a\u5f97\u5230\u5982\u4e0b\u7f16\u8bd1\u9519\u8bef\uff1a $ cargo run Compiling deref-example v0.1.0 (file:///projects/deref-example) error[E0277]: can't compare `{integer}` with `&{integer}` --> src/main.rs:6:5 | 6 | assert_eq!(5, y); | ^^^^^^^^^^^^^^^^ no implementation for `{integer} == &{integer}` | = help: the trait `PartialEq<&{integer}>` is not implemented for `{integer}` = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info) For more information about this error, try `rustc --explain E0277`. error: could not compile `deref-example` due to previous error \u4e0d\u5141\u8bb8\u6bd4\u8f83\u6570\u5b57\u7684\u5f15\u7528\u4e0e\u6570\u5b57\uff0c\u56e0\u4e3a\u5b83\u4eec\u662f\u4e0d\u540c\u7684\u7c7b\u578b\u3002\u5fc5\u987b\u4f7f\u7528\u89e3\u5f15\u7528\u8fd0\u7b97\u7b26\u8ffd\u8e2a\u5f15\u7528\u6240\u6307\u5411\u7684\u503c\u3002 \u50cf\u5f15\u7528\u4e00\u6837\u4f7f\u7528 Box<T> \u53ef\u4ee5\u4f7f\u7528 Box<T> \u4ee3\u66ff\u5f15\u7528\u6765\u91cd\u5199\u793a\u4f8b 15-6 \u4e2d\u7684\u4ee3\u7801\uff0c\u89e3\u5f15\u7528\u8fd0\u7b97\u7b26\u4e5f\u4e00\u6837\u80fd\u5de5\u4f5c\uff0c\u5982\u793a\u4f8b 15-7 \u6240\u793a\uff1a \u6587\u4ef6\u540d: src/main.rs fn main () { let x = 5 ; let y = Box :: new ( x ); assert_eq! ( 5 , x ); assert_eq! ( 5 , * y ); } \u793a\u4f8b 15-7\uff1a\u5728 Box<i32> \u4e0a\u4f7f\u7528\u89e3\u5f15\u7528\u8fd0\u7b97\u7b26 \u793a\u4f8b 15-7 \u76f8\u6bd4\u793a\u4f8b 15-6 \u4e3b\u8981\u4e0d\u540c\u7684\u5730\u65b9\u5c31\u662f\u5c06 y \u8bbe\u7f6e\u4e3a\u4e00\u4e2a \u6307\u5411 x \u503c\u62f7\u8d1d\u7684 box \u5b9e\u4f8b \uff0c\u800c\u4e0d\u662f\u6307\u5411 x \u503c\u7684\u5f15\u7528\u3002 \u5728\u6700\u540e\u7684\u65ad\u8a00\u4e2d\uff0c\u53ef\u4ee5\u4f7f\u7528\u89e3\u5f15\u7528\u8fd0\u7b97\u7b26\u4ee5 y \u4e3a\u5f15\u7528\u65f6\u76f8\u540c\u7684\u65b9\u5f0f\u8ffd\u8e2a box \u7684\u6307\u9488\u3002 \u63a5\u4e0b\u6765\u8ba9\u6211\u4eec\u901a\u8fc7\u5b9e\u73b0\u81ea\u5df1\u7684 box \u7c7b\u578b\u6765\u63a2\u7d22 Box<T> \u80fd\u8fd9\u4e48\u505a\u6709\u4f55\u7279\u6b8a\u4e4b\u5904\u3002 \u81ea\u5b9a\u4e49\u667a\u80fd\u6307\u9488 \u4e3a\u4e86\u4f53\u4f1a\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u667a\u80fd\u6307\u9488\u4e0e\u5f15\u7528\u7684\u4e0d\u540c\uff0c\u8ba9\u6211\u4eec\u521b\u5efa\u4e00\u4e2a\u7c7b\u4f3c\u4e8e\u6807\u51c6\u5e93\u63d0\u4f9b\u7684 Box<T> \u7c7b\u578b\u7684\u667a\u80fd\u6307\u9488\u3002\u63a5\u7740\u5b66\u4e60\u5982\u4f55\u589e\u52a0\u4f7f\u7528\u89e3\u5f15\u7528\u8fd0\u7b97\u7b26\u7684\u529f\u80fd\u3002 \u4ece\u6839\u672c\u4e0a\u8bf4\uff0c Box<T> \u88ab\u5b9a\u4e49\u4e3a\u5305\u542b\u4e00\u4e2a\u5143\u7d20\u7684\u5143\u7ec4\u7ed3\u6784\u4f53\uff0c \u6240\u4ee5\u793a\u4f8b 15-8 \u4ee5\u76f8\u540c\u7684\u65b9\u5f0f\u5b9a\u4e49\u4e86 MyBox<T> \u7c7b\u578b\u3002 \u6211\u4eec\u8fd8\u5b9a\u4e49\u4e86 new \u51fd\u6570\u6765\u5bf9\u5e94\u5b9a\u4e49\u4e8e Box<T> \u7684 new \u51fd\u6570\uff1a \u6587\u4ef6\u540d: src/main.rs struct MyBox < T > ( T ); impl < T > MyBox < T > { fn new ( x : T ) -> MyBox < T > { MyBox ( x ) } } \u793a\u4f8b 15-8\uff1a\u5b9a\u4e49 MyBox<T> \u7c7b\u578b \u8fd9\u91cc\u5b9a\u4e49\u4e86\u4e00\u4e2a\u7ed3\u6784\u4f53 MyBox \u5e76\u58f0\u660e\u4e86\u4e00\u4e2a\u6cdb\u578b\u53c2\u6570 T \uff0c\u56e0\u4e3a\u6211\u4eec\u5e0c\u671b\u5176\u53ef\u4ee5\u5b58\u653e\u4efb\u4f55\u7c7b\u578b\u7684\u503c\u3002 MyBox \u662f\u4e00\u4e2a\u5305\u542b T \u7c7b\u578b\u5143\u7d20\u7684\u5143\u7ec4\u7ed3\u6784\u4f53\u3002 MyBox::new \u51fd\u6570\u83b7\u53d6\u4e00\u4e2a T \u7c7b\u578b\u7684\u53c2\u6570\u5e76\u8fd4\u56de\u4e00\u4e2a\u5b58\u653e\u4f20\u5165\u503c\u7684 MyBox \u5b9e\u4f8b\u3002 \u5c1d\u8bd5\u5c06\u793a\u4f8b 15-7 \u4e2d\u7684\u4ee3\u7801\u52a0\u5165\u793a\u4f8b 15-8 \u4e2d\u5e76\u4fee\u6539 main \u4f7f\u7528\u6211\u4eec\u5b9a\u4e49\u7684 MyBox<T> \u7c7b\u578b\u4ee3\u66ff Box<T> \u3002\u793a\u4f8b 15-9 \u4e2d\u7684\u4ee3\u7801\u4e0d\u80fd\u7f16\u8bd1\uff0c\u56e0\u4e3a Rust \u4e0d\u77e5\u9053\u5982\u4f55\u89e3\u5f15\u7528 MyBox \uff1a \u6587\u4ef6\u540d: src/main.rs fn main () { let x = 5 ; let y = MyBox :: new ( x ); assert_eq! ( 5 , x ); assert_eq! ( 5 , * y ); } \u793a\u4f8b 15-9\uff1a\u5c1d\u8bd5\u4ee5\u4f7f\u7528\u5f15\u7528\u548c Box<T> \u76f8\u540c\u7684\u65b9\u5f0f\u4f7f\u7528 MyBox<T> \u5f97\u5230\u7684\u7f16\u8bd1\u9519\u8bef\u662f\uff1a $ cargo run Compiling deref-example v0.1.0 (file:///projects/deref-example) error[E0614]: type `MyBox<{integer}>` cannot be dereferenced --> src/main.rs:14:19 | 14 | assert_eq!(5, *y); | ^^ For more information about this error, try `rustc --explain E0614`. error: could not compile `deref-example` due to previous error MyBox<T> \u7c7b\u578b\u4e0d\u80fd\u89e3\u5f15\u7528\uff0c\u56e0\u4e3a\u6211\u4eec\u5c1a\u672a\u5728\u8be5\u7c7b\u578b\u5b9e\u73b0\u8fd9\u4e2a\u529f\u80fd\u3002\u4e3a\u4e86\u542f\u7528 * \u8fd0\u7b97\u7b26\u7684\u89e3\u5f15\u7528\u529f\u80fd\uff0c\u9700\u8981\u5b9e\u73b0 Deref trait\u3002 \u901a\u8fc7\u5b9e\u73b0 Deref trait \u5c06\u67d0\u7c7b\u578b\u50cf\u5f15\u7528\u4e00\u6837\u5904\u7406 \u5982\u7b2c\u5341\u7ae0 \u201c\u4e3a\u7c7b\u578b\u5b9e\u73b0 trait\u201d \u90e8\u5206\u6240\u8ba8\u8bba\u7684\uff0c\u4e3a\u4e86\u5b9e\u73b0 trait\uff0c\u9700\u8981\u63d0\u4f9b trait \u6240\u9700\u7684\u65b9\u6cd5\u5b9e\u73b0\u3002 Deref trait\uff0c\u7531\u6807\u51c6\u5e93\u63d0\u4f9b\uff0c\u8981\u6c42\u5b9e\u73b0\u540d\u4e3a deref \u7684\u65b9\u6cd5\uff0c\u5176\u501f\u7528 self \u5e76\u8fd4\u56de\u4e00\u4e2a\u5185\u90e8\u6570\u636e\u7684\u5f15\u7528\u3002\u793a\u4f8b 15-10 \u5305\u542b\u5b9a\u4e49\u4e8e MyBox \u4e4b\u4e0a\u7684 Deref \u5b9e\u73b0\uff1a \u6587\u4ef6\u540d: src/main.rs use std :: ops :: Deref ; impl < T > Deref for MyBox < T > { type Target = T ; fn deref ( & self ) -> & Self :: Target { & self . 0 } } \u793a\u4f8b 15-10\uff1a MyBox<T> \u4e0a\u7684 Deref \u5b9e\u73b0 type Target = T; \u8bed\u6cd5\u5b9a\u4e49\u4e86\u7528\u4e8e\u6b64 trait \u7684\u5173\u8054\u7c7b\u578b\u3002\u5173\u8054\u7c7b\u578b\u662f\u4e00\u4e2a\u7a0d\u6709\u4e0d\u540c\u7684\u5b9a\u4e49\u6cdb\u578b\u53c2\u6570\u7684\u65b9\u5f0f\uff0c\u73b0\u5728\u8fd8\u65e0\u9700\u8fc7\u591a\u7684\u62c5\u5fc3\u5b83\uff1b\u7b2c\u5341\u4e5d\u7ae0\u4f1a\u8be6\u7ec6\u4ecb\u7ecd\u3002 deref \u65b9\u6cd5\u4f53\u4e2d\u5199\u5165\u4e86 &self.0 \uff0c\u8fd9\u6837 deref \u8fd4\u56de\u4e86\u6211\u5e0c\u671b\u901a\u8fc7 * \u8fd0\u7b97\u7b26\u8bbf\u95ee\u7684\u503c\u7684\u5f15\u7528\u3002\u56de\u5fc6\u4e00\u4e0b\u7b2c\u4e94\u7ae0 \u201c\u4f7f\u7528\u6ca1\u6709\u547d\u540d\u5b57\u6bb5\u7684\u5143\u7ec4\u7ed3\u6784\u4f53\u6765\u521b\u5efa\u4e0d\u540c\u7684\u7c7b\u578b\u201d \u90e8\u5206 .0 \u7528\u6765\u8bbf\u95ee\u5143\u7ec4\u7ed3\u6784\u4f53\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u3002\u793a\u4f8b 15-9 \u4e2d\u7684 main \u51fd\u6570\u4e2d\u5bf9 MyBox<T> \u503c\u7684 * \u8c03\u7528\u73b0\u5728\u53ef\u4ee5\u7f16\u8bd1\u5e76\u80fd\u901a\u8fc7\u65ad\u8a00\u4e86\uff01 \u6ca1\u6709 Deref trait \u7684\u8bdd\uff0c\u7f16\u8bd1\u5668\u53ea\u4f1a\u89e3\u5f15\u7528 & \u5f15\u7528\u7c7b\u578b\u3002 deref \u65b9\u6cd5\u5411\u7f16\u8bd1\u5668\u63d0\u4f9b\u4e86\u83b7\u53d6\u4efb\u4f55\u5b9e\u73b0\u4e86 Deref trait \u7684\u7c7b\u578b\u7684\u503c\uff0c\u5e76\u4e14\u8c03\u7528\u8fd9\u4e2a\u7c7b\u578b\u7684 deref \u65b9\u6cd5\u6765\u83b7\u53d6\u4e00\u4e2a\u5b83\u77e5\u9053\u5982\u4f55\u89e3\u5f15\u7528\u7684 & \u5f15\u7528\u7684\u80fd\u529b\u3002 \u5f53\u6211\u4eec\u5728\u793a\u4f8b 15-9 \u4e2d\u8f93\u5165 *y \u65f6\uff0cRust \u4e8b\u5b9e\u4e0a\u5728\u5e95\u5c42\u8fd0\u884c\u4e86\u5982\u4e0b\u4ee3\u7801\uff1a * ( y . deref ()) Rust \u5c06 * \u8fd0\u7b97\u7b26\u66ff\u6362\u4e3a\u5148\u8c03\u7528 deref \u65b9\u6cd5\u518d\u8fdb\u884c\u666e\u901a\u89e3\u5f15\u7528\u7684\u64cd\u4f5c\uff0c\u5982\u6b64\u6211\u4eec\u4fbf\u4e0d\u7528\u62c5\u5fc3\u662f\u5426\u8fd8\u9700\u624b\u52a8\u8c03\u7528 deref \u65b9\u6cd5\u4e86\u3002Rust \u7684\u8fd9\u4e2a\u7279\u6027\u53ef\u4ee5\u8ba9\u6211\u4eec\u5199\u51fa\u884c\u4e3a\u4e00\u81f4\u7684\u4ee3\u7801\uff0c\u65e0\u8bba\u662f\u9762\u5bf9\u7684\u662f\u5e38\u89c4\u5f15\u7528\u8fd8\u662f\u5b9e\u73b0\u4e86 Deref \u7684\u7c7b\u578b\u3002 deref \u65b9\u6cd5\u8fd4\u56de\u503c\u7684\u5f15\u7528\uff0c\u4ee5\u53ca *(y.deref()) \u62ec\u53f7\u5916\u8fb9\u7684\u666e\u901a\u89e3\u5f15\u7528\u4ecd\u4e3a\u5fc5\u987b\u7684\u539f\u56e0\u5728\u4e8e\u6240\u6709\u6743\u3002\u5982\u679c deref \u65b9\u6cd5\u76f4\u63a5\u8fd4\u56de\u503c\u800c\u4e0d\u662f\u503c\u7684\u5f15\u7528\uff0c\u5176\u503c\uff08\u7684\u6240\u6709\u6743\uff09\u5c06\u88ab\u79fb\u51fa self \u3002\u5728\u8fd9\u91cc\u4ee5\u53ca\u5927\u90e8\u5206\u4f7f\u7528\u89e3\u5f15\u7528\u8fd0\u7b97\u7b26\u7684\u60c5\u51b5\u4e0b\u6211\u4eec\u5e76\u4e0d\u5e0c\u671b\u83b7\u53d6 MyBox<T> \u5185\u90e8\u503c\u7684\u6240\u6709\u6743\u3002 \u6ce8\u610f\uff0c\u6bcf\u6b21\u5f53\u6211\u4eec\u5728\u4ee3\u7801\u4e2d\u4f7f\u7528 * \u65f6\uff0c * \u8fd0\u7b97\u7b26\u90fd\u88ab\u66ff\u6362\u6210\u4e86\u5148\u8c03\u7528 deref \u65b9\u6cd5\u518d\u63a5\u7740\u4f7f\u7528 * \u89e3\u5f15\u7528\u7684\u64cd\u4f5c\uff0c\u4e14\u53ea\u4f1a\u53d1\u751f\u4e00\u6b21\uff0c\u4e0d\u4f1a\u5bf9 * \u64cd\u4f5c\u7b26\u65e0\u9650\u9012\u5f52\u66ff\u6362\uff0c\u89e3\u5f15\u7528\u51fa\u4e0a\u9762 i32 \u7c7b\u578b\u7684\u503c\u5c31\u505c\u6b62\u4e86\uff0c\u8fd9\u4e2a\u503c\u4e0e\u793a\u4f8b 15-9 \u4e2d assert_eq! \u7684 5 \u76f8\u5339\u914d\u3002 \u51fd\u6570\u548c\u65b9\u6cd5\u7684\u9690\u5f0f Deref \u5f3a\u5236\u8f6c\u6362 Deref \u5f3a\u5236\u8f6c\u6362 \uff08 deref coercions \uff09\u662f Rust \u5728\u51fd\u6570\u6216\u65b9\u6cd5\u4f20\u53c2\u4e0a\u7684\u4e00\u79cd\u4fbf\u5229\u3002Deref \u5f3a\u5236\u8f6c\u6362\u53ea\u80fd\u4f5c\u7528\u4e8e\u5b9e\u73b0\u4e86 Deref trait \u7684\u7c7b\u578b\u3002Deref \u5f3a\u5236\u8f6c\u6362\u5c06\u8fd9\u6837\u4e00\u4e2a\u7c7b\u578b\u7684\u5f15\u7528\u8f6c\u6362\u4e3a\u53e6\u4e00\u4e2a\u7c7b\u578b\u7684\u5f15\u7528\u3002\u4f8b\u5982\uff0cDeref \u5f3a\u5236\u8f6c\u6362 \u53ef\u4ee5\u5c06 &String \u8f6c\u6362\u4e3a &str \uff0c\u56e0\u4e3a String \u5b9e\u73b0\u4e86 Deref trait \u56e0\u6b64\u53ef\u4ee5\u8fd4\u56de &str \u3002\u5f53\u8fd9\u79cd\u7279\u5b9a\u7c7b\u578b\u7684\u5f15\u7528\u4f5c\u4e3a\u5b9e\u53c2\u4f20\u9012\u7ed9\u548c\u5f62\u53c2\u7c7b\u578b\u4e0d\u540c\u7684\u51fd\u6570\u6216\u65b9\u6cd5\u65f6\uff0cDeref \u5f3a\u5236\u8f6c\u6362\u5c06\u81ea\u52a8\u53d1\u751f\u3002\u8fd9\u65f6\u4f1a\u6709\u4e00\u7cfb\u5217\u7684 deref \u65b9\u6cd5\u88ab\u8c03\u7528\uff0c\u628a\u6211\u4eec\u63d0\u4f9b\u7684\u7c7b\u578b\u8f6c\u6362\u6210\u4e86\u53c2\u6570\u6240\u9700\u7684\u7c7b\u578b\u3002 Deref \u5f3a\u5236\u8f6c\u6362\u7684\u52a0\u5165\u4f7f\u5f97 Rust \u7a0b\u5e8f\u5458\u7f16\u5199\u51fd\u6570\u548c\u65b9\u6cd5\u8c03\u7528\u65f6\u65e0\u9700\u589e\u52a0\u8fc7\u591a\u663e\u5f0f\u4f7f\u7528 & \u548c * \u7684\u5f15\u7528\u548c\u89e3\u5f15\u7528\u3002\u8fd9\u4e2a\u529f\u80fd\u4e5f\u4f7f\u5f97\u6211\u4eec\u53ef\u4ee5\u7f16\u5199\u66f4\u591a\u540c\u65f6\u4f5c\u7528\u4e8e\u5f15\u7528\u6216\u667a\u80fd\u6307\u9488\u7684\u4ee3\u7801\u3002 \u4f5c\u4e3a\u5c55\u793a Deref \u5f3a\u5236\u8f6c\u6362\u7684\u5b9e\u4f8b\uff0c\u8ba9\u6211\u4eec\u4f7f\u7528\u793a\u4f8b 15-8 \u4e2d\u5b9a\u4e49\u7684 MyBox<T> \uff0c\u4ee5\u53ca\u793a\u4f8b 15-10 \u4e2d\u589e\u52a0\u7684 Deref \u5b9e\u73b0\u3002\u793a\u4f8b 15-11 \u5c55\u793a\u4e86\u4e00\u4e2a\u6709\u7740\u5b57\u7b26\u4e32 slice \u53c2\u6570\u7684\u51fd\u6570\u5b9a\u4e49\uff1a \u6587\u4ef6\u540d: src/main.rs fn hello ( name : & str ) { println! ( \"Hello, {}!\" , name ); } \u793a\u4f8b 15-11\uff1a hello \u51fd\u6570\u6709\u7740 &str \u7c7b\u578b\u7684\u53c2\u6570 name \u53ef\u4ee5\u4f7f\u7528\u5b57\u7b26\u4e32 slice \u4f5c\u4e3a\u53c2\u6570\u8c03\u7528 hello \u51fd\u6570\uff0c\u6bd4\u5982 hello(\"Rust\"); \u3002Deref \u5f3a\u5236\u8f6c\u6362\u4f7f\u5f97\u7528 MyBox<String> \u7c7b\u578b\u503c\u7684\u5f15\u7528\u8c03\u7528 hello \u6210\u4e3a\u53ef\u80fd\uff0c\u5982\u793a\u4f8b 15-12 \u6240\u793a\uff1a \u6587\u4ef6\u540d: src/main.rs fn main () { let m = MyBox :: new ( String :: from ( \"Rust\" )); hello ( & m ); } \u793a\u4f8b 15-12\uff1a\u56e0\u4e3a Deref \u5f3a\u5236\u8f6c\u6362\uff0c\u4f7f\u7528 MyBox<String> \u7684\u5f15\u7528\u8c03\u7528 hello \u662f\u53ef\u884c\u7684 \u8fd9\u91cc\u4f7f\u7528 &m \u8c03\u7528 hello \u51fd\u6570\uff0c\u5176\u4e3a MyBox<String> \u503c\u7684\u5f15\u7528\u3002\u56e0\u4e3a\u793a\u4f8b 15-10 \u4e2d\u5728 MyBox<T> \u4e0a\u5b9e\u73b0\u4e86 Deref trait\uff0cRust \u53ef\u4ee5\u901a\u8fc7 deref \u8c03\u7528\u5c06 &MyBox<String> \u53d8\u4e3a &String \u3002\u6807\u51c6\u5e93\u4e2d\u63d0\u4f9b\u4e86 String \u4e0a\u7684 Deref \u5b9e\u73b0\uff0c\u5176\u4f1a\u8fd4\u56de\u5b57\u7b26\u4e32 slice\uff0c\u8fd9\u53ef\u4ee5\u5728 Deref \u7684 API \u6587\u6863\u4e2d\u770b\u5230\u3002Rust \u518d\u6b21\u8c03\u7528 deref \u5c06 &String \u53d8\u4e3a &str \uff0c\u8fd9\u5c31\u7b26\u5408 hello \u51fd\u6570\u7684\u5b9a\u4e49\u4e86\u3002 \u5982\u679c Rust \u6ca1\u6709\u5b9e\u73b0 Deref \u5f3a\u5236\u8f6c\u6362\uff0c\u4e3a\u4e86\u4f7f\u7528 &MyBox<String> \u7c7b\u578b\u7684\u503c\u8c03\u7528 hello \uff0c\u5219\u4e0d\u5f97\u4e0d\u7f16\u5199\u793a\u4f8b 15-13 \u4e2d\u7684\u4ee3\u7801\u6765\u4ee3\u66ff\u793a\u4f8b 15-12\uff1a \u6587\u4ef6\u540d: src/main.rs fn main () { let m = MyBox :: new ( String :: from ( \"Rust\" )); hello ( & ( * m )[ .. ]); } \u793a\u4f8b 15-13\uff1a\u5982\u679c Rust \u6ca1\u6709 Deref \u5f3a\u5236\u8f6c\u6362\u5219\u5fc5\u987b\u7f16\u5199\u7684\u4ee3\u7801 (*m) \u5c06 MyBox<String> \u89e3\u5f15\u7528\u4e3a String \u3002\u63a5\u7740 & \u548c [..] \u83b7\u53d6\u4e86\u6574\u4e2a String \u7684\u5b57\u7b26\u4e32 slice \u6765\u5339\u914d hello \u7684\u7b7e\u540d\u3002\u6ca1\u6709 Deref \u5f3a\u5236\u8f6c\u6362\u6240\u6709\u8fd9\u4e9b\u7b26\u53f7\u6df7\u5728\u4e00\u8d77\u5c06\u66f4\u96be\u4ee5\u8bfb\u5199\u548c\u7406\u89e3\u3002Deref \u5f3a\u5236\u8f6c\u6362\u4f7f\u5f97 Rust \u81ea\u52a8\u7684\u5e2e\u6211\u4eec\u5904\u7406\u8fd9\u4e9b\u8f6c\u6362\u3002 \u5f53\u6240\u6d89\u53ca\u5230\u7684\u7c7b\u578b\u5b9a\u4e49\u4e86 Deref trait\uff0cRust \u4f1a\u5206\u6790\u8fd9\u4e9b\u7c7b\u578b\u5e76\u4f7f\u7528\u4efb\u610f\u591a\u6b21 Deref::deref \u8c03\u7528\u4ee5\u83b7\u5f97\u5339\u914d\u53c2\u6570\u7684\u7c7b\u578b\u3002\u8fd9\u4e9b\u89e3\u6790\u90fd\u53d1\u751f\u5728\u7f16\u8bd1\u65f6\uff0c\u6240\u4ee5\u5229\u7528 Deref \u5f3a\u5236\u8f6c\u6362\u5e76\u6ca1\u6709\u8fd0\u884c\u65f6\u635f\u8017\uff01 Deref \u5f3a\u5236\u8f6c\u6362\u5982\u4f55\u4e0e\u53ef\u53d8\u6027\u4ea4\u4e92 \u7c7b\u4f3c\u4e8e\u5982\u4f55\u4f7f\u7528 Deref trait \u91cd\u8f7d\u4e0d\u53ef\u53d8\u5f15\u7528\u7684 * \u8fd0\u7b97\u7b26\uff0cRust \u63d0\u4f9b\u4e86 DerefMut trait \u7528\u4e8e\u91cd\u8f7d\u53ef\u53d8\u5f15\u7528\u7684 * \u8fd0\u7b97\u7b26\u3002 Rust \u5728\u53d1\u73b0\u7c7b\u578b\u548c trait \u5b9e\u73b0\u6ee1\u8db3\u4e09\u79cd\u60c5\u51b5\u65f6\u4f1a\u8fdb\u884c Deref \u5f3a\u5236\u8f6c\u6362\uff1a \u5f53 T: Deref<Target=U> \u65f6\u4ece &T \u5230 &U \u3002 \u5f53 T: DerefMut<Target=U> \u65f6\u4ece &mut T \u5230 &mut U \u3002 \u5f53 T: Deref<Target=U> \u65f6\u4ece &mut T \u5230 &U \u3002 \u5934\u4e24\u4e2a\u60c5\u51b5\u9664\u4e86\u53ef\u53d8\u6027\u4e4b\u5916\u662f\u76f8\u540c\u7684\uff1a \u7b2c\u4e00\u79cd\u60c5\u51b5\u8868\u660e\u5982\u679c\u6709\u4e00\u4e2a &T \uff0c\u800c T \u5b9e\u73b0\u4e86\u8fd4\u56de U \u7c7b\u578b\u7684 Deref \uff0c\u5219\u53ef\u4ee5\u76f4\u63a5\u5f97\u5230 &U \u3002 \u7b2c\u4e8c\u79cd\u60c5\u51b5\u8868\u660e\u5bf9\u4e8e\u53ef\u53d8\u5f15\u7528\u4e5f\u6709\u7740\u76f8\u540c\u7684\u884c\u4e3a\u3002 \u7b2c\u4e09\u4e2a\u60c5\u51b5\u6709\u4e9b\u5fae\u5999\uff1aRust \u4e5f\u4f1a\u5c06\u53ef\u53d8\u5f15\u7528\u5f3a\u8f6c\u4e3a\u4e0d\u53ef\u53d8\u5f15\u7528\u3002\u4f46\u662f\u53cd\u4e4b\u662f \u4e0d\u53ef\u80fd \u7684\uff1a\u4e0d\u53ef\u53d8\u5f15\u7528\u6c38\u8fdc\u4e5f\u4e0d\u80fd\u5f3a\u8f6c\u4e3a\u53ef\u53d8\u5f15\u7528\u3002 \u56e0\u4e3a\u6839\u636e\u501f\u7528\u89c4\u5219\uff0c\u5982\u679c\u6709\u4e00\u4e2a\u53ef\u53d8\u5f15\u7528\uff0c\u5176\u5fc5\u987b\u662f\u8fd9\u4e9b\u6570\u636e\u7684\u552f\u4e00\u5f15\u7528 \uff08\u5426\u5219\u7a0b\u5e8f\u5c06\u65e0\u6cd5\u7f16\u8bd1\uff09\u3002 \u5c06\u4e00\u4e2a\u53ef\u53d8\u5f15\u7528\u8f6c\u6362\u4e3a\u4e0d\u53ef\u53d8\u5f15\u7528\u6c38\u8fdc\u4e5f\u4e0d\u4f1a\u6253\u7834\u501f\u7528\u89c4\u5219\u3002\u5c06\u4e0d\u53ef\u53d8\u5f15\u7528\u8f6c\u6362\u4e3a\u53ef\u53d8\u5f15\u7528\u5219\u9700\u8981\u521d\u59cb\u7684\u4e0d\u53ef\u53d8\u5f15\u7528\u662f\u6570\u636e\u552f\u4e00\u7684\u4e0d\u53ef\u53d8\u5f15\u7528\uff0c\u800c\u501f\u7528\u89c4\u5219\u65e0\u6cd5\u4fdd\u8bc1\u8fd9\u4e00\u70b9\u3002\u56e0\u6b64\uff0cRust \u65e0\u6cd5\u5047\u8bbe\u5c06\u4e0d\u53ef\u53d8\u5f15\u7528\u8f6c\u6362\u4e3a\u53ef\u53d8\u5f15\u7528\u662f\u53ef\u80fd\u7684\u3002 \u4f7f\u7528 Drop Trait \u8fd0\u884c\u6e05\u7406\u4ee3\u7801 ch15-03-drop.md commit d44317c3122b44fb713aba66cc295dee3453b24b \u5bf9\u4e8e\u667a\u80fd\u6307\u9488\u6a21\u5f0f\u6765\u8bf4\u7b2c\u4e8c\u4e2a\u91cd\u8981\u7684 trait \u662f Drop \uff0c\u5176\u5141\u8bb8\u6211\u4eec\u5728\u503c\u8981\u79bb\u5f00\u4f5c\u7528\u57df\u65f6\u6267\u884c\u4e00\u4e9b\u4ee3\u7801\u3002\u53ef\u4ee5\u4e3a\u4efb\u4f55\u7c7b\u578b\u63d0\u4f9b Drop trait \u7684\u5b9e\u73b0\uff0c\u540c\u65f6\u6240\u6307\u5b9a\u7684\u4ee3\u7801\u88ab\u7528\u4e8e\u91ca\u653e\u7c7b\u4f3c\u4e8e\u6587\u4ef6\u6216\u7f51\u7edc\u8fde\u63a5\u7684\u8d44\u6e90\u3002\u6211\u4eec\u5728\u667a\u80fd\u6307\u9488\u4e0a\u4e0b\u6587\u4e2d\u8ba8\u8bba Drop \u662f\u56e0\u4e3a\u5176\u529f\u80fd\u51e0\u4e4e\u603b\u662f\u7528\u4e8e\u5b9e\u73b0\u667a\u80fd\u6307\u9488\u3002\u4f8b\u5982\uff0c\u5f53 Box<T> \u88ab\u4e22\u5f03\u65f6\u4f1a\u91ca\u653e box \u6307\u5411\u7684\u5806\u7a7a\u95f4\u3002 \u5728\u5176\u4ed6\u4e00\u4e9b\u8bed\u8a00\u4e2d\uff0c\u6211\u4eec\u4e0d\u5f97\u4e0d\u8bb0\u4f4f\u5728\u6bcf\u6b21\u4f7f\u7528\u5b8c\u667a\u80fd\u6307\u9488\u5b9e\u4f8b\u540e\u8c03\u7528\u6e05\u7406\u5185\u5b58\u6216\u8d44\u6e90\u7684\u4ee3\u7801\u3002\u5982\u679c\u5fd8\u8bb0\u7684\u8bdd\uff0c\u8fd0\u884c\u4ee3\u7801\u7684\u7cfb\u7edf\u53ef\u80fd\u4f1a\u56e0\u4e3a\u8d1f\u8377\u8fc7\u91cd\u800c\u5d29\u6e83\u3002\u5728 Rust \u4e2d\uff0c\u53ef\u4ee5\u6307\u5b9a\u6bcf\u5f53\u503c\u79bb\u5f00\u4f5c\u7528\u57df\u65f6\u88ab\u6267\u884c\u7684\u4ee3\u7801\uff0c\u7f16\u8bd1\u5668\u4f1a\u81ea\u52a8\u63d2\u5165\u8fd9\u4e9b\u4ee3\u7801\u3002\u4e8e\u662f\u6211\u4eec\u5c31\u4e0d\u9700\u8981\u5728\u7a0b\u5e8f\u4e2d\u5230\u5904\u7f16\u5199\u5728\u5b9e\u4f8b\u7ed3\u675f\u65f6\u6e05\u7406\u8fd9\u4e9b\u53d8\u91cf\u7684\u4ee3\u7801 \u2014\u2014 \u800c\u4e14\u8fd8\u4e0d\u4f1a\u6cc4\u6f0f\u8d44\u6e90\u3002 \u6307\u5b9a\u5728\u503c\u79bb\u5f00\u4f5c\u7528\u57df\u65f6\u5e94\u8be5\u6267\u884c\u7684\u4ee3\u7801\u7684\u65b9\u5f0f\u662f\u5b9e\u73b0 Drop trait\u3002 Drop trait \u8981\u6c42\u5b9e\u73b0\u4e00\u4e2a\u53eb\u505a drop \u7684\u65b9\u6cd5\uff0c\u5b83\u83b7\u53d6\u4e00\u4e2a self \u7684\u53ef\u53d8\u5f15\u7528\u3002\u4e3a\u4e86\u80fd\u591f\u770b\u51fa Rust \u4f55\u65f6\u8c03\u7528 drop \uff0c\u8ba9\u6211\u4eec\u6682\u65f6\u4f7f\u7528 println! \u8bed\u53e5\u5b9e\u73b0 drop \u3002 \u793a\u4f8b 15-14 \u5c55\u793a\u4e86\u552f\u4e00\u5b9a\u5236\u529f\u80fd\u5c31\u662f\u5f53\u5176\u5b9e\u4f8b\u79bb\u5f00\u4f5c\u7528\u57df\u65f6\uff0c\u6253\u5370\u51fa Dropping CustomSmartPointer! \u7684\u7ed3\u6784\u4f53 CustomSmartPointer \u3002\u8fd9\u4f1a\u6f14\u793a Rust \u4f55\u65f6\u8fd0\u884c drop \u51fd\u6570\uff1a \u6587\u4ef6\u540d: src/main.rs struct CustomSmartPointer { data : String , } impl Drop for CustomSmartPointer { fn drop ( & mut self ) { println! ( \"Dropping CustomSmartPointer with data `{}`!\" , self . data ); } } fn main () { let c = CustomSmartPointer { data : String :: from ( \"my stuff\" ), }; let d = CustomSmartPointer { data : String :: from ( \"other stuff\" ), }; println! ( \"CustomSmartPointers created.\" ); } \u793a\u4f8b 15-14\uff1a\u7ed3\u6784\u4f53 CustomSmartPointer \uff0c\u5176\u5b9e\u73b0\u4e86\u653e\u7f6e\u6e05\u7406\u4ee3\u7801\u7684 Drop trait Drop trait \u5305\u542b\u5728 prelude \u4e2d\uff0c\u6240\u4ee5\u65e0\u9700\u5bfc\u5165\u5b83\u3002\u6211\u4eec\u5728 CustomSmartPointer \u4e0a\u5b9e\u73b0\u4e86 Drop trait\uff0c\u5e76\u63d0\u4f9b\u4e86\u4e00\u4e2a\u8c03\u7528 println! \u7684 drop \u65b9\u6cd5\u5b9e\u73b0\u3002 drop \u51fd\u6570\u4f53\u662f\u653e\u7f6e\u4efb\u4f55\u5f53\u7c7b\u578b\u5b9e\u4f8b\u79bb\u5f00\u4f5c\u7528\u57df\u65f6\u671f\u671b\u8fd0\u884c\u7684\u903b\u8f91\u7684\u5730\u65b9\u3002\u8fd9\u91cc\u9009\u62e9\u6253\u5370\u4e00\u4e9b\u6587\u672c\u4ee5\u5c55\u793a Rust \u4f55\u65f6\u8c03\u7528 drop \u3002 \u5728 main \u4e2d\uff0c\u6211\u4eec\u65b0\u5efa\u4e86\u4e24\u4e2a CustomSmartPointer \u5b9e\u4f8b\u5e76\u6253\u5370\u51fa\u4e86 CustomSmartPointer created. \u3002 \u5728 main \u7684\u7ed3\u5c3e\uff0c CustomSmartPointer \u7684\u5b9e\u4f8b\u4f1a\u79bb\u5f00\u4f5c\u7528\u57df\uff0c\u800c Rust \u4f1a\u8c03\u7528\u653e\u7f6e\u4e8e drop \u65b9\u6cd5\u4e2d\u7684\u4ee3\u7801\uff0c\u6253\u5370\u51fa\u6700\u540e\u7684\u4fe1\u606f\u3002\u6ce8\u610f\u65e0\u9700\u663e\u5f0f\u8c03\u7528 drop \u65b9\u6cd5\uff1a \u5f53\u8fd0\u884c\u8fd9\u4e2a\u7a0b\u5e8f\uff0c\u4f1a\u51fa\u73b0\u5982\u4e0b\u8f93\u51fa\uff1a $ cargo run Compiling drop-example v0.1.0 (file:///projects/drop-example) Finished dev [unoptimized + debuginfo] target(s) in 0.60s Running `target/debug/drop-example` CustomSmartPointers created. Dropping CustomSmartPointer with data `other stuff`! Dropping CustomSmartPointer with data `my stuff`! \u5f53\u5b9e\u4f8b\u79bb\u5f00\u4f5c\u7528\u57df Rust \u4f1a\u81ea\u52a8\u8c03\u7528 drop \uff0c\u5e76\u8c03\u7528\u6211\u4eec\u6307\u5b9a\u7684\u4ee3\u7801\u3002\u53d8\u91cf\u4ee5\u88ab\u521b\u5efa\u65f6\u76f8\u53cd\u7684\u987a\u5e8f\u88ab\u4e22\u5f03\uff0c\u6240\u4ee5 d \u5728 c \u4e4b\u524d\u88ab\u4e22\u5f03\u3002 \u8fd9\u4e2a\u4f8b\u5b50\u521a\u597d\u7ed9\u4e86\u6211\u4eec\u4e00\u4e2a drop \u65b9\u6cd5\u5982\u4f55\u5de5\u4f5c\u7684\u53ef\u89c6\u5316\u6307\u5bfc\uff0c\u4e0d\u8fc7\u901a\u5e38\u9700 \u8981\u6307\u5b9a\u7c7b\u578b\u6240\u9700\u6267\u884c\u7684\u6e05\u7406\u4ee3\u7801 \u800c\u4e0d\u662f\u6253\u5370\u4fe1\u606f\u3002 \u901a\u8fc7 std::mem::drop \u63d0\u65e9\u4e22\u5f03\u503c \u4e0d\u5e78\u7684\u662f\uff0c\u6211\u4eec\u5e76\u4e0d\u80fd\u76f4\u622a\u4e86\u5f53\u7684\u7981\u7528 drop \u8fd9\u4e2a\u529f\u80fd\u3002\u901a\u5e38\u4e5f\u4e0d\u9700\u8981\u7981\u7528 drop \uff1b\u6574\u4e2a Drop trait \u5b58\u5728\u7684\u610f\u4e49\u5728\u4e8e\u5176\u662f\u81ea\u52a8\u5904\u7406\u7684\u3002\u7136\u800c\uff0c\u6709\u65f6\u4f60\u53ef\u80fd\u9700\u8981\u63d0\u65e9\u6e05\u7406\u67d0\u4e2a\u503c\u3002\u4e00\u4e2a\u4f8b\u5b50\u662f\u5f53\u4f7f\u7528\u667a\u80fd\u6307\u9488\u7ba1\u7406\u9501\u65f6\uff1b\u4f60\u53ef\u80fd\u5e0c\u671b\u5f3a\u5236\u8fd0\u884c drop \u65b9\u6cd5\u6765\u91ca\u653e\u9501\u4ee5\u4fbf\u4f5c\u7528\u57df\u4e2d\u7684\u5176\u4ed6\u4ee3\u7801\u53ef\u4ee5\u83b7\u53d6\u9501\u3002 Rust \u5e76\u4e0d\u5141\u8bb8\u6211\u4eec\u4e3b\u52a8\u8c03\u7528 Drop trait \u7684 drop \u65b9\u6cd5 \uff1b\u5f53\u6211\u4eec\u5e0c\u671b\u5728\u4f5c\u7528\u57df\u7ed3\u675f\u4e4b\u524d\u5c31\u5f3a\u5236\u91ca\u653e\u53d8\u91cf\u7684\u8bdd\uff0c\u6211\u4eec\u5e94\u8be5\u4f7f\u7528\u7684\u662f\u7531\u6807\u51c6\u5e93\u63d0\u4f9b\u7684 std::mem::drop \u3002 \u5982\u679c\u6211\u4eec\u50cf\u662f\u793a\u4f8b 15-14 \u90a3\u6837\u5c1d\u8bd5\u8c03\u7528 Drop trait \u7684 drop \u65b9\u6cd5\uff0c\u5c31\u4f1a\u5f97\u5230\u50cf\u793a\u4f8b 15-15 \u90a3\u6837\u7684\u7f16\u8bd1\u9519\u8bef\uff1a \u6587\u4ef6\u540d: src/main.rs fn main () { let c = CustomSmartPointer { data : String :: from ( \"some data\" ), }; println! ( \"CustomSmartPointer created.\" ); c . drop (); println! ( \"CustomSmartPointer dropped before the end of main.\" ); } \u793a\u4f8b 15-15\uff1a\u5c1d\u8bd5\u624b\u52a8\u8c03\u7528 Drop trait \u7684 drop \u65b9\u6cd5\u63d0\u65e9\u6e05\u7406 \u5982\u679c\u5c1d\u8bd5\u7f16\u8bd1\u4ee3\u7801\u4f1a\u5f97\u5230\u5982\u4e0b\u9519\u8bef\uff1a $ cargo run Compiling drop-example v0.1.0 (file:///projects/drop-example) error[E0040]: explicit use of destructor method --> src/main.rs:16:7 | 16 | c.drop(); | --^^^^-- | | | | | explicit destructor calls not allowed | help: consider using `drop` function: `drop(c)` For more information about this error, try `rustc --explain E0040`. error: could not compile `drop-example` due to previous error \u9519\u8bef\u4fe1\u606f\u8868\u660e\u4e0d\u5141\u8bb8\u663e\u5f0f\u8c03\u7528 drop \u3002\u9519\u8bef\u4fe1\u606f\u4f7f\u7528\u4e86\u672f\u8bed \u6790\u6784\u51fd\u6570 \uff08 destructor \uff09\uff0c\u8fd9\u662f\u4e00\u4e2a\u6e05\u7406\u5b9e\u4f8b\u7684\u51fd\u6570\u7684\u901a\u7528\u7f16\u7a0b\u6982\u5ff5\u3002 \u6790\u6784\u51fd\u6570 \u5bf9\u5e94\u521b\u5efa\u5b9e\u4f8b\u7684 \u6784\u9020\u51fd\u6570 \u3002Rust \u4e2d\u7684 drop \u51fd\u6570\u5c31\u662f\u8fd9\u4e48\u4e00\u4e2a\u6790\u6784\u51fd\u6570\u3002 Rust \u4e0d\u5141\u8bb8\u6211\u4eec\u663e\u5f0f\u8c03\u7528 drop \u56e0\u4e3a Rust \u4ecd\u7136\u4f1a\u5728 main \u7684\u7ed3\u5c3e\u5bf9\u503c\u81ea\u52a8\u8c03\u7528 drop \uff0c\u8fd9\u4f1a\u5bfc\u81f4\u4e00\u4e2a double free \u9519\u8bef\uff0c\u56e0\u4e3a Rust \u4f1a\u5c1d\u8bd5\u6e05\u7406\u76f8\u540c\u7684\u503c\u4e24\u6b21 \u3002 \u56e0\u4e3a\u4e0d\u80fd\u7981\u7528\u5f53\u503c\u79bb\u5f00\u4f5c\u7528\u57df\u65f6\u81ea\u52a8\u63d2\u5165\u7684 drop \uff0c\u5e76\u4e14\u4e0d\u80fd\u663e\u5f0f\u8c03\u7528 drop \uff0c\u5982\u679c\u6211\u4eec\u9700\u8981\u5f3a\u5236\u63d0\u65e9\u6e05\u7406\u503c\uff0c\u53ef\u4ee5\u4f7f\u7528 std::mem::drop \u51fd\u6570\u3002 std::mem::drop \u51fd\u6570\u4e0d\u540c\u4e8e Drop trait \u4e2d\u7684 drop \u65b9\u6cd5\u3002\u53ef\u4ee5\u901a\u8fc7\u4f20\u9012\u5e0c\u671b\u63d0\u65e9\u5f3a\u5236\u4e22\u5f03\u7684\u503c\u4f5c\u4e3a\u53c2\u6570\u3002 std::mem::drop \u4f4d\u4e8e prelude\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u4fee\u6539\u793a\u4f8b 15-15 \u4e2d\u7684 main \u6765\u8c03\u7528 drop \u51fd\u6570\u3002\u5982\u793a\u4f8b 15-16 \u6240\u793a\uff1a \u6587\u4ef6\u540d: src/main.rs fn main () { let c = CustomSmartPointer { data : String :: from ( \"some data\" ), }; println! ( \"CustomSmartPointer created.\" ); drop ( c ); println! ( \"CustomSmartPointer dropped before the end of main.\" ); } \u793a\u4f8b 15-16: \u5728\u503c\u79bb\u5f00\u4f5c\u7528\u57df\u4e4b\u524d\u8c03\u7528 std::mem::drop \u663e\u5f0f\u6e05\u7406 \u8fd0\u884c\u8fd9\u6bb5\u4ee3\u7801\u4f1a\u6253\u5370\u51fa\u5982\u4e0b\uff1a $ cargo run Compiling drop-example v0.1.0 (file:///projects/drop-example) Finished dev [unoptimized + debuginfo] target(s) in 0.73s Running `target/debug/drop-example` CustomSmartPointer created. Dropping CustomSmartPointer with data `some data`! CustomSmartPointer dropped before the end of main. Dropping CustomSmartPointer with data `some data`! \u51fa\u73b0\u5728 CustomSmartPointer created. \u548c CustomSmartPointer dropped before the end of main. \u4e4b\u95f4\uff0c\u8868\u660e\u4e86 drop \u65b9\u6cd5\u88ab\u8c03\u7528\u4e86\u5e76\u5728\u6b64\u4e22\u5f03\u4e86 c \u3002 Drop trait \u5b9e\u73b0\u4e2d\u6307\u5b9a\u7684\u4ee3\u7801\u53ef\u4ee5\u7528\u4e8e\u8bb8\u591a\u65b9\u9762\uff0c\u6765\u4f7f\u5f97\u6e05\u7406\u53d8\u5f97\u65b9\u4fbf\u548c\u5b89\u5168\uff1a\u6bd4\u5982\u53ef\u4ee5\u7528\u5176\u521b\u5efa\u6211\u4eec\u81ea\u5df1\u7684\u5185\u5b58\u5206\u914d\u5668\uff01\u901a\u8fc7 Drop trait \u548c Rust \u6240\u6709\u6743\u7cfb\u7edf\uff0c\u4f60\u65e0\u9700\u62c5\u5fc3\u4e4b\u540e\u7684\u4ee3\u7801\u6e05\u7406\uff0cRust \u4f1a\u81ea\u52a8\u8003\u8651\u8fd9\u4e9b\u95ee\u9898\u3002 \u6211\u4eec\u4e5f\u65e0\u9700\u62c5\u5fc3\u610f\u5916\u7684\u6e05\u7406\u6389\u4ecd\u5728\u4f7f\u7528\u7684\u503c\uff0c\u8fd9\u4f1a\u9020\u6210\u7f16\u8bd1\u5668\u9519\u8bef\uff1a\u6240\u6709\u6743\u7cfb\u7edf\u786e\u4fdd\u5f15\u7528\u603b\u662f\u6709\u6548\u7684\uff0c\u4e5f\u4f1a\u786e\u4fdd drop \u53ea\u4f1a\u5728\u503c\u4e0d\u518d\u88ab\u4f7f\u7528\u65f6\u88ab\u8c03\u7528\u4e00\u6b21\u3002 \u73b0\u5728\u6211\u4eec\u5b66\u4e60\u4e86 Box<T> \u548c\u4e00\u4e9b\u667a\u80fd\u6307\u9488\u7684\u7279\u6027\uff0c\u8ba9\u6211\u4eec\u804a\u804a\u6807\u51c6\u5e93\u4e2d\u5b9a\u4e49\u7684\u5176\u4ed6\u51e0\u79cd\u667a\u80fd\u6307\u9488\u3002 Rc<T> \u5f15\u7528\u8ba1\u6570\u667a\u80fd\u6307\u9488 ch15-04-rc.md commit 45fe0fc9af98a214ed779d2cfac6773bdbfc708e \u5927\u90e8\u5206\u60c5\u51b5\u4e0b\u6240\u6709\u6743\u662f\u975e\u5e38\u660e\u786e\u7684\uff1a\u53ef\u4ee5\u51c6\u786e\u5730\u77e5\u9053\u54ea\u4e2a\u53d8\u91cf\u62e5\u6709\u67d0\u4e2a\u503c\u3002\u7136\u800c\uff0c \u6709\u4e9b\u60c5\u51b5\u5355\u4e2a\u503c\u53ef\u80fd\u4f1a\u6709\u591a\u4e2a\u6240\u6709\u8005 \u3002\u4f8b\u5982\uff0c\u5728\u56fe\u6570\u636e\u7ed3\u6784\u4e2d\uff0c\u591a\u4e2a\u8fb9\u53ef\u80fd\u6307\u5411\u76f8\u540c\u7684\u8282\u70b9\uff0c\u800c\u8fd9\u4e2a\u8282\u70b9\u4ece\u6982\u5ff5\u4e0a\u8bb2\u4e3a\u6240\u6709\u6307\u5411\u5b83\u7684\u8fb9\u6240\u62e5\u6709\u3002\u8282\u70b9\u76f4\u5230\u6ca1\u6709\u4efb\u4f55\u8fb9\u6307\u5411\u5b83\u4e4b\u524d\u90fd\u4e0d\u5e94\u8be5\u88ab\u6e05\u7406\u3002 \u4e3a\u4e86\u542f\u7528\u591a\u6240\u6709\u6743\uff0cRust \u6709\u4e00\u4e2a\u53eb\u505a Rc<T> \u7684\u7c7b\u578b\u3002\u5176\u540d\u79f0\u4e3a \u5f15\u7528\u8ba1\u6570 \uff08 reference counting \uff09\u7684\u7f29\u5199\u3002 \u5f15\u7528\u8ba1\u6570\u610f\u5473\u7740\u8bb0\u5f55\u4e00\u4e2a\u503c\u5f15\u7528\u7684\u6570\u91cf\u6765\u77e5\u6653\u8fd9\u4e2a\u503c\u662f\u5426\u4ecd\u5728\u88ab\u4f7f\u7528 \u3002\u5982\u679c\u67d0\u4e2a\u503c\u6709\u96f6\u4e2a\u5f15\u7528\uff0c\u5c31\u4ee3\u8868\u6ca1\u6709\u4efb\u4f55\u6709\u6548\u5f15\u7528\u5e76\u53ef\u4ee5\u88ab\u6e05\u7406\u3002 \u53ef\u4ee5\u5c06\u5176\u60f3\u8c61\u4e3a\u5ba2\u5385\u4e2d\u7684\u7535\u89c6\u3002\u5f53\u4e00\u4e2a\u4eba\u8fdb\u6765\u770b\u7535\u89c6\u65f6\uff0c\u4ed6\u6253\u5f00\u7535\u89c6\u3002\u5176\u4ed6\u4eba\u4e5f\u53ef\u4ee5\u8fdb\u6765\u770b\u7535\u89c6\u3002\u5f53\u6700\u540e\u4e00\u4e2a\u4eba\u79bb\u5f00\u623f\u95f4\u65f6\uff0c\u4ed6\u5173\u6389\u7535\u89c6\u56e0\u4e3a\u5b83\u4e0d\u518d\u88ab\u4f7f\u7528\u4e86\u3002\u5982\u679c\u67d0\u4eba\u5728\u5176\u4ed6\u4eba\u8fd8\u5728\u770b\u7684\u65f6\u5019\u5c31\u5173\u6389\u4e86\u7535\u89c6\uff0c\u6b63\u5728\u770b\u7535\u89c6\u7684\u4eba\u80af\u5b9a\u4f1a\u6293\u72c2\u7684\uff01 Rc<T> \u7528\u4e8e\u5f53\u6211\u4eec\u5e0c\u671b\u5728\u5806\u4e0a\u5206\u914d\u4e00\u4e9b\u5185\u5b58\u4f9b\u7a0b\u5e8f\u7684\u591a\u4e2a\u90e8\u5206\u8bfb\u53d6\uff0c\u800c\u4e14\u65e0\u6cd5\u5728\u7f16\u8bd1\u65f6\u786e\u5b9a\u7a0b\u5e8f\u7684\u54ea\u4e00\u90e8\u5206\u4f1a\u6700\u540e\u7ed3\u675f\u4f7f\u7528\u5b83\u7684\u65f6\u5019\u3002\u5982\u679c\u786e\u5b9e\u77e5\u9053\u54ea\u90e8\u5206\u662f\u6700\u540e\u4e00\u4e2a\u7ed3\u675f\u4f7f\u7528\u7684\u8bdd\uff0c\u5c31\u53ef\u4ee5\u4ee4\u5176\u6210\u4e3a\u6570\u636e\u7684\u6240\u6709\u8005\uff0c\u6b63\u5e38\u7684\u6240\u6709\u6743\u89c4\u5219\u5c31\u53ef\u4ee5\u5728\u7f16\u8bd1\u65f6\u751f\u6548\u3002 \u6ce8\u610f Rc<T> \u53ea\u80fd\u7528\u4e8e\u5355\u7ebf\u7a0b\u573a\u666f\uff1b\u7b2c\u5341\u516d\u7ae0\u5e76\u53d1\u4f1a\u6d89\u53ca\u5230\u5982\u4f55\u5728\u591a\u7ebf\u7a0b\u7a0b\u5e8f\u4e2d\u8fdb\u884c\u5f15\u7528\u8ba1\u6570\u3002 \u4f7f\u7528 Rc<T> \u5171\u4eab\u6570\u636e \u8ba9\u6211\u4eec\u56de\u5230\u793a\u4f8b 15-5 \u4e2d\u4f7f\u7528 Box<T> \u5b9a\u4e49 cons list \u7684\u4f8b\u5b50\u3002\u8fd9\u4e00\u6b21\uff0c\u6211\u4eec\u5e0c\u671b\u521b\u5efa\u4e24\u4e2a\u5171\u4eab\u7b2c\u4e09\u4e2a\u5217\u8868\u6240\u6709\u6743\u7684\u5217\u8868\uff0c\u5176\u6982\u5ff5\u5c06\u4f1a\u770b\u8d77\u6765\u5982\u56fe 15-3 \u6240\u793a\uff1a \u56fe 15-3: \u4e24\u4e2a\u5217\u8868, b \u548c c , \u5171\u4eab\u7b2c\u4e09\u4e2a\u5217\u8868 a \u7684\u6240\u6709\u6743 \u5217\u8868 a \u5305\u542b 5 \u4e4b\u540e\u662f 10\uff0c\u4e4b\u540e\u662f\u53e6\u4e24\u4e2a\u5217\u8868\uff1a b \u4ece 3 \u5f00\u59cb\u800c c \u4ece 4 \u5f00\u59cb\u3002 b \u548c c \u4f1a\u63a5\u4e0a\u5305\u542b 5 \u548c 10 \u7684\u5217\u8868 a \u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u8fd9\u4e24\u4e2a\u5217\u8868\u4f1a\u5c1d\u8bd5\u5171\u4eab\u7b2c\u4e00\u4e2a\u5217\u8868\u6240\u5305\u542b\u7684 5 \u548c 10\u3002 \u5c1d\u8bd5\u4f7f\u7528 Box<T> \u5b9a\u4e49\u7684 List \u5b9e\u73b0\u5e76\u4e0d\u80fd\u5de5\u4f5c\uff0c\u5982\u793a\u4f8b 15-17 \u6240\u793a\uff1a \u6587\u4ef6\u540d: src/main.rs enum List { Cons ( i32 , Box < List > ), Nil , } use crate :: List :: { Cons , Nil }; fn main () { let a = Cons ( 5 , Box :: new ( Cons ( 10 , Box :: new ( Nil )))); let b = Cons ( 3 , Box :: new ( a )); let c = Cons ( 4 , Box :: new ( a )); } \u793a\u4f8b 15-17: \u5c55\u793a\u4e0d\u80fd\u7528\u4e24\u4e2a Box<T> \u7684\u5217\u8868\u5c1d\u8bd5\u5171\u4eab\u7b2c\u4e09\u4e2a\u5217\u8868\u7684\u6240\u6709\u6743 \u7f16\u8bd1\u4f1a\u5f97\u51fa\u5982\u4e0b\u9519\u8bef\uff1a $ cargo run Compiling cons-list v0.1.0 (file:///projects/cons-list) error[E0382]: use of moved value: `a` --> src/main.rs:11:30 | 9 | let a = Cons(5, Box::new(Cons(10, Box::new(Nil)))); | - move occurs because `a` has type `List`, which does not implement the `Copy` trait 10 | let b = Cons(3, Box::new(a)); | - value moved here 11 | let c = Cons(4, Box::new(a)); | ^ value used here after move For more information about this error, try `rustc --explain E0382`. error: could not compile `cons-list` due to previous error Cons \u6210\u5458\u62e5\u6709\u5176\u50a8\u5b58\u7684\u6570\u636e\uff0c\u6240\u4ee5\u5f53\u521b\u5efa b \u5217\u8868\u65f6\uff0c a \u88ab\u79fb\u52a8\u8fdb\u4e86 b \u8fd9\u6837 b \u5c31\u62e5\u6709\u4e86 a \u3002\u63a5\u7740\u5f53\u518d\u6b21\u5c1d\u8bd5\u4f7f\u7528 a \u521b\u5efa c \u65f6\uff0c\u8fd9\u4e0d\u88ab\u5141\u8bb8\uff0c\u56e0\u4e3a a \u7684\u6240\u6709\u6743\u5df2\u7ecf\u88ab\u79fb\u52a8\u3002 \u53ef\u4ee5\u6539\u53d8 Cons \u7684\u5b9a\u4e49\u6765\u5b58\u653e\u4e00\u4e2a\u5f15\u7528\uff0c\u4e0d\u8fc7\u63a5\u7740\u5fc5\u987b\u6307\u5b9a\u751f\u547d\u5468\u671f\u53c2\u6570\u3002\u901a\u8fc7\u6307\u5b9a\u751f\u547d\u5468\u671f\u53c2\u6570\uff0c\u8868\u660e\u5217\u8868\u4e2d\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\u90fd\u81f3\u5c11\u4e0e\u5217\u8868\u672c\u8eab\u5b58\u5728\u7684\u4e00\u6837\u4e45\u3002\u8fd9\u662f\u793a\u4f8b 15-17 \u4e2d\u5143\u7d20\u4e0e\u5217\u8868\u7684\u60c5\u51b5\uff0c\u4f46\u5e76\u4e0d\u662f\u6240\u6709\u60c5\u51b5\u90fd\u5982\u6b64\u3002 \u76f8\u53cd\uff0c\u6211\u4eec\u4fee\u6539 List \u7684\u5b9a\u4e49\u4e3a\u4f7f\u7528 Rc<T> \u4ee3\u66ff Box<T> \uff0c\u5982\u5217\u8868 15-18 \u6240\u793a\u3002\u73b0\u5728\u6bcf\u4e00\u4e2a Cons \u53d8\u91cf\u90fd\u5305\u542b\u4e00\u4e2a\u503c\u548c\u4e00\u4e2a\u6307\u5411 List \u7684 Rc<T> \u3002\u5f53\u521b\u5efa b \u65f6\uff0c\u4e0d\u540c\u4e8e\u83b7\u53d6 a \u7684\u6240\u6709\u6743\uff0c\u8fd9\u91cc\u4f1a\u514b\u9686 a \u6240\u5305\u542b\u7684 Rc<List> \uff0c\u8fd9\u4f1a\u5c06\u5f15\u7528\u8ba1\u6570\u4ece 1 \u589e\u52a0\u5230 2 \u5e76\u5141\u8bb8 a \u548c b \u5171\u4eab Rc<List> \u4e2d\u6570\u636e\u7684\u6240\u6709\u6743\u3002\u521b\u5efa c \u65f6\u4e5f\u4f1a\u514b\u9686 a \uff0c\u8fd9\u4f1a\u5c06\u5f15\u7528\u8ba1\u6570\u4ece 2 \u589e\u52a0\u4e3a 3\u3002\u6bcf\u6b21\u8c03\u7528 Rc::clone \uff0c Rc<List> \u4e2d\u6570\u636e\u7684\u5f15\u7528\u8ba1\u6570\u90fd\u4f1a\u589e\u52a0\uff0c\u76f4\u5230\u6709\u96f6\u4e2a\u5f15\u7528\u4e4b\u524d\u5176\u6570\u636e\u90fd\u4e0d\u4f1a\u88ab\u6e05\u7406\u3002 \u6587\u4ef6\u540d: src/main.rs enum List { Cons ( i32 , Rc < List > ), Nil , } use crate :: List :: { Cons , Nil }; use std :: rc :: Rc ; fn main () { let a = Rc :: new ( Cons ( 5 , Rc :: new ( Cons ( 10 , Rc :: new ( Nil ))))); let b = Cons ( 3 , Rc :: clone ( & a )); let c = Cons ( 4 , Rc :: clone ( & a )); } \u793a\u4f8b 15-18: \u4f7f\u7528 Rc<T> \u5b9a\u4e49\u7684 List \u9700\u8981\u4f7f\u7528 use \u8bed\u53e5\u5c06 Rc<T> \u5f15\u5165\u4f5c\u7528\u57df\uff0c\u56e0\u4e3a\u5b83\u4e0d\u5728 prelude \u4e2d\u3002 \u5728 main \u4e2d\u521b\u5efa\u4e86\u5b58\u653e 5 \u548c 10 \u7684\u5217\u8868\u5e76\u5c06\u5176\u5b58\u653e\u5728 a \u7684\u65b0\u7684 Rc<List> \u4e2d\u3002 \u63a5\u7740\u5f53\u521b\u5efa b \u548c c \u65f6\uff0c\u8c03\u7528 Rc::clone \u51fd\u6570\u5e76\u4f20\u9012 a \u4e2d Rc<List> \u7684\u5f15\u7528\u4f5c\u4e3a\u53c2\u6570\u3002 \u4e5f\u53ef\u4ee5\u8c03\u7528 a.clone() \u800c\u4e0d\u662f Rc::clone(&a) \uff0c\u4e0d\u8fc7\u5728\u8fd9\u91cc Rust \u7684\u4e60\u60ef\u662f\u4f7f\u7528 Rc::clone \u3002 Rc::clone \u7684\u5b9e\u73b0\u5e76\u4e0d\u50cf\u5927\u90e8\u5206\u7c7b\u578b\u7684 clone \u5b9e\u73b0\u90a3\u6837\u5bf9\u6240\u6709\u6570\u636e\u8fdb\u884c\u6df1\u62f7\u8d1d\u3002 Rc::clone \u53ea\u4f1a\u589e\u52a0\u5f15\u7528\u8ba1\u6570\uff0c\u8fd9\u5e76\u4e0d\u4f1a\u82b1\u8d39\u591a\u5c11\u65f6\u95f4\u3002 \u6df1\u62f7\u8d1d\u53ef\u80fd\u4f1a\u82b1\u8d39\u5f88\u957f\u65f6\u95f4\u3002\u901a\u8fc7\u4f7f\u7528 Rc::clone \u8fdb\u884c\u5f15\u7528\u8ba1\u6570\uff0c\u53ef\u4ee5\u660e\u663e\u7684\u533a\u522b\u6df1\u62f7\u8d1d\u7c7b\u7684\u514b\u9686\u548c\u589e\u52a0\u5f15\u7528\u8ba1\u6570\u7c7b\u7684\u514b\u9686\u3002 \u5f53\u67e5\u627e\u4ee3\u7801\u4e2d\u7684\u6027\u80fd\u95ee\u9898\u65f6\uff0c\u53ea\u9700\u8003\u8651\u6df1\u62f7\u8d1d\u7c7b\u7684\u514b\u9686\u800c\u65e0\u9700\u8003\u8651 Rc::clone \u8c03\u7528\u3002 \u514b\u9686 Rc<T> \u4f1a\u589e\u52a0\u5f15\u7528\u8ba1\u6570 \u8ba9\u6211\u4eec\u4fee\u6539\u793a\u4f8b 15-18 \u7684\u4ee3\u7801\u4ee5\u4fbf\u89c2\u5bdf\u521b\u5efa\u548c\u4e22\u5f03 a \u4e2d Rc<List> \u7684\u5f15\u7528\u65f6\u5f15\u7528\u8ba1\u6570\u7684\u53d8\u5316\u3002 \u5728\u793a\u4f8b 15-19 \u4e2d\uff0c\u4fee\u6539\u4e86 main \u4ee5\u4fbf\u5c06\u5217\u8868 c \u7f6e\u4e8e\u5185\u90e8\u4f5c\u7528\u57df\u4e2d\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u89c2\u5bdf\u5f53 c \u79bb\u5f00\u4f5c\u7528\u57df\u65f6\u5f15\u7528\u8ba1\u6570\u5982\u4f55\u53d8\u5316\u3002 \u6587\u4ef6\u540d: src/main.rs fn main () { let a = Rc :: new ( Cons ( 5 , Rc :: new ( Cons ( 10 , Rc :: new ( Nil ))))); println! ( \"count after creating a = {}\" , Rc :: strong_count ( & a )); let b = Cons ( 3 , Rc :: clone ( & a )); println! ( \"count after creating b = {}\" , Rc :: strong_count ( & a )); { let c = Cons ( 4 , Rc :: clone ( & a )); println! ( \"count after creating c = {}\" , Rc :: strong_count ( & a )); } println! ( \"count after c goes out of scope = {}\" , Rc :: strong_count ( & a )); } \u793a\u4f8b 15-19\uff1a\u6253\u5370\u51fa\u5f15\u7528\u8ba1\u6570 \u5728\u7a0b\u5e8f\u4e2d\u6bcf\u4e2a\u5f15\u7528\u8ba1\u6570\u53d8\u5316\u7684\u70b9\uff0c\u4f1a\u6253\u5370\u51fa\u5f15\u7528\u8ba1\u6570\uff0c\u5176\u503c\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528 Rc::strong_count \u51fd\u6570\u83b7\u5f97\u3002\u8fd9\u4e2a\u51fd\u6570\u53eb\u505a strong_count \u800c\u4e0d\u662f count \u662f\u56e0\u4e3a Rc<T> \u4e5f\u6709 weak_count \uff1b\u5728 \u201c\u907f\u514d\u5f15\u7528\u5faa\u73af\uff1a\u5c06 Rc<T> \u53d8\u4e3a Weak<T> \u201d \u90e8\u5206\u4f1a\u8bb2\u89e3 weak_count \u7684\u7528\u9014\u3002 \u8fd9\u6bb5\u4ee3\u7801\u4f1a\u6253\u5370\u51fa\uff1a $ cargo run Compiling cons-list v0.1.0 (file:///projects/cons-list) Finished dev [unoptimized + debuginfo] target(s) in 0.45s Running `target/debug/cons-list` count after creating a = 1 count after creating b = 2 count after creating c = 3 count after c goes out of scope = 2 \u6211\u4eec\u80fd\u591f\u770b\u5230 a \u4e2d Rc<List> \u7684\u521d\u59cb\u5f15\u7528\u8ba1\u6570\u4e3a1\uff0c\u63a5\u7740\u6bcf\u6b21\u8c03\u7528 clone \uff0c\u8ba1\u6570\u4f1a\u589e\u52a01\u3002\u5f53 c \u79bb\u5f00\u4f5c\u7528\u57df\u65f6\uff0c\u8ba1\u6570\u51cf1\u3002\u4e0d\u5fc5\u50cf\u8c03\u7528 Rc::clone \u589e\u52a0\u5f15\u7528\u8ba1\u6570\u90a3\u6837\u8c03\u7528\u4e00\u4e2a\u51fd\u6570\u6765\u51cf\u5c11\u8ba1\u6570\uff1b Drop trait \u7684\u5b9e\u73b0\u5f53 Rc<T> \u503c\u79bb\u5f00\u4f5c\u7528\u57df\u65f6\u81ea\u52a8\u51cf\u5c11\u5f15\u7528\u8ba1\u6570\u3002 \u4ece\u8fd9\u4e2a\u4f8b\u5b50\u6211\u4eec\u6240\u4e0d\u80fd\u770b\u5230\u7684\u662f\uff0c\u5728 main \u7684\u7ed3\u5c3e\u5f53 b \u7136\u540e\u662f a \u79bb\u5f00\u4f5c\u7528\u57df\u65f6\uff0c\u6b64\u5904\u8ba1\u6570\u4f1a\u662f 0\uff0c\u540c\u65f6 Rc<List> \u88ab\u5b8c\u5168\u6e05\u7406\u3002\u4f7f\u7528 Rc<T> \u5141\u8bb8\u4e00\u4e2a\u503c\u6709\u591a\u4e2a\u6240\u6709\u8005\uff0c\u5f15\u7528\u8ba1\u6570\u5219\u786e\u4fdd\u53ea\u8981\u4efb\u4f55\u6240\u6709\u8005\u4f9d\u7136\u5b58\u5728\u5176\u503c\u4e5f\u4fdd\u6301\u6709\u6548\u3002 \u901a\u8fc7\u4e0d\u53ef\u53d8\u5f15\u7528\uff0c Rc<T> \u5141\u8bb8\u5728\u7a0b\u5e8f\u7684\u591a\u4e2a\u90e8\u5206\u4e4b\u95f4\u53ea\u8bfb\u5730\u5171\u4eab\u6570\u636e\u3002\u5982\u679c Rc<T> \u4e5f\u5141\u8bb8\u591a\u4e2a\u53ef\u53d8\u5f15\u7528\uff0c\u5219\u4f1a\u8fdd\u53cd\u7b2c\u56db\u7ae0\u8ba8\u8bba\u7684\u501f\u7528\u89c4\u5219\u4e4b\u4e00\uff1a\u76f8\u540c\u4f4d\u7f6e\u7684\u591a\u4e2a\u53ef\u53d8\u501f\u7528\u53ef\u80fd\u9020\u6210\u6570\u636e\u7ade\u4e89\u548c\u4e0d\u4e00\u81f4\u3002\u4e0d\u8fc7\u53ef\u4ee5\u4fee\u6539\u6570\u636e\u662f\u975e\u5e38\u6709\u7528\u7684\uff01\u5728\u4e0b\u4e00\u90e8\u5206\uff0c\u6211\u4eec\u5c06\u8ba8\u8bba\u5185\u90e8\u53ef\u53d8\u6027\u6a21\u5f0f\u548c RefCell<T> \u7c7b\u578b\uff0c\u5b83\u53ef\u4ee5\u4e0e Rc<T> \u7ed3\u5408\u4f7f\u7528\u6765\u5904\u7406\u4e0d\u53ef\u53d8\u6027\u7684\u9650\u5236\u3002 RefCell<T> \u548c\u5185\u90e8\u53ef\u53d8\u6027\u6a21\u5f0f ch15-05-interior-mutability.md commit 74edb8dfe07edf8fdae49c6385c72840c07dd18f \u5185\u90e8\u53ef\u53d8\u6027 \uff08 Interior mutability \uff09\u662f Rust \u4e2d\u7684\u4e00\u4e2a\u8bbe\u8ba1\u6a21\u5f0f\uff0c \u5b83\u5141\u8bb8\u4f60\u5373\u4f7f\u5728\u6709\u4e0d\u53ef\u53d8\u5f15\u7528\u65f6\u4e5f\u53ef\u4ee5\u6539\u53d8\u6570\u636e\uff0c\u8fd9\u901a\u5e38\u662f\u501f\u7528\u89c4\u5219\u6240\u4e0d\u5141\u8bb8\u7684 \u3002 \u4e3a\u4e86\u6539\u53d8\u6570\u636e\uff0c\u8be5\u6a21\u5f0f\u5728\u6570\u636e\u7ed3\u6784\u4e2d\u4f7f\u7528 unsafe \u4ee3\u7801\u6765\u6a21\u7cca Rust \u901a\u5e38\u7684\u53ef\u53d8\u6027\u548c\u501f\u7528\u89c4\u5219\u3002 \u6211\u4eec\u8fd8\u672a\u8bb2\u5230\u4e0d\u5b89\u5168\u4ee3\u7801\uff1b\u7b2c\u5341\u4e5d\u7ae0\u4f1a\u5b66\u4e60\u5b83\u4eec\u3002\u5f53\u53ef\u4ee5\u786e\u4fdd\u4ee3\u7801\u5728\u8fd0\u884c\u65f6\u4f1a\u9075\u5b88\u501f\u7528\u89c4\u5219\uff0c\u5373\u4f7f\u7f16\u8bd1\u5668\u4e0d\u80fd\u4fdd\u8bc1\u7684\u60c5\u51b5\uff0c\u53ef\u4ee5\u9009\u62e9\u4f7f\u7528\u90a3\u4e9b\u8fd0\u7528\u5185\u90e8\u53ef\u53d8\u6027\u6a21\u5f0f\u7684\u7c7b\u578b\u3002 \u6240\u6d89\u53ca\u7684 unsafe \u4ee3\u7801\u5c06\u88ab\u5c01\u88c5\u8fdb\u5b89\u5168\u7684 API \u4e2d\uff0c\u800c\u5916\u90e8\u7c7b\u578b\u4ecd\u7136\u662f\u4e0d\u53ef\u53d8\u7684\u3002 \u8ba9\u6211\u4eec\u901a\u8fc7\u9075\u5faa\u5185\u90e8\u53ef\u53d8\u6027\u6a21\u5f0f\u7684 RefCell<T> \u7c7b\u578b\u6765\u5f00\u59cb\u63a2\u7d22\u3002 \u901a\u8fc7 RefCell<T> \u5728\u8fd0\u884c\u65f6\u68c0\u67e5\u501f\u7528\u89c4\u5219 \u4e0d\u540c\u4e8e Rc<T> \uff0c RefCell<T> \u4ee3\u8868\u5176\u6570\u636e\u7684\u552f\u4e00\u7684\u6240\u6709\u6743\u3002\u90a3\u4e48\u662f\u4ec0\u4e48\u8ba9 RefCell<T> \u4e0d\u540c\u4e8e\u50cf Box<T> \u8fd9\u6837\u7684\u7c7b\u578b\u5462\uff1f\u56de\u5fc6\u4e00\u4e0b\u7b2c\u56db\u7ae0\u6240\u5b66\u7684\u501f\u7528\u89c4\u5219\uff1a \u5728\u4efb\u610f\u7ed9\u5b9a\u65f6\u523b\uff0c\u53ea\u80fd\u62e5\u6709\u4e00\u4e2a\u53ef\u53d8\u5f15\u7528\u6216\u4efb\u610f\u6570\u91cf\u7684\u4e0d\u53ef\u53d8\u5f15\u7528 \u4e4b\u4e00 \uff08\u800c\u4e0d\u662f\u4e24\u8005\uff09\u3002 \u5f15\u7528\u5fc5\u987b\u603b\u662f\u6709\u6548\u7684\u3002 \u5bf9\u4e8e\u5f15\u7528\u548c Box<T> \uff0c\u501f\u7528\u89c4\u5219\u7684\u4e0d\u53ef\u53d8\u6027\u4f5c\u7528\u4e8e\u7f16\u8bd1\u65f6\u3002 \u5bf9\u4e8e RefCell<T> \uff0c\u8fd9\u4e9b\u4e0d\u53ef\u53d8\u6027\u4f5c\u7528\u4e8e \u8fd0\u884c\u65f6 \u3002 \u5bf9\u4e8e\u5f15\u7528\uff0c\u5982\u679c\u8fdd\u53cd\u8fd9\u4e9b\u89c4\u5219\uff0c\u4f1a\u5f97\u5230\u4e00\u4e2a\u7f16\u8bd1\u9519\u8bef\u3002 \u800c\u5bf9\u4e8e RefCell<T> \uff0c\u5982\u679c\u8fdd\u53cd\u8fd9\u4e9b\u89c4\u5219\u7a0b\u5e8f\u4f1a panic \u5e76\u9000\u51fa\u3002 \u5728\u7f16\u8bd1\u65f6\u68c0\u67e5\u501f\u7528\u89c4\u5219\u7684\u4f18\u52bf\u662f\u8fd9\u4e9b\u9519\u8bef\u5c06\u5728\u5f00\u53d1\u8fc7\u7a0b\u7684\u65e9\u671f\u88ab\u6355\u83b7\uff0c\u540c\u65f6\u5bf9\u8fd0\u884c\u65f6\u6ca1\u6709\u6027\u80fd\u5f71\u54cd\uff0c\u56e0\u4e3a\u6240\u6709\u7684\u5206\u6790\u90fd\u63d0\u524d\u5b8c\u6210\u4e86\u3002\u4e3a\u6b64\uff0c\u5728\u7f16\u8bd1\u65f6\u68c0\u67e5\u501f\u7528\u89c4\u5219\u662f\u5927\u90e8\u5206\u60c5\u51b5\u7684\u6700\u4f73\u9009\u62e9\uff0c\u8fd9\u4e5f\u6b63\u662f\u5176\u4e3a\u4f55\u662f Rust \u7684\u9ed8\u8ba4\u884c\u4e3a\u3002 \u76f8\u53cd\u5728\u8fd0\u884c\u65f6\u68c0\u67e5\u501f\u7528\u89c4\u5219\u7684\u597d\u5904\u5219\u662f\u5141\u8bb8\u51fa\u73b0\u7279\u5b9a\u5185\u5b58\u5b89\u5168\u7684\u573a\u666f\uff0c\u800c\u5b83\u4eec\u5728\u7f16\u8bd1\u65f6\u68c0\u67e5\u4e2d\u662f\u4e0d\u5141\u8bb8\u7684\u3002\u9759\u6001\u5206\u6790\uff0c\u6b63\u5982 Rust \u7f16\u8bd1\u5668\uff0c\u662f\u5929\u751f\u4fdd\u5b88\u7684\u3002\u4f46\u4ee3\u7801\u7684\u4e00\u4e9b\u5c5e\u6027\u4e0d\u53ef\u80fd\u901a\u8fc7\u5206\u6790\u4ee3\u7801\u53d1\u73b0\uff1a\u5176\u4e2d\u6700\u8457\u540d\u7684\u5c31\u662f \u505c\u673a\u95ee\u9898\uff08Halting Problem\uff09 \uff0c\u8fd9\u8d85\u51fa\u4e86\u672c\u4e66\u7684\u8303\u7574\uff0c\u4e0d\u8fc7\u5982\u679c\u4f60\u611f\u5174\u8da3\u7684\u8bdd\u8fd9\u662f\u4e00\u4e2a\u503c\u5f97\u7814\u7a76\u7684\u6709\u8da3\u4e3b\u9898\u3002 \u56e0\u4e3a\u4e00\u4e9b\u5206\u6790\u662f\u4e0d\u53ef\u80fd\u7684\uff0c\u5982\u679c Rust \u7f16\u8bd1\u5668\u4e0d\u80fd\u901a\u8fc7\u6240\u6709\u6743\u89c4\u5219\u7f16\u8bd1\uff0c\u5b83\u53ef\u80fd\u4f1a\u62d2\u7edd\u4e00\u4e2a\u6b63\u786e\u7684\u7a0b\u5e8f\uff1b\u4ece\u8fd9\u79cd\u89d2\u5ea6\u8003\u8651\u5b83\u662f\u4fdd\u5b88\u7684\u3002\u5982\u679c Rust \u63a5\u53d7\u4e0d\u6b63\u786e\u7684\u7a0b\u5e8f\uff0c\u90a3\u4e48\u7528\u6237\u4e5f\u5c31\u4e0d\u4f1a\u76f8\u4fe1 Rust \u6240\u505a\u7684\u4fdd\u8bc1\u4e86\u3002\u7136\u800c\uff0c\u5982\u679c Rust \u62d2\u7edd\u6b63\u786e\u7684\u7a0b\u5e8f\uff0c\u867d\u7136\u4f1a\u7ed9\u7a0b\u5e8f\u5458\u5e26\u6765\u4e0d\u4fbf\uff0c\u4f46\u4e0d\u4f1a\u5e26\u6765\u707e\u96be\u3002 RefCell<T> \u6b63\u662f\u7528\u4e8e\u5f53\u4f60\u786e\u4fe1\u4ee3\u7801\u9075\u5b88\u501f\u7528\u89c4\u5219\uff0c\u800c\u7f16\u8bd1\u5668\u4e0d\u80fd\u7406\u89e3\u548c\u786e\u5b9a\u7684\u65f6\u5019\u3002 \u7c7b\u4f3c\u4e8e Rc<T> \uff0c RefCell<T> \u53ea\u80fd\u7528\u4e8e\u5355\u7ebf\u7a0b\u573a\u666f\u3002\u5982\u679c\u5c1d\u8bd5\u5728\u591a\u7ebf\u7a0b\u4e0a\u4e0b\u6587\u4e2d\u4f7f\u7528 RefCell<T> \uff0c\u4f1a\u5f97\u5230\u4e00\u4e2a\u7f16\u8bd1\u9519\u8bef\u3002\u7b2c\u5341\u516d\u7ae0\u4f1a\u4ecb\u7ecd\u5982\u4f55\u5728\u591a\u7ebf\u7a0b\u7a0b\u5e8f\u4e2d\u4f7f\u7528 RefCell<T> \u7684\u529f\u80fd\u3002 \u5982\u4e0b\u4e3a\u9009\u62e9 Box<T> \uff0c Rc<T> \u6216 RefCell<T> \u7684\u7406\u7531\uff1a Rc<T> \u5141\u8bb8\u76f8\u540c\u6570\u636e\u6709\u591a\u4e2a\u6240\u6709\u8005\uff1b Box<T> \u548c RefCell<T> \u6709\u5355\u4e00\u6240\u6709\u8005\u3002 Box<T> \u5141\u8bb8\u5728\u7f16\u8bd1\u65f6\u6267\u884c\u4e0d\u53ef\u53d8\u6216\u53ef\u53d8\u501f\u7528\u68c0\u67e5\uff1b Rc<T> \u4ec5\u5141\u8bb8\u5728\u7f16\u8bd1\u65f6\u6267\u884c\u4e0d\u53ef\u53d8\u501f\u7528\u68c0\u67e5\uff1b RefCell<T> \u5141\u8bb8\u5728\u8fd0\u884c\u65f6\u6267\u884c\u4e0d\u53ef\u53d8\u6216\u53ef\u53d8\u501f\u7528\u68c0\u67e5\u3002 \u56e0\u4e3a RefCell<T> \u5141\u8bb8\u5728\u8fd0\u884c\u65f6\u6267\u884c\u53ef\u53d8\u501f\u7528\u68c0\u67e5\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5728\u5373\u4fbf RefCell<T> \u81ea\u8eab\u662f\u4e0d\u53ef\u53d8\u7684\u60c5\u51b5\u4e0b\u4fee\u6539\u5176\u5185\u90e8\u7684\u503c\u3002 \u5728\u4e0d\u53ef\u53d8\u503c\u5185\u90e8\u6539\u53d8\u503c\u5c31\u662f \u5185\u90e8\u53ef\u53d8\u6027 \u6a21\u5f0f\u3002\u8ba9\u6211\u4eec\u770b\u770b\u4f55\u65f6\u5185\u90e8\u53ef\u53d8\u6027\u662f\u6709\u7528\u7684\uff0c\u5e76\u8ba8\u8bba\u8fd9\u662f\u5982\u4f55\u6210\u4e3a\u53ef\u80fd\u7684\u3002 \u5185\u90e8\u53ef\u53d8\u6027\uff1a\u4e0d\u53ef\u53d8\u503c\u7684\u53ef\u53d8\u501f\u7528 \u501f\u7528\u89c4\u5219\u7684\u4e00\u4e2a\u63a8\u8bba\u662f\u5f53\u6709\u4e00\u4e2a\u4e0d\u53ef\u53d8\u503c\u65f6\uff0c\u4e0d\u80fd\u53ef\u53d8\u5730\u501f\u7528\u5b83\u3002\u4f8b\u5982\uff0c\u5982\u4e0b\u4ee3\u7801\u4e0d\u80fd\u7f16\u8bd1\uff1a fn main () { let x = 5 ; let y = & mut x ; } \u5982\u679c\u5c1d\u8bd5\u7f16\u8bd1\uff0c\u4f1a\u5f97\u5230\u5982\u4e0b\u9519\u8bef\uff1a $ cargo run Compiling borrowing v0.1.0 (file:///projects/borrowing) error[E0596]: cannot borrow `x` as mutable, as it is not declared as mutable --> src/main.rs:3:13 | 2 | let x = 5; | - help: consider changing this to be mutable: `mut x` 3 | let y = &mut x; | ^^^^^^ cannot borrow as mutable For more information about this error, try `rustc --explain E0596`. error: could not compile `borrowing` due to previous error \u7136\u800c\uff0c \u7279\u5b9a\u60c5\u51b5\u4e0b\uff0c\u4ee4\u4e00\u4e2a\u503c\u5728\u5176\u65b9\u6cd5\u5185\u90e8\u80fd\u591f\u4fee\u6539\u81ea\u8eab\uff0c\u800c\u5728\u5176\u4ed6\u4ee3\u7801\u4e2d\u4ecd\u89c6\u4e3a\u4e0d\u53ef\u53d8\uff0c\u662f\u5f88\u6709\u7528\u7684\u3002 \u503c\u65b9\u6cd5\u5916\u90e8\u7684\u4ee3\u7801\u5c31\u4e0d\u80fd\u4fee\u6539\u5176\u503c\u4e86\u3002 RefCell<T> \u662f\u4e00\u4e2a\u83b7\u5f97\u5185\u90e8\u53ef\u53d8\u6027\u7684\u65b9\u6cd5\u3002 RefCell<T> \u5e76\u6ca1\u6709\u5b8c\u5168\u7ed5\u5f00\u501f\u7528\u89c4\u5219\uff0c\u7f16\u8bd1\u5668\u4e2d\u7684\u501f\u7528\u68c0\u67e5\u5668\u5141\u8bb8\u5185\u90e8\u53ef\u53d8\u6027\u5e76\u76f8\u5e94\u5730\u5728\u8fd0\u884c\u65f6\u68c0\u67e5\u501f\u7528\u89c4\u5219\u3002 \u5982\u679c\u8fdd\u53cd\u4e86\u8fd9\u4e9b\u89c4\u5219\uff0c\u4f1a\u51fa\u73b0 panic \u800c\u4e0d\u662f\u7f16\u8bd1\u9519\u8bef\u3002 \u8ba9\u6211\u4eec\u901a\u8fc7\u4e00\u4e2a\u5b9e\u9645\u7684\u4f8b\u5b50\u6765\u63a2\u7d22\u4f55\u5904\u53ef\u4ee5\u4f7f\u7528 RefCell<T> \u6765\u4fee\u6539\u4e0d\u53ef\u53d8\u503c\u5e76\u770b\u770b\u4e3a\u4f55\u8fd9\u4e48\u505a\u662f\u6709\u610f\u4e49\u7684\u3002 \u5185\u90e8\u53ef\u53d8\u6027\u7684\u7528\u4f8b\uff1amock \u5bf9\u8c61 \u6d4b\u8bd5\u66ff\u8eab \uff08 test double \uff09\u662f\u4e00\u4e2a\u901a\u7528\u7f16\u7a0b\u6982\u5ff5\uff0c\u5b83\u4ee3\u8868\u4e00\u4e2a\u5728\u6d4b\u8bd5\u4e2d\u66ff\u4ee3\u67d0\u4e2a\u7c7b\u578b\u7684\u7c7b\u578b\u3002 mock \u5bf9\u8c61 \u662f\u7279\u5b9a\u7c7b\u578b\u7684\u6d4b\u8bd5\u66ff\u8eab\uff0c\u5b83\u4eec\u8bb0\u5f55\u6d4b\u8bd5\u8fc7\u7a0b\u4e2d\u53d1\u751f\u4e86\u4ec0\u4e48\u4ee5\u4fbf\u53ef\u4ee5\u65ad\u8a00\u64cd\u4f5c\u662f\u6b63\u786e\u7684\u3002 \u867d\u7136 Rust \u4e2d\u7684\u5bf9\u8c61\u4e0e\u5176\u4ed6\u8bed\u8a00\u4e2d\u7684\u5bf9\u8c61\u5e76\u4e0d\u662f\u4e00\u56de\u4e8b\uff0cRust \u4e5f\u6ca1\u6709\u50cf\u5176\u4ed6\u8bed\u8a00\u90a3\u6837\u5728\u6807\u51c6\u5e93\u4e2d\u5185\u5efa mock \u5bf9\u8c61\u529f\u80fd\uff0c\u4e0d\u8fc7\u6211\u4eec\u786e\u5b9e\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u4e0e mock \u5bf9\u8c61\u6709\u7740\u76f8\u540c\u529f\u80fd\u7684\u7ed3\u6784\u4f53\u3002 \u5982\u4e0b\u662f\u4e00\u4e2a\u6211\u4eec\u60f3\u8981\u6d4b\u8bd5\u7684\u573a\u666f\uff1a\u6211\u4eec\u5728\u7f16\u5199\u4e00\u4e2a\u8bb0\u5f55\u67d0\u4e2a\u503c\u4e0e\u6700\u5927\u503c\u7684\u5dee\u8ddd\u7684\u5e93\uff0c\u5e76\u6839\u636e\u5f53\u524d\u503c\u4e0e\u6700\u5927\u503c\u7684\u5dee\u8ddd\u6765\u53d1\u9001\u6d88\u606f\u3002\u4f8b\u5982\uff0c\u8fd9\u4e2a\u5e93\u53ef\u4ee5\u7528\u4e8e\u8bb0\u5f55\u7528\u6237\u6240\u5141\u8bb8\u7684 API \u8c03\u7528\u6570\u91cf\u9650\u989d\u3002 \u8be5\u5e93\u53ea\u63d0\u4f9b\u8bb0\u5f55\u4e0e\u6700\u5927\u503c\u7684\u5dee\u8ddd\uff0c\u4ee5\u53ca\u4f55\u79cd\u60c5\u51b5\u53d1\u9001\u4ec0\u4e48\u6d88\u606f\u7684\u529f\u80fd\u3002\u4f7f\u7528\u6b64\u5e93\u7684\u7a0b\u5e8f\u5219\u671f\u671b\u63d0\u4f9b\u5b9e\u9645\u53d1\u9001\u6d88\u606f\u7684\u673a\u5236\uff1a\u7a0b\u5e8f\u53ef\u4ee5\u9009\u62e9\u8bb0\u5f55\u4e00\u6761\u6d88\u606f\u3001\u53d1\u9001 email\u3001\u53d1\u9001\u77ed\u4fe1\u7b49\u7b49\u3002\u5e93\u672c\u8eab\u65e0\u9700\u77e5\u9053\u8fd9\u4e9b\u7ec6\u8282\uff1b\u53ea\u9700\u5b9e\u73b0\u5176\u63d0\u4f9b\u7684 Messenger trait \u5373\u53ef\u3002\u793a\u4f8b 15-20 \u5c55\u793a\u4e86\u5e93\u4ee3\u7801\uff1a \u6587\u4ef6\u540d: src/lib.rs pub trait Messenger { fn send ( & self , msg : & str ); } pub struct LimitTracker <' a , T : Messenger > { messenger : & ' a T , value : usize , max : usize , } impl <' a , T > LimitTracker <' a , T > where T : Messenger , { pub fn new ( messenger : & T , max : usize ) -> LimitTracker < T > { LimitTracker { messenger , value : 0 , max , } } pub fn set_value ( & mut self , value : usize ) { self . value = value ; let percentage_of_max = self . value as f64 / self . max as f64 ; if percentage_of_max >= 1.0 { self . messenger . send ( \"Error: You are over your quota!\" ); } else if percentage_of_max >= 0.9 { self . messenger . send ( \"Urgent warning: You've used up over 90% of your quota!\" ); } else if percentage_of_max >= 0.75 { self . messenger . send ( \"Warning: You've used up over 75% of your quota!\" ); } } } \u793a\u4f8b 15-20\uff1a\u4e00\u4e2a\u8bb0\u5f55\u67d0\u4e2a\u503c\u4e0e\u6700\u5927\u503c\u5dee\u8ddd\u7684\u5e93\uff0c\u5e76\u6839\u636e\u6b64\u503c\u7684\u7279\u5b9a\u7ea7\u522b\u53d1\u51fa\u8b66\u544a \u8fd9\u4e9b\u4ee3\u7801\u4e2d\u4e00\u4e2a\u91cd\u8981\u90e8\u5206\u662f\u62e5\u6709\u4e00\u4e2a\u65b9\u6cd5 send \u7684 Messenger trait\uff0c\u5176\u83b7\u53d6\u4e00\u4e2a self \u7684\u4e0d\u53ef\u53d8\u5f15\u7528\u548c\u6587\u672c\u4fe1\u606f\u3002\u8fd9\u4e2a trait \u662f mock \u5bf9\u8c61\u6240\u9700\u8981\u5b9e\u73b0\u7684\u63a5\u53e3\u5e93\uff0c\u8fd9\u6837 mock \u5c31\u80fd\u50cf\u4e00\u4e2a\u771f\u6b63\u7684\u5bf9\u8c61\u90a3\u6837\u4f7f\u7528\u4e86\u3002\u53e6\u4e00\u4e2a\u91cd\u8981\u7684\u90e8\u5206\u662f\u6211\u4eec\u9700\u8981\u6d4b\u8bd5 LimitTracker \u7684 set_value \u65b9\u6cd5\u7684\u884c\u4e3a\u3002\u53ef\u4ee5\u6539\u53d8\u4f20\u9012\u7684 value \u53c2\u6570\u7684\u503c\uff0c\u4e0d\u8fc7 set_value \u5e76\u6ca1\u6709\u8fd4\u56de\u4efb\u4f55\u53ef\u4f9b\u65ad\u8a00\u7684\u503c\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5982\u679c\u4f7f\u7528\u67d0\u4e2a\u5b9e\u73b0\u4e86 Messenger trait \u7684\u503c\u548c\u7279\u5b9a\u7684 max \u521b\u5efa LimitTracker \uff0c\u5f53\u4f20\u9012\u4e0d\u540c value \u503c\u65f6\uff0c\u6d88\u606f\u53d1\u9001\u8005\u5e94\u88ab\u544a\u77e5\u53d1\u9001\u5408\u9002\u7684\u6d88\u606f\u3002 \u6211\u4eec\u6240\u9700\u7684 mock \u5bf9\u8c61\u662f\uff0c\u8c03\u7528 send \u5e76\u4e0d\u5b9e\u9645\u53d1\u9001 email \u6216\u6d88\u606f\uff0c\u800c\u662f\u53ea\u8bb0\u5f55\u4fe1\u606f\u88ab\u901a\u77e5\u8981\u53d1\u9001\u4e86\u3002\u53ef\u4ee5\u65b0\u5efa\u4e00\u4e2a mock \u5bf9\u8c61\u5b9e\u4f8b\uff0c\u7528\u5176\u521b\u5efa LimitTracker \uff0c\u8c03\u7528 LimitTracker \u7684 set_value \u65b9\u6cd5\uff0c\u7136\u540e\u68c0\u67e5 mock \u5bf9\u8c61\u662f\u5426\u6709\u6211\u4eec\u671f\u671b\u7684\u6d88\u606f\u3002\u793a\u4f8b 15-21 \u5c55\u793a\u4e86\u4e00\u4e2a\u5982\u6b64\u5c1d\u8bd5\u7684 mock \u5bf9\u8c61\u5b9e\u73b0\uff0c\u4e0d\u8fc7\u501f\u7528\u68c0\u67e5\u5668\u5e76\u4e0d\u5141\u8bb8\uff1a \u6587\u4ef6\u540d: src/lib.rs #[cfg(test)] mod tests { use super :: * ; struct MockMessenger { sent_messages : Vec < String > , } impl MockMessenger { fn new () -> MockMessenger { MockMessenger { sent_messages : vec ! [], } } } impl Messenger for MockMessenger { fn send ( & self , message : & str ) { self . sent_messages . push ( String :: from ( message )); } } #[test] fn it_sends_an_over_75_percent_warning_message () { let mock_messenger = MockMessenger :: new (); let mut limit_tracker = LimitTracker :: new ( & mock_messenger , 100 ); limit_tracker . set_value ( 80 ); assert_eq! ( mock_messenger . sent_messages . len (), 1 ); } } \u793a\u4f8b 15-21\uff1a\u5c1d\u8bd5\u5b9e\u73b0 MockMessenger \uff0c\u501f\u7528\u68c0\u67e5\u5668\u4e0d\u5141\u8bb8\u8fd9\u4e48\u505a \u6d4b\u8bd5\u4ee3\u7801\u5b9a\u4e49\u4e86\u4e00\u4e2a MockMessenger \u7ed3\u6784\u4f53\uff0c\u5176 sent_messages \u5b57\u6bb5\u4e3a\u4e00\u4e2a String \u503c\u7684 Vec \u7528\u6765\u8bb0\u5f55\u88ab\u544a\u77e5\u53d1\u9001\u7684\u6d88\u606f\u3002\u6211\u4eec\u8fd8\u5b9a\u4e49\u4e86\u4e00\u4e2a\u5173\u8054\u51fd\u6570 new \u4ee5\u4fbf\u4e8e\u65b0\u5efa\u4ece\u7a7a\u6d88\u606f\u5217\u8868\u5f00\u59cb\u7684 MockMessenger \u503c\u3002\u63a5\u7740\u4e3a MockMessenger \u5b9e\u73b0 Messenger trait \u8fd9\u6837\u5c31\u53ef\u4ee5\u4e3a LimitTracker \u63d0\u4f9b\u4e00\u4e2a MockMessenger \u3002\u5728 send \u65b9\u6cd5\u7684\u5b9a\u4e49\u4e2d\uff0c\u83b7\u53d6\u4f20\u5165\u7684\u6d88\u606f\u4f5c\u4e3a\u53c2\u6570\u5e76\u50a8\u5b58\u5728 MockMessenger \u7684 sent_messages \u5217\u8868\u4e2d\u3002 \u5728\u6d4b\u8bd5\u4e2d\uff0c\u6211\u4eec\u6d4b\u8bd5\u4e86\u5f53 LimitTracker \u88ab\u544a\u77e5\u5c06 value \u8bbe\u7f6e\u4e3a\u8d85\u8fc7 max \u503c 75% \u7684\u67d0\u4e2a\u503c\u3002\u9996\u5148\u65b0\u5efa\u4e00\u4e2a MockMessenger \uff0c\u5176\u4ece\u7a7a\u6d88\u606f\u5217\u8868\u5f00\u59cb\u3002\u63a5\u7740\u65b0\u5efa\u4e00\u4e2a LimitTracker \u5e76\u4f20\u9012\u65b0\u5efa MockMessenger \u7684\u5f15\u7528\u548c max \u503c 100\u3002\u6211\u4eec\u4f7f\u7528\u503c 80 \u8c03\u7528 LimitTracker \u7684 set_value \u65b9\u6cd5\uff0c\u8fd9\u8d85\u8fc7\u4e86 100 \u7684 75%\u3002\u63a5\u7740\u65ad\u8a00 MockMessenger \u4e2d\u8bb0\u5f55\u7684\u6d88\u606f\u5217\u8868\u5e94\u8be5\u6709\u4e00\u6761\u6d88\u606f\u3002 \u7136\u800c\uff0c\u8fd9\u4e2a\u6d4b\u8bd5\u662f\u6709\u95ee\u9898\u7684\uff1a $ cargo test Compiling limit-tracker v0.1.0 (file:///projects/limit-tracker) error[E0596]: cannot borrow `self.sent_messages` as mutable, as it is behind a `&` reference --> src/lib.rs:58:13 | 2 | fn send(&self, msg: &str); | ----- help: consider changing that to be a mutable reference: `&mut self` ... 58 | self.sent_messages.push(String::from(message)); | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `self` is a `&` reference, so the data it refers to cannot be borrowed as mutable For more information about this error, try `rustc --explain E0596`. error: could not compile `limit-tracker` due to previous error warning: build failed, waiting for other jobs to finish... error: build failed \u4e0d\u80fd\u4fee\u6539 MockMessenger \u6765\u8bb0\u5f55\u6d88\u606f\uff0c\u56e0\u4e3a send \u65b9\u6cd5\u83b7\u53d6\u4e86 self \u7684\u4e0d\u53ef\u53d8\u5f15\u7528\u3002\u6211\u4eec\u4e5f\u4e0d\u80fd\u53c2\u8003\u9519\u8bef\u6587\u672c\u7684\u5efa\u8bae\u4f7f\u7528 &mut self \u66ff\u4ee3\uff0c\u56e0\u4e3a\u8fd9\u6837 send \u7684\u7b7e\u540d\u5c31\u4e0d\u7b26\u5408 Messenger trait \u5b9a\u4e49\u4e2d\u7684\u7b7e\u540d\u4e86\uff08\u53ef\u4ee5\u8bd5\u7740\u8fd9\u4e48\u6539\uff0c\u770b\u770b\u4f1a\u51fa\u73b0\u4ec0\u4e48\u9519\u8bef\u4fe1\u606f\uff09\u3002 \u8fd9\u6b63\u662f\u5185\u90e8\u53ef\u53d8\u6027\u7684\u7528\u6b66\u4e4b\u5730\uff01\u6211\u4eec\u5c06\u901a\u8fc7 RefCell \u6765\u50a8\u5b58 sent_messages \uff0c\u7136\u540e send \u5c06\u80fd\u591f\u4fee\u6539 sent_messages \u5e76\u50a8\u5b58\u6d88\u606f\u3002\u793a\u4f8b 15-22 \u5c55\u793a\u4e86\u4ee3\u7801\uff1a \u6587\u4ef6\u540d: src/lib.rs #[cfg(test)] mod tests { use super :: * ; use std :: cell :: RefCell ; struct MockMessenger { sent_messages : RefCell < Vec < String >> , } impl MockMessenger { fn new () -> MockMessenger { MockMessenger { sent_messages : RefCell :: new ( vec! []), } } } impl Messenger for MockMessenger { fn send ( & self , message : & str ) { // borrow_mut \u65b9\u6cd5\u6765\u83b7\u53d6 RefCell \u4e2d\u503c\u7684\u53ef\u53d8\u5f15\u7528 self . sent_messages . borrow_mut (). push ( String :: from ( message )); } } #[test] fn it_sends_an_over_75_percent_warning_message () { // --snip-- // \u8c03\u7528 RefCell \u7684 borrow \u4ee5\u83b7\u53d6 vector \u7684\u4e0d\u53ef\u53d8\u5f15\u7528\u3002 assert_eq! ( mock_messenger . sent_messages . borrow (). len (), 1 ); } } \u793a\u4f8b 15-22\uff1a\u4f7f\u7528 RefCell<T> \u80fd\u591f\u5728\u5916\u90e8\u503c\u88ab\u8ba4\u4e3a\u662f\u4e0d\u53ef\u53d8\u7684\u60c5\u51b5\u4e0b\u4fee\u6539\u5185\u90e8\u503c \u73b0\u5728 sent_messages \u5b57\u6bb5\u7684\u7c7b\u578b\u662f RefCell<Vec<String>> \u800c\u4e0d\u662f Vec<String> \u3002\u5728 new \u51fd\u6570\u4e2d\u65b0\u5efa\u4e86\u4e00\u4e2a RefCell<Vec<String>> \u5b9e\u4f8b\u66ff\u4ee3\u7a7a vector\u3002 \u5bf9\u4e8e send \u65b9\u6cd5\u7684\u5b9e\u73b0\uff0c\u7b2c\u4e00\u4e2a\u53c2\u6570\u4ecd\u4e3a self \u7684\u4e0d\u53ef\u53d8\u501f\u7528\uff0c\u8fd9\u662f\u7b26\u5408\u65b9\u6cd5\u5b9a\u4e49\u7684\u3002\u6211\u4eec\u8c03\u7528 self.sent_messages \u4e2d RefCell \u7684 borrow_mut \u65b9\u6cd5\u6765\u83b7\u53d6 RefCell \u4e2d\u503c\u7684\u53ef\u53d8\u5f15\u7528\uff0c\u8fd9\u662f\u4e00\u4e2a vector\u3002\u63a5\u7740\u53ef\u4ee5\u5bf9 vector \u7684\u53ef\u53d8\u5f15\u7528\u8c03\u7528 push \u4ee5\u4fbf\u8bb0\u5f55\u6d4b\u8bd5\u8fc7\u7a0b\u4e2d\u770b\u5230\u7684\u6d88\u606f\u3002 \u6700\u540e\u5fc5\u987b\u505a\u51fa\u7684\u4fee\u6539\u4f4d\u4e8e\u65ad\u8a00\u4e2d\uff1a\u4e3a\u4e86\u770b\u5230\u5176\u5185\u90e8 vector \u4e2d\u6709\u591a\u5c11\u4e2a\u9879\uff0c\u9700\u8981\u8c03\u7528 RefCell \u7684 borrow \u4ee5\u83b7\u53d6 vector \u7684\u4e0d\u53ef\u53d8\u5f15\u7528\u3002 \u73b0\u5728\u6211\u4eec\u89c1\u8bc6\u4e86\u5982\u4f55\u4f7f\u7528 RefCell<T> \uff0c\u8ba9\u6211\u4eec\u7814\u7a76\u4e00\u4e0b\u5b83\u600e\u6837\u5de5\u4f5c\u7684\uff01 RefCell<T> \u5728\u8fd0\u884c\u65f6\u8bb0\u5f55\u501f\u7528 \u5f53\u521b\u5efa\u4e0d\u53ef\u53d8\u548c\u53ef\u53d8\u5f15\u7528\u65f6\uff0c\u6211\u4eec\u5206\u522b\u4f7f\u7528 & \u548c &mut \u8bed\u6cd5\u3002 \u5bf9\u4e8e RefCell<T> \u6765\u8bf4\uff0c\u5219\u662f borrow \u548c borrow_mut \u65b9\u6cd5\uff0c\u8fd9\u5c5e\u4e8e RefCell<T> \u5b89\u5168 API \u7684\u4e00\u90e8\u5206\u3002 borrow \u65b9\u6cd5\u8fd4\u56de Ref<T> \u7c7b\u578b\u7684\u667a\u80fd\u6307\u9488\uff0c borrow_mut \u65b9\u6cd5\u8fd4\u56de RefMut<T> \u7c7b\u578b\u7684\u667a\u80fd\u6307\u9488\u3002 \u8fd9\u4e24\u4e2a\u7c7b\u578b\u90fd\u5b9e\u73b0\u4e86 Deref \uff0c\u6240\u4ee5\u53ef\u4ee5\u5f53\u4f5c\u5e38\u89c4\u5f15\u7528\u5bf9\u5f85\u3002 RefCell<T> \u8bb0\u5f55\u5f53\u524d\u6709\u591a\u5c11\u4e2a\u6d3b\u52a8\u7684 Ref<T> \u548c RefMut<T> \u667a\u80fd\u6307\u9488\u3002\u6bcf\u6b21\u8c03\u7528 borrow \uff0c RefCell<T> \u5c06\u6d3b\u52a8\u7684\u4e0d\u53ef\u53d8\u501f\u7528\u8ba1\u6570\u52a0\u4e00\u3002\u5f53 Ref<T> \u503c\u79bb\u5f00\u4f5c\u7528\u57df\u65f6\uff0c\u4e0d\u53ef\u53d8\u501f\u7528\u8ba1\u6570\u51cf\u4e00\u3002 \u5c31\u50cf\u7f16\u8bd1\u65f6\u501f\u7528\u89c4\u5219\u4e00\u6837\uff0c RefCell<T> \u5728\u4efb\u4f55\u65f6\u5019\u53ea\u5141\u8bb8\u6709\u591a\u4e2a\u4e0d\u53ef\u53d8\u501f\u7528\u6216\u4e00\u4e2a\u53ef\u53d8\u501f\u7528 \u3002 \u5982\u679c\u6211\u4eec\u5c1d\u8bd5\u8fdd\u53cd\u8fd9\u4e9b\u89c4\u5219\uff0c\u76f8\u6bd4\u5f15\u7528\u65f6\u7684\u7f16\u8bd1\u65f6\u9519\u8bef\uff0c RefCell<T> \u7684\u5b9e\u73b0\u4f1a\u5728\u8fd0\u884c\u65f6\u51fa\u73b0 panic\u3002\u793a\u4f8b 15-23 \u5c55\u793a\u4e86\u5bf9\u793a\u4f8b 15-22 \u4e2d send \u5b9e\u73b0\u7684\u4fee\u6539\uff0c\u8fd9\u91cc\u6211\u4eec\u6545\u610f\u5c1d\u8bd5\u5728\u76f8\u540c\u4f5c\u7528\u57df\u521b\u5efa\u4e24\u4e2a\u53ef\u53d8\u501f\u7528\u4ee5\u4fbf\u6f14\u793a RefCell<T> \u4e0d\u5141\u8bb8\u6211\u4eec\u5728\u8fd0\u884c\u65f6\u8fd9\u4e48\u505a\uff1a \u6587\u4ef6\u540d: src/lib.rs impl Messenger for MockMessenger { fn send ( & self , message : & str ) { let mut one_borrow = self . sent_messages . borrow_mut (); let mut two_borrow = self . sent_messages . borrow_mut (); one_borrow . push ( String :: from ( message )); two_borrow . push ( String :: from ( message )); } } \u793a\u4f8b 15-23\uff1a\u5728\u540c\u4e00\u4f5c\u7528\u57df\u4e2d\u521b\u5efa\u4e24\u4e2a\u53ef\u53d8\u5f15\u7528\u5e76\u89c2\u5bdf RefCell<T> panic \u8fd9\u91cc\u4e3a borrow_mut \u8fd4\u56de\u7684 RefMut \u667a\u80fd\u6307\u9488\u521b\u5efa\u4e86 one_borrow \u53d8\u91cf\u3002\u63a5\u7740\u7528\u76f8\u540c\u7684\u65b9\u5f0f\u5728\u53d8\u91cf two_borrow \u521b\u5efa\u4e86\u53e6\u4e00\u4e2a\u53ef\u53d8\u501f\u7528\u3002\u8fd9\u4f1a\u5728\u76f8\u540c\u4f5c\u7528\u57df\u4e2d\u521b\u5efa\u4e24\u4e2a\u53ef\u53d8\u5f15\u7528\uff0c\u8fd9\u662f\u4e0d\u5141\u8bb8\u7684\u3002\u5f53\u8fd0\u884c\u5e93\u7684\u6d4b\u8bd5\u65f6\uff0c\u793a\u4f8b 15-23 \u7f16\u8bd1\u65f6\u4e0d\u4f1a\u6709\u4efb\u4f55\u9519\u8bef\uff0c\u4e0d\u8fc7\u6d4b\u8bd5\u4f1a\u5931\u8d25\uff1a $ cargo test Compiling limit-tracker v0.1.0 (file:///projects/limit-tracker) Finished test [unoptimized + debuginfo] target(s) in 0.91s Running unittests (target/debug/deps/limit_tracker-e599811fa246dbde) running 1 test test tests::it_sends_an_over_75_percent_warning_message ... FAILED failures: ---- tests::it_sends_an_over_75_percent_warning_message stdout ---- thread 'main' panicked at 'already borrowed: BorrowMutError', src/lib.rs:60:53 note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace failures: tests::it_sends_an_over_75_percent_warning_message test result: FAILED. 0 passed; 1 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s error: test failed, to rerun pass '--lib' \u6ce8\u610f\u4ee3\u7801 panic \u548c\u4fe1\u606f already borrowed: BorrowMutError \u3002\u8fd9\u4e5f\u5c31\u662f RefCell<T> \u5982\u4f55\u5728\u8fd0\u884c\u65f6\u5904\u7406\u8fdd\u53cd\u501f\u7528\u89c4\u5219\u7684\u60c5\u51b5\u3002 \u5728\u8fd0\u884c\u65f6\u6355\u83b7\u501f\u7528\u9519\u8bef\u800c\u4e0d\u662f\u7f16\u8bd1\u65f6\u610f\u5473\u7740\u5c06\u4f1a\u5728\u5f00\u53d1\u8fc7\u7a0b\u7684\u540e\u671f\u624d\u4f1a\u53d1\u73b0\u9519\u8bef\uff0c\u751a\u81f3\u6709\u53ef\u80fd\u53d1\u5e03\u5230\u751f\u4ea7\u73af\u5883\u624d\u53d1\u73b0\uff1b\u8fd8\u4f1a\u56e0\u4e3a\u5728\u8fd0\u884c\u65f6\u800c\u4e0d\u662f\u7f16\u8bd1\u65f6\u8bb0\u5f55\u501f\u7528\u800c\u5bfc\u81f4\u5c11\u91cf\u7684\u8fd0\u884c\u65f6\u6027\u80fd\u60e9\u7f5a\u3002 \u7136\u800c\uff0c\u4f7f\u7528 RefCell \u4f7f\u5f97\u5728\u53ea\u5141\u8bb8\u4e0d\u53ef\u53d8\u503c\u7684\u4e0a\u4e0b\u6587\u4e2d\u7f16\u5199\u4fee\u6539\u81ea\u8eab\u4ee5\u8bb0\u5f55\u6d88\u606f\u7684 mock \u5bf9\u8c61\u6210\u4e3a\u53ef\u80fd\u3002\u867d\u7136\u6709\u53d6\u820d\uff0c\u4f46\u662f\u6211\u4eec\u53ef\u4ee5\u9009\u62e9\u4f7f\u7528 RefCell<T> \u6765\u83b7\u5f97\u6bd4\u5e38\u89c4\u5f15\u7528\u6240\u80fd\u63d0\u4f9b\u7684\u66f4\u591a\u7684\u529f\u80fd\u3002 \u7ed3\u5408 Rc<T> \u548c RefCell<T> \u6765\u62e5\u6709\u591a\u4e2a\u53ef\u53d8\u6570\u636e\u6240\u6709\u8005 RefCell<T> \u7684\u4e00\u4e2a\u5e38\u89c1\u7528\u6cd5\u662f\u4e0e Rc<T> \u7ed3\u5408\u3002\u56de\u5fc6\u4e00\u4e0b Rc<T> \u5141\u8bb8\u5bf9\u76f8\u540c\u6570\u636e\u6709\u591a\u4e2a\u6240\u6709\u8005\uff0c\u4e0d\u8fc7\u53ea\u80fd\u63d0\u4f9b\u6570\u636e\u7684\u4e0d\u53ef\u53d8\u8bbf\u95ee\u3002\u5982\u679c\u6709\u4e00\u4e2a\u50a8\u5b58\u4e86 RefCell<T> \u7684 Rc<T> \u7684\u8bdd\uff0c\u5c31\u53ef\u4ee5\u5f97\u5230\u6709\u591a\u4e2a\u6240\u6709\u8005 \u5e76\u4e14 \u53ef\u4ee5\u4fee\u6539\u7684\u503c\u4e86\uff01 \u4f8b\u5982\uff0c\u56de\u5fc6\u793a\u4f8b 15-18 \u7684 cons list \u7684\u4f8b\u5b50\u4e2d\u4f7f\u7528 Rc<T> \u4f7f\u5f97\u591a\u4e2a\u5217\u8868\u5171\u4eab\u53e6\u4e00\u4e2a\u5217\u8868\u7684\u6240\u6709\u6743\u3002\u56e0\u4e3a Rc<T> \u53ea\u5b58\u653e\u4e0d\u53ef\u53d8\u503c\uff0c\u6240\u4ee5\u4e00\u65e6\u521b\u5efa\u4e86\u8fd9\u4e9b\u5217\u8868\u503c\u540e\u5c31\u4e0d\u80fd\u4fee\u6539\u3002\u8ba9\u6211\u4eec\u52a0\u5165 RefCell<T> \u6765\u83b7\u5f97\u4fee\u6539\u5217\u8868\u4e2d\u503c\u7684\u80fd\u529b\u3002\u793a\u4f8b 15-24 \u5c55\u793a\u4e86\u901a\u8fc7\u5728 Cons \u5b9a\u4e49\u4e2d\u4f7f\u7528 RefCell<T> \uff0c\u6211\u4eec\u5c31\u5141\u8bb8\u4fee\u6539\u6240\u6709\u5217\u8868\u4e2d\u7684\u503c\u4e86\uff1a \u6587\u4ef6\u540d: src/main.rs #[derive(Debug)] enum List { Cons ( Rc < RefCell < i32 >> , Rc < List > ), Nil , } use crate :: List :: { Cons , Nil }; use std :: cell :: RefCell ; use std :: rc :: Rc ; fn main () { let value = Rc :: new ( RefCell :: new ( 5 )); let a = Rc :: new ( Cons ( Rc :: clone ( & value ), Rc :: new ( Nil ))); let b = Cons ( Rc :: new ( RefCell :: new ( 3 )), Rc :: clone ( & a )); let c = Cons ( Rc :: new ( RefCell :: new ( 4 )), Rc :: clone ( & a )); * value . borrow_mut () += 10 ; println! ( \"a after = {:?}\" , a ); println! ( \"b after = {:?}\" , b ); println! ( \"c after = {:?}\" , c ); } \u793a\u4f8b 15-24\uff1a\u4f7f\u7528 Rc<RefCell<i32>> \u521b\u5efa\u53ef\u4ee5\u4fee\u6539\u7684 List \u8fd9\u91cc\u521b\u5efa\u4e86\u4e00\u4e2a Rc<RefCell<i32>> \u5b9e\u4f8b\u5e76\u50a8\u5b58\u5728\u53d8\u91cf value \u4e2d\u4ee5\u4fbf\u4e4b\u540e\u76f4\u63a5\u8bbf\u95ee\u3002\u63a5\u7740\u5728 a \u4e2d\u7528\u5305\u542b value \u7684 Cons \u6210\u5458\u521b\u5efa\u4e86\u4e00\u4e2a List \u3002\u9700\u8981\u514b\u9686 value \u4ee5\u4fbf a \u548c value \u90fd\u80fd\u62e5\u6709\u5176\u5185\u90e8\u503c 5 \u7684\u6240\u6709\u6743\uff0c\u800c\u4e0d\u662f\u5c06\u6240\u6709\u6743\u4ece value \u79fb\u52a8\u5230 a \u6216\u8005\u8ba9 a \u501f\u7528 value \u3002 \u6211\u4eec\u5c06\u5217\u8868 a \u5c01\u88c5\u8fdb\u4e86 Rc<T> \u8fd9\u6837\u5f53\u521b\u5efa\u5217\u8868 b \u548c c \u65f6\uff0c\u4ed6\u4eec\u90fd\u53ef\u4ee5\u5f15\u7528 a \uff0c\u6b63\u5982\u793a\u4f8b 15-18 \u4e00\u6837\u3002 \u4e00\u65e6\u521b\u5efa\u4e86\u5217\u8868 a \u3001 b \u548c c \uff0c\u6211\u4eec\u5c06 value \u7684\u503c\u52a0 10\u3002\u4e3a\u6b64\u5bf9 value \u8c03\u7528\u4e86 borrow_mut \uff0c\u8fd9\u91cc\u4f7f\u7528\u4e86\u7b2c\u4e94\u7ae0\u8ba8\u8bba\u7684\u81ea\u52a8\u89e3\u5f15\u7528\u529f\u80fd\uff08 \u201c -> \u8fd0\u7b97\u7b26\u5230\u54ea\u53bb\u4e86\uff1f\u201d \u90e8\u5206\uff09\u6765\u89e3\u5f15\u7528 Rc<T> \u4ee5\u83b7\u53d6\u5176\u5185\u90e8\u7684 RefCell<T> \u503c\u3002 borrow_mut \u65b9\u6cd5\u8fd4\u56de RefMut<T> \u667a\u80fd\u6307\u9488\uff0c\u53ef\u4ee5\u5bf9\u5176\u4f7f\u7528\u89e3\u5f15\u7528\u8fd0\u7b97\u7b26\u5e76\u4fee\u6539\u5176\u5185\u90e8\u503c\u3002 \u5f53\u6211\u4eec\u6253\u5370\u51fa a \u3001 b \u548c c \u65f6\uff0c\u53ef\u4ee5\u770b\u5230\u4ed6\u4eec\u90fd\u62e5\u6709\u4fee\u6539\u540e\u7684\u503c 15 \u800c\u4e0d\u662f 5\uff1a $ cargo run Compiling cons-list v0.1.0 (file:///projects/cons-list) Finished dev [unoptimized + debuginfo] target(s) in 0.63s Running `target/debug/cons-list` a after = Cons(RefCell { value: 15 }, Nil) b after = Cons(RefCell { value: 3 }, Cons(RefCell { value: 15 }, Nil)) c after = Cons(RefCell { value: 4 }, Cons(RefCell { value: 15 }, Nil)) \u8fd9\u662f\u975e\u5e38\u5de7\u5999\u7684\uff01\u901a\u8fc7\u4f7f\u7528 RefCell<T> \uff0c\u6211\u4eec\u53ef\u4ee5\u62e5\u6709\u4e00\u4e2a\u8868\u9762\u4e0a\u4e0d\u53ef\u53d8\u7684 List \uff0c\u4e0d\u8fc7\u53ef\u4ee5\u4f7f\u7528 RefCell<T> \u4e2d\u63d0\u4f9b\u5185\u90e8\u53ef\u53d8\u6027\u7684\u65b9\u6cd5\u6765\u5728\u9700\u8981\u65f6\u4fee\u6539\u6570\u636e\u3002 RefCell<T> \u7684\u8fd0\u884c\u65f6\u501f\u7528\u89c4\u5219\u68c0\u67e5\u4e5f\u786e\u5b9e\u4fdd\u62a4\u6211\u4eec\u514d\u4e8e\u51fa\u73b0\u6570\u636e\u7ade\u4e89\u2014\u2014\u6709\u65f6\u4e3a\u4e86\u6570\u636e\u7ed3\u6784\u7684\u7075\u6d3b\u6027\u800c\u4ed8\u51fa\u4e00\u4e9b\u6027\u80fd\u662f\u503c\u5f97\u7684\u3002 \u6807\u51c6\u5e93\u4e2d\u4e5f\u6709\u5176\u4ed6\u63d0\u4f9b\u5185\u90e8\u53ef\u53d8\u6027\u7684\u7c7b\u578b\uff0c\u6bd4\u5982 Cell<T> \uff0c\u5b83\u7c7b\u4f3c RefCell<T> \u4f46\u6709\u4e00\u70b9\u9664\u5916\uff1a \u5b83\u5e76\u975e\u63d0\u4f9b\u5185\u90e8\u503c\u7684\u5f15\u7528\uff0c\u800c\u662f\u628a\u503c\u62f7\u8d1d\u8fdb\u548c\u62f7\u8d1d\u51fa Cell<T> \u3002 \u8fd8\u6709 Mutex<T> \uff0c\u5176\u63d0\u4f9b\u7ebf\u7a0b\u95f4\u5b89\u5168\u7684\u5185\u90e8\u53ef\u53d8\u6027\uff0c\u6211\u4eec\u5c06\u5728\u7b2c 16 \u7ae0\u4e2d\u8ba8\u8bba\u5176\u7528\u6cd5\u3002\u8bf7\u67e5\u770b\u6807\u51c6\u5e93\u6765\u83b7\u53d6\u66f4\u591a\u7ec6\u8282\u5173\u4e8e\u8fd9\u4e9b\u4e0d\u540c\u7c7b\u578b\u4e4b\u95f4\u7684\u533a\u522b\u3002 \u5f15\u7528\u5faa\u73af\u4e0e\u5185\u5b58\u6cc4\u6f0f ch15-06-reference-cycles.md commit bd27a8b72336610c9a200f0ca932ffc8b6fb5ee1 Rust \u7684\u5185\u5b58\u5b89\u5168\u6027\u4fdd\u8bc1\u4f7f\u5176\u96be\u4ee5\u610f\u5916\u5730\u5236\u9020\u6c38\u8fdc\u4e5f\u4e0d\u4f1a\u88ab\u6e05\u7406\u7684\u5185\u5b58\uff08\u88ab\u79f0\u4e3a \u5185\u5b58\u6cc4\u6f0f \uff08 memory leak \uff09\uff09\uff0c\u4f46\u5e76\u4e0d\u662f\u4e0d\u53ef\u80fd\u3002\u4e0e\u5728\u7f16\u8bd1\u65f6\u62d2\u7edd\u6570\u636e\u7ade\u4e89\u4e0d\u540c\uff0c Rust \u5e76\u4e0d\u4fdd\u8bc1\u5b8c\u5168\u5730\u907f\u514d\u5185\u5b58\u6cc4\u6f0f\uff0c\u8fd9\u610f\u5473\u7740\u5185\u5b58\u6cc4\u6f0f\u5728 Rust \u88ab\u8ba4\u4e3a\u662f\u5185\u5b58\u5b89\u5168\u7684\u3002\u8fd9\u4e00\u70b9\u53ef\u4ee5\u901a\u8fc7 Rc<T> \u548c RefCell<T> \u770b\u51fa\uff1a\u521b\u5efa\u5f15\u7528\u5faa\u73af\u7684\u53ef\u80fd\u6027\u662f\u5b58\u5728\u7684\u3002\u8fd9\u4f1a\u9020\u6210\u5185\u5b58\u6cc4\u6f0f\uff0c\u56e0\u4e3a\u6bcf\u4e00\u9879\u7684\u5f15\u7528\u8ba1\u6570\u6c38\u8fdc\u4e5f\u5230\u4e0d\u4e86 0\uff0c\u5176\u503c\u4e5f\u6c38\u8fdc\u4e0d\u4f1a\u88ab\u4e22\u5f03\u3002 \u5236\u9020\u5f15\u7528\u5faa\u73af \u8ba9\u6211\u4eec\u770b\u770b\u5f15\u7528\u5faa\u73af\u662f\u5982\u4f55\u53d1\u751f\u7684\u4ee5\u53ca\u5982\u4f55\u907f\u514d\u5b83\u3002\u4ee5\u793a\u4f8b 15-25 \u4e2d\u7684 List \u679a\u4e3e\u548c tail \u65b9\u6cd5\u7684\u5b9a\u4e49\u5f00\u59cb\uff1a \u6587\u4ef6\u540d: src/main.rs use crate :: List :: { Cons , Nil }; use std :: cell :: RefCell ; use std :: rc :: Rc ; #[derive(Debug)] enum List { Cons ( i32 , RefCell < Rc < List >> ), Nil , } impl List { fn tail ( & self ) -> Option <& RefCell < Rc < List >>> { match self { Cons ( _ , item ) => Some ( item ), Nil => None , } } } fn main () {} \u793a\u4f8b 15-25: \u4e00\u4e2a\u5b58\u653e RefCell \u7684 cons list \u5b9a\u4e49\uff0c\u8fd9\u6837\u53ef\u4ee5\u4fee\u6539 Cons \u6210\u5458\u6240\u5f15\u7528\u7684\u6570\u636e \u8fd9\u91cc\u91c7\u7528\u4e86\u793a\u4f8b 15-25 \u4e2d List \u5b9a\u4e49\u7684\u53e6\u4e00\u79cd\u53d8\u4f53\u3002\u73b0\u5728 Cons \u6210\u5458\u7684\u7b2c\u4e8c\u4e2a\u5143\u7d20\u662f RefCell<Rc<List>> \uff0c\u8fd9\u610f\u5473\u7740\u4e0d\u540c\u4e8e\u50cf\u793a\u4f8b 15-24 \u90a3\u6837\u80fd\u591f\u4fee\u6539 i32 \u7684\u503c\uff0c\u6211\u4eec\u5e0c\u671b\u80fd\u591f\u4fee\u6539 Cons \u6210\u5458\u6240\u6307\u5411\u7684 List \u3002\u8fd9\u91cc\u8fd8\u589e\u52a0\u4e86\u4e00\u4e2a tail \u65b9\u6cd5\u6765\u65b9\u4fbf\u6211\u4eec\u5728\u6709 Cons \u6210\u5458\u7684\u65f6\u5019\u8bbf\u95ee\u5176\u7b2c\u4e8c\u9879\u3002 \u5728\u793a\u4f8b 15-26 \u4e2d\u589e\u52a0\u4e86\u4e00\u4e2a main \u51fd\u6570\uff0c\u5176\u4f7f\u7528\u4e86\u793a\u4f8b 15-25 \u4e2d\u7684\u5b9a\u4e49\u3002\u8fd9\u4e9b\u4ee3\u7801\u5728 a \u4e2d\u521b\u5efa\u4e86\u4e00\u4e2a\u5217\u8868\uff0c\u4e00\u4e2a\u6307\u5411 a \u4e2d\u5217\u8868\u7684 b \u5217\u8868\uff0c\u63a5\u7740\u4fee\u6539 a \u4e2d\u7684\u5217\u8868\u6307\u5411 b \u4e2d\u7684\u5217\u8868\uff0c\u8fd9\u4f1a\u521b\u5efa\u4e00\u4e2a\u5f15\u7528\u5faa\u73af\u3002\u5728\u8fd9\u4e2a\u8fc7\u7a0b\u7684\u591a\u4e2a\u4f4d\u7f6e\u6709 println! \u8bed\u53e5\u5c55\u793a\u5f15\u7528\u8ba1\u6570\u3002 \u6587\u4ef6: src/main.rs fn main () { let a = Rc :: new ( Cons ( 5 , RefCell :: new ( Rc :: new ( Nil )))); println! ( \"a initial rc count = {}\" , Rc :: strong_count ( & a )); println! ( \"a next item = {:?}\" , a . tail ()); let b = Rc :: new ( Cons ( 10 , RefCell :: new ( Rc :: clone ( & a )))); println! ( \"a rc count after b creation = {}\" , Rc :: strong_count ( & a )); println! ( \"b initial rc count = {}\" , Rc :: strong_count ( & b )); println! ( \"b next item = {:?}\" , b . tail ()); if let Some ( link ) = a . tail () { * link . borrow_mut () = Rc :: clone ( & b ); } println! ( \"b rc count after changing a = {}\" , Rc :: strong_count ( & b )); println! ( \"a rc count after changing a = {}\" , Rc :: strong_count ( & a )); // Uncomment the next line to see that we have a cycle; // it will overflow the stack // println!(\"a next item = {:?}\", a.tail()); } \u793a\u4f8b 15-26\uff1a\u521b\u5efa\u4e00\u4e2a\u5f15\u7528\u5faa\u73af\uff1a\u4e24\u4e2a List \u503c\u4e92\u76f8\u6307\u5411\u5f7c\u6b64 \u8fd9\u91cc\u5728\u53d8\u91cf a \u4e2d\u521b\u5efa\u4e86\u4e00\u4e2a Rc<List> \u5b9e\u4f8b\u6765\u5b58\u653e\u521d\u503c\u4e3a 5, Nil \u7684 List \u503c\u3002\u63a5\u7740\u5728\u53d8\u91cf b \u4e2d\u521b\u5efa\u4e86\u5b58\u653e\u5305\u542b\u503c 10 \u548c\u6307\u5411\u5217\u8868 a \u7684 List \u7684\u53e6\u4e00\u4e2a Rc<List> \u5b9e\u4f8b\u3002 \u6700\u540e\uff0c\u4fee\u6539 a \u4f7f\u5176\u6307\u5411 b \u800c\u4e0d\u662f Nil \uff0c\u8fd9\u5c31\u521b\u5efa\u4e86\u4e00\u4e2a\u5faa\u73af\u3002\u4e3a\u6b64\u9700\u8981\u4f7f\u7528 tail \u65b9\u6cd5\u83b7\u53d6 a \u4e2d RefCell<Rc<List>> \u7684\u5f15\u7528\uff0c\u5e76\u653e\u5165\u53d8\u91cf link \u4e2d\u3002\u63a5\u7740\u4f7f\u7528 RefCell<Rc<List>> \u7684 borrow_mut \u65b9\u6cd5\u5c06\u5176\u503c\u4ece\u5b58\u653e Nil \u7684 Rc<List> \u4fee\u6539\u4e3a b \u4e2d\u7684 Rc<List> \u3002 \u5982\u679c\u4fdd\u6301\u6700\u540e\u7684 println! \u884c\u6ce8\u91ca\u5e76\u8fd0\u884c\u4ee3\u7801\uff0c\u4f1a\u5f97\u5230\u5982\u4e0b\u8f93\u51fa\uff1a $ cargo run Compiling cons-list v0.1.0 (file:///projects/cons-list) Finished dev [unoptimized + debuginfo] target(s) in 0.53s Running `target/debug/cons-list` a initial rc count = 1 a next item = Some(RefCell { value: Nil }) a rc count after b creation = 2 b initial rc count = 1 b next item = Some(RefCell { value: Cons(5, RefCell { value: Nil }) }) b rc count after changing a = 2 a rc count after changing a = 2 \u53ef\u4ee5\u770b\u5230\u5c06\u5217\u8868 a \u4fee\u6539\u4e3a\u6307\u5411 b \u4e4b\u540e\uff0c a \u548c b \u4e2d\u7684 Rc<List> \u5b9e\u4f8b\u7684\u5f15\u7528\u8ba1\u6570\u90fd\u662f 2\u3002\u5728 main \u7684\u7ed3\u5c3e\uff0cRust \u4e22\u5f03 b \uff0c\u8fd9\u4f1a b Rc<List> \u5b9e\u4f8b\u7684\u5f15\u7528\u8ba1\u6570\u4ece 2 \u51cf\u4e3a 1\u3002\u7136\u800c\uff0c b Rc<List> \u4e0d\u80fd\u88ab\u56de\u6536\uff0c\u56e0\u4e3a\u5176\u5f15\u7528\u8ba1\u6570\u662f 1 \u800c\u4e0d\u662f 0\u3002\u63a5\u4e0b\u6765 Rust \u4f1a\u4e22\u5f03 a \u5c06 a Rc<List> \u5b9e\u4f8b\u7684\u5f15\u7528\u8ba1\u6570\u4ece 2 \u51cf\u4e3a 1\u3002\u8fd9\u4e2a\u5b9e\u4f8b\u4e5f\u4e0d\u80fd\u88ab\u56de\u6536\uff0c\u56e0\u4e3a b Rc<List> \u5b9e\u4f8b\u4f9d\u7136\u5f15\u7528\u5b83\uff0c\u6240\u4ee5\u5176\u5f15\u7528\u8ba1\u6570\u662f 1\u3002\u8fd9\u4e9b\u5217\u8868\u7684\u5185\u5b58\u5c06\u6c38\u8fdc\u4fdd\u6301\u672a\u88ab\u56de\u6536\u7684\u72b6\u6001\u3002\u4e3a\u4e86\u66f4\u5f62\u8c61\u7684\u5c55\u793a\uff0c\u6211\u4eec\u521b\u5efa\u4e86\u4e00\u4e2a\u5982\u56fe 15-4 \u6240\u793a\u7684\u5f15\u7528\u5faa\u73af\uff1a \u56fe 15-4: \u5217\u8868 a \u548c b \u5f7c\u6b64\u4e92\u76f8\u6307\u5411\u5f62\u6210\u5f15\u7528\u5faa\u73af \u5982\u679c\u53d6\u6d88\u6700\u540e println! \u7684\u6ce8\u91ca\u5e76\u8fd0\u884c\u7a0b\u5e8f\uff0cRust \u4f1a\u5c1d\u8bd5\u6253\u5370\u51fa a \u6307\u5411 b \u6307\u5411 a \u8fd9\u6837\u7684\u5faa\u73af\u76f4\u5230 \u6808\u6ea2\u51fa \u3002 \u8fd9\u4e2a\u7279\u5b9a\u7684\u4f8b\u5b50\u4e2d\uff0c\u521b\u5efa\u4e86\u5f15\u7528\u5faa\u73af\u4e4b\u540e\u7a0b\u5e8f\u7acb\u523b\u5c31\u7ed3\u675f\u4e86\u3002\u8fd9\u4e2a\u5faa\u73af\u7684\u7ed3\u679c\u5e76\u4e0d\u53ef\u6015\u3002 \u5982\u679c\u5728\u66f4\u4e3a\u590d\u6742\u7684\u7a0b\u5e8f\u4e2d\u5e76\u5728\u5faa\u73af\u91cc\u5206\u914d\u4e86\u5f88\u591a\u5185\u5b58\u5e76\u5360\u6709\u5f88\u957f\u65f6\u95f4\uff0c\u8fd9\u4e2a\u7a0b\u5e8f\u4f1a\u4f7f\u7528\u591a\u4e8e\u5b83\u6240\u9700\u8981\u7684\u5185\u5b58\uff0c\u5e76\u6709\u53ef\u80fd\u538b\u57ae\u7cfb\u7edf\u5e76\u9020\u6210\u6ca1\u6709\u5185\u5b58\u53ef\u4f9b\u4f7f\u7528\u3002 \u521b\u5efa\u5f15\u7528\u5faa\u73af\u5e76\u4e0d\u5bb9\u6613\uff0c\u4f46\u4e5f\u4e0d\u662f\u4e0d\u53ef\u80fd\u3002\u5982\u679c\u4f60\u6709\u5305\u542b Rc<T> \u7684 RefCell<T> \u503c\u6216\u7c7b\u4f3c\u7684\u5d4c\u5957\u7ed3\u5408\u4e86\u5185\u90e8\u53ef\u53d8\u6027\u548c\u5f15\u7528\u8ba1\u6570\u7684\u7c7b\u578b\uff0c\u8bf7\u52a1\u5fc5\u5c0f\u5fc3\u786e\u4fdd\u4f60\u6ca1\u6709\u5f62\u6210\u4e00\u4e2a\u5f15\u7528\u5faa\u73af\uff1b\u4f60\u65e0\u6cd5\u6307\u671b Rust \u5e2e\u4f60\u6355\u83b7\u5b83\u4eec\u3002\u521b\u5efa\u5f15\u7528\u5faa\u73af\u662f\u4e00\u4e2a\u7a0b\u5e8f\u4e0a\u7684\u903b\u8f91 bug\uff0c\u4f60\u5e94\u8be5\u4f7f\u7528\u81ea\u52a8\u5316\u6d4b\u8bd5\u3001\u4ee3\u7801\u8bc4\u5ba1\u548c\u5176\u4ed6\u8f6f\u4ef6\u5f00\u53d1\u6700\u4f73\u5b9e\u8df5\u6765\u4f7f\u5176\u6700\u5c0f\u5316\u3002 \u53e6\u4e00\u4e2a\u89e3\u51b3\u65b9\u6848\u662f\u91cd\u65b0\u7ec4\u7ec7\u6570\u636e\u7ed3\u6784\uff0c\u4f7f\u5f97\u4e00\u90e8\u5206\u5f15\u7528\u62e5\u6709\u6240\u6709\u6743\u800c\u53e6\u4e00\u90e8\u5206\u6ca1\u6709\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u5faa\u73af\u5c06\u7531\u4e00\u4e9b\u62e5\u6709\u6240\u6709\u6743\u7684\u5173\u7cfb\u548c\u4e00\u4e9b\u65e0\u6240\u6709\u6743\u7684\u5173\u7cfb\u7ec4\u6210\uff0c\u53ea\u6709\u6240\u6709\u6743\u5173\u7cfb\u624d\u80fd\u5f71\u54cd\u503c\u662f\u5426\u53ef\u4ee5\u88ab\u4e22\u5f03\u3002\u5728\u793a\u4f8b 15-25 \u4e2d\uff0c\u6211\u4eec\u603b\u662f\u5e0c\u671b Cons \u6210\u5458\u62e5\u6709\u5176\u5217\u8868\uff0c\u6240\u4ee5\u91cd\u65b0\u7ec4\u7ec7\u6570\u636e\u7ed3\u6784\u662f\u4e0d\u53ef\u80fd\u7684\u3002\u8ba9\u6211\u4eec\u770b\u770b\u4e00\u4e2a\u7531\u7236\u8282\u70b9\u548c\u5b50\u8282\u70b9\u6784\u6210\u7684\u56fe\u7684\u4f8b\u5b50\uff0c\u89c2\u5bdf\u4f55\u65f6\u662f\u4f7f\u7528\u65e0\u6240\u6709\u6743\u7684\u5173\u7cfb\u6765\u907f\u514d\u5f15\u7528\u5faa\u73af\u7684\u5408\u9002\u65f6\u673a\u3002 \u907f\u514d\u5f15\u7528\u5faa\u73af\uff1a\u5c06 Rc<T> \u53d8\u4e3a Weak<T> \u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6211\u4eec\u5df2\u7ecf\u5c55\u793a\u4e86\u8c03\u7528 Rc::clone \u4f1a\u589e\u52a0 Rc<T> \u5b9e\u4f8b\u7684 strong_count \uff0c\u548c\u53ea\u5728\u5176 strong_count \u4e3a 0 \u65f6\u624d\u4f1a\u88ab\u6e05\u7406\u7684 Rc<T> \u5b9e\u4f8b\u3002 \u4f60\u4e5f\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528 Rc::downgrade \u5e76\u4f20\u9012 Rc<T> \u5b9e\u4f8b\u7684\u5f15\u7528\u6765\u521b\u5efa\u5176\u503c\u7684 \u5f31\u5f15\u7528 \uff08 weak reference \uff09\u3002 \u8c03\u7528 Rc::downgrade \u65f6\u4f1a\u5f97\u5230 Weak<T> \u7c7b\u578b\u7684\u667a\u80fd\u6307\u9488\u3002\u4e0d\u540c\u4e8e\u5c06 Rc<T> \u5b9e\u4f8b\u7684 strong_count \u52a0 1\uff0c\u8c03\u7528 Rc::downgrade \u4f1a\u5c06 weak_count \u52a0 1\u3002 Rc<T> \u7c7b\u578b\u4f7f\u7528 weak_count \u6765\u8bb0\u5f55\u5176\u5b58\u5728\u591a\u5c11\u4e2a Weak<T> \u5f15\u7528\uff0c\u7c7b\u4f3c\u4e8e strong_count \u3002\u5176\u533a\u522b\u5728\u4e8e weak_count \u65e0\u9700\u8ba1\u6570\u4e3a 0 \u5c31\u80fd\u4f7f Rc<T> \u5b9e\u4f8b\u88ab\u6e05\u7406\u3002 \u5f3a\u5f15\u7528\u4ee3\u8868\u5982\u4f55\u5171\u4eab Rc<T> \u5b9e\u4f8b\u7684\u6240\u6709\u6743\uff0c\u4f46\u5f31\u5f15\u7528\u5e76\u4e0d\u5c5e\u4e8e\u6240\u6709\u6743\u5173\u7cfb\u3002 \u4ed6\u4eec\u4e0d\u4f1a\u9020\u6210\u5f15\u7528\u5faa\u73af\uff0c\u56e0\u4e3a\u4efb\u4f55\u5f31\u5f15\u7528\u7684\u5faa\u73af\u4f1a\u5728\u5176\u76f8\u5173\u7684\u5f3a\u5f15\u7528\u8ba1\u6570\u4e3a 0 \u65f6\u88ab\u6253\u65ad\u3002 \u56e0\u4e3a Weak<T> \u5f15\u7528\u7684\u503c\u53ef\u80fd\u5df2\u7ecf\u88ab\u4e22\u5f03\u4e86\uff0c\u4e3a\u4e86\u4f7f\u7528 Weak<T> \u6240\u6307\u5411\u7684\u503c\uff0c\u6211\u4eec\u5fc5\u987b\u786e\u4fdd\u5176\u503c\u4ecd\u7136\u6709\u6548\u3002 \u4e3a\u6b64\u53ef\u4ee5\u8c03\u7528 Weak<T> \u5b9e\u4f8b\u7684 upgrade \u65b9\u6cd5\uff0c\u8fd9\u4f1a\u8fd4\u56de Option<Rc<T>> \u3002 \u5982\u679c Rc<T> \u503c\u8fd8\u672a\u88ab\u4e22\u5f03\uff0c\u5219\u7ed3\u679c\u662f Some \uff1b\u5982\u679c Rc<T> \u5df2\u88ab\u4e22\u5f03\uff0c\u5219\u7ed3\u679c\u662f None \u3002 \u56e0\u4e3a upgrade \u8fd4\u56de\u4e00\u4e2a Option<Rc<T>> \uff0cRust \u4f1a\u786e\u4fdd\u5904\u7406 Some \u548c None \u7684\u60c5\u51b5\uff0c\u6240\u4ee5\u5b83\u4e0d\u4f1a\u8fd4\u56de\u975e\u6cd5\u6307\u9488\u3002 \u6211\u4eec\u4f1a\u521b\u5efa\u4e00\u4e2a\u67d0\u9879\u77e5\u9053\u5176\u5b50\u9879\u548c\u7236\u9879\u7684\u6811\u5f62\u7ed3\u6784\u7684\u4f8b\u5b50\uff0c\u800c\u4e0d\u662f\u53ea\u77e5\u9053\u5176\u4e0b\u4e00\u9879\u7684\u5217\u8868\u3002 \u521b\u5efa\u6811\u5f62\u6570\u636e\u7ed3\u6784\uff1a\u5e26\u6709\u5b50\u8282\u70b9\u7684 Node \u5728\u6700\u5f00\u59cb\uff0c\u6211\u4eec\u5c06\u4f1a\u6784\u5efa\u4e00\u4e2a\u5e26\u6709\u5b50\u8282\u70b9\u7684\u6811\u3002\u8ba9\u6211\u4eec\u521b\u5efa\u4e00\u4e2a\u7528\u4e8e\u5b58\u653e\u5176\u62e5\u6709\u6240\u6709\u6743\u7684 i32 \u503c\u548c\u5176\u5b50\u8282\u70b9\u5f15\u7528\u7684 Node \uff1a \u6587\u4ef6\u540d: src/main.rs use std :: cell :: RefCell ; use std :: rc :: Rc ; #[derive(Debug)] struct Node { value : i32 , children : RefCell < Vec < Rc < Node >>> , } \u6211\u4eec\u5e0c\u671b\u80fd\u591f Node \u62e5\u6709\u5176\u5b50\u8282\u70b9\uff0c\u540c\u65f6\u4e5f\u5e0c\u671b\u901a\u8fc7\u53d8\u91cf\u6765\u5171\u4eab\u6240\u6709\u6743\uff0c\u4ee5\u4fbf\u53ef\u4ee5\u76f4\u63a5\u8bbf\u95ee\u6811\u4e2d\u7684\u6bcf\u4e00\u4e2a Node \uff0c\u4e3a\u6b64 Vec<T> \u7684\u9879\u7684\u7c7b\u578b\u88ab\u5b9a\u4e49\u4e3a Rc<Node> \u3002\u6211\u4eec\u8fd8\u5e0c\u671b\u80fd\u4fee\u6539\u5176\u4ed6\u8282\u70b9\u7684\u5b50\u8282\u70b9\uff0c\u6240\u4ee5 children \u4e2d Vec<Rc<Node>> \u88ab\u653e\u8fdb\u4e86 RefCell<T> \u3002 \u63a5\u4e0b\u6765\uff0c\u4f7f\u7528\u6b64\u7ed3\u6784\u4f53\u5b9a\u4e49\u6765\u521b\u5efa\u4e00\u4e2a\u53eb\u505a leaf \u7684\u5e26\u6709\u503c 3 \u4e14\u6ca1\u6709\u5b50\u8282\u70b9\u7684 Node \u5b9e\u4f8b\uff0c\u548c\u53e6\u4e00\u4e2a\u5e26\u6709\u503c 5 \u5e76\u4ee5 leaf \u4f5c\u4e3a\u5b50\u8282\u70b9\u7684\u5b9e\u4f8b branch \uff0c\u5982\u793a\u4f8b 15-27 \u6240\u793a\uff1a \u6587\u4ef6\u540d: src/main.rs fn main () { let leaf = Rc :: new ( Node { value : 3 , children : RefCell :: new ( vec! []), }); let branch = Rc :: new ( Node { value : 5 , children : RefCell :: new ( vec! [ Rc :: clone ( & leaf )]), }); } \u793a\u4f8b 15-27\uff1a\u521b\u5efa\u6ca1\u6709\u5b50\u8282\u70b9\u7684 leaf \u8282\u70b9\u548c\u4ee5 leaf \u4f5c\u4e3a\u5b50\u8282\u70b9\u7684 branch \u8282\u70b9 \u8fd9\u91cc\u514b\u9686\u4e86 leaf \u4e2d\u7684 Rc<Node> \u5e76\u50a8\u5b58\u5728\u4e86 branch \u4e2d\uff0c\u8fd9\u610f\u5473\u7740 leaf \u4e2d\u7684 Node \u73b0\u5728\u6709\u4e24\u4e2a\u6240\u6709\u8005\uff1a leaf \u548c branch \u3002\u53ef\u4ee5\u901a\u8fc7 branch.children \u4ece branch \u4e2d\u83b7\u5f97 leaf \uff0c\u4e0d\u8fc7\u65e0\u6cd5\u4ece leaf \u5230 branch \u3002 leaf \u6ca1\u6709\u5230 branch \u7684\u5f15\u7528\u4e14\u5e76\u4e0d\u77e5\u9053\u4ed6\u4eec\u76f8\u4e92\u5173\u8054\u3002\u6211\u4eec\u5e0c\u671b leaf \u77e5\u9053 branch \u662f\u5176\u7236\u8282\u70b9\u3002\u7a0d\u540e\u6211\u4eec\u4f1a\u8fd9\u4e48\u505a\u3002 \u589e\u52a0\u4ece\u5b50\u5230\u7236\u7684\u5f15\u7528 \u4e3a\u4e86\u4f7f\u5b50\u8282\u70b9\u77e5\u9053\u5176\u7236\u8282\u70b9\uff0c\u9700\u8981\u5728 Node \u7ed3\u6784\u4f53\u5b9a\u4e49\u4e2d\u589e\u52a0\u4e00\u4e2a parent \u5b57\u6bb5\u3002\u95ee\u9898\u662f parent \u7684\u7c7b\u578b\u5e94\u8be5\u662f\u4ec0\u4e48\u3002\u6211\u4eec\u77e5\u9053\u5176\u4e0d\u80fd\u5305\u542b Rc<T> \uff0c\u56e0\u4e3a\u8fd9\u6837 leaf.parent \u5c06\u4f1a\u6307\u5411 branch \u800c branch.children \u4f1a\u5305\u542b leaf \u7684\u6307\u9488\uff0c\u8fd9\u4f1a\u5f62\u6210\u5f15\u7528\u5faa\u73af\uff0c\u4f1a\u9020\u6210\u5176 strong_count \u6c38\u8fdc\u4e5f\u4e0d\u4f1a\u4e3a 0\u3002 \u73b0\u5728\u6362\u4e00\u79cd\u65b9\u5f0f\u601d\u8003\u8fd9\u4e2a\u5173\u7cfb\uff0c\u7236\u8282\u70b9\u5e94\u8be5\u62e5\u6709\u5176\u5b50\u8282\u70b9\uff1a\u5982\u679c\u7236\u8282\u70b9\u88ab\u4e22\u5f03\u4e86\uff0c\u5176\u5b50\u8282\u70b9\u4e5f\u5e94\u8be5\u88ab\u4e22\u5f03\u3002\u7136\u800c\u5b50\u8282\u70b9\u4e0d\u5e94\u8be5\u62e5\u6709\u5176\u7236\u8282\u70b9\uff1a\u5982\u679c\u4e22\u5f03\u5b50\u8282\u70b9\uff0c\u5176\u7236\u8282\u70b9\u5e94\u8be5\u4f9d\u7136\u5b58\u5728\u3002\u8fd9\u6b63\u662f\u5f31\u5f15\u7528\u7684\u4f8b\u5b50\uff01 \u6240\u4ee5 parent \u4f7f\u7528 Weak<T> \u7c7b\u578b\u800c\u4e0d\u662f Rc<T> \uff0c\u5177\u4f53\u6765\u8bf4\u662f RefCell<Weak<Node>> \u3002\u73b0\u5728 Node \u7ed3\u6784\u4f53\u5b9a\u4e49\u770b\u8d77\u6765\u50cf\u8fd9\u6837\uff1a \u6587\u4ef6\u540d: src/main.rs use std :: cell :: RefCell ; use std :: rc :: { Rc , Weak }; #[derive(Debug)] struct Node { value : i32 , parent : RefCell < Weak < Node >> , children : RefCell < Vec < Rc < Node >>> , } \u8fd9\u6837\uff0c\u4e00\u4e2a\u8282\u70b9\u5c31\u80fd\u591f\u5f15\u7528\u5176\u7236\u8282\u70b9\uff0c\u4f46\u4e0d\u62e5\u6709\u5176\u7236\u8282\u70b9\u3002\u5728\u793a\u4f8b 15-28 \u4e2d\uff0c\u6211\u4eec\u66f4\u65b0 main \u6765\u4f7f\u7528\u65b0\u5b9a\u4e49\u4ee5\u4fbf leaf \u8282\u70b9\u53ef\u4ee5\u901a\u8fc7 branch \u5f15\u7528\u5176\u7236\u8282\u70b9\uff1a \u6587\u4ef6\u540d: src/main.rs fn main () { let leaf = Rc :: new ( Node { value : 3 , parent : RefCell :: new ( Weak :: new ()), children : RefCell :: new ( vec! []), }); println! ( \"leaf parent = {:?}\" , leaf . parent . borrow (). upgrade ()); let branch = Rc :: new ( Node { value : 5 , parent : RefCell :: new ( Weak :: new ()), children : RefCell :: new ( vec! [ Rc :: clone ( & leaf )]), }); * leaf . parent . borrow_mut () = Rc :: downgrade ( & branch ); println! ( \"leaf parent = {:?}\" , leaf . parent . borrow (). upgrade ()); } \u793a\u4f8b 15-28\uff1a\u4e00\u4e2a leaf \u8282\u70b9\uff0c\u5176\u62e5\u6709\u6307\u5411\u5176\u7236\u8282\u70b9 branch \u7684 Weak \u5f15\u7528 \u521b\u5efa leaf \u8282\u70b9\u7c7b\u4f3c\u4e8e\u793a\u4f8b 15-27 \u4e2d\u5982\u4f55\u521b\u5efa leaf \u8282\u70b9\u7684\uff0c\u9664\u4e86 parent \u5b57\u6bb5\u6709\u6240\u4e0d\u540c\uff1a leaf \u5f00\u59cb\u65f6\u6ca1\u6709\u7236\u8282\u70b9\uff0c\u6240\u4ee5\u6211\u4eec\u65b0\u5efa\u4e86\u4e00\u4e2a\u7a7a\u7684 Weak \u5f15\u7528\u5b9e\u4f8b\u3002 \u6b64\u65f6\uff0c\u5f53\u5c1d\u8bd5\u4f7f\u7528 upgrade \u65b9\u6cd5\u83b7\u53d6 leaf \u7684\u7236\u8282\u70b9\u5f15\u7528\u65f6\uff0c\u4f1a\u5f97\u5230\u4e00\u4e2a None \u503c\u3002\u5982\u7b2c\u4e00\u4e2a println! \u8f93\u51fa\u6240\u793a\uff1a leaf parent = None \u5f53\u521b\u5efa branch \u8282\u70b9\u65f6\uff0c\u5176\u4e5f\u4f1a\u65b0\u5efa\u4e00\u4e2a Weak<Node> \u5f15\u7528\uff0c\u56e0\u4e3a branch \u5e76\u6ca1\u6709\u7236\u8282\u70b9\u3002 leaf \u4ecd\u7136\u4f5c\u4e3a branch \u7684\u4e00\u4e2a\u5b50\u8282\u70b9\u3002\u4e00\u65e6\u5728 branch \u4e2d\u6709\u4e86 Node \u5b9e\u4f8b\uff0c\u5c31\u53ef\u4ee5\u4fee\u6539 leaf \u4f7f\u5176\u62e5\u6709\u6307\u5411\u7236\u8282\u70b9\u7684 Weak<Node> \u5f15\u7528\u3002\u8fd9\u91cc\u4f7f\u7528\u4e86 leaf \u4e2d parent \u5b57\u6bb5\u91cc\u7684 RefCell<Weak<Node>> \u7684 borrow_mut \u65b9\u6cd5\uff0c\u63a5\u7740\u4f7f\u7528\u4e86 Rc::downgrade \u51fd\u6570\u6765\u4ece branch \u4e2d\u7684 Rc<Node> \u503c\u521b\u5efa\u4e86\u4e00\u4e2a\u6307\u5411 branch \u7684 Weak<Node> \u5f15\u7528\u3002 \u5f53\u518d\u6b21\u6253\u5370\u51fa leaf \u7684\u7236\u8282\u70b9\u65f6\uff0c\u8fd9\u4e00\u6b21\u5c06\u4f1a\u5f97\u5230\u5b58\u653e\u4e86 branch \u7684 Some \u503c\uff1a\u73b0\u5728 leaf \u53ef\u4ee5\u8bbf\u95ee\u5176\u7236\u8282\u70b9\u4e86\uff01\u5f53\u6253\u5370\u51fa leaf \u65f6\uff0c\u6211\u4eec\u4e5f\u907f\u514d\u4e86\u5982\u793a\u4f8b 15-26 \u4e2d\u6700\u7ec8\u4f1a\u5bfc\u81f4\u6808\u6ea2\u51fa\u7684\u5faa\u73af\uff1a Weak<Node> \u5f15\u7528\u88ab\u6253\u5370\u4e3a (Weak) \uff1a leaf parent = Some(Node { value: 5, parent: RefCell { value: (Weak) }, children: RefCell { value: [Node { value: 3, parent: RefCell { value: (Weak) }, children: RefCell { value: [] } }] } }) \u6ca1\u6709\u65e0\u9650\u7684\u8f93\u51fa\u8868\u660e\u8fd9\u6bb5\u4ee3\u7801\u5e76\u6ca1\u6709\u9020\u6210\u5f15\u7528\u5faa\u73af\u3002\u8fd9\u4e00\u70b9\u4e5f\u53ef\u4ee5\u4ece\u89c2\u5bdf Rc::strong_count \u548c Rc::weak_count \u8c03\u7528\u7684\u7ed3\u679c\u770b\u51fa\u3002 \u53ef\u89c6\u5316 strong_count \u548c weak_count \u7684\u6539\u53d8 \u8ba9\u6211\u4eec\u901a\u8fc7\u521b\u5efa\u4e86\u4e00\u4e2a\u65b0\u7684\u5185\u90e8\u4f5c\u7528\u57df\u5e76\u5c06 branch \u7684\u521b\u5efa\u653e\u5165\u5176\u4e2d\uff0c\u6765\u89c2\u5bdf Rc<Node> \u5b9e\u4f8b\u7684 strong_count \u548c weak_count \u503c\u7684\u53d8\u5316\u3002\u8fd9\u4f1a\u5c55\u793a\u5f53 branch \u521b\u5efa\u548c\u79bb\u5f00\u4f5c\u7528\u57df\u88ab\u4e22\u5f03\u65f6\u4f1a\u53d1\u751f\u4ec0\u4e48\u3002\u8fd9\u4e9b\u4fee\u6539\u5982\u793a\u4f8b 15-29 \u6240\u793a\uff1a \u6587\u4ef6\u540d: src/main.rs fn main () { let leaf = Rc :: new ( Node { value : 3 , parent : RefCell :: new ( Weak :: new ()), children : RefCell :: new ( vec! []), }); println! ( \"leaf strong = {}, weak = {}\" , Rc :: strong_count ( & leaf ), Rc :: weak_count ( & leaf ), ); { let branch = Rc :: new ( Node { value : 5 , parent : RefCell :: new ( Weak :: new ()), children : RefCell :: new ( vec! [ Rc :: clone ( & leaf )]), }); * leaf . parent . borrow_mut () = Rc :: downgrade ( & branch ); println! ( \"branch strong = {}, weak = {}\" , Rc :: strong_count ( & branch ), Rc :: weak_count ( & branch ), ); println! ( \"leaf strong = {}, weak = {}\" , Rc :: strong_count ( & leaf ), Rc :: weak_count ( & leaf ), ); } println! ( \"leaf parent = {:?}\" , leaf . parent . borrow (). upgrade ()); println! ( \"leaf strong = {}, weak = {}\" , Rc :: strong_count ( & leaf ), Rc :: weak_count ( & leaf ), ); } \u793a\u4f8b 15-29\uff1a\u5728\u5185\u90e8\u4f5c\u7528\u57df\u521b\u5efa branch \u5e76\u68c0\u67e5\u5176\u5f3a\u5f31\u5f15\u7528\u8ba1\u6570 \u4e00\u65e6\u521b\u5efa\u4e86 leaf \uff0c\u5176 Rc<Node> \u7684\u5f3a\u5f15\u7528\u8ba1\u6570\u4e3a 1\uff0c\u5f31\u5f15\u7528\u8ba1\u6570\u4e3a 0\u3002\u5728\u5185\u90e8\u4f5c\u7528\u57df\u4e2d\u521b\u5efa\u4e86 branch \u5e76\u4e0e leaf \u76f8\u5173\u8054\uff0c\u6b64\u65f6 branch \u4e2d Rc<Node> \u7684\u5f3a\u5f15\u7528\u8ba1\u6570\u4e3a 1\uff0c\u5f31\u5f15\u7528\u8ba1\u6570\u4e3a 1\uff08\u56e0\u4e3a leaf.parent \u901a\u8fc7 Weak<Node> \u6307\u5411 branch \uff09\u3002\u8fd9\u91cc leaf \u7684\u5f3a\u5f15\u7528\u8ba1\u6570\u4e3a 2\uff0c\u56e0\u4e3a\u73b0\u5728 branch \u7684 branch.children \u4e2d\u50a8\u5b58\u4e86 leaf \u7684 Rc<Node> \u7684\u62f7\u8d1d\uff0c\u4e0d\u8fc7\u5f31\u5f15\u7528\u8ba1\u6570\u4ecd\u7136\u4e3a 0\u3002 \u5f53\u5185\u90e8\u4f5c\u7528\u57df\u7ed3\u675f\u65f6\uff0c branch \u79bb\u5f00\u4f5c\u7528\u57df\uff0c Rc<Node> \u7684\u5f3a\u5f15\u7528\u8ba1\u6570\u51cf\u5c11\u4e3a 0\uff0c\u6240\u4ee5\u5176 Node \u88ab\u4e22\u5f03\u3002\u6765\u81ea leaf.parent \u7684\u5f31\u5f15\u7528\u8ba1\u6570 1 \u4e0e Node \u662f\u5426\u88ab\u4e22\u5f03\u65e0\u5173\uff0c\u6240\u4ee5\u5e76\u6ca1\u6709\u4ea7\u751f\u4efb\u4f55\u5185\u5b58\u6cc4\u6f0f\uff01 \u5982\u679c\u5728\u5185\u90e8\u4f5c\u7528\u57df\u7ed3\u675f\u540e\u5c1d\u8bd5\u8bbf\u95ee leaf \u7684\u7236\u8282\u70b9\uff0c\u4f1a\u518d\u6b21\u5f97\u5230 None \u3002\u5728\u7a0b\u5e8f\u7684\u7ed3\u5c3e\uff0c leaf \u4e2d Rc<Node> \u7684\u5f3a\u5f15\u7528\u8ba1\u6570\u4e3a 1\uff0c\u5f31\u5f15\u7528\u8ba1\u6570\u4e3a 0\uff0c\u56e0\u4e3a\u73b0\u5728 leaf \u53c8\u662f Rc<Node> \u552f\u4e00\u7684\u5f15\u7528\u4e86\u3002 \u6240\u6709\u8fd9\u4e9b\u7ba1\u7406\u8ba1\u6570\u548c\u503c\u7684\u903b\u8f91\u90fd\u5185\u5efa\u4e8e Rc<T> \u548c Weak<T> \u4ee5\u53ca\u5b83\u4eec\u7684 Drop trait \u5b9e\u73b0\u4e2d\u3002\u901a\u8fc7\u5728 Node \u5b9a\u4e49\u4e2d\u6307\u5b9a\u4ece\u5b50\u8282\u70b9\u5230\u7236\u8282\u70b9\u7684\u5173\u7cfb\u4e3a\u4e00\u4e2a Weak<T> \u5f15\u7528\uff0c\u5c31\u80fd\u591f\u62e5\u6709\u7236\u8282\u70b9\u548c\u5b50\u8282\u70b9\u4e4b\u95f4\u7684\u53cc\u5411\u5f15\u7528\u800c\u4e0d\u4f1a\u9020\u6210\u5f15\u7528\u5faa\u73af\u548c\u5185\u5b58\u6cc4\u6f0f\u3002 \u603b\u7ed3 \u8fd9\u4e00\u7ae0\u6db5\u76d6\u4e86\u5982\u4f55\u4f7f\u7528\u667a\u80fd\u6307\u9488\u6765\u505a\u51fa\u4e0d\u540c\u4e8e Rust \u5e38\u89c4\u5f15\u7528\u9ed8\u8ba4\u6240\u63d0\u4f9b\u7684\u4fdd\u8bc1\u4e0e\u53d6\u820d\u3002 Box<T> \u6709\u4e00\u4e2a\u5df2\u77e5\u7684\u5927\u5c0f\u5e76\u6307\u5411\u5206\u914d\u5728\u5806\u4e0a\u7684\u6570\u636e\u3002 Rc<T> \u8bb0\u5f55\u4e86\u5806\u4e0a\u6570\u636e\u7684\u5f15\u7528\u6570\u91cf\u4ee5\u4fbf\u53ef\u4ee5\u62e5\u6709\u591a\u4e2a\u6240\u6709\u8005\u3002 RefCell<T> \u548c\u5176\u5185\u90e8\u53ef\u53d8\u6027\u63d0\u4f9b\u4e86\u4e00\u4e2a\u53ef\u4ee5\u7528\u4e8e\u5f53\u9700\u8981\u4e0d\u53ef\u53d8\u7c7b\u578b\u4f46\u662f\u9700\u8981\u6539\u53d8\u5176\u5185\u90e8\u503c\u80fd\u529b\u7684\u7c7b\u578b\uff0c\u5e76\u5728\u8fd0\u884c\u65f6\u800c\u4e0d\u662f\u7f16\u8bd1\u65f6\u68c0\u67e5\u501f\u7528\u89c4\u5219\u3002 \u6211\u4eec\u8fd8\u4ecb\u7ecd\u4e86\u63d0\u4f9b\u4e86\u5f88\u591a\u667a\u80fd\u6307\u9488\u529f\u80fd\u7684 trait Deref \u548c Drop \u3002\u540c\u65f6\u63a2\u7d22\u4e86\u4f1a\u9020\u6210\u5185\u5b58\u6cc4\u6f0f\u7684\u5f15\u7528\u5faa\u73af\uff0c\u4ee5\u53ca\u5982\u4f55\u4f7f\u7528 Weak<T> \u6765\u907f\u514d\u5b83\u4eec\u3002 \u5982\u679c\u672c\u7ae0\u5185\u5bb9\u5f15\u8d77\u4e86\u4f60\u7684\u5174\u8da3\u5e76\u5e0c\u671b\u73b0\u5728\u5c31\u5b9e\u73b0\u4f60\u81ea\u5df1\u7684\u667a\u80fd\u6307\u9488\u7684\u8bdd\uff0c\u8bf7\u9605\u8bfb \u201cThe Rustonomicon\u201d \u6765\u83b7\u53d6\u66f4\u591a\u6709\u7528\u7684\u4fe1\u606f\u3002 \u63a5\u4e0b\u6765\uff0c\u8ba9\u6211\u4eec\u8c08\u8c08 Rust \u7684\u5e76\u53d1\u3002\u5c4a\u65f6\u751a\u81f3\u8fd8\u4f1a\u5b66\u4e60\u5230\u4e00\u4e9b\u65b0\u7684\u5e76\u4e14\u5bf9\u5e76\u53d1\u6709\u5e2e\u52a9\u7684\u667a\u80fd\u6307\u9488\u3002","title":"\u667a\u80fd\u6307\u9488"},{"location":"smart-pointers/#_1","text":"ch15-00-smart-pointers.md commit 1fedfc4b96c2017f64ecfcf41a0a07e2e815f24f","title":"\u667a\u80fd\u6307\u9488"},{"location":"smart-pointers/#_2","text":"\u6307\u9488 \uff08 pointer \uff09\u662f\u4e00\u4e2a\u5305\u542b\u5185\u5b58\u5730\u5740\u7684\u53d8\u91cf\u7684\u901a\u7528\u6982\u5ff5\u3002\u8fd9\u4e2a\u5730\u5740\u5f15\u7528\uff0c\u6216 \u201c\u6307\u5411\u201d\uff08points at\uff09\u4e00\u4e9b\u5176\u4ed6\u6570\u636e\u3002 Rust \u4e2d\u6700\u5e38\u89c1\u7684\u6307\u9488\u662f\u7b2c\u56db\u7ae0\u4ecb\u7ecd\u7684 \u5f15\u7528 \uff08 reference \uff09\u3002 \u5f15\u7528\u4ee5 & \u7b26\u53f7\u4e3a\u6807\u5fd7\u5e76\u501f\u7528\u4e86\u4ed6\u4eec\u6240\u6307\u5411\u7684\u503c\u3002 \u9664\u4e86\u5f15\u7528\u6570\u636e\u6ca1\u6709\u4efb\u4f55\u5176\u4ed6\u7279\u6b8a\u529f\u80fd\u3002 \u5b83\u4eec\u4e5f\u6ca1\u6709\u4efb\u4f55\u989d\u5916\u5f00\u9500\uff0c\u6240\u4ee5\u5e94\u7528\u5f97\u6700\u591a\u3002 \u53e6\u4e00\u65b9\u9762\uff0c \u667a\u80fd\u6307\u9488 \uff08 smart pointers \uff09\u662f\u4e00\u7c7b \u6570\u636e\u7ed3\u6784 \uff0c\u4ed6\u4eec\u7684\u8868\u73b0\u7c7b\u4f3c\u6307\u9488\uff0c\u4f46\u662f\u4e5f\u62e5\u6709\u989d\u5916\u7684\u5143\u6570\u636e\u548c\u529f\u80fd\u3002 \u667a\u80fd\u6307\u9488\u7684\u6982\u5ff5\u5e76\u4e0d\u4e3a Rust \u6240\u72ec\u6709\uff1b\u5176\u8d77\u6e90\u4e8e C++ \u5e76\u5b58\u5728\u4e8e\u5176\u4ed6\u8bed\u8a00\u4e2d\u3002 Rust \u6807\u51c6\u5e93\u4e2d\u4e0d\u540c\u7684\u667a\u80fd\u6307\u9488\u63d0\u4f9b\u4e86\u591a\u4e8e\u5f15\u7528\u7684\u989d\u5916\u529f\u80fd\u3002 \u672c\u7ae0\u5c06\u4f1a\u63a2\u7d22\u7684\u4e00\u4e2a\u4f8b\u5b50\u4fbf\u662f \u5f15\u7528\u8ba1\u6570 \uff08 reference counting \uff09 \u667a\u80fd\u6307\u9488\u7c7b\u578b\uff0c\u5176\u5141\u8bb8\u6570\u636e\u6709\u591a\u4e2a\u6240\u6709\u8005\u3002\u5f15\u7528\u8ba1\u6570\u667a\u80fd\u6307\u9488\u8bb0\u5f55\u603b\u5171\u6709\u591a\u5c11\u4e2a\u6240\u6709\u8005\uff0c\u5e76\u5f53\u6ca1\u6709\u4efb\u4f55\u6240\u6709\u8005\u65f6\u8d1f\u8d23\u6e05\u7406\u6570\u636e\u3002 \u5728 Rust \u4e2d\uff0c\u666e\u901a\u5f15\u7528\u548c\u667a\u80fd\u6307\u9488\u7684\u4e00\u4e2a\u989d\u5916\u7684 \u533a\u522b \u662f\u5f15\u7528\u662f\u4e00\u7c7b\u53ea\u501f\u7528\u6570\u636e\u7684\u6307\u9488\uff1b\u76f8\u53cd\uff0c\u5728\u5927\u90e8\u5206\u60c5\u51b5\u4e0b\uff0c\u667a\u80fd\u6307\u9488 \u62e5\u6709 \u4ed6\u4eec\u6307\u5411\u7684\u6570\u636e\u3002 \u5b9e\u9645\u4e0a\u672c\u4e66\u4e2d\u5df2\u7ecf\u51fa\u73b0\u8fc7\u4e00\u4e9b\u667a\u80fd\u6307\u9488\uff0c\u6bd4\u5982\u7b2c\u516b\u7ae0\u7684 String \u548c Vec<T> \uff0c\u867d\u7136\u5f53\u65f6\u6211\u4eec\u5e76\u4e0d\u8fd9\u4e48\u79f0\u547c\u5b83\u4eec\u3002\u8fd9\u4e9b\u7c7b\u578b\u90fd\u5c5e\u4e8e\u667a\u80fd\u6307\u9488\u56e0\u4e3a\u5b83\u4eec\u62e5\u6709\u4e00\u4e9b\u6570\u636e\u5e76\u5141\u8bb8\u4f60\u4fee\u6539\u5b83\u4eec\u3002\u5b83\u4eec\u4e5f\u5e26\u6709\u5143\u6570\u636e\uff08\u6bd4\u5982\u4ed6\u4eec\u7684\u5bb9\u91cf\uff09\u548c\u989d\u5916\u7684\u529f\u80fd\u6216\u4fdd\u8bc1\uff08 String \u7684\u6570\u636e\u603b\u662f\u6709\u6548\u7684 UTF-8 \u7f16\u7801\uff09\u3002 \u667a\u80fd\u6307\u9488\u901a\u5e38\u4f7f\u7528\u7ed3\u6784\u4f53\u5b9e\u73b0\u3002 \u667a\u80fd\u6307\u9488\u533a\u522b\u4e8e\u5e38\u89c4\u7ed3\u6784\u4f53\u7684\u663e\u8457\u7279\u6027\u5728\u4e8e\u5176\u5b9e\u73b0\u4e86 Deref \u548c Drop trait\u3002 Deref trait \u5141\u8bb8\u667a\u80fd\u6307\u9488\u7ed3\u6784\u4f53\u5b9e\u4f8b\u8868\u73b0\u7684\u50cf\u5f15\u7528\u4e00\u6837\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u7f16\u5199\u65e2\u7528\u4e8e\u5f15\u7528\u3001\u53c8\u7528\u4e8e\u667a\u80fd\u6307\u9488\u7684\u4ee3\u7801\u3002 Drop trait \u5141\u8bb8\u6211\u4eec\u81ea\u5b9a\u4e49\u5f53\u667a\u80fd\u6307\u9488\u79bb\u5f00\u4f5c\u7528\u57df\u65f6\u8fd0\u884c\u7684\u4ee3\u7801\u3002 \u672c\u7ae0\u4f1a\u8ba8\u8bba\u8fd9\u4e9b trait \u4ee5\u53ca\u4e3a\u4ec0\u4e48 \u5bf9\u4e8e\u667a\u80fd\u6307\u9488\u6765\u8bf4\u4ed6\u4eec\u5f88\u91cd\u8981\u3002 \u8003\u8651\u5230\u667a\u80fd\u6307\u9488\u662f\u4e00\u4e2a\u5728 Rust \u7ecf\u5e38\u88ab\u4f7f\u7528\u7684\u901a\u7528\u8bbe\u8ba1\u6a21\u5f0f\uff0c\u672c\u7ae0\u5e76\u4e0d\u4f1a\u8986\u76d6\u6240\u6709\u73b0\u5b58\u7684\u667a\u80fd\u6307\u9488\u3002\u5f88\u591a\u5e93\u90fd\u6709\u81ea\u5df1\u7684\u667a\u80fd\u6307\u9488\u800c\u4f60\u4e5f\u53ef\u4ee5\u7f16\u5199\u5c5e\u4e8e\u4f60\u81ea\u5df1\u7684\u667a\u80fd\u6307\u9488\u3002\u8fd9\u91cc\u5c06\u4f1a\u8bb2\u5230\u7684\u662f\u6765\u81ea\u6807\u51c6\u5e93\u4e2d\u6700\u5e38\u7528\u7684\u4e00\u4e9b\uff1a Box<T> \uff0c\u7528\u4e8e\u5728\u5806\u4e0a\u5206\u914d\u503c\u3002 Rc<T> \uff0c\u4e00\u4e2a\u5f15\u7528\u8ba1\u6570\u7c7b\u578b\uff0c\u5176\u6570\u636e\u53ef\u4ee5\u6709\u591a\u4e2a\u6240\u6709\u8005\u3002 Ref<T> \u548c RefMut<T> \uff0c\u901a\u8fc7 RefCell<T> \u8bbf\u95ee\u3002\uff08 RefCell<T> \u662f\u4e00\u4e2a\u5728\u8fd0\u884c\u65f6\u800c\u4e0d\u662f\u5728\u7f16\u8bd1\u65f6\u6267\u884c\u501f\u7528\u89c4\u5219\u7684\u7c7b\u578b\uff09\u3002 \u53e6\u5916\u6211\u4eec\u4f1a\u6d89\u53ca \u5185\u90e8\u53ef\u53d8\u6027 \uff08 interior mutability \uff09\u6a21\u5f0f\uff0c\u8fd9\u662f\u4e0d\u53ef\u53d8\u7c7b\u578b\u66b4\u9732\u51fa\u6539\u53d8\u5176\u5185\u90e8\u503c\u7684 API\u3002 \u6211\u4eec\u4e5f\u4f1a\u8ba8\u8bba \u5f15\u7528\u5faa\u73af \uff08 reference cycles \uff09\u4f1a\u5982\u4f55\u6cc4\u6f0f\u5185\u5b58\uff0c\u4ee5\u53ca\u5982\u4f55\u907f\u514d\u3002 \u8ba9\u6211\u4eec\u5f00\u59cb\u5427\uff01","title":"\u7b80\u4ecb"},{"location":"smart-pointers/#boxt","text":"ch15-01-box.md commit 359895c6b2e440275a663ee1a3c17e6a94fdc62b \u6700\u7b80\u5355\u76f4\u63a5\u7684\u667a\u80fd\u6307\u9488\u662f box \uff0c\u5176\u7c7b\u578b\u662f Box<T> \u3002 box \u5141\u8bb8\u4f60\u5c06\u4e00\u4e2a\u503c\u653e\u5728\u5806\u4e0a\u800c\u4e0d\u662f\u6808\u4e0a\u3002\u7559\u5728\u6808\u4e0a\u7684\u5219\u662f\u6307\u5411\u5806\u6570\u636e\u7684\u6307\u9488\u3002 \u5982\u679c\u4f60\u60f3\u56de\u987e\u4e00\u4e0b\u6808\u4e0e\u5806\u7684\u533a\u522b\u8bf7\u53c2\u8003\u7b2c\u56db\u7ae0\u3002 \u9664\u4e86\u6570\u636e\u88ab\u50a8\u5b58\u5728\u5806\u4e0a\u800c\u4e0d\u662f\u6808\u4e0a\u4e4b\u5916\uff0cbox \u6ca1\u6709\u6027\u80fd\u635f\u5931 \u3002\u4e0d\u8fc7\u4e5f\u6ca1\u6709\u5f88\u591a\u989d\u5916\u7684\u529f\u80fd\u3002\u5b83\u4eec\u591a\u7528\u4e8e\u5982\u4e0b\u573a\u666f\uff1a \u5f53\u6709\u4e00\u4e2a\u5728\u7f16\u8bd1\u65f6\u672a\u77e5\u5927\u5c0f\u7684\u7c7b\u578b\uff0c\u800c\u53c8\u60f3\u8981\u5728\u9700\u8981\u786e\u5207\u5927\u5c0f\u7684\u4e0a\u4e0b\u6587\u4e2d\u4f7f\u7528\u8fd9\u4e2a\u7c7b\u578b\u503c\u7684\u65f6\u5019 \u5f53\u6709\u5927\u91cf\u6570\u636e\u5e76\u5e0c\u671b\u5728\u786e\u4fdd\u6570\u636e\u4e0d\u88ab\u62f7\u8d1d\u7684\u60c5\u51b5\u4e0b\u8f6c\u79fb\u6240\u6709\u6743\u7684\u65f6\u5019 \u5f53\u5e0c\u671b\u62e5\u6709\u4e00\u4e2a\u503c\u5e76\u53ea\u5173\u5fc3\u5b83\u7684\u7c7b\u578b\u662f\u5426\u5b9e\u73b0\u4e86\u7279\u5b9a trait \u800c\u4e0d\u662f\u5176\u5177\u4f53\u7c7b\u578b\u7684\u65f6\u5019 \u6211\u4eec\u4f1a\u5728 \u201cbox \u5141\u8bb8\u521b\u5efa\u9012\u5f52\u7c7b\u578b\u201d \u90e8\u5206\u5c55\u793a\u7b2c\u4e00\u79cd\u573a\u666f\u3002\u5728\u7b2c\u4e8c\u79cd\u60c5\u51b5\u4e2d\uff0c\u8f6c\u79fb\u5927\u91cf\u6570\u636e\u7684\u6240\u6709\u6743\u53ef\u80fd\u4f1a\u82b1\u8d39\u5f88\u957f\u7684\u65f6\u95f4\uff0c\u56e0\u4e3a\u6570\u636e\u5728\u6808\u4e0a\u8fdb\u884c\u4e86\u62f7\u8d1d\u3002\u4e3a\u4e86\u6539\u5584\u8fd9\u79cd\u60c5\u51b5\u4e0b\u7684\u6027\u80fd\uff0c\u53ef\u4ee5\u901a\u8fc7 box \u5c06\u8fd9\u4e9b\u6570\u636e\u50a8\u5b58\u5728\u5806\u4e0a\u3002\u63a5\u7740\uff0c\u53ea\u6709\u5c11\u91cf\u7684\u6307\u9488\u6570\u636e\u5728\u6808\u4e0a\u88ab\u62f7\u8d1d\u3002\u7b2c\u4e09\u79cd\u60c5\u51b5\u88ab\u79f0\u4e3a trait \u5bf9\u8c61 \uff08 trait object \uff09\uff0c\u7b2c\u5341\u4e03\u7ae0\u521a\u597d\u6709\u4e00\u6574\u4e2a\u90e8\u5206 \u201c\u987e\u53ca\u4e0d\u540c\u7c7b\u578b\u503c\u7684 trait \u5bf9\u8c61\u201d \u4e13\u95e8\u8bb2\u89e3\u8fd9\u4e2a\u4e3b\u9898\u3002\u6240\u4ee5\u8fd9\u91cc\u6240\u5b66\u7684\u5185\u5bb9\u4f1a\u5728\u7b2c\u5341\u4e03\u7ae0\u518d\u6b21\u7528\u4e0a\uff01","title":"\u4f7f\u7528Box&lt;T&gt;\u6307\u5411\u5806\u4e0a\u7684\u6570\u636e"},{"location":"smart-pointers/#boxt_1","text":"\u5728\u8ba8\u8bba Box<T> \u7684\u7528\u4f8b\u4e4b\u524d\uff0c\u8ba9\u6211\u4eec\u719f\u6089\u4e00\u4e0b\u8bed\u6cd5\u4ee5\u53ca\u5982\u4f55\u4e0e\u50a8\u5b58\u5728 Box<T> \u4e2d\u7684\u503c\u8fdb\u884c\u4ea4\u4e92\u3002 \u793a\u4f8b 15-1 \u5c55\u793a\u4e86\u5982\u4f55\u4f7f\u7528 box \u5728\u5806\u4e0a\u50a8\u5b58\u4e00\u4e2a i32 \uff1a \u6587\u4ef6\u540d: src/main.rs fn main () { let b = Box :: new ( 5 ); // \u5176\u503c\u662f\u4e00\u4e2a\u6307\u5411\u88ab\u5206\u914d\u5728\u5806\u4e0a\u7684\u503c 5 \u7684 Box println! ( \"b = {}\" , b ); // \u6253\u5370\u51fa `b = 5`\uff1b } \u793a\u4f8b 15-1\uff1a\u4f7f\u7528 box \u5728\u5806\u4e0a\u50a8\u5b58\u4e00\u4e2a i32 \u503c \u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u50cf\u6570\u636e\u662f\u50a8\u5b58\u5728\u6808\u4e0a\u7684\u90a3\u6837\u8bbf\u95ee box \u4e2d\u7684\u6570\u636e\u3002\u6b63\u5982\u4efb\u4f55\u62e5\u6709\u6570\u636e\u6240\u6709\u6743\u7684\u503c\u90a3\u6837\uff0c\u5f53\u50cf b \u8fd9\u6837\u7684 box \u5728 main \u7684\u672b\u5c3e\u79bb\u5f00\u4f5c\u7528\u57df\u65f6\uff0c\u5b83\u5c06\u88ab\u91ca\u653e\u3002 \u8fd9\u4e2a\u91ca\u653e\u8fc7\u7a0b\u4f5c\u7528\u4e8e box \u672c\u8eab\uff08\u4f4d\u4e8e\u6808\u4e0a\uff09\u548c\u5b83\u6240\u6307\u5411\u7684\u6570\u636e\uff08\u4f4d\u4e8e\u5806\u4e0a\uff09\u3002 \u5c06\u4e00\u4e2a\u5355\u72ec\u7684\u503c\u5b58\u653e\u5728\u5806\u4e0a\u5e76\u4e0d\u662f\u5f88\u6709\u610f\u4e49\uff0c\u6240\u4ee5\u50cf\u793a\u4f8b 15-1 \u8fd9\u6837\u5355\u72ec\u4f7f\u7528 box \u5e76\u4e0d\u5e38\u89c1\u3002\u5c06\u50cf\u5355\u4e2a i32 \u8fd9\u6837\u7684\u503c\u50a8\u5b58\u5728\u6808\u4e0a\uff0c\u4e5f\u5c31\u662f\u5176\u9ed8\u8ba4\u5b58\u653e\u7684\u5730\u65b9\u5728\u5927\u90e8\u5206\u4f7f\u7528\u573a\u666f\u4e2d\u66f4\u4e3a\u5408\u9002\u3002\u8ba9\u6211\u4eec\u770b\u770b\u4e00\u4e2a\u4e0d\u4f7f\u7528 box \u65f6\u65e0\u6cd5\u5b9a\u4e49\u7684\u7c7b\u578b\u7684\u4f8b\u5b50\u3002","title":"\u4f7f\u7528 Box&lt;T&gt; \u5728\u5806\u4e0a\u50a8\u5b58\u6570\u636e"},{"location":"smart-pointers/#box","text":"Rust \u9700\u8981\u5728\u7f16\u8bd1\u65f6\u77e5\u9053\u7c7b\u578b\u5360\u7528\u591a\u5c11\u7a7a\u95f4\u3002\u4e00\u79cd\u65e0\u6cd5\u5728\u7f16\u8bd1\u65f6\u77e5\u9053\u5927\u5c0f\u7684\u7c7b\u578b\u662f \u9012\u5f52\u7c7b\u578b \uff08 recursive type \uff09\uff0c\u5176\u503c\u7684\u4e00\u90e8\u5206\u53ef\u4ee5\u662f\u76f8\u540c\u7c7b\u578b\u7684\u53e6\u4e00\u4e2a\u503c\u3002\u8fd9\u79cd\u503c\u7684\u5d4c\u5957\u7406\u8bba\u4e0a\u53ef\u4ee5\u65e0\u9650\u7684\u8fdb\u884c\u4e0b\u53bb\uff0c\u6240\u4ee5 Rust \u4e0d\u77e5\u9053\u9012\u5f52\u7c7b\u578b\u9700\u8981\u591a\u5c11\u7a7a\u95f4\u3002\u4e0d\u8fc7 box \u6709\u4e00\u4e2a\u5df2\u77e5\u7684\u5927\u5c0f\uff0c\u6240\u4ee5\u901a\u8fc7\u5728\u5faa\u73af\u7c7b\u578b\u5b9a\u4e49\u4e2d\u63d2\u5165 box\uff0c\u5c31\u53ef\u4ee5\u521b\u5efa\u9012\u5f52\u7c7b\u578b\u4e86\u3002 \u8ba9\u6211\u4eec\u63a2\u7d22\u4e00\u4e0b cons list \uff0c\u4e00\u4e2a\u51fd\u6570\u5f0f\u7f16\u7a0b\u8bed\u8a00\u4e2d\u7684\u5e38\u89c1\u7c7b\u578b\uff0c\u6765\u5c55\u793a\u8fd9\u4e2a\uff08\u9012\u5f52\u7c7b\u578b\uff09\u6982\u5ff5\u3002\u9664\u4e86\u9012\u5f52\u4e4b\u5916\uff0c\u6211\u4eec\u5c06\u8981\u5b9a\u4e49\u7684 cons list \u7c7b\u578b\u662f\u5f88\u76f4\u767d\u7684\uff0c\u6240\u4ee5\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\u7684\u6982\u5ff5\uff0c\u5728\u4efb\u4f55\u9047\u5230\u66f4\u4e3a\u590d\u6742\u7684\u6d89\u53ca\u5230\u9012\u5f52\u7c7b\u578b\u7684\u573a\u666f\u65f6\u90fd\u5f88\u5b9e\u7528\u3002","title":"Box \u5141\u8bb8\u521b\u5efa\u9012\u5f52\u7c7b\u578b"},{"location":"smart-pointers/#cons-list","text":"cons list \u662f\u4e00\u4e2a\u6765\u6e90\u4e8e Lisp \u7f16\u7a0b\u8bed\u8a00\u53ca\u5176\u65b9\u8a00\u7684\u6570\u636e\u7ed3\u6784\u3002\u5728 Lisp \u4e2d\uff0c cons \u51fd\u6570\uff08\u201cconstruct function\" \u7684\u7f29\u5199\uff09\u5229\u7528\u4e24\u4e2a\u53c2\u6570\u6765\u6784\u9020\u4e00\u4e2a\u65b0\u7684\u5217\u8868\uff0c\u4ed6\u4eec\u901a\u5e38\u662f\u4e00\u4e2a\u5355\u72ec\u7684\u503c\u548c\u53e6\u4e00\u4e2a\u5217\u8868\u3002 cons \u51fd\u6570\u7684\u6982\u5ff5\u6d89\u53ca\u5230\u66f4\u5e38\u89c1\u7684\u51fd\u6570\u5f0f\u7f16\u7a0b\u672f\u8bed\uff1b\u201c\u5c06 x \u4e0e y \u8fde\u63a5\u201d \u901a\u5e38\u610f\u5473\u7740\u6784\u5efa\u4e00\u4e2a\u65b0\u7684\u5bb9\u5668\u800c\u5c06 x \u7684\u5143\u7d20\u653e\u5728\u65b0\u5bb9\u5668\u7684\u5f00\u5934\uff0c\u5176\u540e\u5219\u662f\u5bb9\u5668 y \u7684\u5143\u7d20\u3002 cons list \u7684\u6bcf\u4e00\u9879\u90fd\u5305\u542b\u4e24\u4e2a\u5143\u7d20\uff1a\u5f53\u524d\u9879\u7684\u503c\u548c\u4e0b\u4e00\u9879\u3002\u5176\u6700\u540e\u4e00\u9879\u503c\u5305\u542b\u4e00\u4e2a\u53eb\u505a Nil \u7684\u503c\u4e14\u6ca1\u6709\u4e0b\u4e00\u9879\u3002cons list \u901a\u8fc7\u9012\u5f52\u8c03\u7528 cons \u51fd\u6570\u4ea7\u751f\u3002\u4ee3\u8868\u9012\u5f52\u7684\u7ec8\u6b62\u6761\u4ef6\uff08base case\uff09\u7684\u89c4\u8303\u540d\u79f0\u662f Nil \uff0c\u5b83\u5ba3\u5e03\u5217\u8868\u7684\u7ec8\u6b62\u3002\u6ce8\u610f\u8fd9\u4e0d\u540c\u4e8e\u7b2c\u516d\u7ae0\u4e2d\u7684 \u201cnull\u201d \u6216 \u201cnil\u201d \u7684\u6982\u5ff5\uff0c\u4ed6\u4eec\u4ee3\u8868\u65e0\u6548\u6216\u7f3a\u5931\u7684\u503c\u3002 \u6ce8\u610f\u867d\u7136\u51fd\u6570\u5f0f\u7f16\u7a0b\u8bed\u8a00\u7ecf\u5e38\u4f7f\u7528 cons list\uff0c\u4f46\u662f\u5b83\u5e76\u4e0d\u662f\u4e00\u4e2a Rust \u4e2d\u5e38\u89c1\u7684\u7c7b\u578b\u3002\u5927\u90e8\u5206\u5728 Rust \u4e2d\u9700\u8981\u5217\u8868\u7684\u65f6\u5019\uff0c Vec<T> \u662f\u4e00\u4e2a\u66f4\u597d\u7684\u9009\u62e9\u3002\u5176\u4ed6\u66f4\u4e3a\u590d\u6742\u7684\u9012\u5f52\u6570\u636e\u7c7b\u578b \u786e\u5b9e \u5728 Rust \u7684\u5f88\u591a\u573a\u666f\u4e2d\u5f88\u6709\u7528\uff0c\u4e0d\u8fc7\u901a\u8fc7\u4ee5 cons list \u4f5c\u4e3a\u5f00\u59cb\uff0c\u6211\u4eec\u53ef\u4ee5\u63a2\u7d22\u5982\u4f55\u4f7f\u7528 box \u6beb\u4e0d\u8d39\u529b\u7684\u5b9a\u4e49\u4e00\u4e2a\u9012\u5f52\u6570\u636e\u7c7b\u578b\u3002 \u793a\u4f8b 15-2 \u5305\u542b\u4e00\u4e2a cons list \u7684\u679a\u4e3e\u5b9a\u4e49\u3002\u6ce8\u610f\u8fd9\u8fd8\u4e0d\u80fd\u7f16\u8bd1\u56e0\u4e3a\u8fd9\u4e2a\u7c7b\u578b\u6ca1\u6709\u5df2\u77e5\u7684\u5927\u5c0f\uff0c\u4e4b\u540e\u6211\u4eec\u4f1a\u5c55\u793a\uff1a \u6587\u4ef6\u540d: src/main.rs enum List { Cons ( i32 , List ), Nil , } \u793a\u4f8b 15-2\uff1a\u7b2c\u4e00\u6b21\u5c1d\u8bd5\u5b9a\u4e49\u4e00\u4e2a\u4ee3\u8868 i32 \u503c\u7684 cons list \u6570\u636e\u7ed3\u6784\u7684\u679a\u4e3e \u6ce8\u610f\uff1a\u51fa\u4e8e\u793a\u4f8b\u7684\u9700\u8981\u6211\u4eec\u9009\u62e9\u5b9e\u73b0\u4e00\u4e2a\u53ea\u5b58\u653e i32 \u503c\u7684 cons list\u3002\u4e5f\u53ef\u4ee5\u7528\u6cdb\u578b\uff0c\u6b63\u5982\u7b2c\u5341\u7ae0\u8bb2\u5230\u7684\uff0c\u6765\u5b9a\u4e49\u4e00\u4e2a\u53ef\u4ee5\u5b58\u653e\u4efb\u4f55\u7c7b\u578b\u503c\u7684 cons list \u7c7b\u578b\u3002 \u4f7f\u7528\u8fd9\u4e2a cons list \u6765\u50a8\u5b58\u5217\u8868 1, 2, 3 \u5c06\u770b\u8d77\u6765\u5982\u793a\u4f8b 15-3 \u6240\u793a\uff1a \u6587\u4ef6\u540d: src/main.rs use crate :: List :: { Cons , Nil }; fn main () { let list = Cons ( 1 , Cons ( 2 , Cons ( 3 , Nil ))); } \u793a\u4f8b 15-3\uff1a\u4f7f\u7528 List \u679a\u4e3e\u50a8\u5b58\u5217\u8868 1, 2, 3 \u7b2c\u4e00\u4e2a Cons \u50a8\u5b58\u4e86 1 \u548c\u53e6\u4e00\u4e2a List \u503c\u3002\u8fd9\u4e2a List \u662f\u53e6\u4e00\u4e2a\u5305\u542b 2 \u7684 Cons \u503c\u548c\u4e0b\u4e00\u4e2a List \u503c\u3002 \u63a5\u7740\u53c8\u6709\u53e6\u4e00\u4e2a\u5b58\u653e\u4e86 3 \u7684 Cons \u503c\u548c\u6700\u540e\u4e00\u4e2a\u503c\u4e3a Nil \u7684 List \uff0c\u975e\u9012\u5f52\u6210\u5458\u4ee3\u8868\u4e86\u5217\u8868\u7684\u7ed3\u5c3e\u3002 \u5982\u679c\u5c1d\u8bd5\u7f16\u8bd1\u793a\u4f8b 15-3 \u7684\u4ee3\u7801\uff0c\u4f1a\u5f97\u5230\u5982\u793a\u4f8b 15-4 \u6240\u793a\u7684\u9519\u8bef\uff1a $ cargo run Compiling cons-list v0.1.0 (file:///projects/cons-list) error[E0072]: recursive type `List` has infinite size --> src/main.rs:1:1 | 1 | enum List { | ^^^^^^^^^ recursive type has infinite size 2 | Cons(i32, List), | ---- recursive without indirection | help: insert some indirection (e.g., a `Box`, `Rc`, or `&`) to make `List` representable | 2 | Cons(i32, Box<List>), | ++++ + error[E0391]: cycle detected when computing drop-check constraints for `List` --> src/main.rs:1:1 | 1 | enum List { | ^^^^^^^^^ | = note: ...which immediately requires computing drop-check constraints for `List` again = note: cycle used when computing dropck types for `Canonical { max_universe: U0, variables: [], value: ParamEnvAnd { param_env: ParamEnv { caller_bounds: [], reveal: UserFacing }, value: List } }` Some errors have detailed explanations: E0072, E0391. For more information about an error, try `rustc --explain E0072`. error: could not compile `cons-list` due to 2 previous errors \u793a\u4f8b 15-4\uff1a\u5c1d\u8bd5\u5b9a\u4e49\u4e00\u4e2a\u9012\u5f52\u679a\u4e3e\u65f6\u5f97\u5230\u7684\u9519\u8bef \u8fd9\u4e2a\u9519\u8bef\u8868\u660e\u8fd9\u4e2a\u7c7b\u578b \u201c\u6709\u65e0\u9650\u7684\u5927\u5c0f\u201d\u3002\u5176\u539f\u56e0\u662f List \u7684\u4e00\u4e2a\u6210\u5458\u88ab\u5b9a\u4e49\u4e3a\u662f \u9012\u5f52\u7684 \uff1a\u5b83\u76f4\u63a5\u5b58\u653e\u4e86\u53e6\u4e00\u4e2a\u76f8\u540c\u7c7b\u578b\u7684\u503c\u3002\u8fd9\u610f\u5473\u7740 Rust \u65e0\u6cd5\u8ba1\u7b97\u4e3a\u4e86\u5b58\u653e List \u503c\u5230\u5e95\u9700\u8981\u591a\u5c11\u7a7a\u95f4\u3002\u8ba9\u6211\u4eec\u4e00\u70b9\u4e00\u70b9\u6765\u770b\uff1a\u9996\u5148\u4e86\u89e3\u4e00\u4e0b Rust \u5982\u4f55\u51b3\u5b9a\u9700\u8981\u591a\u5c11\u7a7a\u95f4\u6765\u5b58\u653e\u4e00\u4e2a\u975e\u9012\u5f52\u7c7b\u578b\u3002","title":"cons list \u7684\u66f4\u591a\u5185\u5bb9"},{"location":"smart-pointers/#_3","text":"\u56de\u5fc6\u4e00\u4e0b\u7b2c\u516d\u7ae0\u8ba8\u8bba\u679a\u4e3e\u5b9a\u4e49\u65f6\u793a\u4f8b 6-2 \u4e2d\u5b9a\u4e49\u7684 Message \u679a\u4e3e\uff1a enum Message { Quit , Move { x : i32 , y : i32 }, Write ( String ), ChangeColor ( i32 , i32 , i32 ), } \u5f53 Rust \u9700\u8981\u77e5\u9053\u8981\u4e3a Message \u503c\u5206\u914d\u591a\u5c11\u7a7a\u95f4\u65f6\uff0c\u5b83\u53ef\u4ee5\u68c0\u67e5\u6bcf\u4e00\u4e2a\u6210\u5458\u5e76\u53d1\u73b0 Message::Quit \u5e76\u4e0d\u9700\u8981\u4efb\u4f55\u7a7a\u95f4\uff0c Message::Move \u9700\u8981\u8db3\u591f\u50a8\u5b58\u4e24\u4e2a i32 \u503c\u7684\u7a7a\u95f4\uff0c\u4f9d\u6b64\u7c7b\u63a8\u3002\u56e0\u4e3a enum \u5b9e\u9645\u4e0a\u53ea\u4f1a\u4f7f\u7528\u5176\u4e2d\u7684\u4e00\u4e2a\u6210\u5458\uff0c\u6240\u4ee5 Message \u503c\u6240\u9700\u7684\u7a7a\u95f4\u7b49\u4e8e\u50a8\u5b58\u5176\u6700\u5927\u6210\u5458\u7684\u7a7a\u95f4\u5927\u5c0f\u3002 \u4e0e\u6b64\u76f8\u5bf9\u5f53 Rust \u7f16\u8bd1\u5668\u68c0\u67e5\u50cf\u793a\u4f8b 15-2 \u4e2d\u7684 List \u8fd9\u6837\u7684\u9012\u5f52\u7c7b\u578b\u65f6\u4f1a\u53d1\u751f\u4ec0\u4e48\u5462\u3002\u7f16\u8bd1\u5668\u5c1d\u8bd5\u8ba1\u7b97\u51fa\u50a8\u5b58\u4e00\u4e2a List \u679a\u4e3e\u9700\u8981\u591a\u5c11\u5185\u5b58\uff0c\u5e76\u5f00\u59cb\u68c0\u67e5 Cons \u6210\u5458\uff0c\u90a3\u4e48 Cons \u9700\u8981\u7684\u7a7a\u95f4\u7b49\u4e8e i32 \u7684\u5927\u5c0f\u52a0\u4e0a List \u7684\u5927\u5c0f\u3002\u4e3a\u4e86\u8ba1\u7b97 List \u9700\u8981\u591a\u5c11\u5185\u5b58\uff0c\u5b83\u68c0\u67e5\u5176\u6210\u5458\uff0c\u4ece Cons \u6210\u5458\u5f00\u59cb\u3002 Cons \u6210\u5458\u50a8\u5b58\u4e86\u4e00\u4e2a i32 \u503c\u548c\u4e00\u4e2a List \u503c\uff0c\u8fd9\u6837\u7684\u8ba1\u7b97\u5c06\u65e0\u9650\u8fdb\u884c\u4e0b\u53bb\uff0c\u5982\u56fe 15-1 \u6240\u793a\uff1a \u56fe 15-1\uff1a\u4e00\u4e2a\u5305\u542b\u65e0\u9650\u4e2a Cons \u6210\u5458\u7684\u65e0\u9650 List","title":"\u8ba1\u7b97\u975e\u9012\u5f52\u7c7b\u578b\u7684\u5927\u5c0f"},{"location":"smart-pointers/#boxt_2","text":"Rust \u65e0\u6cd5\u8ba1\u7b97\u51fa\u8981\u4e3a\u5b9a\u4e49\u4e3a\u9012\u5f52\u7684\u7c7b\u578b\u5206\u914d\u591a\u5c11\u7a7a\u95f4\uff0c\u6240\u4ee5\u7f16\u8bd1\u5668\u7ed9\u51fa\u4e86\u793a\u4f8b 15-4 \u4e2d\u7684\u9519\u8bef\u3002\u8fd9\u4e2a\u9519\u8bef\u4e5f\u5305\u62ec\u4e86\u6709\u7528\u7684\u5efa\u8bae\uff1a help: insert some indirection (e.g., a `Box`, `Rc`, or `&`) to make `List` representable | 2 | Cons(i32, Box<List>), | ^^^^ ^ \u5728\u5efa\u8bae\u4e2d\uff0c\u201cindirection\u201d \u610f\u5473\u7740\u4e0d\u540c\u4e8e\u76f4\u63a5\u50a8\u5b58\u4e00\u4e2a\u503c\uff0c\u6211\u4eec\u5c06\u95f4\u63a5\u7684\u50a8\u5b58\u4e00\u4e2a\u6307\u5411\u503c\u7684\u6307\u9488\u3002 \u56e0\u4e3a Box<T> \u662f\u4e00\u4e2a\u6307\u9488\uff0c\u6211\u4eec\u603b\u662f\u77e5\u9053\u5b83\u9700\u8981\u591a\u5c11\u7a7a\u95f4\uff1a \u6307\u9488\u7684\u5927\u5c0f\u5e76\u4e0d\u4f1a\u6839\u636e\u5176\u6307\u5411\u7684\u6570\u636e\u91cf\u800c\u6539\u53d8\u3002 \u8fd9\u610f\u5473\u7740\u53ef\u4ee5\u5c06 Box \u653e\u5165 Cons \u6210\u5458\u4e2d\u800c\u4e0d\u662f\u76f4\u63a5\u5b58\u653e\u53e6\u4e00\u4e2a List \u503c\u3002 Box \u4f1a\u6307\u5411\u53e6\u4e00\u4e2a\u4f4d\u4e8e\u5806\u4e0a\u7684 List \u503c\uff0c\u800c\u4e0d\u662f\u5b58\u653e\u5728 Cons \u6210\u5458\u4e2d\u3002\u4ece\u6982\u5ff5\u4e0a\u8bb2\uff0c\u6211\u4eec\u4ecd\u7136\u6709\u4e00\u4e2a\u901a\u8fc7\u5728\u5176\u4e2d \u201c\u5b58\u653e\u201d \u5176\u4ed6\u5217\u8868\u521b\u5efa\u7684\u5217\u8868\uff0c\u4e0d\u8fc7\u73b0\u5728\u5b9e\u73b0\u8fd9\u4e2a\u6982\u5ff5\u7684\u65b9\u5f0f\u66f4\u50cf\u662f\u4e00\u4e2a\u9879\u6328\u7740\u53e6\u4e00\u9879\uff0c\u800c\u4e0d\u662f\u4e00\u9879\u5305\u542b\u53e6\u4e00\u9879\u3002 \u6211\u4eec\u53ef\u4ee5\u4fee\u6539\u793a\u4f8b 15-2 \u4e2d List \u679a\u4e3e\u7684\u5b9a\u4e49\u548c\u793a\u4f8b 15-3 \u4e2d\u5bf9 List \u7684\u5e94\u7528\uff0c\u5982\u793a\u4f8b 15-65 \u6240\u793a\uff0c\u8fd9\u662f\u53ef\u4ee5\u7f16\u8bd1\u7684\uff1a \u6587\u4ef6\u540d: src/main.rs enum List { Cons ( i32 , Box < List > ), Nil , } use crate :: List :: { Cons , Nil }; fn main () { let list = Cons ( 1 , Box :: new ( Cons ( 2 , Box :: new ( Cons ( 3 , Box :: new ( Nil )))))); } \u793a\u4f8b 15-5\uff1a\u4e3a\u4e86\u62e5\u6709\u5df2\u77e5\u5927\u5c0f\u800c\u4f7f\u7528 Box<T> \u7684 List \u5b9a\u4e49 Cons \u6210\u5458\u5c06\u4f1a\u9700\u8981\u4e00\u4e2a i32 \u7684\u5927\u5c0f\u52a0\u4e0a\u50a8\u5b58 box \u6307\u9488\u6570\u636e\u7684\u7a7a\u95f4\u3002 Nil \u6210\u5458\u4e0d\u50a8\u5b58\u503c\uff0c\u6240\u4ee5\u5b83\u6bd4 Cons \u6210\u5458\u9700\u8981\u66f4\u5c11\u7684\u7a7a\u95f4\u3002\u73b0\u5728\u6211\u4eec\u77e5\u9053\u4e86\u4efb\u4f55 List \u503c\u6700\u591a\u9700\u8981\u4e00\u4e2a i32 \u52a0\u4e0a box \u6307\u9488\u6570\u636e\u7684\u5927\u5c0f\u3002\u901a\u8fc7\u4f7f\u7528 box \uff0c\u6253\u7834\u4e86\u8fd9\u65e0\u9650\u9012\u5f52\u7684\u8fde\u9501\uff0c\u8fd9\u6837\u7f16\u8bd1\u5668\u5c31\u80fd\u591f\u8ba1\u7b97\u51fa\u50a8\u5b58 List \u503c\u9700\u8981\u7684\u5927\u5c0f\u4e86\u3002\u56fe 15-2 \u5c55\u793a\u4e86\u73b0\u5728 Cons \u6210\u5458\u770b\u8d77\u6765\u50cf\u4ec0\u4e48\uff1a \u56fe 15-2\uff1a\u56e0\u4e3a Cons \u5b58\u653e\u4e00\u4e2a Box \u6240\u4ee5 List \u4e0d\u662f\u65e0\u9650\u5927\u5c0f\u7684\u4e86 box \u53ea\u63d0\u4f9b\u4e86\u95f4\u63a5\u5b58\u50a8\u548c\u5806\u5206\u914d\uff1b\u4ed6\u4eec\u5e76\u6ca1\u6709\u4efb\u4f55\u5176\u4ed6\u7279\u6b8a\u7684\u529f\u80fd \uff0c \u6bd4\u5982\u6211\u4eec\u5c06\u4f1a\u89c1\u5230\u7684\u5176\u4ed6\u667a\u80fd\u6307\u9488\u3002 \u5b83\u4eec\u4e5f\u6ca1\u6709\u8fd9\u4e9b\u7279\u6b8a\u529f\u80fd\u5e26\u6765\u7684\u6027\u80fd\u635f\u5931\uff0c\u6240\u4ee5\u4ed6\u4eec\u53ef\u4ee5\u7528\u4e8e\u50cf cons list \u8fd9\u6837\u95f4\u63a5\u5b58\u50a8\u662f\u552f\u4e00\u6240\u9700\u529f\u80fd\u7684\u573a\u666f\u3002\u6211\u4eec\u8fd8\u5c06\u5728\u7b2c\u5341\u4e03\u7ae0\u770b\u5230 box \u7684\u66f4\u591a\u5e94\u7528\u573a\u666f\u3002 Box<T> \u7c7b\u578b\u662f\u4e00\u4e2a\u667a\u80fd\u6307\u9488\uff0c\u56e0\u4e3a\u5b83\u5b9e\u73b0\u4e86 Deref trait\uff0c\u5b83\u5141\u8bb8 Box<T> \u503c\u88ab\u5f53\u4f5c\u5f15\u7528\u5bf9\u5f85\u3002 \u5f53 Box<T> \u503c\u79bb\u5f00\u4f5c\u7528\u57df\u65f6\uff0c\u7531\u4e8e Box<T> \u7c7b\u578b Drop trait \u7684\u5b9e\u73b0\uff0cbox \u6240\u6307\u5411\u7684\u5806\u6570\u636e\u4e5f\u4f1a\u88ab\u6e05\u9664\u3002 \u8ba9\u6211\u4eec\u66f4\u8be6\u7ec6\u7684\u63a2\u7d22\u4e00\u4e0b\u8fd9\u4e24\u4e2a trait\u3002\u8fd9\u4e24\u4e2a trait \u5bf9\u4e8e\u5728\u672c\u7ae0\u4f59\u4e0b\u8ba8\u8bba\u7684\u5176\u4ed6\u667a\u80fd\u6307\u9488\u6240\u63d0\u4f9b\u7684\u529f\u80fd\u4e2d\uff0c\u5c06\u4f1a\u66f4\u4e3a\u91cd\u8981\u3002","title":"\u4f7f\u7528 Box&lt;T&gt; \u7ed9\u9012\u5f52\u7c7b\u578b\u4e00\u4e2a\u5df2\u77e5\u7684\u5927\u5c0f"},{"location":"smart-pointers/#deref-trait","text":"ch15-02-deref.md commit 5bebc80f61d33438f5598c1f7a20cc16be88ed08 \u5b9e\u73b0 Deref trait \u5141\u8bb8\u6211\u4eec\u91cd\u8f7d \u89e3\u5f15\u7528\u8fd0\u7b97\u7b26 \uff08 dereference operator \uff09 * \uff08\u4e0e\u4e58\u6cd5\u8fd0\u7b97\u7b26\u6216\u901a\u914d\u7b26\u76f8\u533a\u522b\uff09\u3002\u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\u5b9e\u73b0 Deref trait \u7684\u667a\u80fd\u6307\u9488\u53ef\u4ee5\u88ab\u5f53\u4f5c\u5e38\u89c4\u5f15\u7528\u6765\u5bf9\u5f85\uff0c\u53ef\u4ee5\u7f16\u5199\u64cd\u4f5c\u5f15\u7528\u7684\u4ee3\u7801\u5e76\u7528\u4e8e\u667a\u80fd\u6307\u9488\u3002 \u8ba9\u6211\u4eec\u9996\u5148\u770b\u770b\u89e3\u5f15\u7528\u8fd0\u7b97\u7b26\u5982\u4f55\u5904\u7406\u5e38\u89c4\u5f15\u7528\uff0c\u63a5\u7740\u5c1d\u8bd5\u5b9a\u4e49\u6211\u4eec\u81ea\u5df1\u7684\u7c7b\u4f3c Box<T> \u7684\u7c7b\u578b\u5e76\u770b\u770b\u4e3a\u4f55\u89e3\u5f15\u7528\u8fd0\u7b97\u7b26\u4e0d\u80fd\u50cf\u5f15\u7528\u4e00\u6837\u5de5\u4f5c\u3002\u6211\u4eec\u4f1a\u63a2\u7d22\u5982\u4f55\u5b9e\u73b0 Deref trait \u4f7f\u5f97\u667a\u80fd\u6307\u9488\u4ee5\u7c7b\u4f3c\u5f15\u7528\u7684\u65b9\u5f0f\u5de5\u4f5c\u53d8\u4e3a\u53ef\u80fd\u3002\u6700\u540e\uff0c\u6211\u4eec\u4f1a\u8ba8\u8bba Rust \u7684 Deref \u5f3a\u5236\u8f6c\u6362 \uff08 deref coercions \uff09\u529f\u80fd\u4ee5\u53ca\u5b83\u662f\u5982\u4f55\u5904\u7406\u5f15\u7528\u6216\u667a\u80fd\u6307\u9488\u7684\u3002 \u6211\u4eec\u5c06\u8981\u6784\u5efa\u7684 MyBox<T> \u7c7b\u578b\u4e0e\u771f\u6b63\u7684 Box<T> \u6709\u4e00\u4e2a\u5f88\u5927\u7684\u533a\u522b\uff1a\u6211\u4eec\u7684\u7248\u672c\u4e0d\u4f1a\u5728\u5806\u4e0a\u50a8\u5b58\u6570\u636e\u3002\u8fd9\u4e2a\u4f8b\u5b50\u91cd\u70b9\u5173\u6ce8 Deref \uff0c\u6240\u4ee5\u5176\u6570\u636e\u5b9e\u9645\u5b58\u653e\u5728\u4f55\u5904\uff0c\u76f8\u6bd4\u5176\u7c7b\u4f3c\u6307\u9488\u7684\u884c\u4e3a\u6765\u8bf4\u4e0d\u7b97\u91cd\u8981\u3002","title":"\u901a\u8fc7 Deref trait \u5c06\u667a\u80fd\u6307\u9488\u5f53\u4f5c\u5e38\u89c4\u5f15\u7528\u5904\u7406"},{"location":"smart-pointers/#_4","text":"\u5e38\u89c4\u5f15\u7528\u662f\u4e00\u4e2a\u6307\u9488\u7c7b\u578b\uff0c\u4e00\u79cd\u7406\u89e3\u6307\u9488\u7684\u65b9\u5f0f\u662f\u5c06\u5176\u770b\u6210\u6307\u5411\u50a8\u5b58\u5728\u5176\u4ed6\u67d0\u5904\u503c\u7684\u7bad\u5934\u3002\u5728\u793a\u4f8b 15-6 \u4e2d\uff0c\u521b\u5efa\u4e86\u4e00\u4e2a i32 \u503c\u7684\u5f15\u7528\uff0c\u63a5\u7740\u4f7f\u7528\u89e3\u5f15\u7528\u8fd0\u7b97\u7b26\u6765\u8ddf\u8e2a\u6240\u5f15\u7528\u7684\u6570\u636e\uff1a \u6587\u4ef6\u540d: src/main.rs fn main () { let x = 5 ; let y = & x ; assert_eq! ( 5 , x ); assert_eq! ( 5 , * y ); } \u793a\u4f8b 15-6\uff1a\u4f7f\u7528\u89e3\u5f15\u7528\u8fd0\u7b97\u7b26\u6765\u8ddf\u8e2a i32 \u503c\u7684\u5f15\u7528 \u53d8\u91cf x \u5b58\u653e\u4e86\u4e00\u4e2a i32 \u503c 5 \u3002 y \u7b49\u4e8e x \u7684\u4e00\u4e2a\u5f15\u7528\u3002\u53ef\u4ee5\u65ad\u8a00 x \u7b49\u4e8e 5 \u3002 \u7136\u800c\uff0c\u5982\u679c\u5e0c\u671b\u5bf9 y \u7684\u503c\u505a\u51fa\u65ad\u8a00\uff0c\u5fc5\u987b\u4f7f\u7528 *y \u6765\u8ffd\u8e2a\u5f15\u7528\u6240\u6307\u5411\u7684\u503c\uff08\u4e5f\u5c31\u662f \u89e3\u5f15\u7528 \uff09\u3002 \u4e00\u65e6\u89e3\u5f15\u7528\u4e86 y \uff0c\u5c31\u53ef\u4ee5\u8bbf\u95ee y \u6240\u6307\u5411\u7684\u6574\u578b\u503c\u5e76\u53ef\u4ee5\u4e0e 5 \u505a\u6bd4\u8f83\u3002 \u76f8\u53cd\u5982\u679c\u5c1d\u8bd5\u7f16\u5199 assert_eq!(5, y); \uff0c\u5219\u4f1a\u5f97\u5230\u5982\u4e0b\u7f16\u8bd1\u9519\u8bef\uff1a $ cargo run Compiling deref-example v0.1.0 (file:///projects/deref-example) error[E0277]: can't compare `{integer}` with `&{integer}` --> src/main.rs:6:5 | 6 | assert_eq!(5, y); | ^^^^^^^^^^^^^^^^ no implementation for `{integer} == &{integer}` | = help: the trait `PartialEq<&{integer}>` is not implemented for `{integer}` = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info) For more information about this error, try `rustc --explain E0277`. error: could not compile `deref-example` due to previous error \u4e0d\u5141\u8bb8\u6bd4\u8f83\u6570\u5b57\u7684\u5f15\u7528\u4e0e\u6570\u5b57\uff0c\u56e0\u4e3a\u5b83\u4eec\u662f\u4e0d\u540c\u7684\u7c7b\u578b\u3002\u5fc5\u987b\u4f7f\u7528\u89e3\u5f15\u7528\u8fd0\u7b97\u7b26\u8ffd\u8e2a\u5f15\u7528\u6240\u6307\u5411\u7684\u503c\u3002","title":"\u901a\u8fc7\u89e3\u5f15\u7528\u8fd0\u7b97\u7b26\u8ffd\u8e2a\u6307\u9488\u7684\u503c"},{"location":"smart-pointers/#boxt_3","text":"\u53ef\u4ee5\u4f7f\u7528 Box<T> \u4ee3\u66ff\u5f15\u7528\u6765\u91cd\u5199\u793a\u4f8b 15-6 \u4e2d\u7684\u4ee3\u7801\uff0c\u89e3\u5f15\u7528\u8fd0\u7b97\u7b26\u4e5f\u4e00\u6837\u80fd\u5de5\u4f5c\uff0c\u5982\u793a\u4f8b 15-7 \u6240\u793a\uff1a \u6587\u4ef6\u540d: src/main.rs fn main () { let x = 5 ; let y = Box :: new ( x ); assert_eq! ( 5 , x ); assert_eq! ( 5 , * y ); } \u793a\u4f8b 15-7\uff1a\u5728 Box<i32> \u4e0a\u4f7f\u7528\u89e3\u5f15\u7528\u8fd0\u7b97\u7b26 \u793a\u4f8b 15-7 \u76f8\u6bd4\u793a\u4f8b 15-6 \u4e3b\u8981\u4e0d\u540c\u7684\u5730\u65b9\u5c31\u662f\u5c06 y \u8bbe\u7f6e\u4e3a\u4e00\u4e2a \u6307\u5411 x \u503c\u62f7\u8d1d\u7684 box \u5b9e\u4f8b \uff0c\u800c\u4e0d\u662f\u6307\u5411 x \u503c\u7684\u5f15\u7528\u3002 \u5728\u6700\u540e\u7684\u65ad\u8a00\u4e2d\uff0c\u53ef\u4ee5\u4f7f\u7528\u89e3\u5f15\u7528\u8fd0\u7b97\u7b26\u4ee5 y \u4e3a\u5f15\u7528\u65f6\u76f8\u540c\u7684\u65b9\u5f0f\u8ffd\u8e2a box \u7684\u6307\u9488\u3002 \u63a5\u4e0b\u6765\u8ba9\u6211\u4eec\u901a\u8fc7\u5b9e\u73b0\u81ea\u5df1\u7684 box \u7c7b\u578b\u6765\u63a2\u7d22 Box<T> \u80fd\u8fd9\u4e48\u505a\u6709\u4f55\u7279\u6b8a\u4e4b\u5904\u3002","title":"\u50cf\u5f15\u7528\u4e00\u6837\u4f7f\u7528 Box&lt;T&gt;"},{"location":"smart-pointers/#_5","text":"\u4e3a\u4e86\u4f53\u4f1a\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u667a\u80fd\u6307\u9488\u4e0e\u5f15\u7528\u7684\u4e0d\u540c\uff0c\u8ba9\u6211\u4eec\u521b\u5efa\u4e00\u4e2a\u7c7b\u4f3c\u4e8e\u6807\u51c6\u5e93\u63d0\u4f9b\u7684 Box<T> \u7c7b\u578b\u7684\u667a\u80fd\u6307\u9488\u3002\u63a5\u7740\u5b66\u4e60\u5982\u4f55\u589e\u52a0\u4f7f\u7528\u89e3\u5f15\u7528\u8fd0\u7b97\u7b26\u7684\u529f\u80fd\u3002 \u4ece\u6839\u672c\u4e0a\u8bf4\uff0c Box<T> \u88ab\u5b9a\u4e49\u4e3a\u5305\u542b\u4e00\u4e2a\u5143\u7d20\u7684\u5143\u7ec4\u7ed3\u6784\u4f53\uff0c \u6240\u4ee5\u793a\u4f8b 15-8 \u4ee5\u76f8\u540c\u7684\u65b9\u5f0f\u5b9a\u4e49\u4e86 MyBox<T> \u7c7b\u578b\u3002 \u6211\u4eec\u8fd8\u5b9a\u4e49\u4e86 new \u51fd\u6570\u6765\u5bf9\u5e94\u5b9a\u4e49\u4e8e Box<T> \u7684 new \u51fd\u6570\uff1a \u6587\u4ef6\u540d: src/main.rs struct MyBox < T > ( T ); impl < T > MyBox < T > { fn new ( x : T ) -> MyBox < T > { MyBox ( x ) } } \u793a\u4f8b 15-8\uff1a\u5b9a\u4e49 MyBox<T> \u7c7b\u578b \u8fd9\u91cc\u5b9a\u4e49\u4e86\u4e00\u4e2a\u7ed3\u6784\u4f53 MyBox \u5e76\u58f0\u660e\u4e86\u4e00\u4e2a\u6cdb\u578b\u53c2\u6570 T \uff0c\u56e0\u4e3a\u6211\u4eec\u5e0c\u671b\u5176\u53ef\u4ee5\u5b58\u653e\u4efb\u4f55\u7c7b\u578b\u7684\u503c\u3002 MyBox \u662f\u4e00\u4e2a\u5305\u542b T \u7c7b\u578b\u5143\u7d20\u7684\u5143\u7ec4\u7ed3\u6784\u4f53\u3002 MyBox::new \u51fd\u6570\u83b7\u53d6\u4e00\u4e2a T \u7c7b\u578b\u7684\u53c2\u6570\u5e76\u8fd4\u56de\u4e00\u4e2a\u5b58\u653e\u4f20\u5165\u503c\u7684 MyBox \u5b9e\u4f8b\u3002 \u5c1d\u8bd5\u5c06\u793a\u4f8b 15-7 \u4e2d\u7684\u4ee3\u7801\u52a0\u5165\u793a\u4f8b 15-8 \u4e2d\u5e76\u4fee\u6539 main \u4f7f\u7528\u6211\u4eec\u5b9a\u4e49\u7684 MyBox<T> \u7c7b\u578b\u4ee3\u66ff Box<T> \u3002\u793a\u4f8b 15-9 \u4e2d\u7684\u4ee3\u7801\u4e0d\u80fd\u7f16\u8bd1\uff0c\u56e0\u4e3a Rust \u4e0d\u77e5\u9053\u5982\u4f55\u89e3\u5f15\u7528 MyBox \uff1a \u6587\u4ef6\u540d: src/main.rs fn main () { let x = 5 ; let y = MyBox :: new ( x ); assert_eq! ( 5 , x ); assert_eq! ( 5 , * y ); } \u793a\u4f8b 15-9\uff1a\u5c1d\u8bd5\u4ee5\u4f7f\u7528\u5f15\u7528\u548c Box<T> \u76f8\u540c\u7684\u65b9\u5f0f\u4f7f\u7528 MyBox<T> \u5f97\u5230\u7684\u7f16\u8bd1\u9519\u8bef\u662f\uff1a $ cargo run Compiling deref-example v0.1.0 (file:///projects/deref-example) error[E0614]: type `MyBox<{integer}>` cannot be dereferenced --> src/main.rs:14:19 | 14 | assert_eq!(5, *y); | ^^ For more information about this error, try `rustc --explain E0614`. error: could not compile `deref-example` due to previous error MyBox<T> \u7c7b\u578b\u4e0d\u80fd\u89e3\u5f15\u7528\uff0c\u56e0\u4e3a\u6211\u4eec\u5c1a\u672a\u5728\u8be5\u7c7b\u578b\u5b9e\u73b0\u8fd9\u4e2a\u529f\u80fd\u3002\u4e3a\u4e86\u542f\u7528 * \u8fd0\u7b97\u7b26\u7684\u89e3\u5f15\u7528\u529f\u80fd\uff0c\u9700\u8981\u5b9e\u73b0 Deref trait\u3002","title":"\u81ea\u5b9a\u4e49\u667a\u80fd\u6307\u9488"},{"location":"smart-pointers/#deref-trait_1","text":"\u5982\u7b2c\u5341\u7ae0 \u201c\u4e3a\u7c7b\u578b\u5b9e\u73b0 trait\u201d \u90e8\u5206\u6240\u8ba8\u8bba\u7684\uff0c\u4e3a\u4e86\u5b9e\u73b0 trait\uff0c\u9700\u8981\u63d0\u4f9b trait \u6240\u9700\u7684\u65b9\u6cd5\u5b9e\u73b0\u3002 Deref trait\uff0c\u7531\u6807\u51c6\u5e93\u63d0\u4f9b\uff0c\u8981\u6c42\u5b9e\u73b0\u540d\u4e3a deref \u7684\u65b9\u6cd5\uff0c\u5176\u501f\u7528 self \u5e76\u8fd4\u56de\u4e00\u4e2a\u5185\u90e8\u6570\u636e\u7684\u5f15\u7528\u3002\u793a\u4f8b 15-10 \u5305\u542b\u5b9a\u4e49\u4e8e MyBox \u4e4b\u4e0a\u7684 Deref \u5b9e\u73b0\uff1a \u6587\u4ef6\u540d: src/main.rs use std :: ops :: Deref ; impl < T > Deref for MyBox < T > { type Target = T ; fn deref ( & self ) -> & Self :: Target { & self . 0 } } \u793a\u4f8b 15-10\uff1a MyBox<T> \u4e0a\u7684 Deref \u5b9e\u73b0 type Target = T; \u8bed\u6cd5\u5b9a\u4e49\u4e86\u7528\u4e8e\u6b64 trait \u7684\u5173\u8054\u7c7b\u578b\u3002\u5173\u8054\u7c7b\u578b\u662f\u4e00\u4e2a\u7a0d\u6709\u4e0d\u540c\u7684\u5b9a\u4e49\u6cdb\u578b\u53c2\u6570\u7684\u65b9\u5f0f\uff0c\u73b0\u5728\u8fd8\u65e0\u9700\u8fc7\u591a\u7684\u62c5\u5fc3\u5b83\uff1b\u7b2c\u5341\u4e5d\u7ae0\u4f1a\u8be6\u7ec6\u4ecb\u7ecd\u3002 deref \u65b9\u6cd5\u4f53\u4e2d\u5199\u5165\u4e86 &self.0 \uff0c\u8fd9\u6837 deref \u8fd4\u56de\u4e86\u6211\u5e0c\u671b\u901a\u8fc7 * \u8fd0\u7b97\u7b26\u8bbf\u95ee\u7684\u503c\u7684\u5f15\u7528\u3002\u56de\u5fc6\u4e00\u4e0b\u7b2c\u4e94\u7ae0 \u201c\u4f7f\u7528\u6ca1\u6709\u547d\u540d\u5b57\u6bb5\u7684\u5143\u7ec4\u7ed3\u6784\u4f53\u6765\u521b\u5efa\u4e0d\u540c\u7684\u7c7b\u578b\u201d \u90e8\u5206 .0 \u7528\u6765\u8bbf\u95ee\u5143\u7ec4\u7ed3\u6784\u4f53\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u3002\u793a\u4f8b 15-9 \u4e2d\u7684 main \u51fd\u6570\u4e2d\u5bf9 MyBox<T> \u503c\u7684 * \u8c03\u7528\u73b0\u5728\u53ef\u4ee5\u7f16\u8bd1\u5e76\u80fd\u901a\u8fc7\u65ad\u8a00\u4e86\uff01 \u6ca1\u6709 Deref trait \u7684\u8bdd\uff0c\u7f16\u8bd1\u5668\u53ea\u4f1a\u89e3\u5f15\u7528 & \u5f15\u7528\u7c7b\u578b\u3002 deref \u65b9\u6cd5\u5411\u7f16\u8bd1\u5668\u63d0\u4f9b\u4e86\u83b7\u53d6\u4efb\u4f55\u5b9e\u73b0\u4e86 Deref trait \u7684\u7c7b\u578b\u7684\u503c\uff0c\u5e76\u4e14\u8c03\u7528\u8fd9\u4e2a\u7c7b\u578b\u7684 deref \u65b9\u6cd5\u6765\u83b7\u53d6\u4e00\u4e2a\u5b83\u77e5\u9053\u5982\u4f55\u89e3\u5f15\u7528\u7684 & \u5f15\u7528\u7684\u80fd\u529b\u3002 \u5f53\u6211\u4eec\u5728\u793a\u4f8b 15-9 \u4e2d\u8f93\u5165 *y \u65f6\uff0cRust \u4e8b\u5b9e\u4e0a\u5728\u5e95\u5c42\u8fd0\u884c\u4e86\u5982\u4e0b\u4ee3\u7801\uff1a * ( y . deref ()) Rust \u5c06 * \u8fd0\u7b97\u7b26\u66ff\u6362\u4e3a\u5148\u8c03\u7528 deref \u65b9\u6cd5\u518d\u8fdb\u884c\u666e\u901a\u89e3\u5f15\u7528\u7684\u64cd\u4f5c\uff0c\u5982\u6b64\u6211\u4eec\u4fbf\u4e0d\u7528\u62c5\u5fc3\u662f\u5426\u8fd8\u9700\u624b\u52a8\u8c03\u7528 deref \u65b9\u6cd5\u4e86\u3002Rust \u7684\u8fd9\u4e2a\u7279\u6027\u53ef\u4ee5\u8ba9\u6211\u4eec\u5199\u51fa\u884c\u4e3a\u4e00\u81f4\u7684\u4ee3\u7801\uff0c\u65e0\u8bba\u662f\u9762\u5bf9\u7684\u662f\u5e38\u89c4\u5f15\u7528\u8fd8\u662f\u5b9e\u73b0\u4e86 Deref \u7684\u7c7b\u578b\u3002 deref \u65b9\u6cd5\u8fd4\u56de\u503c\u7684\u5f15\u7528\uff0c\u4ee5\u53ca *(y.deref()) \u62ec\u53f7\u5916\u8fb9\u7684\u666e\u901a\u89e3\u5f15\u7528\u4ecd\u4e3a\u5fc5\u987b\u7684\u539f\u56e0\u5728\u4e8e\u6240\u6709\u6743\u3002\u5982\u679c deref \u65b9\u6cd5\u76f4\u63a5\u8fd4\u56de\u503c\u800c\u4e0d\u662f\u503c\u7684\u5f15\u7528\uff0c\u5176\u503c\uff08\u7684\u6240\u6709\u6743\uff09\u5c06\u88ab\u79fb\u51fa self \u3002\u5728\u8fd9\u91cc\u4ee5\u53ca\u5927\u90e8\u5206\u4f7f\u7528\u89e3\u5f15\u7528\u8fd0\u7b97\u7b26\u7684\u60c5\u51b5\u4e0b\u6211\u4eec\u5e76\u4e0d\u5e0c\u671b\u83b7\u53d6 MyBox<T> \u5185\u90e8\u503c\u7684\u6240\u6709\u6743\u3002 \u6ce8\u610f\uff0c\u6bcf\u6b21\u5f53\u6211\u4eec\u5728\u4ee3\u7801\u4e2d\u4f7f\u7528 * \u65f6\uff0c * \u8fd0\u7b97\u7b26\u90fd\u88ab\u66ff\u6362\u6210\u4e86\u5148\u8c03\u7528 deref \u65b9\u6cd5\u518d\u63a5\u7740\u4f7f\u7528 * \u89e3\u5f15\u7528\u7684\u64cd\u4f5c\uff0c\u4e14\u53ea\u4f1a\u53d1\u751f\u4e00\u6b21\uff0c\u4e0d\u4f1a\u5bf9 * \u64cd\u4f5c\u7b26\u65e0\u9650\u9012\u5f52\u66ff\u6362\uff0c\u89e3\u5f15\u7528\u51fa\u4e0a\u9762 i32 \u7c7b\u578b\u7684\u503c\u5c31\u505c\u6b62\u4e86\uff0c\u8fd9\u4e2a\u503c\u4e0e\u793a\u4f8b 15-9 \u4e2d assert_eq! \u7684 5 \u76f8\u5339\u914d\u3002","title":"\u901a\u8fc7\u5b9e\u73b0 Deref trait \u5c06\u67d0\u7c7b\u578b\u50cf\u5f15\u7528\u4e00\u6837\u5904\u7406"},{"location":"smart-pointers/#deref","text":"Deref \u5f3a\u5236\u8f6c\u6362 \uff08 deref coercions \uff09\u662f Rust \u5728\u51fd\u6570\u6216\u65b9\u6cd5\u4f20\u53c2\u4e0a\u7684\u4e00\u79cd\u4fbf\u5229\u3002Deref \u5f3a\u5236\u8f6c\u6362\u53ea\u80fd\u4f5c\u7528\u4e8e\u5b9e\u73b0\u4e86 Deref trait \u7684\u7c7b\u578b\u3002Deref \u5f3a\u5236\u8f6c\u6362\u5c06\u8fd9\u6837\u4e00\u4e2a\u7c7b\u578b\u7684\u5f15\u7528\u8f6c\u6362\u4e3a\u53e6\u4e00\u4e2a\u7c7b\u578b\u7684\u5f15\u7528\u3002\u4f8b\u5982\uff0cDeref \u5f3a\u5236\u8f6c\u6362 \u53ef\u4ee5\u5c06 &String \u8f6c\u6362\u4e3a &str \uff0c\u56e0\u4e3a String \u5b9e\u73b0\u4e86 Deref trait \u56e0\u6b64\u53ef\u4ee5\u8fd4\u56de &str \u3002\u5f53\u8fd9\u79cd\u7279\u5b9a\u7c7b\u578b\u7684\u5f15\u7528\u4f5c\u4e3a\u5b9e\u53c2\u4f20\u9012\u7ed9\u548c\u5f62\u53c2\u7c7b\u578b\u4e0d\u540c\u7684\u51fd\u6570\u6216\u65b9\u6cd5\u65f6\uff0cDeref \u5f3a\u5236\u8f6c\u6362\u5c06\u81ea\u52a8\u53d1\u751f\u3002\u8fd9\u65f6\u4f1a\u6709\u4e00\u7cfb\u5217\u7684 deref \u65b9\u6cd5\u88ab\u8c03\u7528\uff0c\u628a\u6211\u4eec\u63d0\u4f9b\u7684\u7c7b\u578b\u8f6c\u6362\u6210\u4e86\u53c2\u6570\u6240\u9700\u7684\u7c7b\u578b\u3002 Deref \u5f3a\u5236\u8f6c\u6362\u7684\u52a0\u5165\u4f7f\u5f97 Rust \u7a0b\u5e8f\u5458\u7f16\u5199\u51fd\u6570\u548c\u65b9\u6cd5\u8c03\u7528\u65f6\u65e0\u9700\u589e\u52a0\u8fc7\u591a\u663e\u5f0f\u4f7f\u7528 & \u548c * \u7684\u5f15\u7528\u548c\u89e3\u5f15\u7528\u3002\u8fd9\u4e2a\u529f\u80fd\u4e5f\u4f7f\u5f97\u6211\u4eec\u53ef\u4ee5\u7f16\u5199\u66f4\u591a\u540c\u65f6\u4f5c\u7528\u4e8e\u5f15\u7528\u6216\u667a\u80fd\u6307\u9488\u7684\u4ee3\u7801\u3002 \u4f5c\u4e3a\u5c55\u793a Deref \u5f3a\u5236\u8f6c\u6362\u7684\u5b9e\u4f8b\uff0c\u8ba9\u6211\u4eec\u4f7f\u7528\u793a\u4f8b 15-8 \u4e2d\u5b9a\u4e49\u7684 MyBox<T> \uff0c\u4ee5\u53ca\u793a\u4f8b 15-10 \u4e2d\u589e\u52a0\u7684 Deref \u5b9e\u73b0\u3002\u793a\u4f8b 15-11 \u5c55\u793a\u4e86\u4e00\u4e2a\u6709\u7740\u5b57\u7b26\u4e32 slice \u53c2\u6570\u7684\u51fd\u6570\u5b9a\u4e49\uff1a \u6587\u4ef6\u540d: src/main.rs fn hello ( name : & str ) { println! ( \"Hello, {}!\" , name ); } \u793a\u4f8b 15-11\uff1a hello \u51fd\u6570\u6709\u7740 &str \u7c7b\u578b\u7684\u53c2\u6570 name \u53ef\u4ee5\u4f7f\u7528\u5b57\u7b26\u4e32 slice \u4f5c\u4e3a\u53c2\u6570\u8c03\u7528 hello \u51fd\u6570\uff0c\u6bd4\u5982 hello(\"Rust\"); \u3002Deref \u5f3a\u5236\u8f6c\u6362\u4f7f\u5f97\u7528 MyBox<String> \u7c7b\u578b\u503c\u7684\u5f15\u7528\u8c03\u7528 hello \u6210\u4e3a\u53ef\u80fd\uff0c\u5982\u793a\u4f8b 15-12 \u6240\u793a\uff1a \u6587\u4ef6\u540d: src/main.rs fn main () { let m = MyBox :: new ( String :: from ( \"Rust\" )); hello ( & m ); } \u793a\u4f8b 15-12\uff1a\u56e0\u4e3a Deref \u5f3a\u5236\u8f6c\u6362\uff0c\u4f7f\u7528 MyBox<String> \u7684\u5f15\u7528\u8c03\u7528 hello \u662f\u53ef\u884c\u7684 \u8fd9\u91cc\u4f7f\u7528 &m \u8c03\u7528 hello \u51fd\u6570\uff0c\u5176\u4e3a MyBox<String> \u503c\u7684\u5f15\u7528\u3002\u56e0\u4e3a\u793a\u4f8b 15-10 \u4e2d\u5728 MyBox<T> \u4e0a\u5b9e\u73b0\u4e86 Deref trait\uff0cRust \u53ef\u4ee5\u901a\u8fc7 deref \u8c03\u7528\u5c06 &MyBox<String> \u53d8\u4e3a &String \u3002\u6807\u51c6\u5e93\u4e2d\u63d0\u4f9b\u4e86 String \u4e0a\u7684 Deref \u5b9e\u73b0\uff0c\u5176\u4f1a\u8fd4\u56de\u5b57\u7b26\u4e32 slice\uff0c\u8fd9\u53ef\u4ee5\u5728 Deref \u7684 API \u6587\u6863\u4e2d\u770b\u5230\u3002Rust \u518d\u6b21\u8c03\u7528 deref \u5c06 &String \u53d8\u4e3a &str \uff0c\u8fd9\u5c31\u7b26\u5408 hello \u51fd\u6570\u7684\u5b9a\u4e49\u4e86\u3002 \u5982\u679c Rust \u6ca1\u6709\u5b9e\u73b0 Deref \u5f3a\u5236\u8f6c\u6362\uff0c\u4e3a\u4e86\u4f7f\u7528 &MyBox<String> \u7c7b\u578b\u7684\u503c\u8c03\u7528 hello \uff0c\u5219\u4e0d\u5f97\u4e0d\u7f16\u5199\u793a\u4f8b 15-13 \u4e2d\u7684\u4ee3\u7801\u6765\u4ee3\u66ff\u793a\u4f8b 15-12\uff1a \u6587\u4ef6\u540d: src/main.rs fn main () { let m = MyBox :: new ( String :: from ( \"Rust\" )); hello ( & ( * m )[ .. ]); } \u793a\u4f8b 15-13\uff1a\u5982\u679c Rust \u6ca1\u6709 Deref \u5f3a\u5236\u8f6c\u6362\u5219\u5fc5\u987b\u7f16\u5199\u7684\u4ee3\u7801 (*m) \u5c06 MyBox<String> \u89e3\u5f15\u7528\u4e3a String \u3002\u63a5\u7740 & \u548c [..] \u83b7\u53d6\u4e86\u6574\u4e2a String \u7684\u5b57\u7b26\u4e32 slice \u6765\u5339\u914d hello \u7684\u7b7e\u540d\u3002\u6ca1\u6709 Deref \u5f3a\u5236\u8f6c\u6362\u6240\u6709\u8fd9\u4e9b\u7b26\u53f7\u6df7\u5728\u4e00\u8d77\u5c06\u66f4\u96be\u4ee5\u8bfb\u5199\u548c\u7406\u89e3\u3002Deref \u5f3a\u5236\u8f6c\u6362\u4f7f\u5f97 Rust \u81ea\u52a8\u7684\u5e2e\u6211\u4eec\u5904\u7406\u8fd9\u4e9b\u8f6c\u6362\u3002 \u5f53\u6240\u6d89\u53ca\u5230\u7684\u7c7b\u578b\u5b9a\u4e49\u4e86 Deref trait\uff0cRust \u4f1a\u5206\u6790\u8fd9\u4e9b\u7c7b\u578b\u5e76\u4f7f\u7528\u4efb\u610f\u591a\u6b21 Deref::deref \u8c03\u7528\u4ee5\u83b7\u5f97\u5339\u914d\u53c2\u6570\u7684\u7c7b\u578b\u3002\u8fd9\u4e9b\u89e3\u6790\u90fd\u53d1\u751f\u5728\u7f16\u8bd1\u65f6\uff0c\u6240\u4ee5\u5229\u7528 Deref \u5f3a\u5236\u8f6c\u6362\u5e76\u6ca1\u6709\u8fd0\u884c\u65f6\u635f\u8017\uff01","title":"\u51fd\u6570\u548c\u65b9\u6cd5\u7684\u9690\u5f0f Deref \u5f3a\u5236\u8f6c\u6362"},{"location":"smart-pointers/#deref_1","text":"\u7c7b\u4f3c\u4e8e\u5982\u4f55\u4f7f\u7528 Deref trait \u91cd\u8f7d\u4e0d\u53ef\u53d8\u5f15\u7528\u7684 * \u8fd0\u7b97\u7b26\uff0cRust \u63d0\u4f9b\u4e86 DerefMut trait \u7528\u4e8e\u91cd\u8f7d\u53ef\u53d8\u5f15\u7528\u7684 * \u8fd0\u7b97\u7b26\u3002 Rust \u5728\u53d1\u73b0\u7c7b\u578b\u548c trait \u5b9e\u73b0\u6ee1\u8db3\u4e09\u79cd\u60c5\u51b5\u65f6\u4f1a\u8fdb\u884c Deref \u5f3a\u5236\u8f6c\u6362\uff1a \u5f53 T: Deref<Target=U> \u65f6\u4ece &T \u5230 &U \u3002 \u5f53 T: DerefMut<Target=U> \u65f6\u4ece &mut T \u5230 &mut U \u3002 \u5f53 T: Deref<Target=U> \u65f6\u4ece &mut T \u5230 &U \u3002 \u5934\u4e24\u4e2a\u60c5\u51b5\u9664\u4e86\u53ef\u53d8\u6027\u4e4b\u5916\u662f\u76f8\u540c\u7684\uff1a \u7b2c\u4e00\u79cd\u60c5\u51b5\u8868\u660e\u5982\u679c\u6709\u4e00\u4e2a &T \uff0c\u800c T \u5b9e\u73b0\u4e86\u8fd4\u56de U \u7c7b\u578b\u7684 Deref \uff0c\u5219\u53ef\u4ee5\u76f4\u63a5\u5f97\u5230 &U \u3002 \u7b2c\u4e8c\u79cd\u60c5\u51b5\u8868\u660e\u5bf9\u4e8e\u53ef\u53d8\u5f15\u7528\u4e5f\u6709\u7740\u76f8\u540c\u7684\u884c\u4e3a\u3002 \u7b2c\u4e09\u4e2a\u60c5\u51b5\u6709\u4e9b\u5fae\u5999\uff1aRust \u4e5f\u4f1a\u5c06\u53ef\u53d8\u5f15\u7528\u5f3a\u8f6c\u4e3a\u4e0d\u53ef\u53d8\u5f15\u7528\u3002\u4f46\u662f\u53cd\u4e4b\u662f \u4e0d\u53ef\u80fd \u7684\uff1a\u4e0d\u53ef\u53d8\u5f15\u7528\u6c38\u8fdc\u4e5f\u4e0d\u80fd\u5f3a\u8f6c\u4e3a\u53ef\u53d8\u5f15\u7528\u3002 \u56e0\u4e3a\u6839\u636e\u501f\u7528\u89c4\u5219\uff0c\u5982\u679c\u6709\u4e00\u4e2a\u53ef\u53d8\u5f15\u7528\uff0c\u5176\u5fc5\u987b\u662f\u8fd9\u4e9b\u6570\u636e\u7684\u552f\u4e00\u5f15\u7528 \uff08\u5426\u5219\u7a0b\u5e8f\u5c06\u65e0\u6cd5\u7f16\u8bd1\uff09\u3002 \u5c06\u4e00\u4e2a\u53ef\u53d8\u5f15\u7528\u8f6c\u6362\u4e3a\u4e0d\u53ef\u53d8\u5f15\u7528\u6c38\u8fdc\u4e5f\u4e0d\u4f1a\u6253\u7834\u501f\u7528\u89c4\u5219\u3002\u5c06\u4e0d\u53ef\u53d8\u5f15\u7528\u8f6c\u6362\u4e3a\u53ef\u53d8\u5f15\u7528\u5219\u9700\u8981\u521d\u59cb\u7684\u4e0d\u53ef\u53d8\u5f15\u7528\u662f\u6570\u636e\u552f\u4e00\u7684\u4e0d\u53ef\u53d8\u5f15\u7528\uff0c\u800c\u501f\u7528\u89c4\u5219\u65e0\u6cd5\u4fdd\u8bc1\u8fd9\u4e00\u70b9\u3002\u56e0\u6b64\uff0cRust \u65e0\u6cd5\u5047\u8bbe\u5c06\u4e0d\u53ef\u53d8\u5f15\u7528\u8f6c\u6362\u4e3a\u53ef\u53d8\u5f15\u7528\u662f\u53ef\u80fd\u7684\u3002","title":"Deref \u5f3a\u5236\u8f6c\u6362\u5982\u4f55\u4e0e\u53ef\u53d8\u6027\u4ea4\u4e92"},{"location":"smart-pointers/#drop-trait","text":"ch15-03-drop.md commit d44317c3122b44fb713aba66cc295dee3453b24b \u5bf9\u4e8e\u667a\u80fd\u6307\u9488\u6a21\u5f0f\u6765\u8bf4\u7b2c\u4e8c\u4e2a\u91cd\u8981\u7684 trait \u662f Drop \uff0c\u5176\u5141\u8bb8\u6211\u4eec\u5728\u503c\u8981\u79bb\u5f00\u4f5c\u7528\u57df\u65f6\u6267\u884c\u4e00\u4e9b\u4ee3\u7801\u3002\u53ef\u4ee5\u4e3a\u4efb\u4f55\u7c7b\u578b\u63d0\u4f9b Drop trait \u7684\u5b9e\u73b0\uff0c\u540c\u65f6\u6240\u6307\u5b9a\u7684\u4ee3\u7801\u88ab\u7528\u4e8e\u91ca\u653e\u7c7b\u4f3c\u4e8e\u6587\u4ef6\u6216\u7f51\u7edc\u8fde\u63a5\u7684\u8d44\u6e90\u3002\u6211\u4eec\u5728\u667a\u80fd\u6307\u9488\u4e0a\u4e0b\u6587\u4e2d\u8ba8\u8bba Drop \u662f\u56e0\u4e3a\u5176\u529f\u80fd\u51e0\u4e4e\u603b\u662f\u7528\u4e8e\u5b9e\u73b0\u667a\u80fd\u6307\u9488\u3002\u4f8b\u5982\uff0c\u5f53 Box<T> \u88ab\u4e22\u5f03\u65f6\u4f1a\u91ca\u653e box \u6307\u5411\u7684\u5806\u7a7a\u95f4\u3002 \u5728\u5176\u4ed6\u4e00\u4e9b\u8bed\u8a00\u4e2d\uff0c\u6211\u4eec\u4e0d\u5f97\u4e0d\u8bb0\u4f4f\u5728\u6bcf\u6b21\u4f7f\u7528\u5b8c\u667a\u80fd\u6307\u9488\u5b9e\u4f8b\u540e\u8c03\u7528\u6e05\u7406\u5185\u5b58\u6216\u8d44\u6e90\u7684\u4ee3\u7801\u3002\u5982\u679c\u5fd8\u8bb0\u7684\u8bdd\uff0c\u8fd0\u884c\u4ee3\u7801\u7684\u7cfb\u7edf\u53ef\u80fd\u4f1a\u56e0\u4e3a\u8d1f\u8377\u8fc7\u91cd\u800c\u5d29\u6e83\u3002\u5728 Rust \u4e2d\uff0c\u53ef\u4ee5\u6307\u5b9a\u6bcf\u5f53\u503c\u79bb\u5f00\u4f5c\u7528\u57df\u65f6\u88ab\u6267\u884c\u7684\u4ee3\u7801\uff0c\u7f16\u8bd1\u5668\u4f1a\u81ea\u52a8\u63d2\u5165\u8fd9\u4e9b\u4ee3\u7801\u3002\u4e8e\u662f\u6211\u4eec\u5c31\u4e0d\u9700\u8981\u5728\u7a0b\u5e8f\u4e2d\u5230\u5904\u7f16\u5199\u5728\u5b9e\u4f8b\u7ed3\u675f\u65f6\u6e05\u7406\u8fd9\u4e9b\u53d8\u91cf\u7684\u4ee3\u7801 \u2014\u2014 \u800c\u4e14\u8fd8\u4e0d\u4f1a\u6cc4\u6f0f\u8d44\u6e90\u3002 \u6307\u5b9a\u5728\u503c\u79bb\u5f00\u4f5c\u7528\u57df\u65f6\u5e94\u8be5\u6267\u884c\u7684\u4ee3\u7801\u7684\u65b9\u5f0f\u662f\u5b9e\u73b0 Drop trait\u3002 Drop trait \u8981\u6c42\u5b9e\u73b0\u4e00\u4e2a\u53eb\u505a drop \u7684\u65b9\u6cd5\uff0c\u5b83\u83b7\u53d6\u4e00\u4e2a self \u7684\u53ef\u53d8\u5f15\u7528\u3002\u4e3a\u4e86\u80fd\u591f\u770b\u51fa Rust \u4f55\u65f6\u8c03\u7528 drop \uff0c\u8ba9\u6211\u4eec\u6682\u65f6\u4f7f\u7528 println! \u8bed\u53e5\u5b9e\u73b0 drop \u3002 \u793a\u4f8b 15-14 \u5c55\u793a\u4e86\u552f\u4e00\u5b9a\u5236\u529f\u80fd\u5c31\u662f\u5f53\u5176\u5b9e\u4f8b\u79bb\u5f00\u4f5c\u7528\u57df\u65f6\uff0c\u6253\u5370\u51fa Dropping CustomSmartPointer! \u7684\u7ed3\u6784\u4f53 CustomSmartPointer \u3002\u8fd9\u4f1a\u6f14\u793a Rust \u4f55\u65f6\u8fd0\u884c drop \u51fd\u6570\uff1a \u6587\u4ef6\u540d: src/main.rs struct CustomSmartPointer { data : String , } impl Drop for CustomSmartPointer { fn drop ( & mut self ) { println! ( \"Dropping CustomSmartPointer with data `{}`!\" , self . data ); } } fn main () { let c = CustomSmartPointer { data : String :: from ( \"my stuff\" ), }; let d = CustomSmartPointer { data : String :: from ( \"other stuff\" ), }; println! ( \"CustomSmartPointers created.\" ); } \u793a\u4f8b 15-14\uff1a\u7ed3\u6784\u4f53 CustomSmartPointer \uff0c\u5176\u5b9e\u73b0\u4e86\u653e\u7f6e\u6e05\u7406\u4ee3\u7801\u7684 Drop trait Drop trait \u5305\u542b\u5728 prelude \u4e2d\uff0c\u6240\u4ee5\u65e0\u9700\u5bfc\u5165\u5b83\u3002\u6211\u4eec\u5728 CustomSmartPointer \u4e0a\u5b9e\u73b0\u4e86 Drop trait\uff0c\u5e76\u63d0\u4f9b\u4e86\u4e00\u4e2a\u8c03\u7528 println! \u7684 drop \u65b9\u6cd5\u5b9e\u73b0\u3002 drop \u51fd\u6570\u4f53\u662f\u653e\u7f6e\u4efb\u4f55\u5f53\u7c7b\u578b\u5b9e\u4f8b\u79bb\u5f00\u4f5c\u7528\u57df\u65f6\u671f\u671b\u8fd0\u884c\u7684\u903b\u8f91\u7684\u5730\u65b9\u3002\u8fd9\u91cc\u9009\u62e9\u6253\u5370\u4e00\u4e9b\u6587\u672c\u4ee5\u5c55\u793a Rust \u4f55\u65f6\u8c03\u7528 drop \u3002 \u5728 main \u4e2d\uff0c\u6211\u4eec\u65b0\u5efa\u4e86\u4e24\u4e2a CustomSmartPointer \u5b9e\u4f8b\u5e76\u6253\u5370\u51fa\u4e86 CustomSmartPointer created. \u3002 \u5728 main \u7684\u7ed3\u5c3e\uff0c CustomSmartPointer \u7684\u5b9e\u4f8b\u4f1a\u79bb\u5f00\u4f5c\u7528\u57df\uff0c\u800c Rust \u4f1a\u8c03\u7528\u653e\u7f6e\u4e8e drop \u65b9\u6cd5\u4e2d\u7684\u4ee3\u7801\uff0c\u6253\u5370\u51fa\u6700\u540e\u7684\u4fe1\u606f\u3002\u6ce8\u610f\u65e0\u9700\u663e\u5f0f\u8c03\u7528 drop \u65b9\u6cd5\uff1a \u5f53\u8fd0\u884c\u8fd9\u4e2a\u7a0b\u5e8f\uff0c\u4f1a\u51fa\u73b0\u5982\u4e0b\u8f93\u51fa\uff1a $ cargo run Compiling drop-example v0.1.0 (file:///projects/drop-example) Finished dev [unoptimized + debuginfo] target(s) in 0.60s Running `target/debug/drop-example` CustomSmartPointers created. Dropping CustomSmartPointer with data `other stuff`! Dropping CustomSmartPointer with data `my stuff`! \u5f53\u5b9e\u4f8b\u79bb\u5f00\u4f5c\u7528\u57df Rust \u4f1a\u81ea\u52a8\u8c03\u7528 drop \uff0c\u5e76\u8c03\u7528\u6211\u4eec\u6307\u5b9a\u7684\u4ee3\u7801\u3002\u53d8\u91cf\u4ee5\u88ab\u521b\u5efa\u65f6\u76f8\u53cd\u7684\u987a\u5e8f\u88ab\u4e22\u5f03\uff0c\u6240\u4ee5 d \u5728 c \u4e4b\u524d\u88ab\u4e22\u5f03\u3002 \u8fd9\u4e2a\u4f8b\u5b50\u521a\u597d\u7ed9\u4e86\u6211\u4eec\u4e00\u4e2a drop \u65b9\u6cd5\u5982\u4f55\u5de5\u4f5c\u7684\u53ef\u89c6\u5316\u6307\u5bfc\uff0c\u4e0d\u8fc7\u901a\u5e38\u9700 \u8981\u6307\u5b9a\u7c7b\u578b\u6240\u9700\u6267\u884c\u7684\u6e05\u7406\u4ee3\u7801 \u800c\u4e0d\u662f\u6253\u5370\u4fe1\u606f\u3002","title":"\u4f7f\u7528 Drop Trait \u8fd0\u884c\u6e05\u7406\u4ee3\u7801"},{"location":"smart-pointers/#stdmemdrop","text":"\u4e0d\u5e78\u7684\u662f\uff0c\u6211\u4eec\u5e76\u4e0d\u80fd\u76f4\u622a\u4e86\u5f53\u7684\u7981\u7528 drop \u8fd9\u4e2a\u529f\u80fd\u3002\u901a\u5e38\u4e5f\u4e0d\u9700\u8981\u7981\u7528 drop \uff1b\u6574\u4e2a Drop trait \u5b58\u5728\u7684\u610f\u4e49\u5728\u4e8e\u5176\u662f\u81ea\u52a8\u5904\u7406\u7684\u3002\u7136\u800c\uff0c\u6709\u65f6\u4f60\u53ef\u80fd\u9700\u8981\u63d0\u65e9\u6e05\u7406\u67d0\u4e2a\u503c\u3002\u4e00\u4e2a\u4f8b\u5b50\u662f\u5f53\u4f7f\u7528\u667a\u80fd\u6307\u9488\u7ba1\u7406\u9501\u65f6\uff1b\u4f60\u53ef\u80fd\u5e0c\u671b\u5f3a\u5236\u8fd0\u884c drop \u65b9\u6cd5\u6765\u91ca\u653e\u9501\u4ee5\u4fbf\u4f5c\u7528\u57df\u4e2d\u7684\u5176\u4ed6\u4ee3\u7801\u53ef\u4ee5\u83b7\u53d6\u9501\u3002 Rust \u5e76\u4e0d\u5141\u8bb8\u6211\u4eec\u4e3b\u52a8\u8c03\u7528 Drop trait \u7684 drop \u65b9\u6cd5 \uff1b\u5f53\u6211\u4eec\u5e0c\u671b\u5728\u4f5c\u7528\u57df\u7ed3\u675f\u4e4b\u524d\u5c31\u5f3a\u5236\u91ca\u653e\u53d8\u91cf\u7684\u8bdd\uff0c\u6211\u4eec\u5e94\u8be5\u4f7f\u7528\u7684\u662f\u7531\u6807\u51c6\u5e93\u63d0\u4f9b\u7684 std::mem::drop \u3002 \u5982\u679c\u6211\u4eec\u50cf\u662f\u793a\u4f8b 15-14 \u90a3\u6837\u5c1d\u8bd5\u8c03\u7528 Drop trait \u7684 drop \u65b9\u6cd5\uff0c\u5c31\u4f1a\u5f97\u5230\u50cf\u793a\u4f8b 15-15 \u90a3\u6837\u7684\u7f16\u8bd1\u9519\u8bef\uff1a \u6587\u4ef6\u540d: src/main.rs fn main () { let c = CustomSmartPointer { data : String :: from ( \"some data\" ), }; println! ( \"CustomSmartPointer created.\" ); c . drop (); println! ( \"CustomSmartPointer dropped before the end of main.\" ); } \u793a\u4f8b 15-15\uff1a\u5c1d\u8bd5\u624b\u52a8\u8c03\u7528 Drop trait \u7684 drop \u65b9\u6cd5\u63d0\u65e9\u6e05\u7406 \u5982\u679c\u5c1d\u8bd5\u7f16\u8bd1\u4ee3\u7801\u4f1a\u5f97\u5230\u5982\u4e0b\u9519\u8bef\uff1a $ cargo run Compiling drop-example v0.1.0 (file:///projects/drop-example) error[E0040]: explicit use of destructor method --> src/main.rs:16:7 | 16 | c.drop(); | --^^^^-- | | | | | explicit destructor calls not allowed | help: consider using `drop` function: `drop(c)` For more information about this error, try `rustc --explain E0040`. error: could not compile `drop-example` due to previous error \u9519\u8bef\u4fe1\u606f\u8868\u660e\u4e0d\u5141\u8bb8\u663e\u5f0f\u8c03\u7528 drop \u3002\u9519\u8bef\u4fe1\u606f\u4f7f\u7528\u4e86\u672f\u8bed \u6790\u6784\u51fd\u6570 \uff08 destructor \uff09\uff0c\u8fd9\u662f\u4e00\u4e2a\u6e05\u7406\u5b9e\u4f8b\u7684\u51fd\u6570\u7684\u901a\u7528\u7f16\u7a0b\u6982\u5ff5\u3002 \u6790\u6784\u51fd\u6570 \u5bf9\u5e94\u521b\u5efa\u5b9e\u4f8b\u7684 \u6784\u9020\u51fd\u6570 \u3002Rust \u4e2d\u7684 drop \u51fd\u6570\u5c31\u662f\u8fd9\u4e48\u4e00\u4e2a\u6790\u6784\u51fd\u6570\u3002 Rust \u4e0d\u5141\u8bb8\u6211\u4eec\u663e\u5f0f\u8c03\u7528 drop \u56e0\u4e3a Rust \u4ecd\u7136\u4f1a\u5728 main \u7684\u7ed3\u5c3e\u5bf9\u503c\u81ea\u52a8\u8c03\u7528 drop \uff0c\u8fd9\u4f1a\u5bfc\u81f4\u4e00\u4e2a double free \u9519\u8bef\uff0c\u56e0\u4e3a Rust \u4f1a\u5c1d\u8bd5\u6e05\u7406\u76f8\u540c\u7684\u503c\u4e24\u6b21 \u3002 \u56e0\u4e3a\u4e0d\u80fd\u7981\u7528\u5f53\u503c\u79bb\u5f00\u4f5c\u7528\u57df\u65f6\u81ea\u52a8\u63d2\u5165\u7684 drop \uff0c\u5e76\u4e14\u4e0d\u80fd\u663e\u5f0f\u8c03\u7528 drop \uff0c\u5982\u679c\u6211\u4eec\u9700\u8981\u5f3a\u5236\u63d0\u65e9\u6e05\u7406\u503c\uff0c\u53ef\u4ee5\u4f7f\u7528 std::mem::drop \u51fd\u6570\u3002 std::mem::drop \u51fd\u6570\u4e0d\u540c\u4e8e Drop trait \u4e2d\u7684 drop \u65b9\u6cd5\u3002\u53ef\u4ee5\u901a\u8fc7\u4f20\u9012\u5e0c\u671b\u63d0\u65e9\u5f3a\u5236\u4e22\u5f03\u7684\u503c\u4f5c\u4e3a\u53c2\u6570\u3002 std::mem::drop \u4f4d\u4e8e prelude\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u4fee\u6539\u793a\u4f8b 15-15 \u4e2d\u7684 main \u6765\u8c03\u7528 drop \u51fd\u6570\u3002\u5982\u793a\u4f8b 15-16 \u6240\u793a\uff1a \u6587\u4ef6\u540d: src/main.rs fn main () { let c = CustomSmartPointer { data : String :: from ( \"some data\" ), }; println! ( \"CustomSmartPointer created.\" ); drop ( c ); println! ( \"CustomSmartPointer dropped before the end of main.\" ); } \u793a\u4f8b 15-16: \u5728\u503c\u79bb\u5f00\u4f5c\u7528\u57df\u4e4b\u524d\u8c03\u7528 std::mem::drop \u663e\u5f0f\u6e05\u7406 \u8fd0\u884c\u8fd9\u6bb5\u4ee3\u7801\u4f1a\u6253\u5370\u51fa\u5982\u4e0b\uff1a $ cargo run Compiling drop-example v0.1.0 (file:///projects/drop-example) Finished dev [unoptimized + debuginfo] target(s) in 0.73s Running `target/debug/drop-example` CustomSmartPointer created. Dropping CustomSmartPointer with data `some data`! CustomSmartPointer dropped before the end of main. Dropping CustomSmartPointer with data `some data`! \u51fa\u73b0\u5728 CustomSmartPointer created. \u548c CustomSmartPointer dropped before the end of main. \u4e4b\u95f4\uff0c\u8868\u660e\u4e86 drop \u65b9\u6cd5\u88ab\u8c03\u7528\u4e86\u5e76\u5728\u6b64\u4e22\u5f03\u4e86 c \u3002 Drop trait \u5b9e\u73b0\u4e2d\u6307\u5b9a\u7684\u4ee3\u7801\u53ef\u4ee5\u7528\u4e8e\u8bb8\u591a\u65b9\u9762\uff0c\u6765\u4f7f\u5f97\u6e05\u7406\u53d8\u5f97\u65b9\u4fbf\u548c\u5b89\u5168\uff1a\u6bd4\u5982\u53ef\u4ee5\u7528\u5176\u521b\u5efa\u6211\u4eec\u81ea\u5df1\u7684\u5185\u5b58\u5206\u914d\u5668\uff01\u901a\u8fc7 Drop trait \u548c Rust \u6240\u6709\u6743\u7cfb\u7edf\uff0c\u4f60\u65e0\u9700\u62c5\u5fc3\u4e4b\u540e\u7684\u4ee3\u7801\u6e05\u7406\uff0cRust \u4f1a\u81ea\u52a8\u8003\u8651\u8fd9\u4e9b\u95ee\u9898\u3002 \u6211\u4eec\u4e5f\u65e0\u9700\u62c5\u5fc3\u610f\u5916\u7684\u6e05\u7406\u6389\u4ecd\u5728\u4f7f\u7528\u7684\u503c\uff0c\u8fd9\u4f1a\u9020\u6210\u7f16\u8bd1\u5668\u9519\u8bef\uff1a\u6240\u6709\u6743\u7cfb\u7edf\u786e\u4fdd\u5f15\u7528\u603b\u662f\u6709\u6548\u7684\uff0c\u4e5f\u4f1a\u786e\u4fdd drop \u53ea\u4f1a\u5728\u503c\u4e0d\u518d\u88ab\u4f7f\u7528\u65f6\u88ab\u8c03\u7528\u4e00\u6b21\u3002 \u73b0\u5728\u6211\u4eec\u5b66\u4e60\u4e86 Box<T> \u548c\u4e00\u4e9b\u667a\u80fd\u6307\u9488\u7684\u7279\u6027\uff0c\u8ba9\u6211\u4eec\u804a\u804a\u6807\u51c6\u5e93\u4e2d\u5b9a\u4e49\u7684\u5176\u4ed6\u51e0\u79cd\u667a\u80fd\u6307\u9488\u3002","title":"\u901a\u8fc7 std::mem::drop \u63d0\u65e9\u4e22\u5f03\u503c"},{"location":"smart-pointers/#rct","text":"ch15-04-rc.md commit 45fe0fc9af98a214ed779d2cfac6773bdbfc708e \u5927\u90e8\u5206\u60c5\u51b5\u4e0b\u6240\u6709\u6743\u662f\u975e\u5e38\u660e\u786e\u7684\uff1a\u53ef\u4ee5\u51c6\u786e\u5730\u77e5\u9053\u54ea\u4e2a\u53d8\u91cf\u62e5\u6709\u67d0\u4e2a\u503c\u3002\u7136\u800c\uff0c \u6709\u4e9b\u60c5\u51b5\u5355\u4e2a\u503c\u53ef\u80fd\u4f1a\u6709\u591a\u4e2a\u6240\u6709\u8005 \u3002\u4f8b\u5982\uff0c\u5728\u56fe\u6570\u636e\u7ed3\u6784\u4e2d\uff0c\u591a\u4e2a\u8fb9\u53ef\u80fd\u6307\u5411\u76f8\u540c\u7684\u8282\u70b9\uff0c\u800c\u8fd9\u4e2a\u8282\u70b9\u4ece\u6982\u5ff5\u4e0a\u8bb2\u4e3a\u6240\u6709\u6307\u5411\u5b83\u7684\u8fb9\u6240\u62e5\u6709\u3002\u8282\u70b9\u76f4\u5230\u6ca1\u6709\u4efb\u4f55\u8fb9\u6307\u5411\u5b83\u4e4b\u524d\u90fd\u4e0d\u5e94\u8be5\u88ab\u6e05\u7406\u3002 \u4e3a\u4e86\u542f\u7528\u591a\u6240\u6709\u6743\uff0cRust \u6709\u4e00\u4e2a\u53eb\u505a Rc<T> \u7684\u7c7b\u578b\u3002\u5176\u540d\u79f0\u4e3a \u5f15\u7528\u8ba1\u6570 \uff08 reference counting \uff09\u7684\u7f29\u5199\u3002 \u5f15\u7528\u8ba1\u6570\u610f\u5473\u7740\u8bb0\u5f55\u4e00\u4e2a\u503c\u5f15\u7528\u7684\u6570\u91cf\u6765\u77e5\u6653\u8fd9\u4e2a\u503c\u662f\u5426\u4ecd\u5728\u88ab\u4f7f\u7528 \u3002\u5982\u679c\u67d0\u4e2a\u503c\u6709\u96f6\u4e2a\u5f15\u7528\uff0c\u5c31\u4ee3\u8868\u6ca1\u6709\u4efb\u4f55\u6709\u6548\u5f15\u7528\u5e76\u53ef\u4ee5\u88ab\u6e05\u7406\u3002 \u53ef\u4ee5\u5c06\u5176\u60f3\u8c61\u4e3a\u5ba2\u5385\u4e2d\u7684\u7535\u89c6\u3002\u5f53\u4e00\u4e2a\u4eba\u8fdb\u6765\u770b\u7535\u89c6\u65f6\uff0c\u4ed6\u6253\u5f00\u7535\u89c6\u3002\u5176\u4ed6\u4eba\u4e5f\u53ef\u4ee5\u8fdb\u6765\u770b\u7535\u89c6\u3002\u5f53\u6700\u540e\u4e00\u4e2a\u4eba\u79bb\u5f00\u623f\u95f4\u65f6\uff0c\u4ed6\u5173\u6389\u7535\u89c6\u56e0\u4e3a\u5b83\u4e0d\u518d\u88ab\u4f7f\u7528\u4e86\u3002\u5982\u679c\u67d0\u4eba\u5728\u5176\u4ed6\u4eba\u8fd8\u5728\u770b\u7684\u65f6\u5019\u5c31\u5173\u6389\u4e86\u7535\u89c6\uff0c\u6b63\u5728\u770b\u7535\u89c6\u7684\u4eba\u80af\u5b9a\u4f1a\u6293\u72c2\u7684\uff01 Rc<T> \u7528\u4e8e\u5f53\u6211\u4eec\u5e0c\u671b\u5728\u5806\u4e0a\u5206\u914d\u4e00\u4e9b\u5185\u5b58\u4f9b\u7a0b\u5e8f\u7684\u591a\u4e2a\u90e8\u5206\u8bfb\u53d6\uff0c\u800c\u4e14\u65e0\u6cd5\u5728\u7f16\u8bd1\u65f6\u786e\u5b9a\u7a0b\u5e8f\u7684\u54ea\u4e00\u90e8\u5206\u4f1a\u6700\u540e\u7ed3\u675f\u4f7f\u7528\u5b83\u7684\u65f6\u5019\u3002\u5982\u679c\u786e\u5b9e\u77e5\u9053\u54ea\u90e8\u5206\u662f\u6700\u540e\u4e00\u4e2a\u7ed3\u675f\u4f7f\u7528\u7684\u8bdd\uff0c\u5c31\u53ef\u4ee5\u4ee4\u5176\u6210\u4e3a\u6570\u636e\u7684\u6240\u6709\u8005\uff0c\u6b63\u5e38\u7684\u6240\u6709\u6743\u89c4\u5219\u5c31\u53ef\u4ee5\u5728\u7f16\u8bd1\u65f6\u751f\u6548\u3002 \u6ce8\u610f Rc<T> \u53ea\u80fd\u7528\u4e8e\u5355\u7ebf\u7a0b\u573a\u666f\uff1b\u7b2c\u5341\u516d\u7ae0\u5e76\u53d1\u4f1a\u6d89\u53ca\u5230\u5982\u4f55\u5728\u591a\u7ebf\u7a0b\u7a0b\u5e8f\u4e2d\u8fdb\u884c\u5f15\u7528\u8ba1\u6570\u3002","title":"Rc&lt;T&gt; \u5f15\u7528\u8ba1\u6570\u667a\u80fd\u6307\u9488"},{"location":"smart-pointers/#rct_1","text":"\u8ba9\u6211\u4eec\u56de\u5230\u793a\u4f8b 15-5 \u4e2d\u4f7f\u7528 Box<T> \u5b9a\u4e49 cons list \u7684\u4f8b\u5b50\u3002\u8fd9\u4e00\u6b21\uff0c\u6211\u4eec\u5e0c\u671b\u521b\u5efa\u4e24\u4e2a\u5171\u4eab\u7b2c\u4e09\u4e2a\u5217\u8868\u6240\u6709\u6743\u7684\u5217\u8868\uff0c\u5176\u6982\u5ff5\u5c06\u4f1a\u770b\u8d77\u6765\u5982\u56fe 15-3 \u6240\u793a\uff1a \u56fe 15-3: \u4e24\u4e2a\u5217\u8868, b \u548c c , \u5171\u4eab\u7b2c\u4e09\u4e2a\u5217\u8868 a \u7684\u6240\u6709\u6743 \u5217\u8868 a \u5305\u542b 5 \u4e4b\u540e\u662f 10\uff0c\u4e4b\u540e\u662f\u53e6\u4e24\u4e2a\u5217\u8868\uff1a b \u4ece 3 \u5f00\u59cb\u800c c \u4ece 4 \u5f00\u59cb\u3002 b \u548c c \u4f1a\u63a5\u4e0a\u5305\u542b 5 \u548c 10 \u7684\u5217\u8868 a \u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u8fd9\u4e24\u4e2a\u5217\u8868\u4f1a\u5c1d\u8bd5\u5171\u4eab\u7b2c\u4e00\u4e2a\u5217\u8868\u6240\u5305\u542b\u7684 5 \u548c 10\u3002 \u5c1d\u8bd5\u4f7f\u7528 Box<T> \u5b9a\u4e49\u7684 List \u5b9e\u73b0\u5e76\u4e0d\u80fd\u5de5\u4f5c\uff0c\u5982\u793a\u4f8b 15-17 \u6240\u793a\uff1a \u6587\u4ef6\u540d: src/main.rs enum List { Cons ( i32 , Box < List > ), Nil , } use crate :: List :: { Cons , Nil }; fn main () { let a = Cons ( 5 , Box :: new ( Cons ( 10 , Box :: new ( Nil )))); let b = Cons ( 3 , Box :: new ( a )); let c = Cons ( 4 , Box :: new ( a )); } \u793a\u4f8b 15-17: \u5c55\u793a\u4e0d\u80fd\u7528\u4e24\u4e2a Box<T> \u7684\u5217\u8868\u5c1d\u8bd5\u5171\u4eab\u7b2c\u4e09\u4e2a\u5217\u8868\u7684\u6240\u6709\u6743 \u7f16\u8bd1\u4f1a\u5f97\u51fa\u5982\u4e0b\u9519\u8bef\uff1a $ cargo run Compiling cons-list v0.1.0 (file:///projects/cons-list) error[E0382]: use of moved value: `a` --> src/main.rs:11:30 | 9 | let a = Cons(5, Box::new(Cons(10, Box::new(Nil)))); | - move occurs because `a` has type `List`, which does not implement the `Copy` trait 10 | let b = Cons(3, Box::new(a)); | - value moved here 11 | let c = Cons(4, Box::new(a)); | ^ value used here after move For more information about this error, try `rustc --explain E0382`. error: could not compile `cons-list` due to previous error Cons \u6210\u5458\u62e5\u6709\u5176\u50a8\u5b58\u7684\u6570\u636e\uff0c\u6240\u4ee5\u5f53\u521b\u5efa b \u5217\u8868\u65f6\uff0c a \u88ab\u79fb\u52a8\u8fdb\u4e86 b \u8fd9\u6837 b \u5c31\u62e5\u6709\u4e86 a \u3002\u63a5\u7740\u5f53\u518d\u6b21\u5c1d\u8bd5\u4f7f\u7528 a \u521b\u5efa c \u65f6\uff0c\u8fd9\u4e0d\u88ab\u5141\u8bb8\uff0c\u56e0\u4e3a a \u7684\u6240\u6709\u6743\u5df2\u7ecf\u88ab\u79fb\u52a8\u3002 \u53ef\u4ee5\u6539\u53d8 Cons \u7684\u5b9a\u4e49\u6765\u5b58\u653e\u4e00\u4e2a\u5f15\u7528\uff0c\u4e0d\u8fc7\u63a5\u7740\u5fc5\u987b\u6307\u5b9a\u751f\u547d\u5468\u671f\u53c2\u6570\u3002\u901a\u8fc7\u6307\u5b9a\u751f\u547d\u5468\u671f\u53c2\u6570\uff0c\u8868\u660e\u5217\u8868\u4e2d\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\u90fd\u81f3\u5c11\u4e0e\u5217\u8868\u672c\u8eab\u5b58\u5728\u7684\u4e00\u6837\u4e45\u3002\u8fd9\u662f\u793a\u4f8b 15-17 \u4e2d\u5143\u7d20\u4e0e\u5217\u8868\u7684\u60c5\u51b5\uff0c\u4f46\u5e76\u4e0d\u662f\u6240\u6709\u60c5\u51b5\u90fd\u5982\u6b64\u3002 \u76f8\u53cd\uff0c\u6211\u4eec\u4fee\u6539 List \u7684\u5b9a\u4e49\u4e3a\u4f7f\u7528 Rc<T> \u4ee3\u66ff Box<T> \uff0c\u5982\u5217\u8868 15-18 \u6240\u793a\u3002\u73b0\u5728\u6bcf\u4e00\u4e2a Cons \u53d8\u91cf\u90fd\u5305\u542b\u4e00\u4e2a\u503c\u548c\u4e00\u4e2a\u6307\u5411 List \u7684 Rc<T> \u3002\u5f53\u521b\u5efa b \u65f6\uff0c\u4e0d\u540c\u4e8e\u83b7\u53d6 a \u7684\u6240\u6709\u6743\uff0c\u8fd9\u91cc\u4f1a\u514b\u9686 a \u6240\u5305\u542b\u7684 Rc<List> \uff0c\u8fd9\u4f1a\u5c06\u5f15\u7528\u8ba1\u6570\u4ece 1 \u589e\u52a0\u5230 2 \u5e76\u5141\u8bb8 a \u548c b \u5171\u4eab Rc<List> \u4e2d\u6570\u636e\u7684\u6240\u6709\u6743\u3002\u521b\u5efa c \u65f6\u4e5f\u4f1a\u514b\u9686 a \uff0c\u8fd9\u4f1a\u5c06\u5f15\u7528\u8ba1\u6570\u4ece 2 \u589e\u52a0\u4e3a 3\u3002\u6bcf\u6b21\u8c03\u7528 Rc::clone \uff0c Rc<List> \u4e2d\u6570\u636e\u7684\u5f15\u7528\u8ba1\u6570\u90fd\u4f1a\u589e\u52a0\uff0c\u76f4\u5230\u6709\u96f6\u4e2a\u5f15\u7528\u4e4b\u524d\u5176\u6570\u636e\u90fd\u4e0d\u4f1a\u88ab\u6e05\u7406\u3002 \u6587\u4ef6\u540d: src/main.rs enum List { Cons ( i32 , Rc < List > ), Nil , } use crate :: List :: { Cons , Nil }; use std :: rc :: Rc ; fn main () { let a = Rc :: new ( Cons ( 5 , Rc :: new ( Cons ( 10 , Rc :: new ( Nil ))))); let b = Cons ( 3 , Rc :: clone ( & a )); let c = Cons ( 4 , Rc :: clone ( & a )); } \u793a\u4f8b 15-18: \u4f7f\u7528 Rc<T> \u5b9a\u4e49\u7684 List \u9700\u8981\u4f7f\u7528 use \u8bed\u53e5\u5c06 Rc<T> \u5f15\u5165\u4f5c\u7528\u57df\uff0c\u56e0\u4e3a\u5b83\u4e0d\u5728 prelude \u4e2d\u3002 \u5728 main \u4e2d\u521b\u5efa\u4e86\u5b58\u653e 5 \u548c 10 \u7684\u5217\u8868\u5e76\u5c06\u5176\u5b58\u653e\u5728 a \u7684\u65b0\u7684 Rc<List> \u4e2d\u3002 \u63a5\u7740\u5f53\u521b\u5efa b \u548c c \u65f6\uff0c\u8c03\u7528 Rc::clone \u51fd\u6570\u5e76\u4f20\u9012 a \u4e2d Rc<List> \u7684\u5f15\u7528\u4f5c\u4e3a\u53c2\u6570\u3002 \u4e5f\u53ef\u4ee5\u8c03\u7528 a.clone() \u800c\u4e0d\u662f Rc::clone(&a) \uff0c\u4e0d\u8fc7\u5728\u8fd9\u91cc Rust \u7684\u4e60\u60ef\u662f\u4f7f\u7528 Rc::clone \u3002 Rc::clone \u7684\u5b9e\u73b0\u5e76\u4e0d\u50cf\u5927\u90e8\u5206\u7c7b\u578b\u7684 clone \u5b9e\u73b0\u90a3\u6837\u5bf9\u6240\u6709\u6570\u636e\u8fdb\u884c\u6df1\u62f7\u8d1d\u3002 Rc::clone \u53ea\u4f1a\u589e\u52a0\u5f15\u7528\u8ba1\u6570\uff0c\u8fd9\u5e76\u4e0d\u4f1a\u82b1\u8d39\u591a\u5c11\u65f6\u95f4\u3002 \u6df1\u62f7\u8d1d\u53ef\u80fd\u4f1a\u82b1\u8d39\u5f88\u957f\u65f6\u95f4\u3002\u901a\u8fc7\u4f7f\u7528 Rc::clone \u8fdb\u884c\u5f15\u7528\u8ba1\u6570\uff0c\u53ef\u4ee5\u660e\u663e\u7684\u533a\u522b\u6df1\u62f7\u8d1d\u7c7b\u7684\u514b\u9686\u548c\u589e\u52a0\u5f15\u7528\u8ba1\u6570\u7c7b\u7684\u514b\u9686\u3002 \u5f53\u67e5\u627e\u4ee3\u7801\u4e2d\u7684\u6027\u80fd\u95ee\u9898\u65f6\uff0c\u53ea\u9700\u8003\u8651\u6df1\u62f7\u8d1d\u7c7b\u7684\u514b\u9686\u800c\u65e0\u9700\u8003\u8651 Rc::clone \u8c03\u7528\u3002","title":"\u4f7f\u7528 Rc&lt;T&gt; \u5171\u4eab\u6570\u636e"},{"location":"smart-pointers/#rct_2","text":"\u8ba9\u6211\u4eec\u4fee\u6539\u793a\u4f8b 15-18 \u7684\u4ee3\u7801\u4ee5\u4fbf\u89c2\u5bdf\u521b\u5efa\u548c\u4e22\u5f03 a \u4e2d Rc<List> \u7684\u5f15\u7528\u65f6\u5f15\u7528\u8ba1\u6570\u7684\u53d8\u5316\u3002 \u5728\u793a\u4f8b 15-19 \u4e2d\uff0c\u4fee\u6539\u4e86 main \u4ee5\u4fbf\u5c06\u5217\u8868 c \u7f6e\u4e8e\u5185\u90e8\u4f5c\u7528\u57df\u4e2d\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u89c2\u5bdf\u5f53 c \u79bb\u5f00\u4f5c\u7528\u57df\u65f6\u5f15\u7528\u8ba1\u6570\u5982\u4f55\u53d8\u5316\u3002 \u6587\u4ef6\u540d: src/main.rs fn main () { let a = Rc :: new ( Cons ( 5 , Rc :: new ( Cons ( 10 , Rc :: new ( Nil ))))); println! ( \"count after creating a = {}\" , Rc :: strong_count ( & a )); let b = Cons ( 3 , Rc :: clone ( & a )); println! ( \"count after creating b = {}\" , Rc :: strong_count ( & a )); { let c = Cons ( 4 , Rc :: clone ( & a )); println! ( \"count after creating c = {}\" , Rc :: strong_count ( & a )); } println! ( \"count after c goes out of scope = {}\" , Rc :: strong_count ( & a )); } \u793a\u4f8b 15-19\uff1a\u6253\u5370\u51fa\u5f15\u7528\u8ba1\u6570 \u5728\u7a0b\u5e8f\u4e2d\u6bcf\u4e2a\u5f15\u7528\u8ba1\u6570\u53d8\u5316\u7684\u70b9\uff0c\u4f1a\u6253\u5370\u51fa\u5f15\u7528\u8ba1\u6570\uff0c\u5176\u503c\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528 Rc::strong_count \u51fd\u6570\u83b7\u5f97\u3002\u8fd9\u4e2a\u51fd\u6570\u53eb\u505a strong_count \u800c\u4e0d\u662f count \u662f\u56e0\u4e3a Rc<T> \u4e5f\u6709 weak_count \uff1b\u5728 \u201c\u907f\u514d\u5f15\u7528\u5faa\u73af\uff1a\u5c06 Rc<T> \u53d8\u4e3a Weak<T> \u201d \u90e8\u5206\u4f1a\u8bb2\u89e3 weak_count \u7684\u7528\u9014\u3002 \u8fd9\u6bb5\u4ee3\u7801\u4f1a\u6253\u5370\u51fa\uff1a $ cargo run Compiling cons-list v0.1.0 (file:///projects/cons-list) Finished dev [unoptimized + debuginfo] target(s) in 0.45s Running `target/debug/cons-list` count after creating a = 1 count after creating b = 2 count after creating c = 3 count after c goes out of scope = 2 \u6211\u4eec\u80fd\u591f\u770b\u5230 a \u4e2d Rc<List> \u7684\u521d\u59cb\u5f15\u7528\u8ba1\u6570\u4e3a1\uff0c\u63a5\u7740\u6bcf\u6b21\u8c03\u7528 clone \uff0c\u8ba1\u6570\u4f1a\u589e\u52a01\u3002\u5f53 c \u79bb\u5f00\u4f5c\u7528\u57df\u65f6\uff0c\u8ba1\u6570\u51cf1\u3002\u4e0d\u5fc5\u50cf\u8c03\u7528 Rc::clone \u589e\u52a0\u5f15\u7528\u8ba1\u6570\u90a3\u6837\u8c03\u7528\u4e00\u4e2a\u51fd\u6570\u6765\u51cf\u5c11\u8ba1\u6570\uff1b Drop trait \u7684\u5b9e\u73b0\u5f53 Rc<T> \u503c\u79bb\u5f00\u4f5c\u7528\u57df\u65f6\u81ea\u52a8\u51cf\u5c11\u5f15\u7528\u8ba1\u6570\u3002 \u4ece\u8fd9\u4e2a\u4f8b\u5b50\u6211\u4eec\u6240\u4e0d\u80fd\u770b\u5230\u7684\u662f\uff0c\u5728 main \u7684\u7ed3\u5c3e\u5f53 b \u7136\u540e\u662f a \u79bb\u5f00\u4f5c\u7528\u57df\u65f6\uff0c\u6b64\u5904\u8ba1\u6570\u4f1a\u662f 0\uff0c\u540c\u65f6 Rc<List> \u88ab\u5b8c\u5168\u6e05\u7406\u3002\u4f7f\u7528 Rc<T> \u5141\u8bb8\u4e00\u4e2a\u503c\u6709\u591a\u4e2a\u6240\u6709\u8005\uff0c\u5f15\u7528\u8ba1\u6570\u5219\u786e\u4fdd\u53ea\u8981\u4efb\u4f55\u6240\u6709\u8005\u4f9d\u7136\u5b58\u5728\u5176\u503c\u4e5f\u4fdd\u6301\u6709\u6548\u3002 \u901a\u8fc7\u4e0d\u53ef\u53d8\u5f15\u7528\uff0c Rc<T> \u5141\u8bb8\u5728\u7a0b\u5e8f\u7684\u591a\u4e2a\u90e8\u5206\u4e4b\u95f4\u53ea\u8bfb\u5730\u5171\u4eab\u6570\u636e\u3002\u5982\u679c Rc<T> \u4e5f\u5141\u8bb8\u591a\u4e2a\u53ef\u53d8\u5f15\u7528\uff0c\u5219\u4f1a\u8fdd\u53cd\u7b2c\u56db\u7ae0\u8ba8\u8bba\u7684\u501f\u7528\u89c4\u5219\u4e4b\u4e00\uff1a\u76f8\u540c\u4f4d\u7f6e\u7684\u591a\u4e2a\u53ef\u53d8\u501f\u7528\u53ef\u80fd\u9020\u6210\u6570\u636e\u7ade\u4e89\u548c\u4e0d\u4e00\u81f4\u3002\u4e0d\u8fc7\u53ef\u4ee5\u4fee\u6539\u6570\u636e\u662f\u975e\u5e38\u6709\u7528\u7684\uff01\u5728\u4e0b\u4e00\u90e8\u5206\uff0c\u6211\u4eec\u5c06\u8ba8\u8bba\u5185\u90e8\u53ef\u53d8\u6027\u6a21\u5f0f\u548c RefCell<T> \u7c7b\u578b\uff0c\u5b83\u53ef\u4ee5\u4e0e Rc<T> \u7ed3\u5408\u4f7f\u7528\u6765\u5904\u7406\u4e0d\u53ef\u53d8\u6027\u7684\u9650\u5236\u3002","title":"\u514b\u9686 Rc&lt;T&gt; \u4f1a\u589e\u52a0\u5f15\u7528\u8ba1\u6570"},{"location":"smart-pointers/#refcellt","text":"ch15-05-interior-mutability.md commit 74edb8dfe07edf8fdae49c6385c72840c07dd18f \u5185\u90e8\u53ef\u53d8\u6027 \uff08 Interior mutability \uff09\u662f Rust \u4e2d\u7684\u4e00\u4e2a\u8bbe\u8ba1\u6a21\u5f0f\uff0c \u5b83\u5141\u8bb8\u4f60\u5373\u4f7f\u5728\u6709\u4e0d\u53ef\u53d8\u5f15\u7528\u65f6\u4e5f\u53ef\u4ee5\u6539\u53d8\u6570\u636e\uff0c\u8fd9\u901a\u5e38\u662f\u501f\u7528\u89c4\u5219\u6240\u4e0d\u5141\u8bb8\u7684 \u3002 \u4e3a\u4e86\u6539\u53d8\u6570\u636e\uff0c\u8be5\u6a21\u5f0f\u5728\u6570\u636e\u7ed3\u6784\u4e2d\u4f7f\u7528 unsafe \u4ee3\u7801\u6765\u6a21\u7cca Rust \u901a\u5e38\u7684\u53ef\u53d8\u6027\u548c\u501f\u7528\u89c4\u5219\u3002 \u6211\u4eec\u8fd8\u672a\u8bb2\u5230\u4e0d\u5b89\u5168\u4ee3\u7801\uff1b\u7b2c\u5341\u4e5d\u7ae0\u4f1a\u5b66\u4e60\u5b83\u4eec\u3002\u5f53\u53ef\u4ee5\u786e\u4fdd\u4ee3\u7801\u5728\u8fd0\u884c\u65f6\u4f1a\u9075\u5b88\u501f\u7528\u89c4\u5219\uff0c\u5373\u4f7f\u7f16\u8bd1\u5668\u4e0d\u80fd\u4fdd\u8bc1\u7684\u60c5\u51b5\uff0c\u53ef\u4ee5\u9009\u62e9\u4f7f\u7528\u90a3\u4e9b\u8fd0\u7528\u5185\u90e8\u53ef\u53d8\u6027\u6a21\u5f0f\u7684\u7c7b\u578b\u3002 \u6240\u6d89\u53ca\u7684 unsafe \u4ee3\u7801\u5c06\u88ab\u5c01\u88c5\u8fdb\u5b89\u5168\u7684 API \u4e2d\uff0c\u800c\u5916\u90e8\u7c7b\u578b\u4ecd\u7136\u662f\u4e0d\u53ef\u53d8\u7684\u3002 \u8ba9\u6211\u4eec\u901a\u8fc7\u9075\u5faa\u5185\u90e8\u53ef\u53d8\u6027\u6a21\u5f0f\u7684 RefCell<T> \u7c7b\u578b\u6765\u5f00\u59cb\u63a2\u7d22\u3002","title":"RefCell&lt;T&gt; \u548c\u5185\u90e8\u53ef\u53d8\u6027\u6a21\u5f0f"},{"location":"smart-pointers/#refcellt_1","text":"\u4e0d\u540c\u4e8e Rc<T> \uff0c RefCell<T> \u4ee3\u8868\u5176\u6570\u636e\u7684\u552f\u4e00\u7684\u6240\u6709\u6743\u3002\u90a3\u4e48\u662f\u4ec0\u4e48\u8ba9 RefCell<T> \u4e0d\u540c\u4e8e\u50cf Box<T> \u8fd9\u6837\u7684\u7c7b\u578b\u5462\uff1f\u56de\u5fc6\u4e00\u4e0b\u7b2c\u56db\u7ae0\u6240\u5b66\u7684\u501f\u7528\u89c4\u5219\uff1a \u5728\u4efb\u610f\u7ed9\u5b9a\u65f6\u523b\uff0c\u53ea\u80fd\u62e5\u6709\u4e00\u4e2a\u53ef\u53d8\u5f15\u7528\u6216\u4efb\u610f\u6570\u91cf\u7684\u4e0d\u53ef\u53d8\u5f15\u7528 \u4e4b\u4e00 \uff08\u800c\u4e0d\u662f\u4e24\u8005\uff09\u3002 \u5f15\u7528\u5fc5\u987b\u603b\u662f\u6709\u6548\u7684\u3002 \u5bf9\u4e8e\u5f15\u7528\u548c Box<T> \uff0c\u501f\u7528\u89c4\u5219\u7684\u4e0d\u53ef\u53d8\u6027\u4f5c\u7528\u4e8e\u7f16\u8bd1\u65f6\u3002 \u5bf9\u4e8e RefCell<T> \uff0c\u8fd9\u4e9b\u4e0d\u53ef\u53d8\u6027\u4f5c\u7528\u4e8e \u8fd0\u884c\u65f6 \u3002 \u5bf9\u4e8e\u5f15\u7528\uff0c\u5982\u679c\u8fdd\u53cd\u8fd9\u4e9b\u89c4\u5219\uff0c\u4f1a\u5f97\u5230\u4e00\u4e2a\u7f16\u8bd1\u9519\u8bef\u3002 \u800c\u5bf9\u4e8e RefCell<T> \uff0c\u5982\u679c\u8fdd\u53cd\u8fd9\u4e9b\u89c4\u5219\u7a0b\u5e8f\u4f1a panic \u5e76\u9000\u51fa\u3002 \u5728\u7f16\u8bd1\u65f6\u68c0\u67e5\u501f\u7528\u89c4\u5219\u7684\u4f18\u52bf\u662f\u8fd9\u4e9b\u9519\u8bef\u5c06\u5728\u5f00\u53d1\u8fc7\u7a0b\u7684\u65e9\u671f\u88ab\u6355\u83b7\uff0c\u540c\u65f6\u5bf9\u8fd0\u884c\u65f6\u6ca1\u6709\u6027\u80fd\u5f71\u54cd\uff0c\u56e0\u4e3a\u6240\u6709\u7684\u5206\u6790\u90fd\u63d0\u524d\u5b8c\u6210\u4e86\u3002\u4e3a\u6b64\uff0c\u5728\u7f16\u8bd1\u65f6\u68c0\u67e5\u501f\u7528\u89c4\u5219\u662f\u5927\u90e8\u5206\u60c5\u51b5\u7684\u6700\u4f73\u9009\u62e9\uff0c\u8fd9\u4e5f\u6b63\u662f\u5176\u4e3a\u4f55\u662f Rust \u7684\u9ed8\u8ba4\u884c\u4e3a\u3002 \u76f8\u53cd\u5728\u8fd0\u884c\u65f6\u68c0\u67e5\u501f\u7528\u89c4\u5219\u7684\u597d\u5904\u5219\u662f\u5141\u8bb8\u51fa\u73b0\u7279\u5b9a\u5185\u5b58\u5b89\u5168\u7684\u573a\u666f\uff0c\u800c\u5b83\u4eec\u5728\u7f16\u8bd1\u65f6\u68c0\u67e5\u4e2d\u662f\u4e0d\u5141\u8bb8\u7684\u3002\u9759\u6001\u5206\u6790\uff0c\u6b63\u5982 Rust \u7f16\u8bd1\u5668\uff0c\u662f\u5929\u751f\u4fdd\u5b88\u7684\u3002\u4f46\u4ee3\u7801\u7684\u4e00\u4e9b\u5c5e\u6027\u4e0d\u53ef\u80fd\u901a\u8fc7\u5206\u6790\u4ee3\u7801\u53d1\u73b0\uff1a\u5176\u4e2d\u6700\u8457\u540d\u7684\u5c31\u662f \u505c\u673a\u95ee\u9898\uff08Halting Problem\uff09 \uff0c\u8fd9\u8d85\u51fa\u4e86\u672c\u4e66\u7684\u8303\u7574\uff0c\u4e0d\u8fc7\u5982\u679c\u4f60\u611f\u5174\u8da3\u7684\u8bdd\u8fd9\u662f\u4e00\u4e2a\u503c\u5f97\u7814\u7a76\u7684\u6709\u8da3\u4e3b\u9898\u3002 \u56e0\u4e3a\u4e00\u4e9b\u5206\u6790\u662f\u4e0d\u53ef\u80fd\u7684\uff0c\u5982\u679c Rust \u7f16\u8bd1\u5668\u4e0d\u80fd\u901a\u8fc7\u6240\u6709\u6743\u89c4\u5219\u7f16\u8bd1\uff0c\u5b83\u53ef\u80fd\u4f1a\u62d2\u7edd\u4e00\u4e2a\u6b63\u786e\u7684\u7a0b\u5e8f\uff1b\u4ece\u8fd9\u79cd\u89d2\u5ea6\u8003\u8651\u5b83\u662f\u4fdd\u5b88\u7684\u3002\u5982\u679c Rust \u63a5\u53d7\u4e0d\u6b63\u786e\u7684\u7a0b\u5e8f\uff0c\u90a3\u4e48\u7528\u6237\u4e5f\u5c31\u4e0d\u4f1a\u76f8\u4fe1 Rust \u6240\u505a\u7684\u4fdd\u8bc1\u4e86\u3002\u7136\u800c\uff0c\u5982\u679c Rust \u62d2\u7edd\u6b63\u786e\u7684\u7a0b\u5e8f\uff0c\u867d\u7136\u4f1a\u7ed9\u7a0b\u5e8f\u5458\u5e26\u6765\u4e0d\u4fbf\uff0c\u4f46\u4e0d\u4f1a\u5e26\u6765\u707e\u96be\u3002 RefCell<T> \u6b63\u662f\u7528\u4e8e\u5f53\u4f60\u786e\u4fe1\u4ee3\u7801\u9075\u5b88\u501f\u7528\u89c4\u5219\uff0c\u800c\u7f16\u8bd1\u5668\u4e0d\u80fd\u7406\u89e3\u548c\u786e\u5b9a\u7684\u65f6\u5019\u3002 \u7c7b\u4f3c\u4e8e Rc<T> \uff0c RefCell<T> \u53ea\u80fd\u7528\u4e8e\u5355\u7ebf\u7a0b\u573a\u666f\u3002\u5982\u679c\u5c1d\u8bd5\u5728\u591a\u7ebf\u7a0b\u4e0a\u4e0b\u6587\u4e2d\u4f7f\u7528 RefCell<T> \uff0c\u4f1a\u5f97\u5230\u4e00\u4e2a\u7f16\u8bd1\u9519\u8bef\u3002\u7b2c\u5341\u516d\u7ae0\u4f1a\u4ecb\u7ecd\u5982\u4f55\u5728\u591a\u7ebf\u7a0b\u7a0b\u5e8f\u4e2d\u4f7f\u7528 RefCell<T> \u7684\u529f\u80fd\u3002 \u5982\u4e0b\u4e3a\u9009\u62e9 Box<T> \uff0c Rc<T> \u6216 RefCell<T> \u7684\u7406\u7531\uff1a Rc<T> \u5141\u8bb8\u76f8\u540c\u6570\u636e\u6709\u591a\u4e2a\u6240\u6709\u8005\uff1b Box<T> \u548c RefCell<T> \u6709\u5355\u4e00\u6240\u6709\u8005\u3002 Box<T> \u5141\u8bb8\u5728\u7f16\u8bd1\u65f6\u6267\u884c\u4e0d\u53ef\u53d8\u6216\u53ef\u53d8\u501f\u7528\u68c0\u67e5\uff1b Rc<T> \u4ec5\u5141\u8bb8\u5728\u7f16\u8bd1\u65f6\u6267\u884c\u4e0d\u53ef\u53d8\u501f\u7528\u68c0\u67e5\uff1b RefCell<T> \u5141\u8bb8\u5728\u8fd0\u884c\u65f6\u6267\u884c\u4e0d\u53ef\u53d8\u6216\u53ef\u53d8\u501f\u7528\u68c0\u67e5\u3002 \u56e0\u4e3a RefCell<T> \u5141\u8bb8\u5728\u8fd0\u884c\u65f6\u6267\u884c\u53ef\u53d8\u501f\u7528\u68c0\u67e5\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5728\u5373\u4fbf RefCell<T> \u81ea\u8eab\u662f\u4e0d\u53ef\u53d8\u7684\u60c5\u51b5\u4e0b\u4fee\u6539\u5176\u5185\u90e8\u7684\u503c\u3002 \u5728\u4e0d\u53ef\u53d8\u503c\u5185\u90e8\u6539\u53d8\u503c\u5c31\u662f \u5185\u90e8\u53ef\u53d8\u6027 \u6a21\u5f0f\u3002\u8ba9\u6211\u4eec\u770b\u770b\u4f55\u65f6\u5185\u90e8\u53ef\u53d8\u6027\u662f\u6709\u7528\u7684\uff0c\u5e76\u8ba8\u8bba\u8fd9\u662f\u5982\u4f55\u6210\u4e3a\u53ef\u80fd\u7684\u3002","title":"\u901a\u8fc7 RefCell&lt;T&gt; \u5728\u8fd0\u884c\u65f6\u68c0\u67e5\u501f\u7528\u89c4\u5219"},{"location":"smart-pointers/#_6","text":"\u501f\u7528\u89c4\u5219\u7684\u4e00\u4e2a\u63a8\u8bba\u662f\u5f53\u6709\u4e00\u4e2a\u4e0d\u53ef\u53d8\u503c\u65f6\uff0c\u4e0d\u80fd\u53ef\u53d8\u5730\u501f\u7528\u5b83\u3002\u4f8b\u5982\uff0c\u5982\u4e0b\u4ee3\u7801\u4e0d\u80fd\u7f16\u8bd1\uff1a fn main () { let x = 5 ; let y = & mut x ; } \u5982\u679c\u5c1d\u8bd5\u7f16\u8bd1\uff0c\u4f1a\u5f97\u5230\u5982\u4e0b\u9519\u8bef\uff1a $ cargo run Compiling borrowing v0.1.0 (file:///projects/borrowing) error[E0596]: cannot borrow `x` as mutable, as it is not declared as mutable --> src/main.rs:3:13 | 2 | let x = 5; | - help: consider changing this to be mutable: `mut x` 3 | let y = &mut x; | ^^^^^^ cannot borrow as mutable For more information about this error, try `rustc --explain E0596`. error: could not compile `borrowing` due to previous error \u7136\u800c\uff0c \u7279\u5b9a\u60c5\u51b5\u4e0b\uff0c\u4ee4\u4e00\u4e2a\u503c\u5728\u5176\u65b9\u6cd5\u5185\u90e8\u80fd\u591f\u4fee\u6539\u81ea\u8eab\uff0c\u800c\u5728\u5176\u4ed6\u4ee3\u7801\u4e2d\u4ecd\u89c6\u4e3a\u4e0d\u53ef\u53d8\uff0c\u662f\u5f88\u6709\u7528\u7684\u3002 \u503c\u65b9\u6cd5\u5916\u90e8\u7684\u4ee3\u7801\u5c31\u4e0d\u80fd\u4fee\u6539\u5176\u503c\u4e86\u3002 RefCell<T> \u662f\u4e00\u4e2a\u83b7\u5f97\u5185\u90e8\u53ef\u53d8\u6027\u7684\u65b9\u6cd5\u3002 RefCell<T> \u5e76\u6ca1\u6709\u5b8c\u5168\u7ed5\u5f00\u501f\u7528\u89c4\u5219\uff0c\u7f16\u8bd1\u5668\u4e2d\u7684\u501f\u7528\u68c0\u67e5\u5668\u5141\u8bb8\u5185\u90e8\u53ef\u53d8\u6027\u5e76\u76f8\u5e94\u5730\u5728\u8fd0\u884c\u65f6\u68c0\u67e5\u501f\u7528\u89c4\u5219\u3002 \u5982\u679c\u8fdd\u53cd\u4e86\u8fd9\u4e9b\u89c4\u5219\uff0c\u4f1a\u51fa\u73b0 panic \u800c\u4e0d\u662f\u7f16\u8bd1\u9519\u8bef\u3002 \u8ba9\u6211\u4eec\u901a\u8fc7\u4e00\u4e2a\u5b9e\u9645\u7684\u4f8b\u5b50\u6765\u63a2\u7d22\u4f55\u5904\u53ef\u4ee5\u4f7f\u7528 RefCell<T> \u6765\u4fee\u6539\u4e0d\u53ef\u53d8\u503c\u5e76\u770b\u770b\u4e3a\u4f55\u8fd9\u4e48\u505a\u662f\u6709\u610f\u4e49\u7684\u3002","title":"\u5185\u90e8\u53ef\u53d8\u6027\uff1a\u4e0d\u53ef\u53d8\u503c\u7684\u53ef\u53d8\u501f\u7528"},{"location":"smart-pointers/#mock","text":"\u6d4b\u8bd5\u66ff\u8eab \uff08 test double \uff09\u662f\u4e00\u4e2a\u901a\u7528\u7f16\u7a0b\u6982\u5ff5\uff0c\u5b83\u4ee3\u8868\u4e00\u4e2a\u5728\u6d4b\u8bd5\u4e2d\u66ff\u4ee3\u67d0\u4e2a\u7c7b\u578b\u7684\u7c7b\u578b\u3002 mock \u5bf9\u8c61 \u662f\u7279\u5b9a\u7c7b\u578b\u7684\u6d4b\u8bd5\u66ff\u8eab\uff0c\u5b83\u4eec\u8bb0\u5f55\u6d4b\u8bd5\u8fc7\u7a0b\u4e2d\u53d1\u751f\u4e86\u4ec0\u4e48\u4ee5\u4fbf\u53ef\u4ee5\u65ad\u8a00\u64cd\u4f5c\u662f\u6b63\u786e\u7684\u3002 \u867d\u7136 Rust \u4e2d\u7684\u5bf9\u8c61\u4e0e\u5176\u4ed6\u8bed\u8a00\u4e2d\u7684\u5bf9\u8c61\u5e76\u4e0d\u662f\u4e00\u56de\u4e8b\uff0cRust \u4e5f\u6ca1\u6709\u50cf\u5176\u4ed6\u8bed\u8a00\u90a3\u6837\u5728\u6807\u51c6\u5e93\u4e2d\u5185\u5efa mock \u5bf9\u8c61\u529f\u80fd\uff0c\u4e0d\u8fc7\u6211\u4eec\u786e\u5b9e\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u4e0e mock \u5bf9\u8c61\u6709\u7740\u76f8\u540c\u529f\u80fd\u7684\u7ed3\u6784\u4f53\u3002 \u5982\u4e0b\u662f\u4e00\u4e2a\u6211\u4eec\u60f3\u8981\u6d4b\u8bd5\u7684\u573a\u666f\uff1a\u6211\u4eec\u5728\u7f16\u5199\u4e00\u4e2a\u8bb0\u5f55\u67d0\u4e2a\u503c\u4e0e\u6700\u5927\u503c\u7684\u5dee\u8ddd\u7684\u5e93\uff0c\u5e76\u6839\u636e\u5f53\u524d\u503c\u4e0e\u6700\u5927\u503c\u7684\u5dee\u8ddd\u6765\u53d1\u9001\u6d88\u606f\u3002\u4f8b\u5982\uff0c\u8fd9\u4e2a\u5e93\u53ef\u4ee5\u7528\u4e8e\u8bb0\u5f55\u7528\u6237\u6240\u5141\u8bb8\u7684 API \u8c03\u7528\u6570\u91cf\u9650\u989d\u3002 \u8be5\u5e93\u53ea\u63d0\u4f9b\u8bb0\u5f55\u4e0e\u6700\u5927\u503c\u7684\u5dee\u8ddd\uff0c\u4ee5\u53ca\u4f55\u79cd\u60c5\u51b5\u53d1\u9001\u4ec0\u4e48\u6d88\u606f\u7684\u529f\u80fd\u3002\u4f7f\u7528\u6b64\u5e93\u7684\u7a0b\u5e8f\u5219\u671f\u671b\u63d0\u4f9b\u5b9e\u9645\u53d1\u9001\u6d88\u606f\u7684\u673a\u5236\uff1a\u7a0b\u5e8f\u53ef\u4ee5\u9009\u62e9\u8bb0\u5f55\u4e00\u6761\u6d88\u606f\u3001\u53d1\u9001 email\u3001\u53d1\u9001\u77ed\u4fe1\u7b49\u7b49\u3002\u5e93\u672c\u8eab\u65e0\u9700\u77e5\u9053\u8fd9\u4e9b\u7ec6\u8282\uff1b\u53ea\u9700\u5b9e\u73b0\u5176\u63d0\u4f9b\u7684 Messenger trait \u5373\u53ef\u3002\u793a\u4f8b 15-20 \u5c55\u793a\u4e86\u5e93\u4ee3\u7801\uff1a \u6587\u4ef6\u540d: src/lib.rs pub trait Messenger { fn send ( & self , msg : & str ); } pub struct LimitTracker <' a , T : Messenger > { messenger : & ' a T , value : usize , max : usize , } impl <' a , T > LimitTracker <' a , T > where T : Messenger , { pub fn new ( messenger : & T , max : usize ) -> LimitTracker < T > { LimitTracker { messenger , value : 0 , max , } } pub fn set_value ( & mut self , value : usize ) { self . value = value ; let percentage_of_max = self . value as f64 / self . max as f64 ; if percentage_of_max >= 1.0 { self . messenger . send ( \"Error: You are over your quota!\" ); } else if percentage_of_max >= 0.9 { self . messenger . send ( \"Urgent warning: You've used up over 90% of your quota!\" ); } else if percentage_of_max >= 0.75 { self . messenger . send ( \"Warning: You've used up over 75% of your quota!\" ); } } } \u793a\u4f8b 15-20\uff1a\u4e00\u4e2a\u8bb0\u5f55\u67d0\u4e2a\u503c\u4e0e\u6700\u5927\u503c\u5dee\u8ddd\u7684\u5e93\uff0c\u5e76\u6839\u636e\u6b64\u503c\u7684\u7279\u5b9a\u7ea7\u522b\u53d1\u51fa\u8b66\u544a \u8fd9\u4e9b\u4ee3\u7801\u4e2d\u4e00\u4e2a\u91cd\u8981\u90e8\u5206\u662f\u62e5\u6709\u4e00\u4e2a\u65b9\u6cd5 send \u7684 Messenger trait\uff0c\u5176\u83b7\u53d6\u4e00\u4e2a self \u7684\u4e0d\u53ef\u53d8\u5f15\u7528\u548c\u6587\u672c\u4fe1\u606f\u3002\u8fd9\u4e2a trait \u662f mock \u5bf9\u8c61\u6240\u9700\u8981\u5b9e\u73b0\u7684\u63a5\u53e3\u5e93\uff0c\u8fd9\u6837 mock \u5c31\u80fd\u50cf\u4e00\u4e2a\u771f\u6b63\u7684\u5bf9\u8c61\u90a3\u6837\u4f7f\u7528\u4e86\u3002\u53e6\u4e00\u4e2a\u91cd\u8981\u7684\u90e8\u5206\u662f\u6211\u4eec\u9700\u8981\u6d4b\u8bd5 LimitTracker \u7684 set_value \u65b9\u6cd5\u7684\u884c\u4e3a\u3002\u53ef\u4ee5\u6539\u53d8\u4f20\u9012\u7684 value \u53c2\u6570\u7684\u503c\uff0c\u4e0d\u8fc7 set_value \u5e76\u6ca1\u6709\u8fd4\u56de\u4efb\u4f55\u53ef\u4f9b\u65ad\u8a00\u7684\u503c\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5982\u679c\u4f7f\u7528\u67d0\u4e2a\u5b9e\u73b0\u4e86 Messenger trait \u7684\u503c\u548c\u7279\u5b9a\u7684 max \u521b\u5efa LimitTracker \uff0c\u5f53\u4f20\u9012\u4e0d\u540c value \u503c\u65f6\uff0c\u6d88\u606f\u53d1\u9001\u8005\u5e94\u88ab\u544a\u77e5\u53d1\u9001\u5408\u9002\u7684\u6d88\u606f\u3002 \u6211\u4eec\u6240\u9700\u7684 mock \u5bf9\u8c61\u662f\uff0c\u8c03\u7528 send \u5e76\u4e0d\u5b9e\u9645\u53d1\u9001 email \u6216\u6d88\u606f\uff0c\u800c\u662f\u53ea\u8bb0\u5f55\u4fe1\u606f\u88ab\u901a\u77e5\u8981\u53d1\u9001\u4e86\u3002\u53ef\u4ee5\u65b0\u5efa\u4e00\u4e2a mock \u5bf9\u8c61\u5b9e\u4f8b\uff0c\u7528\u5176\u521b\u5efa LimitTracker \uff0c\u8c03\u7528 LimitTracker \u7684 set_value \u65b9\u6cd5\uff0c\u7136\u540e\u68c0\u67e5 mock \u5bf9\u8c61\u662f\u5426\u6709\u6211\u4eec\u671f\u671b\u7684\u6d88\u606f\u3002\u793a\u4f8b 15-21 \u5c55\u793a\u4e86\u4e00\u4e2a\u5982\u6b64\u5c1d\u8bd5\u7684 mock \u5bf9\u8c61\u5b9e\u73b0\uff0c\u4e0d\u8fc7\u501f\u7528\u68c0\u67e5\u5668\u5e76\u4e0d\u5141\u8bb8\uff1a \u6587\u4ef6\u540d: src/lib.rs #[cfg(test)] mod tests { use super :: * ; struct MockMessenger { sent_messages : Vec < String > , } impl MockMessenger { fn new () -> MockMessenger { MockMessenger { sent_messages : vec ! [], } } } impl Messenger for MockMessenger { fn send ( & self , message : & str ) { self . sent_messages . push ( String :: from ( message )); } } #[test] fn it_sends_an_over_75_percent_warning_message () { let mock_messenger = MockMessenger :: new (); let mut limit_tracker = LimitTracker :: new ( & mock_messenger , 100 ); limit_tracker . set_value ( 80 ); assert_eq! ( mock_messenger . sent_messages . len (), 1 ); } } \u793a\u4f8b 15-21\uff1a\u5c1d\u8bd5\u5b9e\u73b0 MockMessenger \uff0c\u501f\u7528\u68c0\u67e5\u5668\u4e0d\u5141\u8bb8\u8fd9\u4e48\u505a \u6d4b\u8bd5\u4ee3\u7801\u5b9a\u4e49\u4e86\u4e00\u4e2a MockMessenger \u7ed3\u6784\u4f53\uff0c\u5176 sent_messages \u5b57\u6bb5\u4e3a\u4e00\u4e2a String \u503c\u7684 Vec \u7528\u6765\u8bb0\u5f55\u88ab\u544a\u77e5\u53d1\u9001\u7684\u6d88\u606f\u3002\u6211\u4eec\u8fd8\u5b9a\u4e49\u4e86\u4e00\u4e2a\u5173\u8054\u51fd\u6570 new \u4ee5\u4fbf\u4e8e\u65b0\u5efa\u4ece\u7a7a\u6d88\u606f\u5217\u8868\u5f00\u59cb\u7684 MockMessenger \u503c\u3002\u63a5\u7740\u4e3a MockMessenger \u5b9e\u73b0 Messenger trait \u8fd9\u6837\u5c31\u53ef\u4ee5\u4e3a LimitTracker \u63d0\u4f9b\u4e00\u4e2a MockMessenger \u3002\u5728 send \u65b9\u6cd5\u7684\u5b9a\u4e49\u4e2d\uff0c\u83b7\u53d6\u4f20\u5165\u7684\u6d88\u606f\u4f5c\u4e3a\u53c2\u6570\u5e76\u50a8\u5b58\u5728 MockMessenger \u7684 sent_messages \u5217\u8868\u4e2d\u3002 \u5728\u6d4b\u8bd5\u4e2d\uff0c\u6211\u4eec\u6d4b\u8bd5\u4e86\u5f53 LimitTracker \u88ab\u544a\u77e5\u5c06 value \u8bbe\u7f6e\u4e3a\u8d85\u8fc7 max \u503c 75% \u7684\u67d0\u4e2a\u503c\u3002\u9996\u5148\u65b0\u5efa\u4e00\u4e2a MockMessenger \uff0c\u5176\u4ece\u7a7a\u6d88\u606f\u5217\u8868\u5f00\u59cb\u3002\u63a5\u7740\u65b0\u5efa\u4e00\u4e2a LimitTracker \u5e76\u4f20\u9012\u65b0\u5efa MockMessenger \u7684\u5f15\u7528\u548c max \u503c 100\u3002\u6211\u4eec\u4f7f\u7528\u503c 80 \u8c03\u7528 LimitTracker \u7684 set_value \u65b9\u6cd5\uff0c\u8fd9\u8d85\u8fc7\u4e86 100 \u7684 75%\u3002\u63a5\u7740\u65ad\u8a00 MockMessenger \u4e2d\u8bb0\u5f55\u7684\u6d88\u606f\u5217\u8868\u5e94\u8be5\u6709\u4e00\u6761\u6d88\u606f\u3002 \u7136\u800c\uff0c\u8fd9\u4e2a\u6d4b\u8bd5\u662f\u6709\u95ee\u9898\u7684\uff1a $ cargo test Compiling limit-tracker v0.1.0 (file:///projects/limit-tracker) error[E0596]: cannot borrow `self.sent_messages` as mutable, as it is behind a `&` reference --> src/lib.rs:58:13 | 2 | fn send(&self, msg: &str); | ----- help: consider changing that to be a mutable reference: `&mut self` ... 58 | self.sent_messages.push(String::from(message)); | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `self` is a `&` reference, so the data it refers to cannot be borrowed as mutable For more information about this error, try `rustc --explain E0596`. error: could not compile `limit-tracker` due to previous error warning: build failed, waiting for other jobs to finish... error: build failed \u4e0d\u80fd\u4fee\u6539 MockMessenger \u6765\u8bb0\u5f55\u6d88\u606f\uff0c\u56e0\u4e3a send \u65b9\u6cd5\u83b7\u53d6\u4e86 self \u7684\u4e0d\u53ef\u53d8\u5f15\u7528\u3002\u6211\u4eec\u4e5f\u4e0d\u80fd\u53c2\u8003\u9519\u8bef\u6587\u672c\u7684\u5efa\u8bae\u4f7f\u7528 &mut self \u66ff\u4ee3\uff0c\u56e0\u4e3a\u8fd9\u6837 send \u7684\u7b7e\u540d\u5c31\u4e0d\u7b26\u5408 Messenger trait \u5b9a\u4e49\u4e2d\u7684\u7b7e\u540d\u4e86\uff08\u53ef\u4ee5\u8bd5\u7740\u8fd9\u4e48\u6539\uff0c\u770b\u770b\u4f1a\u51fa\u73b0\u4ec0\u4e48\u9519\u8bef\u4fe1\u606f\uff09\u3002 \u8fd9\u6b63\u662f\u5185\u90e8\u53ef\u53d8\u6027\u7684\u7528\u6b66\u4e4b\u5730\uff01\u6211\u4eec\u5c06\u901a\u8fc7 RefCell \u6765\u50a8\u5b58 sent_messages \uff0c\u7136\u540e send \u5c06\u80fd\u591f\u4fee\u6539 sent_messages \u5e76\u50a8\u5b58\u6d88\u606f\u3002\u793a\u4f8b 15-22 \u5c55\u793a\u4e86\u4ee3\u7801\uff1a \u6587\u4ef6\u540d: src/lib.rs #[cfg(test)] mod tests { use super :: * ; use std :: cell :: RefCell ; struct MockMessenger { sent_messages : RefCell < Vec < String >> , } impl MockMessenger { fn new () -> MockMessenger { MockMessenger { sent_messages : RefCell :: new ( vec! []), } } } impl Messenger for MockMessenger { fn send ( & self , message : & str ) { // borrow_mut \u65b9\u6cd5\u6765\u83b7\u53d6 RefCell \u4e2d\u503c\u7684\u53ef\u53d8\u5f15\u7528 self . sent_messages . borrow_mut (). push ( String :: from ( message )); } } #[test] fn it_sends_an_over_75_percent_warning_message () { // --snip-- // \u8c03\u7528 RefCell \u7684 borrow \u4ee5\u83b7\u53d6 vector \u7684\u4e0d\u53ef\u53d8\u5f15\u7528\u3002 assert_eq! ( mock_messenger . sent_messages . borrow (). len (), 1 ); } } \u793a\u4f8b 15-22\uff1a\u4f7f\u7528 RefCell<T> \u80fd\u591f\u5728\u5916\u90e8\u503c\u88ab\u8ba4\u4e3a\u662f\u4e0d\u53ef\u53d8\u7684\u60c5\u51b5\u4e0b\u4fee\u6539\u5185\u90e8\u503c \u73b0\u5728 sent_messages \u5b57\u6bb5\u7684\u7c7b\u578b\u662f RefCell<Vec<String>> \u800c\u4e0d\u662f Vec<String> \u3002\u5728 new \u51fd\u6570\u4e2d\u65b0\u5efa\u4e86\u4e00\u4e2a RefCell<Vec<String>> \u5b9e\u4f8b\u66ff\u4ee3\u7a7a vector\u3002 \u5bf9\u4e8e send \u65b9\u6cd5\u7684\u5b9e\u73b0\uff0c\u7b2c\u4e00\u4e2a\u53c2\u6570\u4ecd\u4e3a self \u7684\u4e0d\u53ef\u53d8\u501f\u7528\uff0c\u8fd9\u662f\u7b26\u5408\u65b9\u6cd5\u5b9a\u4e49\u7684\u3002\u6211\u4eec\u8c03\u7528 self.sent_messages \u4e2d RefCell \u7684 borrow_mut \u65b9\u6cd5\u6765\u83b7\u53d6 RefCell \u4e2d\u503c\u7684\u53ef\u53d8\u5f15\u7528\uff0c\u8fd9\u662f\u4e00\u4e2a vector\u3002\u63a5\u7740\u53ef\u4ee5\u5bf9 vector \u7684\u53ef\u53d8\u5f15\u7528\u8c03\u7528 push \u4ee5\u4fbf\u8bb0\u5f55\u6d4b\u8bd5\u8fc7\u7a0b\u4e2d\u770b\u5230\u7684\u6d88\u606f\u3002 \u6700\u540e\u5fc5\u987b\u505a\u51fa\u7684\u4fee\u6539\u4f4d\u4e8e\u65ad\u8a00\u4e2d\uff1a\u4e3a\u4e86\u770b\u5230\u5176\u5185\u90e8 vector \u4e2d\u6709\u591a\u5c11\u4e2a\u9879\uff0c\u9700\u8981\u8c03\u7528 RefCell \u7684 borrow \u4ee5\u83b7\u53d6 vector \u7684\u4e0d\u53ef\u53d8\u5f15\u7528\u3002 \u73b0\u5728\u6211\u4eec\u89c1\u8bc6\u4e86\u5982\u4f55\u4f7f\u7528 RefCell<T> \uff0c\u8ba9\u6211\u4eec\u7814\u7a76\u4e00\u4e0b\u5b83\u600e\u6837\u5de5\u4f5c\u7684\uff01","title":"\u5185\u90e8\u53ef\u53d8\u6027\u7684\u7528\u4f8b\uff1amock \u5bf9\u8c61"},{"location":"smart-pointers/#refcellt_2","text":"\u5f53\u521b\u5efa\u4e0d\u53ef\u53d8\u548c\u53ef\u53d8\u5f15\u7528\u65f6\uff0c\u6211\u4eec\u5206\u522b\u4f7f\u7528 & \u548c &mut \u8bed\u6cd5\u3002 \u5bf9\u4e8e RefCell<T> \u6765\u8bf4\uff0c\u5219\u662f borrow \u548c borrow_mut \u65b9\u6cd5\uff0c\u8fd9\u5c5e\u4e8e RefCell<T> \u5b89\u5168 API \u7684\u4e00\u90e8\u5206\u3002 borrow \u65b9\u6cd5\u8fd4\u56de Ref<T> \u7c7b\u578b\u7684\u667a\u80fd\u6307\u9488\uff0c borrow_mut \u65b9\u6cd5\u8fd4\u56de RefMut<T> \u7c7b\u578b\u7684\u667a\u80fd\u6307\u9488\u3002 \u8fd9\u4e24\u4e2a\u7c7b\u578b\u90fd\u5b9e\u73b0\u4e86 Deref \uff0c\u6240\u4ee5\u53ef\u4ee5\u5f53\u4f5c\u5e38\u89c4\u5f15\u7528\u5bf9\u5f85\u3002 RefCell<T> \u8bb0\u5f55\u5f53\u524d\u6709\u591a\u5c11\u4e2a\u6d3b\u52a8\u7684 Ref<T> \u548c RefMut<T> \u667a\u80fd\u6307\u9488\u3002\u6bcf\u6b21\u8c03\u7528 borrow \uff0c RefCell<T> \u5c06\u6d3b\u52a8\u7684\u4e0d\u53ef\u53d8\u501f\u7528\u8ba1\u6570\u52a0\u4e00\u3002\u5f53 Ref<T> \u503c\u79bb\u5f00\u4f5c\u7528\u57df\u65f6\uff0c\u4e0d\u53ef\u53d8\u501f\u7528\u8ba1\u6570\u51cf\u4e00\u3002 \u5c31\u50cf\u7f16\u8bd1\u65f6\u501f\u7528\u89c4\u5219\u4e00\u6837\uff0c RefCell<T> \u5728\u4efb\u4f55\u65f6\u5019\u53ea\u5141\u8bb8\u6709\u591a\u4e2a\u4e0d\u53ef\u53d8\u501f\u7528\u6216\u4e00\u4e2a\u53ef\u53d8\u501f\u7528 \u3002 \u5982\u679c\u6211\u4eec\u5c1d\u8bd5\u8fdd\u53cd\u8fd9\u4e9b\u89c4\u5219\uff0c\u76f8\u6bd4\u5f15\u7528\u65f6\u7684\u7f16\u8bd1\u65f6\u9519\u8bef\uff0c RefCell<T> \u7684\u5b9e\u73b0\u4f1a\u5728\u8fd0\u884c\u65f6\u51fa\u73b0 panic\u3002\u793a\u4f8b 15-23 \u5c55\u793a\u4e86\u5bf9\u793a\u4f8b 15-22 \u4e2d send \u5b9e\u73b0\u7684\u4fee\u6539\uff0c\u8fd9\u91cc\u6211\u4eec\u6545\u610f\u5c1d\u8bd5\u5728\u76f8\u540c\u4f5c\u7528\u57df\u521b\u5efa\u4e24\u4e2a\u53ef\u53d8\u501f\u7528\u4ee5\u4fbf\u6f14\u793a RefCell<T> \u4e0d\u5141\u8bb8\u6211\u4eec\u5728\u8fd0\u884c\u65f6\u8fd9\u4e48\u505a\uff1a \u6587\u4ef6\u540d: src/lib.rs impl Messenger for MockMessenger { fn send ( & self , message : & str ) { let mut one_borrow = self . sent_messages . borrow_mut (); let mut two_borrow = self . sent_messages . borrow_mut (); one_borrow . push ( String :: from ( message )); two_borrow . push ( String :: from ( message )); } } \u793a\u4f8b 15-23\uff1a\u5728\u540c\u4e00\u4f5c\u7528\u57df\u4e2d\u521b\u5efa\u4e24\u4e2a\u53ef\u53d8\u5f15\u7528\u5e76\u89c2\u5bdf RefCell<T> panic \u8fd9\u91cc\u4e3a borrow_mut \u8fd4\u56de\u7684 RefMut \u667a\u80fd\u6307\u9488\u521b\u5efa\u4e86 one_borrow \u53d8\u91cf\u3002\u63a5\u7740\u7528\u76f8\u540c\u7684\u65b9\u5f0f\u5728\u53d8\u91cf two_borrow \u521b\u5efa\u4e86\u53e6\u4e00\u4e2a\u53ef\u53d8\u501f\u7528\u3002\u8fd9\u4f1a\u5728\u76f8\u540c\u4f5c\u7528\u57df\u4e2d\u521b\u5efa\u4e24\u4e2a\u53ef\u53d8\u5f15\u7528\uff0c\u8fd9\u662f\u4e0d\u5141\u8bb8\u7684\u3002\u5f53\u8fd0\u884c\u5e93\u7684\u6d4b\u8bd5\u65f6\uff0c\u793a\u4f8b 15-23 \u7f16\u8bd1\u65f6\u4e0d\u4f1a\u6709\u4efb\u4f55\u9519\u8bef\uff0c\u4e0d\u8fc7\u6d4b\u8bd5\u4f1a\u5931\u8d25\uff1a $ cargo test Compiling limit-tracker v0.1.0 (file:///projects/limit-tracker) Finished test [unoptimized + debuginfo] target(s) in 0.91s Running unittests (target/debug/deps/limit_tracker-e599811fa246dbde) running 1 test test tests::it_sends_an_over_75_percent_warning_message ... FAILED failures: ---- tests::it_sends_an_over_75_percent_warning_message stdout ---- thread 'main' panicked at 'already borrowed: BorrowMutError', src/lib.rs:60:53 note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace failures: tests::it_sends_an_over_75_percent_warning_message test result: FAILED. 0 passed; 1 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s error: test failed, to rerun pass '--lib' \u6ce8\u610f\u4ee3\u7801 panic \u548c\u4fe1\u606f already borrowed: BorrowMutError \u3002\u8fd9\u4e5f\u5c31\u662f RefCell<T> \u5982\u4f55\u5728\u8fd0\u884c\u65f6\u5904\u7406\u8fdd\u53cd\u501f\u7528\u89c4\u5219\u7684\u60c5\u51b5\u3002 \u5728\u8fd0\u884c\u65f6\u6355\u83b7\u501f\u7528\u9519\u8bef\u800c\u4e0d\u662f\u7f16\u8bd1\u65f6\u610f\u5473\u7740\u5c06\u4f1a\u5728\u5f00\u53d1\u8fc7\u7a0b\u7684\u540e\u671f\u624d\u4f1a\u53d1\u73b0\u9519\u8bef\uff0c\u751a\u81f3\u6709\u53ef\u80fd\u53d1\u5e03\u5230\u751f\u4ea7\u73af\u5883\u624d\u53d1\u73b0\uff1b\u8fd8\u4f1a\u56e0\u4e3a\u5728\u8fd0\u884c\u65f6\u800c\u4e0d\u662f\u7f16\u8bd1\u65f6\u8bb0\u5f55\u501f\u7528\u800c\u5bfc\u81f4\u5c11\u91cf\u7684\u8fd0\u884c\u65f6\u6027\u80fd\u60e9\u7f5a\u3002 \u7136\u800c\uff0c\u4f7f\u7528 RefCell \u4f7f\u5f97\u5728\u53ea\u5141\u8bb8\u4e0d\u53ef\u53d8\u503c\u7684\u4e0a\u4e0b\u6587\u4e2d\u7f16\u5199\u4fee\u6539\u81ea\u8eab\u4ee5\u8bb0\u5f55\u6d88\u606f\u7684 mock \u5bf9\u8c61\u6210\u4e3a\u53ef\u80fd\u3002\u867d\u7136\u6709\u53d6\u820d\uff0c\u4f46\u662f\u6211\u4eec\u53ef\u4ee5\u9009\u62e9\u4f7f\u7528 RefCell<T> \u6765\u83b7\u5f97\u6bd4\u5e38\u89c4\u5f15\u7528\u6240\u80fd\u63d0\u4f9b\u7684\u66f4\u591a\u7684\u529f\u80fd\u3002","title":"RefCell&lt;T&gt; \u5728\u8fd0\u884c\u65f6\u8bb0\u5f55\u501f\u7528"},{"location":"smart-pointers/#rct-refcellt","text":"RefCell<T> \u7684\u4e00\u4e2a\u5e38\u89c1\u7528\u6cd5\u662f\u4e0e Rc<T> \u7ed3\u5408\u3002\u56de\u5fc6\u4e00\u4e0b Rc<T> \u5141\u8bb8\u5bf9\u76f8\u540c\u6570\u636e\u6709\u591a\u4e2a\u6240\u6709\u8005\uff0c\u4e0d\u8fc7\u53ea\u80fd\u63d0\u4f9b\u6570\u636e\u7684\u4e0d\u53ef\u53d8\u8bbf\u95ee\u3002\u5982\u679c\u6709\u4e00\u4e2a\u50a8\u5b58\u4e86 RefCell<T> \u7684 Rc<T> \u7684\u8bdd\uff0c\u5c31\u53ef\u4ee5\u5f97\u5230\u6709\u591a\u4e2a\u6240\u6709\u8005 \u5e76\u4e14 \u53ef\u4ee5\u4fee\u6539\u7684\u503c\u4e86\uff01 \u4f8b\u5982\uff0c\u56de\u5fc6\u793a\u4f8b 15-18 \u7684 cons list \u7684\u4f8b\u5b50\u4e2d\u4f7f\u7528 Rc<T> \u4f7f\u5f97\u591a\u4e2a\u5217\u8868\u5171\u4eab\u53e6\u4e00\u4e2a\u5217\u8868\u7684\u6240\u6709\u6743\u3002\u56e0\u4e3a Rc<T> \u53ea\u5b58\u653e\u4e0d\u53ef\u53d8\u503c\uff0c\u6240\u4ee5\u4e00\u65e6\u521b\u5efa\u4e86\u8fd9\u4e9b\u5217\u8868\u503c\u540e\u5c31\u4e0d\u80fd\u4fee\u6539\u3002\u8ba9\u6211\u4eec\u52a0\u5165 RefCell<T> \u6765\u83b7\u5f97\u4fee\u6539\u5217\u8868\u4e2d\u503c\u7684\u80fd\u529b\u3002\u793a\u4f8b 15-24 \u5c55\u793a\u4e86\u901a\u8fc7\u5728 Cons \u5b9a\u4e49\u4e2d\u4f7f\u7528 RefCell<T> \uff0c\u6211\u4eec\u5c31\u5141\u8bb8\u4fee\u6539\u6240\u6709\u5217\u8868\u4e2d\u7684\u503c\u4e86\uff1a \u6587\u4ef6\u540d: src/main.rs #[derive(Debug)] enum List { Cons ( Rc < RefCell < i32 >> , Rc < List > ), Nil , } use crate :: List :: { Cons , Nil }; use std :: cell :: RefCell ; use std :: rc :: Rc ; fn main () { let value = Rc :: new ( RefCell :: new ( 5 )); let a = Rc :: new ( Cons ( Rc :: clone ( & value ), Rc :: new ( Nil ))); let b = Cons ( Rc :: new ( RefCell :: new ( 3 )), Rc :: clone ( & a )); let c = Cons ( Rc :: new ( RefCell :: new ( 4 )), Rc :: clone ( & a )); * value . borrow_mut () += 10 ; println! ( \"a after = {:?}\" , a ); println! ( \"b after = {:?}\" , b ); println! ( \"c after = {:?}\" , c ); } \u793a\u4f8b 15-24\uff1a\u4f7f\u7528 Rc<RefCell<i32>> \u521b\u5efa\u53ef\u4ee5\u4fee\u6539\u7684 List \u8fd9\u91cc\u521b\u5efa\u4e86\u4e00\u4e2a Rc<RefCell<i32>> \u5b9e\u4f8b\u5e76\u50a8\u5b58\u5728\u53d8\u91cf value \u4e2d\u4ee5\u4fbf\u4e4b\u540e\u76f4\u63a5\u8bbf\u95ee\u3002\u63a5\u7740\u5728 a \u4e2d\u7528\u5305\u542b value \u7684 Cons \u6210\u5458\u521b\u5efa\u4e86\u4e00\u4e2a List \u3002\u9700\u8981\u514b\u9686 value \u4ee5\u4fbf a \u548c value \u90fd\u80fd\u62e5\u6709\u5176\u5185\u90e8\u503c 5 \u7684\u6240\u6709\u6743\uff0c\u800c\u4e0d\u662f\u5c06\u6240\u6709\u6743\u4ece value \u79fb\u52a8\u5230 a \u6216\u8005\u8ba9 a \u501f\u7528 value \u3002 \u6211\u4eec\u5c06\u5217\u8868 a \u5c01\u88c5\u8fdb\u4e86 Rc<T> \u8fd9\u6837\u5f53\u521b\u5efa\u5217\u8868 b \u548c c \u65f6\uff0c\u4ed6\u4eec\u90fd\u53ef\u4ee5\u5f15\u7528 a \uff0c\u6b63\u5982\u793a\u4f8b 15-18 \u4e00\u6837\u3002 \u4e00\u65e6\u521b\u5efa\u4e86\u5217\u8868 a \u3001 b \u548c c \uff0c\u6211\u4eec\u5c06 value \u7684\u503c\u52a0 10\u3002\u4e3a\u6b64\u5bf9 value \u8c03\u7528\u4e86 borrow_mut \uff0c\u8fd9\u91cc\u4f7f\u7528\u4e86\u7b2c\u4e94\u7ae0\u8ba8\u8bba\u7684\u81ea\u52a8\u89e3\u5f15\u7528\u529f\u80fd\uff08 \u201c -> \u8fd0\u7b97\u7b26\u5230\u54ea\u53bb\u4e86\uff1f\u201d \u90e8\u5206\uff09\u6765\u89e3\u5f15\u7528 Rc<T> \u4ee5\u83b7\u53d6\u5176\u5185\u90e8\u7684 RefCell<T> \u503c\u3002 borrow_mut \u65b9\u6cd5\u8fd4\u56de RefMut<T> \u667a\u80fd\u6307\u9488\uff0c\u53ef\u4ee5\u5bf9\u5176\u4f7f\u7528\u89e3\u5f15\u7528\u8fd0\u7b97\u7b26\u5e76\u4fee\u6539\u5176\u5185\u90e8\u503c\u3002 \u5f53\u6211\u4eec\u6253\u5370\u51fa a \u3001 b \u548c c \u65f6\uff0c\u53ef\u4ee5\u770b\u5230\u4ed6\u4eec\u90fd\u62e5\u6709\u4fee\u6539\u540e\u7684\u503c 15 \u800c\u4e0d\u662f 5\uff1a $ cargo run Compiling cons-list v0.1.0 (file:///projects/cons-list) Finished dev [unoptimized + debuginfo] target(s) in 0.63s Running `target/debug/cons-list` a after = Cons(RefCell { value: 15 }, Nil) b after = Cons(RefCell { value: 3 }, Cons(RefCell { value: 15 }, Nil)) c after = Cons(RefCell { value: 4 }, Cons(RefCell { value: 15 }, Nil)) \u8fd9\u662f\u975e\u5e38\u5de7\u5999\u7684\uff01\u901a\u8fc7\u4f7f\u7528 RefCell<T> \uff0c\u6211\u4eec\u53ef\u4ee5\u62e5\u6709\u4e00\u4e2a\u8868\u9762\u4e0a\u4e0d\u53ef\u53d8\u7684 List \uff0c\u4e0d\u8fc7\u53ef\u4ee5\u4f7f\u7528 RefCell<T> \u4e2d\u63d0\u4f9b\u5185\u90e8\u53ef\u53d8\u6027\u7684\u65b9\u6cd5\u6765\u5728\u9700\u8981\u65f6\u4fee\u6539\u6570\u636e\u3002 RefCell<T> \u7684\u8fd0\u884c\u65f6\u501f\u7528\u89c4\u5219\u68c0\u67e5\u4e5f\u786e\u5b9e\u4fdd\u62a4\u6211\u4eec\u514d\u4e8e\u51fa\u73b0\u6570\u636e\u7ade\u4e89\u2014\u2014\u6709\u65f6\u4e3a\u4e86\u6570\u636e\u7ed3\u6784\u7684\u7075\u6d3b\u6027\u800c\u4ed8\u51fa\u4e00\u4e9b\u6027\u80fd\u662f\u503c\u5f97\u7684\u3002 \u6807\u51c6\u5e93\u4e2d\u4e5f\u6709\u5176\u4ed6\u63d0\u4f9b\u5185\u90e8\u53ef\u53d8\u6027\u7684\u7c7b\u578b\uff0c\u6bd4\u5982 Cell<T> \uff0c\u5b83\u7c7b\u4f3c RefCell<T> \u4f46\u6709\u4e00\u70b9\u9664\u5916\uff1a \u5b83\u5e76\u975e\u63d0\u4f9b\u5185\u90e8\u503c\u7684\u5f15\u7528\uff0c\u800c\u662f\u628a\u503c\u62f7\u8d1d\u8fdb\u548c\u62f7\u8d1d\u51fa Cell<T> \u3002 \u8fd8\u6709 Mutex<T> \uff0c\u5176\u63d0\u4f9b\u7ebf\u7a0b\u95f4\u5b89\u5168\u7684\u5185\u90e8\u53ef\u53d8\u6027\uff0c\u6211\u4eec\u5c06\u5728\u7b2c 16 \u7ae0\u4e2d\u8ba8\u8bba\u5176\u7528\u6cd5\u3002\u8bf7\u67e5\u770b\u6807\u51c6\u5e93\u6765\u83b7\u53d6\u66f4\u591a\u7ec6\u8282\u5173\u4e8e\u8fd9\u4e9b\u4e0d\u540c\u7c7b\u578b\u4e4b\u95f4\u7684\u533a\u522b\u3002","title":"\u7ed3\u5408 Rc&lt;T&gt; \u548c RefCell&lt;T&gt; \u6765\u62e5\u6709\u591a\u4e2a\u53ef\u53d8\u6570\u636e\u6240\u6709\u8005"},{"location":"smart-pointers/#_7","text":"ch15-06-reference-cycles.md commit bd27a8b72336610c9a200f0ca932ffc8b6fb5ee1 Rust \u7684\u5185\u5b58\u5b89\u5168\u6027\u4fdd\u8bc1\u4f7f\u5176\u96be\u4ee5\u610f\u5916\u5730\u5236\u9020\u6c38\u8fdc\u4e5f\u4e0d\u4f1a\u88ab\u6e05\u7406\u7684\u5185\u5b58\uff08\u88ab\u79f0\u4e3a \u5185\u5b58\u6cc4\u6f0f \uff08 memory leak \uff09\uff09\uff0c\u4f46\u5e76\u4e0d\u662f\u4e0d\u53ef\u80fd\u3002\u4e0e\u5728\u7f16\u8bd1\u65f6\u62d2\u7edd\u6570\u636e\u7ade\u4e89\u4e0d\u540c\uff0c Rust \u5e76\u4e0d\u4fdd\u8bc1\u5b8c\u5168\u5730\u907f\u514d\u5185\u5b58\u6cc4\u6f0f\uff0c\u8fd9\u610f\u5473\u7740\u5185\u5b58\u6cc4\u6f0f\u5728 Rust \u88ab\u8ba4\u4e3a\u662f\u5185\u5b58\u5b89\u5168\u7684\u3002\u8fd9\u4e00\u70b9\u53ef\u4ee5\u901a\u8fc7 Rc<T> \u548c RefCell<T> \u770b\u51fa\uff1a\u521b\u5efa\u5f15\u7528\u5faa\u73af\u7684\u53ef\u80fd\u6027\u662f\u5b58\u5728\u7684\u3002\u8fd9\u4f1a\u9020\u6210\u5185\u5b58\u6cc4\u6f0f\uff0c\u56e0\u4e3a\u6bcf\u4e00\u9879\u7684\u5f15\u7528\u8ba1\u6570\u6c38\u8fdc\u4e5f\u5230\u4e0d\u4e86 0\uff0c\u5176\u503c\u4e5f\u6c38\u8fdc\u4e0d\u4f1a\u88ab\u4e22\u5f03\u3002","title":"\u5f15\u7528\u5faa\u73af\u4e0e\u5185\u5b58\u6cc4\u6f0f"},{"location":"smart-pointers/#_8","text":"\u8ba9\u6211\u4eec\u770b\u770b\u5f15\u7528\u5faa\u73af\u662f\u5982\u4f55\u53d1\u751f\u7684\u4ee5\u53ca\u5982\u4f55\u907f\u514d\u5b83\u3002\u4ee5\u793a\u4f8b 15-25 \u4e2d\u7684 List \u679a\u4e3e\u548c tail \u65b9\u6cd5\u7684\u5b9a\u4e49\u5f00\u59cb\uff1a \u6587\u4ef6\u540d: src/main.rs use crate :: List :: { Cons , Nil }; use std :: cell :: RefCell ; use std :: rc :: Rc ; #[derive(Debug)] enum List { Cons ( i32 , RefCell < Rc < List >> ), Nil , } impl List { fn tail ( & self ) -> Option <& RefCell < Rc < List >>> { match self { Cons ( _ , item ) => Some ( item ), Nil => None , } } } fn main () {} \u793a\u4f8b 15-25: \u4e00\u4e2a\u5b58\u653e RefCell \u7684 cons list \u5b9a\u4e49\uff0c\u8fd9\u6837\u53ef\u4ee5\u4fee\u6539 Cons \u6210\u5458\u6240\u5f15\u7528\u7684\u6570\u636e \u8fd9\u91cc\u91c7\u7528\u4e86\u793a\u4f8b 15-25 \u4e2d List \u5b9a\u4e49\u7684\u53e6\u4e00\u79cd\u53d8\u4f53\u3002\u73b0\u5728 Cons \u6210\u5458\u7684\u7b2c\u4e8c\u4e2a\u5143\u7d20\u662f RefCell<Rc<List>> \uff0c\u8fd9\u610f\u5473\u7740\u4e0d\u540c\u4e8e\u50cf\u793a\u4f8b 15-24 \u90a3\u6837\u80fd\u591f\u4fee\u6539 i32 \u7684\u503c\uff0c\u6211\u4eec\u5e0c\u671b\u80fd\u591f\u4fee\u6539 Cons \u6210\u5458\u6240\u6307\u5411\u7684 List \u3002\u8fd9\u91cc\u8fd8\u589e\u52a0\u4e86\u4e00\u4e2a tail \u65b9\u6cd5\u6765\u65b9\u4fbf\u6211\u4eec\u5728\u6709 Cons \u6210\u5458\u7684\u65f6\u5019\u8bbf\u95ee\u5176\u7b2c\u4e8c\u9879\u3002 \u5728\u793a\u4f8b 15-26 \u4e2d\u589e\u52a0\u4e86\u4e00\u4e2a main \u51fd\u6570\uff0c\u5176\u4f7f\u7528\u4e86\u793a\u4f8b 15-25 \u4e2d\u7684\u5b9a\u4e49\u3002\u8fd9\u4e9b\u4ee3\u7801\u5728 a \u4e2d\u521b\u5efa\u4e86\u4e00\u4e2a\u5217\u8868\uff0c\u4e00\u4e2a\u6307\u5411 a \u4e2d\u5217\u8868\u7684 b \u5217\u8868\uff0c\u63a5\u7740\u4fee\u6539 a \u4e2d\u7684\u5217\u8868\u6307\u5411 b \u4e2d\u7684\u5217\u8868\uff0c\u8fd9\u4f1a\u521b\u5efa\u4e00\u4e2a\u5f15\u7528\u5faa\u73af\u3002\u5728\u8fd9\u4e2a\u8fc7\u7a0b\u7684\u591a\u4e2a\u4f4d\u7f6e\u6709 println! \u8bed\u53e5\u5c55\u793a\u5f15\u7528\u8ba1\u6570\u3002 \u6587\u4ef6: src/main.rs fn main () { let a = Rc :: new ( Cons ( 5 , RefCell :: new ( Rc :: new ( Nil )))); println! ( \"a initial rc count = {}\" , Rc :: strong_count ( & a )); println! ( \"a next item = {:?}\" , a . tail ()); let b = Rc :: new ( Cons ( 10 , RefCell :: new ( Rc :: clone ( & a )))); println! ( \"a rc count after b creation = {}\" , Rc :: strong_count ( & a )); println! ( \"b initial rc count = {}\" , Rc :: strong_count ( & b )); println! ( \"b next item = {:?}\" , b . tail ()); if let Some ( link ) = a . tail () { * link . borrow_mut () = Rc :: clone ( & b ); } println! ( \"b rc count after changing a = {}\" , Rc :: strong_count ( & b )); println! ( \"a rc count after changing a = {}\" , Rc :: strong_count ( & a )); // Uncomment the next line to see that we have a cycle; // it will overflow the stack // println!(\"a next item = {:?}\", a.tail()); } \u793a\u4f8b 15-26\uff1a\u521b\u5efa\u4e00\u4e2a\u5f15\u7528\u5faa\u73af\uff1a\u4e24\u4e2a List \u503c\u4e92\u76f8\u6307\u5411\u5f7c\u6b64 \u8fd9\u91cc\u5728\u53d8\u91cf a \u4e2d\u521b\u5efa\u4e86\u4e00\u4e2a Rc<List> \u5b9e\u4f8b\u6765\u5b58\u653e\u521d\u503c\u4e3a 5, Nil \u7684 List \u503c\u3002\u63a5\u7740\u5728\u53d8\u91cf b \u4e2d\u521b\u5efa\u4e86\u5b58\u653e\u5305\u542b\u503c 10 \u548c\u6307\u5411\u5217\u8868 a \u7684 List \u7684\u53e6\u4e00\u4e2a Rc<List> \u5b9e\u4f8b\u3002 \u6700\u540e\uff0c\u4fee\u6539 a \u4f7f\u5176\u6307\u5411 b \u800c\u4e0d\u662f Nil \uff0c\u8fd9\u5c31\u521b\u5efa\u4e86\u4e00\u4e2a\u5faa\u73af\u3002\u4e3a\u6b64\u9700\u8981\u4f7f\u7528 tail \u65b9\u6cd5\u83b7\u53d6 a \u4e2d RefCell<Rc<List>> \u7684\u5f15\u7528\uff0c\u5e76\u653e\u5165\u53d8\u91cf link \u4e2d\u3002\u63a5\u7740\u4f7f\u7528 RefCell<Rc<List>> \u7684 borrow_mut \u65b9\u6cd5\u5c06\u5176\u503c\u4ece\u5b58\u653e Nil \u7684 Rc<List> \u4fee\u6539\u4e3a b \u4e2d\u7684 Rc<List> \u3002 \u5982\u679c\u4fdd\u6301\u6700\u540e\u7684 println! \u884c\u6ce8\u91ca\u5e76\u8fd0\u884c\u4ee3\u7801\uff0c\u4f1a\u5f97\u5230\u5982\u4e0b\u8f93\u51fa\uff1a $ cargo run Compiling cons-list v0.1.0 (file:///projects/cons-list) Finished dev [unoptimized + debuginfo] target(s) in 0.53s Running `target/debug/cons-list` a initial rc count = 1 a next item = Some(RefCell { value: Nil }) a rc count after b creation = 2 b initial rc count = 1 b next item = Some(RefCell { value: Cons(5, RefCell { value: Nil }) }) b rc count after changing a = 2 a rc count after changing a = 2 \u53ef\u4ee5\u770b\u5230\u5c06\u5217\u8868 a \u4fee\u6539\u4e3a\u6307\u5411 b \u4e4b\u540e\uff0c a \u548c b \u4e2d\u7684 Rc<List> \u5b9e\u4f8b\u7684\u5f15\u7528\u8ba1\u6570\u90fd\u662f 2\u3002\u5728 main \u7684\u7ed3\u5c3e\uff0cRust \u4e22\u5f03 b \uff0c\u8fd9\u4f1a b Rc<List> \u5b9e\u4f8b\u7684\u5f15\u7528\u8ba1\u6570\u4ece 2 \u51cf\u4e3a 1\u3002\u7136\u800c\uff0c b Rc<List> \u4e0d\u80fd\u88ab\u56de\u6536\uff0c\u56e0\u4e3a\u5176\u5f15\u7528\u8ba1\u6570\u662f 1 \u800c\u4e0d\u662f 0\u3002\u63a5\u4e0b\u6765 Rust \u4f1a\u4e22\u5f03 a \u5c06 a Rc<List> \u5b9e\u4f8b\u7684\u5f15\u7528\u8ba1\u6570\u4ece 2 \u51cf\u4e3a 1\u3002\u8fd9\u4e2a\u5b9e\u4f8b\u4e5f\u4e0d\u80fd\u88ab\u56de\u6536\uff0c\u56e0\u4e3a b Rc<List> \u5b9e\u4f8b\u4f9d\u7136\u5f15\u7528\u5b83\uff0c\u6240\u4ee5\u5176\u5f15\u7528\u8ba1\u6570\u662f 1\u3002\u8fd9\u4e9b\u5217\u8868\u7684\u5185\u5b58\u5c06\u6c38\u8fdc\u4fdd\u6301\u672a\u88ab\u56de\u6536\u7684\u72b6\u6001\u3002\u4e3a\u4e86\u66f4\u5f62\u8c61\u7684\u5c55\u793a\uff0c\u6211\u4eec\u521b\u5efa\u4e86\u4e00\u4e2a\u5982\u56fe 15-4 \u6240\u793a\u7684\u5f15\u7528\u5faa\u73af\uff1a \u56fe 15-4: \u5217\u8868 a \u548c b \u5f7c\u6b64\u4e92\u76f8\u6307\u5411\u5f62\u6210\u5f15\u7528\u5faa\u73af \u5982\u679c\u53d6\u6d88\u6700\u540e println! \u7684\u6ce8\u91ca\u5e76\u8fd0\u884c\u7a0b\u5e8f\uff0cRust \u4f1a\u5c1d\u8bd5\u6253\u5370\u51fa a \u6307\u5411 b \u6307\u5411 a \u8fd9\u6837\u7684\u5faa\u73af\u76f4\u5230 \u6808\u6ea2\u51fa \u3002 \u8fd9\u4e2a\u7279\u5b9a\u7684\u4f8b\u5b50\u4e2d\uff0c\u521b\u5efa\u4e86\u5f15\u7528\u5faa\u73af\u4e4b\u540e\u7a0b\u5e8f\u7acb\u523b\u5c31\u7ed3\u675f\u4e86\u3002\u8fd9\u4e2a\u5faa\u73af\u7684\u7ed3\u679c\u5e76\u4e0d\u53ef\u6015\u3002 \u5982\u679c\u5728\u66f4\u4e3a\u590d\u6742\u7684\u7a0b\u5e8f\u4e2d\u5e76\u5728\u5faa\u73af\u91cc\u5206\u914d\u4e86\u5f88\u591a\u5185\u5b58\u5e76\u5360\u6709\u5f88\u957f\u65f6\u95f4\uff0c\u8fd9\u4e2a\u7a0b\u5e8f\u4f1a\u4f7f\u7528\u591a\u4e8e\u5b83\u6240\u9700\u8981\u7684\u5185\u5b58\uff0c\u5e76\u6709\u53ef\u80fd\u538b\u57ae\u7cfb\u7edf\u5e76\u9020\u6210\u6ca1\u6709\u5185\u5b58\u53ef\u4f9b\u4f7f\u7528\u3002 \u521b\u5efa\u5f15\u7528\u5faa\u73af\u5e76\u4e0d\u5bb9\u6613\uff0c\u4f46\u4e5f\u4e0d\u662f\u4e0d\u53ef\u80fd\u3002\u5982\u679c\u4f60\u6709\u5305\u542b Rc<T> \u7684 RefCell<T> \u503c\u6216\u7c7b\u4f3c\u7684\u5d4c\u5957\u7ed3\u5408\u4e86\u5185\u90e8\u53ef\u53d8\u6027\u548c\u5f15\u7528\u8ba1\u6570\u7684\u7c7b\u578b\uff0c\u8bf7\u52a1\u5fc5\u5c0f\u5fc3\u786e\u4fdd\u4f60\u6ca1\u6709\u5f62\u6210\u4e00\u4e2a\u5f15\u7528\u5faa\u73af\uff1b\u4f60\u65e0\u6cd5\u6307\u671b Rust \u5e2e\u4f60\u6355\u83b7\u5b83\u4eec\u3002\u521b\u5efa\u5f15\u7528\u5faa\u73af\u662f\u4e00\u4e2a\u7a0b\u5e8f\u4e0a\u7684\u903b\u8f91 bug\uff0c\u4f60\u5e94\u8be5\u4f7f\u7528\u81ea\u52a8\u5316\u6d4b\u8bd5\u3001\u4ee3\u7801\u8bc4\u5ba1\u548c\u5176\u4ed6\u8f6f\u4ef6\u5f00\u53d1\u6700\u4f73\u5b9e\u8df5\u6765\u4f7f\u5176\u6700\u5c0f\u5316\u3002 \u53e6\u4e00\u4e2a\u89e3\u51b3\u65b9\u6848\u662f\u91cd\u65b0\u7ec4\u7ec7\u6570\u636e\u7ed3\u6784\uff0c\u4f7f\u5f97\u4e00\u90e8\u5206\u5f15\u7528\u62e5\u6709\u6240\u6709\u6743\u800c\u53e6\u4e00\u90e8\u5206\u6ca1\u6709\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u5faa\u73af\u5c06\u7531\u4e00\u4e9b\u62e5\u6709\u6240\u6709\u6743\u7684\u5173\u7cfb\u548c\u4e00\u4e9b\u65e0\u6240\u6709\u6743\u7684\u5173\u7cfb\u7ec4\u6210\uff0c\u53ea\u6709\u6240\u6709\u6743\u5173\u7cfb\u624d\u80fd\u5f71\u54cd\u503c\u662f\u5426\u53ef\u4ee5\u88ab\u4e22\u5f03\u3002\u5728\u793a\u4f8b 15-25 \u4e2d\uff0c\u6211\u4eec\u603b\u662f\u5e0c\u671b Cons \u6210\u5458\u62e5\u6709\u5176\u5217\u8868\uff0c\u6240\u4ee5\u91cd\u65b0\u7ec4\u7ec7\u6570\u636e\u7ed3\u6784\u662f\u4e0d\u53ef\u80fd\u7684\u3002\u8ba9\u6211\u4eec\u770b\u770b\u4e00\u4e2a\u7531\u7236\u8282\u70b9\u548c\u5b50\u8282\u70b9\u6784\u6210\u7684\u56fe\u7684\u4f8b\u5b50\uff0c\u89c2\u5bdf\u4f55\u65f6\u662f\u4f7f\u7528\u65e0\u6240\u6709\u6743\u7684\u5173\u7cfb\u6765\u907f\u514d\u5f15\u7528\u5faa\u73af\u7684\u5408\u9002\u65f6\u673a\u3002","title":"\u5236\u9020\u5f15\u7528\u5faa\u73af"},{"location":"smart-pointers/#rct-weakt","text":"\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6211\u4eec\u5df2\u7ecf\u5c55\u793a\u4e86\u8c03\u7528 Rc::clone \u4f1a\u589e\u52a0 Rc<T> \u5b9e\u4f8b\u7684 strong_count \uff0c\u548c\u53ea\u5728\u5176 strong_count \u4e3a 0 \u65f6\u624d\u4f1a\u88ab\u6e05\u7406\u7684 Rc<T> \u5b9e\u4f8b\u3002 \u4f60\u4e5f\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528 Rc::downgrade \u5e76\u4f20\u9012 Rc<T> \u5b9e\u4f8b\u7684\u5f15\u7528\u6765\u521b\u5efa\u5176\u503c\u7684 \u5f31\u5f15\u7528 \uff08 weak reference \uff09\u3002 \u8c03\u7528 Rc::downgrade \u65f6\u4f1a\u5f97\u5230 Weak<T> \u7c7b\u578b\u7684\u667a\u80fd\u6307\u9488\u3002\u4e0d\u540c\u4e8e\u5c06 Rc<T> \u5b9e\u4f8b\u7684 strong_count \u52a0 1\uff0c\u8c03\u7528 Rc::downgrade \u4f1a\u5c06 weak_count \u52a0 1\u3002 Rc<T> \u7c7b\u578b\u4f7f\u7528 weak_count \u6765\u8bb0\u5f55\u5176\u5b58\u5728\u591a\u5c11\u4e2a Weak<T> \u5f15\u7528\uff0c\u7c7b\u4f3c\u4e8e strong_count \u3002\u5176\u533a\u522b\u5728\u4e8e weak_count \u65e0\u9700\u8ba1\u6570\u4e3a 0 \u5c31\u80fd\u4f7f Rc<T> \u5b9e\u4f8b\u88ab\u6e05\u7406\u3002 \u5f3a\u5f15\u7528\u4ee3\u8868\u5982\u4f55\u5171\u4eab Rc<T> \u5b9e\u4f8b\u7684\u6240\u6709\u6743\uff0c\u4f46\u5f31\u5f15\u7528\u5e76\u4e0d\u5c5e\u4e8e\u6240\u6709\u6743\u5173\u7cfb\u3002 \u4ed6\u4eec\u4e0d\u4f1a\u9020\u6210\u5f15\u7528\u5faa\u73af\uff0c\u56e0\u4e3a\u4efb\u4f55\u5f31\u5f15\u7528\u7684\u5faa\u73af\u4f1a\u5728\u5176\u76f8\u5173\u7684\u5f3a\u5f15\u7528\u8ba1\u6570\u4e3a 0 \u65f6\u88ab\u6253\u65ad\u3002 \u56e0\u4e3a Weak<T> \u5f15\u7528\u7684\u503c\u53ef\u80fd\u5df2\u7ecf\u88ab\u4e22\u5f03\u4e86\uff0c\u4e3a\u4e86\u4f7f\u7528 Weak<T> \u6240\u6307\u5411\u7684\u503c\uff0c\u6211\u4eec\u5fc5\u987b\u786e\u4fdd\u5176\u503c\u4ecd\u7136\u6709\u6548\u3002 \u4e3a\u6b64\u53ef\u4ee5\u8c03\u7528 Weak<T> \u5b9e\u4f8b\u7684 upgrade \u65b9\u6cd5\uff0c\u8fd9\u4f1a\u8fd4\u56de Option<Rc<T>> \u3002 \u5982\u679c Rc<T> \u503c\u8fd8\u672a\u88ab\u4e22\u5f03\uff0c\u5219\u7ed3\u679c\u662f Some \uff1b\u5982\u679c Rc<T> \u5df2\u88ab\u4e22\u5f03\uff0c\u5219\u7ed3\u679c\u662f None \u3002 \u56e0\u4e3a upgrade \u8fd4\u56de\u4e00\u4e2a Option<Rc<T>> \uff0cRust \u4f1a\u786e\u4fdd\u5904\u7406 Some \u548c None \u7684\u60c5\u51b5\uff0c\u6240\u4ee5\u5b83\u4e0d\u4f1a\u8fd4\u56de\u975e\u6cd5\u6307\u9488\u3002 \u6211\u4eec\u4f1a\u521b\u5efa\u4e00\u4e2a\u67d0\u9879\u77e5\u9053\u5176\u5b50\u9879\u548c\u7236\u9879\u7684\u6811\u5f62\u7ed3\u6784\u7684\u4f8b\u5b50\uff0c\u800c\u4e0d\u662f\u53ea\u77e5\u9053\u5176\u4e0b\u4e00\u9879\u7684\u5217\u8868\u3002","title":"\u907f\u514d\u5f15\u7528\u5faa\u73af\uff1a\u5c06 Rc&lt;T&gt; \u53d8\u4e3a Weak&lt;T&gt;"},{"location":"smart-pointers/#node","text":"\u5728\u6700\u5f00\u59cb\uff0c\u6211\u4eec\u5c06\u4f1a\u6784\u5efa\u4e00\u4e2a\u5e26\u6709\u5b50\u8282\u70b9\u7684\u6811\u3002\u8ba9\u6211\u4eec\u521b\u5efa\u4e00\u4e2a\u7528\u4e8e\u5b58\u653e\u5176\u62e5\u6709\u6240\u6709\u6743\u7684 i32 \u503c\u548c\u5176\u5b50\u8282\u70b9\u5f15\u7528\u7684 Node \uff1a \u6587\u4ef6\u540d: src/main.rs use std :: cell :: RefCell ; use std :: rc :: Rc ; #[derive(Debug)] struct Node { value : i32 , children : RefCell < Vec < Rc < Node >>> , } \u6211\u4eec\u5e0c\u671b\u80fd\u591f Node \u62e5\u6709\u5176\u5b50\u8282\u70b9\uff0c\u540c\u65f6\u4e5f\u5e0c\u671b\u901a\u8fc7\u53d8\u91cf\u6765\u5171\u4eab\u6240\u6709\u6743\uff0c\u4ee5\u4fbf\u53ef\u4ee5\u76f4\u63a5\u8bbf\u95ee\u6811\u4e2d\u7684\u6bcf\u4e00\u4e2a Node \uff0c\u4e3a\u6b64 Vec<T> \u7684\u9879\u7684\u7c7b\u578b\u88ab\u5b9a\u4e49\u4e3a Rc<Node> \u3002\u6211\u4eec\u8fd8\u5e0c\u671b\u80fd\u4fee\u6539\u5176\u4ed6\u8282\u70b9\u7684\u5b50\u8282\u70b9\uff0c\u6240\u4ee5 children \u4e2d Vec<Rc<Node>> \u88ab\u653e\u8fdb\u4e86 RefCell<T> \u3002 \u63a5\u4e0b\u6765\uff0c\u4f7f\u7528\u6b64\u7ed3\u6784\u4f53\u5b9a\u4e49\u6765\u521b\u5efa\u4e00\u4e2a\u53eb\u505a leaf \u7684\u5e26\u6709\u503c 3 \u4e14\u6ca1\u6709\u5b50\u8282\u70b9\u7684 Node \u5b9e\u4f8b\uff0c\u548c\u53e6\u4e00\u4e2a\u5e26\u6709\u503c 5 \u5e76\u4ee5 leaf \u4f5c\u4e3a\u5b50\u8282\u70b9\u7684\u5b9e\u4f8b branch \uff0c\u5982\u793a\u4f8b 15-27 \u6240\u793a\uff1a \u6587\u4ef6\u540d: src/main.rs fn main () { let leaf = Rc :: new ( Node { value : 3 , children : RefCell :: new ( vec! []), }); let branch = Rc :: new ( Node { value : 5 , children : RefCell :: new ( vec! [ Rc :: clone ( & leaf )]), }); } \u793a\u4f8b 15-27\uff1a\u521b\u5efa\u6ca1\u6709\u5b50\u8282\u70b9\u7684 leaf \u8282\u70b9\u548c\u4ee5 leaf \u4f5c\u4e3a\u5b50\u8282\u70b9\u7684 branch \u8282\u70b9 \u8fd9\u91cc\u514b\u9686\u4e86 leaf \u4e2d\u7684 Rc<Node> \u5e76\u50a8\u5b58\u5728\u4e86 branch \u4e2d\uff0c\u8fd9\u610f\u5473\u7740 leaf \u4e2d\u7684 Node \u73b0\u5728\u6709\u4e24\u4e2a\u6240\u6709\u8005\uff1a leaf \u548c branch \u3002\u53ef\u4ee5\u901a\u8fc7 branch.children \u4ece branch \u4e2d\u83b7\u5f97 leaf \uff0c\u4e0d\u8fc7\u65e0\u6cd5\u4ece leaf \u5230 branch \u3002 leaf \u6ca1\u6709\u5230 branch \u7684\u5f15\u7528\u4e14\u5e76\u4e0d\u77e5\u9053\u4ed6\u4eec\u76f8\u4e92\u5173\u8054\u3002\u6211\u4eec\u5e0c\u671b leaf \u77e5\u9053 branch \u662f\u5176\u7236\u8282\u70b9\u3002\u7a0d\u540e\u6211\u4eec\u4f1a\u8fd9\u4e48\u505a\u3002","title":"\u521b\u5efa\u6811\u5f62\u6570\u636e\u7ed3\u6784\uff1a\u5e26\u6709\u5b50\u8282\u70b9\u7684 Node"},{"location":"smart-pointers/#_9","text":"\u4e3a\u4e86\u4f7f\u5b50\u8282\u70b9\u77e5\u9053\u5176\u7236\u8282\u70b9\uff0c\u9700\u8981\u5728 Node \u7ed3\u6784\u4f53\u5b9a\u4e49\u4e2d\u589e\u52a0\u4e00\u4e2a parent \u5b57\u6bb5\u3002\u95ee\u9898\u662f parent \u7684\u7c7b\u578b\u5e94\u8be5\u662f\u4ec0\u4e48\u3002\u6211\u4eec\u77e5\u9053\u5176\u4e0d\u80fd\u5305\u542b Rc<T> \uff0c\u56e0\u4e3a\u8fd9\u6837 leaf.parent \u5c06\u4f1a\u6307\u5411 branch \u800c branch.children \u4f1a\u5305\u542b leaf \u7684\u6307\u9488\uff0c\u8fd9\u4f1a\u5f62\u6210\u5f15\u7528\u5faa\u73af\uff0c\u4f1a\u9020\u6210\u5176 strong_count \u6c38\u8fdc\u4e5f\u4e0d\u4f1a\u4e3a 0\u3002 \u73b0\u5728\u6362\u4e00\u79cd\u65b9\u5f0f\u601d\u8003\u8fd9\u4e2a\u5173\u7cfb\uff0c\u7236\u8282\u70b9\u5e94\u8be5\u62e5\u6709\u5176\u5b50\u8282\u70b9\uff1a\u5982\u679c\u7236\u8282\u70b9\u88ab\u4e22\u5f03\u4e86\uff0c\u5176\u5b50\u8282\u70b9\u4e5f\u5e94\u8be5\u88ab\u4e22\u5f03\u3002\u7136\u800c\u5b50\u8282\u70b9\u4e0d\u5e94\u8be5\u62e5\u6709\u5176\u7236\u8282\u70b9\uff1a\u5982\u679c\u4e22\u5f03\u5b50\u8282\u70b9\uff0c\u5176\u7236\u8282\u70b9\u5e94\u8be5\u4f9d\u7136\u5b58\u5728\u3002\u8fd9\u6b63\u662f\u5f31\u5f15\u7528\u7684\u4f8b\u5b50\uff01 \u6240\u4ee5 parent \u4f7f\u7528 Weak<T> \u7c7b\u578b\u800c\u4e0d\u662f Rc<T> \uff0c\u5177\u4f53\u6765\u8bf4\u662f RefCell<Weak<Node>> \u3002\u73b0\u5728 Node \u7ed3\u6784\u4f53\u5b9a\u4e49\u770b\u8d77\u6765\u50cf\u8fd9\u6837\uff1a \u6587\u4ef6\u540d: src/main.rs use std :: cell :: RefCell ; use std :: rc :: { Rc , Weak }; #[derive(Debug)] struct Node { value : i32 , parent : RefCell < Weak < Node >> , children : RefCell < Vec < Rc < Node >>> , } \u8fd9\u6837\uff0c\u4e00\u4e2a\u8282\u70b9\u5c31\u80fd\u591f\u5f15\u7528\u5176\u7236\u8282\u70b9\uff0c\u4f46\u4e0d\u62e5\u6709\u5176\u7236\u8282\u70b9\u3002\u5728\u793a\u4f8b 15-28 \u4e2d\uff0c\u6211\u4eec\u66f4\u65b0 main \u6765\u4f7f\u7528\u65b0\u5b9a\u4e49\u4ee5\u4fbf leaf \u8282\u70b9\u53ef\u4ee5\u901a\u8fc7 branch \u5f15\u7528\u5176\u7236\u8282\u70b9\uff1a \u6587\u4ef6\u540d: src/main.rs fn main () { let leaf = Rc :: new ( Node { value : 3 , parent : RefCell :: new ( Weak :: new ()), children : RefCell :: new ( vec! []), }); println! ( \"leaf parent = {:?}\" , leaf . parent . borrow (). upgrade ()); let branch = Rc :: new ( Node { value : 5 , parent : RefCell :: new ( Weak :: new ()), children : RefCell :: new ( vec! [ Rc :: clone ( & leaf )]), }); * leaf . parent . borrow_mut () = Rc :: downgrade ( & branch ); println! ( \"leaf parent = {:?}\" , leaf . parent . borrow (). upgrade ()); } \u793a\u4f8b 15-28\uff1a\u4e00\u4e2a leaf \u8282\u70b9\uff0c\u5176\u62e5\u6709\u6307\u5411\u5176\u7236\u8282\u70b9 branch \u7684 Weak \u5f15\u7528 \u521b\u5efa leaf \u8282\u70b9\u7c7b\u4f3c\u4e8e\u793a\u4f8b 15-27 \u4e2d\u5982\u4f55\u521b\u5efa leaf \u8282\u70b9\u7684\uff0c\u9664\u4e86 parent \u5b57\u6bb5\u6709\u6240\u4e0d\u540c\uff1a leaf \u5f00\u59cb\u65f6\u6ca1\u6709\u7236\u8282\u70b9\uff0c\u6240\u4ee5\u6211\u4eec\u65b0\u5efa\u4e86\u4e00\u4e2a\u7a7a\u7684 Weak \u5f15\u7528\u5b9e\u4f8b\u3002 \u6b64\u65f6\uff0c\u5f53\u5c1d\u8bd5\u4f7f\u7528 upgrade \u65b9\u6cd5\u83b7\u53d6 leaf \u7684\u7236\u8282\u70b9\u5f15\u7528\u65f6\uff0c\u4f1a\u5f97\u5230\u4e00\u4e2a None \u503c\u3002\u5982\u7b2c\u4e00\u4e2a println! \u8f93\u51fa\u6240\u793a\uff1a leaf parent = None \u5f53\u521b\u5efa branch \u8282\u70b9\u65f6\uff0c\u5176\u4e5f\u4f1a\u65b0\u5efa\u4e00\u4e2a Weak<Node> \u5f15\u7528\uff0c\u56e0\u4e3a branch \u5e76\u6ca1\u6709\u7236\u8282\u70b9\u3002 leaf \u4ecd\u7136\u4f5c\u4e3a branch \u7684\u4e00\u4e2a\u5b50\u8282\u70b9\u3002\u4e00\u65e6\u5728 branch \u4e2d\u6709\u4e86 Node \u5b9e\u4f8b\uff0c\u5c31\u53ef\u4ee5\u4fee\u6539 leaf \u4f7f\u5176\u62e5\u6709\u6307\u5411\u7236\u8282\u70b9\u7684 Weak<Node> \u5f15\u7528\u3002\u8fd9\u91cc\u4f7f\u7528\u4e86 leaf \u4e2d parent \u5b57\u6bb5\u91cc\u7684 RefCell<Weak<Node>> \u7684 borrow_mut \u65b9\u6cd5\uff0c\u63a5\u7740\u4f7f\u7528\u4e86 Rc::downgrade \u51fd\u6570\u6765\u4ece branch \u4e2d\u7684 Rc<Node> \u503c\u521b\u5efa\u4e86\u4e00\u4e2a\u6307\u5411 branch \u7684 Weak<Node> \u5f15\u7528\u3002 \u5f53\u518d\u6b21\u6253\u5370\u51fa leaf \u7684\u7236\u8282\u70b9\u65f6\uff0c\u8fd9\u4e00\u6b21\u5c06\u4f1a\u5f97\u5230\u5b58\u653e\u4e86 branch \u7684 Some \u503c\uff1a\u73b0\u5728 leaf \u53ef\u4ee5\u8bbf\u95ee\u5176\u7236\u8282\u70b9\u4e86\uff01\u5f53\u6253\u5370\u51fa leaf \u65f6\uff0c\u6211\u4eec\u4e5f\u907f\u514d\u4e86\u5982\u793a\u4f8b 15-26 \u4e2d\u6700\u7ec8\u4f1a\u5bfc\u81f4\u6808\u6ea2\u51fa\u7684\u5faa\u73af\uff1a Weak<Node> \u5f15\u7528\u88ab\u6253\u5370\u4e3a (Weak) \uff1a leaf parent = Some(Node { value: 5, parent: RefCell { value: (Weak) }, children: RefCell { value: [Node { value: 3, parent: RefCell { value: (Weak) }, children: RefCell { value: [] } }] } }) \u6ca1\u6709\u65e0\u9650\u7684\u8f93\u51fa\u8868\u660e\u8fd9\u6bb5\u4ee3\u7801\u5e76\u6ca1\u6709\u9020\u6210\u5f15\u7528\u5faa\u73af\u3002\u8fd9\u4e00\u70b9\u4e5f\u53ef\u4ee5\u4ece\u89c2\u5bdf Rc::strong_count \u548c Rc::weak_count \u8c03\u7528\u7684\u7ed3\u679c\u770b\u51fa\u3002","title":"\u589e\u52a0\u4ece\u5b50\u5230\u7236\u7684\u5f15\u7528"},{"location":"smart-pointers/#strong_count-weak_count","text":"\u8ba9\u6211\u4eec\u901a\u8fc7\u521b\u5efa\u4e86\u4e00\u4e2a\u65b0\u7684\u5185\u90e8\u4f5c\u7528\u57df\u5e76\u5c06 branch \u7684\u521b\u5efa\u653e\u5165\u5176\u4e2d\uff0c\u6765\u89c2\u5bdf Rc<Node> \u5b9e\u4f8b\u7684 strong_count \u548c weak_count \u503c\u7684\u53d8\u5316\u3002\u8fd9\u4f1a\u5c55\u793a\u5f53 branch \u521b\u5efa\u548c\u79bb\u5f00\u4f5c\u7528\u57df\u88ab\u4e22\u5f03\u65f6\u4f1a\u53d1\u751f\u4ec0\u4e48\u3002\u8fd9\u4e9b\u4fee\u6539\u5982\u793a\u4f8b 15-29 \u6240\u793a\uff1a \u6587\u4ef6\u540d: src/main.rs fn main () { let leaf = Rc :: new ( Node { value : 3 , parent : RefCell :: new ( Weak :: new ()), children : RefCell :: new ( vec! []), }); println! ( \"leaf strong = {}, weak = {}\" , Rc :: strong_count ( & leaf ), Rc :: weak_count ( & leaf ), ); { let branch = Rc :: new ( Node { value : 5 , parent : RefCell :: new ( Weak :: new ()), children : RefCell :: new ( vec! [ Rc :: clone ( & leaf )]), }); * leaf . parent . borrow_mut () = Rc :: downgrade ( & branch ); println! ( \"branch strong = {}, weak = {}\" , Rc :: strong_count ( & branch ), Rc :: weak_count ( & branch ), ); println! ( \"leaf strong = {}, weak = {}\" , Rc :: strong_count ( & leaf ), Rc :: weak_count ( & leaf ), ); } println! ( \"leaf parent = {:?}\" , leaf . parent . borrow (). upgrade ()); println! ( \"leaf strong = {}, weak = {}\" , Rc :: strong_count ( & leaf ), Rc :: weak_count ( & leaf ), ); } \u793a\u4f8b 15-29\uff1a\u5728\u5185\u90e8\u4f5c\u7528\u57df\u521b\u5efa branch \u5e76\u68c0\u67e5\u5176\u5f3a\u5f31\u5f15\u7528\u8ba1\u6570 \u4e00\u65e6\u521b\u5efa\u4e86 leaf \uff0c\u5176 Rc<Node> \u7684\u5f3a\u5f15\u7528\u8ba1\u6570\u4e3a 1\uff0c\u5f31\u5f15\u7528\u8ba1\u6570\u4e3a 0\u3002\u5728\u5185\u90e8\u4f5c\u7528\u57df\u4e2d\u521b\u5efa\u4e86 branch \u5e76\u4e0e leaf \u76f8\u5173\u8054\uff0c\u6b64\u65f6 branch \u4e2d Rc<Node> \u7684\u5f3a\u5f15\u7528\u8ba1\u6570\u4e3a 1\uff0c\u5f31\u5f15\u7528\u8ba1\u6570\u4e3a 1\uff08\u56e0\u4e3a leaf.parent \u901a\u8fc7 Weak<Node> \u6307\u5411 branch \uff09\u3002\u8fd9\u91cc leaf \u7684\u5f3a\u5f15\u7528\u8ba1\u6570\u4e3a 2\uff0c\u56e0\u4e3a\u73b0\u5728 branch \u7684 branch.children \u4e2d\u50a8\u5b58\u4e86 leaf \u7684 Rc<Node> \u7684\u62f7\u8d1d\uff0c\u4e0d\u8fc7\u5f31\u5f15\u7528\u8ba1\u6570\u4ecd\u7136\u4e3a 0\u3002 \u5f53\u5185\u90e8\u4f5c\u7528\u57df\u7ed3\u675f\u65f6\uff0c branch \u79bb\u5f00\u4f5c\u7528\u57df\uff0c Rc<Node> \u7684\u5f3a\u5f15\u7528\u8ba1\u6570\u51cf\u5c11\u4e3a 0\uff0c\u6240\u4ee5\u5176 Node \u88ab\u4e22\u5f03\u3002\u6765\u81ea leaf.parent \u7684\u5f31\u5f15\u7528\u8ba1\u6570 1 \u4e0e Node \u662f\u5426\u88ab\u4e22\u5f03\u65e0\u5173\uff0c\u6240\u4ee5\u5e76\u6ca1\u6709\u4ea7\u751f\u4efb\u4f55\u5185\u5b58\u6cc4\u6f0f\uff01 \u5982\u679c\u5728\u5185\u90e8\u4f5c\u7528\u57df\u7ed3\u675f\u540e\u5c1d\u8bd5\u8bbf\u95ee leaf \u7684\u7236\u8282\u70b9\uff0c\u4f1a\u518d\u6b21\u5f97\u5230 None \u3002\u5728\u7a0b\u5e8f\u7684\u7ed3\u5c3e\uff0c leaf \u4e2d Rc<Node> \u7684\u5f3a\u5f15\u7528\u8ba1\u6570\u4e3a 1\uff0c\u5f31\u5f15\u7528\u8ba1\u6570\u4e3a 0\uff0c\u56e0\u4e3a\u73b0\u5728 leaf \u53c8\u662f Rc<Node> \u552f\u4e00\u7684\u5f15\u7528\u4e86\u3002 \u6240\u6709\u8fd9\u4e9b\u7ba1\u7406\u8ba1\u6570\u548c\u503c\u7684\u903b\u8f91\u90fd\u5185\u5efa\u4e8e Rc<T> \u548c Weak<T> \u4ee5\u53ca\u5b83\u4eec\u7684 Drop trait \u5b9e\u73b0\u4e2d\u3002\u901a\u8fc7\u5728 Node \u5b9a\u4e49\u4e2d\u6307\u5b9a\u4ece\u5b50\u8282\u70b9\u5230\u7236\u8282\u70b9\u7684\u5173\u7cfb\u4e3a\u4e00\u4e2a Weak<T> \u5f15\u7528\uff0c\u5c31\u80fd\u591f\u62e5\u6709\u7236\u8282\u70b9\u548c\u5b50\u8282\u70b9\u4e4b\u95f4\u7684\u53cc\u5411\u5f15\u7528\u800c\u4e0d\u4f1a\u9020\u6210\u5f15\u7528\u5faa\u73af\u548c\u5185\u5b58\u6cc4\u6f0f\u3002","title":"\u53ef\u89c6\u5316 strong_count \u548c weak_count \u7684\u6539\u53d8"},{"location":"smart-pointers/#_10","text":"\u8fd9\u4e00\u7ae0\u6db5\u76d6\u4e86\u5982\u4f55\u4f7f\u7528\u667a\u80fd\u6307\u9488\u6765\u505a\u51fa\u4e0d\u540c\u4e8e Rust \u5e38\u89c4\u5f15\u7528\u9ed8\u8ba4\u6240\u63d0\u4f9b\u7684\u4fdd\u8bc1\u4e0e\u53d6\u820d\u3002 Box<T> \u6709\u4e00\u4e2a\u5df2\u77e5\u7684\u5927\u5c0f\u5e76\u6307\u5411\u5206\u914d\u5728\u5806\u4e0a\u7684\u6570\u636e\u3002 Rc<T> \u8bb0\u5f55\u4e86\u5806\u4e0a\u6570\u636e\u7684\u5f15\u7528\u6570\u91cf\u4ee5\u4fbf\u53ef\u4ee5\u62e5\u6709\u591a\u4e2a\u6240\u6709\u8005\u3002 RefCell<T> \u548c\u5176\u5185\u90e8\u53ef\u53d8\u6027\u63d0\u4f9b\u4e86\u4e00\u4e2a\u53ef\u4ee5\u7528\u4e8e\u5f53\u9700\u8981\u4e0d\u53ef\u53d8\u7c7b\u578b\u4f46\u662f\u9700\u8981\u6539\u53d8\u5176\u5185\u90e8\u503c\u80fd\u529b\u7684\u7c7b\u578b\uff0c\u5e76\u5728\u8fd0\u884c\u65f6\u800c\u4e0d\u662f\u7f16\u8bd1\u65f6\u68c0\u67e5\u501f\u7528\u89c4\u5219\u3002 \u6211\u4eec\u8fd8\u4ecb\u7ecd\u4e86\u63d0\u4f9b\u4e86\u5f88\u591a\u667a\u80fd\u6307\u9488\u529f\u80fd\u7684 trait Deref \u548c Drop \u3002\u540c\u65f6\u63a2\u7d22\u4e86\u4f1a\u9020\u6210\u5185\u5b58\u6cc4\u6f0f\u7684\u5f15\u7528\u5faa\u73af\uff0c\u4ee5\u53ca\u5982\u4f55\u4f7f\u7528 Weak<T> \u6765\u907f\u514d\u5b83\u4eec\u3002 \u5982\u679c\u672c\u7ae0\u5185\u5bb9\u5f15\u8d77\u4e86\u4f60\u7684\u5174\u8da3\u5e76\u5e0c\u671b\u73b0\u5728\u5c31\u5b9e\u73b0\u4f60\u81ea\u5df1\u7684\u667a\u80fd\u6307\u9488\u7684\u8bdd\uff0c\u8bf7\u9605\u8bfb \u201cThe Rustonomicon\u201d \u6765\u83b7\u53d6\u66f4\u591a\u6709\u7528\u7684\u4fe1\u606f\u3002 \u63a5\u4e0b\u6765\uff0c\u8ba9\u6211\u4eec\u8c08\u8c08 Rust \u7684\u5e76\u53d1\u3002\u5c4a\u65f6\u751a\u81f3\u8fd8\u4f1a\u5b66\u4e60\u5230\u4e00\u4e9b\u65b0\u7684\u5e76\u4e14\u5bf9\u5e76\u53d1\u6709\u5e2e\u52a9\u7684\u667a\u80fd\u6307\u9488\u3002","title":"\u603b\u7ed3"},{"location":"struct/","text":"\u7ed3\u6784\u4f53 struct \uff0c\u6216\u8005 structure \uff0c\u662f\u4e00\u4e2a\u81ea\u5b9a\u4e49\u6570\u636e\u7c7b\u578b\uff0c\u5141\u8bb8\u4f60\u5305\u88c5\u548c\u547d\u540d\u591a\u4e2a\u76f8\u5173\u7684\u503c\uff0c\u4ece\u800c\u5f62\u6210\u4e00\u4e2a\u6709\u610f\u4e49\u7684\u7ec4\u5408\u3002 \u5b9a\u4e49\u548c\u5b9e\u4f8b\u5316 \u548c\u5143\u7ec4\u4e00\u6837\uff0c\u7ed3\u6784\u4f53\u7684\u6bcf\u4e00\u90e8\u5206\u53ef\u4ee5\u662f\u4e0d\u540c\u7c7b\u578b\u3002\u4f46\u4e0d\u540c\u4e8e\u5143\u7ec4\uff0c \u7ed3\u6784\u4f53\u9700\u8981\u547d\u540d\u5404\u90e8\u5206\u6570\u636e\u4ee5\u4fbf\u80fd\u6e05\u695a\u7684\u8868\u660e\u5176\u503c\u7684\u610f\u4e49 \u3002\u7531\u4e8e\u6709\u4e86\u8fd9\u4e9b\u540d\u5b57\uff0c\u7ed3\u6784\u4f53\u6bd4\u5143\u7ec4\u66f4\u7075\u6d3b\uff1a \u4e0d\u9700\u8981\u4f9d\u8d56\u987a\u5e8f\u6765\u6307\u5b9a\u6216\u8bbf\u95ee\u5b9e\u4f8b\u4e2d\u7684\u503c \u3002 \u5b9a\u4e49\u7ed3\u6784\u4f53\uff0c\u9700\u8981\u4f7f\u7528 struct \u5173\u952e\u5b57\u5e76\u4e3a\u6574\u4e2a\u7ed3\u6784\u4f53\u63d0\u4f9b\u4e00\u4e2a\u540d\u5b57\u3002\u7ed3\u6784\u4f53\u7684\u540d\u5b57\u9700\u8981\u63cf\u8ff0\u5b83\u6240\u7ec4\u5408\u7684\u6570\u636e\u7684\u610f\u4e49\u3002\u63a5\u7740\uff0c\u5728\u5927\u62ec\u53f7\u4e2d\uff0c\u5b9a\u4e49\u6bcf\u4e00\u90e8\u5206\u6570\u636e\u7684\u540d\u5b57\u548c\u7c7b\u578b\uff0c\u79f0\u4e3a \u5b57\u6bb5 \uff08field\uff09\u3002 struct User { active : bool , username : String , email : String , sign_in_count : u64 , } \u4e00\u65e6\u5b9a\u4e49\u4e86\u7ed3\u6784\u4f53\u540e\uff0c\u4e3a\u4e86\u4f7f\u7528\u5b83\uff0c\u901a\u8fc7\u4e3a\u6bcf\u4e2a\u5b57\u6bb5\u6307\u5b9a\u5177\u4f53\u503c\u6765\u521b\u5efa\u8fd9\u4e2a\u7ed3\u6784\u4f53\u7684 \u5b9e\u4f8b \u3002\u521b\u5efa\u4e00\u4e2a\u5b9e\u4f8b\u9700\u8981\u4ee5\u7ed3\u6784\u4f53\u7684\u540d\u5b57\u5f00\u5934\uff0c\u63a5\u7740\u5728\u5927\u62ec\u53f7\u4e2d\u4f7f\u7528 key: value \u952e-\u503c\u5bf9\u7684\u5f62\u5f0f\u63d0\u4f9b\u5b57\u6bb5\uff0c\u5176\u4e2d key \u662f\u5b57\u6bb5\u7684\u540d\u5b57\uff0c value \u662f\u9700\u8981\u5b58\u50a8\u5728\u5b57\u6bb5\u4e2d\u7684\u6570\u636e\u503c\u3002 \u5b9e\u4f8b\u4e2d\u5b57\u6bb5\u7684\u987a\u5e8f \u4e0d\u9700\u8981 \u548c\u5b83\u4eec\u5728\u7ed3\u6784\u4f53\u4e2d\u58f0\u660e\u7684\u987a\u5e8f\u4e00\u81f4\u3002 \u4e3a\u4e86\u4ece\u7ed3\u6784\u4f53\u4e2d\u83b7\u53d6\u67d0\u4e2a\u7279\u5b9a\u7684\u503c\uff0c\u53ef\u4ee5\u4f7f\u7528\u70b9\u53f7\u3002 fn main () { // \u5b9e\u4f8b\u5316\u4e00\u4e2a\u7ed3\u6784\u4f53\uff0c\u5176\u4e2d\u5b57\u6bb5\u987a\u5e8f\u4e0d\u9700\u8981\u548c\u5b9a\u4e49\u65f6\u7684\u4e00\u76f4\u3002 let user1 = User { email : String :: from ( \"someone@example.com\" ), username : String :: from ( \"someusername123\" ), active : true , sign_in_count : 1 , }; // \u4f7f\u7528\u70b9\u53f7\u83b7\u53d6\u7ed3\u6784\u4f53\u4e2d\u7684\u67d0\u4e2a\u7279\u5b9a\u7684\u503c user1 . email = String :: from ( \"anotheremail@example.com\" ); } \u6ce8\u610f\u6574\u4e2a\u5b9e\u4f8b\u5fc5\u987b\u662f\u53ef\u53d8\u7684\uff1bRust \u5e76 \u4e0d\u5141\u8bb8 \u53ea\u5c06\u67d0\u4e2a\u5b57\u6bb5\u6807\u8bb0\u4e3a\u53ef\u53d8\u3002 \u53e6\u5916\u9700\u8981\u6ce8\u610f\u540c\u5176\u4ed6\u4efb\u4f55\u8868\u8fbe\u5f0f\u4e00\u6837\uff0c\u53ef\u4ee5\u5728\u51fd\u6570\u4f53\u7684\u6700\u540e\u4e00\u4e2a\u8868\u8fbe\u5f0f\u4e2d\u6784\u9020\u4e00\u4e2a\u7ed3\u6784\u4f53\u7684\u65b0\u5b9e\u4f8b\uff0c\u6765\u9690\u5f0f\u5730\u8fd4\u56de\u8fd9\u4e2a\u5b9e\u4f8b\u3002 // \u521b\u5efa\u4e00\u4e2a\u7ed3\u6784\u4f53\u7684\u5b9e\u4f8b\u5e76\u8fd4\u56de\uff0c // \u6709\u70b9\u7c7b\u4f3c\u4e8e\u5176\u4ed6\u8bed\u8a00\u4e2d\u7684\u521d\u59cb\u5316\u4e00\u4e2a\u7ed3\u6784\u4f53\u3002 fn build_user ( email : String , username : String ) -> User { User { email : email , username : username , active : true , // \u9ed8\u8ba4\u503c\u4e3atrue sign_in_count : 1 , // \u9ed8\u8ba4\u503c\u4e3a1 } } \u5b57\u6bb5\u521d\u59cb\u5316\u7b80\u5199 \u56e0\u4e3a\u793a\u4f8b\u4e2d\u7684\u53c2\u6570\u540d\u4e0e\u5b57\u6bb5\u540d\u90fd\u5b8c\u5168\u76f8\u540c\uff0c\u5219\u53ef\u4ee5\u4f7f\u7528 \u5b57\u6bb5\u521d\u59cb\u5316\u7b80\u5199\u8bed\u6cd5 \uff08field init shorthand\uff09\u6765\u91cd\u5199 build_user \uff0c\u8fd9\u6837\u5176\u884c\u4e3a\u4e0e\u4e4b\u524d\u5b8c\u5168\u76f8\u540c\uff0c\u4e0d\u8fc7\u65e0\u9700\u91cd\u590d email \u548c username . fn build_user ( email : String , username : String ) -> User { User { email , // \u5b57\u6bb5\u521d\u59cb\u5316\u7b80\u5199\u8bed\u6cd5 username , // \u5b57\u6bb5\u521d\u59cb\u5316\u7b80\u5199\u8bed\u6cd5 active : true , sign_in_count : 1 , } } \u4ece\u5176\u4ed6\u5b9e\u4f8b\u521b\u5efa\u5b9e\u4f8b \u4f7f\u7528\u65e7\u5b9e\u4f8b\u7684\u5927\u90e8\u5206\u503c\u4f46\u6539\u53d8\u5176\u90e8\u5206\u503c\u6765\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u7ed3\u6784\u4f53\u5b9e\u4f8b\u901a\u5e38\u662f\u5f88\u6709\u7528\u7684\u3002\u8fd9\u53ef\u4ee5\u901a\u8fc7 \u7ed3\u6784\u4f53\u66f4\u65b0\u8bed\u6cd5 \uff08struct update syntax\uff09\u5b9e\u73b0\u3002 fn main () { // --snip-- let user2 = User { active : user1 . active , // \u4ece\u53e6\u4e00\u4e2a\u7ed3\u6784\u4f53\u7684\u5b57\u6bb5\u503c\u6765\u521d\u59cb\u5316 username : user1 . username , // \u4ece\u53e6\u4e00\u4e2a\u7ed3\u6784\u4f53\u7684\u5b57\u6bb5\u503c\u6765\u521d\u59cb\u5316 email : String :: from ( \"another@example.com\" ), sign_in_count : user1 . sign_in_count , }; } \u540c\u65f6\uff0c\u53ef\u4ee5\u4f7f\u7528 .. \u8bed\u6cd5\u6307\u5b9a\u4e86\u5269\u4f59\u672a\u663e\u5f0f\u8bbe\u7f6e\u503c\u7684\u5b57\u6bb5\u5e94\u6709\u4e0e\u7ed9\u5b9a\u5b9e\u4f8b\u5bf9\u5e94\u5b57\u6bb5\u76f8\u540c\u7684\u503c\u3002 fn main () { // --snip-- let user2 = User { // \u53ef\u4ee5\u9009\u62e9\u4ee5\u4efb\u4f55\u987a\u5e8f\u4e3a\u4efb\u610f\u5b57\u6bb5\u6307\u5b9a\u503c\uff0c\u800c\u4e0d\u7528\u8003\u8651\u7ed3\u6784\u4f53\u5b9a\u4e49\u4e2d\u5b57\u6bb5\u7684\u987a\u5e8f\u3002 email : String :: from ( \"another@example.com\" ), .. user1 // ..\u8bed\u6cd5\u6307\u5b9a\u5269\u4f59\u672a\u663e\u5f0f\u8bbe\u7f6e\u503c\u7684\u5b57\u6bb5 // ..user1 \u5fc5\u987b\u653e\u5728\u6700\u540e\uff0c\u4ee5\u6307\u5b9a\u5176\u4f59\u7684\u5b57\u6bb5\u5e94\u4ece user1 \u7684\u76f8\u5e94\u5b57\u6bb5\u4e2d\u83b7\u53d6\u5176\u503c }; } \u6ce8\u610f \u7ed3\u6784\u66f4\u65b0\u8bed\u6cd5\u5c31\u50cf\u5e26\u6709 = \u7684\u8d4b\u503c\uff0c\u56e0\u4e3a\u5b83\u79fb\u52a8\u4e86\u6570\u636e\uff0c\u5c31\u50cf\u5728\u201c \u53d8\u91cf\u4e0e\u6570\u636e\u4ea4\u4e92\u7684\u65b9\u5f0f\uff08\u4e00\uff09\uff1a\u79fb\u52a8 \u201d\u90e8\u5206\u8bb2\u5230\u7684\u4e00\u6837\u3002 \u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u5728\u521b\u5efa user2 \u540e\u4e0d\u80fd\u518d\u4f7f\u7528 user1 \uff0c\u56e0\u4e3a user1 \u7684 username \u5b57\u6bb5\u4e2d\u7684 String \u88ab\u79fb\u5230 user2 \u4e2d\u3002 \u5982\u679c\u6211\u4eec\u7ed9 user2 \u7684 email \u548c username \u90fd\u8d4b\u4e88\u65b0\u7684 String \u503c\uff0c\u4ece\u800c\u53ea\u4f7f\u7528 user1 \u7684 active \u548c sign_in_count \u503c\uff0c\u90a3\u4e48 user1 \u5728\u521b\u5efa user2 \u540e\u4ecd\u7136\u6709\u6548\u3002 active \u548c sign_in_count \u7684\u7c7b\u578b\u662f\u5b9e\u73b0 Copy trait \u7684\u7c7b\u578b\uff0c\u6240\u4ee5\u5728\u201c \u53d8\u91cf\u4e0e\u6570\u636e\u4ea4\u4e92\u7684\u65b9\u5f0f\uff08\u4e8c\uff09\uff1a\u514b\u9686 \u201d \u90e8\u5206\u8ba8\u8bba\u7684\u884c\u4e3a\u540c\u6837\u9002\u7528\u3002 \u5143\u7ec4\u7ed3\u6784\u4f53 \u5b9a\u4e49\u4e0e \u5143\u7ec4 \u7c7b\u4f3c\u7684\u7ed3\u6784\u4f53\uff0c\u79f0\u4e3a \u5143\u7ec4\u7ed3\u6784\u4f53 \uff08tuple structs\uff09\u3002 \u5143\u7ec4\u7ed3\u6784\u4f53\u6709\u7740\u7ed3\u6784\u4f53\u540d\u79f0\u63d0\u4f9b\u7684\u542b\u4e49\uff0c\u4f46\u6ca1\u6709\u5177\u4f53\u7684\u5b57\u6bb5\u540d\uff0c\u53ea\u6709\u5b57\u6bb5\u7684\u7c7b\u578b\u3002 \u5f53\u4f60\u60f3\u7ed9\u6574\u4e2a\u5143\u7ec4\u53d6\u4e00\u4e2a\u540d\u5b57\uff0c\u5e76\u4f7f\u5143\u7ec4\u6210\u4e3a\u4e0e\u5176\u4ed6\u5143\u7ec4\u4e0d\u540c\u7684\u7c7b\u578b\u65f6\uff0c\u5143\u7ec4\u7ed3\u6784\u4f53\u662f\u5f88\u6709\u7528\u7684\uff0c\u8fd9\u65f6\u50cf\u5e38\u89c4\u7ed3\u6784\u4f53\u90a3\u6837\u4e3a\u6bcf\u4e2a\u5b57\u6bb5\u547d\u540d\u5c31\u663e\u5f97\u591a\u4f59\u548c\u5f62\u5f0f\u5316\u4e86\u3002 \u8981\u5b9a\u4e49\u5143\u7ec4\u7ed3\u6784\u4f53\uff0c\u4ee5 struct \u5173\u952e\u5b57\u548c\u7ed3\u6784\u4f53\u540d\u5f00\u5934\u5e76\u540e\u8ddf\u5143\u7ec4\u4e2d\u7684\u7c7b\u578b\u3002 struct Color ( i32 , i32 , i32 ); struct Point ( i32 , i32 , i32 ); fn main () { let black = Color ( 0 , 0 , 0 ); let origin = Point ( 0 , 0 , 0 ); } \u6ce8\u610f black \u548c origin \u503c\u7684\u7c7b\u578b\u4e0d\u540c\uff0c\u56e0\u4e3a\u5b83\u4eec\u662f\u4e0d\u540c\u7684\u5143\u7ec4\u7ed3\u6784\u4f53\u7684\u5b9e\u4f8b\u3002 \u5b9a\u4e49\u7684\u6bcf\u4e00\u4e2a\u7ed3\u6784\u4f53\u6709\u5176\u81ea\u5df1\u7684\u7c7b\u578b\uff0c\u5373\u4f7f\u7ed3\u6784\u4f53\u4e2d\u7684\u5b57\u6bb5\u53ef\u80fd\u6709\u7740\u76f8\u540c\u7684\u7c7b\u578b \u3002 \u4f8b\u5982\uff0c\u4e00\u4e2a\u83b7\u53d6 Color \u7c7b\u578b\u53c2\u6570\u7684\u51fd\u6570\u4e0d\u80fd\u63a5\u53d7 Point \u4f5c\u4e3a\u53c2\u6570\uff0c\u5373\u4fbf\u8fd9\u4e24\u4e2a\u7c7b\u578b\u90fd\u7531\u4e09\u4e2a i32 \u503c\u7ec4\u6210\u3002 \u5728\u5176\u4ed6\u65b9\u9762\uff0c\u5143\u7ec4\u7ed3\u6784\u4f53\u5b9e\u4f8b\u7c7b\u4f3c\u4e8e\u5143\u7ec4\uff0c\u53ef\u4ee5\u5c06\u5b83\u4eec\u89e3\u6784\u4e3a\u5355\u72ec\u7684\u90e8\u5206\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528 . \u540e\u8ddf\u7d22\u5f15\u6765\u8bbf\u95ee\u5355\u72ec\u7684\u503c\u3002 \u7c7b\u5355\u5143\u7ed3\u6784\u4f53 \u4e5f\u53ef\u4ee5\u5b9a\u4e49\u4e00\u4e2a\u6ca1\u6709\u4efb\u4f55\u5b57\u6bb5\u7684\u7ed3\u6784\u4f53\uff01\u5b83\u4eec\u88ab\u79f0\u4e3a \u7c7b\u5355\u5143\u7ed3\u6784\u4f53 \uff08unit-like structs\uff09\u56e0\u4e3a\u5b83\u4eec\u7c7b\u4f3c\u4e8e ()\uff0c\u5373\u201c \u5143\u7ec4\u7c7b\u578b \u201d\u4e00\u8282\u4e2d\u63d0\u5230\u7684 unit \u7c7b\u578b\u3002 \u7c7b\u5355\u5143\u7ed3\u6784\u4f53\u5e38\u5e38\u5728\u60f3\u8981\u5728\u67d0\u4e2a\u7c7b\u578b\u4e0a\u5b9e\u73b0 trait \u4f46\u4e0d\u9700\u8981\u5728\u7c7b\u578b\u4e2d\u5b58\u50a8\u6570\u636e\u7684\u65f6\u5019\u53d1\u6325\u4f5c\u7528\u3002 // \u7c7b\u5355\u5143\u7ed3\u6784\u4f53 struct AlwaysEqual ; // \u4e0d\u9700\u8981\u82b1\u62ec\u53f7\u6216\u5706\u62ec\u53f7\uff01 fn main () { // \u4ee5\u7c7b\u4f3c\u7684\u65b9\u5f0f\u5728 subject \u53d8\u91cf\u4e2d\u83b7\u5f97 AlwaysEqual \u7684\u5b9e\u4f8b let subject = AlwaysEqual ; // \u4f7f\u7528\u5b9a\u4e49\u7684\u540d\u79f0\uff0c\u4e0d\u9700\u8981\u4efb\u4f55\u82b1\u62ec\u53f7\u6216\u5706\u62ec\u53f7\u3002 // \u60f3\u8c61\u4e00\u4e0b\uff0c\u5b9e\u73b0\u8fd9\u4e2a\u7c7b\u578b\u7684\u884c\u4e3a\uff0c\u5373\u6bcf\u4e2a\u5b9e\u4f8b\u59cb\u7ec8\u7b49\u4e8e\u6bcf\u4e00\u4e2a\u5176\u4ed6\u7c7b\u578b\u7684\u5b9e\u4f8b\uff0c\u4e5f\u8bb8\u662f\u4e3a\u4e86\u83b7\u5f97\u4e00\u4e2a\u5df2\u77e5\u7684\u7ed3\u679c\u4ee5\u4fbf\u8fdb\u884c\u6d4b\u8bd5\u3002 } \u7ed3\u6784\u4f53\u6570\u636e\u7684\u6240\u6709\u6743 \u5728\u793a\u4f8b User \u7ed3\u6784\u4f53\u7684\u5b9a\u4e49\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u4e86\u81ea\u8eab\u62e5\u6709\u6240\u6709\u6743\u7684 String \u7c7b\u578b\u800c\u4e0d\u662f &str \u5b57\u7b26\u4e32 slice \u7c7b\u578b\u3002\u8fd9\u662f\u4e00\u4e2a\u6709\u610f\u800c\u4e3a\u4e4b\u7684\u9009\u62e9\uff0c\u56e0\u4e3a\u6211\u4eec\u60f3\u8981\u8fd9\u4e2a\u7ed3\u6784\u4f53\u62e5\u6709\u5b83\u6240\u6709\u7684\u6570\u636e\uff0c\u4e3a\u6b64\u53ea\u8981\u6574\u4e2a\u7ed3\u6784\u4f53\u662f\u6709\u6548\u7684\u8bdd\u5176\u6570\u636e\u4e5f\u662f\u6709\u6548\u7684\u3002 \u53ef\u4ee5\u4f7f\u7ed3\u6784\u4f53\u5b58\u50a8\u88ab\u5176\u4ed6\u5bf9\u8c61\u62e5\u6709\u7684\u6570\u636e\u7684\u5f15\u7528\uff0c\u4e0d\u8fc7\u8fd9\u4e48\u505a\u7684\u8bdd\u9700\u8981\u7528\u4e0a \u751f\u547d\u5468\u671f \uff08lifetimes\uff09\uff0c\u8fd9\u662f\u4e00\u4e2a \u7b2c\u5341\u7ae0 \u4f1a\u8ba8\u8bba\u7684 Rust \u529f\u80fd\u3002 \u751f\u547d\u5468\u671f\u786e\u4fdd\u7ed3\u6784\u4f53\u5f15\u7528\u7684\u6570\u636e\u6709\u6548\u6027\u8ddf\u7ed3\u6784\u4f53\u672c\u8eab\u4fdd\u6301\u4e00\u81f4\u3002\u5982\u679c\u4f60\u5c1d\u8bd5\u5728\u7ed3\u6784\u4f53\u4e2d\u5b58\u50a8\u4e00\u4e2a\u5f15\u7528\u800c\u4e0d\u6307\u5b9a\u751f\u547d\u5468\u671f\u5c06\u662f\u65e0\u6548\u7684\uff0c\u6bd4\u5982\u8fd9\u6837\uff1a struct User { active : bool , username : & str , email : & str , sign_in_count : u64 , } fn main () { let user1 = User { email : \"someone@example.com\" , username : \"someusername123\" , active : true , sign_in_count : 1 , }; } \u7f16\u8bd1\u5668\u4f1a\u62b1\u6028\u5b83\u9700\u8981\u751f\u547d\u5468\u671f\u6807\u8bc6\u7b26\uff1a $ cargo run Compiling structs v0.1.0 ( file:///projects/structs ) error [ E0106 ] : missing lifetime specifier --> src/main.rs:3:15 | 3 | username: & str, | ^ expected named lifetime parameter | help: consider introducing a named lifetime parameter | 1 ~ struct User< 'a> { 2 | active: bool, 3 ~ username: &' a str, | error [ E0106 ] : missing lifetime specifier --> src/main.rs:4:12 | 4 | email: & str, | ^ expected named lifetime parameter | help: consider introducing a named lifetime parameter | 1 ~ struct User< 'a> { 2 | active: bool, 3 | username: &str, 4 ~ email: &' a str, | For more information about this error, try ` rustc --explain E0106 ` . error: could not compile ` structs ` due to 2 previous errors \u7b2c\u5341\u7ae0 \u4f1a\u8bb2\u5230\u5982\u4f55\u4fee\u590d\u8fd9\u4e2a\u95ee\u9898\u4ee5\u4fbf\u5728\u7ed3\u6784\u4f53\u4e2d\u5b58\u50a8\u5f15\u7528\uff0c\u4e0d\u8fc7\u73b0\u5728\uff0c\u4f1a\u4f7f\u7528\u50cf String \u8fd9\u7c7b\u62e5\u6709\u6240\u6709\u6743\u7684\u7c7b\u578b\u6765\u66ff\u4ee3 &str \u8fd9\u6837\u7684\u5f15\u7528\u4ee5\u4fee\u6b63\u8fd9\u4e2a\u9519\u8bef\u3002 \u793a\u4f8b\u7a0b\u5e8f \u4e3a\u4e86\u7406\u89e3\u4f55\u65f6\u4f1a\u9700\u8981\u4f7f\u7528\u7ed3\u6784\u4f53\uff0c\u8fd9\u91cc\u7f16\u5199\u4e00\u4e2a\u8ba1\u7b97\u957f\u65b9\u5f62\u9762\u79ef\u7684\u7a0b\u5e8f\u3002 \u4f7f\u7528 Cargo \u65b0\u5efa\u4e00\u4e2a\u53eb\u505a rectangles \u7684\u4e8c\u8fdb\u5236\u7a0b\u5e8f\uff0c\u5b83\u83b7\u53d6\u4ee5\u50cf\u7d20\u4e3a\u5355\u4f4d\u7684\u957f\u65b9\u5f62\u7684\u5bbd\u5ea6\u548c\u9ad8\u5ea6\uff0c\u5e76\u8ba1\u7b97\u51fa\u957f\u65b9\u5f62\u7684\u9762\u79ef\u3002 fn main () { let width1 = 30 ; let height1 = 50 ; println! ( \"\u77e9\u5f62\u7684\u9762\u79ef\u662f{}\u4e2a\u50cf\u7d20\" , area ( width1 , height1 )) } fn area ( width : u32 , height : u32 ) -> u32 { width * height } \u4fee\u6539\u8fd9\u6bb5\u4ee3\u7801\u6765\u4f7f\u5b83\u7684\u610f\u4e49\u66f4\u52a0\u660e\u786e: // \u51fd\u6570 area \u672c\u5e94\u8be5\u8ba1\u7b97\u4e00\u4e2a\u957f\u65b9\u5f62\u7684\u9762\u79ef\uff0c\u4e0d\u8fc7\u51fd\u6570\u5374\u6709\u4e24\u4e2a\u53c2\u6570\u3002 // \u8fd9\u4e24\u4e2a\u53c2\u6570\u662f\u76f8\u5173\u8054\u7684\uff0c\u4e0d\u8fc7\u7a0b\u5e8f\u672c\u8eab\u5374\u6ca1\u6709\u8868\u73b0\u51fa\u8fd9\u4e00\u70b9\u3002 // \u5c06\u957f\u5ea6\u548c\u5bbd\u5ea6\u7ec4\u5408\u5728\u4e00\u8d77\u5c06\u66f4\u6613\u61c2\u4e5f\u66f4\u6613\u5904\u7406\u3002 fn area ( width : u32 , height : u32 ) -> u32 { // ... } \u5143\u7ec4\u91cd\u6784 \u4f7f\u7528\u5143\u7ec4\u7684\u53e6\u4e00\u4e2a\u7a0b\u5e8f\u7248\u672c: fn main () { let rect = ( 30 , 50 ); println! ( \"\u77e9\u5f62\u7684\u9762\u79ef\u662f{}\u4e2a\u50cf\u7d20\" , area ( rect )) } // \u5143\u7ec4\u5e2e\u52a9\u6211\u4eec\u589e\u52a0\u4e86\u4e00\u4e9b\u7ed3\u6784\u6027\uff0c\u5e76\u4e14\u73b0\u5728\u53ea\u9700\u4f20\u4e00\u4e2a\u53c2\u6570\u3002 // \u4e0d\u8fc7\u5728\u53e6\u4e00\u65b9\u9762\uff0c\u8fd9\u4e2a\u7248\u672c\u5374\u6709\u4e00\u70b9\u4e0d\u660e\u786e\u4e86\uff1a\u5143\u7ec4\u5e76\u6ca1\u6709\u7ed9\u51fa\u5143\u7d20\u7684\u540d\u79f0\uff0c\u6240\u4ee5\u8ba1\u7b97\u53d8\u5f97\u66f4\u8d39\u89e3\u4e86\uff0c\u56e0\u4e3a\u4e0d\u5f97\u4e0d\u4f7f\u7528\u7d22\u5f15\u6765\u83b7\u53d6\u5143\u7ec4\u7684\u6bcf\u4e00\u90e8\u5206\uff1a fn area ( dimensions : ( u32 , u32 )) -> u32 { dimensions . 0 * dimensions . 1 } \u7ed3\u6784\u4f53\u91cd\u6784 \u53ef\u4ee5\u4f7f\u7528\u7ed3\u6784\u4f53\u4e3a\u6570\u636e\u547d\u540d\u6765\u4e3a\u5176\u8d4b\u4e88\u610f\u4e49\u3002\u5c06\u6211\u4eec\u6b63\u5728\u4f7f\u7528\u7684\u5143\u7ec4\u8f6c\u6362\u6210\u4e00\u4e2a\u6709\u6574\u4f53\u540d\u79f0\u800c\u4e14\u6bcf\u4e2a\u90e8\u5206\u4e5f\u6709\u5bf9\u5e94\u540d\u5b57\u7684\u7ed3\u6784\u4f53\uff0c // \u5b9a\u4e49\u4e00\u4e2a\u77e9\u5f62\u7684\u7ed3\u6784\u4f53 // \u5728\u5927\u62ec\u53f7\u4e2d\u5b9a\u4e49\u4e86\u5b57\u6bb5 width \u548c height\uff0c\u7c7b\u578b\u90fd\u662f u32\u3002 struct Rectangle { width : u32 , height : u32 , } fn main () { // \u521b\u5efa\u4e86\u4e00\u4e2a\u5177\u4f53\u7684 Rectangle \u5b9e\u4f8b let rect1 = Rectangle { width : 30 , height : 50 , }; println! ( \"\u77e9\u5f62\u7684\u9762\u79ef\u662f{}\u4e2a\u50cf\u7d20\" , area ( & rect1 )); } // \u8ba1\u7b97\u4e00\u4e2a\u77e9\u5f62\u7684\u9762\u79ef // \u88ab\u5b9a\u4e49\u4e3a\u63a5\u6536\u4e00\u4e2a\u540d\u53eb rectangle \u7684\u53c2\u6570\uff0c\u5176\u7c7b\u578b\u662f\u4e00\u4e2a\u7ed3\u6784\u4f53 Rectangle \u5b9e\u4f8b\u7684\u4e0d\u53ef\u53d8\u501f\u7528(\u5f15\u7528)\u3002 // \u501f\u7528\u7ed3\u6784\u4f53\u800c\u4e0d\u662f\u83b7\u53d6\u5b83\u7684\u6240\u6709\u6743\uff0c\u8fd9\u6837 main \u51fd\u6570\u5c31\u53ef\u4ee5\u4fdd\u6301 rect1 \u7684\u6240\u6709\u6743\u5e76\u7ee7\u7eed\u4f7f\u7528\u5b83\uff0c\u6240\u4ee5\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u5728\u51fd\u6570\u7b7e\u540d\u548c\u8c03\u7528\u7684\u5730\u65b9\u4f1a\u6709 &\u3002 fn area ( rectangle : & Rectangle ) -> u32 { // \u8bbf\u95ee Rectangle \u5b9e\u4f8b\u7684 width \u548c height \u5b57\u6bb5 // \u6ce8\u610f\uff0c\u8bbf\u95ee\u5bf9\u7ed3\u6784\u4f53\u7684\u5f15\u7528\u7684\u5b57\u6bb5\u4e0d\u4f1a\u79fb\u52a8\u5b57\u6bb5\u7684\u6240\u6709\u6743, \u6240\u4ee5\u4f1a\u7ecf\u5e38\u770b\u5230\u5bf9\u7ed3\u6784\u4f53\u7684\u5f15\u7528 rectangle . width * rectangle . height } \u4f7f\u7528 Rectangle \u7684 width \u548c height \u5b57\u6bb5\uff0c\u8ba1\u7b97 Rectangle \u7684\u9762\u79ef\u3002\u8fd9\u8868\u660e\u5bbd\u9ad8\u662f\u76f8\u4e92\u8054\u7cfb\u7684\uff0c\u5e76\u4e3a\u8fd9\u4e9b\u503c\u63d0\u4f9b\u4e86\u63cf\u8ff0\u6027\u7684\u540d\u79f0\u800c\u4e0d\u662f\u4f7f\u7528\u5143\u7ec4\u7684\u7d22\u5f15\u503c 0 \u548c 1 \u3002 \u7ed3\u6784\u4f53\u80dc\u5728\u66f4\u6e05\u6670\u660e\u4e86 \u3002 \u6d3e\u751fTrait \u5728\u8c03\u8bd5\u7a0b\u5e8f\u65f6\u6253\u5370\u51fa Rectangle \u5b9e\u4f8b\u6765\u67e5\u770b\u5176\u6240\u6709\u5b57\u6bb5\u7684\u503c\u975e\u5e38\u6709\u7528\u3002\u5982\u679c\u80fd\u50cf\u524d\u9762\u90a3\u6837\u5c1d\u8bd5\u4f7f\u7528 println! \u5b8f \u5c31\u597d\u4e86\u3002\u4f46\u8fd9\u5e76\u4e0d\u884c\u3002 struct Rectangle { width : u32 , height : u32 , } fn main () { let rect1 = Rectangle { width : 30 , height : 50 , }; println! ( \"\u77e9\u5f62\u662f{}\" , rect1 ); } \u51fa\u73b0\u5e26\u6709\u5982\u4e0b\u6838\u5fc3\u4fe1\u606f\u7684\u9519\u8bef\uff1a error [ E0277 ] : ` Rectangle ` doesn ' t implement ` std::fmt::Display ` println! \u5b8f \u80fd\u5904\u7406\u5f88\u591a\u7c7b\u578b\u7684\u683c\u5f0f\uff0c\u4e0d\u8fc7\uff0c {} \u9ed8\u8ba4\u544a\u8bc9 println! \u4f7f\u7528\u88ab\u79f0\u4e3a Display \u7684\u683c\u5f0f\uff1a \u610f\u5728\u63d0\u4f9b\u7ed9\u76f4\u63a5\u7ec8\u7aef\u7528\u6237\u67e5\u770b\u7684\u8f93\u51fa \u3002 \u76ee\u524d\u4e3a\u6b62\u89c1\u8fc7\u7684\u57fa\u672c\u7c7b\u578b\u90fd\u9ed8\u8ba4\u5b9e\u73b0\u4e86 Display \u683c\u5f0f\uff0c\u56e0\u4e3a\u5b83\u5c31\u662f\u5411\u7528\u6237\u5c55\u793a 1 \u6216\u5176\u4ed6\u4efb\u4f55 \u57fa\u672c\u7c7b\u578b \u7684\u552f\u4e00\u65b9\u5f0f\u3002 \u4e0d\u8fc7\u5bf9\u4e8e\u7ed3\u6784\u4f53\uff0c println! \u5e94\u8be5\u7528\u6765\u8f93\u51fa\u7684\u683c\u5f0f\u662f\u4e0d\u660e\u786e\u7684\uff0c\u56e0\u4e3a\u8fd9\u6709\u66f4\u591a\u663e\u793a\u7684\u53ef\u80fd\u6027\uff1a\u662f\u5426\u9700\u8981\u9017\u53f7\uff1f\u9700\u8981\u6253\u5370\u51fa\u5927\u62ec\u53f7\u5417\uff1f\u6240\u6709\u5b57\u6bb5\u90fd\u5e94\u8be5\u663e\u793a\u5417\uff1f \u7531\u4e8e\u8fd9\u79cd\u4e0d\u786e\u5b9a\u6027\uff0cRust \u4e0d\u4f1a\u5c1d\u8bd5\u731c\u6d4b\u6211\u4eec\u7684\u610f\u56fe\uff0c\u6240\u4ee5\u7ed3\u6784\u4f53\u5e76\u6ca1\u6709\u63d0\u4f9b\u4e00\u4e2a Display \u5b9e\u73b0\u6765\u4f7f\u7528 println! \u4e0e {} \u5360\u4f4d\u7b26\u3002 \u5982\u679c\u6211\u4eec\u7ee7\u7eed\u9605\u8bfb\u9519\u8bef\uff0c\u5c06\u4f1a\u53d1\u73b0\u8fd9\u4e2a\u6709\u5e2e\u52a9\u7684\u4fe1\u606f\uff1a help: the trait ` std::fmt::Display ` is not implemented for ` Rectangle ` note: in format strings you may be able to use ` { :? } ` ( or { :#? } for pretty-print ) instead \u73b0\u5728 println! \u5b8f\u8c03\u7528\u770b\u8d77\u6765\u50cf println!(\"rect1 is {:?}\", rect1); \u8fd9\u6837\u3002\u5728 {} \u4e2d\u52a0\u5165 :? \u6307\u793a\u7b26\u544a\u8bc9 println! \u6211\u4eec\u60f3\u8981\u4f7f\u7528\u53eb\u505a Debug \u7684\u8f93\u51fa\u683c\u5f0f\u3002 Debug \u662f\u4e00\u4e2a trait \uff0c\u5b83\u5141\u8bb8\u6211\u4eec\u4ee5\u4e00\u79cd\u5bf9\u5f00\u53d1\u8005\u6709\u5e2e\u52a9\u7684\u65b9\u5f0f\u6253\u5370\u7ed3\u6784\u4f53\uff0c\u4ee5\u4fbf\u5f53\u6211\u4eec\u8c03\u8bd5\u4ee3\u7801\u65f6\u80fd\u770b\u5230\u5b83\u7684\u503c\u3002 struct Rectangle { width : u32 , height : u32 , } fn main () { let rect1 = Rectangle { width : 30 , height : 50 , }; println! ( \"\u77e9\u5f62\u662f{:?}\" , rect1 ); // \u6dfb\u52a0 :? \u5c1d\u8bd5\u4f7f\u7528Debug\u7684\u8f93\u51fa\u683c\u5f0f } \u8fd9\u6837\u8c03\u6574\u540e\u518d\u6b21\u8fd0\u884c\u7a0b\u5e8f\u3002\u89c1\u9b3c\u4e86\uff01\u4ecd\u7136\u80fd\u770b\u5230\u4e00\u4e2a\u9519\u8bef\uff1a error [ E0277 ] : ` Rectangle ` doesn ' t implement ` Debug ` \u4e0d\u8fc7\u7f16\u8bd1\u5668\u53c8\u4e00\u6b21\u7ed9\u51fa\u4e86\u4e00\u4e2a\u6709\u5e2e\u52a9\u7684\u4fe1\u606f\uff1a help: the trait ` Debug ` is not implemented for ` Rectangle ` note: add ` #[derive(Debug)]` to `Rectangle` or manually `impl Debug for Rectangle` Debug\u8f93\u51fa\u7ed3\u6784\u4f53 Rust \u786e\u5b9e \u5305\u542b\u4e86\u6253\u5370\u51fa\u8c03\u8bd5\u4fe1\u606f\u7684\u529f\u80fd\uff0c\u4e0d\u8fc7\u6211\u4eec\u5fc5\u987b\u4e3a\u7ed3\u6784\u4f53 \u663e\u5f0f \u9009\u62e9\u8fd9\u4e2a\u529f\u80fd\u3002\u4e3a\u6b64\uff0c\u5728\u7ed3\u6784\u4f53\u5b9a\u4e49\u4e4b\u524d\u52a0\u4e0a\u5916\u90e8\u5c5e\u6027 #[derive(Debug)] // \u6dfb\u52a0\u6253\u5370\u8c03\u8bd5\u7684\u529f\u80fd #[derive(Debug)] struct Rectangle { width : u32 , height : u32 , } fn main () { let rect1 = Rectangle { width : 30 , height : 50 , }; println! ( \"\u77e9\u5f62\u662f{:?}\" , rect1 ); // \u5c1d\u8bd5\u4f7f\u7528Debug\u7684\u8f93\u51fa\u683c\u5f0f } \u518d\u8fd0\u884c\u8fd9\u4e2a\u7a0b\u5e8f\u65f6\uff0c\u5c31\u4e0d\u4f1a\u6709\u4efb\u4f55\u9519\u8bef\uff0c\u5e76\u4f1a\u51fa\u73b0\u5982\u4e0b\u8f93\u51fa\uff1a $ cargo run Compiling rectangles v0.1.0 ( file:///projects/rectangles ) Finished dev [ unoptimized + debuginfo ] target ( s ) in 0 .48s Running ` target/debug/rectangles ` \u77e9\u5f62\u662fRectangle { width: 30 , height: 50 } \u8fd9\u5e76\u4e0d\u662f\u6700\u6f02\u4eae\u7684\u8f93\u51fa\uff0c\u4e0d\u8fc7\u5b83\u663e\u793a\u8fd9\u4e2a\u5b9e\u4f8b\u7684\u6240\u6709\u5b57\u6bb5\uff0c\u6beb\u65e0\u7591\u95ee\u8fd9\u5bf9\u8c03\u8bd5\u6709\u5e2e\u52a9\u3002 \u5f53\u6211\u4eec\u6709\u4e00\u4e2a\u66f4\u5927\u7684\u7ed3\u6784\u4f53\u65f6\uff0c\u80fd\u6709\u66f4 \u6613\u8bfb \u4e00\u70b9\u7684\u8f93\u51fa\u5c31\u597d\u4e86\uff0c\u4e3a\u6b64\u53ef\u4ee5\u4f7f\u7528 {:#?} \u66ff\u6362 println! \u5b57\u7b26\u4e32\u4e2d\u7684 {:?} \u3002 #[derive(Debug)] struct Rectangle { width : u32 , height : u32 , } fn main () { let rect1 = Rectangle { width : 30 , height : 50 , }; println! ( \"\u77e9\u5f62\u662f{:#?}\" , rect1 ); // \u5c1d\u8bd5\u4f7f\u7528Debug\u7684\u8f93\u51fa\u683c\u5f0f } \u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\u4f7f\u7528 {:#?} \u98ce\u683c\u5c06\u4f1a\u8f93\u51fa\uff1a $ cargo run Compiling rectangles v0 . 1.0 ( file : ///projects/rectangles) Finished dev [ unoptimized + debuginfo ] target ( s ) in 0.48 s Running ` target / debug / rectangles ` \u77e9\u5f62\u662f Rectangle { width : 30 , height : 50 , } dbg!\u5b8f \u53e6\u4e00\u79cd\u4f7f\u7528 Debug \u683c\u5f0f\u6253\u5370\u6570\u503c\u7684\u65b9\u6cd5\u662f\u4f7f\u7528 dbg! \u5b8f \u3002 dbg! \u5b8f \u53ef\u4ee5\u63a5\u6536\u4e00\u4e2a \u8868\u8fbe\u5f0f \u7684\u6240\u6709\u6743\uff0c\u6253\u5370\u51fa\u4ee3\u7801\u4e2d\u8c03\u7528 dbg! \u5b8f\u65f6\u6240\u5728\u7684\u6587\u4ef6\u548c\u884c\u53f7\uff0c\u4ee5\u53ca\u8be5\u8868\u8fbe\u5f0f\u7684\u7ed3\u679c\u503c\uff0c\u5e76\u8fd4\u56de\u8be5\u503c\u7684\u6240\u6709\u6743\u3002 \uff08\u4e0e println! \u5b8f\u76f8\u53cd\uff0c\u5176\u63a5\u6536\u7684\u662f\u5f15\u7528\uff09 \u6ce8\u610f \u8c03\u7528 dbg! \u5b8f \u4f1a\u6253\u5370\u5230\u6807\u51c6\u9519\u8bef\u63a7\u5236\u53f0\u6d41\uff08stderr\uff09\uff0c\u4e0e println! \u4e0d\u540c\uff0c\u540e\u8005\u4f1a\u6253\u5370\u5230\u6807\u51c6\u8f93\u51fa\u63a7\u5236\u53f0\u6d41\uff08stdout\uff09\u3002\u6211\u4eec\u5c06\u5728 \u7b2c\u5341\u4e8c\u7ae0 \u201c\u5c06\u9519\u8bef\u4fe1\u606f\u5199\u5165\u6807\u51c6\u9519\u8bef\u800c\u4e0d\u662f\u6807\u51c6\u8f93\u51fa\u201d \u4e00\u8282 \u4e2d\u66f4\u591a\u5730\u8ba8\u8bba stderr \u548c stdout \u3002 #[derive(Debug)] struct Rectangle { width : u32 , height : u32 , } fn main () { let scale = 2 ; let rect1 = Rectangle { // \u53ef\u4ee5\u628a dbg! \u653e\u5728\u8868\u8fbe\u5f0f 30 * scale \u5468\u56f4\uff0c\u56e0\u4e3a dbg! \u4f1a\u8fd4\u56de\u8868\u8fbe\u5f0f\u7684\u503c\u7684\u6240\u6709\u6743\uff0c // \u6240\u4ee5 width \u5b57\u6bb5\u5c06\u83b7\u5f97\u76f8\u540c\u7684\u503c\uff0c\u5c31\u50cf\u6211\u4eec\u5728\u90a3\u91cc\u6ca1\u6709 dbg! \u8c03\u7528\u4e00\u6837\u3002 width : dbg ! ( scale * 30 ), height : 50 , }; // \u4e0d\u5e0c\u671b dbg! \u62e5\u6709 rect1 \u7684\u6240\u6709\u6743\uff0c\u6240\u4ee5\u5728\u8fd9\u91cc\u8c03\u7528 dbg! \u65f6\u4ec5\u4f20\u9012\u4e00\u4e2a\u5f15\u7528\u3002 dbg! ( & rect1 ); } $ cargo run Compiling rectangles v0 . 1.0 ( file : ///projects/rectangles) Finished dev [ unoptimized + debuginfo ] target ( s ) in 0.61 s Running ` target / debug / rectangles ` [ src / main . rs : 10 ] scale * 30 = 60 [ src / main . rs : 14 ] & rect1 = Rectangle { width : 60 , height : 50 , } \u8fd9\u4e2a\u8f93\u51fa\u4f7f\u7528\u4e86\u66f4\u4e3a\u6613\u8bfb\u7684 Debug \u683c\u5f0f\u3002\u5f53\u4f60\u8bd5\u56fe\u5f04\u6e05\u695a\u4f60\u7684\u4ee3\u7801\u5728\u505a\u4ec0\u4e48\u65f6\uff0c dbg! \u5b8f \u53ef\u80fd\u771f\u7684\u5f88\u6709\u5e2e\u52a9! \u65b9\u6cd5 \u65b9\u6cd5\uff08method\uff09 \u4e0e\u51fd\u6570\u7c7b\u4f3c\uff1a \u5b83\u4eec\u4f7f\u7528 fn \u5173\u952e\u5b57\u548c\u540d\u79f0\u58f0\u660e\uff0c\u53ef\u4ee5\u62e5\u6709\u53c2\u6570\u548c\u8fd4\u56de\u503c\uff0c\u540c\u65f6\u5305\u542b\u5728\u67d0\u5904\u8c03\u7528\u8be5\u65b9\u6cd5\u65f6\u4f1a\u6267\u884c\u7684\u4ee3\u7801 \u3002 \u4e0d\u8fc7\u65b9\u6cd5\u4e0e\u51fd\u6570\u662f\u4e0d\u540c\u7684\uff0c\u56e0\u4e3a\u5b83\u4eec\u5728\u7ed3\u6784\u4f53\u7684\u4e0a\u4e0b\u6587\u4e2d\u88ab\u5b9a\u4e49\uff08\u6216\u8005\u662f \u679a\u4e3e \u6216 trait \u5bf9\u8c61\u7684\u4e0a\u4e0b\u6587\uff09\uff0c\u5e76\u4e14\u5b83\u4eec\u7b2c\u4e00\u4e2a\u53c2\u6570\u603b\u662f self \uff0c\u5b83\u4ee3\u8868\u8c03\u7528\u8be5\u65b9\u6cd5\u7684\u7ed3\u6784\u4f53\u5b9e\u4f8b\u3002 \u5b9a\u4e49\u65b9\u6cd5 \u628a\u524d\u9762\u5b9e\u73b0\u7684\u83b7\u53d6\u4e00\u4e2a Rectangle \u5b9e\u4f8b\u4f5c\u4e3a\u53c2\u6570\u7684 area \u51fd\u6570\uff0c\u6539\u5199\u6210\u4e00\u4e2a\u5b9a\u4e49\u4e8e Rectangle \u7ed3\u6784\u4f53\u4e0a\u7684 area \u65b9\u6cd5: #[derive(Debug)] struct Rectangle { width : u32 , height : u32 , } // impl \u662f implementation \u7684\u7f29\u5199 // impl \u5757\u4e2d\u7684\u6240\u6709\u5185\u5bb9\u90fd\u5c06\u4e0e Rectangle \u7c7b\u578b\u76f8\u5173\u8054 impl Rectangle { // \u5b9a\u4e49 \u4e0e Rectangle \u76f8\u5173\u8054\u7684 area\u65b9\u6cd5 // \u4f7f\u7528 &self \u6765\u66ff\u4ee3 rectangle: &Rectangle // &self \u5b9e\u9645\u4e0a\u662f self: &Self \u7684\u7f29\u5199 // \u8fd9\u91cc\u9009\u62e9 `&self` \u7684\u7406\u7531\u8ddf\u5728\u51fd\u6570\u7248\u672c\u4e2d\u4f7f\u7528 `&Rectangle` \u662f\u76f8\u540c\u7684\uff1a\u5e76\u4e0d\u60f3\u83b7\u53d6\u6240\u6709\u6743\uff0c\u53ea\u5e0c\u671b\u80fd\u591f\u8bfb\u53d6\u7ed3\u6784\u4f53\u4e2d\u7684\u6570\u636e\uff0c\u800c\u4e0d\u662f\u5199\u5165\u3002 // \u5982\u679c\u60f3\u8981\u5728\u65b9\u6cd5\u4e2d\u6539\u53d8\u8c03\u7528\u65b9\u6cd5\u7684\u5b9e\u4f8b\uff0c\u9700\u8981\u5c06\u7b2c\u4e00\u4e2a\u53c2\u6570\u6539\u4e3a &mut self\u3002 // \u901a\u8fc7\u4ec5\u4ec5\u4f7f\u7528 self \u4f5c\u4e3a\u7b2c\u4e00\u4e2a\u53c2\u6570\u6765\u4f7f\u65b9\u6cd5\u83b7\u53d6\u5b9e\u4f8b\u7684\u6240\u6709\u6743\u662f\u5f88\u5c11\u89c1\u7684\uff1b\u8fd9\u79cd\u6280\u672f\u901a\u5e38\u7528\u5728\u5f53\u65b9\u6cd5\u5c06 self \u8f6c\u6362\u6210\u522b\u7684\u5b9e\u4f8b\u7684\u65f6\u5019\uff0c\u8fd9\u65f6\u60f3\u8981\u9632\u6b62\u8c03\u7528\u8005\u5728\u8f6c\u6362\u4e4b\u540e\u4f7f\u7528\u539f\u59cb\u7684\u5b9e\u4f8b\u3002 fn area ( & self ) -> u32 { self . width * self . height } } fn main () { let rect1 = Rectangle { width : 30 , height : 50 , }; println! ( \"\u77e9\u5f62\u7684\u9762\u79ef\u662f: {} \u50cf\u7d20\" , rect1 . area ()) // \u8c03\u7528Rectangle\u7684\u5173\u8054\u65b9\u6cd5area } \u5728\u4e00\u4e2a impl \u5757\u4e2d\uff0cSelf \u7c7b\u578b\u662f impl \u5757\u7684\u7c7b\u578b\u7684\u522b\u540d\u3002\u65b9\u6cd5\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u5fc5\u987b\u6709\u4e00\u4e2a\u540d\u4e3a self \u7684Self \u7c7b\u578b\u7684\u53c2\u6570 \uff0c\u6240\u4ee5 Rust \u8ba9\u4f60\u5728\u7b2c\u4e00\u4e2a\u53c2\u6570\u4f4d\u7f6e\u4e0a\u53ea\u7528 self \u8fd9\u4e2a\u540d\u5b57\u6765\u7f29\u5199\u3002 \u6ce8\u610f \u6211\u4eec\u4ecd\u7136\u9700\u8981\u5728 self \u524d\u9762\u4f7f\u7528 & \u6765\u8868\u793a\u8fd9\u4e2a\u65b9\u6cd5\u501f\u7528\u4e86 Self \u5b9e\u4f8b\uff0c\u5c31\u50cf\u6211\u4eec\u5728 rectangle: &Rectangle \u4e2d\u505a\u7684\u90a3\u6837\u3002 \u65b9\u6cd5\u53ef\u4ee5\u9009\u62e9\u83b7\u5f97 self \u7684\u6240\u6709\u6743\uff0c\u6216\u8005\u50cf\u8fd9\u91cc\u4e00\u6837 \u4e0d\u53ef\u53d8\u5730\u501f\u7528 self \uff0c\u6216\u8005 \u53ef\u53d8\u5730\u501f\u7528 self \uff0c\u5c31\u8ddf\u5176\u4ed6\u53c2\u6570\u4e00\u6837\u3002 \u4f7f\u7528 \u65b9\u6cd5 \u66ff\u4ee3 \u51fd\u6570 \uff0c\u9664\u4e86\u53ef\u4f7f\u7528\u65b9\u6cd5\u8bed\u6cd5\u548c\u4e0d\u9700\u8981\u5728\u6bcf\u4e2a\u51fd\u6570\u7b7e\u540d\u4e2d\u91cd\u590d self \u7684\u7c7b\u578b\u4e4b\u5916\uff0c\u5176\u4e3b\u8981\u597d\u5904\u5728\u4e8e\u7ec4\u7ec7\u6027\u3002 \u6211\u4eec\u5c06\u67d0\u4e2a\u7c7b\u578b\u5b9e\u4f8b\u80fd\u505a\u7684\u6240\u6709\u4e8b\u60c5\u90fd\u4e00\u8d77\u653e\u5165 impl \u5757\u4e2d\uff0c\u800c\u4e0d\u662f\u8ba9\u5c06\u6765\u7684\u7528\u6237\u5728\u6211\u4eec\u7684\u5e93\u4e2d\u5230\u5904\u5bfb\u627e Rectangle \u7684\u529f\u80fd\u3002 \u6ce8\u610f \u6211\u4eec\u53ef\u4ee5\u9009\u62e9\u5c06\u65b9\u6cd5\u7684\u540d\u79f0\u4e0e\u7ed3\u6784\u4e2d\u7684\u4e00\u4e2a\u5b57\u6bb5\u76f8\u540c\u3002\u4f8b\u5982\uff0c\u6211\u4eec\u53ef\u4ee5\u5728 Rectangle \u4e0a\u5b9a\u4e49\u4e00\u4e2a\u65b9\u6cd5\uff0c\u5e76\u547d\u540d\u4e3a width\uff1a struct Rectangle { width : u32 , height : u32 , } impl Rectangle { fn width ( & self ) -> bool { self . width > 0 } } fn main () { let rect1 = Rectangle { width : 30 , height : 50 , }; println! ( \"\u77e9\u5f62\u7684\u5bbd\u5ea6\u4e0d\u4e3a\u96f6: {}\" , rect1 . width ()) } \u7f16\u7a0b\u65f6 \u53ef\u4ee5\u51fa\u4e8e\u4efb\u4f55\u76ee\u7684\uff0c\u5728\u540c\u540d\u7684\u65b9\u6cd5\u4e2d\u4f7f\u7528\u540c\u540d\u7684\u5b57\u6bb5 \u5728 main \u4e2d\uff0c\u5f53\u6211\u4eec\u5728 rect1.width \u540e\u9762\u52a0\u4e0a\u62ec\u53f7\u65f6\u3002Rust \u77e5\u9053\u6211\u4eec\u6307\u7684\u662f\u65b9\u6cd5 width \u3002\u5f53\u6211\u4eec\u4e0d\u4f7f\u7528\u5706\u62ec\u53f7\u65f6\uff0cRust \u77e5\u9053\u6211\u4eec\u6307\u7684\u662f\u5b57\u6bb5 width \u3002 \u901a\u5e38\uff0c\u4f46\u5e76\u4e0d\u603b\u662f\u5982\u6b64\uff0c\u4e0e\u5b57\u6bb5\u540c\u540d\u7684\u65b9\u6cd5\u5c06\u88ab\u5b9a\u4e49\u4e3a\u53ea\u8fd4\u56de\u5b57\u6bb5\u4e2d\u7684\u503c\uff0c\u800c\u4e0d\u505a\u5176\u4ed6\u4e8b\u60c5\u3002\u8fd9\u6837\u7684\u65b9\u6cd5\u88ab\u79f0\u4e3a getters \uff0c Rust \u5e76\u4e0d\u50cf\u5176\u4ed6\u4e00\u4e9b\u8bed\u8a00\u90a3\u6837\u4e3a\u7ed3\u6784\u5b57\u6bb5\u81ea\u52a8\u5b9e\u73b0\u5b83\u4eec\u3002 Getters \u5f88\u6709\u7528\uff0c\u56e0\u4e3a\u4f60\u53ef\u4ee5\u628a\u5b57\u6bb5\u53d8\u6210\u79c1\u6709\u7684\uff0c\u4f46\u65b9\u6cd5\u662f\u516c\u5171\u7684\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u628a\u5bf9\u5b57\u6bb5\u7684\u53ea\u8bfb\u8bbf\u95ee\u4f5c\u4e3a\u8be5\u7c7b\u578b\u516c\u5171 API \u7684\u4e00\u90e8\u5206\u3002 \u6211\u4eec\u5c06\u5728 \u7b2c\u4e03\u7ae0 \u4e2d\u8ba8\u8bba\u4ec0\u4e48\u662f\u516c\u6709\u548c\u79c1\u6709\uff0c\u4ee5\u53ca\u5982\u4f55\u5c06\u4e00\u4e2a\u5b57\u6bb5\u6216\u65b9\u6cd5\u6307\u5b9a\u4e3a\u516c\u6709\u6216\u79c1\u6709\u3002 \u53c2\u6570\u65b9\u6cd5 \u901a\u8fc7\u5b9e\u73b0 Rectangle \u7ed3\u6784\u4f53\u4e0a\u7684\u53e6\u4e00\u65b9\u6cd5\u6765\u7ec3\u4e60\u4f7f\u7528\u65b9\u6cd5 \u8ba9\u4e00\u4e2a Rectangle \u7684\u5b9e\u4f8b\u83b7\u53d6\u53e6\u4e00\u4e2a Rectangle \u5b9e\u4f8b\uff0c\u5982\u679c self \uff08\u7b2c\u4e00\u4e2a Rectangle \uff09\u80fd\u5b8c\u5168\u5305\u542b\u7b2c\u4e8c\u4e2a\u957f\u65b9\u5f62\u5219\u8fd4\u56de true\uff1b\u5426\u5219\u8fd4\u56de false\u3002 fn main () { let rect1 = Rectangle { width : 30 , height : 50 , }; let rect2 = Rectangle { width : 10 , height : 40 , }; let rect3 = Rectangle { width : 60 , height : 45 , }; println! ( \"\u77e9\u5f62rect1\u53ef\u4ee5\u5305\u542brect2: {}\" , rect1 . can_hold ( & rect2 )); println! ( \"\u77e9\u5f62rect2\u53ef\u4ee5\u5305\u542brect3: {}\" , rect2 . can_hold ( & rect3 )); } \u540c\u65f6\u5e0c\u671b\u770b\u5230\u5982\u4e0b\u8f93\u51fa\uff0c\u56e0\u4e3a rect2 \u7684\u4e24\u4e2a\u7ef4\u5ea6\u90fd\u5c0f\u4e8e rect1\uff0c\u800c rect3 \u6bd4 rect1 \u8981\u5bbd\uff1a \u77e9\u5f62rect1\u53ef\u4ee5\u5305\u542brect2: true \u77e9\u5f62rect2\u53ef\u4ee5\u5305\u542brect3: false impl Rectangle { fn width ( & self ) -> bool { self . width > 0 } fn area ( & self ) -> u32 { self . width * self . height } // \u5e0c\u671b main \u4fdd\u6301 other \u7684\u6240\u6709\u6743\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u5728\u8c03\u7528\u8fd9\u4e2a\u65b9\u6cd5\u540e\u7ee7\u7eed\u4f7f\u7528\u5b83\u3002 // can_hold \u7684\u8fd4\u56de\u503c\u662f\u4e00\u4e2a\u5e03\u5c14\u503c\uff0c\u5176\u5b9e\u73b0\u4f1a\u5206\u522b\u68c0\u67e5 self \u7684\u5bbd\u9ad8\u662f\u5426\u90fd\u5927\u4e8e\u53e6\u4e00\u4e2a Rectangle\u3002 fn can_hold ( & self , other : & Rectangle ) -> bool { self . width > other . width && self . height > other . height } } \u5173\u8054\u51fd\u6570 \u6240\u6709\u5728 impl \u5757\u4e2d\u5b9a\u4e49\u7684\u51fd\u6570\u88ab\u79f0\u4e3a \u5173\u8054\u51fd\u6570 \uff08associated functions\uff09\uff0c\u56e0\u4e3a\u5b83\u4eec\u4e0e impl \u540e\u9762\u547d\u540d\u7684\u7c7b\u578b\u76f8\u5173\u3002 \u53ef\u4ee5\u5b9a\u4e49\u4e0d\u4ee5 self \u4e3a\u7b2c\u4e00\u53c2\u6570\u7684\u5173\u8054\u51fd\u6570\uff08\u56e0\u6b64\u4e0d\u662f\u65b9\u6cd5\uff09\uff0c\u56e0\u4e3a\u5b83\u4eec\u5e76\u4e0d\u4f5c\u7528\u4e8e\u4e00\u4e2a\u7ed3\u6784\u4f53\u7684\u5b9e\u4f8b\u3002\u6211\u4eec\u5df2\u7ecf\u4f7f\u7528\u4e86\u4e00\u4e2a\u8fd9\u6837\u7684\u51fd\u6570\uff1a \u5728 String \u7c7b\u578b\u4e0a\u5b9a\u4e49\u7684 String::from \u51fd\u6570 \u3002 \u4e0d\u662f\u65b9\u6cd5\u7684\u5173\u8054\u51fd\u6570\u7ecf\u5e38\u88ab\u7528\u4f5c\u8fd4\u56de\u4e00\u4e2a\u7ed3\u6784\u4f53\u65b0\u5b9e\u4f8b\u7684\u6784\u9020\u51fd\u6570 \u3002\u8fd9\u4e9b\u51fd\u6570\u7684\u540d\u79f0\u901a\u5e38\u4e3a new \uff0c\u4f46 new \u5e76\u4e0d\u662f\u4e00\u4e2a\u5173\u952e\u5b57\u3002 \u4f8b\u5982\u6211\u4eec\u53ef\u4ee5\u63d0\u4f9b\u4e00\u4e2a\u53eb\u505a square \u5173\u8054\u51fd\u6570\uff0c\u5b83\u63a5\u53d7\u4e00\u4e2a\u7ef4\u5ea6\u53c2\u6570\u5e76\u4e14\u540c\u65f6\u4f5c\u4e3a\u5bbd\u548c\u9ad8\uff0c\u8fd9\u6837\u53ef\u4ee5\u66f4\u8f7b\u677e\u7684\u521b\u5efa\u4e00\u4e2a\u6b63\u65b9\u5f62 Rectangle \u800c\u4e0d\u5fc5\u6307\u5b9a\u4e24\u6b21\u540c\u6837\u7684\u503c\uff1a impl Rectangle { // \u521b\u5efa\u4e00\u4e2a\u6b63\u65b9\u5f62\u7684\u5173\u8054\u51fd\u6570\uff0c\u4e0d\u662f\u65b9\u6cd5\uff01\uff01\uff01 // \u5173\u952e\u5b57 Self \u5728\u51fd\u6570\u7684\u8fd4\u56de\u7c7b\u578b\u4e2d\u4ee3\u6307\u5728 impl \u5173\u952e\u5b57\u540e\u51fa\u73b0\u7684\u7c7b\u578b\uff0c\u5728\u8fd9\u91cc\u662f Rectangle fn square ( size : u32 ) -> Self { Self { width : size , height : size , } } } \u4f7f\u7528\u7ed3\u6784\u4f53\u540d\u548c :: \u8bed\u6cd5\u6765\u8c03\u7528\u8fd9\u4e2a\u5173\u8054\u51fd\u6570\uff1a\u6bd4\u5982 let sq = Rectangle::square(3); \u3002 \u8fd9\u4e2a\u51fd\u6570\u4f4d\u4e8e\u7ed3\u6784\u4f53\u7684\u547d\u540d\u7a7a\u95f4\u4e2d\uff1a :: \u8bed\u6cd5\u7528\u4e8e \u5173\u8054\u51fd\u6570 \u548c \u6a21\u5757\u521b\u5efa\u7684\u547d\u540d\u7a7a\u95f4 \u3002 \u7b2c\u4e03\u7ae0 \u4f1a\u8bb2\u5230\u6a21\u5757\u3002 \u591a\u4e2a impl \u5757 \u6bcf\u4e2a\u7ed3\u6784\u4f53\u90fd\u5141\u8bb8\u62e5\u6709\u591a\u4e2a impl \u5757\u3002\u4f8b\u5982\uff0c\u4e0b\u9762\u793a\u4f8b\u4e2d\u7684\u4ee3\u7801\u7b49\u540c\u4e8e\u4e0a\u9762\u793a\u4f8b\u4e2d\u4ee3\u7801\uff0c\u4f46\u6bcf\u4e2a\u65b9\u6cd5\u6709\u5176\u81ea\u5df1\u7684 impl \u5757\u3002 impl Rectangle { fn area ( & self ) -> u32 { self . width * self . height } } impl Rectangle { fn can_hold ( & self , other : & Rectangle ) -> bool { self . width > other . width && self . height > other . height } } \u8fd9\u91cc\u6ca1\u6709\u7406\u7531\u5c06\u8fd9\u4e9b\u65b9\u6cd5\u5206\u6563\u5728\u591a\u4e2a impl \u5757\u4e2d\uff0c\u4e0d\u8fc7\u8fd9\u662f\u6709\u6548\u7684\u8bed\u6cd5\u3002 \u7b2c\u5341\u7ae0 \u8ba8\u8bba\u6cdb\u578b\u548c trait \u65f6\u4f1a\u770b\u5230\u5b9e\u7528\u7684\u591a impl \u5757\u7684\u7528\u4f8b\u3002 \u603b\u7ed3 \u7ed3\u6784\u4f53\u8ba9\u4f60\u53ef\u4ee5\u521b\u5efa\u51fa\u5728\u4f60\u7684\u9886\u57df\u4e2d\u6709\u610f\u4e49\u7684\u81ea\u5b9a\u4e49\u7c7b\u578b \u3002 \u901a\u8fc7\u7ed3\u6784\u4f53\uff0c\u6211\u4eec\u53ef\u4ee5 \u5c06\u76f8\u5173\u8054\u7684\u6570\u636e\u7247\u6bb5\u8054\u7cfb\u8d77\u6765\u5e76\u547d\u540d\u5b83\u4eec\uff0c\u8fd9\u6837\u53ef\u4ee5\u4f7f\u5f97\u4ee3\u7801\u66f4\u52a0\u6e05\u6670 \u3002 \u5728 impl \u5757\u4e2d\uff0c\u4f60\u53ef\u4ee5\u5b9a\u4e49\u4e0e\u4f60\u7684\u7c7b\u578b\u76f8\u5173\u8054\u7684\u51fd\u6570\uff0c\u800c\u65b9\u6cd5\u662f\u4e00\u79cd\u76f8\u5173\u8054\u7684\u51fd\u6570\uff0c\u8ba9\u4f60\u6307\u5b9a\u7ed3\u6784\u4f53\u7684 \u5b9e\u4f8b \u6240\u5177\u6709\u7684\u884c\u4e3a\u3002 \u4f46\u7ed3\u6784\u4f53\u5e76\u4e0d\u662f\u521b\u5efa\u81ea\u5b9a\u4e49\u7c7b\u578b\u7684\u552f\u4e00\u65b9\u6cd5\uff1a Rust \u7684\u679a\u4e3e\u529f\u80fd\u4e5f\u53ef\u4ee5\uff01","title":"\u7ed3\u6784\u4f53"},{"location":"struct/#_1","text":"struct \uff0c\u6216\u8005 structure \uff0c\u662f\u4e00\u4e2a\u81ea\u5b9a\u4e49\u6570\u636e\u7c7b\u578b\uff0c\u5141\u8bb8\u4f60\u5305\u88c5\u548c\u547d\u540d\u591a\u4e2a\u76f8\u5173\u7684\u503c\uff0c\u4ece\u800c\u5f62\u6210\u4e00\u4e2a\u6709\u610f\u4e49\u7684\u7ec4\u5408\u3002","title":"\u7ed3\u6784\u4f53"},{"location":"struct/#_2","text":"\u548c\u5143\u7ec4\u4e00\u6837\uff0c\u7ed3\u6784\u4f53\u7684\u6bcf\u4e00\u90e8\u5206\u53ef\u4ee5\u662f\u4e0d\u540c\u7c7b\u578b\u3002\u4f46\u4e0d\u540c\u4e8e\u5143\u7ec4\uff0c \u7ed3\u6784\u4f53\u9700\u8981\u547d\u540d\u5404\u90e8\u5206\u6570\u636e\u4ee5\u4fbf\u80fd\u6e05\u695a\u7684\u8868\u660e\u5176\u503c\u7684\u610f\u4e49 \u3002\u7531\u4e8e\u6709\u4e86\u8fd9\u4e9b\u540d\u5b57\uff0c\u7ed3\u6784\u4f53\u6bd4\u5143\u7ec4\u66f4\u7075\u6d3b\uff1a \u4e0d\u9700\u8981\u4f9d\u8d56\u987a\u5e8f\u6765\u6307\u5b9a\u6216\u8bbf\u95ee\u5b9e\u4f8b\u4e2d\u7684\u503c \u3002 \u5b9a\u4e49\u7ed3\u6784\u4f53\uff0c\u9700\u8981\u4f7f\u7528 struct \u5173\u952e\u5b57\u5e76\u4e3a\u6574\u4e2a\u7ed3\u6784\u4f53\u63d0\u4f9b\u4e00\u4e2a\u540d\u5b57\u3002\u7ed3\u6784\u4f53\u7684\u540d\u5b57\u9700\u8981\u63cf\u8ff0\u5b83\u6240\u7ec4\u5408\u7684\u6570\u636e\u7684\u610f\u4e49\u3002\u63a5\u7740\uff0c\u5728\u5927\u62ec\u53f7\u4e2d\uff0c\u5b9a\u4e49\u6bcf\u4e00\u90e8\u5206\u6570\u636e\u7684\u540d\u5b57\u548c\u7c7b\u578b\uff0c\u79f0\u4e3a \u5b57\u6bb5 \uff08field\uff09\u3002 struct User { active : bool , username : String , email : String , sign_in_count : u64 , } \u4e00\u65e6\u5b9a\u4e49\u4e86\u7ed3\u6784\u4f53\u540e\uff0c\u4e3a\u4e86\u4f7f\u7528\u5b83\uff0c\u901a\u8fc7\u4e3a\u6bcf\u4e2a\u5b57\u6bb5\u6307\u5b9a\u5177\u4f53\u503c\u6765\u521b\u5efa\u8fd9\u4e2a\u7ed3\u6784\u4f53\u7684 \u5b9e\u4f8b \u3002\u521b\u5efa\u4e00\u4e2a\u5b9e\u4f8b\u9700\u8981\u4ee5\u7ed3\u6784\u4f53\u7684\u540d\u5b57\u5f00\u5934\uff0c\u63a5\u7740\u5728\u5927\u62ec\u53f7\u4e2d\u4f7f\u7528 key: value \u952e-\u503c\u5bf9\u7684\u5f62\u5f0f\u63d0\u4f9b\u5b57\u6bb5\uff0c\u5176\u4e2d key \u662f\u5b57\u6bb5\u7684\u540d\u5b57\uff0c value \u662f\u9700\u8981\u5b58\u50a8\u5728\u5b57\u6bb5\u4e2d\u7684\u6570\u636e\u503c\u3002 \u5b9e\u4f8b\u4e2d\u5b57\u6bb5\u7684\u987a\u5e8f \u4e0d\u9700\u8981 \u548c\u5b83\u4eec\u5728\u7ed3\u6784\u4f53\u4e2d\u58f0\u660e\u7684\u987a\u5e8f\u4e00\u81f4\u3002 \u4e3a\u4e86\u4ece\u7ed3\u6784\u4f53\u4e2d\u83b7\u53d6\u67d0\u4e2a\u7279\u5b9a\u7684\u503c\uff0c\u53ef\u4ee5\u4f7f\u7528\u70b9\u53f7\u3002 fn main () { // \u5b9e\u4f8b\u5316\u4e00\u4e2a\u7ed3\u6784\u4f53\uff0c\u5176\u4e2d\u5b57\u6bb5\u987a\u5e8f\u4e0d\u9700\u8981\u548c\u5b9a\u4e49\u65f6\u7684\u4e00\u76f4\u3002 let user1 = User { email : String :: from ( \"someone@example.com\" ), username : String :: from ( \"someusername123\" ), active : true , sign_in_count : 1 , }; // \u4f7f\u7528\u70b9\u53f7\u83b7\u53d6\u7ed3\u6784\u4f53\u4e2d\u7684\u67d0\u4e2a\u7279\u5b9a\u7684\u503c user1 . email = String :: from ( \"anotheremail@example.com\" ); } \u6ce8\u610f\u6574\u4e2a\u5b9e\u4f8b\u5fc5\u987b\u662f\u53ef\u53d8\u7684\uff1bRust \u5e76 \u4e0d\u5141\u8bb8 \u53ea\u5c06\u67d0\u4e2a\u5b57\u6bb5\u6807\u8bb0\u4e3a\u53ef\u53d8\u3002 \u53e6\u5916\u9700\u8981\u6ce8\u610f\u540c\u5176\u4ed6\u4efb\u4f55\u8868\u8fbe\u5f0f\u4e00\u6837\uff0c\u53ef\u4ee5\u5728\u51fd\u6570\u4f53\u7684\u6700\u540e\u4e00\u4e2a\u8868\u8fbe\u5f0f\u4e2d\u6784\u9020\u4e00\u4e2a\u7ed3\u6784\u4f53\u7684\u65b0\u5b9e\u4f8b\uff0c\u6765\u9690\u5f0f\u5730\u8fd4\u56de\u8fd9\u4e2a\u5b9e\u4f8b\u3002 // \u521b\u5efa\u4e00\u4e2a\u7ed3\u6784\u4f53\u7684\u5b9e\u4f8b\u5e76\u8fd4\u56de\uff0c // \u6709\u70b9\u7c7b\u4f3c\u4e8e\u5176\u4ed6\u8bed\u8a00\u4e2d\u7684\u521d\u59cb\u5316\u4e00\u4e2a\u7ed3\u6784\u4f53\u3002 fn build_user ( email : String , username : String ) -> User { User { email : email , username : username , active : true , // \u9ed8\u8ba4\u503c\u4e3atrue sign_in_count : 1 , // \u9ed8\u8ba4\u503c\u4e3a1 } }","title":"\u5b9a\u4e49\u548c\u5b9e\u4f8b\u5316"},{"location":"struct/#_3","text":"\u56e0\u4e3a\u793a\u4f8b\u4e2d\u7684\u53c2\u6570\u540d\u4e0e\u5b57\u6bb5\u540d\u90fd\u5b8c\u5168\u76f8\u540c\uff0c\u5219\u53ef\u4ee5\u4f7f\u7528 \u5b57\u6bb5\u521d\u59cb\u5316\u7b80\u5199\u8bed\u6cd5 \uff08field init shorthand\uff09\u6765\u91cd\u5199 build_user \uff0c\u8fd9\u6837\u5176\u884c\u4e3a\u4e0e\u4e4b\u524d\u5b8c\u5168\u76f8\u540c\uff0c\u4e0d\u8fc7\u65e0\u9700\u91cd\u590d email \u548c username . fn build_user ( email : String , username : String ) -> User { User { email , // \u5b57\u6bb5\u521d\u59cb\u5316\u7b80\u5199\u8bed\u6cd5 username , // \u5b57\u6bb5\u521d\u59cb\u5316\u7b80\u5199\u8bed\u6cd5 active : true , sign_in_count : 1 , } }","title":"\u5b57\u6bb5\u521d\u59cb\u5316\u7b80\u5199"},{"location":"struct/#_4","text":"\u4f7f\u7528\u65e7\u5b9e\u4f8b\u7684\u5927\u90e8\u5206\u503c\u4f46\u6539\u53d8\u5176\u90e8\u5206\u503c\u6765\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u7ed3\u6784\u4f53\u5b9e\u4f8b\u901a\u5e38\u662f\u5f88\u6709\u7528\u7684\u3002\u8fd9\u53ef\u4ee5\u901a\u8fc7 \u7ed3\u6784\u4f53\u66f4\u65b0\u8bed\u6cd5 \uff08struct update syntax\uff09\u5b9e\u73b0\u3002 fn main () { // --snip-- let user2 = User { active : user1 . active , // \u4ece\u53e6\u4e00\u4e2a\u7ed3\u6784\u4f53\u7684\u5b57\u6bb5\u503c\u6765\u521d\u59cb\u5316 username : user1 . username , // \u4ece\u53e6\u4e00\u4e2a\u7ed3\u6784\u4f53\u7684\u5b57\u6bb5\u503c\u6765\u521d\u59cb\u5316 email : String :: from ( \"another@example.com\" ), sign_in_count : user1 . sign_in_count , }; } \u540c\u65f6\uff0c\u53ef\u4ee5\u4f7f\u7528 .. \u8bed\u6cd5\u6307\u5b9a\u4e86\u5269\u4f59\u672a\u663e\u5f0f\u8bbe\u7f6e\u503c\u7684\u5b57\u6bb5\u5e94\u6709\u4e0e\u7ed9\u5b9a\u5b9e\u4f8b\u5bf9\u5e94\u5b57\u6bb5\u76f8\u540c\u7684\u503c\u3002 fn main () { // --snip-- let user2 = User { // \u53ef\u4ee5\u9009\u62e9\u4ee5\u4efb\u4f55\u987a\u5e8f\u4e3a\u4efb\u610f\u5b57\u6bb5\u6307\u5b9a\u503c\uff0c\u800c\u4e0d\u7528\u8003\u8651\u7ed3\u6784\u4f53\u5b9a\u4e49\u4e2d\u5b57\u6bb5\u7684\u987a\u5e8f\u3002 email : String :: from ( \"another@example.com\" ), .. user1 // ..\u8bed\u6cd5\u6307\u5b9a\u5269\u4f59\u672a\u663e\u5f0f\u8bbe\u7f6e\u503c\u7684\u5b57\u6bb5 // ..user1 \u5fc5\u987b\u653e\u5728\u6700\u540e\uff0c\u4ee5\u6307\u5b9a\u5176\u4f59\u7684\u5b57\u6bb5\u5e94\u4ece user1 \u7684\u76f8\u5e94\u5b57\u6bb5\u4e2d\u83b7\u53d6\u5176\u503c }; } \u6ce8\u610f \u7ed3\u6784\u66f4\u65b0\u8bed\u6cd5\u5c31\u50cf\u5e26\u6709 = \u7684\u8d4b\u503c\uff0c\u56e0\u4e3a\u5b83\u79fb\u52a8\u4e86\u6570\u636e\uff0c\u5c31\u50cf\u5728\u201c \u53d8\u91cf\u4e0e\u6570\u636e\u4ea4\u4e92\u7684\u65b9\u5f0f\uff08\u4e00\uff09\uff1a\u79fb\u52a8 \u201d\u90e8\u5206\u8bb2\u5230\u7684\u4e00\u6837\u3002 \u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u5728\u521b\u5efa user2 \u540e\u4e0d\u80fd\u518d\u4f7f\u7528 user1 \uff0c\u56e0\u4e3a user1 \u7684 username \u5b57\u6bb5\u4e2d\u7684 String \u88ab\u79fb\u5230 user2 \u4e2d\u3002 \u5982\u679c\u6211\u4eec\u7ed9 user2 \u7684 email \u548c username \u90fd\u8d4b\u4e88\u65b0\u7684 String \u503c\uff0c\u4ece\u800c\u53ea\u4f7f\u7528 user1 \u7684 active \u548c sign_in_count \u503c\uff0c\u90a3\u4e48 user1 \u5728\u521b\u5efa user2 \u540e\u4ecd\u7136\u6709\u6548\u3002 active \u548c sign_in_count \u7684\u7c7b\u578b\u662f\u5b9e\u73b0 Copy trait \u7684\u7c7b\u578b\uff0c\u6240\u4ee5\u5728\u201c \u53d8\u91cf\u4e0e\u6570\u636e\u4ea4\u4e92\u7684\u65b9\u5f0f\uff08\u4e8c\uff09\uff1a\u514b\u9686 \u201d \u90e8\u5206\u8ba8\u8bba\u7684\u884c\u4e3a\u540c\u6837\u9002\u7528\u3002","title":"\u4ece\u5176\u4ed6\u5b9e\u4f8b\u521b\u5efa\u5b9e\u4f8b"},{"location":"struct/#_5","text":"\u5b9a\u4e49\u4e0e \u5143\u7ec4 \u7c7b\u4f3c\u7684\u7ed3\u6784\u4f53\uff0c\u79f0\u4e3a \u5143\u7ec4\u7ed3\u6784\u4f53 \uff08tuple structs\uff09\u3002 \u5143\u7ec4\u7ed3\u6784\u4f53\u6709\u7740\u7ed3\u6784\u4f53\u540d\u79f0\u63d0\u4f9b\u7684\u542b\u4e49\uff0c\u4f46\u6ca1\u6709\u5177\u4f53\u7684\u5b57\u6bb5\u540d\uff0c\u53ea\u6709\u5b57\u6bb5\u7684\u7c7b\u578b\u3002 \u5f53\u4f60\u60f3\u7ed9\u6574\u4e2a\u5143\u7ec4\u53d6\u4e00\u4e2a\u540d\u5b57\uff0c\u5e76\u4f7f\u5143\u7ec4\u6210\u4e3a\u4e0e\u5176\u4ed6\u5143\u7ec4\u4e0d\u540c\u7684\u7c7b\u578b\u65f6\uff0c\u5143\u7ec4\u7ed3\u6784\u4f53\u662f\u5f88\u6709\u7528\u7684\uff0c\u8fd9\u65f6\u50cf\u5e38\u89c4\u7ed3\u6784\u4f53\u90a3\u6837\u4e3a\u6bcf\u4e2a\u5b57\u6bb5\u547d\u540d\u5c31\u663e\u5f97\u591a\u4f59\u548c\u5f62\u5f0f\u5316\u4e86\u3002 \u8981\u5b9a\u4e49\u5143\u7ec4\u7ed3\u6784\u4f53\uff0c\u4ee5 struct \u5173\u952e\u5b57\u548c\u7ed3\u6784\u4f53\u540d\u5f00\u5934\u5e76\u540e\u8ddf\u5143\u7ec4\u4e2d\u7684\u7c7b\u578b\u3002 struct Color ( i32 , i32 , i32 ); struct Point ( i32 , i32 , i32 ); fn main () { let black = Color ( 0 , 0 , 0 ); let origin = Point ( 0 , 0 , 0 ); } \u6ce8\u610f black \u548c origin \u503c\u7684\u7c7b\u578b\u4e0d\u540c\uff0c\u56e0\u4e3a\u5b83\u4eec\u662f\u4e0d\u540c\u7684\u5143\u7ec4\u7ed3\u6784\u4f53\u7684\u5b9e\u4f8b\u3002 \u5b9a\u4e49\u7684\u6bcf\u4e00\u4e2a\u7ed3\u6784\u4f53\u6709\u5176\u81ea\u5df1\u7684\u7c7b\u578b\uff0c\u5373\u4f7f\u7ed3\u6784\u4f53\u4e2d\u7684\u5b57\u6bb5\u53ef\u80fd\u6709\u7740\u76f8\u540c\u7684\u7c7b\u578b \u3002 \u4f8b\u5982\uff0c\u4e00\u4e2a\u83b7\u53d6 Color \u7c7b\u578b\u53c2\u6570\u7684\u51fd\u6570\u4e0d\u80fd\u63a5\u53d7 Point \u4f5c\u4e3a\u53c2\u6570\uff0c\u5373\u4fbf\u8fd9\u4e24\u4e2a\u7c7b\u578b\u90fd\u7531\u4e09\u4e2a i32 \u503c\u7ec4\u6210\u3002 \u5728\u5176\u4ed6\u65b9\u9762\uff0c\u5143\u7ec4\u7ed3\u6784\u4f53\u5b9e\u4f8b\u7c7b\u4f3c\u4e8e\u5143\u7ec4\uff0c\u53ef\u4ee5\u5c06\u5b83\u4eec\u89e3\u6784\u4e3a\u5355\u72ec\u7684\u90e8\u5206\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528 . \u540e\u8ddf\u7d22\u5f15\u6765\u8bbf\u95ee\u5355\u72ec\u7684\u503c\u3002","title":"\u5143\u7ec4\u7ed3\u6784\u4f53"},{"location":"struct/#_6","text":"\u4e5f\u53ef\u4ee5\u5b9a\u4e49\u4e00\u4e2a\u6ca1\u6709\u4efb\u4f55\u5b57\u6bb5\u7684\u7ed3\u6784\u4f53\uff01\u5b83\u4eec\u88ab\u79f0\u4e3a \u7c7b\u5355\u5143\u7ed3\u6784\u4f53 \uff08unit-like structs\uff09\u56e0\u4e3a\u5b83\u4eec\u7c7b\u4f3c\u4e8e ()\uff0c\u5373\u201c \u5143\u7ec4\u7c7b\u578b \u201d\u4e00\u8282\u4e2d\u63d0\u5230\u7684 unit \u7c7b\u578b\u3002 \u7c7b\u5355\u5143\u7ed3\u6784\u4f53\u5e38\u5e38\u5728\u60f3\u8981\u5728\u67d0\u4e2a\u7c7b\u578b\u4e0a\u5b9e\u73b0 trait \u4f46\u4e0d\u9700\u8981\u5728\u7c7b\u578b\u4e2d\u5b58\u50a8\u6570\u636e\u7684\u65f6\u5019\u53d1\u6325\u4f5c\u7528\u3002 // \u7c7b\u5355\u5143\u7ed3\u6784\u4f53 struct AlwaysEqual ; // \u4e0d\u9700\u8981\u82b1\u62ec\u53f7\u6216\u5706\u62ec\u53f7\uff01 fn main () { // \u4ee5\u7c7b\u4f3c\u7684\u65b9\u5f0f\u5728 subject \u53d8\u91cf\u4e2d\u83b7\u5f97 AlwaysEqual \u7684\u5b9e\u4f8b let subject = AlwaysEqual ; // \u4f7f\u7528\u5b9a\u4e49\u7684\u540d\u79f0\uff0c\u4e0d\u9700\u8981\u4efb\u4f55\u82b1\u62ec\u53f7\u6216\u5706\u62ec\u53f7\u3002 // \u60f3\u8c61\u4e00\u4e0b\uff0c\u5b9e\u73b0\u8fd9\u4e2a\u7c7b\u578b\u7684\u884c\u4e3a\uff0c\u5373\u6bcf\u4e2a\u5b9e\u4f8b\u59cb\u7ec8\u7b49\u4e8e\u6bcf\u4e00\u4e2a\u5176\u4ed6\u7c7b\u578b\u7684\u5b9e\u4f8b\uff0c\u4e5f\u8bb8\u662f\u4e3a\u4e86\u83b7\u5f97\u4e00\u4e2a\u5df2\u77e5\u7684\u7ed3\u679c\u4ee5\u4fbf\u8fdb\u884c\u6d4b\u8bd5\u3002 } \u7ed3\u6784\u4f53\u6570\u636e\u7684\u6240\u6709\u6743 \u5728\u793a\u4f8b User \u7ed3\u6784\u4f53\u7684\u5b9a\u4e49\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u4e86\u81ea\u8eab\u62e5\u6709\u6240\u6709\u6743\u7684 String \u7c7b\u578b\u800c\u4e0d\u662f &str \u5b57\u7b26\u4e32 slice \u7c7b\u578b\u3002\u8fd9\u662f\u4e00\u4e2a\u6709\u610f\u800c\u4e3a\u4e4b\u7684\u9009\u62e9\uff0c\u56e0\u4e3a\u6211\u4eec\u60f3\u8981\u8fd9\u4e2a\u7ed3\u6784\u4f53\u62e5\u6709\u5b83\u6240\u6709\u7684\u6570\u636e\uff0c\u4e3a\u6b64\u53ea\u8981\u6574\u4e2a\u7ed3\u6784\u4f53\u662f\u6709\u6548\u7684\u8bdd\u5176\u6570\u636e\u4e5f\u662f\u6709\u6548\u7684\u3002 \u53ef\u4ee5\u4f7f\u7ed3\u6784\u4f53\u5b58\u50a8\u88ab\u5176\u4ed6\u5bf9\u8c61\u62e5\u6709\u7684\u6570\u636e\u7684\u5f15\u7528\uff0c\u4e0d\u8fc7\u8fd9\u4e48\u505a\u7684\u8bdd\u9700\u8981\u7528\u4e0a \u751f\u547d\u5468\u671f \uff08lifetimes\uff09\uff0c\u8fd9\u662f\u4e00\u4e2a \u7b2c\u5341\u7ae0 \u4f1a\u8ba8\u8bba\u7684 Rust \u529f\u80fd\u3002 \u751f\u547d\u5468\u671f\u786e\u4fdd\u7ed3\u6784\u4f53\u5f15\u7528\u7684\u6570\u636e\u6709\u6548\u6027\u8ddf\u7ed3\u6784\u4f53\u672c\u8eab\u4fdd\u6301\u4e00\u81f4\u3002\u5982\u679c\u4f60\u5c1d\u8bd5\u5728\u7ed3\u6784\u4f53\u4e2d\u5b58\u50a8\u4e00\u4e2a\u5f15\u7528\u800c\u4e0d\u6307\u5b9a\u751f\u547d\u5468\u671f\u5c06\u662f\u65e0\u6548\u7684\uff0c\u6bd4\u5982\u8fd9\u6837\uff1a struct User { active : bool , username : & str , email : & str , sign_in_count : u64 , } fn main () { let user1 = User { email : \"someone@example.com\" , username : \"someusername123\" , active : true , sign_in_count : 1 , }; } \u7f16\u8bd1\u5668\u4f1a\u62b1\u6028\u5b83\u9700\u8981\u751f\u547d\u5468\u671f\u6807\u8bc6\u7b26\uff1a $ cargo run Compiling structs v0.1.0 ( file:///projects/structs ) error [ E0106 ] : missing lifetime specifier --> src/main.rs:3:15 | 3 | username: & str, | ^ expected named lifetime parameter | help: consider introducing a named lifetime parameter | 1 ~ struct User< 'a> { 2 | active: bool, 3 ~ username: &' a str, | error [ E0106 ] : missing lifetime specifier --> src/main.rs:4:12 | 4 | email: & str, | ^ expected named lifetime parameter | help: consider introducing a named lifetime parameter | 1 ~ struct User< 'a> { 2 | active: bool, 3 | username: &str, 4 ~ email: &' a str, | For more information about this error, try ` rustc --explain E0106 ` . error: could not compile ` structs ` due to 2 previous errors \u7b2c\u5341\u7ae0 \u4f1a\u8bb2\u5230\u5982\u4f55\u4fee\u590d\u8fd9\u4e2a\u95ee\u9898\u4ee5\u4fbf\u5728\u7ed3\u6784\u4f53\u4e2d\u5b58\u50a8\u5f15\u7528\uff0c\u4e0d\u8fc7\u73b0\u5728\uff0c\u4f1a\u4f7f\u7528\u50cf String \u8fd9\u7c7b\u62e5\u6709\u6240\u6709\u6743\u7684\u7c7b\u578b\u6765\u66ff\u4ee3 &str \u8fd9\u6837\u7684\u5f15\u7528\u4ee5\u4fee\u6b63\u8fd9\u4e2a\u9519\u8bef\u3002","title":"\u7c7b\u5355\u5143\u7ed3\u6784\u4f53"},{"location":"struct/#_7","text":"\u4e3a\u4e86\u7406\u89e3\u4f55\u65f6\u4f1a\u9700\u8981\u4f7f\u7528\u7ed3\u6784\u4f53\uff0c\u8fd9\u91cc\u7f16\u5199\u4e00\u4e2a\u8ba1\u7b97\u957f\u65b9\u5f62\u9762\u79ef\u7684\u7a0b\u5e8f\u3002 \u4f7f\u7528 Cargo \u65b0\u5efa\u4e00\u4e2a\u53eb\u505a rectangles \u7684\u4e8c\u8fdb\u5236\u7a0b\u5e8f\uff0c\u5b83\u83b7\u53d6\u4ee5\u50cf\u7d20\u4e3a\u5355\u4f4d\u7684\u957f\u65b9\u5f62\u7684\u5bbd\u5ea6\u548c\u9ad8\u5ea6\uff0c\u5e76\u8ba1\u7b97\u51fa\u957f\u65b9\u5f62\u7684\u9762\u79ef\u3002 fn main () { let width1 = 30 ; let height1 = 50 ; println! ( \"\u77e9\u5f62\u7684\u9762\u79ef\u662f{}\u4e2a\u50cf\u7d20\" , area ( width1 , height1 )) } fn area ( width : u32 , height : u32 ) -> u32 { width * height } \u4fee\u6539\u8fd9\u6bb5\u4ee3\u7801\u6765\u4f7f\u5b83\u7684\u610f\u4e49\u66f4\u52a0\u660e\u786e: // \u51fd\u6570 area \u672c\u5e94\u8be5\u8ba1\u7b97\u4e00\u4e2a\u957f\u65b9\u5f62\u7684\u9762\u79ef\uff0c\u4e0d\u8fc7\u51fd\u6570\u5374\u6709\u4e24\u4e2a\u53c2\u6570\u3002 // \u8fd9\u4e24\u4e2a\u53c2\u6570\u662f\u76f8\u5173\u8054\u7684\uff0c\u4e0d\u8fc7\u7a0b\u5e8f\u672c\u8eab\u5374\u6ca1\u6709\u8868\u73b0\u51fa\u8fd9\u4e00\u70b9\u3002 // \u5c06\u957f\u5ea6\u548c\u5bbd\u5ea6\u7ec4\u5408\u5728\u4e00\u8d77\u5c06\u66f4\u6613\u61c2\u4e5f\u66f4\u6613\u5904\u7406\u3002 fn area ( width : u32 , height : u32 ) -> u32 { // ... }","title":"\u793a\u4f8b\u7a0b\u5e8f"},{"location":"struct/#_8","text":"\u4f7f\u7528\u5143\u7ec4\u7684\u53e6\u4e00\u4e2a\u7a0b\u5e8f\u7248\u672c: fn main () { let rect = ( 30 , 50 ); println! ( \"\u77e9\u5f62\u7684\u9762\u79ef\u662f{}\u4e2a\u50cf\u7d20\" , area ( rect )) } // \u5143\u7ec4\u5e2e\u52a9\u6211\u4eec\u589e\u52a0\u4e86\u4e00\u4e9b\u7ed3\u6784\u6027\uff0c\u5e76\u4e14\u73b0\u5728\u53ea\u9700\u4f20\u4e00\u4e2a\u53c2\u6570\u3002 // \u4e0d\u8fc7\u5728\u53e6\u4e00\u65b9\u9762\uff0c\u8fd9\u4e2a\u7248\u672c\u5374\u6709\u4e00\u70b9\u4e0d\u660e\u786e\u4e86\uff1a\u5143\u7ec4\u5e76\u6ca1\u6709\u7ed9\u51fa\u5143\u7d20\u7684\u540d\u79f0\uff0c\u6240\u4ee5\u8ba1\u7b97\u53d8\u5f97\u66f4\u8d39\u89e3\u4e86\uff0c\u56e0\u4e3a\u4e0d\u5f97\u4e0d\u4f7f\u7528\u7d22\u5f15\u6765\u83b7\u53d6\u5143\u7ec4\u7684\u6bcf\u4e00\u90e8\u5206\uff1a fn area ( dimensions : ( u32 , u32 )) -> u32 { dimensions . 0 * dimensions . 1 }","title":"\u5143\u7ec4\u91cd\u6784"},{"location":"struct/#_9","text":"\u53ef\u4ee5\u4f7f\u7528\u7ed3\u6784\u4f53\u4e3a\u6570\u636e\u547d\u540d\u6765\u4e3a\u5176\u8d4b\u4e88\u610f\u4e49\u3002\u5c06\u6211\u4eec\u6b63\u5728\u4f7f\u7528\u7684\u5143\u7ec4\u8f6c\u6362\u6210\u4e00\u4e2a\u6709\u6574\u4f53\u540d\u79f0\u800c\u4e14\u6bcf\u4e2a\u90e8\u5206\u4e5f\u6709\u5bf9\u5e94\u540d\u5b57\u7684\u7ed3\u6784\u4f53\uff0c // \u5b9a\u4e49\u4e00\u4e2a\u77e9\u5f62\u7684\u7ed3\u6784\u4f53 // \u5728\u5927\u62ec\u53f7\u4e2d\u5b9a\u4e49\u4e86\u5b57\u6bb5 width \u548c height\uff0c\u7c7b\u578b\u90fd\u662f u32\u3002 struct Rectangle { width : u32 , height : u32 , } fn main () { // \u521b\u5efa\u4e86\u4e00\u4e2a\u5177\u4f53\u7684 Rectangle \u5b9e\u4f8b let rect1 = Rectangle { width : 30 , height : 50 , }; println! ( \"\u77e9\u5f62\u7684\u9762\u79ef\u662f{}\u4e2a\u50cf\u7d20\" , area ( & rect1 )); } // \u8ba1\u7b97\u4e00\u4e2a\u77e9\u5f62\u7684\u9762\u79ef // \u88ab\u5b9a\u4e49\u4e3a\u63a5\u6536\u4e00\u4e2a\u540d\u53eb rectangle \u7684\u53c2\u6570\uff0c\u5176\u7c7b\u578b\u662f\u4e00\u4e2a\u7ed3\u6784\u4f53 Rectangle \u5b9e\u4f8b\u7684\u4e0d\u53ef\u53d8\u501f\u7528(\u5f15\u7528)\u3002 // \u501f\u7528\u7ed3\u6784\u4f53\u800c\u4e0d\u662f\u83b7\u53d6\u5b83\u7684\u6240\u6709\u6743\uff0c\u8fd9\u6837 main \u51fd\u6570\u5c31\u53ef\u4ee5\u4fdd\u6301 rect1 \u7684\u6240\u6709\u6743\u5e76\u7ee7\u7eed\u4f7f\u7528\u5b83\uff0c\u6240\u4ee5\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u5728\u51fd\u6570\u7b7e\u540d\u548c\u8c03\u7528\u7684\u5730\u65b9\u4f1a\u6709 &\u3002 fn area ( rectangle : & Rectangle ) -> u32 { // \u8bbf\u95ee Rectangle \u5b9e\u4f8b\u7684 width \u548c height \u5b57\u6bb5 // \u6ce8\u610f\uff0c\u8bbf\u95ee\u5bf9\u7ed3\u6784\u4f53\u7684\u5f15\u7528\u7684\u5b57\u6bb5\u4e0d\u4f1a\u79fb\u52a8\u5b57\u6bb5\u7684\u6240\u6709\u6743, \u6240\u4ee5\u4f1a\u7ecf\u5e38\u770b\u5230\u5bf9\u7ed3\u6784\u4f53\u7684\u5f15\u7528 rectangle . width * rectangle . height } \u4f7f\u7528 Rectangle \u7684 width \u548c height \u5b57\u6bb5\uff0c\u8ba1\u7b97 Rectangle \u7684\u9762\u79ef\u3002\u8fd9\u8868\u660e\u5bbd\u9ad8\u662f\u76f8\u4e92\u8054\u7cfb\u7684\uff0c\u5e76\u4e3a\u8fd9\u4e9b\u503c\u63d0\u4f9b\u4e86\u63cf\u8ff0\u6027\u7684\u540d\u79f0\u800c\u4e0d\u662f\u4f7f\u7528\u5143\u7ec4\u7684\u7d22\u5f15\u503c 0 \u548c 1 \u3002 \u7ed3\u6784\u4f53\u80dc\u5728\u66f4\u6e05\u6670\u660e\u4e86 \u3002","title":"\u7ed3\u6784\u4f53\u91cd\u6784"},{"location":"struct/#trait","text":"\u5728\u8c03\u8bd5\u7a0b\u5e8f\u65f6\u6253\u5370\u51fa Rectangle \u5b9e\u4f8b\u6765\u67e5\u770b\u5176\u6240\u6709\u5b57\u6bb5\u7684\u503c\u975e\u5e38\u6709\u7528\u3002\u5982\u679c\u80fd\u50cf\u524d\u9762\u90a3\u6837\u5c1d\u8bd5\u4f7f\u7528 println! \u5b8f \u5c31\u597d\u4e86\u3002\u4f46\u8fd9\u5e76\u4e0d\u884c\u3002 struct Rectangle { width : u32 , height : u32 , } fn main () { let rect1 = Rectangle { width : 30 , height : 50 , }; println! ( \"\u77e9\u5f62\u662f{}\" , rect1 ); } \u51fa\u73b0\u5e26\u6709\u5982\u4e0b\u6838\u5fc3\u4fe1\u606f\u7684\u9519\u8bef\uff1a error [ E0277 ] : ` Rectangle ` doesn ' t implement ` std::fmt::Display ` println! \u5b8f \u80fd\u5904\u7406\u5f88\u591a\u7c7b\u578b\u7684\u683c\u5f0f\uff0c\u4e0d\u8fc7\uff0c {} \u9ed8\u8ba4\u544a\u8bc9 println! \u4f7f\u7528\u88ab\u79f0\u4e3a Display \u7684\u683c\u5f0f\uff1a \u610f\u5728\u63d0\u4f9b\u7ed9\u76f4\u63a5\u7ec8\u7aef\u7528\u6237\u67e5\u770b\u7684\u8f93\u51fa \u3002 \u76ee\u524d\u4e3a\u6b62\u89c1\u8fc7\u7684\u57fa\u672c\u7c7b\u578b\u90fd\u9ed8\u8ba4\u5b9e\u73b0\u4e86 Display \u683c\u5f0f\uff0c\u56e0\u4e3a\u5b83\u5c31\u662f\u5411\u7528\u6237\u5c55\u793a 1 \u6216\u5176\u4ed6\u4efb\u4f55 \u57fa\u672c\u7c7b\u578b \u7684\u552f\u4e00\u65b9\u5f0f\u3002 \u4e0d\u8fc7\u5bf9\u4e8e\u7ed3\u6784\u4f53\uff0c println! \u5e94\u8be5\u7528\u6765\u8f93\u51fa\u7684\u683c\u5f0f\u662f\u4e0d\u660e\u786e\u7684\uff0c\u56e0\u4e3a\u8fd9\u6709\u66f4\u591a\u663e\u793a\u7684\u53ef\u80fd\u6027\uff1a\u662f\u5426\u9700\u8981\u9017\u53f7\uff1f\u9700\u8981\u6253\u5370\u51fa\u5927\u62ec\u53f7\u5417\uff1f\u6240\u6709\u5b57\u6bb5\u90fd\u5e94\u8be5\u663e\u793a\u5417\uff1f \u7531\u4e8e\u8fd9\u79cd\u4e0d\u786e\u5b9a\u6027\uff0cRust \u4e0d\u4f1a\u5c1d\u8bd5\u731c\u6d4b\u6211\u4eec\u7684\u610f\u56fe\uff0c\u6240\u4ee5\u7ed3\u6784\u4f53\u5e76\u6ca1\u6709\u63d0\u4f9b\u4e00\u4e2a Display \u5b9e\u73b0\u6765\u4f7f\u7528 println! \u4e0e {} \u5360\u4f4d\u7b26\u3002 \u5982\u679c\u6211\u4eec\u7ee7\u7eed\u9605\u8bfb\u9519\u8bef\uff0c\u5c06\u4f1a\u53d1\u73b0\u8fd9\u4e2a\u6709\u5e2e\u52a9\u7684\u4fe1\u606f\uff1a help: the trait ` std::fmt::Display ` is not implemented for ` Rectangle ` note: in format strings you may be able to use ` { :? } ` ( or { :#? } for pretty-print ) instead \u73b0\u5728 println! \u5b8f\u8c03\u7528\u770b\u8d77\u6765\u50cf println!(\"rect1 is {:?}\", rect1); \u8fd9\u6837\u3002\u5728 {} \u4e2d\u52a0\u5165 :? \u6307\u793a\u7b26\u544a\u8bc9 println! \u6211\u4eec\u60f3\u8981\u4f7f\u7528\u53eb\u505a Debug \u7684\u8f93\u51fa\u683c\u5f0f\u3002 Debug \u662f\u4e00\u4e2a trait \uff0c\u5b83\u5141\u8bb8\u6211\u4eec\u4ee5\u4e00\u79cd\u5bf9\u5f00\u53d1\u8005\u6709\u5e2e\u52a9\u7684\u65b9\u5f0f\u6253\u5370\u7ed3\u6784\u4f53\uff0c\u4ee5\u4fbf\u5f53\u6211\u4eec\u8c03\u8bd5\u4ee3\u7801\u65f6\u80fd\u770b\u5230\u5b83\u7684\u503c\u3002 struct Rectangle { width : u32 , height : u32 , } fn main () { let rect1 = Rectangle { width : 30 , height : 50 , }; println! ( \"\u77e9\u5f62\u662f{:?}\" , rect1 ); // \u6dfb\u52a0 :? \u5c1d\u8bd5\u4f7f\u7528Debug\u7684\u8f93\u51fa\u683c\u5f0f } \u8fd9\u6837\u8c03\u6574\u540e\u518d\u6b21\u8fd0\u884c\u7a0b\u5e8f\u3002\u89c1\u9b3c\u4e86\uff01\u4ecd\u7136\u80fd\u770b\u5230\u4e00\u4e2a\u9519\u8bef\uff1a error [ E0277 ] : ` Rectangle ` doesn ' t implement ` Debug ` \u4e0d\u8fc7\u7f16\u8bd1\u5668\u53c8\u4e00\u6b21\u7ed9\u51fa\u4e86\u4e00\u4e2a\u6709\u5e2e\u52a9\u7684\u4fe1\u606f\uff1a help: the trait ` Debug ` is not implemented for ` Rectangle ` note: add ` #[derive(Debug)]` to `Rectangle` or manually `impl Debug for Rectangle`","title":"\u6d3e\u751fTrait"},{"location":"struct/#debug","text":"Rust \u786e\u5b9e \u5305\u542b\u4e86\u6253\u5370\u51fa\u8c03\u8bd5\u4fe1\u606f\u7684\u529f\u80fd\uff0c\u4e0d\u8fc7\u6211\u4eec\u5fc5\u987b\u4e3a\u7ed3\u6784\u4f53 \u663e\u5f0f \u9009\u62e9\u8fd9\u4e2a\u529f\u80fd\u3002\u4e3a\u6b64\uff0c\u5728\u7ed3\u6784\u4f53\u5b9a\u4e49\u4e4b\u524d\u52a0\u4e0a\u5916\u90e8\u5c5e\u6027 #[derive(Debug)] // \u6dfb\u52a0\u6253\u5370\u8c03\u8bd5\u7684\u529f\u80fd #[derive(Debug)] struct Rectangle { width : u32 , height : u32 , } fn main () { let rect1 = Rectangle { width : 30 , height : 50 , }; println! ( \"\u77e9\u5f62\u662f{:?}\" , rect1 ); // \u5c1d\u8bd5\u4f7f\u7528Debug\u7684\u8f93\u51fa\u683c\u5f0f } \u518d\u8fd0\u884c\u8fd9\u4e2a\u7a0b\u5e8f\u65f6\uff0c\u5c31\u4e0d\u4f1a\u6709\u4efb\u4f55\u9519\u8bef\uff0c\u5e76\u4f1a\u51fa\u73b0\u5982\u4e0b\u8f93\u51fa\uff1a $ cargo run Compiling rectangles v0.1.0 ( file:///projects/rectangles ) Finished dev [ unoptimized + debuginfo ] target ( s ) in 0 .48s Running ` target/debug/rectangles ` \u77e9\u5f62\u662fRectangle { width: 30 , height: 50 } \u8fd9\u5e76\u4e0d\u662f\u6700\u6f02\u4eae\u7684\u8f93\u51fa\uff0c\u4e0d\u8fc7\u5b83\u663e\u793a\u8fd9\u4e2a\u5b9e\u4f8b\u7684\u6240\u6709\u5b57\u6bb5\uff0c\u6beb\u65e0\u7591\u95ee\u8fd9\u5bf9\u8c03\u8bd5\u6709\u5e2e\u52a9\u3002 \u5f53\u6211\u4eec\u6709\u4e00\u4e2a\u66f4\u5927\u7684\u7ed3\u6784\u4f53\u65f6\uff0c\u80fd\u6709\u66f4 \u6613\u8bfb \u4e00\u70b9\u7684\u8f93\u51fa\u5c31\u597d\u4e86\uff0c\u4e3a\u6b64\u53ef\u4ee5\u4f7f\u7528 {:#?} \u66ff\u6362 println! \u5b57\u7b26\u4e32\u4e2d\u7684 {:?} \u3002 #[derive(Debug)] struct Rectangle { width : u32 , height : u32 , } fn main () { let rect1 = Rectangle { width : 30 , height : 50 , }; println! ( \"\u77e9\u5f62\u662f{:#?}\" , rect1 ); // \u5c1d\u8bd5\u4f7f\u7528Debug\u7684\u8f93\u51fa\u683c\u5f0f } \u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\u4f7f\u7528 {:#?} \u98ce\u683c\u5c06\u4f1a\u8f93\u51fa\uff1a $ cargo run Compiling rectangles v0 . 1.0 ( file : ///projects/rectangles) Finished dev [ unoptimized + debuginfo ] target ( s ) in 0.48 s Running ` target / debug / rectangles ` \u77e9\u5f62\u662f Rectangle { width : 30 , height : 50 , }","title":"Debug\u8f93\u51fa\u7ed3\u6784\u4f53"},{"location":"struct/#dbg","text":"\u53e6\u4e00\u79cd\u4f7f\u7528 Debug \u683c\u5f0f\u6253\u5370\u6570\u503c\u7684\u65b9\u6cd5\u662f\u4f7f\u7528 dbg! \u5b8f \u3002 dbg! \u5b8f \u53ef\u4ee5\u63a5\u6536\u4e00\u4e2a \u8868\u8fbe\u5f0f \u7684\u6240\u6709\u6743\uff0c\u6253\u5370\u51fa\u4ee3\u7801\u4e2d\u8c03\u7528 dbg! \u5b8f\u65f6\u6240\u5728\u7684\u6587\u4ef6\u548c\u884c\u53f7\uff0c\u4ee5\u53ca\u8be5\u8868\u8fbe\u5f0f\u7684\u7ed3\u679c\u503c\uff0c\u5e76\u8fd4\u56de\u8be5\u503c\u7684\u6240\u6709\u6743\u3002 \uff08\u4e0e println! \u5b8f\u76f8\u53cd\uff0c\u5176\u63a5\u6536\u7684\u662f\u5f15\u7528\uff09 \u6ce8\u610f \u8c03\u7528 dbg! \u5b8f \u4f1a\u6253\u5370\u5230\u6807\u51c6\u9519\u8bef\u63a7\u5236\u53f0\u6d41\uff08stderr\uff09\uff0c\u4e0e println! \u4e0d\u540c\uff0c\u540e\u8005\u4f1a\u6253\u5370\u5230\u6807\u51c6\u8f93\u51fa\u63a7\u5236\u53f0\u6d41\uff08stdout\uff09\u3002\u6211\u4eec\u5c06\u5728 \u7b2c\u5341\u4e8c\u7ae0 \u201c\u5c06\u9519\u8bef\u4fe1\u606f\u5199\u5165\u6807\u51c6\u9519\u8bef\u800c\u4e0d\u662f\u6807\u51c6\u8f93\u51fa\u201d \u4e00\u8282 \u4e2d\u66f4\u591a\u5730\u8ba8\u8bba stderr \u548c stdout \u3002 #[derive(Debug)] struct Rectangle { width : u32 , height : u32 , } fn main () { let scale = 2 ; let rect1 = Rectangle { // \u53ef\u4ee5\u628a dbg! \u653e\u5728\u8868\u8fbe\u5f0f 30 * scale \u5468\u56f4\uff0c\u56e0\u4e3a dbg! \u4f1a\u8fd4\u56de\u8868\u8fbe\u5f0f\u7684\u503c\u7684\u6240\u6709\u6743\uff0c // \u6240\u4ee5 width \u5b57\u6bb5\u5c06\u83b7\u5f97\u76f8\u540c\u7684\u503c\uff0c\u5c31\u50cf\u6211\u4eec\u5728\u90a3\u91cc\u6ca1\u6709 dbg! \u8c03\u7528\u4e00\u6837\u3002 width : dbg ! ( scale * 30 ), height : 50 , }; // \u4e0d\u5e0c\u671b dbg! \u62e5\u6709 rect1 \u7684\u6240\u6709\u6743\uff0c\u6240\u4ee5\u5728\u8fd9\u91cc\u8c03\u7528 dbg! \u65f6\u4ec5\u4f20\u9012\u4e00\u4e2a\u5f15\u7528\u3002 dbg! ( & rect1 ); } $ cargo run Compiling rectangles v0 . 1.0 ( file : ///projects/rectangles) Finished dev [ unoptimized + debuginfo ] target ( s ) in 0.61 s Running ` target / debug / rectangles ` [ src / main . rs : 10 ] scale * 30 = 60 [ src / main . rs : 14 ] & rect1 = Rectangle { width : 60 , height : 50 , } \u8fd9\u4e2a\u8f93\u51fa\u4f7f\u7528\u4e86\u66f4\u4e3a\u6613\u8bfb\u7684 Debug \u683c\u5f0f\u3002\u5f53\u4f60\u8bd5\u56fe\u5f04\u6e05\u695a\u4f60\u7684\u4ee3\u7801\u5728\u505a\u4ec0\u4e48\u65f6\uff0c dbg! \u5b8f \u53ef\u80fd\u771f\u7684\u5f88\u6709\u5e2e\u52a9!","title":"dbg!\u5b8f"},{"location":"struct/#_10","text":"\u65b9\u6cd5\uff08method\uff09 \u4e0e\u51fd\u6570\u7c7b\u4f3c\uff1a \u5b83\u4eec\u4f7f\u7528 fn \u5173\u952e\u5b57\u548c\u540d\u79f0\u58f0\u660e\uff0c\u53ef\u4ee5\u62e5\u6709\u53c2\u6570\u548c\u8fd4\u56de\u503c\uff0c\u540c\u65f6\u5305\u542b\u5728\u67d0\u5904\u8c03\u7528\u8be5\u65b9\u6cd5\u65f6\u4f1a\u6267\u884c\u7684\u4ee3\u7801 \u3002 \u4e0d\u8fc7\u65b9\u6cd5\u4e0e\u51fd\u6570\u662f\u4e0d\u540c\u7684\uff0c\u56e0\u4e3a\u5b83\u4eec\u5728\u7ed3\u6784\u4f53\u7684\u4e0a\u4e0b\u6587\u4e2d\u88ab\u5b9a\u4e49\uff08\u6216\u8005\u662f \u679a\u4e3e \u6216 trait \u5bf9\u8c61\u7684\u4e0a\u4e0b\u6587\uff09\uff0c\u5e76\u4e14\u5b83\u4eec\u7b2c\u4e00\u4e2a\u53c2\u6570\u603b\u662f self \uff0c\u5b83\u4ee3\u8868\u8c03\u7528\u8be5\u65b9\u6cd5\u7684\u7ed3\u6784\u4f53\u5b9e\u4f8b\u3002","title":"\u65b9\u6cd5"},{"location":"struct/#_11","text":"\u628a\u524d\u9762\u5b9e\u73b0\u7684\u83b7\u53d6\u4e00\u4e2a Rectangle \u5b9e\u4f8b\u4f5c\u4e3a\u53c2\u6570\u7684 area \u51fd\u6570\uff0c\u6539\u5199\u6210\u4e00\u4e2a\u5b9a\u4e49\u4e8e Rectangle \u7ed3\u6784\u4f53\u4e0a\u7684 area \u65b9\u6cd5: #[derive(Debug)] struct Rectangle { width : u32 , height : u32 , } // impl \u662f implementation \u7684\u7f29\u5199 // impl \u5757\u4e2d\u7684\u6240\u6709\u5185\u5bb9\u90fd\u5c06\u4e0e Rectangle \u7c7b\u578b\u76f8\u5173\u8054 impl Rectangle { // \u5b9a\u4e49 \u4e0e Rectangle \u76f8\u5173\u8054\u7684 area\u65b9\u6cd5 // \u4f7f\u7528 &self \u6765\u66ff\u4ee3 rectangle: &Rectangle // &self \u5b9e\u9645\u4e0a\u662f self: &Self \u7684\u7f29\u5199 // \u8fd9\u91cc\u9009\u62e9 `&self` \u7684\u7406\u7531\u8ddf\u5728\u51fd\u6570\u7248\u672c\u4e2d\u4f7f\u7528 `&Rectangle` \u662f\u76f8\u540c\u7684\uff1a\u5e76\u4e0d\u60f3\u83b7\u53d6\u6240\u6709\u6743\uff0c\u53ea\u5e0c\u671b\u80fd\u591f\u8bfb\u53d6\u7ed3\u6784\u4f53\u4e2d\u7684\u6570\u636e\uff0c\u800c\u4e0d\u662f\u5199\u5165\u3002 // \u5982\u679c\u60f3\u8981\u5728\u65b9\u6cd5\u4e2d\u6539\u53d8\u8c03\u7528\u65b9\u6cd5\u7684\u5b9e\u4f8b\uff0c\u9700\u8981\u5c06\u7b2c\u4e00\u4e2a\u53c2\u6570\u6539\u4e3a &mut self\u3002 // \u901a\u8fc7\u4ec5\u4ec5\u4f7f\u7528 self \u4f5c\u4e3a\u7b2c\u4e00\u4e2a\u53c2\u6570\u6765\u4f7f\u65b9\u6cd5\u83b7\u53d6\u5b9e\u4f8b\u7684\u6240\u6709\u6743\u662f\u5f88\u5c11\u89c1\u7684\uff1b\u8fd9\u79cd\u6280\u672f\u901a\u5e38\u7528\u5728\u5f53\u65b9\u6cd5\u5c06 self \u8f6c\u6362\u6210\u522b\u7684\u5b9e\u4f8b\u7684\u65f6\u5019\uff0c\u8fd9\u65f6\u60f3\u8981\u9632\u6b62\u8c03\u7528\u8005\u5728\u8f6c\u6362\u4e4b\u540e\u4f7f\u7528\u539f\u59cb\u7684\u5b9e\u4f8b\u3002 fn area ( & self ) -> u32 { self . width * self . height } } fn main () { let rect1 = Rectangle { width : 30 , height : 50 , }; println! ( \"\u77e9\u5f62\u7684\u9762\u79ef\u662f: {} \u50cf\u7d20\" , rect1 . area ()) // \u8c03\u7528Rectangle\u7684\u5173\u8054\u65b9\u6cd5area } \u5728\u4e00\u4e2a impl \u5757\u4e2d\uff0cSelf \u7c7b\u578b\u662f impl \u5757\u7684\u7c7b\u578b\u7684\u522b\u540d\u3002\u65b9\u6cd5\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u5fc5\u987b\u6709\u4e00\u4e2a\u540d\u4e3a self \u7684Self \u7c7b\u578b\u7684\u53c2\u6570 \uff0c\u6240\u4ee5 Rust \u8ba9\u4f60\u5728\u7b2c\u4e00\u4e2a\u53c2\u6570\u4f4d\u7f6e\u4e0a\u53ea\u7528 self \u8fd9\u4e2a\u540d\u5b57\u6765\u7f29\u5199\u3002 \u6ce8\u610f \u6211\u4eec\u4ecd\u7136\u9700\u8981\u5728 self \u524d\u9762\u4f7f\u7528 & \u6765\u8868\u793a\u8fd9\u4e2a\u65b9\u6cd5\u501f\u7528\u4e86 Self \u5b9e\u4f8b\uff0c\u5c31\u50cf\u6211\u4eec\u5728 rectangle: &Rectangle \u4e2d\u505a\u7684\u90a3\u6837\u3002 \u65b9\u6cd5\u53ef\u4ee5\u9009\u62e9\u83b7\u5f97 self \u7684\u6240\u6709\u6743\uff0c\u6216\u8005\u50cf\u8fd9\u91cc\u4e00\u6837 \u4e0d\u53ef\u53d8\u5730\u501f\u7528 self \uff0c\u6216\u8005 \u53ef\u53d8\u5730\u501f\u7528 self \uff0c\u5c31\u8ddf\u5176\u4ed6\u53c2\u6570\u4e00\u6837\u3002 \u4f7f\u7528 \u65b9\u6cd5 \u66ff\u4ee3 \u51fd\u6570 \uff0c\u9664\u4e86\u53ef\u4f7f\u7528\u65b9\u6cd5\u8bed\u6cd5\u548c\u4e0d\u9700\u8981\u5728\u6bcf\u4e2a\u51fd\u6570\u7b7e\u540d\u4e2d\u91cd\u590d self \u7684\u7c7b\u578b\u4e4b\u5916\uff0c\u5176\u4e3b\u8981\u597d\u5904\u5728\u4e8e\u7ec4\u7ec7\u6027\u3002 \u6211\u4eec\u5c06\u67d0\u4e2a\u7c7b\u578b\u5b9e\u4f8b\u80fd\u505a\u7684\u6240\u6709\u4e8b\u60c5\u90fd\u4e00\u8d77\u653e\u5165 impl \u5757\u4e2d\uff0c\u800c\u4e0d\u662f\u8ba9\u5c06\u6765\u7684\u7528\u6237\u5728\u6211\u4eec\u7684\u5e93\u4e2d\u5230\u5904\u5bfb\u627e Rectangle \u7684\u529f\u80fd\u3002","title":"\u5b9a\u4e49\u65b9\u6cd5"},{"location":"struct/#_12","text":"\u6211\u4eec\u53ef\u4ee5\u9009\u62e9\u5c06\u65b9\u6cd5\u7684\u540d\u79f0\u4e0e\u7ed3\u6784\u4e2d\u7684\u4e00\u4e2a\u5b57\u6bb5\u76f8\u540c\u3002\u4f8b\u5982\uff0c\u6211\u4eec\u53ef\u4ee5\u5728 Rectangle \u4e0a\u5b9a\u4e49\u4e00\u4e2a\u65b9\u6cd5\uff0c\u5e76\u547d\u540d\u4e3a width\uff1a struct Rectangle { width : u32 , height : u32 , } impl Rectangle { fn width ( & self ) -> bool { self . width > 0 } } fn main () { let rect1 = Rectangle { width : 30 , height : 50 , }; println! ( \"\u77e9\u5f62\u7684\u5bbd\u5ea6\u4e0d\u4e3a\u96f6: {}\" , rect1 . width ()) } \u7f16\u7a0b\u65f6 \u53ef\u4ee5\u51fa\u4e8e\u4efb\u4f55\u76ee\u7684\uff0c\u5728\u540c\u540d\u7684\u65b9\u6cd5\u4e2d\u4f7f\u7528\u540c\u540d\u7684\u5b57\u6bb5 \u5728 main \u4e2d\uff0c\u5f53\u6211\u4eec\u5728 rect1.width \u540e\u9762\u52a0\u4e0a\u62ec\u53f7\u65f6\u3002Rust \u77e5\u9053\u6211\u4eec\u6307\u7684\u662f\u65b9\u6cd5 width \u3002\u5f53\u6211\u4eec\u4e0d\u4f7f\u7528\u5706\u62ec\u53f7\u65f6\uff0cRust \u77e5\u9053\u6211\u4eec\u6307\u7684\u662f\u5b57\u6bb5 width \u3002 \u901a\u5e38\uff0c\u4f46\u5e76\u4e0d\u603b\u662f\u5982\u6b64\uff0c\u4e0e\u5b57\u6bb5\u540c\u540d\u7684\u65b9\u6cd5\u5c06\u88ab\u5b9a\u4e49\u4e3a\u53ea\u8fd4\u56de\u5b57\u6bb5\u4e2d\u7684\u503c\uff0c\u800c\u4e0d\u505a\u5176\u4ed6\u4e8b\u60c5\u3002\u8fd9\u6837\u7684\u65b9\u6cd5\u88ab\u79f0\u4e3a getters \uff0c Rust \u5e76\u4e0d\u50cf\u5176\u4ed6\u4e00\u4e9b\u8bed\u8a00\u90a3\u6837\u4e3a\u7ed3\u6784\u5b57\u6bb5\u81ea\u52a8\u5b9e\u73b0\u5b83\u4eec\u3002 Getters \u5f88\u6709\u7528\uff0c\u56e0\u4e3a\u4f60\u53ef\u4ee5\u628a\u5b57\u6bb5\u53d8\u6210\u79c1\u6709\u7684\uff0c\u4f46\u65b9\u6cd5\u662f\u516c\u5171\u7684\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u628a\u5bf9\u5b57\u6bb5\u7684\u53ea\u8bfb\u8bbf\u95ee\u4f5c\u4e3a\u8be5\u7c7b\u578b\u516c\u5171 API \u7684\u4e00\u90e8\u5206\u3002 \u6211\u4eec\u5c06\u5728 \u7b2c\u4e03\u7ae0 \u4e2d\u8ba8\u8bba\u4ec0\u4e48\u662f\u516c\u6709\u548c\u79c1\u6709\uff0c\u4ee5\u53ca\u5982\u4f55\u5c06\u4e00\u4e2a\u5b57\u6bb5\u6216\u65b9\u6cd5\u6307\u5b9a\u4e3a\u516c\u6709\u6216\u79c1\u6709\u3002","title":"\u6ce8\u610f"},{"location":"struct/#_13","text":"\u901a\u8fc7\u5b9e\u73b0 Rectangle \u7ed3\u6784\u4f53\u4e0a\u7684\u53e6\u4e00\u65b9\u6cd5\u6765\u7ec3\u4e60\u4f7f\u7528\u65b9\u6cd5 \u8ba9\u4e00\u4e2a Rectangle \u7684\u5b9e\u4f8b\u83b7\u53d6\u53e6\u4e00\u4e2a Rectangle \u5b9e\u4f8b\uff0c\u5982\u679c self \uff08\u7b2c\u4e00\u4e2a Rectangle \uff09\u80fd\u5b8c\u5168\u5305\u542b\u7b2c\u4e8c\u4e2a\u957f\u65b9\u5f62\u5219\u8fd4\u56de true\uff1b\u5426\u5219\u8fd4\u56de false\u3002 fn main () { let rect1 = Rectangle { width : 30 , height : 50 , }; let rect2 = Rectangle { width : 10 , height : 40 , }; let rect3 = Rectangle { width : 60 , height : 45 , }; println! ( \"\u77e9\u5f62rect1\u53ef\u4ee5\u5305\u542brect2: {}\" , rect1 . can_hold ( & rect2 )); println! ( \"\u77e9\u5f62rect2\u53ef\u4ee5\u5305\u542brect3: {}\" , rect2 . can_hold ( & rect3 )); } \u540c\u65f6\u5e0c\u671b\u770b\u5230\u5982\u4e0b\u8f93\u51fa\uff0c\u56e0\u4e3a rect2 \u7684\u4e24\u4e2a\u7ef4\u5ea6\u90fd\u5c0f\u4e8e rect1\uff0c\u800c rect3 \u6bd4 rect1 \u8981\u5bbd\uff1a \u77e9\u5f62rect1\u53ef\u4ee5\u5305\u542brect2: true \u77e9\u5f62rect2\u53ef\u4ee5\u5305\u542brect3: false impl Rectangle { fn width ( & self ) -> bool { self . width > 0 } fn area ( & self ) -> u32 { self . width * self . height } // \u5e0c\u671b main \u4fdd\u6301 other \u7684\u6240\u6709\u6743\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u5728\u8c03\u7528\u8fd9\u4e2a\u65b9\u6cd5\u540e\u7ee7\u7eed\u4f7f\u7528\u5b83\u3002 // can_hold \u7684\u8fd4\u56de\u503c\u662f\u4e00\u4e2a\u5e03\u5c14\u503c\uff0c\u5176\u5b9e\u73b0\u4f1a\u5206\u522b\u68c0\u67e5 self \u7684\u5bbd\u9ad8\u662f\u5426\u90fd\u5927\u4e8e\u53e6\u4e00\u4e2a Rectangle\u3002 fn can_hold ( & self , other : & Rectangle ) -> bool { self . width > other . width && self . height > other . height } }","title":"\u53c2\u6570\u65b9\u6cd5"},{"location":"struct/#_14","text":"\u6240\u6709\u5728 impl \u5757\u4e2d\u5b9a\u4e49\u7684\u51fd\u6570\u88ab\u79f0\u4e3a \u5173\u8054\u51fd\u6570 \uff08associated functions\uff09\uff0c\u56e0\u4e3a\u5b83\u4eec\u4e0e impl \u540e\u9762\u547d\u540d\u7684\u7c7b\u578b\u76f8\u5173\u3002 \u53ef\u4ee5\u5b9a\u4e49\u4e0d\u4ee5 self \u4e3a\u7b2c\u4e00\u53c2\u6570\u7684\u5173\u8054\u51fd\u6570\uff08\u56e0\u6b64\u4e0d\u662f\u65b9\u6cd5\uff09\uff0c\u56e0\u4e3a\u5b83\u4eec\u5e76\u4e0d\u4f5c\u7528\u4e8e\u4e00\u4e2a\u7ed3\u6784\u4f53\u7684\u5b9e\u4f8b\u3002\u6211\u4eec\u5df2\u7ecf\u4f7f\u7528\u4e86\u4e00\u4e2a\u8fd9\u6837\u7684\u51fd\u6570\uff1a \u5728 String \u7c7b\u578b\u4e0a\u5b9a\u4e49\u7684 String::from \u51fd\u6570 \u3002 \u4e0d\u662f\u65b9\u6cd5\u7684\u5173\u8054\u51fd\u6570\u7ecf\u5e38\u88ab\u7528\u4f5c\u8fd4\u56de\u4e00\u4e2a\u7ed3\u6784\u4f53\u65b0\u5b9e\u4f8b\u7684\u6784\u9020\u51fd\u6570 \u3002\u8fd9\u4e9b\u51fd\u6570\u7684\u540d\u79f0\u901a\u5e38\u4e3a new \uff0c\u4f46 new \u5e76\u4e0d\u662f\u4e00\u4e2a\u5173\u952e\u5b57\u3002 \u4f8b\u5982\u6211\u4eec\u53ef\u4ee5\u63d0\u4f9b\u4e00\u4e2a\u53eb\u505a square \u5173\u8054\u51fd\u6570\uff0c\u5b83\u63a5\u53d7\u4e00\u4e2a\u7ef4\u5ea6\u53c2\u6570\u5e76\u4e14\u540c\u65f6\u4f5c\u4e3a\u5bbd\u548c\u9ad8\uff0c\u8fd9\u6837\u53ef\u4ee5\u66f4\u8f7b\u677e\u7684\u521b\u5efa\u4e00\u4e2a\u6b63\u65b9\u5f62 Rectangle \u800c\u4e0d\u5fc5\u6307\u5b9a\u4e24\u6b21\u540c\u6837\u7684\u503c\uff1a impl Rectangle { // \u521b\u5efa\u4e00\u4e2a\u6b63\u65b9\u5f62\u7684\u5173\u8054\u51fd\u6570\uff0c\u4e0d\u662f\u65b9\u6cd5\uff01\uff01\uff01 // \u5173\u952e\u5b57 Self \u5728\u51fd\u6570\u7684\u8fd4\u56de\u7c7b\u578b\u4e2d\u4ee3\u6307\u5728 impl \u5173\u952e\u5b57\u540e\u51fa\u73b0\u7684\u7c7b\u578b\uff0c\u5728\u8fd9\u91cc\u662f Rectangle fn square ( size : u32 ) -> Self { Self { width : size , height : size , } } } \u4f7f\u7528\u7ed3\u6784\u4f53\u540d\u548c :: \u8bed\u6cd5\u6765\u8c03\u7528\u8fd9\u4e2a\u5173\u8054\u51fd\u6570\uff1a\u6bd4\u5982 let sq = Rectangle::square(3); \u3002 \u8fd9\u4e2a\u51fd\u6570\u4f4d\u4e8e\u7ed3\u6784\u4f53\u7684\u547d\u540d\u7a7a\u95f4\u4e2d\uff1a :: \u8bed\u6cd5\u7528\u4e8e \u5173\u8054\u51fd\u6570 \u548c \u6a21\u5757\u521b\u5efa\u7684\u547d\u540d\u7a7a\u95f4 \u3002 \u7b2c\u4e03\u7ae0 \u4f1a\u8bb2\u5230\u6a21\u5757\u3002","title":"\u5173\u8054\u51fd\u6570"},{"location":"struct/#impl","text":"\u6bcf\u4e2a\u7ed3\u6784\u4f53\u90fd\u5141\u8bb8\u62e5\u6709\u591a\u4e2a impl \u5757\u3002\u4f8b\u5982\uff0c\u4e0b\u9762\u793a\u4f8b\u4e2d\u7684\u4ee3\u7801\u7b49\u540c\u4e8e\u4e0a\u9762\u793a\u4f8b\u4e2d\u4ee3\u7801\uff0c\u4f46\u6bcf\u4e2a\u65b9\u6cd5\u6709\u5176\u81ea\u5df1\u7684 impl \u5757\u3002 impl Rectangle { fn area ( & self ) -> u32 { self . width * self . height } } impl Rectangle { fn can_hold ( & self , other : & Rectangle ) -> bool { self . width > other . width && self . height > other . height } } \u8fd9\u91cc\u6ca1\u6709\u7406\u7531\u5c06\u8fd9\u4e9b\u65b9\u6cd5\u5206\u6563\u5728\u591a\u4e2a impl \u5757\u4e2d\uff0c\u4e0d\u8fc7\u8fd9\u662f\u6709\u6548\u7684\u8bed\u6cd5\u3002 \u7b2c\u5341\u7ae0 \u8ba8\u8bba\u6cdb\u578b\u548c trait \u65f6\u4f1a\u770b\u5230\u5b9e\u7528\u7684\u591a impl \u5757\u7684\u7528\u4f8b\u3002","title":"\u591a\u4e2a impl \u5757"},{"location":"struct/#_15","text":"\u7ed3\u6784\u4f53\u8ba9\u4f60\u53ef\u4ee5\u521b\u5efa\u51fa\u5728\u4f60\u7684\u9886\u57df\u4e2d\u6709\u610f\u4e49\u7684\u81ea\u5b9a\u4e49\u7c7b\u578b \u3002 \u901a\u8fc7\u7ed3\u6784\u4f53\uff0c\u6211\u4eec\u53ef\u4ee5 \u5c06\u76f8\u5173\u8054\u7684\u6570\u636e\u7247\u6bb5\u8054\u7cfb\u8d77\u6765\u5e76\u547d\u540d\u5b83\u4eec\uff0c\u8fd9\u6837\u53ef\u4ee5\u4f7f\u5f97\u4ee3\u7801\u66f4\u52a0\u6e05\u6670 \u3002 \u5728 impl \u5757\u4e2d\uff0c\u4f60\u53ef\u4ee5\u5b9a\u4e49\u4e0e\u4f60\u7684\u7c7b\u578b\u76f8\u5173\u8054\u7684\u51fd\u6570\uff0c\u800c\u65b9\u6cd5\u662f\u4e00\u79cd\u76f8\u5173\u8054\u7684\u51fd\u6570\uff0c\u8ba9\u4f60\u6307\u5b9a\u7ed3\u6784\u4f53\u7684 \u5b9e\u4f8b \u6240\u5177\u6709\u7684\u884c\u4e3a\u3002 \u4f46\u7ed3\u6784\u4f53\u5e76\u4e0d\u662f\u521b\u5efa\u81ea\u5b9a\u4e49\u7c7b\u578b\u7684\u552f\u4e00\u65b9\u6cd5\uff1a Rust \u7684\u679a\u4e3e\u529f\u80fd\u4e5f\u53ef\u4ee5\uff01","title":"\u603b\u7ed3"},{"location":"testing/","text":"\u7f16\u5199\u6d4b\u8bd5 Edsger W. Dijkstra \u5728\u5176 1972 \u5e74\u7684\u6587\u7ae0\u3010\u8c26\u5351\u7684\u7a0b\u5e8f\u5458\u3011\uff08\u201cThe Humble Programmer\u201d\uff09\u4e2d\u8bf4\u5230 \u201c\u8f6f\u4ef6\u6d4b\u8bd5\u53ef\u80fd\u662f\u663e\u793a\u9519\u8bef\u5b58\u5728\u7684\u4e00\u79cd\u975e\u5e38\u6709\u6548\u7684\u65b9\u6cd5\uff0c\u4f46\u5bf9\u4e8e\u663e\u793a\u9519\u8bef\u7684(\u6d4b\u8bd5)\u5b58\u5728\u5374\u8fdc\u8fdc\u4e0d\u591f\u3002\u201d\uff08\u201cProgram testing can be a very effective way to show the presence of bugs, but it is hopelessly inadequate for showing their absence.\u201d\uff09\u8fd9\u5e76\u4e0d\u610f\u5473\u7740\u6211\u4eec\u4e0d\u8be5\u5c3d\u53ef\u80fd\u5730\u6d4b\u8bd5\u8f6f\u4ef6\uff01 \u7a0b\u5e8f\u7684\u6b63\u786e\u6027\u610f\u5473\u7740\u4ee3\u7801\u5982\u6211\u4eec\u671f\u671b\u7684\u90a3\u6837\u8fd0\u884c\u3002Rust \u662f\u4e00\u4e2a\u76f8\u5f53\u6ce8\u91cd\u6b63\u786e\u6027\u7684\u7f16\u7a0b\u8bed\u8a00\uff0c\u4e0d\u8fc7\u6b63\u786e\u6027\u662f\u4e00\u4e2a\u96be\u4ee5\u8bc1\u660e\u7684\u590d\u6742\u4e3b\u9898\u3002Rust \u7684\u7c7b\u578b\u7cfb\u7edf\u5728\u6b64\u95ee\u9898\u4e0a\u4e0b\u4e86\u5f88\u5927\u7684\u529f\u592b\uff0c\u4e0d\u8fc7\u5b83\u4e0d\u53ef\u80fd\u6355\u83b7\u6240\u6709\u79cd\u7c7b\u7684\u9519\u8bef\u3002\u4e3a\u6b64\uff0c Rust \u4e5f\u5728\u8bed\u8a00\u672c\u8eab\u5305\u542b\u4e86\u7f16\u5199\u8f6f\u4ef6\u6d4b\u8bd5\u7684\u652f\u6301\u3002 \u4f8b\u5982\uff0c\u6211\u4eec\u53ef\u4ee5\u7f16\u5199\u4e00\u4e2a\u53eb\u505a add_two \u7684\u51fd\u6570\uff0c\u4f5c\u7528\u662f\u5c06\u4f20\u9012\u7ed9\u5b83\u7684\u503c\u52a0\u4e8c\u7684\u51fd\u6570\u3002\u5b83\u7684\u7b7e\u540d\u6709\u4e00\u4e2a\u6574\u578b\u53c2\u6570\u5e76\u8fd4\u56de\u4e00\u4e2a\u6574\u578b\u503c\u3002\u5f53\u5b9e\u73b0\u548c\u7f16\u8bd1\u8fd9\u4e2a\u51fd\u6570\u65f6\uff0cRust \u4f1a\u8fdb\u884c\u6240\u6709\u76ee\u524d\u6211\u4eec\u5df2\u7ecf\u89c1\u8fc7\u7684\u7c7b\u578b\u68c0\u67e5\u548c\u501f\u7528\u68c0\u67e5\uff0c\u4f8b\u5982\uff0c\u8fd9\u4e9b\u68c0\u67e5\u4f1a\u786e\u4fdd\u6211\u4eec\u4e0d\u4f1a\u4f20\u9012 String \u6216\u65e0\u6548\u7684\u5f15\u7528\u7ed9\u8fd9\u4e2a\u51fd\u6570\u3002Rust \u6240 \u4e0d\u80fd \u68c0\u67e5\u7684\u662f\u8fd9\u4e2a\u51fd\u6570\u662f\u5426\u4f1a\u51c6\u786e\u7684\u5b8c\u6210\u6211\u4eec\u671f\u671b\u7684\u5de5\u4f5c\uff1a\u8fd4\u56de\u53c2\u6570\u52a0\u4e8c\u540e\u7684\u503c\uff0c\u800c\u4e0d\u662f\u6bd4\u5982\u8bf4\u53c2\u6570\u52a0 10 \u6216\u51cf 50 \u7684\u503c\uff01\u8fd9\u4e5f\u5c31\u662f\u6d4b\u8bd5\u51fa\u573a\u7684\u5730\u65b9\u3002 \u6211\u4eec\u53ef\u4ee5\u7f16\u5199\u6d4b\u8bd5\u65ad\u8a00\uff0c\u6bd4\u5982\u8bf4\uff0c\u5f53\u4f20\u9012 3 \u7ed9 add_two \u51fd\u6570\u65f6\uff0c\u8fd4\u56de\u503c\u662f 5 \u3002 \u65e0\u8bba\u4f55\u65f6\u5bf9\u4ee3\u7801\u8fdb\u884c\u4fee\u6539\uff0c\u90fd\u53ef\u4ee5\u8fd0\u884c\u6d4b\u8bd5\u6765\u786e\u4fdd\u4efb\u4f55\u73b0\u5b58\u7684\u6b63\u786e\u884c\u4e3a\u6ca1\u6709\u88ab\u6539\u53d8\u3002 \u6d4b\u8bd5\u662f\u4e00\u9879\u590d\u6742\u7684\u6280\u80fd\uff1a\u867d\u7136\u4e0d\u80fd\u5728\u4e00\u4e2a\u7ae0\u8282\u7684\u7bc7\u5e45\u4e2d\u4ecb\u7ecd\u5982\u4f55\u7f16\u5199\u597d\u7684\u6d4b\u8bd5\u7684\u6bcf\u4e2a\u7ec6\u8282\uff0c\u4f46\u6211\u4eec\u8fd8\u662f\u4f1a\u8ba8\u8bba Rust \u6d4b\u8bd5\u529f\u80fd\u7684\u673a\u5236\u3002\u6211\u4eec\u4f1a\u8bb2\u5230\u7f16\u5199\u6d4b\u8bd5\u65f6\u4f1a\u7528\u5230\u7684\u6ce8\u89e3\u548c\u5b8f\uff0c\u8fd0\u884c\u6d4b\u8bd5\u7684\u9ed8\u8ba4\u884c\u4e3a\u548c\u9009\u9879\uff0c\u4ee5\u53ca\u5982\u4f55\u5c06\u6d4b\u8bd5\u7ec4\u7ec7\u6210\u5355\u5143\u6d4b\u8bd5\u548c\u96c6\u6210\u6d4b\u8bd5\u3002 \u5982\u4f55\u7f16\u5199 Rust \u4e2d\u7684\u6d4b\u8bd5\u51fd\u6570\u662f\u7528\u6765\u9a8c\u8bc1\u975e\u6d4b\u8bd5\u4ee3\u7801\u662f\u5426\u6309\u7167\u671f\u671b\u7684\u65b9\u5f0f\u8fd0\u884c\u7684\u3002\u6d4b\u8bd5\u51fd\u6570\u4f53\u901a\u5e38\u6267\u884c\u5982\u4e0b\u4e09\u79cd\u64cd\u4f5c\uff1a \u8bbe\u7f6e\u4efb\u4f55\u6240\u9700\u7684\u6570\u636e\u6216\u72b6\u6001 \u8fd0\u884c\u9700\u8981\u6d4b\u8bd5\u7684\u4ee3\u7801 \u65ad\u8a00\u5176\u7ed3\u679c\u662f\u6211\u4eec\u6240\u671f\u671b\u7684 Rust \u63d0\u4f9b\u7684\u4e13\u95e8\u7528\u6765\u7f16\u5199\u6d4b\u8bd5\u7684\u529f\u80fd\uff1a test \u5c5e\u6027\u3001\u4e00\u4e9b \u5b8f \u548c should_panic \u5c5e\u6027\u3002 \u6d4b\u8bd5\u51fd\u6570\u5256\u6790 \u4f5c\u4e3a\u6700\u7b80\u5355\u4f8b\u5b50\uff0cRust \u4e2d\u7684\u6d4b\u8bd5\u5c31\u662f\u4e00\u4e2a\u5e26\u6709 test \u5c5e\u6027\u6ce8\u89e3\u7684\u51fd\u6570\u3002 \u5c5e\u6027 \uff08attribute\uff09\u662f\u5173\u4e8e Rust \u4ee3\u7801\u7247\u6bb5\u7684\u5143\u6570\u636e\uff1b\u7b2c\u4e94\u7ae0\u4e2d\u7ed3\u6784\u4f53\u4e2d\u7528\u5230\u7684 derive \u5c5e\u6027\u5c31\u662f\u4e00\u4e2a\u4f8b\u5b50\u3002\u4e3a\u4e86\u5c06\u4e00\u4e2a\u51fd\u6570\u53d8\u6210\u6d4b\u8bd5\u51fd\u6570\uff0c\u9700\u8981\u5728 fn \u884c\u4e4b\u524d\u52a0\u4e0a #[test] \u3002\u5f53\u4f7f\u7528 cargo test \u547d\u4ee4\u8fd0\u884c\u6d4b\u8bd5\u65f6\uff0cRust \u4f1a\u6784\u5efa\u4e00\u4e2a\u6d4b\u8bd5\u6267\u884c\u7a0b\u5e8f\u7528\u6765\u8c03\u7528\u6807\u8bb0\u4e86 test \u5c5e\u6027\u7684\u51fd\u6570\uff0c\u5e76\u62a5\u544a\u6bcf\u4e00\u4e2a\u6d4b\u8bd5\u662f\u901a\u8fc7\u8fd8\u662f\u5931\u8d25\u3002 \u7b2c\u4e03\u7ae0\u5f53\u4f7f\u7528 Cargo \u65b0\u5efa\u4e00\u4e2a\u5e93\u9879\u76ee\u65f6\uff0c\u5b83\u4f1a\u81ea\u52a8\u4e3a\u6211\u4eec\u751f\u6210\u4e00\u4e2a\u6d4b\u8bd5\u6a21\u5757\u548c\u4e00\u4e2a\u6d4b\u8bd5\u51fd\u6570\u3002\u8fd9\u6709\u52a9\u4e8e\u6211\u4eec\u5f00\u59cb\u7f16\u5199\u6d4b\u8bd5\uff0c\u56e0\u4e3a\u8fd9\u6837\u6bcf\u6b21\u5f00\u59cb\u65b0\u9879\u76ee\u65f6\u4e0d\u5fc5\u53bb\u67e5\u627e\u6d4b\u8bd5\u51fd\u6570\u7684\u5177\u4f53\u7ed3\u6784\u548c\u8bed\u6cd5\u4e86\u3002\u5f53\u7136\u4f60\u4e5f\u53ef\u4ee5\u989d\u5916\u589e\u52a0\u4efb\u610f\u591a\u7684\u6d4b\u8bd5\u51fd\u6570\u4ee5\u53ca\u6d4b\u8bd5\u6a21\u5757\uff01 \u6211\u4eec\u4f1a\u901a\u8fc7\u5b9e\u9a8c\u90a3\u4e9b\u81ea\u52a8\u751f\u6210\u7684\u6d4b\u8bd5\u6a21\u7248\u800c\u4e0d\u662f\u5b9e\u9645\u7f16\u5199\u6d4b\u8bd5\u4ee3\u7801\u6765\u63a2\u7d22\u6d4b\u8bd5\u5982\u4f55\u5de5\u4f5c\u7684\u4e00\u4e9b\u65b9\u9762\u3002\u63a5\u7740\uff0c\u6211\u4eec\u4f1a\u5199\u4e00\u4e9b\u771f\u6b63\u7684\u6d4b\u8bd5\uff0c\u8c03\u7528\u6211\u4eec\u7f16\u5199\u7684\u4ee3\u7801\u5e76\u65ad\u8a00\u4ed6\u4eec\u7684\u884c\u4e3a\u7684\u6b63\u786e\u6027\u3002 \u8ba9\u6211\u4eec\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u5e93\u9879\u76ee adder \uff1a $ cargo new adder -- lib Created library ` adder ` project $ cd adder adder \u5e93\u4e2d src/lib.rs \u7684\u5185\u5bb9\u5e94\u8be5\u770b\u8d77\u6765\u5982\u793a\u4f8b\u6240\u793a\uff1a // \u7531 cargo new \u81ea\u52a8\u751f\u6210\u7684\u6d4b\u8bd5\u6a21\u5757\u548c\u51fd\u6570 #[cfg(test)] mod tests { #[test] fn it_works () { assert_eq! ( 2 + 2 , 4 ); } } \u73b0\u5728\u8ba9\u6211\u4eec\u6682\u65f6\u5ffd\u7565 tests \u6a21\u5757\u548c #[cfg(test)] \u6ce8\u89e3\uff0c\u5e76\u53ea\u5173\u6ce8\u51fd\u6570\u6765\u4e86\u89e3\u5176\u5982\u4f55\u5de5\u4f5c\u3002\u6ce8\u610f fn \u884c\u4e4b\u524d\u7684 #[test] \uff1a \u8fd9\u4e2a\u5c5e\u6027\u8868\u660e\u8fd9\u662f\u4e00\u4e2a\u6d4b\u8bd5\u51fd\u6570\uff0c\u8fd9\u6837\u6d4b\u8bd5\u6267\u884c\u8005\u5c31\u77e5\u9053\u5c06\u5176\u4f5c\u4e3a\u6d4b\u8bd5\u5904\u7406 \u3002\u56e0\u4e3a\u4e5f\u53ef\u4ee5\u5728 tests \u6a21\u5757\u4e2d\u62e5\u6709\u975e\u6d4b\u8bd5\u7684\u51fd\u6570\u6765\u5e2e\u52a9\u6211\u4eec\u5efa\u7acb\u901a\u7528\u573a\u666f\u6216\u8fdb\u884c\u5e38\u89c1\u64cd\u4f5c\uff0c\u6240\u4ee5\u9700\u8981\u4f7f\u7528 #[test] \u5c5e\u6027\u6807\u660e\u54ea\u4e9b\u51fd\u6570\u662f\u6d4b\u8bd5\u3002 \u51fd\u6570\u4f53\u901a\u8fc7\u4f7f\u7528 assert_eq! \u5b8f\u6765\u65ad\u8a00 2 \u52a0 2 \u7b49\u4e8e 4 \u3002\u4e00\u4e2a\u5178\u578b\u7684\u6d4b\u8bd5\u7684\u683c\u5f0f\uff0c\u5c31\u662f\u50cf\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\u7684\u65ad\u8a00\u4e00\u6837\u3002\u63a5\u4e0b\u6765\u8fd0\u884c\u5c31\u53ef\u4ee5\u770b\u5230\u6d4b\u8bd5\u901a\u8fc7\u3002 cargo test \u547d\u4ee4\u4f1a\u8fd0\u884c\u9879\u76ee\u4e2d\u6240\u6709\u7684\u6d4b\u8bd5\uff0c\u5982\u793a\u4f8b\u6240\u793a\uff1a # \u8fd0\u884c\u81ea\u52a8\u751f\u6210\u6d4b\u8bd5\u7684\u8f93\u51fa $ cargo test Compiling adder v0.1.0 ( file:///projects/adder ) Finished test [ unoptimized + debuginfo ] target ( s ) in 0 .57s Running unittests ( target/debug/deps/adder-92948b65e88960b4 ) running 1 test test tests::it_works ... ok test result: ok. 1 passed ; 0 failed ; 0 ignored ; 0 measured ; 0 filtered out ; finished in 0 .00s Doc-tests adder running 0 tests test result: ok. 0 passed ; 0 failed ; 0 ignored ; 0 measured ; 0 filtered out ; finished in 0 .00s Cargo \u7f16\u8bd1\u5e76\u8fd0\u884c\u4e86\u6d4b\u8bd5\u3002\u5728 Compiling \u3001 Finished \u548c Running \u8fd9\u51e0\u884c\u4e4b\u540e\uff0c\u53ef\u4ee5\u770b\u5230 running 1 test \u8fd9\u4e00\u884c\u3002 \u4e0b\u4e00\u884c\u663e\u793a\u4e86\u751f\u6210\u7684\u6d4b\u8bd5\u51fd\u6570\u7684\u540d\u79f0\uff0c\u5b83\u662f it_works \uff0c\u4ee5\u53ca\u6d4b\u8bd5\u7684\u8fd0\u884c\u7ed3\u679c\uff0c ok \u3002\u63a5\u7740\u53ef\u4ee5\u770b\u5230\u5168\u4f53\u6d4b\u8bd5\u8fd0\u884c\u7ed3\u679c\u7684\u6458\u8981\uff1a test result: ok . \u610f\u5473\u7740\u6240\u6709\u6d4b\u8bd5\u90fd\u901a\u8fc7\u4e86\u3002 1 passed; 0 failed \u8868\u793a\u901a\u8fc7\u6216\u5931\u8d25\u7684\u6d4b\u8bd5\u6570\u91cf\u3002 \u56e0\u4e3a\u4e4b\u524d\u6211\u4eec\u5e76\u6ca1\u6709\u5c06\u4efb\u4f55\u6d4b\u8bd5\u6807\u8bb0\u4e3a\u5ffd\u7565\uff0c\u6240\u4ee5\u6458\u8981\u4e2d\u4f1a\u663e\u793a 0 ignored \u3002\u6211\u4eec\u4e5f\u6ca1\u6709\u8fc7\u6ee4\u9700\u8981\u8fd0\u884c\u7684\u6d4b\u8bd5\uff0c\u6240\u4ee5\u6458\u8981\u4e2d\u4f1a\u663e\u793a 0 filtered out \u3002\u5728\u4e0b\u4e00\u90e8\u5206 \u201c \u63a7\u5236\u6d4b\u8bd5\u5982\u4f55\u8fd0\u884c \u201d \u4f1a\u8ba8\u8bba\u5ffd\u7565\u548c\u8fc7\u6ee4\u6d4b\u8bd5\u3002 0 measured \u7edf\u8ba1\u662f\u9488\u5bf9\u6027\u80fd\u6d4b\u8bd5\u7684\u3002 \u6027\u80fd\u6d4b\u8bd5 \uff08benchmark tests\uff09\u5728\u7f16\u5199\u672c\u4e66\u65f6\uff0c\u4ecd\u53ea\u80fd\u7528\u4e8e Rust \u5f00\u53d1\u7248\uff08nightly Rust\uff09\u3002\u8bf7\u67e5\u770b \u6027\u80fd\u6d4b\u8bd5\u7684\u6587\u6863 \u4e86\u89e3\u66f4\u591a\u3002 \u6d4b\u8bd5\u8f93\u51fa\u4e2d\u7684\u4ee5 Doc-tests adder \u5f00\u5934\u7684\u8fd9\u4e00\u90e8\u5206\u662f\u6240\u6709\u6587\u6863\u6d4b\u8bd5\u7684\u7ed3\u679c\u3002\u6211\u4eec\u73b0\u5728\u5e76\u6ca1\u6709\u4efb\u4f55\u6587\u6863\u6d4b\u8bd5\uff0c\u4e0d\u8fc7 Rust \u4f1a\u7f16\u8bd1\u4efb\u4f55\u5728 API \u6587\u6863\u4e2d\u7684\u4ee3\u7801\u793a\u4f8b\u3002\u8fd9\u4e2a\u529f\u80fd\u5e2e\u52a9\u6211\u4eec\u4f7f\u6587\u6863\u548c\u4ee3\u7801\u4fdd\u6301\u540c\u6b65\uff01\u5728\u7b2c\u5341\u56db\u7ae0\u7684 \u201c \u6587\u6863\u6ce8\u91ca\u4f5c\u4e3a\u6d4b\u8bd5 \u201d \u90e8\u5206\u4f1a\u8bb2\u5230\u5982\u4f55\u7f16\u5199\u6587\u6863\u6d4b\u8bd5\u3002\u73b0\u5728\u6211\u4eec\u5c06\u5ffd\u7565 Doc-tests \u90e8\u5206\u7684\u8f93\u51fa\u3002 \u8ba9\u6211\u4eec\u6539\u53d8\u6d4b\u8bd5\u7684\u540d\u79f0\u5e76\u770b\u770b\u8fd9\u5982\u4f55\u6539\u53d8\u6d4b\u8bd5\u7684\u8f93\u51fa\u3002\u7ed9 it_works \u51fd\u6570\u8d77\u4e2a\u4e0d\u540c\u7684\u540d\u5b57\uff0c\u6bd4\u5982 exploration \uff0c\u50cf\u8fd9\u6837\uff1a #[cfg(test)] mod tests { #[test] fn exploration () { assert_eq! ( 2 + 2 , 4 ); } } \u5e76\u518d\u6b21\u8fd0\u884c cargo test \u3002\u73b0\u5728\u8f93\u51fa\u4e2d\u5c06\u51fa\u73b0 exploration \u800c\u4e0d\u662f it_works \uff1a $ cargo test Compiling adder v0.1.0 ( file:///projects/adder ) Finished test [ unoptimized + debuginfo ] target ( s ) in 0 .59s Running unittests ( target/debug/deps/adder-92948b65e88960b4 ) running 1 test test tests::exploration ... ok test result: ok. 1 passed ; 0 failed ; 0 ignored ; 0 measured ; 0 filtered out ; finished in 0 .00s Doc-tests adder running 0 tests test result: ok. 0 passed ; 0 failed ; 0 ignored ; 0 measured ; 0 filtered out ; finished in 0 .00s \u8ba9\u6211\u4eec\u589e\u52a0\u53e6\u4e00\u4e2a\u6d4b\u8bd5\uff0c\u4e0d\u8fc7\u8fd9\u4e00\u6b21\u662f\u4e00\u4e2a\u4f1a\u5931\u8d25\u7684\u6d4b\u8bd5\uff01\u5f53\u6d4b\u8bd5\u51fd\u6570\u4e2d\u51fa\u73b0 panic \u65f6\u6d4b\u8bd5\u5c31\u5931\u8d25\u4e86\u3002\u6bcf\u4e00\u4e2a\u6d4b\u8bd5\u90fd\u5728\u4e00\u4e2a\u65b0\u7ebf\u7a0b\u4e2d\u8fd0\u884c\uff0c\u5f53\u4e3b\u7ebf\u7a0b\u53d1\u73b0\u6d4b\u8bd5\u7ebf\u7a0b\u5f02\u5e38\u4e86\uff0c\u5c31\u5c06\u5bf9\u5e94\u6d4b\u8bd5\u6807\u8bb0\u4e3a\u5931\u8d25\u3002\u7b2c\u4e5d\u7ae0\u8bb2\u5230\u4e86\u6700\u7b80\u5355\u7684\u9020\u6210 panic \u7684\u65b9\u6cd5\uff1a\u8c03\u7528 panic! \u5b8f\u3002\u5199\u5165\u65b0\u6d4b\u8bd5 another \u540e\uff0c src/lib.rs \u73b0\u5728\u770b\u8d77\u6765\u5982\u793a\u4f8b\u6240\u793a\uff1a #[cfg(test)] mod tests { #[test] fn exploration () { assert_eq! ( 2 + 2 , 4 ); } #[test] fn another () { panic! ( \"Make this test fail\" ); } } \u518d\u6b21 cargo test \u8fd0\u884c\u6d4b\u8bd5\u3002\u8f93\u51fa\u5e94\u8be5\u770b\u8d77\u6765\u50cf\u793a\u4f8b\uff0c\u5b83\u8868\u660e exploration \u6d4b\u8bd5\u901a\u8fc7\u4e86\u800c another \u5931\u8d25\u4e86\uff1a # \u4e00\u4e2a\u6d4b\u8bd5\u901a\u8fc7\u548c\u4e00\u4e2a\u6d4b\u8bd5\u5931\u8d25\u7684\u6d4b\u8bd5\u7ed3\u679c $ cargo test Compiling adder v0.1.0 ( file:///projects/adder ) Finished test [ unoptimized + debuginfo ] target ( s ) in 0 .72s Running unittests ( target/debug/deps/adder-92948b65e88960b4 ) running 2 tests test tests::another ... FAILED test tests::exploration ... ok failures: ---- tests::another stdout ---- thread 'main' panicked at 'Make this test fail' , src/lib.rs:10:9 note: run with ` RUST_BACKTRACE = 1 ` environment variable to display a backtrace failures: tests::another test result: FAILED. 1 passed ; 1 failed ; 0 ignored ; 0 measured ; 0 filtered out ; finished in 0 .00s error: test failed, to rerun pass '--lib' test tests::another \u8fd9\u4e00\u884c\u662f FAILED \u800c\u4e0d\u662f ok \u4e86\u3002\u5728\u5355\u72ec\u6d4b\u8bd5\u7ed3\u679c\u548c\u6458\u8981\u4e4b\u95f4\u591a\u4e86\u4e24\u4e2a\u65b0\u7684\u90e8\u5206\uff1a\u7b2c\u4e00\u4e2a\u90e8\u5206\u663e\u793a\u4e86\u6d4b\u8bd5\u5931\u8d25\u7684\u8be6\u7ec6\u539f\u56e0\u3002\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c another \u56e0\u4e3a\u5728 src/lib.rs \u7684\u7b2c 10 \u884c panicked at 'Make this test fail' \u800c\u5931\u8d25\u3002\u4e0b\u4e00\u90e8\u5206\u5217\u51fa\u4e86\u6240\u6709\u5931\u8d25\u7684\u6d4b\u8bd5\uff0c\u8fd9\u5728\u6709\u5f88\u591a\u6d4b\u8bd5\u548c\u5f88\u591a\u5931\u8d25\u6d4b\u8bd5\u7684\u8be6\u7ec6\u8f93\u51fa\u65f6\u5f88\u6709\u5e2e\u52a9\u3002\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528\u5931\u8d25\u6d4b\u8bd5\u7684\u540d\u79f0\u6765\u53ea\u8fd0\u884c\u8fd9\u4e2a\u6d4b\u8bd5\uff0c\u4ee5\u4fbf\u8c03\u8bd5\uff1b\u4e0b\u4e00\u90e8\u5206 \u201c\u63a7\u5236\u6d4b\u8bd5\u5982\u4f55\u8fd0\u884c\u201d \u4f1a\u8bb2\u5230\u66f4\u591a\u8fd0\u884c\u6d4b\u8bd5\u7684\u65b9\u6cd5\u3002 \u6700\u540e\u662f\u6458\u8981\u884c\uff1a\u603b\u4f53\u4e0a\u8bb2\uff0c\u6d4b\u8bd5\u7ed3\u679c\u662f FAILED \u3002\u6709\u4e00\u4e2a\u6d4b\u8bd5\u901a\u8fc7\u548c\u4e00\u4e2a\u6d4b\u8bd5\u5931\u8d25\u3002 \u73b0\u5728\u6211\u4eec\u89c1\u8fc7\u4e0d\u540c\u573a\u666f\u4e2d\u6d4b\u8bd5\u7ed3\u679c\u662f\u4ec0\u4e48\u6837\u5b50\u7684\u4e86\uff0c\u518d\u6765\u770b\u770b\u9664 panic! \u4e4b\u5916\u7684\u4e00\u4e9b\u5728\u6d4b\u8bd5\u4e2d\u6709\u5e2e\u52a9\u7684\u5b8f\u5427\u3002 assert!\u5b8f assert! \u5b8f\u7531\u6807\u51c6\u5e93\u63d0\u4f9b\uff0c\u5728\u5e0c\u671b\u786e\u4fdd\u6d4b\u8bd5\u4e2d\u4e00\u4e9b\u6761\u4ef6\u4e3a true \u65f6\u975e\u5e38\u6709\u7528\u3002 \u9700\u8981\u5411 assert! \u5b8f\u63d0\u4f9b\u4e00\u4e2a\u6c42\u503c\u4e3a\u5e03\u5c14\u503c\u7684\u53c2\u6570\u3002 \u5982\u679c\u503c\u662f true \uff0c assert! \u4ec0\u4e48\u4e5f\u4e0d\u505a\uff0c\u540c\u65f6\u6d4b\u8bd5\u4f1a\u901a\u8fc7\u3002 \u5982\u679c\u503c\u4e3a false \uff0c assert! \u8c03\u7528 panic! \u5b8f\uff0c\u8fd9\u4f1a\u5bfc\u81f4\u6d4b\u8bd5\u5931\u8d25\u3002 assert! \u5b8f\u5e2e\u52a9\u6211\u4eec\u68c0\u67e5\u4ee3\u7801\u662f\u5426\u4ee5\u671f\u671b\u7684\u65b9\u5f0f\u8fd0\u884c\u3002 \u56de\u5fc6\u4e00\u4e0b\u7b2c\u4e94\u7ae0\u4e2d\uff0c\u793a\u4f8b\u4e2d\u6709\u4e00\u4e2a Rectangle \u7ed3\u6784\u4f53\u548c\u4e00\u4e2a can_hold \u65b9\u6cd5\uff0c\u5728\u793a\u4f8b\u4e2d\u518d\u6b21\u4f7f\u7528\u4ed6\u4eec\u3002\u5c06\u4ed6\u4eec\u653e\u8fdb src/lib.rs \u5e76\u4f7f\u7528 assert! \u5b8f\u7f16\u5199\u4e00\u4e9b\u6d4b\u8bd5\u3002 // \u7b2c\u4e94\u7ae0\u4e2d Rectangle \u7ed3\u6784\u4f53\u548c\u5176 can_hold \u65b9\u6cd5 #[derive(Debug)] struct Rectangle { width : u32 , height : u32 , } impl Rectangle { fn can_hold ( & self , other : & Rectangle ) -> bool { self . width > other . width && self . height > other . height } } can_hold \u65b9\u6cd5\u8fd4\u56de\u4e00\u4e2a\u5e03\u5c14\u503c\uff0c\u8fd9\u610f\u5473\u7740\u5b83\u5b8c\u7f8e\u7b26\u5408 assert! \u5b8f\u7684\u4f7f\u7528\u573a\u666f\u3002\u5728\u793a\u4f8b\u4e2d\uff0c\u8ba9\u6211\u4eec\u7f16\u5199\u4e00\u4e2a can_hold \u65b9\u6cd5\u7684\u6d4b\u8bd5\u6765\u4f5c\u4e3a\u7ec3\u4e60\uff0c\u8fd9\u91cc\u521b\u5efa\u4e00\u4e2a\u957f\u4e3a 8 \u5bbd\u4e3a 7 \u7684 Rectangle \u5b9e\u4f8b\uff0c\u5e76\u5047\u8bbe\u5b83\u53ef\u4ee5\u653e\u5f97\u4e0b\u53e6\u4e00\u4e2a\u957f\u4e3a 5 \u5bbd\u4e3a 1 \u7684 Rectangle \u5b9e\u4f8b\uff1a #[cfg(test)] mod tests { use super :: * ; // \u5c06\u6d4b\u8bd5\u547d\u540d\u4e3a larger_can_hold_smaller\uff0c #[test] fn larger_can_hold_smaller () { // \u5e76\u521b\u5efa\u6240\u9700\u7684\u4e24\u4e2a Rectangle \u5b9e\u4f8b\u3002 let larger = Rectangle { width : 8 , height : 7 , }; let smaller = Rectangle { width : 5 , height : 1 , }; // \u63a5\u7740\u8c03\u7528 assert! \u5b8f\u5e76\u4f20\u9012 larger.can_hold(&smaller) \u8c03\u7528\u7684\u7ed3\u679c\u4f5c\u4e3a\u53c2\u6570\u3002 // \u8fd9\u4e2a\u8868\u8fbe\u5f0f\u9884\u671f\u4f1a\u8fd4\u56de true\uff0c\u6240\u4ee5\u6d4b\u8bd5\u5e94\u8be5\u901a\u8fc7\u3002 assert! ( larger . can_hold ( & smaller )); } } \u6ce8\u610f\u5728 tests \u6a21\u5757\u4e2d\u65b0\u589e\u52a0\u4e86\u4e00\u884c\uff1a use super::*; \u3002 tests \u662f\u4e00\u4e2a\u666e\u901a\u7684\u6a21\u5757\uff0c\u5b83\u9075\u5faa\u7b2c\u4e03\u7ae0 \u201c \u8def\u5f84\u7528\u4e8e\u5f15\u7528\u6a21\u5757\u6811\u4e2d\u7684\u9879 \u201d \u90e8\u5206\u4ecb\u7ecd\u7684\u53ef\u89c1\u6027\u89c4\u5219\u3002\u56e0\u4e3a\u8fd9\u662f\u4e00\u4e2a\u5185\u90e8\u6a21\u5757\uff0c\u8981\u6d4b\u8bd5\u5916\u90e8\u6a21\u5757\u4e2d\u7684\u4ee3\u7801\uff0c\u9700\u8981\u5c06\u5176\u5f15\u5165\u5230\u5185\u90e8\u6a21\u5757\u7684\u4f5c\u7528\u57df\u4e2d\u3002\u8fd9\u91cc\u9009\u62e9\u4f7f\u7528 glob \u5168\u5c40\u5bfc\u5165\uff0c\u4ee5\u4fbf\u5728 tests \u6a21\u5757\u4e2d\u4f7f\u7528\u6240\u6709\u5728\u5916\u90e8\u6a21\u5757\u5b9a\u4e49\u7684\u5185\u5bb9\u3002 $ cargo test Compiling rectangle v0.1.0 ( file:///projects/rectangle ) Finished test [ unoptimized + debuginfo ] target ( s ) in 0 .66s Running unittests ( target/debug/deps/rectangle-6584c4561e48942e ) running 1 test test tests::larger_can_hold_smaller ... ok test result: ok. 1 passed ; 0 failed ; 0 ignored ; 0 measured ; 0 filtered out ; finished in 0 .00s Doc-tests rectangle running 0 tests test result: ok. 0 passed ; 0 failed ; 0 ignored ; 0 measured ; 0 filtered out ; finished in 0 .00s \u518d\u6765\u589e\u52a0\u53e6\u4e00\u4e2a\u6d4b\u8bd5\uff0c\u8fd9\u4e00\u56de\u65ad\u8a00\u4e00\u4e2a\u66f4\u5c0f\u7684\u77e9\u5f62\u4e0d\u80fd\u653e\u4e0b\u4e00\u4e2a\u66f4\u5927\u7684\u77e9\u5f62\uff1a #[cfg(test)] mod tests { use super :: * ; #[test] fn larger_can_hold_smaller () { // --snip-- } #[test] fn smaller_cannot_hold_larger () { let larger = Rectangle { width : 8 , height : 7 , }; let smaller = Rectangle { width : 5 , height : 1 , }; // \u56e0\u4e3a\u8fd9\u91cc can_hold \u51fd\u6570\u7684\u6b63\u786e\u7ed3\u679c\u662f false \uff0c // \u9700\u8981\u5c06\u8fd9\u4e2a\u7ed3\u679c\u53d6\u53cd\u540e\u4f20\u9012\u7ed9 assert! \u5b8f\u3002 // \u56e0\u6b64 can_hold \u8fd4\u56de false \u65f6\u6d4b\u8bd5\u5c31\u4f1a\u901a\u8fc7\uff1a assert! ( ! smaller . can_hold ( & larger )); } } $ cargo test Compiling rectangle v0.1.0 ( file:///projects/rectangle ) Finished test [ unoptimized + debuginfo ] target ( s ) in 0 .66s Running unittests ( target/debug/deps/rectangle-6584c4561e48942e ) running 2 tests test tests::larger_can_hold_smaller ... ok test tests::smaller_cannot_hold_larger ... ok test result: ok. 2 passed ; 0 failed ; 0 ignored ; 0 measured ; 0 filtered out ; finished in 0 .00s Doc-tests rectangle running 0 tests test result: ok. 0 passed ; 0 failed ; 0 ignored ; 0 measured ; 0 filtered out ; finished in 0 .00s \u4e24\u4e2a\u901a\u8fc7\u7684\u6d4b\u8bd5\uff01\u73b0\u5728\u770b\u770b\u5982\u679c\u5f15\u5165\u4e00\u4e2a bug \u7684\u8bdd\u6d4b\u8bd5\u7ed3\u679c\u4f1a\u53d1\u751f\u4ec0\u4e48\u3002\u5c06 can_hold \u65b9\u6cd5\u4e2d\u6bd4\u8f83\u957f\u5ea6\u65f6\u672c\u5e94\u4f7f\u7528\u5927\u4e8e\u53f7\u7684\u5730\u65b9\u6539\u6210\u5c0f\u4e8e\u53f7\uff1a // --snip-- impl Rectangle { fn can_hold ( & self , other : & Rectangle ) -> bool { self . width < other . width && self . height > other . height } } \u73b0\u5728\u8fd0\u884c\u6d4b\u8bd5\u4f1a\u4ea7\u751f\uff1a $ cargo test Compiling rectangle v0.1.0 ( file:///projects/rectangle ) Finished test [ unoptimized + debuginfo ] target ( s ) in 0 .66s Running unittests ( target/debug/deps/rectangle-6584c4561e48942e ) running 2 tests test tests::larger_can_hold_smaller ... FAILED test tests::smaller_cannot_hold_larger ... ok failures: ---- tests::larger_can_hold_smaller stdout ---- thread 'main' panicked at 'assertion failed: larger.can_hold(&smaller)' , src/lib.rs:28:9 note: run with ` RUST_BACKTRACE = 1 ` environment variable to display a backtrace failures: tests::larger_can_hold_smaller test result: FAILED. 1 passed ; 1 failed ; 0 ignored ; 0 measured ; 0 filtered out ; finished in 0 .00s error: test failed, to rerun pass '--lib' \u6211\u4eec\u7684\u6d4b\u8bd5\u6355\u83b7\u4e86 bug \uff01\u56e0\u4e3a larger.length \u662f 8 \u800c smaller.length \u662f 5\uff0c can_hold \u4e2d\u7684\u957f\u5ea6\u6bd4\u8f83\u73b0\u5728\u56e0\u4e3a 8 \u4e0d\u5c0f\u4e8e 5 \u800c\u8fd4\u56de false \u3002 assert_eq!\u548cassert_ne!\u5b8f \u6d4b\u8bd5\u529f\u80fd\u7684\u4e00\u4e2a\u5e38\u7528\u65b9\u6cd5\u662f\u5c06\u9700\u8981\u6d4b\u8bd5\u4ee3\u7801\u7684\u503c\u4e0e\u671f\u671b\u503c\u505a\u6bd4\u8f83\uff0c\u5e76\u68c0\u67e5\u662f\u5426\u76f8\u7b49\u3002 \u53ef\u4ee5\u901a\u8fc7\u5411 assert! \u5b8f\u4f20\u9012\u4e00\u4e2a\u4f7f\u7528 == \u8fd0\u7b97\u7b26\u7684\u8868\u8fbe\u5f0f\u6765\u505a\u5230\u3002 \u4e0d\u8fc7\u8fd9\u4e2a\u64cd\u4f5c\u5b9e\u5728\u662f\u592a\u5e38\u89c1\u4e86\uff0c\u4ee5\u81f3\u4e8e\u6807\u51c6\u5e93\u63d0\u4f9b\u4e86\u4e00\u5bf9\u5b8f\u6765\u66f4\u65b9\u4fbf\u7684\u5904\u7406\u8fd9\u4e9b\u64cd\u4f5c \u2014\u2014 assert_eq! \u548c assert_ne! \u3002\u8fd9\u4e24\u4e2a\u5b8f\u5206\u522b\u6bd4\u8f83\u4e24\u4e2a\u503c\u662f\u76f8\u7b49\u8fd8\u662f\u4e0d\u76f8\u7b49\u3002 \u5f53\u65ad\u8a00\u5931\u8d25\u65f6\u4ed6\u4eec\u4e5f\u4f1a\u6253\u5370\u51fa\u8fd9\u4e24\u4e2a\u503c\u5177\u4f53\u662f\u4ec0\u4e48\uff0c\u4ee5\u4fbf\u4e8e\u89c2\u5bdf\u6d4b\u8bd5 \u4e3a\u4ec0\u4e48 \u5931\u8d25 \uff0c\u800c assert! \u53ea\u4f1a\u6253\u5370\u51fa\u5b83\u4ece == \u8868\u8fbe\u5f0f\u4e2d\u5f97\u5230\u4e86 false \u503c\uff0c\u800c\u4e0d\u662f\u5bfc\u81f4 false \u7684\u4e24\u4e2a\u503c\u3002 \u4e0b\u9762\u793a\u4f8b\u4e2d\uff0c\u8ba9\u6211\u4eec\u7f16\u5199\u4e00\u4e2a\u5bf9\u5176\u53c2\u6570\u52a0\u4e8c\u5e76\u8fd4\u56de\u7ed3\u679c\u7684\u51fd\u6570 add_two \u3002\u63a5\u7740\u4f7f\u7528 assert_eq! \u5b8f\u6d4b\u8bd5\u8fd9\u4e2a\u51fd\u6570\u3002 pub fn add_two ( a : i32 ) -> i32 { a + 2 } #[cfg(test)] mod tests { use super :: * ; #[test] fn it_adds_two () { // \u6d4b\u8bd5\u901a\u8fc7\u4e86\uff01 assert_eq! ( 4 , add_two ( 2 )); } } $ cargo test Compiling adder v0.1.0 ( file:///projects/adder ) Finished test [ unoptimized + debuginfo ] target ( s ) in 0 .58s Running unittests ( target/debug/deps/adder-92948b65e88960b4 ) running 1 test test tests::it_adds_two ... ok test result: ok. 1 passed ; 0 failed ; 0 ignored ; 0 measured ; 0 filtered out ; finished in 0 .00s Doc-tests adder running 0 tests test result: ok. 0 passed ; 0 failed ; 0 ignored ; 0 measured ; 0 filtered out ; finished in 0 .00s \u4f20\u9012\u7ed9 assert_eq! \u5b8f\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570 4 \uff0c\u7b49\u4e8e\u8c03\u7528 add_two(2) \u7684\u7ed3\u679c\u3002\u6d4b\u8bd5\u4e2d\u7684\u8fd9\u4e00\u884c test tests::it_adds_two ... ok \u4e2d ok \u8868\u660e\u6d4b\u8bd5\u901a\u8fc7\uff01 \u5728\u4ee3\u7801\u4e2d\u5f15\u5165\u4e00\u4e2a bug \u6765\u770b\u770b\u4f7f\u7528 assert_eq! \u7684\u6d4b\u8bd5\u5931\u8d25\u662f\u4ec0\u4e48\u6837\u7684\u3002\u4fee\u6539 add_two \u51fd\u6570\u7684\u5b9e\u73b0\u4f7f\u5176\u52a0 3\uff1a pub fn add_two ( a : i32 ) -> i32 { a + 3 } \u518d\u6b21\u8fd0\u884c\u6d4b\u8bd5\uff1a $ cargo test Compiling adder v0 . 1.0 ( file : ///projects/adder) Finished test [ unoptimized + debuginfo ] target ( s ) in 0.61 s Running unittests ( target / debug / deps / adder - 92948 b65e88960b4 ) running 1 test test tests :: it_adds_two .. . FAILED failures : ---- tests :: it_adds_two stdout ---- thread ' main ' panicked at ' assertion failed : ` ( left == right ) ` left : ` 4 ` , right : ` 5 ` ' , src / lib . rs : 11 : 9 note : run with ` RUST_BACKTRACE = 1 ` environment variable to display a backtrace failures : tests :: it_adds_two test result : FAILED . 0 passed ; 1 failed ; 0 ignored ; 0 measured ; 0 filtered out ; finished in 0.00 s error : test failed , to rerun pass '-- lib ' \u6d4b\u8bd5\u6355\u83b7\u5230\u4e86 bug \uff01 it_adds_two \u6d4b\u8bd5\u5931\u8d25\uff0c\u663e\u793a\u4fe1\u606f assertion failed: `(left == right)` \u5e76\u8868\u660e left \u662f 4 \u800c right \u662f 5\u3002 \u8fd9\u4e2a\u4fe1\u606f\u6709\u52a9\u4e8e\u6211\u4eec\u5f00\u59cb\u8c03\u8bd5\uff1a\u5b83\u8bf4 assert_eq! \u7684 left \u53c2\u6570\u662f 4\uff0c\u800c right \u53c2\u6570\uff0c\u4e5f\u5c31\u662f add_two(2) \u7684\u7ed3\u679c\uff0c\u662f 5\u3002 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5728\u4e00\u4e9b\u8bed\u8a00\u548c\u6d4b\u8bd5\u6846\u67b6\u4e2d\uff0c\u65ad\u8a00\u4e24\u4e2a\u503c\u76f8\u7b49\u7684\u51fd\u6570\u7684\u53c2\u6570\u53eb\u505a expected \u548c actual \uff0c\u800c\u4e14\u6307\u5b9a\u53c2\u6570\u7684\u987a\u5e8f\u662f\u5f88\u5173\u952e\u7684\u3002\u7136\u800c\u5728 Rust \u4e2d\uff0c\u4ed6\u4eec\u5219\u53eb\u505a left \u548c right \uff0c\u540c\u65f6\u6307\u5b9a\u671f\u671b\u7684\u503c\u548c\u88ab\u6d4b\u8bd5\u4ee3\u7801\u4ea7\u751f\u7684\u503c\u7684\u987a\u5e8f\u5e76\u4e0d\u91cd\u8981\u3002\u8fd9\u4e2a\u6d4b\u8bd5\u4e2d\u7684\u65ad\u8a00\u4e5f\u53ef\u4ee5\u5199\u6210 assert_eq!(add_two(2), 4) \uff0c\u8fd9\u65f6\u5931\u8d25\u4fe1\u606f\u4f1a\u53d8\u6210 assertion failed: `(left == right)` \u5176\u4e2d left \u662f 5 \u800c right \u662f 4\u3002 assert_ne! \u5b8f\u5728\u4f20\u9012\u7ed9\u5b83\u7684\u4e24\u4e2a\u503c\u4e0d\u76f8\u7b49\u65f6\u901a\u8fc7\uff0c\u800c\u5728\u76f8\u7b49\u65f6\u5931\u8d25\u3002\u5728\u4ee3\u7801\u6309\u9884\u671f\u8fd0\u884c\uff0c\u6211\u4eec\u4e0d\u786e\u5b9a\u503c \u4f1a \u662f\u4ec0\u4e48\uff0c\u4e0d\u8fc7\u80fd\u786e\u5b9a\u503c\u7edd\u5bf9 \u4e0d\u4f1a \u662f\u4ec0\u4e48\u7684\u65f6\u5019\uff0c\u8fd9\u4e2a\u5b8f\u6700\u6709\u7528\u5904\u3002\u4f8b\u5982\uff0c\u5982\u679c\u4e00\u4e2a\u51fd\u6570\u4fdd\u8bc1\u4f1a\u4ee5\u67d0\u79cd\u65b9\u5f0f\u6539\u53d8\u5176\u8f93\u51fa\uff0c\u4e0d\u8fc7\u8fd9\u79cd\u6539\u53d8\u65b9\u5f0f\u662f\u7531\u8fd0\u884c\u6d4b\u8bd5\u65f6\u662f\u661f\u671f\u51e0\u6765\u51b3\u5b9a\u7684\uff0c\u8fd9\u65f6\u6700\u597d\u7684\u65ad\u8a00\u53ef\u80fd\u5c31\u662f\u51fd\u6570\u7684\u8f93\u51fa\u4e0d\u7b49\u4e8e\u5176\u8f93\u5165\u3002 assert_eq! \u548c assert_ne! \u5b8f\u5728\u5e95\u5c42\u5206\u522b\u4f7f\u7528\u4e86 == \u548c != \u3002\u5f53\u65ad\u8a00\u5931\u8d25\u65f6\uff0c\u8fd9\u4e9b\u5b8f\u4f1a\u4f7f\u7528\u8c03\u8bd5\u683c\u5f0f\u6253\u5370\u51fa\u5176\u53c2\u6570\uff0c\u8fd9\u610f\u5473\u7740\u88ab\u6bd4\u8f83\u7684\u503c\u5fc5\u9700\u5b9e\u73b0\u4e86 PartialEq \u548c Debug trait \u3002\u6240\u6709\u7684\u57fa\u672c\u7c7b\u578b\u548c\u5927\u90e8\u5206\u6807\u51c6\u5e93\u7c7b\u578b\u90fd\u5b9e\u73b0\u4e86\u8fd9\u4e9b trait\u3002\u5bf9\u4e8e\u81ea\u5b9a\u4e49\u7684\u7ed3\u6784\u4f53\u548c\u679a\u4e3e\uff0c\u9700\u8981\u5b9e\u73b0 PartialEq \u624d\u80fd\u65ad\u8a00\u4ed6\u4eec\u7684\u503c\u662f\u5426\u76f8\u7b49\u3002\u9700\u8981\u5b9e\u73b0 Debug \u624d\u80fd\u5728\u65ad\u8a00\u5931\u8d25\u65f6\u6253\u5370\u4ed6\u4eec\u7684\u503c\u3002\u56e0\u4e3a\u8fd9\u4e24\u4e2a trait \u90fd\u662f\u6d3e\u751f trait \uff0c\u5982\u7b2c\u4e94\u7ae0\u793a\u4f8b 5-12 \u6240\u63d0\u5230\u7684\uff0c\u901a\u5e38\u53ef\u4ee5\u76f4\u63a5\u5728\u7ed3\u6784\u4f53\u6216\u679a\u4e3e\u4e0a\u6dfb\u52a0 #[derive(PartialEq, Debug)] \u6ce8\u89e3\u3002\u9644\u5f55 C \u201c \u53ef\u6d3e\u751f trait \u201d \u4e2d\u6709\u66f4\u591a\u5173\u4e8e\u8fd9\u4e9b\u548c\u5176\u4ed6\u6d3e\u751f trait \u7684\u8be6\u7ec6\u4fe1\u606f\u3002 \u81ea\u5b9a\u4e49\u5931\u8d25\u4fe1\u606f \u4f60\u4e5f\u53ef\u4ee5\u5411 assert! \u3001 assert_eq! \u548c assert_ne! \u5b8f\u4f20\u9012\u4e00\u4e2a\u53ef\u9009\u7684\u5931\u8d25\u4fe1\u606f\u53c2\u6570\uff0c\u53ef\u4ee5\u5728\u6d4b\u8bd5\u5931\u8d25\u65f6\u5c06\u81ea\u5b9a\u4e49\u5931\u8d25\u4fe1\u606f\u4e00\u540c\u6253\u5370\u51fa\u6765\u3002 \u4efb\u4f55\u5728 assert! \u7684\u4e00\u4e2a\u5fc5\u9700\u53c2\u6570\u548c assert_eq! \u548c assert_ne! \u7684\u4e24\u4e2a\u5fc5\u9700\u53c2\u6570\u4e4b\u540e\u6307\u5b9a\u7684\u53c2\u6570\u90fd\u4f1a\u4f20\u9012\u7ed9 format! \u5b8f\uff08\u5728\u7b2c\u516b\u7ae0\u7684 \u201c \u4f7f\u7528 + \u8fd0\u7b97\u7b26\u6216 format! \u5b8f\u62fc\u63a5\u5b57\u7b26\u4e32 \u201d \u90e8\u5206\u8ba8\u8bba\u8fc7\uff09\uff0c\u6240\u4ee5\u53ef\u4ee5\u4f20\u9012\u4e00\u4e2a\u5305\u542b {} \u5360\u4f4d\u7b26\u7684\u683c\u5f0f\u5b57\u7b26\u4e32\u548c\u9700\u8981\u653e\u5165\u5360\u4f4d\u7b26\u7684\u503c\u3002 \u81ea\u5b9a\u4e49\u4fe1\u606f\u6709\u52a9\u4e8e\u8bb0\u5f55\u65ad\u8a00\u7684\u610f\u4e49\uff1b\u5f53\u6d4b\u8bd5\u5931\u8d25\u65f6\u5c31\u80fd\u66f4\u597d\u7684\u7406\u89e3\u4ee3\u7801\u51fa\u4e86\u4ec0\u4e48\u95ee\u9898\u3002 \u4f8b\u5982\uff0c\u6bd4\u5982\u8bf4\u6709\u4e00\u4e2a\u6839\u636e\u4eba\u540d\u8fdb\u884c\u95ee\u5019\u7684\u51fd\u6570\uff0c\u800c\u6211\u4eec\u5e0c\u671b\u6d4b\u8bd5\u5c06\u4f20\u9012\u7ed9\u51fd\u6570\u7684\u4eba\u540d\u663e\u793a\u5728\u8f93\u51fa\u4e2d\uff1a pub fn greeting ( name : & str ) -> String { format! ( \"Hello {}!\" , name ) } #[cfg(test)] mod tests { use super :: * ; #[test] fn greeting_contains_name () { let result = greeting ( \"Carol\" ); assert! ( result . contains ( \"Carol\" )); } } \u8fd9\u4e2a\u7a0b\u5e8f\u7684\u9700\u6c42\u8fd8\u6ca1\u6709\u88ab\u786e\u5b9a\uff0c\u56e0\u6b64\u95ee\u5019\u6587\u672c\u5f00\u5934\u7684 Hello \u6587\u672c\u5f88\u53ef\u80fd\u4f1a\u6539\u53d8\u3002\u7136\u800c\u6211\u4eec\u5e76\u4e0d\u60f3\u5728\u9700\u6c42\u6539\u53d8\u65f6\u4e0d\u5f97\u4e0d\u66f4\u65b0\u6d4b\u8bd5\uff0c\u6240\u4ee5\u76f8\u6bd4\u68c0\u67e5 greeting \u51fd\u6570\u8fd4\u56de\u7684\u786e\u5207\u503c\uff0c\u6211\u4eec\u5c06\u4ec5\u4ec5\u65ad\u8a00\u8f93\u51fa\u7684\u6587\u672c\u4e2d\u5305\u542b\u8f93\u5165\u53c2\u6570\u3002 \u8ba9\u6211\u4eec\u901a\u8fc7\u5c06 greeting \u6539\u4e3a\u4e0d\u5305\u542b name \u6765\u5728\u4ee3\u7801\u4e2d\u5f15\u5165\u4e00\u4e2a bug \u6765\u6d4b\u8bd5\u5931\u8d25\u65f6\u662f\u600e\u6837\u7684\uff1a pub fn greeting ( name : & str ) -> String { String :: from ( \"Hello!\" ) } \u8fd0\u884c\u6d4b\u8bd5\u4f1a\u4ea7\u751f\uff1a $ cargo test Compiling greeter v0.1.0 ( file:///projects/greeter ) Finished test [ unoptimized + debuginfo ] target ( s ) in 0 .91s Running unittests ( target/debug/deps/greeter-170b942eb5bf5e3a ) running 1 test test tests::greeting_contains_name ... FAILED failures: ---- tests::greeting_contains_name stdout ---- thread 'main' panicked at 'assertion failed: result.contains(\\\"Carol\\\")' , src/lib.rs:12:9 note: run with ` RUST_BACKTRACE = 1 ` environment variable to display a backtrace failures: tests::greeting_contains_name test result: FAILED. 0 passed ; 1 failed ; 0 ignored ; 0 measured ; 0 filtered out ; finished in 0 .00s error: test failed, to rerun pass '--lib' \u7ed3\u679c\u4ec5\u4ec5\u544a\u8bc9\u4e86\u6211\u4eec\u65ad\u8a00\u5931\u8d25\u4e86\u548c\u5931\u8d25\u7684\u884c\u53f7\u3002\u4e00\u4e2a\u66f4\u6709\u7528\u7684\u5931\u8d25\u4fe1\u606f\u5e94\u8be5\u6253\u5370\u51fa greeting \u51fd\u6570\u7684\u503c\u3002\u8ba9\u6211\u4eec\u4e3a\u6d4b\u8bd5\u51fd\u6570\u589e\u52a0\u4e00\u4e2a\u81ea\u5b9a\u4e49\u5931\u8d25\u4fe1\u606f\u53c2\u6570\uff1a\u5e26\u5360\u4f4d\u7b26\u7684\u683c\u5f0f\u5b57\u7b26\u4e32\uff0c\u4ee5\u53ca greeting \u51fd\u6570\u7684\u503c\uff1a #[test] fn greeting_contains_name () { let result = greeting ( \"Carol\" ); assert! ( result . contains ( \"Carol\" ), \"Greeting did not contain name, value was `{}`\" , result ); } \u73b0\u5728\u5982\u679c\u518d\u6b21\u8fd0\u884c\u6d4b\u8bd5\uff0c\u5c06\u4f1a\u770b\u5230\u66f4\u6709\u4ef7\u503c\u7684\u4fe1\u606f\uff1a $ cargo test Compiling greeter v0.1.0 ( file:///projects/greeter ) Finished test [ unoptimized + debuginfo ] target ( s ) in 0 .93s Running unittests ( target/debug/deps/greeter-170b942eb5bf5e3a ) running 1 test test tests::greeting_contains_name ... FAILED failures: ---- tests::greeting_contains_name stdout ---- thread 'main' panicked at 'Greeting did not contain name, value was `Hello!`' , src/lib.rs:12:9 note: run with ` RUST_BACKTRACE = 1 ` environment variable to display a backtrace failures: tests::greeting_contains_name test result: FAILED. 0 passed ; 1 failed ; 0 ignored ; 0 measured ; 0 filtered out ; finished in 0 .00s error: test failed, to rerun pass '--lib' \u53ef\u4ee5\u5728\u6d4b\u8bd5\u8f93\u51fa\u4e2d\u770b\u5230\u6240\u53d6\u5f97\u7684\u786e\u5207\u7684\u503c\uff0c\u8fd9\u4f1a\u5e2e\u52a9\u6211\u4eec\u7406\u89e3\u771f\u6b63\u53d1\u751f\u4e86\u4ec0\u4e48\uff0c\u800c\u4e0d\u662f\u671f\u671b\u53d1\u751f\u4ec0\u4e48\u3002 panic\u68c0\u6d4b \u9664\u4e86\u68c0\u67e5\u4ee3\u7801\u662f\u5426\u8fd4\u56de\u671f\u671b\u7684\u6b63\u786e\u7684\u503c\u4e4b\u5916\uff0c\u68c0\u67e5\u4ee3\u7801\u662f\u5426\u6309\u7167\u671f\u671b\u5904\u7406\u9519\u8bef\u4e5f\u662f\u5f88\u91cd\u8981\u7684\u3002 \u4f8b\u5982\uff0c\u8003\u8651\u7b2c\u4e5d\u7ae0\u521b\u5efa\u7684 Guess \u7c7b\u578b\u3002\u5176\u4ed6\u4f7f\u7528 Guess \u7684\u4ee3\u7801\u90fd\u662f\u57fa\u4e8e Guess \u5b9e\u4f8b\u4ec5\u6709\u7684\u503c\u8303\u56f4\u5728 1 \u5230 100 \u7684\u524d\u63d0\u3002 \u53ef\u4ee5\u7f16\u5199\u4e00\u4e2a\u6d4b\u8bd5\u6765\u786e\u4fdd\u521b\u5efa\u4e00\u4e2a\u8d85\u51fa\u8303\u56f4\u7684\u503c\u7684 Guess \u5b9e\u4f8b\u4f1a panic \u3002 \u53ef\u4ee5\u901a\u8fc7\u5bf9\u51fd\u6570\u589e\u52a0\u53e6\u4e00\u4e2a\u5c5e\u6027 should_panic \u6765\u5b9e\u73b0\u8fd9\u4e9b\u3002\u8fd9\u4e2a\u5c5e\u6027\u5728\u51fd\u6570\u4e2d\u7684\u4ee3\u7801 panic \u65f6\u4f1a\u901a\u8fc7\uff0c\u800c\u5728\u5176\u4e2d\u7684\u4ee3\u7801\u6ca1\u6709 panic \u65f6\u5931\u8d25\u3002 \u4e0b\u9762\u793a\u4f8b\u5c55\u793a\u4e86\u4e00\u4e2a\u68c0\u67e5 Guess::new \u662f\u5426\u6309\u7167\u6211\u4eec\u7684\u671f\u671b\u51fa\u9519\u7684\u6d4b\u8bd5\uff1a // \u6d4b\u8bd5\u4f1a\u9020\u6210 panic! \u7684\u6761\u4ef6 pub struct Guess { value : i32 , } impl Guess { pub fn new ( value : i32 ) -> Guess { if value < 1 || value > 100 { panic! ( \"Guess value must be between 1 and 100, got {}.\" , value ); } Guess { value } } } #[cfg(test)] mod tests { use super :: * ; #[test] #[should_panic] fn greater_than_100 () { Guess :: new ( 200 ); } } #[should_panic] \u5c5e\u6027\u4f4d\u4e8e #[test] \u4e4b\u540e\uff0c\u5bf9\u5e94\u7684\u6d4b\u8bd5\u51fd\u6570\u4e4b\u524d\u3002\u8ba9\u6211\u4eec\u770b\u770b\u6d4b\u8bd5\u901a\u8fc7\u65f6\u5b83\u662f\u4ec0\u4e48\u6837\u5b50\uff1a $ cargo test Compiling guessing_game v0.1.0 ( file:///projects/guessing_game ) Finished test [ unoptimized + debuginfo ] target ( s ) in 0 .58s Running unittests ( target/debug/deps/guessing_game-57d70c3acb738f4d ) running 1 test test tests::greater_than_100 - should panic ... ok test result: ok. 1 passed ; 0 failed ; 0 ignored ; 0 measured ; 0 filtered out ; finished in 0 .00s Doc-tests guessing_game running 0 tests test result: ok. 0 passed ; 0 failed ; 0 ignored ; 0 measured ; 0 filtered out ; finished in 0 .00s \u770b\u8d77\u6765\u4e0d\u9519\uff01\u73b0\u5728\u5728\u4ee3\u7801\u4e2d\u5f15\u5165 bug \uff0c\u79fb\u9664 new \u51fd\u6570\u5728\u503c\u5927\u4e8e 100 \u65f6\u4f1a panic \u7684\u6761\u4ef6\uff1a // --snip-- impl Guess { pub fn new ( value : i32 ) -> Guess { if value < 1 { panic! ( \"Guess value must be between 1 and 100, got {}.\" , value ); } Guess { value } } } \u5982\u679c\u8fd0\u884c\u793a\u4f8b\u7684\u6d4b\u8bd5\uff0c\u5b83\u4f1a\u5931\u8d25\uff1a $ cargo test Compiling guessing_game v0.1.0 ( file:///projects/guessing_game ) Finished test [ unoptimized + debuginfo ] target ( s ) in 0 .62s Running unittests ( target/debug/deps/guessing_game-57d70c3acb738f4d ) running 1 test test tests::greater_than_100 - should panic ... FAILED failures: ---- tests::greater_than_100 stdout ---- note: test did not panic as expected failures: tests::greater_than_100 test result: FAILED. 0 passed ; 1 failed ; 0 ignored ; 0 measured ; 0 filtered out ; finished in 0 .00s error: test failed, to rerun pass '--lib' \u8fd9\u56de\u5e76\u6ca1\u6709\u5f97\u5230\u975e\u5e38\u6709\u7528\u7684\u4fe1\u606f\uff0c\u4e0d\u8fc7\u4e00\u65e6\u6211\u4eec\u89c2\u5bdf\u6d4b\u8bd5\u51fd\u6570\uff0c\u4f1a\u53d1\u73b0\u5b83\u6807\u6ce8\u4e86 #[should_panic] \u3002\u8fd9\u4e2a\u9519\u8bef\u610f\u5473\u7740\u4ee3\u7801\u4e2d\u6d4b\u8bd5\u51fd\u6570 Guess::new(200) \u5e76\u6ca1\u6709\u4ea7\u751f panic \u3002 \u7136\u800c should_panic \u6d4b\u8bd5\u7ed3\u679c\u53ef\u80fd\u4f1a\u975e\u5e38\u542b\u7cca\u4e0d\u6e05\uff0c\u56e0\u4e3a\u5b83\u53ea\u662f\u544a\u8bc9\u6211\u4eec\u4ee3\u7801\u5e76\u6ca1\u6709\u4ea7\u751f panic \u3002 should_panic \u751a\u81f3\u5728\u4e00\u4e9b\u4e0d\u662f\u6211\u4eec\u671f\u671b\u7684\u539f\u56e0\u800c\u5bfc\u81f4 panic \u65f6\u4e5f\u4f1a\u901a\u8fc7\u3002 \u4e3a\u4e86\u4f7f should_panic \u6d4b\u8bd5\u7ed3\u679c\u66f4\u7cbe\u786e\uff0c\u6211\u4eec\u53ef\u4ee5\u7ed9 should_panic \u5c5e\u6027\u589e\u52a0\u4e00\u4e2a\u53ef\u9009\u7684 expected \u53c2\u6570\u3002 \u6d4b\u8bd5\u5de5\u5177\u4f1a\u786e\u4fdd\u9519\u8bef\u4fe1\u606f\u4e2d\u5305\u542b\u5176\u63d0\u4f9b\u7684\u6587\u672c\u3002\u4f8b\u5982\uff0c\u8003\u8651\u793a\u4f8b\u4e2d\u4fee\u6539\u8fc7\u7684 Guess \uff0c\u8fd9\u91cc new \u51fd\u6570\u6839\u636e\u5176\u503c\u662f\u8fc7\u5927\u8fd8\u6216\u8005\u8fc7\u5c0f\u800c\u63d0\u4f9b\u4e0d\u540c\u7684 panic \u4fe1\u606f\uff1a // --snip-- impl Guess { pub fn new ( value : i32 ) -> Guess { if value < 1 { panic! ( \"Guess value must be greater than or equal to 1, got {}.\" , value ); } else if value > 100 { panic! ( \"Guess value must be less than or equal to 100, got {}.\" , value ); } Guess { value } } } #[cfg(test)] mod tests { use super :: * ; #[test] #[should_panic(expected = \"Guess value must be less than or equal to 100\" )] fn greater_than_100 () { Guess :: new ( 200 ); } } \u8fd9\u4e2a\u6d4b\u8bd5\u4f1a\u901a\u8fc7\uff0c\u56e0\u4e3a should_panic \u5c5e\u6027\u4e2d expected \u53c2\u6570\u63d0\u4f9b\u7684\u503c\u662f Guess::new \u51fd\u6570 panic \u4fe1\u606f\u7684\u5b50\u4e32\u3002 \u6211\u4eec\u53ef\u4ee5\u6307\u5b9a\u671f\u671b\u7684\u6574\u4e2a panic \u4fe1\u606f\uff0c\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\u662f Guess value must be less than or equal to 100, got 200. \u3002 expected \u4fe1\u606f\u7684\u9009\u62e9\u53d6\u51b3\u4e8e panic \u4fe1\u606f\u6709\u591a\u72ec\u7279\u6216\u52a8\u6001\uff0c\u548c\u4f60\u5e0c\u671b\u6d4b\u8bd5\u6709\u591a\u51c6\u786e\u3002 \u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u9519\u8bef\u4fe1\u606f\u7684\u5b50\u5b57\u7b26\u4e32\u8db3\u4ee5\u786e\u4fdd\u51fd\u6570\u5728 else if value > 100 \u7684\u60c5\u51b5\u4e0b\u8fd0\u884c\u3002 \u4e3a\u4e86\u89c2\u5bdf\u5e26\u6709 expected \u4fe1\u606f\u7684 should_panic \u6d4b\u8bd5\u5931\u8d25\u65f6\u4f1a\u53d1\u751f\u4ec0\u4e48\uff0c\u8ba9\u6211\u4eec\u518d\u6b21\u5f15\u5165\u4e00\u4e2a bug \uff0c\u5c06 if value < 1 \u548c else if value > 100 \u7684\u4ee3\u7801\u5757\u5bf9\u6362\uff1a if value < 1 { panic! ( \"Guess value must be less than or equal to 100, got {}.\" , value ); } else if value > 100 { panic! ( \"Guess value must be greater than or equal to 1, got {}.\" , value ); } \u8fd9\u4e00\u6b21\u8fd0\u884c should_panic \u6d4b\u8bd5\uff0c\u5b83\u4f1a\u5931\u8d25\uff1a $ cargo test Compiling guessing_game v0.1.0 ( file:///projects/guessing_game ) Finished test [ unoptimized + debuginfo ] target ( s ) in 0 .66s Running unittests ( target/debug/deps/guessing_game-57d70c3acb738f4d ) running 1 test test tests::greater_than_100 - should panic ... FAILED failures: ---- tests::greater_than_100 stdout ---- thread 'main' panicked at 'Guess value must be greater than or equal to 1, got 200.' , src/lib.rs:13:13 note: run with ` RUST_BACKTRACE = 1 ` environment variable to display a backtrace note: panic did not contain expected string panic message: ` \"Guess value must be greater than or equal to 1, got 200.\" ` , expected substring: ` \"Guess value must be less than or equal to 100\" ` failures: tests::greater_than_100 test result: FAILED. 0 passed ; 1 failed ; 0 ignored ; 0 measured ; 0 filtered out ; finished in 0 .00s error: test failed, to rerun pass '--lib' \u5931\u8d25\u4fe1\u606f\u8868\u660e\u6d4b\u8bd5\u786e\u5b9e\u5982\u671f\u671b panic \u4e86\uff0c\u4e0d\u8fc7 panic \u4fe1\u606f\u4e2d\u5e76\u6ca1\u6709\u5305\u542b expected \u4fe1\u606f 'Guess value must be less than or equal to 100' \u3002 \u800c\u6211\u4eec\u5f97\u5230\u7684 panic \u4fe1\u606f\u662f 'Guess value must be greater than or equal to 1, got 200.' \u3002\u8fd9\u6837\u5c31\u53ef\u4ee5\u5f00\u59cb\u5bfb\u627e bug \u5728\u54ea\u4e86\uff01 Result<T, E>\u6d4b\u8bd5 \u76ee\u524d\u4e3a\u6b62\uff0c\u6211\u4eec\u7f16\u5199\u7684\u6d4b\u8bd5\u5728\u5931\u8d25\u65f6\u5c31\u4f1a panic \u3002\u4e5f\u53ef\u4ee5\u4f7f\u7528 Result\\<T, E> \u7f16\u5199\u6d4b\u8bd5\uff01\u8fd9\u91cc\u662f\u7b2c\u4e00\u4e2a\u4f8b\u5b50\u91c7\u7528\u4e86 Result \uff1a #[cfg(test)] mod tests { #[test] fn it_works () -> Result < (), String > { if 2 + 2 == 4 { Ok (()) } else { Err ( String :: from ( \"two plus two does not equal four\" )) } } } \u73b0\u5728 it_works \u51fd\u6570\u7684\u8fd4\u56de\u503c\u7c7b\u578b\u4e3a Result<(), String> \u3002\u5728\u51fd\u6570\u4f53\u4e2d\uff0c\u4e0d\u540c\u4e8e\u8c03\u7528 assert_eq! \u5b8f\uff0c\u800c\u662f\u5728\u6d4b\u8bd5\u901a\u8fc7\u65f6\u8fd4\u56de Ok(()) \uff0c\u5728\u6d4b\u8bd5\u5931\u8d25\u65f6\u8fd4\u56de\u5e26\u6709 String \u7684 Err \u3002 \u8fd9\u6837\u7f16\u5199\u6d4b\u8bd5\u6765\u8fd4\u56de Result\\<T, E> \u5c31\u53ef\u4ee5\u5728\u51fd\u6570\u4f53\u4e2d\u4f7f\u7528\u95ee\u53f7\u8fd0\u7b97\u7b26\uff0c\u5982\u6b64\u53ef\u4ee5\u65b9\u4fbf\u7684\u7f16\u5199\u4efb\u4f55\u8fd0\u7b97\u7b26\u4f1a\u8fd4\u56de Err \u6210\u5458\u7684\u6d4b\u8bd5\u3002 \u4e0d\u80fd\u5bf9\u8fd9\u4e9b\u4f7f\u7528 Result \u7684\u6d4b\u8bd5\u4f7f\u7528 #[should_panic] \u6ce8\u89e3\u3002\u4e3a\u4e86\u65ad\u8a00\u4e00\u4e2a\u64cd\u4f5c\u8fd4\u56de Err \u6210\u5458\uff0c\u4e0d\u8981\u4f7f\u7528\u5bf9 Result\\<T, E> \u503c\u4f7f\u7528\u95ee\u53f7\u8868\u8fbe\u5f0f\uff08?\uff09\u3002\u800c\u662f\u4f7f\u7528 assert!(value.is_err()) \u3002 \u73b0\u5728\u4f60\u77e5\u9053\u4e86\u51e0\u79cd\u7f16\u5199\u6d4b\u8bd5\u7684\u65b9\u6cd5\uff0c\u8ba9\u6211\u4eec\u770b\u770b\u8fd0\u884c\u6d4b\u8bd5\u65f6\u4f1a\u53d1\u751f\u4ec0\u4e48\uff0c\u548c\u53ef\u4ee5\u7528\u4e8e cargo test \u7684\u4e0d\u540c\u9009\u9879\u3002 \u63a7\u5236\u5982\u4f55\u8fd0\u884c \u5c31\u50cf cargo run \u4f1a\u7f16\u8bd1\u4ee3\u7801\u5e76\u8fd0\u884c\u751f\u6210\u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\u4e00\u6837\uff0c cargo test \u5728\u6d4b\u8bd5\u6a21\u5f0f\u4e0b\u7f16\u8bd1\u4ee3\u7801\u5e76\u8fd0\u884c\u751f\u6210\u7684\u6d4b\u8bd5\u4e8c\u8fdb\u5236\u6587\u4ef6\u3002\u53ef\u4ee5\u6307\u5b9a\u547d\u4ee4\u884c\u53c2\u6570\u6765\u6539\u53d8 cargo test \u7684\u9ed8\u8ba4\u884c\u4e3a\u3002 \u4f8b\u5982\uff0c cargo test \u751f\u6210\u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\u7684\u9ed8\u8ba4\u884c\u4e3a\u662f \u5e76\u884c \u7684\u8fd0\u884c\u6240\u6709\u6d4b\u8bd5\uff0c\u5e76\u622a\u83b7\u6d4b\u8bd5\u8fd0\u884c\u8fc7\u7a0b\u4e2d\u4ea7\u751f\u7684\u8f93\u51fa\uff0c\u963b\u6b62\u4ed6\u4eec\u88ab\u663e\u793a\u51fa\u6765\uff0c\u4f7f\u5f97\u9605\u8bfb\u6d4b\u8bd5\u7ed3\u679c\u76f8\u5173\u7684\u5185\u5bb9\u53d8\u5f97\u66f4\u5bb9\u6613\u3002 \u53ef\u4ee5\u5c06\u4e00\u90e8\u5206\u547d\u4ee4\u884c\u53c2\u6570\u4f20\u9012\u7ed9 cargo test \uff0c\u800c\u5c06\u53e6\u5916\u4e00\u90e8\u5206\u4f20\u9012\u7ed9\u751f\u6210\u7684\u6d4b\u8bd5\u4e8c\u8fdb\u5236\u6587\u4ef6\u3002\u4e3a\u4e86\u5206\u9694\u8fd9\u4e24\u79cd\u53c2\u6570\uff0c\u9700\u8981\u5148\u5217\u51fa\u4f20\u9012\u7ed9 cargo test \u7684\u53c2\u6570\uff0c\u63a5\u7740\u662f\u5206\u9694\u7b26 -- \uff0c\u518d\u4e4b\u540e\u662f\u4f20\u9012\u7ed9\u6d4b\u8bd5\u4e8c\u8fdb\u5236\u6587\u4ef6\u7684\u53c2\u6570\u3002\u8fd0\u884c cargo test --help \u4f1a\u63d0\u793a cargo test \u7684\u6709\u5173\u53c2\u6570\uff0c\u800c\u8fd0\u884c cargo test -- --help \u53ef\u4ee5\u63d0\u793a\u5728\u5206\u9694\u7b26 -- \u4e4b\u540e\u4f7f\u7528\u7684\u6709\u5173\u53c2\u6570\u3002 \u5e76\u884c\u6216\u8fde\u7eed\u6d4b\u8bd5 \u5f53\u8fd0\u884c\u591a\u4e2a\u6d4b\u8bd5\u65f6\uff0c Rust \u9ed8\u8ba4\u4f7f\u7528\u7ebf\u7a0b\u6765\u5e76\u884c\u8fd0\u884c\u3002\u8fd9\u610f\u5473\u7740\u6d4b\u8bd5\u4f1a\u66f4\u5feb\u5730\u8fd0\u884c\u5b8c\u6bd5\uff0c\u6240\u4ee5\u4f60\u53ef\u4ee5\u66f4\u5feb\u7684\u5f97\u5230\u4ee3\u7801\u80fd\u5426\u5de5\u4f5c\u7684\u53cd\u9988\u3002\u56e0\u4e3a\u6d4b\u8bd5\u662f\u5728\u540c\u65f6\u8fd0\u884c\u7684\uff0c\u4f60\u5e94\u8be5\u786e\u4fdd\u6d4b\u8bd5 \u4e0d\u80fd\u76f8\u4e92\u4f9d\u8d56\uff0c\u6216\u4f9d\u8d56\u4efb\u4f55\u5171\u4eab\u7684\u72b6\u6001\uff0c\u5305\u62ec\u4f9d\u8d56\u5171\u4eab\u7684\u73af\u5883 \uff0c\u6bd4\u5982\u5f53\u524d\u5de5\u4f5c\u76ee\u5f55\u6216\u8005\u73af\u5883\u53d8\u91cf\u3002 \u4e3e\u4e2a\u4f8b\u5b50\uff0c\u6bcf\u4e00\u4e2a\u6d4b\u8bd5\u90fd\u8fd0\u884c\u4e00\u4e9b\u4ee3\u7801\uff0c\u5047\u8bbe\u8fd9\u4e9b\u4ee3\u7801\u90fd\u5728\u786c\u76d8\u4e0a\u521b\u5efa\u4e00\u4e2a test-output.txt \u6587\u4ef6\u5e76\u5199\u5165\u4e00\u4e9b\u6570\u636e\u3002\u63a5\u7740\u6bcf\u4e00\u4e2a\u6d4b\u8bd5\u90fd\u8bfb\u53d6\u6587\u4ef6\u4e2d\u7684\u6570\u636e\u5e76\u65ad\u8a00\u8fd9\u4e2a\u6587\u4ef6\u5305\u542b\u7279\u5b9a\u7684\u503c\uff0c\u800c\u8fd9\u4e2a\u503c\u5728\u6bcf\u4e2a\u6d4b\u8bd5\u4e2d\u90fd\u662f\u4e0d\u540c\u7684\u3002\u56e0\u4e3a\u6240\u6709\u6d4b\u8bd5\u90fd\u662f\u540c\u65f6\u8fd0\u884c\u7684\uff0c\u4e00\u4e2a\u6d4b\u8bd5\u53ef\u80fd\u4f1a\u5728\u53e6\u4e00\u4e2a\u6d4b\u8bd5\u8bfb\u5199\u6587\u4ef6\u8fc7\u7a0b\u4e2d\u4fee\u6539\u4e86\u6587\u4ef6\u3002\u90a3\u4e48\u7b2c\u4e8c\u4e2a\u6d4b\u8bd5\u5c31\u4f1a\u5931\u8d25\uff0c\u5e76\u4e0d\u662f\u56e0\u4e3a\u4ee3\u7801\u4e0d\u6b63\u786e\uff0c\u800c\u662f\u56e0\u4e3a\u6d4b\u8bd5\u5e76\u884c\u8fd0\u884c\u65f6\u76f8\u4e92\u5e72\u6270\u3002\u4e00\u4e2a\u89e3\u51b3\u65b9\u6848\u662f\u4f7f\u6bcf\u4e00\u4e2a\u6d4b\u8bd5\u8bfb\u5199\u4e0d\u540c\u7684\u6587\u4ef6\uff1b\u53e6\u4e00\u4e2a\u89e3\u51b3\u65b9\u6848\u662f\u4e00\u6b21\u8fd0\u884c\u4e00\u4e2a\u6d4b\u8bd5\u3002 \u5982\u679c\u4f60\u4e0d\u5e0c\u671b\u6d4b\u8bd5\u5e76\u884c\u8fd0\u884c\uff0c\u6216\u8005\u60f3\u8981\u66f4\u52a0\u7cbe\u786e\u7684\u63a7\u5236\u7ebf\u7a0b\u7684\u6570\u91cf\uff0c\u53ef\u4ee5\u4f20\u9012 --test-threads \u53c2\u6570\u548c\u5e0c\u671b\u4f7f\u7528\u7ebf\u7a0b\u7684\u6570\u91cf\u7ed9\u6d4b\u8bd5\u4e8c\u8fdb\u5236\u6587\u4ef6\u3002\u4f8b\u5982\uff1a cargo test -- --test-threads = 1 \u8fd9\u91cc\u5c06\u6d4b\u8bd5\u7ebf\u7a0b\u8bbe\u7f6e\u4e3a 1\uff0c\u544a\u8bc9\u7a0b\u5e8f\u4e0d\u8981\u4f7f\u7528\u4efb\u4f55\u5e76\u884c\u673a\u5236\u3002\u8fd9\u4e5f\u4f1a\u6bd4\u5e76\u884c\u8fd0\u884c\u82b1\u8d39\u66f4\u591a\u65f6\u95f4\uff0c\u4e0d\u8fc7\u5728\u6709\u5171\u4eab\u7684\u72b6\u6001\u65f6\uff0c\u6d4b\u8bd5\u5c31\u4e0d\u4f1a\u6f5c\u5728\u7684\u76f8\u4e92\u5e72\u6270\u4e86\u3002 \u663e\u793a\u51fd\u6570\u8f93\u51fa \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u5f53\u6d4b\u8bd5\u901a\u8fc7\u65f6\uff0cRust \u7684\u6d4b\u8bd5\u5e93\u4f1a\u622a\u83b7\u6253\u5370\u5230\u6807\u51c6\u8f93\u51fa\u7684\u6240\u6709\u5185\u5bb9\u3002 \u6bd4\u5982\u5728\u6d4b\u8bd5\u4e2d\u8c03\u7528\u4e86 println! \u800c\u6d4b\u8bd5\u901a\u8fc7\u4e86\uff0c\u6211\u4eec\u5c06\u4e0d\u4f1a\u5728\u7ec8\u7aef\u770b\u5230 println! \u7684\u8f93\u51fa\uff1a\u53ea\u4f1a\u770b\u5230\u8bf4\u660e\u6d4b\u8bd5\u901a\u8fc7\u7684\u63d0\u793a\u884c\u3002 \u5982\u679c\u6d4b\u8bd5\u5931\u8d25\u4e86\uff0c\u5219\u4f1a\u770b\u5230\u6240\u6709\u6807\u51c6\u8f93\u51fa\u548c\u5176\u4ed6\u9519\u8bef\u4fe1\u606f\u3002 \u4f8b\u5982\uff0c\u793a\u4f8b\u6709\u4e00\u4e2a\u65e0\u610f\u4e49\u7684\u51fd\u6570\uff0c\u5b83\u6253\u5370\u51fa\u5176\u53c2\u6570\u7684\u503c\u5e76\u63a5\u7740\u8fd4\u56de 10 \u3002\u63a5\u7740\u8fd8\u6709\u4e00\u4e2a\u4f1a\u901a\u8fc7\u7684\u6d4b\u8bd5\u548c\u4e00\u4e2a\u4f1a\u5931\u8d25\u7684\u6d4b\u8bd5\uff1a // \u4e00\u4e2a\u8c03\u7528\u4e86 println! \u7684\u51fd\u6570\u7684\u6d4b\u8bd5 fn prints_and_returns_10 ( a : i32 ) -> i32 { println! ( \"I got the value {}\" , a ); 10 } #[cfg(test)] mod tests { use super :: * ; #[test] fn this_test_will_pass () { let value = prints_and_returns_10 ( 4 ); assert_eq! ( 10 , value ); } #[test] fn this_test_will_fail () { let value = prints_and_returns_10 ( 8 ); assert_eq! ( 5 , value ); } } \u8fd0\u884c cargo test \u5c06\u4f1a\u770b\u5230\u8fd9\u4e9b\u6d4b\u8bd5\u7684\u8f93\u51fa\uff1a $ cargo test Compiling silly-function v0.1.0 ( file:///projects/silly-function ) Finished test [ unoptimized + debuginfo ] target ( s ) in 0 .58s Running unittests ( target/debug/deps/silly_function-160869f38cff9166 ) running 2 tests test tests::this_test_will_fail ... FAILED test tests::this_test_will_pass ... ok failures: ---- tests::this_test_will_fail stdout ---- I got the value 8 thread 'main' panicked at 'assertion failed: `(left == right)` left: `5`, right: `10`' , src/lib.rs:19:9 note: run with ` RUST_BACKTRACE = 1 ` environment variable to display a backtrace failures: tests::this_test_will_fail test result: FAILED. 1 passed ; 1 failed ; 0 ignored ; 0 measured ; 0 filtered out ; finished in 0 .00s error: test failed, to rerun pass '--lib' \u6ce8\u610f\u8f93\u51fa\u4e2d\u4e0d\u4f1a\u51fa\u73b0\u6d4b\u8bd5\u901a\u8fc7\u65f6\u6253\u5370\u7684\u5185\u5bb9\uff0c\u5373 I got the value 4 \u3002\u56e0\u4e3a\u5f53\u6d4b\u8bd5\u901a\u8fc7\u65f6\uff0c\u8fd9\u4e9b\u8f93\u51fa\u4f1a\u88ab\u622a\u83b7\u3002\u5931\u8d25\u6d4b\u8bd5\u7684\u8f93\u51fa I got the value 8 \uff0c\u5219\u51fa\u73b0\u5728\u8f93\u51fa\u7684\u6d4b\u8bd5\u6458\u8981\u90e8\u5206\uff0c\u540c\u65f6\u4e5f\u663e\u793a\u4e86\u6d4b\u8bd5\u5931\u8d25\u7684\u539f\u56e0\u3002 \u5982\u679c\u4f60\u5e0c\u671b\u4e5f\u80fd\u770b\u5230\u901a\u8fc7\u7684\u6d4b\u8bd5\u4e2d\u6253\u5370\u7684\u503c\uff0c\u4e5f\u53ef\u4ee5\u5728\u7ed3\u5c3e\u52a0\u4e0a --show-output \u544a\u8bc9 Rust \u663e\u793a\u6210\u529f\u6d4b\u8bd5\u7684\u8f93\u51fa\u3002 cargo test -- --show-output \u4f7f\u7528 --show-output \u53c2\u6570\u518d\u6b21\u8fd0\u884c\u793a\u4f8b\u4e2d\u7684\u6d4b\u8bd5\u4f1a\u663e\u793a\u5982\u4e0b\u8f93\u51fa\uff1a $ cargo test -- --show-output Compiling silly-function v0.1.0 ( file:///projects/silly-function ) Finished test [ unoptimized + debuginfo ] target ( s ) in 0 .60s Running unittests ( target/debug/deps/silly_function-160869f38cff9166 ) running 2 tests test tests::this_test_will_fail ... FAILED test tests::this_test_will_pass ... ok successes: ---- tests::this_test_will_pass stdout ---- I got the value 4 successes: tests::this_test_will_pass failures: ---- tests::this_test_will_fail stdout ---- I got the value 8 thread 'main' panicked at 'assertion failed: `(left == right)` left: `5`, right: `10`' , src/lib.rs:19:9 note: run with ` RUST_BACKTRACE = 1 ` environment variable to display a backtrace failures: tests::this_test_will_fail test result: FAILED. 1 passed ; 1 failed ; 0 ignored ; 0 measured ; 0 filtered out ; finished in 0 .00s error: test failed, to rerun pass '--lib' \u6307\u5b9a\u540d\u79f0\u8fd0\u884c\u90e8\u5206\u6d4b\u8bd5 \u6709\u65f6\u8fd0\u884c\u6574\u4e2a\u6d4b\u8bd5\u96c6\u4f1a\u8017\u8d39\u5f88\u957f\u65f6\u95f4\u3002\u5982\u679c\u4f60\u8d1f\u8d23\u7279\u5b9a\u4f4d\u7f6e\u7684\u4ee3\u7801\uff0c\u4f60\u53ef\u80fd\u4f1a\u5e0c\u671b\u53ea\u8fd0\u884c\u4e0e\u8fd9\u4e9b\u4ee3\u7801\u76f8\u5173\u7684\u6d4b\u8bd5\u3002\u4f60\u53ef\u4ee5\u5411 cargo test \u4f20\u9012\u6240\u5e0c\u671b\u8fd0\u884c\u7684\u6d4b\u8bd5\u540d\u79f0\u7684\u53c2\u6570\u6765\u9009\u62e9\u8fd0\u884c\u54ea\u4e9b\u6d4b\u8bd5\u3002 \u4e3a\u4e86\u5c55\u793a\u5982\u4f55\u8fd0\u884c\u90e8\u5206\u6d4b\u8bd5\uff0c\u793a\u4f8b\u4e3a add_two \u51fd\u6570\u521b\u5efa\u4e86\u4e09\u4e2a\u6d4b\u8bd5\uff0c\u6211\u4eec\u53ef\u4ee5\u9009\u62e9\u5177\u4f53\u8fd0\u884c\u54ea\u4e00\u4e2a\uff1a // \u4e0d\u540c\u540d\u79f0\u7684\u4e09\u4e2a\u6d4b\u8bd5 pub fn add_two ( a : i32 ) -> i32 { a + 2 } #[cfg(test)] mod tests { use super :: * ; #[test] fn add_two_and_two () { assert_eq! ( 4 , add_two ( 2 )); } #[test] fn add_three_and_two () { assert_eq! ( 5 , add_two ( 3 )); } #[test] fn one_hundred () { assert_eq! ( 102 , add_two ( 100 )); } } \u5982\u679c\u6ca1\u6709\u4f20\u9012\u4efb\u4f55\u53c2\u6570\u5c31\u8fd0\u884c\u6d4b\u8bd5\uff0c\u5982\u4f60\u6240\u89c1\uff0c\u6240\u6709\u6d4b\u8bd5\u90fd\u4f1a\u5e76\u884c\u8fd0\u884c\uff1a $ cargo test Compiling adder v0.1.0 ( file:///projects/adder ) Finished test [ unoptimized + debuginfo ] target ( s ) in 0 .62s Running unittests ( target/debug/deps/adder-92948b65e88960b4 ) running 3 tests test tests::add_three_and_two ... ok test tests::add_two_and_two ... ok test tests::one_hundred ... ok test result: ok. 3 passed ; 0 failed ; 0 ignored ; 0 measured ; 0 filtered out ; finished in 0 .00s Doc-tests adder running 0 tests test result: ok. 0 passed ; 0 failed ; 0 ignored ; 0 measured ; 0 filtered out ; finished in 0 .00s \u5355\u4e2a\u6d4b\u8bd5 \u53ef\u4ee5\u5411 cargo test \u4f20\u9012\u4efb\u610f\u6d4b\u8bd5\u7684\u540d\u79f0\u6765\u53ea\u8fd0\u884c\u8fd9\u4e2a\u6d4b\u8bd5\uff1a $ cargo test one_hundred Compiling adder v0.1.0 ( file:///projects/adder ) Finished test [ unoptimized + debuginfo ] target ( s ) in 0 .69s Running unittests ( target/debug/deps/adder-92948b65e88960b4 ) running 1 test test tests::one_hundred ... ok test result: ok. 1 passed ; 0 failed ; 0 ignored ; 0 measured ; 2 filtered out ; finished in 0 .00s \u53ea\u6709\u540d\u79f0\u4e3a one_hundred \u7684\u6d4b\u8bd5\u88ab\u8fd0\u884c\u4e86\uff1b\u56e0\u4e3a\u5176\u4f59\u4e24\u4e2a\u6d4b\u8bd5\u5e76\u4e0d\u5339\u914d\u8fd9\u4e2a\u540d\u79f0\u3002\u6d4b\u8bd5\u8f93\u51fa\u5728\u6458\u8981\u884c\u7684\u7ed3\u5c3e\u663e\u793a\u4e86 2 filtered out \u8868\u660e\u8fd8\u5b58\u5728\u6bd4\u672c\u6b21\u6240\u8fd0\u884c\u7684\u6d4b\u8bd5\u66f4\u591a\u7684\u6d4b\u8bd5\u88ab\u8fc7\u6ee4\u6389\u4e86\u3002 \u4e0d\u80fd\u50cf\u8fd9\u6837\u6307\u5b9a\u591a\u4e2a\u6d4b\u8bd5\u540d\u79f0\uff1b\u53ea\u6709\u4f20\u9012\u7ed9 cargo test \u7684\u7b2c\u4e00\u4e2a\u503c\u624d\u4f1a\u88ab\u4f7f\u7528\u3002\u4e0d\u8fc7\u6709\u8fd0\u884c\u591a\u4e2a\u6d4b\u8bd5\u7684\u65b9\u6cd5\u3002 \u8fc7\u6ee4\u8fd0\u884c\u591a\u4e2a\u6d4b\u8bd5 \u6211\u4eec\u53ef\u4ee5\u6307\u5b9a\u90e8\u5206\u6d4b\u8bd5\u7684\u540d\u79f0\uff0c\u4efb\u4f55\u540d\u79f0\u5339\u914d\u8fd9\u4e2a\u540d\u79f0\u7684\u6d4b\u8bd5\u4f1a\u88ab\u8fd0\u884c\u3002\u4f8b\u5982\uff0c\u56e0\u4e3a\u5934\u4e24\u4e2a\u6d4b\u8bd5\u7684\u540d\u79f0\u5305\u542b add \uff0c\u53ef\u4ee5\u901a\u8fc7 cargo test add \u6765\u8fd0\u884c\u8fd9\u4e24\u4e2a\u6d4b\u8bd5\uff1a $ cargo test add Compiling adder v0 . 1.0 ( file : ///projects/adder) Finished test [ unoptimized + debuginfo ] target ( s ) in 0.61 s Running unittests ( target / debug / deps / adder - 92948 b65e88960b4 ) running 2 tests test tests :: add_three_and_two .. . ok test tests :: add_two_and_two .. . ok test result : ok . 2 passed ; 0 failed ; 0 ignored ; 0 measured ; 1 filtered out ; finished in 0.00 s \u8fd9\u8fd0\u884c\u4e86\u6240\u6709\u540d\u5b57\u4e2d\u5e26\u6709 add \u7684\u6d4b\u8bd5\uff0c\u4e5f\u8fc7\u6ee4\u6389\u4e86\u540d\u4e3a one_hundred \u7684\u6d4b\u8bd5\u3002\u540c\u65f6\u6ce8\u610f\u6d4b\u8bd5\u6240\u5728\u7684\u6a21\u5757\u4e5f\u662f\u6d4b\u8bd5\u540d\u79f0\u7684\u4e00\u90e8\u5206\uff0c\u6240\u4ee5\u53ef\u4ee5\u901a\u8fc7\u6a21\u5757\u540d\u6765\u8fd0\u884c\u4e00\u4e2a\u6a21\u5757\u4e2d\u7684\u6240\u6709\u6d4b\u8bd5\u3002 \u5ffd\u7565\u67d0\u4e9b\u6d4b\u8bd5 \u6709\u65f6\u4e00\u4e9b\u7279\u5b9a\u7684\u6d4b\u8bd5\u6267\u884c\u8d77\u6765\u662f\u975e\u5e38\u8017\u8d39\u65f6\u95f4\u7684\uff0c\u6240\u4ee5\u5728\u5927\u591a\u6570\u8fd0\u884c cargo test \u7684\u65f6\u5019\u5e0c\u671b\u80fd\u6392\u9664\u4ed6\u4eec\u3002 \u867d\u7136\u53ef\u4ee5\u901a\u8fc7\u53c2\u6570\u5217\u4e3e\u51fa\u6240\u6709\u5e0c\u671b\u8fd0\u884c\u7684\u6d4b\u8bd5\u6765\u505a\u5230\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528 ignore \u5c5e\u6027\u6765\u6807\u8bb0\u8017\u65f6\u7684\u6d4b\u8bd5\u5e76\u6392\u9664\u4ed6\u4eec\uff0c \u5982\u4e0b\u6240\u793a\uff1a #[test] fn it_works () { assert_eq! ( 2 + 2 , 4 ); } #[test] #[ignore] fn expensive_test () { // \u9700\u8981\u8fd0\u884c\u4e00\u4e2a\u5c0f\u65f6\u7684\u4ee3\u7801 } \u5bf9\u4e8e\u60f3\u8981\u6392\u9664\u7684\u6d4b\u8bd5\uff0c\u6211\u4eec\u5728 #[test] \u4e4b\u540e\u589e\u52a0\u4e86 #[ignore] \u884c\u3002\u73b0\u5728\u5982\u679c\u8fd0\u884c\u6d4b\u8bd5\uff0c\u5c31\u4f1a\u53d1\u73b0 it_works \u8fd0\u884c\u4e86\uff0c\u800c expensive_test \u6ca1\u6709\u8fd0\u884c\uff1a $ cargo test Compiling adder v0.1.0 ( file:///projects/adder ) Finished test [ unoptimized + debuginfo ] target ( s ) in 0 .60s Running unittests ( target/debug/deps/adder-92948b65e88960b4 ) running 2 tests test expensive_test ... ignored test it_works ... ok test result: ok. 1 passed ; 0 failed ; 1 ignored ; 0 measured ; 0 filtered out ; finished in 0 .00s Doc-tests adder running 0 tests test result: ok. 0 passed ; 0 failed ; 0 ignored ; 0 measured ; 0 filtered out ; finished in 0 .00s expensive_test \u88ab\u5217\u4e3a ignored \uff0c\u5982\u679c\u6211\u4eec\u53ea\u5e0c\u671b\u8fd0\u884c\u88ab\u5ffd\u7565\u7684\u6d4b\u8bd5\uff0c\u53ef\u4ee5\u4f7f\u7528 cargo test -- --ignored \uff1a $ cargo test -- --ignored Compiling adder v0.1.0 ( file:///projects/adder ) Finished test [ unoptimized + debuginfo ] target ( s ) in 0 .61s Running unittests ( target/debug/deps/adder-92948b65e88960b4 ) running 1 test test expensive_test ... ok test result: ok. 1 passed ; 0 failed ; 0 ignored ; 0 measured ; 1 filtered out ; finished in 0 .00s Doc-tests adder running 0 tests test result: ok. 0 passed ; 0 failed ; 0 ignored ; 0 measured ; 0 filtered out ; finished in 0 .00s \u901a\u8fc7\u63a7\u5236\u8fd0\u884c\u54ea\u4e9b\u6d4b\u8bd5\uff0c\u4f60\u53ef\u4ee5\u786e\u4fdd\u80fd\u591f\u5feb\u901f\u5730\u8fd0\u884c cargo test \u3002 \u5f53\u4f60\u9700\u8981\u8fd0\u884c ignored \u7684\u6d4b\u8bd5\u65f6\uff0c\u53ef\u4ee5\u6267\u884c cargo test -- --ignored \u3002 \u5982\u679c\u4f60\u5e0c\u671b\u4e0d\u7ba1\u662f\u5426\u5ffd\u7565\u90fd\u8981\u8fd0\u884c\u5168\u90e8\u6d4b\u8bd5\uff0c\u53ef\u4ee5\u8fd0\u884c cargo test -- --include-ignored \u3002 \u6d4b\u8bd5\u7684\u7ec4\u7ec7\u7ed3\u6784 \u672c\u7ae0\u4e00\u5f00\u59cb\u5c31\u63d0\u5230\uff0c\u6d4b\u8bd5\u662f\u4e00\u4e2a\u590d\u6742\u7684\u6982\u5ff5\uff0c\u800c\u4e14\u4e0d\u540c\u7684\u5f00\u53d1\u8005\u4e5f\u91c7\u7528\u4e0d\u540c\u7684\u6280\u672f\u548c\u7ec4\u7ec7\u3002 Rust \u793e\u533a\u503e\u5411\u4e8e\u6839\u636e\u6d4b\u8bd5\u7684\u4e24\u4e2a\u4e3b\u8981\u5206\u7c7b\u6765\u8003\u8651\u95ee\u9898\uff1a \u5355\u5143\u6d4b\u8bd5 \uff08unit tests\uff09\u4e0e \u96c6\u6210\u6d4b\u8bd5 \uff08integration tests\uff09\u3002 \u5355\u5143\u6d4b\u8bd5\u503e\u5411\u4e8e\u66f4\u5c0f\u800c\u66f4\u96c6\u4e2d\uff0c\u5728\u9694\u79bb\u7684\u73af\u5883\u4e2d\u4e00\u6b21\u6d4b\u8bd5\u4e00\u4e2a\u6a21\u5757\uff0c\u6216\u8005\u662f\u6d4b\u8bd5\u79c1\u6709\u63a5\u53e3\u3002 \u800c\u96c6\u6210\u6d4b\u8bd5\u5bf9\u4e8e\u4f60\u7684\u5e93\u6765\u8bf4\u5219\u5b8c\u5168\u662f\u5916\u90e8\u7684\u3002\u5b83\u4eec\u4e0e\u5176\u4ed6\u5916\u90e8\u4ee3\u7801\u4e00\u6837\uff0c\u901a\u8fc7\u76f8\u540c\u7684\u65b9\u5f0f\u4f7f\u7528\u4f60\u7684\u4ee3\u7801\uff0c\u53ea\u6d4b\u8bd5\u516c\u6709\u63a5\u53e3\u800c\u4e14\u6bcf\u4e2a\u6d4b\u8bd5\u90fd\u6709\u53ef\u80fd\u4f1a\u6d4b\u8bd5\u591a\u4e2a\u6a21\u5757\u3002 \u4e3a\u4e86\u4fdd\u8bc1\u4f60\u7684\u5e93\u80fd\u591f\u6309\u7167\u4f60\u7684\u9884\u671f\u8fd0\u884c\uff0c\u4ece\u72ec\u7acb\u548c\u6574\u4f53\u7684\u89d2\u5ea6\u7f16\u5199\u8fd9\u4e24\u7c7b\u6d4b\u8bd5\u90fd\u662f\u975e\u5e38\u91cd\u8981\u7684\u3002 \u5355\u5143\u6d4b\u8bd5 \u5355\u5143\u6d4b\u8bd5\u7684\u76ee\u7684\u662f\u5728\u4e0e\u5176\u4ed6\u90e8\u5206\u9694\u79bb\u7684\u73af\u5883\u4e2d\u6d4b\u8bd5\u6bcf\u4e00\u4e2a\u5355\u5143\u7684\u4ee3\u7801\uff0c\u4ee5\u4fbf\u4e8e\u5feb\u901f\u800c\u51c6\u786e\u7684\u67d0\u4e2a\u5355\u5143\u7684\u4ee3\u7801\u529f\u80fd\u662f\u5426\u7b26\u5408\u9884\u671f\u3002 \u5355\u5143\u6d4b\u8bd5\u4e0e\u4ed6\u4eec\u8981\u6d4b\u8bd5\u7684\u4ee3\u7801\u5171\u540c\u5b58\u653e\u5728\u4f4d\u4e8e src \u76ee\u5f55\u4e0b\u76f8\u540c\u7684\u6587\u4ef6\u4e2d\u3002 \u89c4\u8303\u662f\u5728\u6bcf\u4e2a\u6587\u4ef6\u4e2d\u521b\u5efa\u5305\u542b\u6d4b\u8bd5\u51fd\u6570\u7684 tests \u6a21\u5757\uff0c\u5e76\u4f7f\u7528 cfg(test) \u6807\u6ce8\u6a21\u5757\u3002 \u6d4b\u8bd5\u6a21\u5757\u548c #[cfg(test)] \u6d4b\u8bd5\u6a21\u5757\u7684 #[cfg(test)] \u6ce8\u89e3\u544a\u8bc9 Rust \u53ea\u5728\u6267\u884c cargo test \u65f6\u624d\u7f16\u8bd1\u548c\u8fd0\u884c\u6d4b\u8bd5\u4ee3\u7801\uff0c\u800c\u5728\u8fd0\u884c cargo build \u65f6\u4e0d\u8fd9\u4e48\u505a\u3002 \u8fd9\u5728\u53ea\u5e0c\u671b\u6784\u5efa\u5e93\u7684\u65f6\u5019\u53ef\u4ee5\u8282\u7701\u7f16\u8bd1\u65f6\u95f4\uff0c\u5e76\u4e14\u56e0\u4e3a\u5b83\u4eec\u5e76\u6ca1\u6709\u5305\u542b\u6d4b\u8bd5\uff0c\u6240\u4ee5\u80fd\u51cf\u5c11\u7f16\u8bd1\u4ea7\u751f\u7684\u6587\u4ef6\u7684\u5927\u5c0f\u3002 \u4e0e\u4e4b\u5bf9\u5e94\u7684\u96c6\u6210\u6d4b\u8bd5\u56e0\u4e3a\u4f4d\u4e8e\u53e6\u4e00\u4e2a\u6587\u4ef6\u5939\uff0c\u6240\u4ee5\u5b83\u4eec\u5e76\u4e0d\u9700\u8981 #[cfg(test)] \u6ce8\u89e3\u3002 \u7136\u800c\u5355\u5143\u6d4b\u8bd5\u4f4d\u4e8e\u4e0e\u6e90\u7801\u76f8\u540c\u7684\u6587\u4ef6\u4e2d\uff0c\u6240\u4ee5\u4f60\u9700\u8981\u4f7f\u7528 #[cfg(test)] \u6765\u6307\u5b9a\u4ed6\u4eec\u4e0d\u5e94\u8be5\u88ab\u5305\u542b\u8fdb\u7f16\u8bd1\u7ed3\u679c\u4e2d\u3002 \u56de\u5fc6\u672c\u7ae0\u7b2c\u4e00\u90e8\u5206\u65b0\u5efa\u7684 adder \u9879\u76ee\uff0c Cargo \u4e3a\u6211\u4eec\u751f\u6210\u4e86\u5982\u4e0b\u4ee3\u7801\uff1a #[cfg(test)] mod tests { #[test] fn it_works () { assert_eq! ( 2 + 2 , 4 ); } } \u4e0a\u8ff0\u4ee3\u7801\u5c31\u662f\u81ea\u52a8\u751f\u6210\u7684\u6d4b\u8bd5\u6a21\u5757\u3002 cfg \u5c5e\u6027\u4ee3\u8868 configuration \uff0c\u5b83\u544a\u8bc9 Rust \u5176\u4e4b\u540e\u7684\u9879\u53ea\u5e94\u8be5\u88ab\u5305\u542b\u8fdb\u7279\u5b9a\u914d\u7f6e\u9009\u9879\u4e2d\u3002 \u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u914d\u7f6e\u9009\u9879\u662f test \uff0c\u5373 Rust \u6240\u63d0\u4f9b\u7684\u7528\u4e8e\u7f16\u8bd1\u548c\u8fd0\u884c\u6d4b\u8bd5\u7684\u914d\u7f6e\u9009\u9879\u3002 \u901a\u8fc7\u4f7f\u7528 cfg \u5c5e\u6027\uff0c Cargo \u53ea\u4f1a\u5728\u6211\u4eec\u4e3b\u52a8\u4f7f\u7528 cargo test \u8fd0\u884c\u6d4b\u8bd5\u65f6\u624d\u7f16\u8bd1\u6d4b\u8bd5\u4ee3\u7801\u3002\u8fd9\u5305\u62ec\u6d4b\u8bd5\u6a21\u5757\u4e2d\u53ef\u80fd\u5b58\u5728\u7684\u5e2e\u52a9\u51fd\u6570\uff0c \u4ee5\u53ca\u6807\u6ce8\u4e3a #[test] \u7684\u51fd\u6570\u3002 \u6d4b\u8bd5\u79c1\u6709\u51fd\u6570 \u6d4b\u8bd5\u793e\u533a\u4e2d\u4e00\u76f4\u5b58\u5728\u5173\u4e8e\u662f\u5426\u5e94\u8be5\u5bf9\u79c1\u6709\u51fd\u6570\u76f4\u63a5\u8fdb\u884c\u6d4b\u8bd5\u7684\u8bba\u6218\uff0c\u800c\u5728\u5176\u4ed6\u8bed\u8a00\u4e2d\u60f3\u8981\u6d4b\u8bd5\u79c1\u6709\u51fd\u6570\u662f\u4e00\u4ef6\u56f0\u96be\u7684\uff0c\u751a\u81f3\u662f\u4e0d\u53ef\u80fd\u7684\u4e8b\u3002 \u4e0d\u8fc7\u65e0\u8bba\u4f60\u575a\u6301\u54ea\u79cd\u6d4b\u8bd5\u610f\u8bc6\u5f62\u6001\uff0cRust \u7684\u79c1\u6709\u6027\u89c4\u5219\u786e\u5b9e\u5141\u8bb8\u4f60\u6d4b\u8bd5\u79c1\u6709\u51fd\u6570\u3002 \u8003\u8651\u793a\u4f8b\u4e2d\u5e26\u6709\u79c1\u6709\u51fd\u6570 internal_adder \u7684\u4ee3\u7801\uff1a pub fn add_two ( a : i32 ) -> i32 { internal_adder ( a , 2 ) } fn internal_adder ( a : i32 , b : i32 ) -> i32 { a + b } #[cfg(test)] mod tests { use super :: * ; #[test] fn internal () { assert_eq! ( 4 , internal_adder ( 2 , 2 )); } } \u6ce8\u610f internal_adder \u51fd\u6570\u5e76\u6ca1\u6709\u6807\u8bb0\u4e3a pub \u3002\u6d4b\u8bd5\u4e5f\u4e0d\u8fc7\u662f Rust \u4ee3\u7801\uff0c\u540c\u65f6 tests \u4e5f\u4ec5\u4ec5\u662f\u53e6\u4e00\u4e2a\u6a21\u5757\u3002 \u6b63\u5982 \u201c\u8def\u5f84\u7528\u4e8e\u5f15\u7528\u6a21\u5757\u6811\u4e2d\u7684\u9879\u201d \u90e8\u5206\u6240\u8bf4\uff0c\u5b50\u6a21\u5757\u7684\u9879\u53ef\u4ee5\u4f7f\u7528\u5176\u4e0a\u7ea7\u6a21\u5757\u7684\u9879\u3002 \u5728\u6d4b\u8bd5\u4e2d\uff0c\u6211\u4eec\u901a\u8fc7 use super:: \u5c06 test \u6a21\u5757\u7684\u7236\u6a21\u5757\u7684\u6240\u6709\u9879\u5f15\u5165\u4e86\u4f5c\u7528\u57df\uff0c\u63a5\u7740\u6d4b\u8bd5\u8c03\u7528\u4e86 internal_adder *\u3002 \u5982\u679c\u4f60\u5e76\u4e0d\u8ba4\u4e3a\u5e94\u8be5\u6d4b\u8bd5\u79c1\u6709\u51fd\u6570\uff0cRust \u4e5f\u4e0d\u4f1a\u5f3a\u8feb\u4f60\u8fd9\u4e48\u505a\u3002 \u96c6\u6210\u6d4b\u8bd5 \u5728 Rust \u4e2d\uff0c\u96c6\u6210\u6d4b\u8bd5\u5bf9\u4e8e\u4f60\u9700\u8981\u6d4b\u8bd5\u7684\u5e93\u6765\u8bf4\u5b8c\u5168\u662f\u5916\u90e8\u7684\u3002\u540c\u5176\u4ed6\u4f7f\u7528\u5e93\u7684\u4ee3\u7801\u4e00\u6837\u4f7f\u7528\u5e93\u6587\u4ef6\uff0c\u4e5f\u5c31\u662f\u8bf4\u5b83\u4eec\u53ea\u80fd\u8c03\u7528\u4e00\u90e8\u5206\u5e93\u4e2d\u7684\u516c\u6709 API \u3002 \u96c6\u6210\u6d4b\u8bd5\u7684\u76ee\u7684\u662f\u6d4b\u8bd5\u5e93\u7684\u591a\u4e2a\u90e8\u5206\u80fd\u5426\u4e00\u8d77\u6b63\u5e38\u5de5\u4f5c\u3002\u4e00\u4e9b\u5355\u72ec\u80fd\u6b63\u786e\u8fd0\u884c\u7684\u4ee3\u7801\u5355\u5143\u96c6\u6210\u5728\u4e00\u8d77\u4e5f\u53ef\u80fd\u4f1a\u51fa\u73b0\u95ee\u9898\uff0c\u6240\u4ee5\u96c6\u6210\u6d4b\u8bd5\u7684\u8986\u76d6\u7387\u4e5f\u662f\u5f88\u91cd\u8981\u7684\u3002 \u4e3a\u4e86\u521b\u5efa\u96c6\u6210\u6d4b\u8bd5\uff0c\u4f60\u9700\u8981\u5148\u521b\u5efa\u4e00\u4e2a tests \u76ee\u5f55\u3002 tests \u76ee\u5f55 \u4e3a\u4e86\u7f16\u5199\u96c6\u6210\u6d4b\u8bd5\uff0c\u9700\u8981\u5728\u9879\u76ee\u6839\u76ee\u5f55\u521b\u5efa\u4e00\u4e2a tests \u76ee\u5f55\uff0c\u4e0e src \u540c\u7ea7\u3002 Cargo \u77e5\u9053\u5982\u4f55\u53bb\u5bfb\u627e\u8fd9\u4e2a\u76ee\u5f55\u4e2d\u7684\u96c6\u6210\u6d4b\u8bd5\u6587\u4ef6\u3002\u63a5\u7740\u53ef\u4ee5\u968f\u610f\u5728\u8fd9\u4e2a\u76ee\u5f55\u4e2d\u521b\u5efa\u4efb\u610f\u591a\u7684\u6d4b\u8bd5\u6587\u4ef6\uff0cCargo \u4f1a\u5c06\u6bcf\u4e00\u4e2a\u6587\u4ef6\u5f53\u4f5c\u5355\u72ec\u7684 crate \u6765\u7f16\u8bd1\u3002 \u8ba9\u6211\u4eec\u6765\u521b\u5efa\u4e00\u4e2a\u96c6\u6210\u6d4b\u8bd5\u3002\u4fdd\u7559\u4e0a\u4e2a\u793a\u4f8b\u4e2d src/lib.rs \u7684\u4ee3\u7801\u3002\u521b\u5efa\u4e00\u4e2a tests \u76ee\u5f55\uff0c\u65b0\u5efa\u4e00\u4e2a\u6587\u4ef6 tests/integration_test.rs \uff0c\u5e76\u8f93\u5165\u4e0b\u9762\u793a\u4f8b\u4e2d\u7684\u4ee3\u7801\u3002 // \u6587\u4ef6\u540d: tests/integration_test.rs use adder ; #[test] fn it_adds_two () { assert_eq! ( 4 , adder :: add_two ( 2 )); } \u4e0e\u5355\u5143\u6d4b\u8bd5\u4e0d\u540c\uff0c\u6211\u4eec\u9700\u8981\u5728\u6587\u4ef6\u9876\u90e8\u6dfb\u52a0 use adder \u3002\u8fd9\u662f\u56e0\u4e3a\u6bcf\u4e00\u4e2a tests \u76ee\u5f55\u4e2d\u7684\u6d4b\u8bd5\u6587\u4ef6\u90fd\u662f\u5b8c\u5168\u72ec\u7acb\u7684 crate \uff0c\u6240\u4ee5\u9700\u8981\u5728\u6bcf\u4e00\u4e2a\u6587\u4ef6\u4e2d\u5bfc\u5165\u5e93\u3002 \u5e76\u4e0d\u9700\u8981\u5c06 tests/integration_test.rs \u4e2d\u7684\u4efb\u4f55\u4ee3\u7801\u6807\u6ce8\u4e3a #[cfg(test)] \u3002 tests \u6587\u4ef6\u5939\u5728 Cargo \u4e2d\u662f\u4e00\u4e2a\u7279\u6b8a\u7684\u6587\u4ef6\u5939\uff0c Cargo \u53ea\u4f1a\u5728\u8fd0\u884c cargo test \u65f6\u7f16\u8bd1\u8fd9\u4e2a\u76ee\u5f55\u4e2d\u7684\u6587\u4ef6\u3002\u73b0\u5728\u5c31\u8fd0\u884c cargo test \u8bd5\u8bd5\uff1a $ cargo test Compiling adder v0.1.0 ( file:///projects/adder ) Finished test [ unoptimized + debuginfo ] target ( s ) in 1 .31s Running unittests ( target/debug/deps/adder-1082c4b063a8fbe6 ) running 1 test test tests::internal ... ok test result: ok. 1 passed ; 0 failed ; 0 ignored ; 0 measured ; 0 filtered out ; finished in 0 .00s Running tests/integration_test.rs ( target/debug/deps/integration_test-1082c4b063a8fbe6 ) running 1 test test it_adds_two ... ok test result: ok. 1 passed ; 0 failed ; 0 ignored ; 0 measured ; 0 filtered out ; finished in 0 .00s Doc-tests adder running 0 tests test result: ok. 0 passed ; 0 failed ; 0 ignored ; 0 measured ; 0 filtered out ; finished in 0 .00s \u73b0\u5728\u6709\u4e86\u4e09\u4e2a\u90e8\u5206\u7684\u8f93\u51fa\uff1a \u5355\u5143\u6d4b\u8bd5 \u3001 \u96c6\u6210\u6d4b\u8bd5 \u548c \u6587\u6863\u6d4b\u8bd5 \u3002\u7b2c\u4e00\u90e8\u5206\u5355\u5143\u6d4b\u8bd5\u4e0e\u6211\u4eec\u4e4b\u524d\u89c1\u8fc7\u7684\u4e00\u6837\uff1a\u6bcf\u4e2a\u5355\u5143\u6d4b\u8bd5\u4e00\u884c\uff08\u793a\u4f8b\u4e2d\u6709\u4e00\u4e2a\u53eb\u505a internal \u7684\u6d4b\u8bd5\uff09\uff0c\u63a5\u7740\u662f\u4e00\u4e2a\u5355\u5143\u6d4b\u8bd5\u7684\u6458\u8981\u884c\u3002 \u96c6\u6210\u6d4b\u8bd5\u90e8\u5206\u4ee5\u884c Running target/debug/deps/integration-test-ce99bcc2479f4607 \uff08\u5728\u8f93\u51fa\u6700\u540e\u7684\u54c8\u5e0c\u503c\u53ef\u80fd\u4e0d\u540c\uff09\u5f00\u5934\u3002\u63a5\u4e0b\u6765\u6bcf\u4e00\u884c\u662f\u4e00\u4e2a\u96c6\u6210\u6d4b\u8bd5\u4e2d\u7684\u6d4b\u8bd5\u51fd\u6570\uff0c\u4ee5\u53ca\u4e00\u4e2a\u4f4d\u4e8e Doc-tests adder \u90e8\u5206\u4e4b\u524d\u7684\u96c6\u6210\u6d4b\u8bd5\u7684\u6458\u8981\u884c\u3002 \u6211\u4eec\u5df2\u7ecf\u77e5\u9053\uff0c\u5355\u5143\u6d4b\u8bd5\u51fd\u6570\u8d8a\u591a\uff0c\u5355\u5143\u6d4b\u8bd5\u90e8\u5206\u7684\u7ed3\u679c\u884c\u5c31\u4f1a\u8d8a\u591a\u3002\u540c\u6837\u7684\uff0c\u5728\u96c6\u6210\u6587\u4ef6\u4e2d\u589e\u52a0\u7684\u6d4b\u8bd5\u51fd\u6570\u8d8a\u591a\uff0c\u4e5f\u4f1a\u5728\u5bf9\u5e94\u7684\u6d4b\u8bd5\u7ed3\u679c\u90e8\u5206\u589e\u52a0\u8d8a\u591a\u7684\u7ed3\u679c\u884c\u3002\u6bcf\u4e00\u4e2a\u96c6\u6210\u6d4b\u8bd5\u6587\u4ef6\u6709\u5bf9\u5e94\u7684\u6d4b\u8bd5\u7ed3\u679c\u90e8\u5206\uff0c\u6240\u4ee5\u5982\u679c\u5728 tests \u76ee\u5f55\u4e2d\u589e\u52a0\u66f4\u591a\u6587\u4ef6\uff0c\u6d4b\u8bd5\u7ed3\u679c\u4e2d\u5c31\u4f1a\u6709\u66f4\u591a\u96c6\u6210\u6d4b\u8bd5\u7ed3\u679c\u90e8\u5206\u3002 \u6211\u4eec\u4ecd\u7136\u53ef\u4ee5\u901a\u8fc7\u6307\u5b9a\u6d4b\u8bd5\u51fd\u6570\u7684\u540d\u79f0\u4f5c\u4e3a cargo test \u7684\u53c2\u6570\u6765\u8fd0\u884c\u7279\u5b9a\u96c6\u6210\u6d4b\u8bd5\u3002\u4e5f\u53ef\u4ee5\u4f7f\u7528 cargo test \u7684 --test \u540e\u8ddf\u6587\u4ef6\u7684\u540d\u79f0\u6765\u8fd0\u884c\u67d0\u4e2a\u7279\u5b9a\u96c6\u6210\u6d4b\u8bd5\u6587\u4ef6\u4e2d\u7684\u6240\u6709\u6d4b\u8bd5\uff1a $ cargo test -- test integration_test Compiling adder v0 . 1.0 ( file : ///projects/adder) Finished test [ unoptimized + debuginfo ] target ( s ) in 0.64 s Running tests / integration_test . rs ( target / debug / deps / integration_test - 82e7799 c1bc62298 ) running 1 test test it_adds_two .. . ok test result : ok . 1 passed ; 0 failed ; 0 ignored ; 0 measured ; 0 filtered out ; finished in 0.00 s \u8fd9\u4e2a\u547d\u4ee4\u53ea\u8fd0\u884c\u4e86 tests \u76ee\u5f55\u4e2d\u6211\u4eec\u6307\u5b9a\u7684\u6587\u4ef6 integration_test.rs \u4e2d\u7684\u6d4b\u8bd5\u3002 \u96c6\u6210\u6d4b\u8bd5\u4e2d\u7684\u5b50\u6a21\u5757 \u968f\u7740\u96c6\u6210\u6d4b\u8bd5\u7684\u589e\u52a0\uff0c\u4f60\u53ef\u80fd\u5e0c\u671b\u5728 tests \u76ee\u5f55\u589e\u52a0\u66f4\u591a\u6587\u4ef6\u4ee5\u4fbf\u66f4\u597d\u7684\u7ec4\u7ec7\u4ed6\u4eec\uff0c\u4f8b\u5982\u6839\u636e\u6d4b\u8bd5\u7684\u529f\u80fd\u6765\u5c06\u6d4b\u8bd5\u5206\u7ec4\u3002\u6b63\u5982\u6211\u4eec\u4e4b\u524d\u63d0\u5230\u7684\uff0c\u6bcf\u4e00\u4e2a tests \u76ee\u5f55\u4e2d\u7684\u6587\u4ef6\u90fd\u88ab\u7f16\u8bd1\u4e3a\u5355\u72ec\u7684 crate\u3002 \u5c06\u6bcf\u4e2a\u96c6\u6210\u6d4b\u8bd5\u6587\u4ef6\u5f53\u4f5c\u5176\u81ea\u5df1\u7684 crate \u6765\u5bf9\u5f85\uff0c\u8fd9\u66f4\u6709\u52a9\u4e8e\u521b\u5efa\u5355\u72ec\u7684\u4f5c\u7528\u57df\uff0c\u8fd9\u79cd\u5355\u72ec\u7684\u4f5c\u7528\u57df\u80fd\u63d0\u4f9b\u66f4\u7c7b\u4f3c\u4e0e\u6700\u7ec8\u4f7f\u7528\u8005\u4f7f\u7528 crate \u7684\u73af\u5883\u3002\u7136\u800c\uff0c\u6b63\u5982\u4f60\u5728\u7b2c\u4e03\u7ae0\u4e2d\u5b66\u4e60\u7684\u5982\u4f55\u5c06\u4ee3\u7801\u5206\u4e3a\u6a21\u5757\u548c\u6587\u4ef6\u7684\u77e5\u8bc6\uff0c tests \u76ee\u5f55\u4e2d\u7684\u6587\u4ef6\u4e0d\u80fd\u50cf src \u4e2d\u7684\u6587\u4ef6\u90a3\u6837\u5171\u4eab\u76f8\u540c\u7684\u884c\u4e3a\u3002 \u5f53\u4f60\u6709\u4e00\u4e9b\u5728\u591a\u4e2a\u96c6\u6210\u6d4b\u8bd5\u6587\u4ef6\u90fd\u4f1a\u7528\u5230\u7684\u5e2e\u52a9\u51fd\u6570\uff0c\u800c\u4f60\u5c1d\u8bd5\u6309\u7167\u7b2c\u4e03\u7ae0 \u201c\u5c06\u6a21\u5757\u79fb\u52a8\u5230\u5176\u4ed6\u6587\u4ef6\u201d \u90e8\u5206\u7684\u6b65\u9aa4\u5c06\u4ed6\u4eec\u63d0\u53d6\u5230\u4e00\u4e2a\u901a\u7528\u7684\u6a21\u5757\u4e2d\u65f6\uff0c tests \u76ee\u5f55\u4e2d\u4e0d\u540c\u6587\u4ef6\u7684\u884c\u4e3a\u5c31\u4f1a\u663e\u5f97\u5f88\u660e\u663e\u3002\u4f8b\u5982\uff0c\u5982\u679c\u6211\u4eec\u53ef\u4ee5\u521b\u5efa \u4e00\u4e2a tests/common.rs \u6587\u4ef6\u5e76\u521b\u5efa\u4e00\u4e2a\u540d\u53eb setup \u7684\u51fd\u6570\uff0c\u6211\u4eec\u5e0c\u671b\u8fd9\u4e2a\u51fd\u6570\u80fd\u88ab\u591a\u4e2a\u6d4b\u8bd5\u6587\u4ef6\u7684\u6d4b\u8bd5\u51fd\u6570\u8c03\u7528\uff1a // \u6587\u4ef6\u540d: tests/common.rs pub fn setup () { // setup code specific to your library's tests would go here } \u5982\u679c\u518d\u6b21\u8fd0\u884c\u6d4b\u8bd5\uff0c\u5c06\u4f1a\u5728\u6d4b\u8bd5\u7ed3\u679c\u4e2d\u770b\u5230\u4e00\u4e2a\u65b0\u7684\u5bf9\u5e94 common.rs \u6587\u4ef6\u7684\u6d4b\u8bd5\u7ed3\u679c\u90e8\u5206\uff0c\u5373\u4fbf\u8fd9\u4e2a\u6587\u4ef6\u5e76\u6ca1\u6709\u5305\u542b\u4efb\u4f55\u6d4b\u8bd5\u51fd\u6570\uff0c\u4e5f\u6ca1\u6709\u4efb\u4f55\u5730\u65b9\u8c03\u7528\u4e86 setup \u51fd\u6570\uff1a $ cargo test Compiling adder v0.1.0 ( file:///projects/adder ) Finished test [ unoptimized + debuginfo ] target ( s ) in 0 .89s Running unittests ( target/debug/deps/adder-92948b65e88960b4 ) running 1 test test tests::internal ... ok test result: ok. 1 passed ; 0 failed ; 0 ignored ; 0 measured ; 0 filtered out ; finished in 0 .00s Running tests/common.rs ( target/debug/deps/common-92948b65e88960b4 ) running 0 tests test result: ok. 0 passed ; 0 failed ; 0 ignored ; 0 measured ; 0 filtered out ; finished in 0 .00s Running tests/integration_test.rs ( target/debug/deps/integration_test-92948b65e88960b4 ) running 1 test test it_adds_two ... ok test result: ok. 1 passed ; 0 failed ; 0 ignored ; 0 measured ; 0 filtered out ; finished in 0 .00s Doc-tests adder running 0 tests test result: ok. 0 passed ; 0 failed ; 0 ignored ; 0 measured ; 0 filtered out ; finished in 0 .00s \u6211\u4eec\u5e76\u4e0d\u60f3\u8981 common \u51fa\u73b0\u5728\u6d4b\u8bd5\u7ed3\u679c\u4e2d\u663e\u793a running 0 tests \u3002\u6211\u4eec\u53ea\u662f\u5e0c\u671b\u5176\u80fd\u88ab\u5176\u4ed6\u591a\u4e2a\u96c6\u6210\u6d4b\u8bd5\u6587\u4ef6\u4e2d\u8c03\u7528\u7f62\u4e86\u3002 \u4e3a\u4e86\u4e0d\u8ba9 common \u51fa\u73b0\u5728\u6d4b\u8bd5\u8f93\u51fa\u4e2d\uff0c\u6211\u4eec\u5c06\u521b\u5efa tests/common/mod.rs \uff0c\u800c\u4e0d\u662f\u521b\u5efa tests/common.rs \u3002 \u8fd9\u662f\u4e00\u79cd Rust \u7684\u547d\u540d\u89c4\u8303\uff0c\u8fd9\u6837\u547d\u540d\u544a\u8bc9 Rust \u4e0d\u8981\u5c06 common \u770b\u4f5c\u4e00\u4e2a\u96c6\u6210\u6d4b\u8bd5\u6587\u4ef6\u3002 \u5c06 setup \u51fd\u6570\u4ee3\u7801\u79fb\u52a8\u5230 tests/common/mod.rs \u5e76\u5220\u9664 tests/common.rs \u6587\u4ef6\u4e4b\u540e\uff0c\u6d4b\u8bd5\u8f93\u51fa\u4e2d\u5c06\u4e0d\u4f1a\u51fa\u73b0\u8fd9\u4e00\u90e8\u5206\u3002 tests \u76ee\u5f55\u4e2d\u7684\u5b50\u76ee\u5f55\u4e0d\u4f1a\u88ab\u4f5c\u4e3a\u5355\u72ec\u7684 crate \u7f16\u8bd1\u6216\u4f5c\u4e3a\u4e00\u4e2a\u6d4b\u8bd5\u7ed3\u679c\u90e8\u5206\u51fa\u73b0\u5728\u6d4b\u8bd5\u8f93\u51fa\u4e2d\u3002 \u4e00\u65e6\u62e5\u6709\u4e86 tests/common/mod.rs \uff0c\u5c31\u53ef\u4ee5\u5c06\u5176\u4f5c\u4e3a\u6a21\u5757\u4ee5\u4fbf\u5728\u4efb\u4f55\u96c6\u6210\u6d4b\u8bd5\u6587\u4ef6\u4e2d\u4f7f\u7528\u3002 \u8fd9\u91cc\u662f\u4e00\u4e2a tests/integration_test.rs \u4e2d\u8c03\u7528 setup \u51fd\u6570\u7684 it_adds_two \u6d4b\u8bd5\u7684\u4f8b\u5b50\uff1a // \u6587\u4ef6\u540d: tests/integration_test.rs use adder ; mod common ; #[test] fn it_adds_two () { common :: setup (); assert_eq! ( 4 , adder :: add_two ( 2 )); } \u6ce8\u610f mod common; \u58f0\u660e\u4e0e\u4e0a\u9762\u793a\u4f8b\u4e2d\u5c55\u793a\u7684\u6a21\u5757\u58f0\u660e\u76f8\u540c\u3002\u63a5\u7740\u5728\u6d4b\u8bd5\u51fd\u6570\u4e2d\u5c31\u53ef\u4ee5\u8c03\u7528 common::setup() \u4e86\u3002 \u4e8c\u8fdb\u5236 crate \u7684\u96c6\u6210\u6d4b\u8bd5 \u5982\u679c\u9879\u76ee\u662f\u4e8c\u8fdb\u5236 crate \u5e76\u4e14\u53ea\u5305\u542b src/main.rs \u800c\u6ca1\u6709 src/lib.rs \uff0c\u8fd9\u6837\u5c31\u4e0d\u53ef\u80fd\u5728 tests \u76ee\u5f55\u521b\u5efa\u96c6\u6210\u6d4b\u8bd5\u5e76\u4f7f\u7528 extern crate \u5bfc\u5165 src/main.rs \u4e2d\u5b9a\u4e49\u7684\u51fd\u6570\u3002 \u53ea\u6709\u5e93 crate \u624d\u4f1a\u5411\u5176\u4ed6 crate \u66b4\u9732\u4e86\u53ef\u4f9b\u8c03\u7528\u548c\u4f7f\u7528\u7684\u51fd\u6570\uff1b\u4e8c\u8fdb\u5236 crate \u53ea\u610f\u5728\u5355\u72ec\u8fd0\u884c\u3002 \u8fd9\u5c31\u662f\u8bb8\u591a Rust \u4e8c\u8fdb\u5236\u9879\u76ee\u4f7f\u7528\u4e00\u4e2a\u7b80\u5355\u7684 src/main.rs \u8c03\u7528 src/lib.rs \u4e2d\u7684\u903b\u8f91\u7684\u539f\u56e0\u4e4b\u4e00\u3002 \u56e0\u4e3a\u901a\u8fc7\u8fd9\u79cd\u7ed3\u6784\uff0c \u96c6\u6210\u6d4b\u8bd5 \u5c31\u53ef\u4ee5 \u901a\u8fc7 extern crate \u6d4b\u8bd5\u5e93 crate \u4e2d\u7684\u4e3b\u8981\u529f\u80fd\u4e86\uff0c\u800c\u5982\u679c\u8fd9\u4e9b\u91cd\u8981\u7684\u529f\u80fd\u6ca1\u6709\u95ee\u9898\u7684\u8bdd\uff0c src/main.rs \u4e2d\u7684\u5c11\u91cf\u4ee3\u7801\u4e5f\u5c31\u4f1a\u6b63\u5e38\u5de5\u4f5c\u4e14\u4e0d\u9700\u8981\u6d4b\u8bd5\u3002 \u603b\u7ed3 Rust \u7684\u6d4b\u8bd5\u529f\u80fd\u63d0\u4f9b\u4e86\u4e00\u4e2a\u786e\u4fdd\u5373\u4f7f\u4f60\u6539\u53d8\u4e86\u51fd\u6570\u7684\u5b9e\u73b0\u65b9\u5f0f\uff0c\u4e5f\u80fd\u7ee7\u7eed\u4ee5\u671f\u671b\u7684\u65b9\u5f0f\u8fd0\u884c\u7684\u9014\u5f84\u3002 \u5355\u5143\u6d4b\u8bd5\u72ec\u7acb\u5730\u9a8c\u8bc1\u5e93\u7684\u4e0d\u540c\u90e8\u5206\uff0c\u4e5f\u80fd\u591f\u6d4b\u8bd5\u79c1\u6709\u51fd\u6570\u5b9e\u73b0\u7ec6\u8282\u3002 \u96c6\u6210\u6d4b\u8bd5\u5219\u68c0\u67e5\u591a\u4e2a\u90e8\u5206\u662f\u5426\u80fd\u7ed3\u5408\u8d77\u6765\u6b63\u786e\u5730\u5de5\u4f5c\uff0c\u5e76\u50cf\u5176\u4ed6\u5916\u90e8\u4ee3\u7801\u90a3\u6837\u6d4b\u8bd5\u5e93\u7684\u516c\u6709 API\u3002 \u5373\u4f7f Rust \u7684\u7c7b\u578b\u7cfb\u7edf\u548c\u6240\u6709\u6743\u89c4\u5219\u53ef\u4ee5\u5e2e\u52a9\u907f\u514d\u4e00\u4e9b bug\uff0c\u4e0d\u8fc7\u6d4b\u8bd5\u5bf9\u4e8e\u51cf\u5c11\u4ee3\u7801\u4e2d\u4e0d\u7b26\u5408\u671f\u671b\u884c\u4e3a\u7684\u903b\u8f91 bug \u4ecd\u7136\u662f\u5f88\u91cd\u8981\u7684\u3002","title":"\u7f16\u5199\u6d4b\u8bd5"},{"location":"testing/#_1","text":"Edsger W. Dijkstra \u5728\u5176 1972 \u5e74\u7684\u6587\u7ae0\u3010\u8c26\u5351\u7684\u7a0b\u5e8f\u5458\u3011\uff08\u201cThe Humble Programmer\u201d\uff09\u4e2d\u8bf4\u5230 \u201c\u8f6f\u4ef6\u6d4b\u8bd5\u53ef\u80fd\u662f\u663e\u793a\u9519\u8bef\u5b58\u5728\u7684\u4e00\u79cd\u975e\u5e38\u6709\u6548\u7684\u65b9\u6cd5\uff0c\u4f46\u5bf9\u4e8e\u663e\u793a\u9519\u8bef\u7684(\u6d4b\u8bd5)\u5b58\u5728\u5374\u8fdc\u8fdc\u4e0d\u591f\u3002\u201d\uff08\u201cProgram testing can be a very effective way to show the presence of bugs, but it is hopelessly inadequate for showing their absence.\u201d\uff09\u8fd9\u5e76\u4e0d\u610f\u5473\u7740\u6211\u4eec\u4e0d\u8be5\u5c3d\u53ef\u80fd\u5730\u6d4b\u8bd5\u8f6f\u4ef6\uff01 \u7a0b\u5e8f\u7684\u6b63\u786e\u6027\u610f\u5473\u7740\u4ee3\u7801\u5982\u6211\u4eec\u671f\u671b\u7684\u90a3\u6837\u8fd0\u884c\u3002Rust \u662f\u4e00\u4e2a\u76f8\u5f53\u6ce8\u91cd\u6b63\u786e\u6027\u7684\u7f16\u7a0b\u8bed\u8a00\uff0c\u4e0d\u8fc7\u6b63\u786e\u6027\u662f\u4e00\u4e2a\u96be\u4ee5\u8bc1\u660e\u7684\u590d\u6742\u4e3b\u9898\u3002Rust \u7684\u7c7b\u578b\u7cfb\u7edf\u5728\u6b64\u95ee\u9898\u4e0a\u4e0b\u4e86\u5f88\u5927\u7684\u529f\u592b\uff0c\u4e0d\u8fc7\u5b83\u4e0d\u53ef\u80fd\u6355\u83b7\u6240\u6709\u79cd\u7c7b\u7684\u9519\u8bef\u3002\u4e3a\u6b64\uff0c Rust \u4e5f\u5728\u8bed\u8a00\u672c\u8eab\u5305\u542b\u4e86\u7f16\u5199\u8f6f\u4ef6\u6d4b\u8bd5\u7684\u652f\u6301\u3002 \u4f8b\u5982\uff0c\u6211\u4eec\u53ef\u4ee5\u7f16\u5199\u4e00\u4e2a\u53eb\u505a add_two \u7684\u51fd\u6570\uff0c\u4f5c\u7528\u662f\u5c06\u4f20\u9012\u7ed9\u5b83\u7684\u503c\u52a0\u4e8c\u7684\u51fd\u6570\u3002\u5b83\u7684\u7b7e\u540d\u6709\u4e00\u4e2a\u6574\u578b\u53c2\u6570\u5e76\u8fd4\u56de\u4e00\u4e2a\u6574\u578b\u503c\u3002\u5f53\u5b9e\u73b0\u548c\u7f16\u8bd1\u8fd9\u4e2a\u51fd\u6570\u65f6\uff0cRust \u4f1a\u8fdb\u884c\u6240\u6709\u76ee\u524d\u6211\u4eec\u5df2\u7ecf\u89c1\u8fc7\u7684\u7c7b\u578b\u68c0\u67e5\u548c\u501f\u7528\u68c0\u67e5\uff0c\u4f8b\u5982\uff0c\u8fd9\u4e9b\u68c0\u67e5\u4f1a\u786e\u4fdd\u6211\u4eec\u4e0d\u4f1a\u4f20\u9012 String \u6216\u65e0\u6548\u7684\u5f15\u7528\u7ed9\u8fd9\u4e2a\u51fd\u6570\u3002Rust \u6240 \u4e0d\u80fd \u68c0\u67e5\u7684\u662f\u8fd9\u4e2a\u51fd\u6570\u662f\u5426\u4f1a\u51c6\u786e\u7684\u5b8c\u6210\u6211\u4eec\u671f\u671b\u7684\u5de5\u4f5c\uff1a\u8fd4\u56de\u53c2\u6570\u52a0\u4e8c\u540e\u7684\u503c\uff0c\u800c\u4e0d\u662f\u6bd4\u5982\u8bf4\u53c2\u6570\u52a0 10 \u6216\u51cf 50 \u7684\u503c\uff01\u8fd9\u4e5f\u5c31\u662f\u6d4b\u8bd5\u51fa\u573a\u7684\u5730\u65b9\u3002 \u6211\u4eec\u53ef\u4ee5\u7f16\u5199\u6d4b\u8bd5\u65ad\u8a00\uff0c\u6bd4\u5982\u8bf4\uff0c\u5f53\u4f20\u9012 3 \u7ed9 add_two \u51fd\u6570\u65f6\uff0c\u8fd4\u56de\u503c\u662f 5 \u3002 \u65e0\u8bba\u4f55\u65f6\u5bf9\u4ee3\u7801\u8fdb\u884c\u4fee\u6539\uff0c\u90fd\u53ef\u4ee5\u8fd0\u884c\u6d4b\u8bd5\u6765\u786e\u4fdd\u4efb\u4f55\u73b0\u5b58\u7684\u6b63\u786e\u884c\u4e3a\u6ca1\u6709\u88ab\u6539\u53d8\u3002 \u6d4b\u8bd5\u662f\u4e00\u9879\u590d\u6742\u7684\u6280\u80fd\uff1a\u867d\u7136\u4e0d\u80fd\u5728\u4e00\u4e2a\u7ae0\u8282\u7684\u7bc7\u5e45\u4e2d\u4ecb\u7ecd\u5982\u4f55\u7f16\u5199\u597d\u7684\u6d4b\u8bd5\u7684\u6bcf\u4e2a\u7ec6\u8282\uff0c\u4f46\u6211\u4eec\u8fd8\u662f\u4f1a\u8ba8\u8bba Rust \u6d4b\u8bd5\u529f\u80fd\u7684\u673a\u5236\u3002\u6211\u4eec\u4f1a\u8bb2\u5230\u7f16\u5199\u6d4b\u8bd5\u65f6\u4f1a\u7528\u5230\u7684\u6ce8\u89e3\u548c\u5b8f\uff0c\u8fd0\u884c\u6d4b\u8bd5\u7684\u9ed8\u8ba4\u884c\u4e3a\u548c\u9009\u9879\uff0c\u4ee5\u53ca\u5982\u4f55\u5c06\u6d4b\u8bd5\u7ec4\u7ec7\u6210\u5355\u5143\u6d4b\u8bd5\u548c\u96c6\u6210\u6d4b\u8bd5\u3002","title":"\u7f16\u5199\u6d4b\u8bd5"},{"location":"testing/#_2","text":"Rust \u4e2d\u7684\u6d4b\u8bd5\u51fd\u6570\u662f\u7528\u6765\u9a8c\u8bc1\u975e\u6d4b\u8bd5\u4ee3\u7801\u662f\u5426\u6309\u7167\u671f\u671b\u7684\u65b9\u5f0f\u8fd0\u884c\u7684\u3002\u6d4b\u8bd5\u51fd\u6570\u4f53\u901a\u5e38\u6267\u884c\u5982\u4e0b\u4e09\u79cd\u64cd\u4f5c\uff1a \u8bbe\u7f6e\u4efb\u4f55\u6240\u9700\u7684\u6570\u636e\u6216\u72b6\u6001 \u8fd0\u884c\u9700\u8981\u6d4b\u8bd5\u7684\u4ee3\u7801 \u65ad\u8a00\u5176\u7ed3\u679c\u662f\u6211\u4eec\u6240\u671f\u671b\u7684 Rust \u63d0\u4f9b\u7684\u4e13\u95e8\u7528\u6765\u7f16\u5199\u6d4b\u8bd5\u7684\u529f\u80fd\uff1a test \u5c5e\u6027\u3001\u4e00\u4e9b \u5b8f \u548c should_panic \u5c5e\u6027\u3002","title":"\u5982\u4f55\u7f16\u5199"},{"location":"testing/#_3","text":"\u4f5c\u4e3a\u6700\u7b80\u5355\u4f8b\u5b50\uff0cRust \u4e2d\u7684\u6d4b\u8bd5\u5c31\u662f\u4e00\u4e2a\u5e26\u6709 test \u5c5e\u6027\u6ce8\u89e3\u7684\u51fd\u6570\u3002 \u5c5e\u6027 \uff08attribute\uff09\u662f\u5173\u4e8e Rust \u4ee3\u7801\u7247\u6bb5\u7684\u5143\u6570\u636e\uff1b\u7b2c\u4e94\u7ae0\u4e2d\u7ed3\u6784\u4f53\u4e2d\u7528\u5230\u7684 derive \u5c5e\u6027\u5c31\u662f\u4e00\u4e2a\u4f8b\u5b50\u3002\u4e3a\u4e86\u5c06\u4e00\u4e2a\u51fd\u6570\u53d8\u6210\u6d4b\u8bd5\u51fd\u6570\uff0c\u9700\u8981\u5728 fn \u884c\u4e4b\u524d\u52a0\u4e0a #[test] \u3002\u5f53\u4f7f\u7528 cargo test \u547d\u4ee4\u8fd0\u884c\u6d4b\u8bd5\u65f6\uff0cRust \u4f1a\u6784\u5efa\u4e00\u4e2a\u6d4b\u8bd5\u6267\u884c\u7a0b\u5e8f\u7528\u6765\u8c03\u7528\u6807\u8bb0\u4e86 test \u5c5e\u6027\u7684\u51fd\u6570\uff0c\u5e76\u62a5\u544a\u6bcf\u4e00\u4e2a\u6d4b\u8bd5\u662f\u901a\u8fc7\u8fd8\u662f\u5931\u8d25\u3002 \u7b2c\u4e03\u7ae0\u5f53\u4f7f\u7528 Cargo \u65b0\u5efa\u4e00\u4e2a\u5e93\u9879\u76ee\u65f6\uff0c\u5b83\u4f1a\u81ea\u52a8\u4e3a\u6211\u4eec\u751f\u6210\u4e00\u4e2a\u6d4b\u8bd5\u6a21\u5757\u548c\u4e00\u4e2a\u6d4b\u8bd5\u51fd\u6570\u3002\u8fd9\u6709\u52a9\u4e8e\u6211\u4eec\u5f00\u59cb\u7f16\u5199\u6d4b\u8bd5\uff0c\u56e0\u4e3a\u8fd9\u6837\u6bcf\u6b21\u5f00\u59cb\u65b0\u9879\u76ee\u65f6\u4e0d\u5fc5\u53bb\u67e5\u627e\u6d4b\u8bd5\u51fd\u6570\u7684\u5177\u4f53\u7ed3\u6784\u548c\u8bed\u6cd5\u4e86\u3002\u5f53\u7136\u4f60\u4e5f\u53ef\u4ee5\u989d\u5916\u589e\u52a0\u4efb\u610f\u591a\u7684\u6d4b\u8bd5\u51fd\u6570\u4ee5\u53ca\u6d4b\u8bd5\u6a21\u5757\uff01 \u6211\u4eec\u4f1a\u901a\u8fc7\u5b9e\u9a8c\u90a3\u4e9b\u81ea\u52a8\u751f\u6210\u7684\u6d4b\u8bd5\u6a21\u7248\u800c\u4e0d\u662f\u5b9e\u9645\u7f16\u5199\u6d4b\u8bd5\u4ee3\u7801\u6765\u63a2\u7d22\u6d4b\u8bd5\u5982\u4f55\u5de5\u4f5c\u7684\u4e00\u4e9b\u65b9\u9762\u3002\u63a5\u7740\uff0c\u6211\u4eec\u4f1a\u5199\u4e00\u4e9b\u771f\u6b63\u7684\u6d4b\u8bd5\uff0c\u8c03\u7528\u6211\u4eec\u7f16\u5199\u7684\u4ee3\u7801\u5e76\u65ad\u8a00\u4ed6\u4eec\u7684\u884c\u4e3a\u7684\u6b63\u786e\u6027\u3002 \u8ba9\u6211\u4eec\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u5e93\u9879\u76ee adder \uff1a $ cargo new adder -- lib Created library ` adder ` project $ cd adder adder \u5e93\u4e2d src/lib.rs \u7684\u5185\u5bb9\u5e94\u8be5\u770b\u8d77\u6765\u5982\u793a\u4f8b\u6240\u793a\uff1a // \u7531 cargo new \u81ea\u52a8\u751f\u6210\u7684\u6d4b\u8bd5\u6a21\u5757\u548c\u51fd\u6570 #[cfg(test)] mod tests { #[test] fn it_works () { assert_eq! ( 2 + 2 , 4 ); } } \u73b0\u5728\u8ba9\u6211\u4eec\u6682\u65f6\u5ffd\u7565 tests \u6a21\u5757\u548c #[cfg(test)] \u6ce8\u89e3\uff0c\u5e76\u53ea\u5173\u6ce8\u51fd\u6570\u6765\u4e86\u89e3\u5176\u5982\u4f55\u5de5\u4f5c\u3002\u6ce8\u610f fn \u884c\u4e4b\u524d\u7684 #[test] \uff1a \u8fd9\u4e2a\u5c5e\u6027\u8868\u660e\u8fd9\u662f\u4e00\u4e2a\u6d4b\u8bd5\u51fd\u6570\uff0c\u8fd9\u6837\u6d4b\u8bd5\u6267\u884c\u8005\u5c31\u77e5\u9053\u5c06\u5176\u4f5c\u4e3a\u6d4b\u8bd5\u5904\u7406 \u3002\u56e0\u4e3a\u4e5f\u53ef\u4ee5\u5728 tests \u6a21\u5757\u4e2d\u62e5\u6709\u975e\u6d4b\u8bd5\u7684\u51fd\u6570\u6765\u5e2e\u52a9\u6211\u4eec\u5efa\u7acb\u901a\u7528\u573a\u666f\u6216\u8fdb\u884c\u5e38\u89c1\u64cd\u4f5c\uff0c\u6240\u4ee5\u9700\u8981\u4f7f\u7528 #[test] \u5c5e\u6027\u6807\u660e\u54ea\u4e9b\u51fd\u6570\u662f\u6d4b\u8bd5\u3002 \u51fd\u6570\u4f53\u901a\u8fc7\u4f7f\u7528 assert_eq! \u5b8f\u6765\u65ad\u8a00 2 \u52a0 2 \u7b49\u4e8e 4 \u3002\u4e00\u4e2a\u5178\u578b\u7684\u6d4b\u8bd5\u7684\u683c\u5f0f\uff0c\u5c31\u662f\u50cf\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\u7684\u65ad\u8a00\u4e00\u6837\u3002\u63a5\u4e0b\u6765\u8fd0\u884c\u5c31\u53ef\u4ee5\u770b\u5230\u6d4b\u8bd5\u901a\u8fc7\u3002 cargo test \u547d\u4ee4\u4f1a\u8fd0\u884c\u9879\u76ee\u4e2d\u6240\u6709\u7684\u6d4b\u8bd5\uff0c\u5982\u793a\u4f8b\u6240\u793a\uff1a # \u8fd0\u884c\u81ea\u52a8\u751f\u6210\u6d4b\u8bd5\u7684\u8f93\u51fa $ cargo test Compiling adder v0.1.0 ( file:///projects/adder ) Finished test [ unoptimized + debuginfo ] target ( s ) in 0 .57s Running unittests ( target/debug/deps/adder-92948b65e88960b4 ) running 1 test test tests::it_works ... ok test result: ok. 1 passed ; 0 failed ; 0 ignored ; 0 measured ; 0 filtered out ; finished in 0 .00s Doc-tests adder running 0 tests test result: ok. 0 passed ; 0 failed ; 0 ignored ; 0 measured ; 0 filtered out ; finished in 0 .00s Cargo \u7f16\u8bd1\u5e76\u8fd0\u884c\u4e86\u6d4b\u8bd5\u3002\u5728 Compiling \u3001 Finished \u548c Running \u8fd9\u51e0\u884c\u4e4b\u540e\uff0c\u53ef\u4ee5\u770b\u5230 running 1 test \u8fd9\u4e00\u884c\u3002 \u4e0b\u4e00\u884c\u663e\u793a\u4e86\u751f\u6210\u7684\u6d4b\u8bd5\u51fd\u6570\u7684\u540d\u79f0\uff0c\u5b83\u662f it_works \uff0c\u4ee5\u53ca\u6d4b\u8bd5\u7684\u8fd0\u884c\u7ed3\u679c\uff0c ok \u3002\u63a5\u7740\u53ef\u4ee5\u770b\u5230\u5168\u4f53\u6d4b\u8bd5\u8fd0\u884c\u7ed3\u679c\u7684\u6458\u8981\uff1a test result: ok . \u610f\u5473\u7740\u6240\u6709\u6d4b\u8bd5\u90fd\u901a\u8fc7\u4e86\u3002 1 passed; 0 failed \u8868\u793a\u901a\u8fc7\u6216\u5931\u8d25\u7684\u6d4b\u8bd5\u6570\u91cf\u3002 \u56e0\u4e3a\u4e4b\u524d\u6211\u4eec\u5e76\u6ca1\u6709\u5c06\u4efb\u4f55\u6d4b\u8bd5\u6807\u8bb0\u4e3a\u5ffd\u7565\uff0c\u6240\u4ee5\u6458\u8981\u4e2d\u4f1a\u663e\u793a 0 ignored \u3002\u6211\u4eec\u4e5f\u6ca1\u6709\u8fc7\u6ee4\u9700\u8981\u8fd0\u884c\u7684\u6d4b\u8bd5\uff0c\u6240\u4ee5\u6458\u8981\u4e2d\u4f1a\u663e\u793a 0 filtered out \u3002\u5728\u4e0b\u4e00\u90e8\u5206 \u201c \u63a7\u5236\u6d4b\u8bd5\u5982\u4f55\u8fd0\u884c \u201d \u4f1a\u8ba8\u8bba\u5ffd\u7565\u548c\u8fc7\u6ee4\u6d4b\u8bd5\u3002 0 measured \u7edf\u8ba1\u662f\u9488\u5bf9\u6027\u80fd\u6d4b\u8bd5\u7684\u3002 \u6027\u80fd\u6d4b\u8bd5 \uff08benchmark tests\uff09\u5728\u7f16\u5199\u672c\u4e66\u65f6\uff0c\u4ecd\u53ea\u80fd\u7528\u4e8e Rust \u5f00\u53d1\u7248\uff08nightly Rust\uff09\u3002\u8bf7\u67e5\u770b \u6027\u80fd\u6d4b\u8bd5\u7684\u6587\u6863 \u4e86\u89e3\u66f4\u591a\u3002 \u6d4b\u8bd5\u8f93\u51fa\u4e2d\u7684\u4ee5 Doc-tests adder \u5f00\u5934\u7684\u8fd9\u4e00\u90e8\u5206\u662f\u6240\u6709\u6587\u6863\u6d4b\u8bd5\u7684\u7ed3\u679c\u3002\u6211\u4eec\u73b0\u5728\u5e76\u6ca1\u6709\u4efb\u4f55\u6587\u6863\u6d4b\u8bd5\uff0c\u4e0d\u8fc7 Rust \u4f1a\u7f16\u8bd1\u4efb\u4f55\u5728 API \u6587\u6863\u4e2d\u7684\u4ee3\u7801\u793a\u4f8b\u3002\u8fd9\u4e2a\u529f\u80fd\u5e2e\u52a9\u6211\u4eec\u4f7f\u6587\u6863\u548c\u4ee3\u7801\u4fdd\u6301\u540c\u6b65\uff01\u5728\u7b2c\u5341\u56db\u7ae0\u7684 \u201c \u6587\u6863\u6ce8\u91ca\u4f5c\u4e3a\u6d4b\u8bd5 \u201d \u90e8\u5206\u4f1a\u8bb2\u5230\u5982\u4f55\u7f16\u5199\u6587\u6863\u6d4b\u8bd5\u3002\u73b0\u5728\u6211\u4eec\u5c06\u5ffd\u7565 Doc-tests \u90e8\u5206\u7684\u8f93\u51fa\u3002 \u8ba9\u6211\u4eec\u6539\u53d8\u6d4b\u8bd5\u7684\u540d\u79f0\u5e76\u770b\u770b\u8fd9\u5982\u4f55\u6539\u53d8\u6d4b\u8bd5\u7684\u8f93\u51fa\u3002\u7ed9 it_works \u51fd\u6570\u8d77\u4e2a\u4e0d\u540c\u7684\u540d\u5b57\uff0c\u6bd4\u5982 exploration \uff0c\u50cf\u8fd9\u6837\uff1a #[cfg(test)] mod tests { #[test] fn exploration () { assert_eq! ( 2 + 2 , 4 ); } } \u5e76\u518d\u6b21\u8fd0\u884c cargo test \u3002\u73b0\u5728\u8f93\u51fa\u4e2d\u5c06\u51fa\u73b0 exploration \u800c\u4e0d\u662f it_works \uff1a $ cargo test Compiling adder v0.1.0 ( file:///projects/adder ) Finished test [ unoptimized + debuginfo ] target ( s ) in 0 .59s Running unittests ( target/debug/deps/adder-92948b65e88960b4 ) running 1 test test tests::exploration ... ok test result: ok. 1 passed ; 0 failed ; 0 ignored ; 0 measured ; 0 filtered out ; finished in 0 .00s Doc-tests adder running 0 tests test result: ok. 0 passed ; 0 failed ; 0 ignored ; 0 measured ; 0 filtered out ; finished in 0 .00s \u8ba9\u6211\u4eec\u589e\u52a0\u53e6\u4e00\u4e2a\u6d4b\u8bd5\uff0c\u4e0d\u8fc7\u8fd9\u4e00\u6b21\u662f\u4e00\u4e2a\u4f1a\u5931\u8d25\u7684\u6d4b\u8bd5\uff01\u5f53\u6d4b\u8bd5\u51fd\u6570\u4e2d\u51fa\u73b0 panic \u65f6\u6d4b\u8bd5\u5c31\u5931\u8d25\u4e86\u3002\u6bcf\u4e00\u4e2a\u6d4b\u8bd5\u90fd\u5728\u4e00\u4e2a\u65b0\u7ebf\u7a0b\u4e2d\u8fd0\u884c\uff0c\u5f53\u4e3b\u7ebf\u7a0b\u53d1\u73b0\u6d4b\u8bd5\u7ebf\u7a0b\u5f02\u5e38\u4e86\uff0c\u5c31\u5c06\u5bf9\u5e94\u6d4b\u8bd5\u6807\u8bb0\u4e3a\u5931\u8d25\u3002\u7b2c\u4e5d\u7ae0\u8bb2\u5230\u4e86\u6700\u7b80\u5355\u7684\u9020\u6210 panic \u7684\u65b9\u6cd5\uff1a\u8c03\u7528 panic! \u5b8f\u3002\u5199\u5165\u65b0\u6d4b\u8bd5 another \u540e\uff0c src/lib.rs \u73b0\u5728\u770b\u8d77\u6765\u5982\u793a\u4f8b\u6240\u793a\uff1a #[cfg(test)] mod tests { #[test] fn exploration () { assert_eq! ( 2 + 2 , 4 ); } #[test] fn another () { panic! ( \"Make this test fail\" ); } } \u518d\u6b21 cargo test \u8fd0\u884c\u6d4b\u8bd5\u3002\u8f93\u51fa\u5e94\u8be5\u770b\u8d77\u6765\u50cf\u793a\u4f8b\uff0c\u5b83\u8868\u660e exploration \u6d4b\u8bd5\u901a\u8fc7\u4e86\u800c another \u5931\u8d25\u4e86\uff1a # \u4e00\u4e2a\u6d4b\u8bd5\u901a\u8fc7\u548c\u4e00\u4e2a\u6d4b\u8bd5\u5931\u8d25\u7684\u6d4b\u8bd5\u7ed3\u679c $ cargo test Compiling adder v0.1.0 ( file:///projects/adder ) Finished test [ unoptimized + debuginfo ] target ( s ) in 0 .72s Running unittests ( target/debug/deps/adder-92948b65e88960b4 ) running 2 tests test tests::another ... FAILED test tests::exploration ... ok failures: ---- tests::another stdout ---- thread 'main' panicked at 'Make this test fail' , src/lib.rs:10:9 note: run with ` RUST_BACKTRACE = 1 ` environment variable to display a backtrace failures: tests::another test result: FAILED. 1 passed ; 1 failed ; 0 ignored ; 0 measured ; 0 filtered out ; finished in 0 .00s error: test failed, to rerun pass '--lib' test tests::another \u8fd9\u4e00\u884c\u662f FAILED \u800c\u4e0d\u662f ok \u4e86\u3002\u5728\u5355\u72ec\u6d4b\u8bd5\u7ed3\u679c\u548c\u6458\u8981\u4e4b\u95f4\u591a\u4e86\u4e24\u4e2a\u65b0\u7684\u90e8\u5206\uff1a\u7b2c\u4e00\u4e2a\u90e8\u5206\u663e\u793a\u4e86\u6d4b\u8bd5\u5931\u8d25\u7684\u8be6\u7ec6\u539f\u56e0\u3002\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c another \u56e0\u4e3a\u5728 src/lib.rs \u7684\u7b2c 10 \u884c panicked at 'Make this test fail' \u800c\u5931\u8d25\u3002\u4e0b\u4e00\u90e8\u5206\u5217\u51fa\u4e86\u6240\u6709\u5931\u8d25\u7684\u6d4b\u8bd5\uff0c\u8fd9\u5728\u6709\u5f88\u591a\u6d4b\u8bd5\u548c\u5f88\u591a\u5931\u8d25\u6d4b\u8bd5\u7684\u8be6\u7ec6\u8f93\u51fa\u65f6\u5f88\u6709\u5e2e\u52a9\u3002\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528\u5931\u8d25\u6d4b\u8bd5\u7684\u540d\u79f0\u6765\u53ea\u8fd0\u884c\u8fd9\u4e2a\u6d4b\u8bd5\uff0c\u4ee5\u4fbf\u8c03\u8bd5\uff1b\u4e0b\u4e00\u90e8\u5206 \u201c\u63a7\u5236\u6d4b\u8bd5\u5982\u4f55\u8fd0\u884c\u201d \u4f1a\u8bb2\u5230\u66f4\u591a\u8fd0\u884c\u6d4b\u8bd5\u7684\u65b9\u6cd5\u3002 \u6700\u540e\u662f\u6458\u8981\u884c\uff1a\u603b\u4f53\u4e0a\u8bb2\uff0c\u6d4b\u8bd5\u7ed3\u679c\u662f FAILED \u3002\u6709\u4e00\u4e2a\u6d4b\u8bd5\u901a\u8fc7\u548c\u4e00\u4e2a\u6d4b\u8bd5\u5931\u8d25\u3002 \u73b0\u5728\u6211\u4eec\u89c1\u8fc7\u4e0d\u540c\u573a\u666f\u4e2d\u6d4b\u8bd5\u7ed3\u679c\u662f\u4ec0\u4e48\u6837\u5b50\u7684\u4e86\uff0c\u518d\u6765\u770b\u770b\u9664 panic! \u4e4b\u5916\u7684\u4e00\u4e9b\u5728\u6d4b\u8bd5\u4e2d\u6709\u5e2e\u52a9\u7684\u5b8f\u5427\u3002","title":"\u6d4b\u8bd5\u51fd\u6570\u5256\u6790"},{"location":"testing/#assert","text":"assert! \u5b8f\u7531\u6807\u51c6\u5e93\u63d0\u4f9b\uff0c\u5728\u5e0c\u671b\u786e\u4fdd\u6d4b\u8bd5\u4e2d\u4e00\u4e9b\u6761\u4ef6\u4e3a true \u65f6\u975e\u5e38\u6709\u7528\u3002 \u9700\u8981\u5411 assert! \u5b8f\u63d0\u4f9b\u4e00\u4e2a\u6c42\u503c\u4e3a\u5e03\u5c14\u503c\u7684\u53c2\u6570\u3002 \u5982\u679c\u503c\u662f true \uff0c assert! \u4ec0\u4e48\u4e5f\u4e0d\u505a\uff0c\u540c\u65f6\u6d4b\u8bd5\u4f1a\u901a\u8fc7\u3002 \u5982\u679c\u503c\u4e3a false \uff0c assert! \u8c03\u7528 panic! \u5b8f\uff0c\u8fd9\u4f1a\u5bfc\u81f4\u6d4b\u8bd5\u5931\u8d25\u3002 assert! \u5b8f\u5e2e\u52a9\u6211\u4eec\u68c0\u67e5\u4ee3\u7801\u662f\u5426\u4ee5\u671f\u671b\u7684\u65b9\u5f0f\u8fd0\u884c\u3002 \u56de\u5fc6\u4e00\u4e0b\u7b2c\u4e94\u7ae0\u4e2d\uff0c\u793a\u4f8b\u4e2d\u6709\u4e00\u4e2a Rectangle \u7ed3\u6784\u4f53\u548c\u4e00\u4e2a can_hold \u65b9\u6cd5\uff0c\u5728\u793a\u4f8b\u4e2d\u518d\u6b21\u4f7f\u7528\u4ed6\u4eec\u3002\u5c06\u4ed6\u4eec\u653e\u8fdb src/lib.rs \u5e76\u4f7f\u7528 assert! \u5b8f\u7f16\u5199\u4e00\u4e9b\u6d4b\u8bd5\u3002 // \u7b2c\u4e94\u7ae0\u4e2d Rectangle \u7ed3\u6784\u4f53\u548c\u5176 can_hold \u65b9\u6cd5 #[derive(Debug)] struct Rectangle { width : u32 , height : u32 , } impl Rectangle { fn can_hold ( & self , other : & Rectangle ) -> bool { self . width > other . width && self . height > other . height } } can_hold \u65b9\u6cd5\u8fd4\u56de\u4e00\u4e2a\u5e03\u5c14\u503c\uff0c\u8fd9\u610f\u5473\u7740\u5b83\u5b8c\u7f8e\u7b26\u5408 assert! \u5b8f\u7684\u4f7f\u7528\u573a\u666f\u3002\u5728\u793a\u4f8b\u4e2d\uff0c\u8ba9\u6211\u4eec\u7f16\u5199\u4e00\u4e2a can_hold \u65b9\u6cd5\u7684\u6d4b\u8bd5\u6765\u4f5c\u4e3a\u7ec3\u4e60\uff0c\u8fd9\u91cc\u521b\u5efa\u4e00\u4e2a\u957f\u4e3a 8 \u5bbd\u4e3a 7 \u7684 Rectangle \u5b9e\u4f8b\uff0c\u5e76\u5047\u8bbe\u5b83\u53ef\u4ee5\u653e\u5f97\u4e0b\u53e6\u4e00\u4e2a\u957f\u4e3a 5 \u5bbd\u4e3a 1 \u7684 Rectangle \u5b9e\u4f8b\uff1a #[cfg(test)] mod tests { use super :: * ; // \u5c06\u6d4b\u8bd5\u547d\u540d\u4e3a larger_can_hold_smaller\uff0c #[test] fn larger_can_hold_smaller () { // \u5e76\u521b\u5efa\u6240\u9700\u7684\u4e24\u4e2a Rectangle \u5b9e\u4f8b\u3002 let larger = Rectangle { width : 8 , height : 7 , }; let smaller = Rectangle { width : 5 , height : 1 , }; // \u63a5\u7740\u8c03\u7528 assert! \u5b8f\u5e76\u4f20\u9012 larger.can_hold(&smaller) \u8c03\u7528\u7684\u7ed3\u679c\u4f5c\u4e3a\u53c2\u6570\u3002 // \u8fd9\u4e2a\u8868\u8fbe\u5f0f\u9884\u671f\u4f1a\u8fd4\u56de true\uff0c\u6240\u4ee5\u6d4b\u8bd5\u5e94\u8be5\u901a\u8fc7\u3002 assert! ( larger . can_hold ( & smaller )); } } \u6ce8\u610f\u5728 tests \u6a21\u5757\u4e2d\u65b0\u589e\u52a0\u4e86\u4e00\u884c\uff1a use super::*; \u3002 tests \u662f\u4e00\u4e2a\u666e\u901a\u7684\u6a21\u5757\uff0c\u5b83\u9075\u5faa\u7b2c\u4e03\u7ae0 \u201c \u8def\u5f84\u7528\u4e8e\u5f15\u7528\u6a21\u5757\u6811\u4e2d\u7684\u9879 \u201d \u90e8\u5206\u4ecb\u7ecd\u7684\u53ef\u89c1\u6027\u89c4\u5219\u3002\u56e0\u4e3a\u8fd9\u662f\u4e00\u4e2a\u5185\u90e8\u6a21\u5757\uff0c\u8981\u6d4b\u8bd5\u5916\u90e8\u6a21\u5757\u4e2d\u7684\u4ee3\u7801\uff0c\u9700\u8981\u5c06\u5176\u5f15\u5165\u5230\u5185\u90e8\u6a21\u5757\u7684\u4f5c\u7528\u57df\u4e2d\u3002\u8fd9\u91cc\u9009\u62e9\u4f7f\u7528 glob \u5168\u5c40\u5bfc\u5165\uff0c\u4ee5\u4fbf\u5728 tests \u6a21\u5757\u4e2d\u4f7f\u7528\u6240\u6709\u5728\u5916\u90e8\u6a21\u5757\u5b9a\u4e49\u7684\u5185\u5bb9\u3002 $ cargo test Compiling rectangle v0.1.0 ( file:///projects/rectangle ) Finished test [ unoptimized + debuginfo ] target ( s ) in 0 .66s Running unittests ( target/debug/deps/rectangle-6584c4561e48942e ) running 1 test test tests::larger_can_hold_smaller ... ok test result: ok. 1 passed ; 0 failed ; 0 ignored ; 0 measured ; 0 filtered out ; finished in 0 .00s Doc-tests rectangle running 0 tests test result: ok. 0 passed ; 0 failed ; 0 ignored ; 0 measured ; 0 filtered out ; finished in 0 .00s \u518d\u6765\u589e\u52a0\u53e6\u4e00\u4e2a\u6d4b\u8bd5\uff0c\u8fd9\u4e00\u56de\u65ad\u8a00\u4e00\u4e2a\u66f4\u5c0f\u7684\u77e9\u5f62\u4e0d\u80fd\u653e\u4e0b\u4e00\u4e2a\u66f4\u5927\u7684\u77e9\u5f62\uff1a #[cfg(test)] mod tests { use super :: * ; #[test] fn larger_can_hold_smaller () { // --snip-- } #[test] fn smaller_cannot_hold_larger () { let larger = Rectangle { width : 8 , height : 7 , }; let smaller = Rectangle { width : 5 , height : 1 , }; // \u56e0\u4e3a\u8fd9\u91cc can_hold \u51fd\u6570\u7684\u6b63\u786e\u7ed3\u679c\u662f false \uff0c // \u9700\u8981\u5c06\u8fd9\u4e2a\u7ed3\u679c\u53d6\u53cd\u540e\u4f20\u9012\u7ed9 assert! \u5b8f\u3002 // \u56e0\u6b64 can_hold \u8fd4\u56de false \u65f6\u6d4b\u8bd5\u5c31\u4f1a\u901a\u8fc7\uff1a assert! ( ! smaller . can_hold ( & larger )); } } $ cargo test Compiling rectangle v0.1.0 ( file:///projects/rectangle ) Finished test [ unoptimized + debuginfo ] target ( s ) in 0 .66s Running unittests ( target/debug/deps/rectangle-6584c4561e48942e ) running 2 tests test tests::larger_can_hold_smaller ... ok test tests::smaller_cannot_hold_larger ... ok test result: ok. 2 passed ; 0 failed ; 0 ignored ; 0 measured ; 0 filtered out ; finished in 0 .00s Doc-tests rectangle running 0 tests test result: ok. 0 passed ; 0 failed ; 0 ignored ; 0 measured ; 0 filtered out ; finished in 0 .00s \u4e24\u4e2a\u901a\u8fc7\u7684\u6d4b\u8bd5\uff01\u73b0\u5728\u770b\u770b\u5982\u679c\u5f15\u5165\u4e00\u4e2a bug \u7684\u8bdd\u6d4b\u8bd5\u7ed3\u679c\u4f1a\u53d1\u751f\u4ec0\u4e48\u3002\u5c06 can_hold \u65b9\u6cd5\u4e2d\u6bd4\u8f83\u957f\u5ea6\u65f6\u672c\u5e94\u4f7f\u7528\u5927\u4e8e\u53f7\u7684\u5730\u65b9\u6539\u6210\u5c0f\u4e8e\u53f7\uff1a // --snip-- impl Rectangle { fn can_hold ( & self , other : & Rectangle ) -> bool { self . width < other . width && self . height > other . height } } \u73b0\u5728\u8fd0\u884c\u6d4b\u8bd5\u4f1a\u4ea7\u751f\uff1a $ cargo test Compiling rectangle v0.1.0 ( file:///projects/rectangle ) Finished test [ unoptimized + debuginfo ] target ( s ) in 0 .66s Running unittests ( target/debug/deps/rectangle-6584c4561e48942e ) running 2 tests test tests::larger_can_hold_smaller ... FAILED test tests::smaller_cannot_hold_larger ... ok failures: ---- tests::larger_can_hold_smaller stdout ---- thread 'main' panicked at 'assertion failed: larger.can_hold(&smaller)' , src/lib.rs:28:9 note: run with ` RUST_BACKTRACE = 1 ` environment variable to display a backtrace failures: tests::larger_can_hold_smaller test result: FAILED. 1 passed ; 1 failed ; 0 ignored ; 0 measured ; 0 filtered out ; finished in 0 .00s error: test failed, to rerun pass '--lib' \u6211\u4eec\u7684\u6d4b\u8bd5\u6355\u83b7\u4e86 bug \uff01\u56e0\u4e3a larger.length \u662f 8 \u800c smaller.length \u662f 5\uff0c can_hold \u4e2d\u7684\u957f\u5ea6\u6bd4\u8f83\u73b0\u5728\u56e0\u4e3a 8 \u4e0d\u5c0f\u4e8e 5 \u800c\u8fd4\u56de false \u3002","title":"assert!\u5b8f"},{"location":"testing/#assert_eqassert_ne","text":"\u6d4b\u8bd5\u529f\u80fd\u7684\u4e00\u4e2a\u5e38\u7528\u65b9\u6cd5\u662f\u5c06\u9700\u8981\u6d4b\u8bd5\u4ee3\u7801\u7684\u503c\u4e0e\u671f\u671b\u503c\u505a\u6bd4\u8f83\uff0c\u5e76\u68c0\u67e5\u662f\u5426\u76f8\u7b49\u3002 \u53ef\u4ee5\u901a\u8fc7\u5411 assert! \u5b8f\u4f20\u9012\u4e00\u4e2a\u4f7f\u7528 == \u8fd0\u7b97\u7b26\u7684\u8868\u8fbe\u5f0f\u6765\u505a\u5230\u3002 \u4e0d\u8fc7\u8fd9\u4e2a\u64cd\u4f5c\u5b9e\u5728\u662f\u592a\u5e38\u89c1\u4e86\uff0c\u4ee5\u81f3\u4e8e\u6807\u51c6\u5e93\u63d0\u4f9b\u4e86\u4e00\u5bf9\u5b8f\u6765\u66f4\u65b9\u4fbf\u7684\u5904\u7406\u8fd9\u4e9b\u64cd\u4f5c \u2014\u2014 assert_eq! \u548c assert_ne! \u3002\u8fd9\u4e24\u4e2a\u5b8f\u5206\u522b\u6bd4\u8f83\u4e24\u4e2a\u503c\u662f\u76f8\u7b49\u8fd8\u662f\u4e0d\u76f8\u7b49\u3002 \u5f53\u65ad\u8a00\u5931\u8d25\u65f6\u4ed6\u4eec\u4e5f\u4f1a\u6253\u5370\u51fa\u8fd9\u4e24\u4e2a\u503c\u5177\u4f53\u662f\u4ec0\u4e48\uff0c\u4ee5\u4fbf\u4e8e\u89c2\u5bdf\u6d4b\u8bd5 \u4e3a\u4ec0\u4e48 \u5931\u8d25 \uff0c\u800c assert! \u53ea\u4f1a\u6253\u5370\u51fa\u5b83\u4ece == \u8868\u8fbe\u5f0f\u4e2d\u5f97\u5230\u4e86 false \u503c\uff0c\u800c\u4e0d\u662f\u5bfc\u81f4 false \u7684\u4e24\u4e2a\u503c\u3002 \u4e0b\u9762\u793a\u4f8b\u4e2d\uff0c\u8ba9\u6211\u4eec\u7f16\u5199\u4e00\u4e2a\u5bf9\u5176\u53c2\u6570\u52a0\u4e8c\u5e76\u8fd4\u56de\u7ed3\u679c\u7684\u51fd\u6570 add_two \u3002\u63a5\u7740\u4f7f\u7528 assert_eq! \u5b8f\u6d4b\u8bd5\u8fd9\u4e2a\u51fd\u6570\u3002 pub fn add_two ( a : i32 ) -> i32 { a + 2 } #[cfg(test)] mod tests { use super :: * ; #[test] fn it_adds_two () { // \u6d4b\u8bd5\u901a\u8fc7\u4e86\uff01 assert_eq! ( 4 , add_two ( 2 )); } } $ cargo test Compiling adder v0.1.0 ( file:///projects/adder ) Finished test [ unoptimized + debuginfo ] target ( s ) in 0 .58s Running unittests ( target/debug/deps/adder-92948b65e88960b4 ) running 1 test test tests::it_adds_two ... ok test result: ok. 1 passed ; 0 failed ; 0 ignored ; 0 measured ; 0 filtered out ; finished in 0 .00s Doc-tests adder running 0 tests test result: ok. 0 passed ; 0 failed ; 0 ignored ; 0 measured ; 0 filtered out ; finished in 0 .00s \u4f20\u9012\u7ed9 assert_eq! \u5b8f\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570 4 \uff0c\u7b49\u4e8e\u8c03\u7528 add_two(2) \u7684\u7ed3\u679c\u3002\u6d4b\u8bd5\u4e2d\u7684\u8fd9\u4e00\u884c test tests::it_adds_two ... ok \u4e2d ok \u8868\u660e\u6d4b\u8bd5\u901a\u8fc7\uff01 \u5728\u4ee3\u7801\u4e2d\u5f15\u5165\u4e00\u4e2a bug \u6765\u770b\u770b\u4f7f\u7528 assert_eq! \u7684\u6d4b\u8bd5\u5931\u8d25\u662f\u4ec0\u4e48\u6837\u7684\u3002\u4fee\u6539 add_two \u51fd\u6570\u7684\u5b9e\u73b0\u4f7f\u5176\u52a0 3\uff1a pub fn add_two ( a : i32 ) -> i32 { a + 3 } \u518d\u6b21\u8fd0\u884c\u6d4b\u8bd5\uff1a $ cargo test Compiling adder v0 . 1.0 ( file : ///projects/adder) Finished test [ unoptimized + debuginfo ] target ( s ) in 0.61 s Running unittests ( target / debug / deps / adder - 92948 b65e88960b4 ) running 1 test test tests :: it_adds_two .. . FAILED failures : ---- tests :: it_adds_two stdout ---- thread ' main ' panicked at ' assertion failed : ` ( left == right ) ` left : ` 4 ` , right : ` 5 ` ' , src / lib . rs : 11 : 9 note : run with ` RUST_BACKTRACE = 1 ` environment variable to display a backtrace failures : tests :: it_adds_two test result : FAILED . 0 passed ; 1 failed ; 0 ignored ; 0 measured ; 0 filtered out ; finished in 0.00 s error : test failed , to rerun pass '-- lib ' \u6d4b\u8bd5\u6355\u83b7\u5230\u4e86 bug \uff01 it_adds_two \u6d4b\u8bd5\u5931\u8d25\uff0c\u663e\u793a\u4fe1\u606f assertion failed: `(left == right)` \u5e76\u8868\u660e left \u662f 4 \u800c right \u662f 5\u3002 \u8fd9\u4e2a\u4fe1\u606f\u6709\u52a9\u4e8e\u6211\u4eec\u5f00\u59cb\u8c03\u8bd5\uff1a\u5b83\u8bf4 assert_eq! \u7684 left \u53c2\u6570\u662f 4\uff0c\u800c right \u53c2\u6570\uff0c\u4e5f\u5c31\u662f add_two(2) \u7684\u7ed3\u679c\uff0c\u662f 5\u3002 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5728\u4e00\u4e9b\u8bed\u8a00\u548c\u6d4b\u8bd5\u6846\u67b6\u4e2d\uff0c\u65ad\u8a00\u4e24\u4e2a\u503c\u76f8\u7b49\u7684\u51fd\u6570\u7684\u53c2\u6570\u53eb\u505a expected \u548c actual \uff0c\u800c\u4e14\u6307\u5b9a\u53c2\u6570\u7684\u987a\u5e8f\u662f\u5f88\u5173\u952e\u7684\u3002\u7136\u800c\u5728 Rust \u4e2d\uff0c\u4ed6\u4eec\u5219\u53eb\u505a left \u548c right \uff0c\u540c\u65f6\u6307\u5b9a\u671f\u671b\u7684\u503c\u548c\u88ab\u6d4b\u8bd5\u4ee3\u7801\u4ea7\u751f\u7684\u503c\u7684\u987a\u5e8f\u5e76\u4e0d\u91cd\u8981\u3002\u8fd9\u4e2a\u6d4b\u8bd5\u4e2d\u7684\u65ad\u8a00\u4e5f\u53ef\u4ee5\u5199\u6210 assert_eq!(add_two(2), 4) \uff0c\u8fd9\u65f6\u5931\u8d25\u4fe1\u606f\u4f1a\u53d8\u6210 assertion failed: `(left == right)` \u5176\u4e2d left \u662f 5 \u800c right \u662f 4\u3002 assert_ne! \u5b8f\u5728\u4f20\u9012\u7ed9\u5b83\u7684\u4e24\u4e2a\u503c\u4e0d\u76f8\u7b49\u65f6\u901a\u8fc7\uff0c\u800c\u5728\u76f8\u7b49\u65f6\u5931\u8d25\u3002\u5728\u4ee3\u7801\u6309\u9884\u671f\u8fd0\u884c\uff0c\u6211\u4eec\u4e0d\u786e\u5b9a\u503c \u4f1a \u662f\u4ec0\u4e48\uff0c\u4e0d\u8fc7\u80fd\u786e\u5b9a\u503c\u7edd\u5bf9 \u4e0d\u4f1a \u662f\u4ec0\u4e48\u7684\u65f6\u5019\uff0c\u8fd9\u4e2a\u5b8f\u6700\u6709\u7528\u5904\u3002\u4f8b\u5982\uff0c\u5982\u679c\u4e00\u4e2a\u51fd\u6570\u4fdd\u8bc1\u4f1a\u4ee5\u67d0\u79cd\u65b9\u5f0f\u6539\u53d8\u5176\u8f93\u51fa\uff0c\u4e0d\u8fc7\u8fd9\u79cd\u6539\u53d8\u65b9\u5f0f\u662f\u7531\u8fd0\u884c\u6d4b\u8bd5\u65f6\u662f\u661f\u671f\u51e0\u6765\u51b3\u5b9a\u7684\uff0c\u8fd9\u65f6\u6700\u597d\u7684\u65ad\u8a00\u53ef\u80fd\u5c31\u662f\u51fd\u6570\u7684\u8f93\u51fa\u4e0d\u7b49\u4e8e\u5176\u8f93\u5165\u3002 assert_eq! \u548c assert_ne! \u5b8f\u5728\u5e95\u5c42\u5206\u522b\u4f7f\u7528\u4e86 == \u548c != \u3002\u5f53\u65ad\u8a00\u5931\u8d25\u65f6\uff0c\u8fd9\u4e9b\u5b8f\u4f1a\u4f7f\u7528\u8c03\u8bd5\u683c\u5f0f\u6253\u5370\u51fa\u5176\u53c2\u6570\uff0c\u8fd9\u610f\u5473\u7740\u88ab\u6bd4\u8f83\u7684\u503c\u5fc5\u9700\u5b9e\u73b0\u4e86 PartialEq \u548c Debug trait \u3002\u6240\u6709\u7684\u57fa\u672c\u7c7b\u578b\u548c\u5927\u90e8\u5206\u6807\u51c6\u5e93\u7c7b\u578b\u90fd\u5b9e\u73b0\u4e86\u8fd9\u4e9b trait\u3002\u5bf9\u4e8e\u81ea\u5b9a\u4e49\u7684\u7ed3\u6784\u4f53\u548c\u679a\u4e3e\uff0c\u9700\u8981\u5b9e\u73b0 PartialEq \u624d\u80fd\u65ad\u8a00\u4ed6\u4eec\u7684\u503c\u662f\u5426\u76f8\u7b49\u3002\u9700\u8981\u5b9e\u73b0 Debug \u624d\u80fd\u5728\u65ad\u8a00\u5931\u8d25\u65f6\u6253\u5370\u4ed6\u4eec\u7684\u503c\u3002\u56e0\u4e3a\u8fd9\u4e24\u4e2a trait \u90fd\u662f\u6d3e\u751f trait \uff0c\u5982\u7b2c\u4e94\u7ae0\u793a\u4f8b 5-12 \u6240\u63d0\u5230\u7684\uff0c\u901a\u5e38\u53ef\u4ee5\u76f4\u63a5\u5728\u7ed3\u6784\u4f53\u6216\u679a\u4e3e\u4e0a\u6dfb\u52a0 #[derive(PartialEq, Debug)] \u6ce8\u89e3\u3002\u9644\u5f55 C \u201c \u53ef\u6d3e\u751f trait \u201d \u4e2d\u6709\u66f4\u591a\u5173\u4e8e\u8fd9\u4e9b\u548c\u5176\u4ed6\u6d3e\u751f trait \u7684\u8be6\u7ec6\u4fe1\u606f\u3002","title":"assert_eq!\u548cassert_ne!\u5b8f"},{"location":"testing/#_4","text":"\u4f60\u4e5f\u53ef\u4ee5\u5411 assert! \u3001 assert_eq! \u548c assert_ne! \u5b8f\u4f20\u9012\u4e00\u4e2a\u53ef\u9009\u7684\u5931\u8d25\u4fe1\u606f\u53c2\u6570\uff0c\u53ef\u4ee5\u5728\u6d4b\u8bd5\u5931\u8d25\u65f6\u5c06\u81ea\u5b9a\u4e49\u5931\u8d25\u4fe1\u606f\u4e00\u540c\u6253\u5370\u51fa\u6765\u3002 \u4efb\u4f55\u5728 assert! \u7684\u4e00\u4e2a\u5fc5\u9700\u53c2\u6570\u548c assert_eq! \u548c assert_ne! \u7684\u4e24\u4e2a\u5fc5\u9700\u53c2\u6570\u4e4b\u540e\u6307\u5b9a\u7684\u53c2\u6570\u90fd\u4f1a\u4f20\u9012\u7ed9 format! \u5b8f\uff08\u5728\u7b2c\u516b\u7ae0\u7684 \u201c \u4f7f\u7528 + \u8fd0\u7b97\u7b26\u6216 format! \u5b8f\u62fc\u63a5\u5b57\u7b26\u4e32 \u201d \u90e8\u5206\u8ba8\u8bba\u8fc7\uff09\uff0c\u6240\u4ee5\u53ef\u4ee5\u4f20\u9012\u4e00\u4e2a\u5305\u542b {} \u5360\u4f4d\u7b26\u7684\u683c\u5f0f\u5b57\u7b26\u4e32\u548c\u9700\u8981\u653e\u5165\u5360\u4f4d\u7b26\u7684\u503c\u3002 \u81ea\u5b9a\u4e49\u4fe1\u606f\u6709\u52a9\u4e8e\u8bb0\u5f55\u65ad\u8a00\u7684\u610f\u4e49\uff1b\u5f53\u6d4b\u8bd5\u5931\u8d25\u65f6\u5c31\u80fd\u66f4\u597d\u7684\u7406\u89e3\u4ee3\u7801\u51fa\u4e86\u4ec0\u4e48\u95ee\u9898\u3002 \u4f8b\u5982\uff0c\u6bd4\u5982\u8bf4\u6709\u4e00\u4e2a\u6839\u636e\u4eba\u540d\u8fdb\u884c\u95ee\u5019\u7684\u51fd\u6570\uff0c\u800c\u6211\u4eec\u5e0c\u671b\u6d4b\u8bd5\u5c06\u4f20\u9012\u7ed9\u51fd\u6570\u7684\u4eba\u540d\u663e\u793a\u5728\u8f93\u51fa\u4e2d\uff1a pub fn greeting ( name : & str ) -> String { format! ( \"Hello {}!\" , name ) } #[cfg(test)] mod tests { use super :: * ; #[test] fn greeting_contains_name () { let result = greeting ( \"Carol\" ); assert! ( result . contains ( \"Carol\" )); } } \u8fd9\u4e2a\u7a0b\u5e8f\u7684\u9700\u6c42\u8fd8\u6ca1\u6709\u88ab\u786e\u5b9a\uff0c\u56e0\u6b64\u95ee\u5019\u6587\u672c\u5f00\u5934\u7684 Hello \u6587\u672c\u5f88\u53ef\u80fd\u4f1a\u6539\u53d8\u3002\u7136\u800c\u6211\u4eec\u5e76\u4e0d\u60f3\u5728\u9700\u6c42\u6539\u53d8\u65f6\u4e0d\u5f97\u4e0d\u66f4\u65b0\u6d4b\u8bd5\uff0c\u6240\u4ee5\u76f8\u6bd4\u68c0\u67e5 greeting \u51fd\u6570\u8fd4\u56de\u7684\u786e\u5207\u503c\uff0c\u6211\u4eec\u5c06\u4ec5\u4ec5\u65ad\u8a00\u8f93\u51fa\u7684\u6587\u672c\u4e2d\u5305\u542b\u8f93\u5165\u53c2\u6570\u3002 \u8ba9\u6211\u4eec\u901a\u8fc7\u5c06 greeting \u6539\u4e3a\u4e0d\u5305\u542b name \u6765\u5728\u4ee3\u7801\u4e2d\u5f15\u5165\u4e00\u4e2a bug \u6765\u6d4b\u8bd5\u5931\u8d25\u65f6\u662f\u600e\u6837\u7684\uff1a pub fn greeting ( name : & str ) -> String { String :: from ( \"Hello!\" ) } \u8fd0\u884c\u6d4b\u8bd5\u4f1a\u4ea7\u751f\uff1a $ cargo test Compiling greeter v0.1.0 ( file:///projects/greeter ) Finished test [ unoptimized + debuginfo ] target ( s ) in 0 .91s Running unittests ( target/debug/deps/greeter-170b942eb5bf5e3a ) running 1 test test tests::greeting_contains_name ... FAILED failures: ---- tests::greeting_contains_name stdout ---- thread 'main' panicked at 'assertion failed: result.contains(\\\"Carol\\\")' , src/lib.rs:12:9 note: run with ` RUST_BACKTRACE = 1 ` environment variable to display a backtrace failures: tests::greeting_contains_name test result: FAILED. 0 passed ; 1 failed ; 0 ignored ; 0 measured ; 0 filtered out ; finished in 0 .00s error: test failed, to rerun pass '--lib' \u7ed3\u679c\u4ec5\u4ec5\u544a\u8bc9\u4e86\u6211\u4eec\u65ad\u8a00\u5931\u8d25\u4e86\u548c\u5931\u8d25\u7684\u884c\u53f7\u3002\u4e00\u4e2a\u66f4\u6709\u7528\u7684\u5931\u8d25\u4fe1\u606f\u5e94\u8be5\u6253\u5370\u51fa greeting \u51fd\u6570\u7684\u503c\u3002\u8ba9\u6211\u4eec\u4e3a\u6d4b\u8bd5\u51fd\u6570\u589e\u52a0\u4e00\u4e2a\u81ea\u5b9a\u4e49\u5931\u8d25\u4fe1\u606f\u53c2\u6570\uff1a\u5e26\u5360\u4f4d\u7b26\u7684\u683c\u5f0f\u5b57\u7b26\u4e32\uff0c\u4ee5\u53ca greeting \u51fd\u6570\u7684\u503c\uff1a #[test] fn greeting_contains_name () { let result = greeting ( \"Carol\" ); assert! ( result . contains ( \"Carol\" ), \"Greeting did not contain name, value was `{}`\" , result ); } \u73b0\u5728\u5982\u679c\u518d\u6b21\u8fd0\u884c\u6d4b\u8bd5\uff0c\u5c06\u4f1a\u770b\u5230\u66f4\u6709\u4ef7\u503c\u7684\u4fe1\u606f\uff1a $ cargo test Compiling greeter v0.1.0 ( file:///projects/greeter ) Finished test [ unoptimized + debuginfo ] target ( s ) in 0 .93s Running unittests ( target/debug/deps/greeter-170b942eb5bf5e3a ) running 1 test test tests::greeting_contains_name ... FAILED failures: ---- tests::greeting_contains_name stdout ---- thread 'main' panicked at 'Greeting did not contain name, value was `Hello!`' , src/lib.rs:12:9 note: run with ` RUST_BACKTRACE = 1 ` environment variable to display a backtrace failures: tests::greeting_contains_name test result: FAILED. 0 passed ; 1 failed ; 0 ignored ; 0 measured ; 0 filtered out ; finished in 0 .00s error: test failed, to rerun pass '--lib' \u53ef\u4ee5\u5728\u6d4b\u8bd5\u8f93\u51fa\u4e2d\u770b\u5230\u6240\u53d6\u5f97\u7684\u786e\u5207\u7684\u503c\uff0c\u8fd9\u4f1a\u5e2e\u52a9\u6211\u4eec\u7406\u89e3\u771f\u6b63\u53d1\u751f\u4e86\u4ec0\u4e48\uff0c\u800c\u4e0d\u662f\u671f\u671b\u53d1\u751f\u4ec0\u4e48\u3002","title":"\u81ea\u5b9a\u4e49\u5931\u8d25\u4fe1\u606f"},{"location":"testing/#panic","text":"\u9664\u4e86\u68c0\u67e5\u4ee3\u7801\u662f\u5426\u8fd4\u56de\u671f\u671b\u7684\u6b63\u786e\u7684\u503c\u4e4b\u5916\uff0c\u68c0\u67e5\u4ee3\u7801\u662f\u5426\u6309\u7167\u671f\u671b\u5904\u7406\u9519\u8bef\u4e5f\u662f\u5f88\u91cd\u8981\u7684\u3002 \u4f8b\u5982\uff0c\u8003\u8651\u7b2c\u4e5d\u7ae0\u521b\u5efa\u7684 Guess \u7c7b\u578b\u3002\u5176\u4ed6\u4f7f\u7528 Guess \u7684\u4ee3\u7801\u90fd\u662f\u57fa\u4e8e Guess \u5b9e\u4f8b\u4ec5\u6709\u7684\u503c\u8303\u56f4\u5728 1 \u5230 100 \u7684\u524d\u63d0\u3002 \u53ef\u4ee5\u7f16\u5199\u4e00\u4e2a\u6d4b\u8bd5\u6765\u786e\u4fdd\u521b\u5efa\u4e00\u4e2a\u8d85\u51fa\u8303\u56f4\u7684\u503c\u7684 Guess \u5b9e\u4f8b\u4f1a panic \u3002 \u53ef\u4ee5\u901a\u8fc7\u5bf9\u51fd\u6570\u589e\u52a0\u53e6\u4e00\u4e2a\u5c5e\u6027 should_panic \u6765\u5b9e\u73b0\u8fd9\u4e9b\u3002\u8fd9\u4e2a\u5c5e\u6027\u5728\u51fd\u6570\u4e2d\u7684\u4ee3\u7801 panic \u65f6\u4f1a\u901a\u8fc7\uff0c\u800c\u5728\u5176\u4e2d\u7684\u4ee3\u7801\u6ca1\u6709 panic \u65f6\u5931\u8d25\u3002 \u4e0b\u9762\u793a\u4f8b\u5c55\u793a\u4e86\u4e00\u4e2a\u68c0\u67e5 Guess::new \u662f\u5426\u6309\u7167\u6211\u4eec\u7684\u671f\u671b\u51fa\u9519\u7684\u6d4b\u8bd5\uff1a // \u6d4b\u8bd5\u4f1a\u9020\u6210 panic! \u7684\u6761\u4ef6 pub struct Guess { value : i32 , } impl Guess { pub fn new ( value : i32 ) -> Guess { if value < 1 || value > 100 { panic! ( \"Guess value must be between 1 and 100, got {}.\" , value ); } Guess { value } } } #[cfg(test)] mod tests { use super :: * ; #[test] #[should_panic] fn greater_than_100 () { Guess :: new ( 200 ); } } #[should_panic] \u5c5e\u6027\u4f4d\u4e8e #[test] \u4e4b\u540e\uff0c\u5bf9\u5e94\u7684\u6d4b\u8bd5\u51fd\u6570\u4e4b\u524d\u3002\u8ba9\u6211\u4eec\u770b\u770b\u6d4b\u8bd5\u901a\u8fc7\u65f6\u5b83\u662f\u4ec0\u4e48\u6837\u5b50\uff1a $ cargo test Compiling guessing_game v0.1.0 ( file:///projects/guessing_game ) Finished test [ unoptimized + debuginfo ] target ( s ) in 0 .58s Running unittests ( target/debug/deps/guessing_game-57d70c3acb738f4d ) running 1 test test tests::greater_than_100 - should panic ... ok test result: ok. 1 passed ; 0 failed ; 0 ignored ; 0 measured ; 0 filtered out ; finished in 0 .00s Doc-tests guessing_game running 0 tests test result: ok. 0 passed ; 0 failed ; 0 ignored ; 0 measured ; 0 filtered out ; finished in 0 .00s \u770b\u8d77\u6765\u4e0d\u9519\uff01\u73b0\u5728\u5728\u4ee3\u7801\u4e2d\u5f15\u5165 bug \uff0c\u79fb\u9664 new \u51fd\u6570\u5728\u503c\u5927\u4e8e 100 \u65f6\u4f1a panic \u7684\u6761\u4ef6\uff1a // --snip-- impl Guess { pub fn new ( value : i32 ) -> Guess { if value < 1 { panic! ( \"Guess value must be between 1 and 100, got {}.\" , value ); } Guess { value } } } \u5982\u679c\u8fd0\u884c\u793a\u4f8b\u7684\u6d4b\u8bd5\uff0c\u5b83\u4f1a\u5931\u8d25\uff1a $ cargo test Compiling guessing_game v0.1.0 ( file:///projects/guessing_game ) Finished test [ unoptimized + debuginfo ] target ( s ) in 0 .62s Running unittests ( target/debug/deps/guessing_game-57d70c3acb738f4d ) running 1 test test tests::greater_than_100 - should panic ... FAILED failures: ---- tests::greater_than_100 stdout ---- note: test did not panic as expected failures: tests::greater_than_100 test result: FAILED. 0 passed ; 1 failed ; 0 ignored ; 0 measured ; 0 filtered out ; finished in 0 .00s error: test failed, to rerun pass '--lib' \u8fd9\u56de\u5e76\u6ca1\u6709\u5f97\u5230\u975e\u5e38\u6709\u7528\u7684\u4fe1\u606f\uff0c\u4e0d\u8fc7\u4e00\u65e6\u6211\u4eec\u89c2\u5bdf\u6d4b\u8bd5\u51fd\u6570\uff0c\u4f1a\u53d1\u73b0\u5b83\u6807\u6ce8\u4e86 #[should_panic] \u3002\u8fd9\u4e2a\u9519\u8bef\u610f\u5473\u7740\u4ee3\u7801\u4e2d\u6d4b\u8bd5\u51fd\u6570 Guess::new(200) \u5e76\u6ca1\u6709\u4ea7\u751f panic \u3002 \u7136\u800c should_panic \u6d4b\u8bd5\u7ed3\u679c\u53ef\u80fd\u4f1a\u975e\u5e38\u542b\u7cca\u4e0d\u6e05\uff0c\u56e0\u4e3a\u5b83\u53ea\u662f\u544a\u8bc9\u6211\u4eec\u4ee3\u7801\u5e76\u6ca1\u6709\u4ea7\u751f panic \u3002 should_panic \u751a\u81f3\u5728\u4e00\u4e9b\u4e0d\u662f\u6211\u4eec\u671f\u671b\u7684\u539f\u56e0\u800c\u5bfc\u81f4 panic \u65f6\u4e5f\u4f1a\u901a\u8fc7\u3002 \u4e3a\u4e86\u4f7f should_panic \u6d4b\u8bd5\u7ed3\u679c\u66f4\u7cbe\u786e\uff0c\u6211\u4eec\u53ef\u4ee5\u7ed9 should_panic \u5c5e\u6027\u589e\u52a0\u4e00\u4e2a\u53ef\u9009\u7684 expected \u53c2\u6570\u3002 \u6d4b\u8bd5\u5de5\u5177\u4f1a\u786e\u4fdd\u9519\u8bef\u4fe1\u606f\u4e2d\u5305\u542b\u5176\u63d0\u4f9b\u7684\u6587\u672c\u3002\u4f8b\u5982\uff0c\u8003\u8651\u793a\u4f8b\u4e2d\u4fee\u6539\u8fc7\u7684 Guess \uff0c\u8fd9\u91cc new \u51fd\u6570\u6839\u636e\u5176\u503c\u662f\u8fc7\u5927\u8fd8\u6216\u8005\u8fc7\u5c0f\u800c\u63d0\u4f9b\u4e0d\u540c\u7684 panic \u4fe1\u606f\uff1a // --snip-- impl Guess { pub fn new ( value : i32 ) -> Guess { if value < 1 { panic! ( \"Guess value must be greater than or equal to 1, got {}.\" , value ); } else if value > 100 { panic! ( \"Guess value must be less than or equal to 100, got {}.\" , value ); } Guess { value } } } #[cfg(test)] mod tests { use super :: * ; #[test] #[should_panic(expected = \"Guess value must be less than or equal to 100\" )] fn greater_than_100 () { Guess :: new ( 200 ); } } \u8fd9\u4e2a\u6d4b\u8bd5\u4f1a\u901a\u8fc7\uff0c\u56e0\u4e3a should_panic \u5c5e\u6027\u4e2d expected \u53c2\u6570\u63d0\u4f9b\u7684\u503c\u662f Guess::new \u51fd\u6570 panic \u4fe1\u606f\u7684\u5b50\u4e32\u3002 \u6211\u4eec\u53ef\u4ee5\u6307\u5b9a\u671f\u671b\u7684\u6574\u4e2a panic \u4fe1\u606f\uff0c\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\u662f Guess value must be less than or equal to 100, got 200. \u3002 expected \u4fe1\u606f\u7684\u9009\u62e9\u53d6\u51b3\u4e8e panic \u4fe1\u606f\u6709\u591a\u72ec\u7279\u6216\u52a8\u6001\uff0c\u548c\u4f60\u5e0c\u671b\u6d4b\u8bd5\u6709\u591a\u51c6\u786e\u3002 \u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u9519\u8bef\u4fe1\u606f\u7684\u5b50\u5b57\u7b26\u4e32\u8db3\u4ee5\u786e\u4fdd\u51fd\u6570\u5728 else if value > 100 \u7684\u60c5\u51b5\u4e0b\u8fd0\u884c\u3002 \u4e3a\u4e86\u89c2\u5bdf\u5e26\u6709 expected \u4fe1\u606f\u7684 should_panic \u6d4b\u8bd5\u5931\u8d25\u65f6\u4f1a\u53d1\u751f\u4ec0\u4e48\uff0c\u8ba9\u6211\u4eec\u518d\u6b21\u5f15\u5165\u4e00\u4e2a bug \uff0c\u5c06 if value < 1 \u548c else if value > 100 \u7684\u4ee3\u7801\u5757\u5bf9\u6362\uff1a if value < 1 { panic! ( \"Guess value must be less than or equal to 100, got {}.\" , value ); } else if value > 100 { panic! ( \"Guess value must be greater than or equal to 1, got {}.\" , value ); } \u8fd9\u4e00\u6b21\u8fd0\u884c should_panic \u6d4b\u8bd5\uff0c\u5b83\u4f1a\u5931\u8d25\uff1a $ cargo test Compiling guessing_game v0.1.0 ( file:///projects/guessing_game ) Finished test [ unoptimized + debuginfo ] target ( s ) in 0 .66s Running unittests ( target/debug/deps/guessing_game-57d70c3acb738f4d ) running 1 test test tests::greater_than_100 - should panic ... FAILED failures: ---- tests::greater_than_100 stdout ---- thread 'main' panicked at 'Guess value must be greater than or equal to 1, got 200.' , src/lib.rs:13:13 note: run with ` RUST_BACKTRACE = 1 ` environment variable to display a backtrace note: panic did not contain expected string panic message: ` \"Guess value must be greater than or equal to 1, got 200.\" ` , expected substring: ` \"Guess value must be less than or equal to 100\" ` failures: tests::greater_than_100 test result: FAILED. 0 passed ; 1 failed ; 0 ignored ; 0 measured ; 0 filtered out ; finished in 0 .00s error: test failed, to rerun pass '--lib' \u5931\u8d25\u4fe1\u606f\u8868\u660e\u6d4b\u8bd5\u786e\u5b9e\u5982\u671f\u671b panic \u4e86\uff0c\u4e0d\u8fc7 panic \u4fe1\u606f\u4e2d\u5e76\u6ca1\u6709\u5305\u542b expected \u4fe1\u606f 'Guess value must be less than or equal to 100' \u3002 \u800c\u6211\u4eec\u5f97\u5230\u7684 panic \u4fe1\u606f\u662f 'Guess value must be greater than or equal to 1, got 200.' \u3002\u8fd9\u6837\u5c31\u53ef\u4ee5\u5f00\u59cb\u5bfb\u627e bug \u5728\u54ea\u4e86\uff01","title":"panic\u68c0\u6d4b"},{"location":"testing/#resultt-e","text":"\u76ee\u524d\u4e3a\u6b62\uff0c\u6211\u4eec\u7f16\u5199\u7684\u6d4b\u8bd5\u5728\u5931\u8d25\u65f6\u5c31\u4f1a panic \u3002\u4e5f\u53ef\u4ee5\u4f7f\u7528 Result\\<T, E> \u7f16\u5199\u6d4b\u8bd5\uff01\u8fd9\u91cc\u662f\u7b2c\u4e00\u4e2a\u4f8b\u5b50\u91c7\u7528\u4e86 Result \uff1a #[cfg(test)] mod tests { #[test] fn it_works () -> Result < (), String > { if 2 + 2 == 4 { Ok (()) } else { Err ( String :: from ( \"two plus two does not equal four\" )) } } } \u73b0\u5728 it_works \u51fd\u6570\u7684\u8fd4\u56de\u503c\u7c7b\u578b\u4e3a Result<(), String> \u3002\u5728\u51fd\u6570\u4f53\u4e2d\uff0c\u4e0d\u540c\u4e8e\u8c03\u7528 assert_eq! \u5b8f\uff0c\u800c\u662f\u5728\u6d4b\u8bd5\u901a\u8fc7\u65f6\u8fd4\u56de Ok(()) \uff0c\u5728\u6d4b\u8bd5\u5931\u8d25\u65f6\u8fd4\u56de\u5e26\u6709 String \u7684 Err \u3002 \u8fd9\u6837\u7f16\u5199\u6d4b\u8bd5\u6765\u8fd4\u56de Result\\<T, E> \u5c31\u53ef\u4ee5\u5728\u51fd\u6570\u4f53\u4e2d\u4f7f\u7528\u95ee\u53f7\u8fd0\u7b97\u7b26\uff0c\u5982\u6b64\u53ef\u4ee5\u65b9\u4fbf\u7684\u7f16\u5199\u4efb\u4f55\u8fd0\u7b97\u7b26\u4f1a\u8fd4\u56de Err \u6210\u5458\u7684\u6d4b\u8bd5\u3002 \u4e0d\u80fd\u5bf9\u8fd9\u4e9b\u4f7f\u7528 Result \u7684\u6d4b\u8bd5\u4f7f\u7528 #[should_panic] \u6ce8\u89e3\u3002\u4e3a\u4e86\u65ad\u8a00\u4e00\u4e2a\u64cd\u4f5c\u8fd4\u56de Err \u6210\u5458\uff0c\u4e0d\u8981\u4f7f\u7528\u5bf9 Result\\<T, E> \u503c\u4f7f\u7528\u95ee\u53f7\u8868\u8fbe\u5f0f\uff08?\uff09\u3002\u800c\u662f\u4f7f\u7528 assert!(value.is_err()) \u3002 \u73b0\u5728\u4f60\u77e5\u9053\u4e86\u51e0\u79cd\u7f16\u5199\u6d4b\u8bd5\u7684\u65b9\u6cd5\uff0c\u8ba9\u6211\u4eec\u770b\u770b\u8fd0\u884c\u6d4b\u8bd5\u65f6\u4f1a\u53d1\u751f\u4ec0\u4e48\uff0c\u548c\u53ef\u4ee5\u7528\u4e8e cargo test \u7684\u4e0d\u540c\u9009\u9879\u3002","title":"Result&lt;T, E>\u6d4b\u8bd5"},{"location":"testing/#_5","text":"\u5c31\u50cf cargo run \u4f1a\u7f16\u8bd1\u4ee3\u7801\u5e76\u8fd0\u884c\u751f\u6210\u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\u4e00\u6837\uff0c cargo test \u5728\u6d4b\u8bd5\u6a21\u5f0f\u4e0b\u7f16\u8bd1\u4ee3\u7801\u5e76\u8fd0\u884c\u751f\u6210\u7684\u6d4b\u8bd5\u4e8c\u8fdb\u5236\u6587\u4ef6\u3002\u53ef\u4ee5\u6307\u5b9a\u547d\u4ee4\u884c\u53c2\u6570\u6765\u6539\u53d8 cargo test \u7684\u9ed8\u8ba4\u884c\u4e3a\u3002 \u4f8b\u5982\uff0c cargo test \u751f\u6210\u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\u7684\u9ed8\u8ba4\u884c\u4e3a\u662f \u5e76\u884c \u7684\u8fd0\u884c\u6240\u6709\u6d4b\u8bd5\uff0c\u5e76\u622a\u83b7\u6d4b\u8bd5\u8fd0\u884c\u8fc7\u7a0b\u4e2d\u4ea7\u751f\u7684\u8f93\u51fa\uff0c\u963b\u6b62\u4ed6\u4eec\u88ab\u663e\u793a\u51fa\u6765\uff0c\u4f7f\u5f97\u9605\u8bfb\u6d4b\u8bd5\u7ed3\u679c\u76f8\u5173\u7684\u5185\u5bb9\u53d8\u5f97\u66f4\u5bb9\u6613\u3002 \u53ef\u4ee5\u5c06\u4e00\u90e8\u5206\u547d\u4ee4\u884c\u53c2\u6570\u4f20\u9012\u7ed9 cargo test \uff0c\u800c\u5c06\u53e6\u5916\u4e00\u90e8\u5206\u4f20\u9012\u7ed9\u751f\u6210\u7684\u6d4b\u8bd5\u4e8c\u8fdb\u5236\u6587\u4ef6\u3002\u4e3a\u4e86\u5206\u9694\u8fd9\u4e24\u79cd\u53c2\u6570\uff0c\u9700\u8981\u5148\u5217\u51fa\u4f20\u9012\u7ed9 cargo test \u7684\u53c2\u6570\uff0c\u63a5\u7740\u662f\u5206\u9694\u7b26 -- \uff0c\u518d\u4e4b\u540e\u662f\u4f20\u9012\u7ed9\u6d4b\u8bd5\u4e8c\u8fdb\u5236\u6587\u4ef6\u7684\u53c2\u6570\u3002\u8fd0\u884c cargo test --help \u4f1a\u63d0\u793a cargo test \u7684\u6709\u5173\u53c2\u6570\uff0c\u800c\u8fd0\u884c cargo test -- --help \u53ef\u4ee5\u63d0\u793a\u5728\u5206\u9694\u7b26 -- \u4e4b\u540e\u4f7f\u7528\u7684\u6709\u5173\u53c2\u6570\u3002","title":"\u63a7\u5236\u5982\u4f55\u8fd0\u884c"},{"location":"testing/#_6","text":"\u5f53\u8fd0\u884c\u591a\u4e2a\u6d4b\u8bd5\u65f6\uff0c Rust \u9ed8\u8ba4\u4f7f\u7528\u7ebf\u7a0b\u6765\u5e76\u884c\u8fd0\u884c\u3002\u8fd9\u610f\u5473\u7740\u6d4b\u8bd5\u4f1a\u66f4\u5feb\u5730\u8fd0\u884c\u5b8c\u6bd5\uff0c\u6240\u4ee5\u4f60\u53ef\u4ee5\u66f4\u5feb\u7684\u5f97\u5230\u4ee3\u7801\u80fd\u5426\u5de5\u4f5c\u7684\u53cd\u9988\u3002\u56e0\u4e3a\u6d4b\u8bd5\u662f\u5728\u540c\u65f6\u8fd0\u884c\u7684\uff0c\u4f60\u5e94\u8be5\u786e\u4fdd\u6d4b\u8bd5 \u4e0d\u80fd\u76f8\u4e92\u4f9d\u8d56\uff0c\u6216\u4f9d\u8d56\u4efb\u4f55\u5171\u4eab\u7684\u72b6\u6001\uff0c\u5305\u62ec\u4f9d\u8d56\u5171\u4eab\u7684\u73af\u5883 \uff0c\u6bd4\u5982\u5f53\u524d\u5de5\u4f5c\u76ee\u5f55\u6216\u8005\u73af\u5883\u53d8\u91cf\u3002 \u4e3e\u4e2a\u4f8b\u5b50\uff0c\u6bcf\u4e00\u4e2a\u6d4b\u8bd5\u90fd\u8fd0\u884c\u4e00\u4e9b\u4ee3\u7801\uff0c\u5047\u8bbe\u8fd9\u4e9b\u4ee3\u7801\u90fd\u5728\u786c\u76d8\u4e0a\u521b\u5efa\u4e00\u4e2a test-output.txt \u6587\u4ef6\u5e76\u5199\u5165\u4e00\u4e9b\u6570\u636e\u3002\u63a5\u7740\u6bcf\u4e00\u4e2a\u6d4b\u8bd5\u90fd\u8bfb\u53d6\u6587\u4ef6\u4e2d\u7684\u6570\u636e\u5e76\u65ad\u8a00\u8fd9\u4e2a\u6587\u4ef6\u5305\u542b\u7279\u5b9a\u7684\u503c\uff0c\u800c\u8fd9\u4e2a\u503c\u5728\u6bcf\u4e2a\u6d4b\u8bd5\u4e2d\u90fd\u662f\u4e0d\u540c\u7684\u3002\u56e0\u4e3a\u6240\u6709\u6d4b\u8bd5\u90fd\u662f\u540c\u65f6\u8fd0\u884c\u7684\uff0c\u4e00\u4e2a\u6d4b\u8bd5\u53ef\u80fd\u4f1a\u5728\u53e6\u4e00\u4e2a\u6d4b\u8bd5\u8bfb\u5199\u6587\u4ef6\u8fc7\u7a0b\u4e2d\u4fee\u6539\u4e86\u6587\u4ef6\u3002\u90a3\u4e48\u7b2c\u4e8c\u4e2a\u6d4b\u8bd5\u5c31\u4f1a\u5931\u8d25\uff0c\u5e76\u4e0d\u662f\u56e0\u4e3a\u4ee3\u7801\u4e0d\u6b63\u786e\uff0c\u800c\u662f\u56e0\u4e3a\u6d4b\u8bd5\u5e76\u884c\u8fd0\u884c\u65f6\u76f8\u4e92\u5e72\u6270\u3002\u4e00\u4e2a\u89e3\u51b3\u65b9\u6848\u662f\u4f7f\u6bcf\u4e00\u4e2a\u6d4b\u8bd5\u8bfb\u5199\u4e0d\u540c\u7684\u6587\u4ef6\uff1b\u53e6\u4e00\u4e2a\u89e3\u51b3\u65b9\u6848\u662f\u4e00\u6b21\u8fd0\u884c\u4e00\u4e2a\u6d4b\u8bd5\u3002 \u5982\u679c\u4f60\u4e0d\u5e0c\u671b\u6d4b\u8bd5\u5e76\u884c\u8fd0\u884c\uff0c\u6216\u8005\u60f3\u8981\u66f4\u52a0\u7cbe\u786e\u7684\u63a7\u5236\u7ebf\u7a0b\u7684\u6570\u91cf\uff0c\u53ef\u4ee5\u4f20\u9012 --test-threads \u53c2\u6570\u548c\u5e0c\u671b\u4f7f\u7528\u7ebf\u7a0b\u7684\u6570\u91cf\u7ed9\u6d4b\u8bd5\u4e8c\u8fdb\u5236\u6587\u4ef6\u3002\u4f8b\u5982\uff1a cargo test -- --test-threads = 1 \u8fd9\u91cc\u5c06\u6d4b\u8bd5\u7ebf\u7a0b\u8bbe\u7f6e\u4e3a 1\uff0c\u544a\u8bc9\u7a0b\u5e8f\u4e0d\u8981\u4f7f\u7528\u4efb\u4f55\u5e76\u884c\u673a\u5236\u3002\u8fd9\u4e5f\u4f1a\u6bd4\u5e76\u884c\u8fd0\u884c\u82b1\u8d39\u66f4\u591a\u65f6\u95f4\uff0c\u4e0d\u8fc7\u5728\u6709\u5171\u4eab\u7684\u72b6\u6001\u65f6\uff0c\u6d4b\u8bd5\u5c31\u4e0d\u4f1a\u6f5c\u5728\u7684\u76f8\u4e92\u5e72\u6270\u4e86\u3002","title":"\u5e76\u884c\u6216\u8fde\u7eed\u6d4b\u8bd5"},{"location":"testing/#_7","text":"\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u5f53\u6d4b\u8bd5\u901a\u8fc7\u65f6\uff0cRust \u7684\u6d4b\u8bd5\u5e93\u4f1a\u622a\u83b7\u6253\u5370\u5230\u6807\u51c6\u8f93\u51fa\u7684\u6240\u6709\u5185\u5bb9\u3002 \u6bd4\u5982\u5728\u6d4b\u8bd5\u4e2d\u8c03\u7528\u4e86 println! \u800c\u6d4b\u8bd5\u901a\u8fc7\u4e86\uff0c\u6211\u4eec\u5c06\u4e0d\u4f1a\u5728\u7ec8\u7aef\u770b\u5230 println! \u7684\u8f93\u51fa\uff1a\u53ea\u4f1a\u770b\u5230\u8bf4\u660e\u6d4b\u8bd5\u901a\u8fc7\u7684\u63d0\u793a\u884c\u3002 \u5982\u679c\u6d4b\u8bd5\u5931\u8d25\u4e86\uff0c\u5219\u4f1a\u770b\u5230\u6240\u6709\u6807\u51c6\u8f93\u51fa\u548c\u5176\u4ed6\u9519\u8bef\u4fe1\u606f\u3002 \u4f8b\u5982\uff0c\u793a\u4f8b\u6709\u4e00\u4e2a\u65e0\u610f\u4e49\u7684\u51fd\u6570\uff0c\u5b83\u6253\u5370\u51fa\u5176\u53c2\u6570\u7684\u503c\u5e76\u63a5\u7740\u8fd4\u56de 10 \u3002\u63a5\u7740\u8fd8\u6709\u4e00\u4e2a\u4f1a\u901a\u8fc7\u7684\u6d4b\u8bd5\u548c\u4e00\u4e2a\u4f1a\u5931\u8d25\u7684\u6d4b\u8bd5\uff1a // \u4e00\u4e2a\u8c03\u7528\u4e86 println! \u7684\u51fd\u6570\u7684\u6d4b\u8bd5 fn prints_and_returns_10 ( a : i32 ) -> i32 { println! ( \"I got the value {}\" , a ); 10 } #[cfg(test)] mod tests { use super :: * ; #[test] fn this_test_will_pass () { let value = prints_and_returns_10 ( 4 ); assert_eq! ( 10 , value ); } #[test] fn this_test_will_fail () { let value = prints_and_returns_10 ( 8 ); assert_eq! ( 5 , value ); } } \u8fd0\u884c cargo test \u5c06\u4f1a\u770b\u5230\u8fd9\u4e9b\u6d4b\u8bd5\u7684\u8f93\u51fa\uff1a $ cargo test Compiling silly-function v0.1.0 ( file:///projects/silly-function ) Finished test [ unoptimized + debuginfo ] target ( s ) in 0 .58s Running unittests ( target/debug/deps/silly_function-160869f38cff9166 ) running 2 tests test tests::this_test_will_fail ... FAILED test tests::this_test_will_pass ... ok failures: ---- tests::this_test_will_fail stdout ---- I got the value 8 thread 'main' panicked at 'assertion failed: `(left == right)` left: `5`, right: `10`' , src/lib.rs:19:9 note: run with ` RUST_BACKTRACE = 1 ` environment variable to display a backtrace failures: tests::this_test_will_fail test result: FAILED. 1 passed ; 1 failed ; 0 ignored ; 0 measured ; 0 filtered out ; finished in 0 .00s error: test failed, to rerun pass '--lib' \u6ce8\u610f\u8f93\u51fa\u4e2d\u4e0d\u4f1a\u51fa\u73b0\u6d4b\u8bd5\u901a\u8fc7\u65f6\u6253\u5370\u7684\u5185\u5bb9\uff0c\u5373 I got the value 4 \u3002\u56e0\u4e3a\u5f53\u6d4b\u8bd5\u901a\u8fc7\u65f6\uff0c\u8fd9\u4e9b\u8f93\u51fa\u4f1a\u88ab\u622a\u83b7\u3002\u5931\u8d25\u6d4b\u8bd5\u7684\u8f93\u51fa I got the value 8 \uff0c\u5219\u51fa\u73b0\u5728\u8f93\u51fa\u7684\u6d4b\u8bd5\u6458\u8981\u90e8\u5206\uff0c\u540c\u65f6\u4e5f\u663e\u793a\u4e86\u6d4b\u8bd5\u5931\u8d25\u7684\u539f\u56e0\u3002 \u5982\u679c\u4f60\u5e0c\u671b\u4e5f\u80fd\u770b\u5230\u901a\u8fc7\u7684\u6d4b\u8bd5\u4e2d\u6253\u5370\u7684\u503c\uff0c\u4e5f\u53ef\u4ee5\u5728\u7ed3\u5c3e\u52a0\u4e0a --show-output \u544a\u8bc9 Rust \u663e\u793a\u6210\u529f\u6d4b\u8bd5\u7684\u8f93\u51fa\u3002 cargo test -- --show-output \u4f7f\u7528 --show-output \u53c2\u6570\u518d\u6b21\u8fd0\u884c\u793a\u4f8b\u4e2d\u7684\u6d4b\u8bd5\u4f1a\u663e\u793a\u5982\u4e0b\u8f93\u51fa\uff1a $ cargo test -- --show-output Compiling silly-function v0.1.0 ( file:///projects/silly-function ) Finished test [ unoptimized + debuginfo ] target ( s ) in 0 .60s Running unittests ( target/debug/deps/silly_function-160869f38cff9166 ) running 2 tests test tests::this_test_will_fail ... FAILED test tests::this_test_will_pass ... ok successes: ---- tests::this_test_will_pass stdout ---- I got the value 4 successes: tests::this_test_will_pass failures: ---- tests::this_test_will_fail stdout ---- I got the value 8 thread 'main' panicked at 'assertion failed: `(left == right)` left: `5`, right: `10`' , src/lib.rs:19:9 note: run with ` RUST_BACKTRACE = 1 ` environment variable to display a backtrace failures: tests::this_test_will_fail test result: FAILED. 1 passed ; 1 failed ; 0 ignored ; 0 measured ; 0 filtered out ; finished in 0 .00s error: test failed, to rerun pass '--lib'","title":"\u663e\u793a\u51fd\u6570\u8f93\u51fa"},{"location":"testing/#_8","text":"\u6709\u65f6\u8fd0\u884c\u6574\u4e2a\u6d4b\u8bd5\u96c6\u4f1a\u8017\u8d39\u5f88\u957f\u65f6\u95f4\u3002\u5982\u679c\u4f60\u8d1f\u8d23\u7279\u5b9a\u4f4d\u7f6e\u7684\u4ee3\u7801\uff0c\u4f60\u53ef\u80fd\u4f1a\u5e0c\u671b\u53ea\u8fd0\u884c\u4e0e\u8fd9\u4e9b\u4ee3\u7801\u76f8\u5173\u7684\u6d4b\u8bd5\u3002\u4f60\u53ef\u4ee5\u5411 cargo test \u4f20\u9012\u6240\u5e0c\u671b\u8fd0\u884c\u7684\u6d4b\u8bd5\u540d\u79f0\u7684\u53c2\u6570\u6765\u9009\u62e9\u8fd0\u884c\u54ea\u4e9b\u6d4b\u8bd5\u3002 \u4e3a\u4e86\u5c55\u793a\u5982\u4f55\u8fd0\u884c\u90e8\u5206\u6d4b\u8bd5\uff0c\u793a\u4f8b\u4e3a add_two \u51fd\u6570\u521b\u5efa\u4e86\u4e09\u4e2a\u6d4b\u8bd5\uff0c\u6211\u4eec\u53ef\u4ee5\u9009\u62e9\u5177\u4f53\u8fd0\u884c\u54ea\u4e00\u4e2a\uff1a // \u4e0d\u540c\u540d\u79f0\u7684\u4e09\u4e2a\u6d4b\u8bd5 pub fn add_two ( a : i32 ) -> i32 { a + 2 } #[cfg(test)] mod tests { use super :: * ; #[test] fn add_two_and_two () { assert_eq! ( 4 , add_two ( 2 )); } #[test] fn add_three_and_two () { assert_eq! ( 5 , add_two ( 3 )); } #[test] fn one_hundred () { assert_eq! ( 102 , add_two ( 100 )); } } \u5982\u679c\u6ca1\u6709\u4f20\u9012\u4efb\u4f55\u53c2\u6570\u5c31\u8fd0\u884c\u6d4b\u8bd5\uff0c\u5982\u4f60\u6240\u89c1\uff0c\u6240\u6709\u6d4b\u8bd5\u90fd\u4f1a\u5e76\u884c\u8fd0\u884c\uff1a $ cargo test Compiling adder v0.1.0 ( file:///projects/adder ) Finished test [ unoptimized + debuginfo ] target ( s ) in 0 .62s Running unittests ( target/debug/deps/adder-92948b65e88960b4 ) running 3 tests test tests::add_three_and_two ... ok test tests::add_two_and_two ... ok test tests::one_hundred ... ok test result: ok. 3 passed ; 0 failed ; 0 ignored ; 0 measured ; 0 filtered out ; finished in 0 .00s Doc-tests adder running 0 tests test result: ok. 0 passed ; 0 failed ; 0 ignored ; 0 measured ; 0 filtered out ; finished in 0 .00s","title":"\u6307\u5b9a\u540d\u79f0\u8fd0\u884c\u90e8\u5206\u6d4b\u8bd5"},{"location":"testing/#_9","text":"\u53ef\u4ee5\u5411 cargo test \u4f20\u9012\u4efb\u610f\u6d4b\u8bd5\u7684\u540d\u79f0\u6765\u53ea\u8fd0\u884c\u8fd9\u4e2a\u6d4b\u8bd5\uff1a $ cargo test one_hundred Compiling adder v0.1.0 ( file:///projects/adder ) Finished test [ unoptimized + debuginfo ] target ( s ) in 0 .69s Running unittests ( target/debug/deps/adder-92948b65e88960b4 ) running 1 test test tests::one_hundred ... ok test result: ok. 1 passed ; 0 failed ; 0 ignored ; 0 measured ; 2 filtered out ; finished in 0 .00s \u53ea\u6709\u540d\u79f0\u4e3a one_hundred \u7684\u6d4b\u8bd5\u88ab\u8fd0\u884c\u4e86\uff1b\u56e0\u4e3a\u5176\u4f59\u4e24\u4e2a\u6d4b\u8bd5\u5e76\u4e0d\u5339\u914d\u8fd9\u4e2a\u540d\u79f0\u3002\u6d4b\u8bd5\u8f93\u51fa\u5728\u6458\u8981\u884c\u7684\u7ed3\u5c3e\u663e\u793a\u4e86 2 filtered out \u8868\u660e\u8fd8\u5b58\u5728\u6bd4\u672c\u6b21\u6240\u8fd0\u884c\u7684\u6d4b\u8bd5\u66f4\u591a\u7684\u6d4b\u8bd5\u88ab\u8fc7\u6ee4\u6389\u4e86\u3002 \u4e0d\u80fd\u50cf\u8fd9\u6837\u6307\u5b9a\u591a\u4e2a\u6d4b\u8bd5\u540d\u79f0\uff1b\u53ea\u6709\u4f20\u9012\u7ed9 cargo test \u7684\u7b2c\u4e00\u4e2a\u503c\u624d\u4f1a\u88ab\u4f7f\u7528\u3002\u4e0d\u8fc7\u6709\u8fd0\u884c\u591a\u4e2a\u6d4b\u8bd5\u7684\u65b9\u6cd5\u3002","title":"\u5355\u4e2a\u6d4b\u8bd5"},{"location":"testing/#_10","text":"\u6211\u4eec\u53ef\u4ee5\u6307\u5b9a\u90e8\u5206\u6d4b\u8bd5\u7684\u540d\u79f0\uff0c\u4efb\u4f55\u540d\u79f0\u5339\u914d\u8fd9\u4e2a\u540d\u79f0\u7684\u6d4b\u8bd5\u4f1a\u88ab\u8fd0\u884c\u3002\u4f8b\u5982\uff0c\u56e0\u4e3a\u5934\u4e24\u4e2a\u6d4b\u8bd5\u7684\u540d\u79f0\u5305\u542b add \uff0c\u53ef\u4ee5\u901a\u8fc7 cargo test add \u6765\u8fd0\u884c\u8fd9\u4e24\u4e2a\u6d4b\u8bd5\uff1a $ cargo test add Compiling adder v0 . 1.0 ( file : ///projects/adder) Finished test [ unoptimized + debuginfo ] target ( s ) in 0.61 s Running unittests ( target / debug / deps / adder - 92948 b65e88960b4 ) running 2 tests test tests :: add_three_and_two .. . ok test tests :: add_two_and_two .. . ok test result : ok . 2 passed ; 0 failed ; 0 ignored ; 0 measured ; 1 filtered out ; finished in 0.00 s \u8fd9\u8fd0\u884c\u4e86\u6240\u6709\u540d\u5b57\u4e2d\u5e26\u6709 add \u7684\u6d4b\u8bd5\uff0c\u4e5f\u8fc7\u6ee4\u6389\u4e86\u540d\u4e3a one_hundred \u7684\u6d4b\u8bd5\u3002\u540c\u65f6\u6ce8\u610f\u6d4b\u8bd5\u6240\u5728\u7684\u6a21\u5757\u4e5f\u662f\u6d4b\u8bd5\u540d\u79f0\u7684\u4e00\u90e8\u5206\uff0c\u6240\u4ee5\u53ef\u4ee5\u901a\u8fc7\u6a21\u5757\u540d\u6765\u8fd0\u884c\u4e00\u4e2a\u6a21\u5757\u4e2d\u7684\u6240\u6709\u6d4b\u8bd5\u3002","title":"\u8fc7\u6ee4\u8fd0\u884c\u591a\u4e2a\u6d4b\u8bd5"},{"location":"testing/#_11","text":"\u6709\u65f6\u4e00\u4e9b\u7279\u5b9a\u7684\u6d4b\u8bd5\u6267\u884c\u8d77\u6765\u662f\u975e\u5e38\u8017\u8d39\u65f6\u95f4\u7684\uff0c\u6240\u4ee5\u5728\u5927\u591a\u6570\u8fd0\u884c cargo test \u7684\u65f6\u5019\u5e0c\u671b\u80fd\u6392\u9664\u4ed6\u4eec\u3002 \u867d\u7136\u53ef\u4ee5\u901a\u8fc7\u53c2\u6570\u5217\u4e3e\u51fa\u6240\u6709\u5e0c\u671b\u8fd0\u884c\u7684\u6d4b\u8bd5\u6765\u505a\u5230\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528 ignore \u5c5e\u6027\u6765\u6807\u8bb0\u8017\u65f6\u7684\u6d4b\u8bd5\u5e76\u6392\u9664\u4ed6\u4eec\uff0c \u5982\u4e0b\u6240\u793a\uff1a #[test] fn it_works () { assert_eq! ( 2 + 2 , 4 ); } #[test] #[ignore] fn expensive_test () { // \u9700\u8981\u8fd0\u884c\u4e00\u4e2a\u5c0f\u65f6\u7684\u4ee3\u7801 } \u5bf9\u4e8e\u60f3\u8981\u6392\u9664\u7684\u6d4b\u8bd5\uff0c\u6211\u4eec\u5728 #[test] \u4e4b\u540e\u589e\u52a0\u4e86 #[ignore] \u884c\u3002\u73b0\u5728\u5982\u679c\u8fd0\u884c\u6d4b\u8bd5\uff0c\u5c31\u4f1a\u53d1\u73b0 it_works \u8fd0\u884c\u4e86\uff0c\u800c expensive_test \u6ca1\u6709\u8fd0\u884c\uff1a $ cargo test Compiling adder v0.1.0 ( file:///projects/adder ) Finished test [ unoptimized + debuginfo ] target ( s ) in 0 .60s Running unittests ( target/debug/deps/adder-92948b65e88960b4 ) running 2 tests test expensive_test ... ignored test it_works ... ok test result: ok. 1 passed ; 0 failed ; 1 ignored ; 0 measured ; 0 filtered out ; finished in 0 .00s Doc-tests adder running 0 tests test result: ok. 0 passed ; 0 failed ; 0 ignored ; 0 measured ; 0 filtered out ; finished in 0 .00s expensive_test \u88ab\u5217\u4e3a ignored \uff0c\u5982\u679c\u6211\u4eec\u53ea\u5e0c\u671b\u8fd0\u884c\u88ab\u5ffd\u7565\u7684\u6d4b\u8bd5\uff0c\u53ef\u4ee5\u4f7f\u7528 cargo test -- --ignored \uff1a $ cargo test -- --ignored Compiling adder v0.1.0 ( file:///projects/adder ) Finished test [ unoptimized + debuginfo ] target ( s ) in 0 .61s Running unittests ( target/debug/deps/adder-92948b65e88960b4 ) running 1 test test expensive_test ... ok test result: ok. 1 passed ; 0 failed ; 0 ignored ; 0 measured ; 1 filtered out ; finished in 0 .00s Doc-tests adder running 0 tests test result: ok. 0 passed ; 0 failed ; 0 ignored ; 0 measured ; 0 filtered out ; finished in 0 .00s \u901a\u8fc7\u63a7\u5236\u8fd0\u884c\u54ea\u4e9b\u6d4b\u8bd5\uff0c\u4f60\u53ef\u4ee5\u786e\u4fdd\u80fd\u591f\u5feb\u901f\u5730\u8fd0\u884c cargo test \u3002 \u5f53\u4f60\u9700\u8981\u8fd0\u884c ignored \u7684\u6d4b\u8bd5\u65f6\uff0c\u53ef\u4ee5\u6267\u884c cargo test -- --ignored \u3002 \u5982\u679c\u4f60\u5e0c\u671b\u4e0d\u7ba1\u662f\u5426\u5ffd\u7565\u90fd\u8981\u8fd0\u884c\u5168\u90e8\u6d4b\u8bd5\uff0c\u53ef\u4ee5\u8fd0\u884c cargo test -- --include-ignored \u3002","title":"\u5ffd\u7565\u67d0\u4e9b\u6d4b\u8bd5"},{"location":"testing/#_12","text":"\u672c\u7ae0\u4e00\u5f00\u59cb\u5c31\u63d0\u5230\uff0c\u6d4b\u8bd5\u662f\u4e00\u4e2a\u590d\u6742\u7684\u6982\u5ff5\uff0c\u800c\u4e14\u4e0d\u540c\u7684\u5f00\u53d1\u8005\u4e5f\u91c7\u7528\u4e0d\u540c\u7684\u6280\u672f\u548c\u7ec4\u7ec7\u3002 Rust \u793e\u533a\u503e\u5411\u4e8e\u6839\u636e\u6d4b\u8bd5\u7684\u4e24\u4e2a\u4e3b\u8981\u5206\u7c7b\u6765\u8003\u8651\u95ee\u9898\uff1a \u5355\u5143\u6d4b\u8bd5 \uff08unit tests\uff09\u4e0e \u96c6\u6210\u6d4b\u8bd5 \uff08integration tests\uff09\u3002 \u5355\u5143\u6d4b\u8bd5\u503e\u5411\u4e8e\u66f4\u5c0f\u800c\u66f4\u96c6\u4e2d\uff0c\u5728\u9694\u79bb\u7684\u73af\u5883\u4e2d\u4e00\u6b21\u6d4b\u8bd5\u4e00\u4e2a\u6a21\u5757\uff0c\u6216\u8005\u662f\u6d4b\u8bd5\u79c1\u6709\u63a5\u53e3\u3002 \u800c\u96c6\u6210\u6d4b\u8bd5\u5bf9\u4e8e\u4f60\u7684\u5e93\u6765\u8bf4\u5219\u5b8c\u5168\u662f\u5916\u90e8\u7684\u3002\u5b83\u4eec\u4e0e\u5176\u4ed6\u5916\u90e8\u4ee3\u7801\u4e00\u6837\uff0c\u901a\u8fc7\u76f8\u540c\u7684\u65b9\u5f0f\u4f7f\u7528\u4f60\u7684\u4ee3\u7801\uff0c\u53ea\u6d4b\u8bd5\u516c\u6709\u63a5\u53e3\u800c\u4e14\u6bcf\u4e2a\u6d4b\u8bd5\u90fd\u6709\u53ef\u80fd\u4f1a\u6d4b\u8bd5\u591a\u4e2a\u6a21\u5757\u3002 \u4e3a\u4e86\u4fdd\u8bc1\u4f60\u7684\u5e93\u80fd\u591f\u6309\u7167\u4f60\u7684\u9884\u671f\u8fd0\u884c\uff0c\u4ece\u72ec\u7acb\u548c\u6574\u4f53\u7684\u89d2\u5ea6\u7f16\u5199\u8fd9\u4e24\u7c7b\u6d4b\u8bd5\u90fd\u662f\u975e\u5e38\u91cd\u8981\u7684\u3002","title":"\u6d4b\u8bd5\u7684\u7ec4\u7ec7\u7ed3\u6784"},{"location":"testing/#_13","text":"\u5355\u5143\u6d4b\u8bd5\u7684\u76ee\u7684\u662f\u5728\u4e0e\u5176\u4ed6\u90e8\u5206\u9694\u79bb\u7684\u73af\u5883\u4e2d\u6d4b\u8bd5\u6bcf\u4e00\u4e2a\u5355\u5143\u7684\u4ee3\u7801\uff0c\u4ee5\u4fbf\u4e8e\u5feb\u901f\u800c\u51c6\u786e\u7684\u67d0\u4e2a\u5355\u5143\u7684\u4ee3\u7801\u529f\u80fd\u662f\u5426\u7b26\u5408\u9884\u671f\u3002 \u5355\u5143\u6d4b\u8bd5\u4e0e\u4ed6\u4eec\u8981\u6d4b\u8bd5\u7684\u4ee3\u7801\u5171\u540c\u5b58\u653e\u5728\u4f4d\u4e8e src \u76ee\u5f55\u4e0b\u76f8\u540c\u7684\u6587\u4ef6\u4e2d\u3002 \u89c4\u8303\u662f\u5728\u6bcf\u4e2a\u6587\u4ef6\u4e2d\u521b\u5efa\u5305\u542b\u6d4b\u8bd5\u51fd\u6570\u7684 tests \u6a21\u5757\uff0c\u5e76\u4f7f\u7528 cfg(test) \u6807\u6ce8\u6a21\u5757\u3002","title":"\u5355\u5143\u6d4b\u8bd5"},{"location":"testing/#cfgtest","text":"\u6d4b\u8bd5\u6a21\u5757\u7684 #[cfg(test)] \u6ce8\u89e3\u544a\u8bc9 Rust \u53ea\u5728\u6267\u884c cargo test \u65f6\u624d\u7f16\u8bd1\u548c\u8fd0\u884c\u6d4b\u8bd5\u4ee3\u7801\uff0c\u800c\u5728\u8fd0\u884c cargo build \u65f6\u4e0d\u8fd9\u4e48\u505a\u3002 \u8fd9\u5728\u53ea\u5e0c\u671b\u6784\u5efa\u5e93\u7684\u65f6\u5019\u53ef\u4ee5\u8282\u7701\u7f16\u8bd1\u65f6\u95f4\uff0c\u5e76\u4e14\u56e0\u4e3a\u5b83\u4eec\u5e76\u6ca1\u6709\u5305\u542b\u6d4b\u8bd5\uff0c\u6240\u4ee5\u80fd\u51cf\u5c11\u7f16\u8bd1\u4ea7\u751f\u7684\u6587\u4ef6\u7684\u5927\u5c0f\u3002 \u4e0e\u4e4b\u5bf9\u5e94\u7684\u96c6\u6210\u6d4b\u8bd5\u56e0\u4e3a\u4f4d\u4e8e\u53e6\u4e00\u4e2a\u6587\u4ef6\u5939\uff0c\u6240\u4ee5\u5b83\u4eec\u5e76\u4e0d\u9700\u8981 #[cfg(test)] \u6ce8\u89e3\u3002 \u7136\u800c\u5355\u5143\u6d4b\u8bd5\u4f4d\u4e8e\u4e0e\u6e90\u7801\u76f8\u540c\u7684\u6587\u4ef6\u4e2d\uff0c\u6240\u4ee5\u4f60\u9700\u8981\u4f7f\u7528 #[cfg(test)] \u6765\u6307\u5b9a\u4ed6\u4eec\u4e0d\u5e94\u8be5\u88ab\u5305\u542b\u8fdb\u7f16\u8bd1\u7ed3\u679c\u4e2d\u3002 \u56de\u5fc6\u672c\u7ae0\u7b2c\u4e00\u90e8\u5206\u65b0\u5efa\u7684 adder \u9879\u76ee\uff0c Cargo \u4e3a\u6211\u4eec\u751f\u6210\u4e86\u5982\u4e0b\u4ee3\u7801\uff1a #[cfg(test)] mod tests { #[test] fn it_works () { assert_eq! ( 2 + 2 , 4 ); } } \u4e0a\u8ff0\u4ee3\u7801\u5c31\u662f\u81ea\u52a8\u751f\u6210\u7684\u6d4b\u8bd5\u6a21\u5757\u3002 cfg \u5c5e\u6027\u4ee3\u8868 configuration \uff0c\u5b83\u544a\u8bc9 Rust \u5176\u4e4b\u540e\u7684\u9879\u53ea\u5e94\u8be5\u88ab\u5305\u542b\u8fdb\u7279\u5b9a\u914d\u7f6e\u9009\u9879\u4e2d\u3002 \u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u914d\u7f6e\u9009\u9879\u662f test \uff0c\u5373 Rust \u6240\u63d0\u4f9b\u7684\u7528\u4e8e\u7f16\u8bd1\u548c\u8fd0\u884c\u6d4b\u8bd5\u7684\u914d\u7f6e\u9009\u9879\u3002 \u901a\u8fc7\u4f7f\u7528 cfg \u5c5e\u6027\uff0c Cargo \u53ea\u4f1a\u5728\u6211\u4eec\u4e3b\u52a8\u4f7f\u7528 cargo test \u8fd0\u884c\u6d4b\u8bd5\u65f6\u624d\u7f16\u8bd1\u6d4b\u8bd5\u4ee3\u7801\u3002\u8fd9\u5305\u62ec\u6d4b\u8bd5\u6a21\u5757\u4e2d\u53ef\u80fd\u5b58\u5728\u7684\u5e2e\u52a9\u51fd\u6570\uff0c \u4ee5\u53ca\u6807\u6ce8\u4e3a #[test] \u7684\u51fd\u6570\u3002","title":"\u6d4b\u8bd5\u6a21\u5757\u548c #[cfg(test)]"},{"location":"testing/#_14","text":"\u6d4b\u8bd5\u793e\u533a\u4e2d\u4e00\u76f4\u5b58\u5728\u5173\u4e8e\u662f\u5426\u5e94\u8be5\u5bf9\u79c1\u6709\u51fd\u6570\u76f4\u63a5\u8fdb\u884c\u6d4b\u8bd5\u7684\u8bba\u6218\uff0c\u800c\u5728\u5176\u4ed6\u8bed\u8a00\u4e2d\u60f3\u8981\u6d4b\u8bd5\u79c1\u6709\u51fd\u6570\u662f\u4e00\u4ef6\u56f0\u96be\u7684\uff0c\u751a\u81f3\u662f\u4e0d\u53ef\u80fd\u7684\u4e8b\u3002 \u4e0d\u8fc7\u65e0\u8bba\u4f60\u575a\u6301\u54ea\u79cd\u6d4b\u8bd5\u610f\u8bc6\u5f62\u6001\uff0cRust \u7684\u79c1\u6709\u6027\u89c4\u5219\u786e\u5b9e\u5141\u8bb8\u4f60\u6d4b\u8bd5\u79c1\u6709\u51fd\u6570\u3002 \u8003\u8651\u793a\u4f8b\u4e2d\u5e26\u6709\u79c1\u6709\u51fd\u6570 internal_adder \u7684\u4ee3\u7801\uff1a pub fn add_two ( a : i32 ) -> i32 { internal_adder ( a , 2 ) } fn internal_adder ( a : i32 , b : i32 ) -> i32 { a + b } #[cfg(test)] mod tests { use super :: * ; #[test] fn internal () { assert_eq! ( 4 , internal_adder ( 2 , 2 )); } } \u6ce8\u610f internal_adder \u51fd\u6570\u5e76\u6ca1\u6709\u6807\u8bb0\u4e3a pub \u3002\u6d4b\u8bd5\u4e5f\u4e0d\u8fc7\u662f Rust \u4ee3\u7801\uff0c\u540c\u65f6 tests \u4e5f\u4ec5\u4ec5\u662f\u53e6\u4e00\u4e2a\u6a21\u5757\u3002 \u6b63\u5982 \u201c\u8def\u5f84\u7528\u4e8e\u5f15\u7528\u6a21\u5757\u6811\u4e2d\u7684\u9879\u201d \u90e8\u5206\u6240\u8bf4\uff0c\u5b50\u6a21\u5757\u7684\u9879\u53ef\u4ee5\u4f7f\u7528\u5176\u4e0a\u7ea7\u6a21\u5757\u7684\u9879\u3002 \u5728\u6d4b\u8bd5\u4e2d\uff0c\u6211\u4eec\u901a\u8fc7 use super:: \u5c06 test \u6a21\u5757\u7684\u7236\u6a21\u5757\u7684\u6240\u6709\u9879\u5f15\u5165\u4e86\u4f5c\u7528\u57df\uff0c\u63a5\u7740\u6d4b\u8bd5\u8c03\u7528\u4e86 internal_adder *\u3002 \u5982\u679c\u4f60\u5e76\u4e0d\u8ba4\u4e3a\u5e94\u8be5\u6d4b\u8bd5\u79c1\u6709\u51fd\u6570\uff0cRust \u4e5f\u4e0d\u4f1a\u5f3a\u8feb\u4f60\u8fd9\u4e48\u505a\u3002","title":"\u6d4b\u8bd5\u79c1\u6709\u51fd\u6570"},{"location":"testing/#_15","text":"\u5728 Rust \u4e2d\uff0c\u96c6\u6210\u6d4b\u8bd5\u5bf9\u4e8e\u4f60\u9700\u8981\u6d4b\u8bd5\u7684\u5e93\u6765\u8bf4\u5b8c\u5168\u662f\u5916\u90e8\u7684\u3002\u540c\u5176\u4ed6\u4f7f\u7528\u5e93\u7684\u4ee3\u7801\u4e00\u6837\u4f7f\u7528\u5e93\u6587\u4ef6\uff0c\u4e5f\u5c31\u662f\u8bf4\u5b83\u4eec\u53ea\u80fd\u8c03\u7528\u4e00\u90e8\u5206\u5e93\u4e2d\u7684\u516c\u6709 API \u3002 \u96c6\u6210\u6d4b\u8bd5\u7684\u76ee\u7684\u662f\u6d4b\u8bd5\u5e93\u7684\u591a\u4e2a\u90e8\u5206\u80fd\u5426\u4e00\u8d77\u6b63\u5e38\u5de5\u4f5c\u3002\u4e00\u4e9b\u5355\u72ec\u80fd\u6b63\u786e\u8fd0\u884c\u7684\u4ee3\u7801\u5355\u5143\u96c6\u6210\u5728\u4e00\u8d77\u4e5f\u53ef\u80fd\u4f1a\u51fa\u73b0\u95ee\u9898\uff0c\u6240\u4ee5\u96c6\u6210\u6d4b\u8bd5\u7684\u8986\u76d6\u7387\u4e5f\u662f\u5f88\u91cd\u8981\u7684\u3002 \u4e3a\u4e86\u521b\u5efa\u96c6\u6210\u6d4b\u8bd5\uff0c\u4f60\u9700\u8981\u5148\u521b\u5efa\u4e00\u4e2a tests \u76ee\u5f55\u3002","title":"\u96c6\u6210\u6d4b\u8bd5"},{"location":"testing/#tests","text":"\u4e3a\u4e86\u7f16\u5199\u96c6\u6210\u6d4b\u8bd5\uff0c\u9700\u8981\u5728\u9879\u76ee\u6839\u76ee\u5f55\u521b\u5efa\u4e00\u4e2a tests \u76ee\u5f55\uff0c\u4e0e src \u540c\u7ea7\u3002 Cargo \u77e5\u9053\u5982\u4f55\u53bb\u5bfb\u627e\u8fd9\u4e2a\u76ee\u5f55\u4e2d\u7684\u96c6\u6210\u6d4b\u8bd5\u6587\u4ef6\u3002\u63a5\u7740\u53ef\u4ee5\u968f\u610f\u5728\u8fd9\u4e2a\u76ee\u5f55\u4e2d\u521b\u5efa\u4efb\u610f\u591a\u7684\u6d4b\u8bd5\u6587\u4ef6\uff0cCargo \u4f1a\u5c06\u6bcf\u4e00\u4e2a\u6587\u4ef6\u5f53\u4f5c\u5355\u72ec\u7684 crate \u6765\u7f16\u8bd1\u3002 \u8ba9\u6211\u4eec\u6765\u521b\u5efa\u4e00\u4e2a\u96c6\u6210\u6d4b\u8bd5\u3002\u4fdd\u7559\u4e0a\u4e2a\u793a\u4f8b\u4e2d src/lib.rs \u7684\u4ee3\u7801\u3002\u521b\u5efa\u4e00\u4e2a tests \u76ee\u5f55\uff0c\u65b0\u5efa\u4e00\u4e2a\u6587\u4ef6 tests/integration_test.rs \uff0c\u5e76\u8f93\u5165\u4e0b\u9762\u793a\u4f8b\u4e2d\u7684\u4ee3\u7801\u3002 // \u6587\u4ef6\u540d: tests/integration_test.rs use adder ; #[test] fn it_adds_two () { assert_eq! ( 4 , adder :: add_two ( 2 )); } \u4e0e\u5355\u5143\u6d4b\u8bd5\u4e0d\u540c\uff0c\u6211\u4eec\u9700\u8981\u5728\u6587\u4ef6\u9876\u90e8\u6dfb\u52a0 use adder \u3002\u8fd9\u662f\u56e0\u4e3a\u6bcf\u4e00\u4e2a tests \u76ee\u5f55\u4e2d\u7684\u6d4b\u8bd5\u6587\u4ef6\u90fd\u662f\u5b8c\u5168\u72ec\u7acb\u7684 crate \uff0c\u6240\u4ee5\u9700\u8981\u5728\u6bcf\u4e00\u4e2a\u6587\u4ef6\u4e2d\u5bfc\u5165\u5e93\u3002 \u5e76\u4e0d\u9700\u8981\u5c06 tests/integration_test.rs \u4e2d\u7684\u4efb\u4f55\u4ee3\u7801\u6807\u6ce8\u4e3a #[cfg(test)] \u3002 tests \u6587\u4ef6\u5939\u5728 Cargo \u4e2d\u662f\u4e00\u4e2a\u7279\u6b8a\u7684\u6587\u4ef6\u5939\uff0c Cargo \u53ea\u4f1a\u5728\u8fd0\u884c cargo test \u65f6\u7f16\u8bd1\u8fd9\u4e2a\u76ee\u5f55\u4e2d\u7684\u6587\u4ef6\u3002\u73b0\u5728\u5c31\u8fd0\u884c cargo test \u8bd5\u8bd5\uff1a $ cargo test Compiling adder v0.1.0 ( file:///projects/adder ) Finished test [ unoptimized + debuginfo ] target ( s ) in 1 .31s Running unittests ( target/debug/deps/adder-1082c4b063a8fbe6 ) running 1 test test tests::internal ... ok test result: ok. 1 passed ; 0 failed ; 0 ignored ; 0 measured ; 0 filtered out ; finished in 0 .00s Running tests/integration_test.rs ( target/debug/deps/integration_test-1082c4b063a8fbe6 ) running 1 test test it_adds_two ... ok test result: ok. 1 passed ; 0 failed ; 0 ignored ; 0 measured ; 0 filtered out ; finished in 0 .00s Doc-tests adder running 0 tests test result: ok. 0 passed ; 0 failed ; 0 ignored ; 0 measured ; 0 filtered out ; finished in 0 .00s \u73b0\u5728\u6709\u4e86\u4e09\u4e2a\u90e8\u5206\u7684\u8f93\u51fa\uff1a \u5355\u5143\u6d4b\u8bd5 \u3001 \u96c6\u6210\u6d4b\u8bd5 \u548c \u6587\u6863\u6d4b\u8bd5 \u3002\u7b2c\u4e00\u90e8\u5206\u5355\u5143\u6d4b\u8bd5\u4e0e\u6211\u4eec\u4e4b\u524d\u89c1\u8fc7\u7684\u4e00\u6837\uff1a\u6bcf\u4e2a\u5355\u5143\u6d4b\u8bd5\u4e00\u884c\uff08\u793a\u4f8b\u4e2d\u6709\u4e00\u4e2a\u53eb\u505a internal \u7684\u6d4b\u8bd5\uff09\uff0c\u63a5\u7740\u662f\u4e00\u4e2a\u5355\u5143\u6d4b\u8bd5\u7684\u6458\u8981\u884c\u3002 \u96c6\u6210\u6d4b\u8bd5\u90e8\u5206\u4ee5\u884c Running target/debug/deps/integration-test-ce99bcc2479f4607 \uff08\u5728\u8f93\u51fa\u6700\u540e\u7684\u54c8\u5e0c\u503c\u53ef\u80fd\u4e0d\u540c\uff09\u5f00\u5934\u3002\u63a5\u4e0b\u6765\u6bcf\u4e00\u884c\u662f\u4e00\u4e2a\u96c6\u6210\u6d4b\u8bd5\u4e2d\u7684\u6d4b\u8bd5\u51fd\u6570\uff0c\u4ee5\u53ca\u4e00\u4e2a\u4f4d\u4e8e Doc-tests adder \u90e8\u5206\u4e4b\u524d\u7684\u96c6\u6210\u6d4b\u8bd5\u7684\u6458\u8981\u884c\u3002 \u6211\u4eec\u5df2\u7ecf\u77e5\u9053\uff0c\u5355\u5143\u6d4b\u8bd5\u51fd\u6570\u8d8a\u591a\uff0c\u5355\u5143\u6d4b\u8bd5\u90e8\u5206\u7684\u7ed3\u679c\u884c\u5c31\u4f1a\u8d8a\u591a\u3002\u540c\u6837\u7684\uff0c\u5728\u96c6\u6210\u6587\u4ef6\u4e2d\u589e\u52a0\u7684\u6d4b\u8bd5\u51fd\u6570\u8d8a\u591a\uff0c\u4e5f\u4f1a\u5728\u5bf9\u5e94\u7684\u6d4b\u8bd5\u7ed3\u679c\u90e8\u5206\u589e\u52a0\u8d8a\u591a\u7684\u7ed3\u679c\u884c\u3002\u6bcf\u4e00\u4e2a\u96c6\u6210\u6d4b\u8bd5\u6587\u4ef6\u6709\u5bf9\u5e94\u7684\u6d4b\u8bd5\u7ed3\u679c\u90e8\u5206\uff0c\u6240\u4ee5\u5982\u679c\u5728 tests \u76ee\u5f55\u4e2d\u589e\u52a0\u66f4\u591a\u6587\u4ef6\uff0c\u6d4b\u8bd5\u7ed3\u679c\u4e2d\u5c31\u4f1a\u6709\u66f4\u591a\u96c6\u6210\u6d4b\u8bd5\u7ed3\u679c\u90e8\u5206\u3002 \u6211\u4eec\u4ecd\u7136\u53ef\u4ee5\u901a\u8fc7\u6307\u5b9a\u6d4b\u8bd5\u51fd\u6570\u7684\u540d\u79f0\u4f5c\u4e3a cargo test \u7684\u53c2\u6570\u6765\u8fd0\u884c\u7279\u5b9a\u96c6\u6210\u6d4b\u8bd5\u3002\u4e5f\u53ef\u4ee5\u4f7f\u7528 cargo test \u7684 --test \u540e\u8ddf\u6587\u4ef6\u7684\u540d\u79f0\u6765\u8fd0\u884c\u67d0\u4e2a\u7279\u5b9a\u96c6\u6210\u6d4b\u8bd5\u6587\u4ef6\u4e2d\u7684\u6240\u6709\u6d4b\u8bd5\uff1a $ cargo test -- test integration_test Compiling adder v0 . 1.0 ( file : ///projects/adder) Finished test [ unoptimized + debuginfo ] target ( s ) in 0.64 s Running tests / integration_test . rs ( target / debug / deps / integration_test - 82e7799 c1bc62298 ) running 1 test test it_adds_two .. . ok test result : ok . 1 passed ; 0 failed ; 0 ignored ; 0 measured ; 0 filtered out ; finished in 0.00 s \u8fd9\u4e2a\u547d\u4ee4\u53ea\u8fd0\u884c\u4e86 tests \u76ee\u5f55\u4e2d\u6211\u4eec\u6307\u5b9a\u7684\u6587\u4ef6 integration_test.rs \u4e2d\u7684\u6d4b\u8bd5\u3002","title":"tests \u76ee\u5f55"},{"location":"testing/#_16","text":"\u968f\u7740\u96c6\u6210\u6d4b\u8bd5\u7684\u589e\u52a0\uff0c\u4f60\u53ef\u80fd\u5e0c\u671b\u5728 tests \u76ee\u5f55\u589e\u52a0\u66f4\u591a\u6587\u4ef6\u4ee5\u4fbf\u66f4\u597d\u7684\u7ec4\u7ec7\u4ed6\u4eec\uff0c\u4f8b\u5982\u6839\u636e\u6d4b\u8bd5\u7684\u529f\u80fd\u6765\u5c06\u6d4b\u8bd5\u5206\u7ec4\u3002\u6b63\u5982\u6211\u4eec\u4e4b\u524d\u63d0\u5230\u7684\uff0c\u6bcf\u4e00\u4e2a tests \u76ee\u5f55\u4e2d\u7684\u6587\u4ef6\u90fd\u88ab\u7f16\u8bd1\u4e3a\u5355\u72ec\u7684 crate\u3002 \u5c06\u6bcf\u4e2a\u96c6\u6210\u6d4b\u8bd5\u6587\u4ef6\u5f53\u4f5c\u5176\u81ea\u5df1\u7684 crate \u6765\u5bf9\u5f85\uff0c\u8fd9\u66f4\u6709\u52a9\u4e8e\u521b\u5efa\u5355\u72ec\u7684\u4f5c\u7528\u57df\uff0c\u8fd9\u79cd\u5355\u72ec\u7684\u4f5c\u7528\u57df\u80fd\u63d0\u4f9b\u66f4\u7c7b\u4f3c\u4e0e\u6700\u7ec8\u4f7f\u7528\u8005\u4f7f\u7528 crate \u7684\u73af\u5883\u3002\u7136\u800c\uff0c\u6b63\u5982\u4f60\u5728\u7b2c\u4e03\u7ae0\u4e2d\u5b66\u4e60\u7684\u5982\u4f55\u5c06\u4ee3\u7801\u5206\u4e3a\u6a21\u5757\u548c\u6587\u4ef6\u7684\u77e5\u8bc6\uff0c tests \u76ee\u5f55\u4e2d\u7684\u6587\u4ef6\u4e0d\u80fd\u50cf src \u4e2d\u7684\u6587\u4ef6\u90a3\u6837\u5171\u4eab\u76f8\u540c\u7684\u884c\u4e3a\u3002 \u5f53\u4f60\u6709\u4e00\u4e9b\u5728\u591a\u4e2a\u96c6\u6210\u6d4b\u8bd5\u6587\u4ef6\u90fd\u4f1a\u7528\u5230\u7684\u5e2e\u52a9\u51fd\u6570\uff0c\u800c\u4f60\u5c1d\u8bd5\u6309\u7167\u7b2c\u4e03\u7ae0 \u201c\u5c06\u6a21\u5757\u79fb\u52a8\u5230\u5176\u4ed6\u6587\u4ef6\u201d \u90e8\u5206\u7684\u6b65\u9aa4\u5c06\u4ed6\u4eec\u63d0\u53d6\u5230\u4e00\u4e2a\u901a\u7528\u7684\u6a21\u5757\u4e2d\u65f6\uff0c tests \u76ee\u5f55\u4e2d\u4e0d\u540c\u6587\u4ef6\u7684\u884c\u4e3a\u5c31\u4f1a\u663e\u5f97\u5f88\u660e\u663e\u3002\u4f8b\u5982\uff0c\u5982\u679c\u6211\u4eec\u53ef\u4ee5\u521b\u5efa \u4e00\u4e2a tests/common.rs \u6587\u4ef6\u5e76\u521b\u5efa\u4e00\u4e2a\u540d\u53eb setup \u7684\u51fd\u6570\uff0c\u6211\u4eec\u5e0c\u671b\u8fd9\u4e2a\u51fd\u6570\u80fd\u88ab\u591a\u4e2a\u6d4b\u8bd5\u6587\u4ef6\u7684\u6d4b\u8bd5\u51fd\u6570\u8c03\u7528\uff1a // \u6587\u4ef6\u540d: tests/common.rs pub fn setup () { // setup code specific to your library's tests would go here } \u5982\u679c\u518d\u6b21\u8fd0\u884c\u6d4b\u8bd5\uff0c\u5c06\u4f1a\u5728\u6d4b\u8bd5\u7ed3\u679c\u4e2d\u770b\u5230\u4e00\u4e2a\u65b0\u7684\u5bf9\u5e94 common.rs \u6587\u4ef6\u7684\u6d4b\u8bd5\u7ed3\u679c\u90e8\u5206\uff0c\u5373\u4fbf\u8fd9\u4e2a\u6587\u4ef6\u5e76\u6ca1\u6709\u5305\u542b\u4efb\u4f55\u6d4b\u8bd5\u51fd\u6570\uff0c\u4e5f\u6ca1\u6709\u4efb\u4f55\u5730\u65b9\u8c03\u7528\u4e86 setup \u51fd\u6570\uff1a $ cargo test Compiling adder v0.1.0 ( file:///projects/adder ) Finished test [ unoptimized + debuginfo ] target ( s ) in 0 .89s Running unittests ( target/debug/deps/adder-92948b65e88960b4 ) running 1 test test tests::internal ... ok test result: ok. 1 passed ; 0 failed ; 0 ignored ; 0 measured ; 0 filtered out ; finished in 0 .00s Running tests/common.rs ( target/debug/deps/common-92948b65e88960b4 ) running 0 tests test result: ok. 0 passed ; 0 failed ; 0 ignored ; 0 measured ; 0 filtered out ; finished in 0 .00s Running tests/integration_test.rs ( target/debug/deps/integration_test-92948b65e88960b4 ) running 1 test test it_adds_two ... ok test result: ok. 1 passed ; 0 failed ; 0 ignored ; 0 measured ; 0 filtered out ; finished in 0 .00s Doc-tests adder running 0 tests test result: ok. 0 passed ; 0 failed ; 0 ignored ; 0 measured ; 0 filtered out ; finished in 0 .00s \u6211\u4eec\u5e76\u4e0d\u60f3\u8981 common \u51fa\u73b0\u5728\u6d4b\u8bd5\u7ed3\u679c\u4e2d\u663e\u793a running 0 tests \u3002\u6211\u4eec\u53ea\u662f\u5e0c\u671b\u5176\u80fd\u88ab\u5176\u4ed6\u591a\u4e2a\u96c6\u6210\u6d4b\u8bd5\u6587\u4ef6\u4e2d\u8c03\u7528\u7f62\u4e86\u3002 \u4e3a\u4e86\u4e0d\u8ba9 common \u51fa\u73b0\u5728\u6d4b\u8bd5\u8f93\u51fa\u4e2d\uff0c\u6211\u4eec\u5c06\u521b\u5efa tests/common/mod.rs \uff0c\u800c\u4e0d\u662f\u521b\u5efa tests/common.rs \u3002 \u8fd9\u662f\u4e00\u79cd Rust \u7684\u547d\u540d\u89c4\u8303\uff0c\u8fd9\u6837\u547d\u540d\u544a\u8bc9 Rust \u4e0d\u8981\u5c06 common \u770b\u4f5c\u4e00\u4e2a\u96c6\u6210\u6d4b\u8bd5\u6587\u4ef6\u3002 \u5c06 setup \u51fd\u6570\u4ee3\u7801\u79fb\u52a8\u5230 tests/common/mod.rs \u5e76\u5220\u9664 tests/common.rs \u6587\u4ef6\u4e4b\u540e\uff0c\u6d4b\u8bd5\u8f93\u51fa\u4e2d\u5c06\u4e0d\u4f1a\u51fa\u73b0\u8fd9\u4e00\u90e8\u5206\u3002 tests \u76ee\u5f55\u4e2d\u7684\u5b50\u76ee\u5f55\u4e0d\u4f1a\u88ab\u4f5c\u4e3a\u5355\u72ec\u7684 crate \u7f16\u8bd1\u6216\u4f5c\u4e3a\u4e00\u4e2a\u6d4b\u8bd5\u7ed3\u679c\u90e8\u5206\u51fa\u73b0\u5728\u6d4b\u8bd5\u8f93\u51fa\u4e2d\u3002 \u4e00\u65e6\u62e5\u6709\u4e86 tests/common/mod.rs \uff0c\u5c31\u53ef\u4ee5\u5c06\u5176\u4f5c\u4e3a\u6a21\u5757\u4ee5\u4fbf\u5728\u4efb\u4f55\u96c6\u6210\u6d4b\u8bd5\u6587\u4ef6\u4e2d\u4f7f\u7528\u3002 \u8fd9\u91cc\u662f\u4e00\u4e2a tests/integration_test.rs \u4e2d\u8c03\u7528 setup \u51fd\u6570\u7684 it_adds_two \u6d4b\u8bd5\u7684\u4f8b\u5b50\uff1a // \u6587\u4ef6\u540d: tests/integration_test.rs use adder ; mod common ; #[test] fn it_adds_two () { common :: setup (); assert_eq! ( 4 , adder :: add_two ( 2 )); } \u6ce8\u610f mod common; \u58f0\u660e\u4e0e\u4e0a\u9762\u793a\u4f8b\u4e2d\u5c55\u793a\u7684\u6a21\u5757\u58f0\u660e\u76f8\u540c\u3002\u63a5\u7740\u5728\u6d4b\u8bd5\u51fd\u6570\u4e2d\u5c31\u53ef\u4ee5\u8c03\u7528 common::setup() \u4e86\u3002","title":"\u96c6\u6210\u6d4b\u8bd5\u4e2d\u7684\u5b50\u6a21\u5757"},{"location":"testing/#crate","text":"\u5982\u679c\u9879\u76ee\u662f\u4e8c\u8fdb\u5236 crate \u5e76\u4e14\u53ea\u5305\u542b src/main.rs \u800c\u6ca1\u6709 src/lib.rs \uff0c\u8fd9\u6837\u5c31\u4e0d\u53ef\u80fd\u5728 tests \u76ee\u5f55\u521b\u5efa\u96c6\u6210\u6d4b\u8bd5\u5e76\u4f7f\u7528 extern crate \u5bfc\u5165 src/main.rs \u4e2d\u5b9a\u4e49\u7684\u51fd\u6570\u3002 \u53ea\u6709\u5e93 crate \u624d\u4f1a\u5411\u5176\u4ed6 crate \u66b4\u9732\u4e86\u53ef\u4f9b\u8c03\u7528\u548c\u4f7f\u7528\u7684\u51fd\u6570\uff1b\u4e8c\u8fdb\u5236 crate \u53ea\u610f\u5728\u5355\u72ec\u8fd0\u884c\u3002 \u8fd9\u5c31\u662f\u8bb8\u591a Rust \u4e8c\u8fdb\u5236\u9879\u76ee\u4f7f\u7528\u4e00\u4e2a\u7b80\u5355\u7684 src/main.rs \u8c03\u7528 src/lib.rs \u4e2d\u7684\u903b\u8f91\u7684\u539f\u56e0\u4e4b\u4e00\u3002 \u56e0\u4e3a\u901a\u8fc7\u8fd9\u79cd\u7ed3\u6784\uff0c \u96c6\u6210\u6d4b\u8bd5 \u5c31\u53ef\u4ee5 \u901a\u8fc7 extern crate \u6d4b\u8bd5\u5e93 crate \u4e2d\u7684\u4e3b\u8981\u529f\u80fd\u4e86\uff0c\u800c\u5982\u679c\u8fd9\u4e9b\u91cd\u8981\u7684\u529f\u80fd\u6ca1\u6709\u95ee\u9898\u7684\u8bdd\uff0c src/main.rs \u4e2d\u7684\u5c11\u91cf\u4ee3\u7801\u4e5f\u5c31\u4f1a\u6b63\u5e38\u5de5\u4f5c\u4e14\u4e0d\u9700\u8981\u6d4b\u8bd5\u3002","title":"\u4e8c\u8fdb\u5236 crate \u7684\u96c6\u6210\u6d4b\u8bd5"},{"location":"testing/#_17","text":"Rust \u7684\u6d4b\u8bd5\u529f\u80fd\u63d0\u4f9b\u4e86\u4e00\u4e2a\u786e\u4fdd\u5373\u4f7f\u4f60\u6539\u53d8\u4e86\u51fd\u6570\u7684\u5b9e\u73b0\u65b9\u5f0f\uff0c\u4e5f\u80fd\u7ee7\u7eed\u4ee5\u671f\u671b\u7684\u65b9\u5f0f\u8fd0\u884c\u7684\u9014\u5f84\u3002 \u5355\u5143\u6d4b\u8bd5\u72ec\u7acb\u5730\u9a8c\u8bc1\u5e93\u7684\u4e0d\u540c\u90e8\u5206\uff0c\u4e5f\u80fd\u591f\u6d4b\u8bd5\u79c1\u6709\u51fd\u6570\u5b9e\u73b0\u7ec6\u8282\u3002 \u96c6\u6210\u6d4b\u8bd5\u5219\u68c0\u67e5\u591a\u4e2a\u90e8\u5206\u662f\u5426\u80fd\u7ed3\u5408\u8d77\u6765\u6b63\u786e\u5730\u5de5\u4f5c\uff0c\u5e76\u50cf\u5176\u4ed6\u5916\u90e8\u4ee3\u7801\u90a3\u6837\u6d4b\u8bd5\u5e93\u7684\u516c\u6709 API\u3002 \u5373\u4f7f Rust \u7684\u7c7b\u578b\u7cfb\u7edf\u548c\u6240\u6709\u6743\u89c4\u5219\u53ef\u4ee5\u5e2e\u52a9\u907f\u514d\u4e00\u4e9b bug\uff0c\u4e0d\u8fc7\u6d4b\u8bd5\u5bf9\u4e8e\u51cf\u5c11\u4ee3\u7801\u4e2d\u4e0d\u7b26\u5408\u671f\u671b\u884c\u4e3a\u7684\u903b\u8f91 bug \u4ecd\u7136\u662f\u5f88\u91cd\u8981\u7684\u3002","title":"\u603b\u7ed3"}]}