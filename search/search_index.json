{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u7b80\u4ecb \u8fd9\u662f\u6211\u7684\u5b66\u4e60Rust\u4e4b\u65c5\u7684\u5b9e\u4f8bAPP\u5408\u96c6 github\u5730\u5740: https://github.com/hellowac/rust-example-apps","title":"\u7b80\u4ecb"},{"location":"#_1","text":"\u8fd9\u662f\u6211\u7684\u5b66\u4e60Rust\u4e4b\u65c5\u7684\u5b9e\u4f8bAPP\u5408\u96c6 github\u5730\u5740: https://github.com/hellowac/rust-example-apps","title":"\u7b80\u4ecb"},{"location":"guessing-game/","text":"\u731c\u6570\u6e38\u620f \u521b\u5efa\u65b0\u9879\u76ee cargo new guessing_game cd guessing_game \u5904\u7406\u4e00\u6b21\u731c\u6d4b\u8f93\u5165 \u6587\u4ef6\u540d: src/main.rs // \u9884\u5bfc\u5165 // io\u8f93\u5165/\u8f93\u51fa\u5e93\u5f15\u5165\u5f53\u524d\u4f5c\u7528\u57df; // io \u5e93\u6765\u81ea\u4e8e\u6807\u51c6\u5e93\uff0c\u4e5f\u88ab\u79f0\u4e3a std use std :: io ; // main \u51fd\u6570\u662f\u7a0b\u5e8f\u7684\u5165\u53e3\u70b9 // fn \u8bed\u6cd5\u58f0\u660e\u4e86\u4e00\u4e2a\u65b0\u51fd\u6570 // () \u8868\u660e\u6ca1\u6709\u53c2\u6570 // { \u4f5c\u4e3a\u51fd\u6570\u4f53\u7684\u5f00\u59cb fn main () { println! ( \"Guess the number!\" ); // println! \u662f\u4e00\u4e2a\u5728\u5c4f\u5e55\u4e0a\u6253\u5370\u5b57\u7b26\u4e32\u7684\u5b8f println! ( \"Please input your guess.\" ); // println! \u662f\u4e00\u4e2a\u5728\u5c4f\u5e55\u4e0a\u6253\u5370\u5b57\u7b26\u4e32\u7684\u5b8f // \u521b\u5efa\u4e00\u4e2a \u53d8\u91cf\uff08variable\uff09\u6765\u50a8\u5b58\u7528\u6237\u8f93\u5165 // \u5728 Rust \u4e2d\uff0c\u53d8\u91cf\u9ed8\u8ba4\u662f\u4e0d\u53ef\u53d8\u7684\uff0c\u8fd9\u610f\u5473\u7740\u4e00\u65e6\u6211\u4eec\u7ed9\u53d8\u91cf\u8d4b\u503c\uff0c\u8fd9\u4e2a\u503c\u5c31\u4e0d\u518d\u53ef\u4ee5\u4fee\u6539\u4e86\u3002 let mut guess = String :: new (); // \u5728\u53d8\u91cf\u540d\u524d\u4f7f\u7528 mut \u6765\u4f7f\u4e00\u4e2a\u53d8\u91cf\u53ef\u53d8 // String \u662f\u4e00\u4e2a\u6807\u51c6\u5e93\u63d0\u4f9b\u7684\u5b57\u7b26\u4e32\u7c7b\u578b\uff0c\u5b83\u662f UTF-8 \u7f16\u7801\u7684\u53ef\u589e\u957f\u6587\u672c\u5757\u3002 // ::new \u90a3\u4e00\u884c\u7684 :: \u8bed\u6cd5\u8868\u660e new \u662f String \u7c7b\u578b\u7684\u4e00\u4e2a \u5173\u8054\u51fd\u6570\uff08associated function\uff09\u3002 // \u5173\u8054\u51fd\u6570\u662f\u9488\u5bf9\u7c7b\u578b\u5b9e\u73b0\u7684\uff0c\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\u662f String\uff0c\u800c\u4e0d\u662f String \u7684\u67d0\u4e2a\u7279\u5b9a\u5b9e\u4f8b\u3002\u4e00\u4e9b\u8bed\u8a00\u4e2d\u628a\u5b83\u79f0\u4e3a \u9759\u6001\u65b9\u6cd5\uff08static method\uff09\u3002 // new \u51fd\u6570\u521b\u5efa\u4e86\u4e00\u4e2a\u65b0\u7684\u7a7a\u5b57\u7b26\u4e32\uff0c\u4f60\u4f1a\u53d1\u73b0\u5f88\u591a\u7c7b\u578b\u4e0a\u6709 new \u51fd\u6570\uff0c\u56e0\u4e3a\u5b83\u662f\u521b\u5efa\u7c7b\u578b\u5b9e\u4f8b\u7684\u60ef\u7528\u51fd\u6570\u540d\u3002 // \u603b\u7684\u6765\u8bf4\uff0clet mut guess = String::new(); \u8fd9\u4e00\u884c\u521b\u5efa\u4e86\u4e00\u4e2a\u53ef\u53d8\u53d8\u91cf\uff0c\u5f53\u524d\u5b83\u7ed1\u5b9a\u5230\u4e00\u4e2a\u65b0\u7684 String \u7a7a\u5b9e\u4f8b\u4e0a\u3002 // \u5982\u679c\u7a0b\u5e8f\u7684\u5f00\u5934\u6ca1\u6709\u4f7f\u7528 use std::io \u5f15\u5165 io \u5e93\uff0c\u6211\u4eec\u4ecd\u53ef\u4ee5\u901a\u8fc7\u628a\u51fd\u6570\u8c03\u7528\u5199\u6210 std::io::stdin \u6765\u4f7f\u7528\u51fd\u6570\u3002 // stdin \u51fd\u6570\u8fd4\u56de\u4e00\u4e2a std::io::Stdin \u7684\u5b9e\u4f8b\uff0c\u8fd9\u4ee3\u8868\u7ec8\u7aef\u6807\u51c6\u8f93\u5165\u53e5\u67c4\u7684\u7c7b\u578b\u3002 io :: stdin () . read_line ( & mut guess ) // \u4ece\u6807\u51c6\u8f93\u5165\u53e5\u67c4\u83b7\u53d6\u7528\u6237\u8f93\u5165\u3002 // \u5c06 &mut guess \u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\u7ed9 read_line() \u51fd\u6570\uff0c\u8ba9\u5176\u5c06\u7528\u6237\u8f93\u5165\u50a8\u5b58\u5230\u8fd9\u4e2a\u5b57\u7b26\u4e32\u4e2d\u3002 // read_line \u7684\u5de5\u4f5c\u662f\uff0c\u65e0\u8bba\u7528\u6237\u5728\u6807\u51c6\u8f93\u5165\u4e2d\u952e\u5165\u4ec0\u4e48\u5185\u5bb9\uff0c\u90fd\u5c06\u5176\u8ffd\u52a0\uff08\u4e0d\u4f1a\u8986\u76d6\u5176\u539f\u6709\u5185\u5bb9\uff09\u5230\u4e00\u4e2a\u5b57\u7b26\u4e32\u4e2d\uff0c\u56e0\u6b64\u5b83\u9700\u8981\u5b57\u7b26\u4e32\u4f5c\u4e3a\u53c2\u6570\u3002 // \u8fd9\u4e2a\u5b57\u7b26\u4e32\u53c2\u6570\u5e94\u8be5\u662f\u53ef\u53d8\u7684\uff0c\u4ee5\u4fbf read_line \u5c06\u7528\u6237\u8f93\u5165\u9644\u52a0\u4e0a\u53bb\u3002 // & \u8868\u793a\u8fd9\u4e2a\u53c2\u6570\u662f\u4e00\u4e2a \u5f15\u7528\uff08reference\uff09\uff0c\u5b83\u5141\u8bb8\u591a\u5904\u4ee3\u7801\u8bbf\u95ee\u540c\u4e00\u5904\u6570\u636e\uff0c\u800c\u65e0\u9700\u5728\u5185\u5b58\u4e2d\u591a\u6b21\u62f7\u8d1d\u3002 . expect ( \"Failed to read line\" ); // \u4f1a\u8fd4\u56de\u4e00\u4e2a\u7c7b\u578b\u4e3a Result \u7684\u503c\u3002 Result \u662f\u4e00\u79cd\u679a\u4e3e\u7c7b\u578b\uff0c\u901a\u5e38\u4e5f\u5199\u4f5c enum\u3002 // \u679a\u4e3e\u7c7b\u578b\u53d8\u91cf\u7684\u503c\u53ef\u4ee5\u662f\u591a\u79cd\u53ef\u80fd\u72b6\u6001\u4e2d\u7684\u4e00\u4e2a\u3002\u6211\u4eec\u628a\u6bcf\u79cd\u53ef\u80fd\u7684\u72b6\u6001\u79f0\u4e3a\u4e00\u79cd \u679a\u4e3e\u6210\u5458\uff08variant\uff09\u3002 // \u8fd9\u91cc\u7684 Result \u7c7b\u578b\u5c06\u7528\u6765\u7f16\u7801\u9519\u8bef\u5904\u7406\u7684\u4fe1\u606f\u3002 // Result \u7684\u6210\u5458\u662f Ok \u548c Err\uff0c // Ok \u6210\u5458\u8868\u793a\u64cd\u4f5c\u6210\u529f\uff0c\u5185\u90e8\u5305\u542b\u6210\u529f\u65f6\u4ea7\u751f\u7684\u503c\u3002 // Err \u6210\u5458\u5219\u610f\u5473\u7740\u64cd\u4f5c\u5931\u8d25\uff0c\u5e76\u4e14\u5305\u542b\u5931\u8d25\u7684\u524d\u56e0\u540e\u679c\u3002 // Result \u7c7b\u578b\u7684\u503c\uff0c\u50cf\u5176\u4ed6\u7c7b\u578b\u4e00\u6837\uff0c\u62e5\u6709\u5b9a\u4e49\u4e8e\u5176\u4e0a\u7684\u65b9\u6cd5\u3002Result \u7684\u5b9e\u4f8b\u62e5\u6709 expect \u65b9\u6cd5\u3002 // \u5982\u679c io::Result \u5b9e\u4f8b\u7684\u503c\u662f Err\uff0cexpect \u4f1a\u5bfc\u81f4\u7a0b\u5e8f\u5d29\u6e83\uff0c\u5e76\u663e\u793a\u5f53\u505a\u53c2\u6570\u4f20\u9012\u7ed9 expect \u7684\u4fe1\u606f\u3002 // \u5982\u679c read_line \u65b9\u6cd5\u8fd4\u56de Err\uff0c\u5219\u53ef\u80fd\u662f\u6765\u6e90\u4e8e\u5e95\u5c42\u64cd\u4f5c\u7cfb\u7edf\u9519\u8bef\u7684\u7ed3\u679c\u3002 // \u5982\u679c Result \u5b9e\u4f8b\u7684\u503c\u662f Ok\uff0cexpect \u4f1a\u83b7\u53d6 Ok \u4e2d\u7684\u503c\u5e76\u539f\u6837\u8fd4\u56de\u3002 // \u5728\u672c\u4f8b\u4e2d\uff0c\u8fd9\u4e2a\u503c\u662f\u7528\u6237\u8f93\u5165\u5230\u6807\u51c6\u8f93\u5165\u4e2d\u7684\u5b57\u8282\u6570\u3002 // \u5982\u679c\u4e0d\u8c03\u7528 expect\uff0c\u7a0b\u5e8f\u4e5f\u80fd\u7f16\u8bd1\uff0c\u4e0d\u8fc7\u4f1a\u51fa\u73b0\u4e00\u4e2a\u8b66\u544a\uff1a // note: this `Result` may be an `Err` variant, which should be handled // Rust \u8b66\u544a\u6211\u4eec\u6ca1\u6709\u4f7f\u7528 read_line \u7684\u8fd4\u56de\u503c Result\uff0c\u8bf4\u660e\u6709\u4e00\u4e2a\u53ef\u80fd\u7684\u9519\u8bef\u6ca1\u6709\u5904\u7406\u3002 // \u6d88\u9664\u8b66\u544a\u7684\u6b63\u786e\u505a\u6cd5\u662f\u5b9e\u9645\u53bb\u7f16\u5199\u9519\u8bef\u5904\u7406\u4ee3\u7801\uff0c\u4e0d\u8fc7\u7531\u4e8e\u6211\u4eec\u5c31\u662f\u5e0c\u671b\u7a0b\u5e8f\u5728\u51fa\u73b0\u95ee\u9898\u65f6\u7acb\u5373\u5d29\u6e83\uff0c\u6240\u4ee5\u76f4\u63a5\u4f7f\u7528 expect\u3002 // \u7ee7\u7eed\u6df1\u5165\u5b66\u4e60\u7684\u8bdd\uff0c\u5c06\u4f1a\u5b66\u4e60\u5230\u5982\u4f55\u4ece\u9519\u8bef\u4e2d\u6062\u590d\u3002 println! ( \"You guessed: {guess}\" ); // \u6253\u5370\u4e86\u5b58\u50a8\u7528\u6237\u8f93\u5165\u7684\u5b57\u7b26\u4e32\u3002 // \u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\uff0c\u91cc\u9762\u7684 {} \u662f\u9884\u7559\u5728\u7279\u5b9a\u4f4d\u7f6e\u7684\u5360\u4f4d\u7b26 // \u4f7f\u7528 {} \u4e5f\u53ef\u4ee5\u6253\u5370\u591a\u4e2a\u503c\uff1a // \u7b2c\u4e00\u5bf9 {} \u4f7f\u7528\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u4e4b\u540e\u7684\u7b2c\u4e00\u4e2a\u503c\uff0c\u7b2c\u4e8c\u5bf9\u5219\u4f7f\u7528\u7b2c\u4e8c\u4e2a\u503c\uff0c\u4f9d\u6b64\u7c7b\u63a8\u3002\u8c03 // \u7528\u4e00\u6b21 println! \u6253\u5370\u591a\u4e2a\u503c\u770b\u8d77\u6765\u50cf\u8fd9\u6837\uff1a // println!(\"x = {} and y = {}\", x, y); } \u751f\u6210\u4e00\u4e2a\u79d8\u5bc6\u6570\u5b57 Rust \u6807\u51c6\u5e93\u4e2d\u5c1a\u672a\u5305\u542b\u968f\u673a\u6570\u529f\u80fd\u3002\u7136\u800c\uff0cRust \u56e2\u961f\u8fd8\u662f\u63d0\u4f9b\u4e86\u4e00\u4e2a\u5305\u542b\u4e0a\u8ff0\u529f\u80fd\u7684 rand crate \u3002 rand crate \u662f\u4e00\u4e2a \u5e93 crate \uff0c \u5e93 crate \u53ef\u4ee5\u5305\u542b\u4efb\u610f\u80fd\u88ab\u5176\u4ed6\u7a0b\u5e8f\u4f7f\u7528\u7684\u4ee3\u7801\uff0c\u4f46\u662f\u4e0d\u80fd\u81ea\u6267\u884c\u3002 \u5728\u4f7f\u7528 rand \u7f16\u5199\u4ee3\u7801\u4e4b\u524d\uff0c\u9700\u8981\u4fee\u6539 Cargo.toml \u6587\u4ef6\uff0c\u5f15\u5165\u4e00\u4e2a rand \u4f9d\u8d56\u3002\u73b0\u5728\u6253\u5f00\u8fd9\u4e2a\u6587\u4ef6\u5e76\u5c06\u4e0b\u9762\u8fd9\u4e00\u884c\u6dfb\u52a0\u5230 [dependencies] \u7247\u6bb5\u6807\u9898\u4e4b\u4e0b\u3002 \u6587\u4ef6\u540d: Cargo.toml rand = \"0.8.3\" [dependencies] \u7247\u6bb5\u544a\u8bc9 Cargo \u672c\u9879\u76ee\u4f9d\u8d56\u4e86\u54ea\u4e9b\u5916\u90e8 crate \u53ca\u5176\u7248\u672c\u3002\u672c\u4f8b\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u8bed\u4e49\u5316\u7248\u672c 0.8.3 \u6765\u6307\u5b9a rand crate \u7684\u7248\u672c\u3002Cargo \u7406\u89e3 \u8bed\u4e49\u5316\u7248\u672c \uff08Semantic Versioning\uff09\uff08\u6709\u65f6\u4e5f\u79f0\u4e3a SemVer\uff09\uff0c\u8fd9\u662f\u4e00\u79cd\u5b9a\u4e49\u7248\u672c\u53f7\u7684\u6807\u51c6\u3002 0.8.3 \u4e8b\u5b9e\u4e0a\u662f ^0.8.3 \u7684\u7b80\u5199\uff0c\u5b83\u8868\u793a\u4efb\u4f55\u81f3\u5c11\u662f 0.8.3 \u4f46\u5c0f\u4e8e 0.9.0 \u7684\u7248\u672c\u3002 Cargo \u8ba4\u4e3a\u8fd9\u4e9b\u7248\u672c\u4e0e 0.8.3 \u7248\u672c\u7684\u516c\u6709 API \u76f8\u517c\u5bb9\uff0c\u8fd9\u6837\u7684\u7248\u672c\u6307\u5b9a\u786e\u4fdd\u4e86\u6211\u4eec\u53ef\u4ee5\u83b7\u53d6\u80fd\u4f7f\u672c\u7ae0\u4ee3\u7801\u7f16\u8bd1\u7684\u6700\u65b0\u7684\u8865\u4e01\uff08patch\uff09\u7248\u672c\u3002\u4efb\u4f55\u5927\u4e8e\u7b49\u4e8e 0.9.0 \u7684\u7248\u672c\u4e0d\u80fd\u4fdd\u8bc1\u548c\u63a5\u4e0b\u6765\u7684\u793a\u4f8b\u91c7\u7528\u4e86\u76f8\u540c\u7684 API\u3002 \u73b0\u5728\uff0c\u4e0d\u4fee\u6539\u4efb\u4f55\u4ee3\u7801\uff0c\u6784\u5efa\u9879\u76ee\uff0c\u5982\u4e0b\u6240\u793a\uff1a $ cargo build Updating crates.io index Downloaded ppv-lite86 v0.2.17 Downloaded rand v0.8.5 Downloaded rand_chacha v0.3.1 Downloaded rand_core v0.6.4 Downloaded cfg-if v1.0.0 Downloaded getrandom v0.2.8 Downloaded libc v0.2.138 Downloaded 7 crates ( 794 .8 KB ) in 2 .72s Compiling libc v0.2.138 Compiling cfg-if v1.0.0 Compiling ppv-lite86 v0.2.17 Compiling getrandom v0.2.8 Compiling rand_core v0.6.4 Compiling rand_chacha v0.3.1 Compiling rand v0.8.5 Compiling guessing-game v0.1.0 ( file:///projects/guessing_game ) Finished dev [ unoptimized + debuginfo ] target ( s ) in 3m 45s # \u5c06 rand crate \u6dfb\u52a0\u4e3a\u4f9d\u8d56\u4e4b\u540e\u8fd0\u884c cargo build \u7684\u8f93\u51fa \u73b0\u5728\u7cfb\u7edf\u6709\u4e86\u4e00\u4e2a\u5916\u90e8\u4f9d\u8d56\uff0cCargo \u4ece registry \u4e0a\u83b7\u53d6\u6240\u6709\u5305\u7684\u6700\u65b0\u7248\u672c\u4fe1\u606f\uff0c\u8fd9\u662f\u4e00\u4efd\u6765\u81ea Crates.io \u7684\u6570\u636e\u62f7\u8d1d\u3002Crates.io \u662f Rust \u751f\u6001\u73af\u5883\u4e2d\u7684\u5f00\u53d1\u8005\u4eec\u5411\u4ed6\u4eba\u8d21\u732e Rust \u5f00\u6e90\u9879\u76ee\u7684\u5730\u65b9\u3002 \u5728\u66f4\u65b0\u5b8c registry \u540e\uff0cCargo \u68c0\u67e5 [dependencies] \u90e8\u5206\u5e76\u4e0b\u8f7d\u5217\u8868\u4e2d\u5305\u542b\u4f46\u8fd8\u672a\u4e0b\u8f7d\u7684 crates \u3002\u672c\u4f8b\u4e2d\uff0c\u867d\u7136\u53ea\u58f0\u660e\u4e86 rand \u4e00\u4e2a\u4f9d\u8d56\uff0c\u7136\u800c Cargo \u8fd8\u662f\u989d\u5916\u83b7\u53d6\u4e86 rand \u6240\u9700\u8981\u7684\u5176\u4ed6 crates\uff0c\u56e0\u4e3a rand \u4f9d\u8d56\u5b83\u4eec\u6765\u6b63\u5e38\u5de5\u4f5c\u3002\u4e0b\u8f7d\u5b8c\u6210\u540e\uff0cRust \u7f16\u8bd1\u4f9d\u8d56\uff0c\u7136\u540e\u4f7f\u7528\u8fd9\u4e9b\u4f9d\u8d56\u7f16\u8bd1\u9879\u76ee\u3002 \u6587\u4ef6\u540d: src/main.rs // \u65b0\u589e\u4e86\u4e00\u884c use rand::Rng\u3002 // Rng \u662f\u4e00\u4e2a trait\uff0c\u5b83\u5b9a\u4e49\u4e86\u968f\u673a\u6570\u751f\u6210\u5668\u5e94\u5b9e\u73b0\u7684\u65b9\u6cd5\uff0c\u60f3\u4f7f\u7528\u8fd9\u4e9b\u65b9\u6cd5\u7684\u8bdd\uff0c\u6b64 trait \u5fc5\u987b\u5728\u4f5c\u7528\u57df\u4e2d\u3002 use rand :: Rng ; use std :: io ; fn main () { println! ( \"\u731c\u6570\u6e38\u620f\uff01\uff01\" ); let secret_number = rand :: thread_rng (). gen_range ( 1 ..= 100 ); // \u8c03\u7528\u4e86 rand::thread_rng \u51fd\u6570\u63d0\u4f9b\u5b9e\u9645\u4f7f\u7528\u7684\u968f\u673a\u6570\u751f\u6210\u5668\uff1a\u5b83\u4f4d\u4e8e\u5f53\u524d\u6267\u884c\u7ebf\u7a0b\u7684\u672c\u5730\u73af\u5883\u4e2d\uff0c\u5e76\u4ece\u64cd\u4f5c\u7cfb\u7edf\u83b7\u53d6 seed\u3002 // \u63a5\u7740\u8c03\u7528\u968f\u673a\u6570\u751f\u6210\u5668\u7684 gen_range \u65b9\u6cd5\u3002\u8fd9\u4e2a\u65b9\u6cd5\u7531 use rand::Rng \u8bed\u53e5\u5f15\u5165\u5230\u4f5c\u7528\u57df\u7684 Rng trait \u5b9a\u4e49\u3002 // gen_range \u65b9\u6cd5\u83b7\u53d6\u4e00\u4e2a\u8303\u56f4\u8868\u8fbe\u5f0f\uff08range expression\uff09\u4f5c\u4e3a\u53c2\u6570\uff0c\u5e76\u751f\u6210\u4e00\u4e2a\u5728\u6b64\u8303\u56f4\u4e4b\u95f4\u7684\u968f\u673a\u6570\u3002 // \u8fd9\u91cc\u4f7f\u7528\u7684\u8fd9\u7c7b\u8303\u56f4\u8868\u8fbe\u5f0f\u4f7f\u7528\u4e86 start..=end \u8fd9\u6837\u7684\u5f62\u5f0f\uff0c\u4e5f\u5c31\u662f\u8bf4\u5305\u542b\u4e86\u4e0a\u4e0b\u7aef\u70b9\uff0c\u6240\u4ee5\u9700\u8981\u6307\u5b9a 1..=100 \u6765\u8bf7\u6c42\u4e00\u4e2a 1 \u548c 100 \u4e4b\u95f4\u7684\u6570\u3002 println! ( \"\u751f\u6210\u7684\u5bc6\u7801\u6570\u5b57\u662f: {secret_number}\" ); println! ( \"\u8bf7\u8f93\u5165\u4e00\u4e2a\u503c:\" ); let mut guess = String :: new (); io :: stdin (). read_line ( & mut guess ). expect ( \"\u8bfb\u6570\u5931\u8d25!\" ); println! ( \"\u4f60\u731c\u6d4b\u7684\u6570\u4e3a: {guess}\" ) } \u6ce8\u610f \uff1a \u4f60\u4e0d\u53ef\u80fd\u51ed\u7a7a\u5c31\u77e5\u9053\u5e94\u8be5 use \u54ea\u4e2a trait \u4ee5\u53ca\u8be5\u4ece crate \u4e2d\u8c03\u7528\u54ea\u4e2a\u65b9\u6cd5\uff0c\u56e0\u6b64\u6bcf\u4e2acrate \u6709\u4f7f\u7528\u8bf4\u660e\u6587\u6863\u3002 Cargo \u6709\u4e00\u4e2a\u5f88\u68d2\u7684\u529f\u80fd\u662f\uff1a\u8fd0\u884c cargo doc --open \u547d\u4ee4\u6765\u6784\u5efa\u6240\u6709\u672c\u5730\u4f9d\u8d56\u63d0\u4f9b\u7684\u6587\u6863\uff0c\u5e76\u5728\u6d4f\u89c8\u5668\u4e2d\u6253\u5f00\u3002 \u4f8b\u5982\uff0c\u5047\u8bbe\u4f60\u5bf9 rand crate \u4e2d\u7684\u5176\u4ed6\u529f\u80fd\u611f\u5174\u8da3\uff0c\u4f60\u53ef\u4ee5\u8fd0\u884c cargo doc --open \u5e76\u70b9\u51fb\u5de6\u4fa7\u5bfc\u822a\u680f\u4e2d\u7684 rand\u3002 \u6bd4\u8f83\u731c\u6d4b\u7684\u6570\u5b57\u548c\u79d8\u5bc6\u6570\u5b57 \u6587\u4ef6\u540d: src/main.rs use rand :: Rng ; use std :: cmp :: Ordering ; // \u4ece\u6807\u51c6\u5e93\u5f15\u5165\u4e86\u4e00\u4e2a\u53eb\u505a std::cmp::Ordering \u7684\u7c7b\u578b\u5230\u4f5c\u7528\u57df\u4e2d\u3002 // Ordering \u4e5f\u662f\u4e00\u4e2a\u679a\u4e3e\uff0c\u4e0d\u8fc7\u5b83\u7684\u6210\u5458\u662f Less\u3001Greater \u548c Equal\u3002 // \u8fd9\u662f\u6bd4\u8f83\u4e24\u4e2a\u503c\u65f6\u53ef\u80fd\u51fa\u73b0\u7684\u4e09\u79cd\u7ed3\u679c\u3002 use std :: io ; fn main () { println! ( \"\u731c\u6570\u6e38\u620f\uff01\uff01\" ); let secret_number = rand :: thread_rng (). gen_range ( 1 ..= 100 ); println! ( \"\u751f\u6210\u7684\u5bc6\u7801\u6570\u5b57\u662f: {secret_number}\" ); println! ( \"\u8bf7\u8f93\u5165\u4e00\u4e2a\u503c:\" ); let mut guess = String :: new (); io :: stdin (). read_line ( & mut guess ). expect ( \"\u8bfb\u6570\u5931\u8d25!\" ); println! ( \"\u4f60\u731c\u6d4b\u7684\u6570\u4e3a: {guess}\" ); match guess . cmp ( & secret_number ){ // cmp \u65b9\u6cd5\u7528\u6765\u6bd4\u8f83\u4e24\u4e2a\u503c\u5e76\u53ef\u4ee5\u5728\u4efb\u4f55\u53ef\u6bd4\u8f83\u7684\u503c\u4e0a\u8c03\u7528\u3002 // \u5b83\u83b7\u53d6\u4e00\u4e2a\u88ab\u6bd4\u8f83\u503c\u7684\u5f15\u7528\uff1a\u8fd9\u91cc\u662f\u628a guess \u4e0e secret_number \u505a\u6bd4\u8f83\u3002 // \u7136\u540e\u5b83\u4f1a\u8fd4\u56de\u4e00\u4e2a\u521a\u624d\u901a\u8fc7 use \u5f15\u5165\u4f5c\u7528\u57df\u7684 Ordering \u679a\u4e3e\u7684\u6210\u5458\u3002 // \u4f7f\u7528\u4e00\u4e2a match \u8868\u8fbe\u5f0f\uff0c\u6839\u636e\u5bf9 guess \u548c secret_number \u8c03\u7528 cmp \u8fd4\u56de\u7684 Ordering \u6210\u5458\u6765\u51b3\u5b9a\u63a5\u4e0b\u6765\u505a\u4ec0\u4e48\u3002 Ordering :: Less => println! ( \"\u592a\u5c0f\u4e86\uff01\" ), Ordering :: Greater => println! ( \"\u592a\u5927\u4e86\uff01\" ), Ordering :: Equal => println! ( \"\u731c\u5bf9\u4e86\uff01\" ), } } \u4e00\u4e2a match \u8868\u8fbe\u5f0f\u7531 \u5206\u652f\uff08arms\uff09 \u6784\u6210\u3002 \u4e00\u4e2a\u5206\u652f\u5305\u542b\u4e00\u4e2a \u6a21\u5f0f\uff08pattern\uff09\u548c\u8868\u8fbe\u5f0f\u5f00\u5934\u7684\u503c\u4e0e\u5206\u652f\u6a21\u5f0f\u76f8\u5339\u914d\u65f6\u5e94\u8be5\u6267\u884c\u7684\u4ee3\u7801\u3002 Rust \u83b7\u53d6\u63d0\u4f9b\u7ed9 match \u7684\u503c\u5e76\u6328\u4e2a\u68c0\u67e5\u6bcf\u4e2a\u5206\u652f\u7684\u6a21\u5f0f\u3002 \u6b64\u65f6\u8fdb\u884c cargo build \u4f1a\u51fa\u73b0\u5982\u4e0b\u9519\u8bef: cargo build Compiling guessing-game v0.1.0 ( /files/rust-example-apps/src/guessing-game ) error [ E0308 ] : mismatched types --> src/main.rs:20:21 | 20 | match guess.cmp ( & secret_number ) { | --- ^^^^^^^^^^^^^^ expected struct ` String ` , found integer | | | arguments to this function are incorrect | = note: expected reference ` & String ` found reference ` & { integer } ` note: associated function defined here For more information about this error, try ` rustc --explain E0308 ` . error: could not compile ` guessing-game ` due to previous error \u9519\u8bef\u7684\u6838\u5fc3\u8868\u660e\u8fd9\u91cc\u6709 \u4e0d\u5339\u914d\u7684\u7c7b\u578b\uff08mismatched types\uff09 \u3002 Rust \u6709\u4e00\u4e2a\u9759\u6001\u5f3a\u7c7b\u578b\u7cfb\u7edf\uff0c\u540c\u65f6\u4e5f\u6709\u7c7b\u578b\u63a8\u65ad\u3002 \u5f53\u6211\u4eec\u5199\u51fa let guess = String::new() \u65f6\uff0cRust \u63a8\u65ad\u51fa guess \u5e94\u8be5\u662f String \u7c7b\u578b\uff0c\u5e76\u4e0d\u9700\u8981\u6211\u4eec\u5199\u51fa\u7c7b\u578b\u3002 \u53e6\u4e00\u65b9\u9762\uff0csecret_number\uff0c\u662f\u6570\u5b57\u7c7b\u578b\u3002\u51e0\u4e2a\u6570\u5b57\u7c7b\u578b\u62e5\u6709 1 \u5230 100 \u4e4b\u95f4\u7684\u503c\uff1a32 \u4f4d\u6570\u5b57 i32\uff1b32 \u4f4d\u65e0\u7b26\u53f7\u6570\u5b57 u32\uff1b64 \u4f4d\u6570\u5b57 i64 \u7b49\u7b49\u3002 Rust \u9ed8\u8ba4\u4f7f\u7528 i32\uff0c\u6240\u4ee5\u5b83\u662f secret_number \u7684\u7c7b\u578b\uff0c\u9664\u975e\u589e\u52a0\u7c7b\u578b\u4fe1\u606f\uff0c\u6216\u4efb\u4f55\u80fd\u8ba9 Rust \u63a8\u65ad\u51fa\u4e0d\u540c\u6570\u503c\u7c7b\u578b\u7684\u4fe1\u606f\u3002 \u8fd9\u91cc\u9519\u8bef\u7684\u539f\u56e0\u5728\u4e8e Rust \u4e0d\u4f1a\u6bd4\u8f83\u5b57\u7b26\u4e32\u7c7b\u578b\u548c\u6570\u5b57\u7c7b\u578b\u3002 \u6240\u4ee5\u6211\u4eec\u5fc5\u987b\u628a\u4ece\u8f93\u5165\u4e2d\u8bfb\u53d6\u5230\u7684 String \u8f6c\u6362\u4e3a\u4e00\u4e2a\u771f\u6b63\u7684\u6570\u5b57\u7c7b\u578b\uff0c\u624d\u597d\u4e0e\u79d8\u5bc6\u6570\u5b57\u8fdb\u884c\u6bd4\u8f83\u3002\u8fd9\u53ef\u4ee5\u901a\u8fc7\u5728 main \u51fd\u6570\u4f53\u4e2d\u589e\u52a0\u5982\u4e0b\u4ee3\u7801\u6765\u5b9e\u73b0\uff1a \u6587\u4ef6\u540d: src/main.rs use rand :: Rng ; use std :: cmp :: Ordering ; use std :: io ; fn main () { println! ( \"\u731c\u6570\u6e38\u620f\uff01\uff01\" ); let secret_number = rand :: thread_rng (). gen_range ( 1 ..= 100 ); println! ( \"\u751f\u6210\u7684\u5bc6\u7801\u6570\u5b57\u662f: {secret_number}\" ); println! ( \"\u8bf7\u8f93\u5165\u4e00\u4e2a\u503c:\" ); let mut guess = String :: new (); io :: stdin (). read_line ( & mut guess ). expect ( \"\u8bfb\u6570\u5931\u8d25!\" ); let guess : u32 = guess . trim (). parse (). expect ( \"\u8bf7\u8f93\u5165\u6570\u5b57!\" ); // \u8fd9\u91cc\u521b\u5efa\u4e86\u4e00\u4e2a\u53eb\u505a guess \u7684\u53d8\u91cf\u3002 // \u4e0d\u8fc7\u7b49\u7b49\uff0c\u4e0d\u662f\u5df2\u7ecf\u6709\u4e86\u4e00\u4e2a\u53eb\u505a guess \u7684\u53d8\u91cf\u4e86\u5417\uff1f // \u786e\u5b9e\u5982\u6b64\uff0c\u4e0d\u8fc7 Rust \u5141\u8bb8\u7528\u4e00\u4e2a\u65b0\u503c\u6765 \u9690\u85cf \uff08shadow\uff09 guess \u4e4b\u524d\u7684\u503c\u3002 // \u8fd9\u4e2a\u529f\u80fd\u5e38\u7528\u5728\u9700\u8981\u8f6c\u6362\u503c\u7c7b\u578b\u4e4b\u7c7b\u7684\u573a\u666f\u3002 // \u5b83\u5141\u8bb8\u6211\u4eec\u590d\u7528 guess \u53d8\u91cf\u7684\u540d\u5b57\uff0c\u800c\u4e0d\u662f\u88ab\u8feb\u521b\u5efa\u4e24\u4e2a\u4e0d\u540c\u53d8\u91cf\uff0c\u8bf8\u5982 guess_str \u548c guess \u4e4b\u7c7b\u3002 // \u5c06\u8fd9\u4e2a\u65b0\u53d8\u91cf\u7ed1\u5b9a\u5230 guess.trim().parse() \u8868\u8fbe\u5f0f\u4e0a\u3002 // \u8868\u8fbe\u5f0f\u4e2d\u7684 guess \u6307\u7684\u662f\u5305\u542b\u8f93\u5165\u7684\u5b57\u7b26\u4e32\u7c7b\u578b guess \u53d8\u91cf\u3002 // String \u5b9e\u4f8b\u7684 trim \u65b9\u6cd5\u4f1a\u53bb\u9664\u5b57\u7b26\u4e32\u5f00\u5934\u548c\u7ed3\u5c3e\u7684\u7a7a\u767d\u5b57\u7b26\uff0c\u6211\u4eec\u5fc5\u987b\u6267\u884c\u6b64\u65b9\u6cd5\u624d\u80fd\u5c06\u5b57\u7b26\u4e32\u4e0e u32 \u6bd4\u8f83\uff0c\u56e0\u4e3a u32 \u53ea\u80fd\u5305\u542b\u6570\u503c\u578b\u6570\u636e\u3002 // \u7528\u6237\u5fc5\u987b\u8f93\u5165 enter \u952e\u624d\u80fd\u8ba9 read_line \u8fd4\u56de\u5e76\u8f93\u5165\u4ed6\u4eec\u7684\u731c\u60f3\uff0c\u8fd9\u5c06\u4f1a\u5728\u5b57\u7b26\u4e32\u4e2d\u589e\u52a0\u4e00\u4e2a\u6362\u884c\uff08newline\uff09\u7b26\u3002 // \u4f8b\u5982\uff0c\u7528\u6237\u8f93\u5165 5 \u5e76\u6309\u4e0b enter, guess \u770b\u8d77\u6765\u50cf\u8fd9\u6837\uff1a5\\n \u6216\u8005 5\\r\\n\u3002 // \\n \u4ee3\u8868 \u201c\u6362\u884c\u201d\uff0c\u56de\u8f66\u952e\uff1b\\r \u4ee3\u8868 \u201c\u56de\u8f66\u201d\uff0c\u56de\u8f66\u952e\u3002 // trim \u65b9\u6cd5\u4f1a\u6d88\u9664 \\n \u6216\u8005 \\r\\n\uff0c\u53ea\u7559\u4e0b 5\u3002 // \u5b57\u7b26\u4e32\u7684 parse \u65b9\u6cd5 \u5c06\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u5176\u4ed6\u7c7b\u578b\u3002 // \u8fd9\u91cc\u7528\u5b83\u6765\u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u503c\u3002\u6211\u4eec\u9700\u8981\u544a\u8bc9 Rust \u5177\u4f53\u7684\u6570\u5b57\u7c7b\u578b\uff0c\u8fd9\u91cc\u901a\u8fc7 let guess: u32 \u6307\u5b9a\u3002 // guess \u540e\u9762\u7684\u5192\u53f7\uff08:\uff09\u544a\u8bc9 Rust \u6211\u4eec\u6307\u5b9a\u4e86\u53d8\u91cf\u7684\u7c7b\u578b\u3002 // Rust \u6709\u4e00\u4e9b\u5185\u5efa\u7684\u6570\u5b57\u7c7b\u578b\uff1bu32 \u662f\u4e00\u4e2a\u65e0\u7b26\u53f7\u7684 32 \u4f4d\u6574\u578b\u3002 // \u5bf9\u4e8e\u4e0d\u5927\u7684\u6b63\u6574\u6570\u6765\u8bf4\uff0c\u5b83\u662f\u4e0d\u9519\u7684\u9ed8\u8ba4\u7c7b\u578b\uff0c\u7b2c\u4e09\u7ae0\u8fd8\u4f1a\u8bb2\u5230\u5176\u4ed6\u6570\u5b57\u7c7b\u578b\u3002 // \u53e6\u5916\uff0c\u7a0b\u5e8f\u4e2d\u7684 u32 \u6ce8\u89e3\u4ee5\u53ca\u4e0e secret_number \u7684\u6bd4\u8f83\uff0c\u610f\u5473\u7740 Rust \u4f1a\u63a8\u65ad\u51fa secret_number \u4e5f\u662f u32 \u7c7b\u578b\u3002 // \u73b0\u5728\u53ef\u4ee5\u4f7f\u7528\u76f8\u540c\u7c7b\u578b\u6bd4\u8f83\u4e24\u4e2a\u503c\u4e86\uff01 // parse \u65b9\u6cd5\u53ea\u6709\u5728\u5b57\u7b26\u903b\u8f91\u4e0a\u53ef\u4ee5\u8f6c\u6362\u4e3a\u6570\u5b57\u7684\u65f6\u5019\u624d\u80fd\u5de5\u4f5c\u6240\u4ee5\u975e\u5e38\u5bb9\u6613\u51fa\u9519\u3002 // \u4f8b\u5982\uff0c\u5b57\u7b26\u4e32\u4e2d\u5305\u542b A\ud83d\udc4d%\uff0c\u5c31\u65e0\u6cd5\u5c06\u5176\u8f6c\u6362\u4e3a\u4e00\u4e2a\u6570\u5b57\u3002 // \u56e0\u6b64\uff0cparse \u65b9\u6cd5\u8fd4\u56de\u4e00\u4e2a Result \u7c7b\u578b\u3002 // \u50cf\u4e4b\u524d \u201c\u4f7f\u7528 Result \u7c7b\u578b\u6765\u5904\u7406\u6f5c\u5728\u7684\u9519\u8bef\u201d \u8ba8\u8bba\u7684 read_line \u65b9\u6cd5\u90a3\u6837\uff0c\u518d\u6b21\u6309\u90e8\u5c31\u73ed\u7684\u7528 expect \u65b9\u6cd5\u5904\u7406\u5373\u53ef\u3002 // \u5982\u679c parse \u4e0d\u80fd\u4ece\u5b57\u7b26\u4e32\u751f\u6210\u4e00\u4e2a\u6570\u5b57\uff0c\u8fd4\u56de\u4e00\u4e2a Result \u7684 Err \u6210\u5458\u65f6\uff0cexpect \u4f1a\u4f7f\u6e38\u620f\u5d29\u6e83\u5e76\u6253\u5370\u9644\u5e26\u7684\u4fe1\u606f\u3002 // \u5982\u679c parse \u6210\u529f\u5730\u5c06\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u4e00\u4e2a\u6570\u5b57\uff0c\u5b83\u4f1a\u8fd4\u56de Result \u7684 Ok \u6210\u5458\uff0c\u7136\u540e expect \u4f1a\u8fd4\u56de Ok \u503c\u4e2d\u7684\u6570\u5b57\u3002 println! ( \"\u4f60\u731c\u6d4b\u7684\u6570\u4e3a: {guess}\" ); match guess . cmp ( & secret_number ) { Ordering :: Less => println! ( \"\u592a\u5c0f\u4e86\uff01\" ), Ordering :: Greater => println! ( \"\u592a\u5927\u4e86\uff01\" ), Ordering :: Equal => println! ( \"\u731c\u5bf9\u4e86\uff01\" ), } } \u4f7f\u7528\u5faa\u73af\u6765\u5141\u8bb8\u591a\u6b21\u731c\u6d4b loop \u5173\u952e\u5b57\u521b\u5efa\u4e86\u4e00\u4e2a\u65e0\u9650\u5faa\u73af\u3002 \u6587\u4ef6\u540d: src/main.rs use rand :: Rng ; use std :: cmp :: Ordering ; use std :: io ; fn main () { println! ( \"\u731c\u6570\u6e38\u620f\uff01\uff01\" ); let secret_number = rand :: thread_rng (). gen_range ( 1 ..= 100 ); println! ( \"\u751f\u6210\u7684\u5bc6\u7801\u6570\u5b57\u662f: {secret_number}\" ); loop { println! ( \"\u8bf7\u8f93\u5165\u4e00\u4e2a\u503c:\" ); let mut guess = String :: new (); io :: stdin (). read_line ( & mut guess ). expect ( \"\u8bfb\u6570\u5931\u8d25!\" ); let guess : u32 = guess . trim (). parse (). expect ( \"\u8bf7\u8f93\u5165\u6570\u5b57!\" ); println! ( \"\u4f60\u731c\u6d4b\u7684\u6570\u4e3a: {guess}\" ); match guess . cmp ( & secret_number ) { Ordering :: Less => println! ( \"\u592a\u5c0f\u4e86\uff01\" ), Ordering :: Greater => println! ( \"\u592a\u5927\u4e86\uff01\" ), Ordering :: Equal => println! ( \"\u731c\u5bf9\u4e86\uff01\" ), } } } \u5982\u4e0a\u6240\u793a\uff0c\u6211\u4eec\u5c06\u63d0\u793a\u7528\u6237\u731c\u6d4b\u4e4b\u540e\u7684\u6240\u6709\u5185\u5bb9\u79fb\u52a8\u5230\u4e86\u5faa\u73af\u4e2d\u3002\u786e\u4fdd loop \u5faa\u73af\u4e2d\u7684\u4ee3\u7801\u591a\u7f29\u8fdb\u56db\u4e2a\u7a7a\u683c\uff0c\u518d\u6b21\u8fd0\u884c\u7a0b\u5e8f\u3002\u6ce8\u610f\u8fd9\u91cc\u6709\u4e00\u4e2a\u65b0\u95ee\u9898\uff0c\u56e0\u4e3a\u7a0b\u5e8f\u5fe0\u5b9e\u5730\u6267\u884c\u4e86\u6211\u4eec\u7684\u8981\u6c42\uff1a\u6c38\u8fdc\u5730\u8bf7\u6c42\u53e6\u4e00\u4e2a\u731c\u6d4b\uff0c\u7528\u6237\u597d\u50cf\u65e0\u6cd5\u9000\u51fa\u554a\uff01 \u7528\u6237\u603b\u80fd\u4f7f\u7528 ctrl-c \u7ec8\u6b62\u7a0b\u5e8f\u3002\u4e0d\u8fc7\u8fd8\u6709\u53e6\u4e00\u4e2a\u65b9\u6cd5\u8df3\u51fa\u65e0\u9650\u5faa\u73af\uff0c\u5c31\u662f \u201c\u6bd4\u8f83\u731c\u6d4b\u4e0e\u79d8\u5bc6\u6570\u5b57\u201d \u90e8\u5206\u63d0\u5230\u7684 parse\uff1a\u5982\u679c\u7528\u6237\u8f93\u5165\u7684\u7b54\u6848\u4e0d\u662f\u4e00\u4e2a\u6570\u5b57\uff0c\u7a0b\u5e8f\u4f1a\u5d29\u6e83\u3002\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u8fd9\u4e00\u70b9\u6765\u9000\u51fa\uff0c\u5982\u4e0b\u6240\u793a\uff1a $ cargo run Compiling guessing_game v0.1.0 ( file:///projects/guessing_game ) Finished dev [ unoptimized + debuginfo ] target ( s ) in 1 .50s Running ` target/debug/guessing_game ` \u731c\u6570\u6e38\u620f\uff01\uff01 \u751f\u6210\u7684\u5bc6\u7801\u6570\u5b57\u662f: 57 \u8bf7\u8f93\u5165\u4e00\u4e2a\u503c: 12 \u4f60\u731c\u6d4b\u7684\u6570\u4e3a: 12 \u592a\u5c0f\u4e86\uff01 \u8bf7\u8f93\u5165\u4e00\u4e2a\u503c: 57 \u4f60\u731c\u6d4b\u7684\u6570\u4e3a: 57 \u731c\u5bf9\u4e86\uff01 \u8bf7\u8f93\u5165\u4e00\u4e2a\u503c: asdf thread 'main' panicked at '\u8bf7\u8f93\u5165\u6570\u5b57!: ParseIntError { kind: InvalidDigit }' , src/main.rs:19:47 note: run with ` RUST_BACKTRACE = 1 ` environment variable to display a backtrace \u731c\u6d4b\u6b63\u786e\u540e\u9000\u51fa \u8ba9\u6211\u4eec\u589e\u52a0\u4e00\u4e2a break \u8bed\u53e5\uff0c\u5728\u7528\u6237\u731c\u5bf9\u65f6\u9000\u51fa\u6e38\u620f\uff1a \u6587\u4ef6\u540d: src/main.rs use rand :: Rng ; use std :: cmp :: Ordering ; use std :: io ; fn main () { println! ( \"\u731c\u6570\u6e38\u620f\uff01\uff01\" ); let secret_number = rand :: thread_rng (). gen_range ( 1 ..= 100 ); println! ( \"\u751f\u6210\u7684\u5bc6\u7801\u6570\u5b57\u662f: {secret_number}\" ); loop { println! ( \"\u8bf7\u8f93\u5165\u4e00\u4e2a\u503c:\" ); let mut guess = String :: new (); io :: stdin (). read_line ( & mut guess ). expect ( \"\u8bfb\u6570\u5931\u8d25!\" ); let guess : u32 = guess . trim (). parse (). expect ( \"\u8bf7\u8f93\u5165\u6570\u5b57!\" ); println! ( \"\u4f60\u731c\u6d4b\u7684\u6570\u4e3a: {guess}\" ); match guess . cmp ( & secret_number ) { Ordering :: Less => println! ( \"\u592a\u5c0f\u4e86\uff01\" ), Ordering :: Greater => println! ( \"\u592a\u5927\u4e86\uff01\" ), Ordering :: Equal => { println! ( \"\u731c\u5bf9\u4e86\uff01\" ); break ; } } } } a \u901a\u8fc7\u5728 You win! \u4e4b\u540e\u589e\u52a0\u4e00\u884c break\uff0c\u7528\u6237\u731c\u5bf9\u4e86\u795e\u79d8\u6570\u5b57\u540e\u4f1a\u9000\u51fa\u5faa\u73af\u3002\u9000\u51fa\u5faa\u73af\u4e5f\u610f\u5473\u7740\u9000\u51fa\u7a0b\u5e8f\uff0c\u56e0\u4e3a\u5faa\u73af\u662f main \u7684\u6700\u540e\u4e00\u90e8\u5206\u3002 \u5904\u7406\u65e0\u6548\u8f93\u5165 \u4e3a\u4e86\u8fdb\u4e00\u6b65\u6539\u5584\u6e38\u620f\u6027\uff0c\u4e0d\u8981\u5728\u7528\u6237\u8f93\u5165\u975e\u6570\u5b57\u65f6\u5d29\u6e83\uff0c\u9700\u8981\u5ffd\u7565\u975e\u6570\u5b57\uff0c\u8ba9\u7528\u6237\u53ef\u4ee5\u7ee7\u7eed\u731c\u6d4b\u3002\u53ef\u4ee5\u901a\u8fc7\u4fee\u6539 guess \u5c06 String \u8f6c\u5316\u4e3a u32 \u90a3\u90e8\u5206\u4ee3\u7801\u6765\u5b9e\u73b0 \u6587\u4ef6\u540d: src/main.rs use rand :: Rng ; use std :: cmp :: Ordering ; use std :: io ; fn main () { println! ( \"\u731c\u6570\u6e38\u620f\uff01\uff01\" ); let secret_number = rand :: thread_rng (). gen_range ( 1 ..= 100 ); println! ( \"\u751f\u6210\u7684\u5bc6\u7801\u6570\u5b57\u662f: {secret_number}\" ); loop { println! ( \"\u8bf7\u8f93\u5165\u4e00\u4e2a\u503c:\" ); let mut guess = String :: new (); io :: stdin (). read_line ( & mut guess ). expect ( \"\u8bfb\u6570\u5931\u8d25!\" ); let guess : u32 = match guess . trim (). parse () { Ok ( num ) => num , Err ( _ ) => continue , }; // \u5c06 expect \u8c03\u7528\u6362\u6210 match \u8bed\u53e5\uff0c\u4ee5\u4ece\u9047\u5230\u9519\u8bef\u5c31\u5d29\u6e83\u8f6c\u6362\u4e3a\u5904\u7406\u9519\u8bef\u3002 // \u987b\u77e5 parse \u8fd4\u56de\u4e00\u4e2a Result \u7c7b\u578b\uff0c\u800c Result \u662f\u4e00\u4e2a\u62e5\u6709 Ok \u6216 Err \u6210\u5458\u7684\u679a\u4e3e\u3002 // \u8fd9\u91cc\u4f7f\u7528\u7684 match \u8868\u8fbe\u5f0f\uff0c\u548c\u5904\u7406 cmp \u65b9\u6cd5\u8fd4\u56de Ordering \u65f6\u7528\u7684\u4e00\u6837\u3002 // \u5982\u679c parse \u80fd\u591f\u6210\u529f\u7684\u5c06\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u4e00\u4e2a\u6570\u5b57\uff0c\u5b83\u4f1a\u8fd4\u56de\u4e00\u4e2a\u5305\u542b\u7ed3\u679c\u6570\u5b57\u7684 Ok\u3002 // \u8fd9\u4e2a Ok \u503c\u4e0e match \u7b2c\u4e00\u4e2a\u5206\u652f\u7684\u6a21\u5f0f\u76f8\u5339\u914d\uff0c\u8be5\u5206\u652f\u5bf9\u5e94\u7684\u52a8\u4f5c\u8fd4\u56de Ok \u503c\u4e2d\u7684\u6570\u5b57 num\uff0c // \u6700\u540e\u5982\u613f\u53d8\u6210\u65b0\u521b\u5efa\u7684 guess \u53d8\u91cf\u3002 // \u5982\u679c parse \u4e0d\u80fd\u5c06\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u4e00\u4e2a\u6570\u5b57\uff0c\u5b83\u4f1a\u8fd4\u56de\u4e00\u4e2a\u5305\u542b\u66f4\u591a\u9519\u8bef\u4fe1\u606f\u7684 Err\u3002 // Err \u503c\u4e0d\u80fd\u5339\u914d\u7b2c\u4e00\u4e2a match \u5206\u652f\u7684 Ok(num) \u6a21\u5f0f\uff0c\u4f46\u662f\u4f1a\u5339\u914d\u7b2c\u4e8c\u4e2a\u5206\u652f\u7684 Err(_) \u6a21\u5f0f\uff1a // _ \u662f\u4e00\u4e2a\u901a\u914d\u7b26\u503c\uff0c\u672c\u4f8b\u4e2d\u7528\u6765\u5339\u914d\u6240\u6709 Err \u503c\uff0c\u4e0d\u7ba1\u5176\u4e2d\u6709\u4f55\u79cd\u4fe1\u606f\u3002 // \u6240\u4ee5\u7a0b\u5e8f\u4f1a\u6267\u884c\u7b2c\u4e8c\u4e2a\u5206\u652f\u7684\u52a8\u4f5c\uff0ccontinue \u610f\u5473\u7740\u8fdb\u5165 loop \u7684\u4e0b\u4e00\u6b21\u5faa\u73af\uff0c\u8bf7\u6c42\u53e6\u4e00\u4e2a\u731c\u6d4b\u3002 // \u8fd9\u6837\u7a0b\u5e8f\u5c31\u6709\u6548\u7684\u5ffd\u7565\u4e86 parse \u53ef\u80fd\u9047\u5230\u7684\u6240\u6709\u9519\u8bef\uff01 println! ( \"\u4f60\u731c\u6d4b\u7684\u6570\u4e3a: {guess}\" ); match guess . cmp ( & secret_number ) { Ordering :: Less => println! ( \"\u592a\u5c0f\u4e86\uff01\" ), Ordering :: Greater => println! ( \"\u592a\u5927\u4e86\uff01\" ), Ordering :: Equal => { println! ( \"\u731c\u5bf9\u4e86\uff01\" ); break ; } } } } \u73b0\u5728\u4e07\u4e8b\u4ff1\u5907\uff0c\u53ea\u9700\u8fd0\u884c cargo run\uff1a $ cargo run Compiling guessing_game v0.1.0 ( file:///projects/guessing_game ) Finished dev [ unoptimized + debuginfo ] target ( s ) in 4 .45s Running ` target/debug/guessing_game ` \u731c\u6570\u6e38\u620f\uff01\uff01 \u751f\u6210\u7684\u5bc6\u7801\u6570\u5b57\u662f: 66 \u8bf7\u8f93\u5165\u4e00\u4e2a\u503c: 12d \u8bf7\u8f93\u5165\u4e00\u4e2a\u503c: 12 \u4f60\u731c\u6d4b\u7684\u6570\u4e3a: 12 \u592a\u5c0f\u4e86\uff01 \u8bf7\u8f93\u5165\u4e00\u4e2a\u503c: 66 \u4f60\u731c\u6d4b\u7684\u6570\u4e3a: 66 \u731c\u5bf9\u4e86\uff01 \u6700\u7ec8\u7248\u672c \u592a\u68d2\u4e86\uff01\u518d\u6709\u6700\u540e\u4e00\u4e2a\u5c0f\u7684\u4fee\u6539\uff0c\u5c31\u80fd\u5b8c\u6210\u731c\u731c\u770b\u6e38\u620f\u4e86\uff1a\u8fd8\u8bb0\u5f97\u7a0b\u5e8f\u4f9d\u7136\u4f1a\u6253\u5370\u51fa\u79d8\u5bc6\u6570\u5b57\u3002\u5728\u6d4b\u8bd5\u65f6\u8fd8\u597d\uff0c\u4f46\u6b63\u5f0f\u53d1\u5e03\u65f6\u4f1a\u6bc1\u4e86\u6e38\u620f\u3002\u5220\u6389\u6253\u5370\u79d8\u5bc6\u6570\u5b57\u7684 println!\u3002 \u6700\u7ec8\u4ee3\u7801\uff1a \u6587\u4ef6\u540d: src/main.rs use rand :: Rng ; use std :: cmp :: Ordering ; use std :: io ; fn main () { println! ( \"\u731c\u6570\u6e38\u620f\uff01\uff01\" ); let secret_number = rand :: thread_rng (). gen_range ( 1 ..= 100 ); loop { println! ( \"\u8bf7\u8f93\u5165\u4e00\u4e2a\u503c:\" ); let mut guess = String :: new (); io :: stdin (). read_line ( & mut guess ). expect ( \"\u8bfb\u6570\u5931\u8d25!\" ); let guess : u32 = match guess . trim (). parse () { Ok ( num ) => num , Err ( _ ) => continue , }; println! ( \"\u4f60\u731c\u6d4b\u7684\u6570\u4e3a: {guess}\" ); match guess . cmp ( & secret_number ) { Ordering :: Less => println! ( \"\u592a\u5c0f\u4e86\uff01\" ), Ordering :: Greater => println! ( \"\u592a\u5927\u4e86\uff01\" ), Ordering :: Equal => { println! ( \"\u731c\u5bf9\u4e86\uff01\" ); break ; } } } }","title":"\u731c\u6570\u6e38\u620f"},{"location":"guessing-game/#_1","text":"","title":"\u731c\u6570\u6e38\u620f"},{"location":"guessing-game/#_2","text":"cargo new guessing_game cd guessing_game","title":"\u521b\u5efa\u65b0\u9879\u76ee"},{"location":"guessing-game/#_3","text":"\u6587\u4ef6\u540d: src/main.rs // \u9884\u5bfc\u5165 // io\u8f93\u5165/\u8f93\u51fa\u5e93\u5f15\u5165\u5f53\u524d\u4f5c\u7528\u57df; // io \u5e93\u6765\u81ea\u4e8e\u6807\u51c6\u5e93\uff0c\u4e5f\u88ab\u79f0\u4e3a std use std :: io ; // main \u51fd\u6570\u662f\u7a0b\u5e8f\u7684\u5165\u53e3\u70b9 // fn \u8bed\u6cd5\u58f0\u660e\u4e86\u4e00\u4e2a\u65b0\u51fd\u6570 // () \u8868\u660e\u6ca1\u6709\u53c2\u6570 // { \u4f5c\u4e3a\u51fd\u6570\u4f53\u7684\u5f00\u59cb fn main () { println! ( \"Guess the number!\" ); // println! \u662f\u4e00\u4e2a\u5728\u5c4f\u5e55\u4e0a\u6253\u5370\u5b57\u7b26\u4e32\u7684\u5b8f println! ( \"Please input your guess.\" ); // println! \u662f\u4e00\u4e2a\u5728\u5c4f\u5e55\u4e0a\u6253\u5370\u5b57\u7b26\u4e32\u7684\u5b8f // \u521b\u5efa\u4e00\u4e2a \u53d8\u91cf\uff08variable\uff09\u6765\u50a8\u5b58\u7528\u6237\u8f93\u5165 // \u5728 Rust \u4e2d\uff0c\u53d8\u91cf\u9ed8\u8ba4\u662f\u4e0d\u53ef\u53d8\u7684\uff0c\u8fd9\u610f\u5473\u7740\u4e00\u65e6\u6211\u4eec\u7ed9\u53d8\u91cf\u8d4b\u503c\uff0c\u8fd9\u4e2a\u503c\u5c31\u4e0d\u518d\u53ef\u4ee5\u4fee\u6539\u4e86\u3002 let mut guess = String :: new (); // \u5728\u53d8\u91cf\u540d\u524d\u4f7f\u7528 mut \u6765\u4f7f\u4e00\u4e2a\u53d8\u91cf\u53ef\u53d8 // String \u662f\u4e00\u4e2a\u6807\u51c6\u5e93\u63d0\u4f9b\u7684\u5b57\u7b26\u4e32\u7c7b\u578b\uff0c\u5b83\u662f UTF-8 \u7f16\u7801\u7684\u53ef\u589e\u957f\u6587\u672c\u5757\u3002 // ::new \u90a3\u4e00\u884c\u7684 :: \u8bed\u6cd5\u8868\u660e new \u662f String \u7c7b\u578b\u7684\u4e00\u4e2a \u5173\u8054\u51fd\u6570\uff08associated function\uff09\u3002 // \u5173\u8054\u51fd\u6570\u662f\u9488\u5bf9\u7c7b\u578b\u5b9e\u73b0\u7684\uff0c\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\u662f String\uff0c\u800c\u4e0d\u662f String \u7684\u67d0\u4e2a\u7279\u5b9a\u5b9e\u4f8b\u3002\u4e00\u4e9b\u8bed\u8a00\u4e2d\u628a\u5b83\u79f0\u4e3a \u9759\u6001\u65b9\u6cd5\uff08static method\uff09\u3002 // new \u51fd\u6570\u521b\u5efa\u4e86\u4e00\u4e2a\u65b0\u7684\u7a7a\u5b57\u7b26\u4e32\uff0c\u4f60\u4f1a\u53d1\u73b0\u5f88\u591a\u7c7b\u578b\u4e0a\u6709 new \u51fd\u6570\uff0c\u56e0\u4e3a\u5b83\u662f\u521b\u5efa\u7c7b\u578b\u5b9e\u4f8b\u7684\u60ef\u7528\u51fd\u6570\u540d\u3002 // \u603b\u7684\u6765\u8bf4\uff0clet mut guess = String::new(); \u8fd9\u4e00\u884c\u521b\u5efa\u4e86\u4e00\u4e2a\u53ef\u53d8\u53d8\u91cf\uff0c\u5f53\u524d\u5b83\u7ed1\u5b9a\u5230\u4e00\u4e2a\u65b0\u7684 String \u7a7a\u5b9e\u4f8b\u4e0a\u3002 // \u5982\u679c\u7a0b\u5e8f\u7684\u5f00\u5934\u6ca1\u6709\u4f7f\u7528 use std::io \u5f15\u5165 io \u5e93\uff0c\u6211\u4eec\u4ecd\u53ef\u4ee5\u901a\u8fc7\u628a\u51fd\u6570\u8c03\u7528\u5199\u6210 std::io::stdin \u6765\u4f7f\u7528\u51fd\u6570\u3002 // stdin \u51fd\u6570\u8fd4\u56de\u4e00\u4e2a std::io::Stdin \u7684\u5b9e\u4f8b\uff0c\u8fd9\u4ee3\u8868\u7ec8\u7aef\u6807\u51c6\u8f93\u5165\u53e5\u67c4\u7684\u7c7b\u578b\u3002 io :: stdin () . read_line ( & mut guess ) // \u4ece\u6807\u51c6\u8f93\u5165\u53e5\u67c4\u83b7\u53d6\u7528\u6237\u8f93\u5165\u3002 // \u5c06 &mut guess \u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\u7ed9 read_line() \u51fd\u6570\uff0c\u8ba9\u5176\u5c06\u7528\u6237\u8f93\u5165\u50a8\u5b58\u5230\u8fd9\u4e2a\u5b57\u7b26\u4e32\u4e2d\u3002 // read_line \u7684\u5de5\u4f5c\u662f\uff0c\u65e0\u8bba\u7528\u6237\u5728\u6807\u51c6\u8f93\u5165\u4e2d\u952e\u5165\u4ec0\u4e48\u5185\u5bb9\uff0c\u90fd\u5c06\u5176\u8ffd\u52a0\uff08\u4e0d\u4f1a\u8986\u76d6\u5176\u539f\u6709\u5185\u5bb9\uff09\u5230\u4e00\u4e2a\u5b57\u7b26\u4e32\u4e2d\uff0c\u56e0\u6b64\u5b83\u9700\u8981\u5b57\u7b26\u4e32\u4f5c\u4e3a\u53c2\u6570\u3002 // \u8fd9\u4e2a\u5b57\u7b26\u4e32\u53c2\u6570\u5e94\u8be5\u662f\u53ef\u53d8\u7684\uff0c\u4ee5\u4fbf read_line \u5c06\u7528\u6237\u8f93\u5165\u9644\u52a0\u4e0a\u53bb\u3002 // & \u8868\u793a\u8fd9\u4e2a\u53c2\u6570\u662f\u4e00\u4e2a \u5f15\u7528\uff08reference\uff09\uff0c\u5b83\u5141\u8bb8\u591a\u5904\u4ee3\u7801\u8bbf\u95ee\u540c\u4e00\u5904\u6570\u636e\uff0c\u800c\u65e0\u9700\u5728\u5185\u5b58\u4e2d\u591a\u6b21\u62f7\u8d1d\u3002 . expect ( \"Failed to read line\" ); // \u4f1a\u8fd4\u56de\u4e00\u4e2a\u7c7b\u578b\u4e3a Result \u7684\u503c\u3002 Result \u662f\u4e00\u79cd\u679a\u4e3e\u7c7b\u578b\uff0c\u901a\u5e38\u4e5f\u5199\u4f5c enum\u3002 // \u679a\u4e3e\u7c7b\u578b\u53d8\u91cf\u7684\u503c\u53ef\u4ee5\u662f\u591a\u79cd\u53ef\u80fd\u72b6\u6001\u4e2d\u7684\u4e00\u4e2a\u3002\u6211\u4eec\u628a\u6bcf\u79cd\u53ef\u80fd\u7684\u72b6\u6001\u79f0\u4e3a\u4e00\u79cd \u679a\u4e3e\u6210\u5458\uff08variant\uff09\u3002 // \u8fd9\u91cc\u7684 Result \u7c7b\u578b\u5c06\u7528\u6765\u7f16\u7801\u9519\u8bef\u5904\u7406\u7684\u4fe1\u606f\u3002 // Result \u7684\u6210\u5458\u662f Ok \u548c Err\uff0c // Ok \u6210\u5458\u8868\u793a\u64cd\u4f5c\u6210\u529f\uff0c\u5185\u90e8\u5305\u542b\u6210\u529f\u65f6\u4ea7\u751f\u7684\u503c\u3002 // Err \u6210\u5458\u5219\u610f\u5473\u7740\u64cd\u4f5c\u5931\u8d25\uff0c\u5e76\u4e14\u5305\u542b\u5931\u8d25\u7684\u524d\u56e0\u540e\u679c\u3002 // Result \u7c7b\u578b\u7684\u503c\uff0c\u50cf\u5176\u4ed6\u7c7b\u578b\u4e00\u6837\uff0c\u62e5\u6709\u5b9a\u4e49\u4e8e\u5176\u4e0a\u7684\u65b9\u6cd5\u3002Result \u7684\u5b9e\u4f8b\u62e5\u6709 expect \u65b9\u6cd5\u3002 // \u5982\u679c io::Result \u5b9e\u4f8b\u7684\u503c\u662f Err\uff0cexpect \u4f1a\u5bfc\u81f4\u7a0b\u5e8f\u5d29\u6e83\uff0c\u5e76\u663e\u793a\u5f53\u505a\u53c2\u6570\u4f20\u9012\u7ed9 expect \u7684\u4fe1\u606f\u3002 // \u5982\u679c read_line \u65b9\u6cd5\u8fd4\u56de Err\uff0c\u5219\u53ef\u80fd\u662f\u6765\u6e90\u4e8e\u5e95\u5c42\u64cd\u4f5c\u7cfb\u7edf\u9519\u8bef\u7684\u7ed3\u679c\u3002 // \u5982\u679c Result \u5b9e\u4f8b\u7684\u503c\u662f Ok\uff0cexpect \u4f1a\u83b7\u53d6 Ok \u4e2d\u7684\u503c\u5e76\u539f\u6837\u8fd4\u56de\u3002 // \u5728\u672c\u4f8b\u4e2d\uff0c\u8fd9\u4e2a\u503c\u662f\u7528\u6237\u8f93\u5165\u5230\u6807\u51c6\u8f93\u5165\u4e2d\u7684\u5b57\u8282\u6570\u3002 // \u5982\u679c\u4e0d\u8c03\u7528 expect\uff0c\u7a0b\u5e8f\u4e5f\u80fd\u7f16\u8bd1\uff0c\u4e0d\u8fc7\u4f1a\u51fa\u73b0\u4e00\u4e2a\u8b66\u544a\uff1a // note: this `Result` may be an `Err` variant, which should be handled // Rust \u8b66\u544a\u6211\u4eec\u6ca1\u6709\u4f7f\u7528 read_line \u7684\u8fd4\u56de\u503c Result\uff0c\u8bf4\u660e\u6709\u4e00\u4e2a\u53ef\u80fd\u7684\u9519\u8bef\u6ca1\u6709\u5904\u7406\u3002 // \u6d88\u9664\u8b66\u544a\u7684\u6b63\u786e\u505a\u6cd5\u662f\u5b9e\u9645\u53bb\u7f16\u5199\u9519\u8bef\u5904\u7406\u4ee3\u7801\uff0c\u4e0d\u8fc7\u7531\u4e8e\u6211\u4eec\u5c31\u662f\u5e0c\u671b\u7a0b\u5e8f\u5728\u51fa\u73b0\u95ee\u9898\u65f6\u7acb\u5373\u5d29\u6e83\uff0c\u6240\u4ee5\u76f4\u63a5\u4f7f\u7528 expect\u3002 // \u7ee7\u7eed\u6df1\u5165\u5b66\u4e60\u7684\u8bdd\uff0c\u5c06\u4f1a\u5b66\u4e60\u5230\u5982\u4f55\u4ece\u9519\u8bef\u4e2d\u6062\u590d\u3002 println! ( \"You guessed: {guess}\" ); // \u6253\u5370\u4e86\u5b58\u50a8\u7528\u6237\u8f93\u5165\u7684\u5b57\u7b26\u4e32\u3002 // \u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\uff0c\u91cc\u9762\u7684 {} \u662f\u9884\u7559\u5728\u7279\u5b9a\u4f4d\u7f6e\u7684\u5360\u4f4d\u7b26 // \u4f7f\u7528 {} \u4e5f\u53ef\u4ee5\u6253\u5370\u591a\u4e2a\u503c\uff1a // \u7b2c\u4e00\u5bf9 {} \u4f7f\u7528\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u4e4b\u540e\u7684\u7b2c\u4e00\u4e2a\u503c\uff0c\u7b2c\u4e8c\u5bf9\u5219\u4f7f\u7528\u7b2c\u4e8c\u4e2a\u503c\uff0c\u4f9d\u6b64\u7c7b\u63a8\u3002\u8c03 // \u7528\u4e00\u6b21 println! \u6253\u5370\u591a\u4e2a\u503c\u770b\u8d77\u6765\u50cf\u8fd9\u6837\uff1a // println!(\"x = {} and y = {}\", x, y); }","title":"\u5904\u7406\u4e00\u6b21\u731c\u6d4b\u8f93\u5165"},{"location":"guessing-game/#_4","text":"Rust \u6807\u51c6\u5e93\u4e2d\u5c1a\u672a\u5305\u542b\u968f\u673a\u6570\u529f\u80fd\u3002\u7136\u800c\uff0cRust \u56e2\u961f\u8fd8\u662f\u63d0\u4f9b\u4e86\u4e00\u4e2a\u5305\u542b\u4e0a\u8ff0\u529f\u80fd\u7684 rand crate \u3002 rand crate \u662f\u4e00\u4e2a \u5e93 crate \uff0c \u5e93 crate \u53ef\u4ee5\u5305\u542b\u4efb\u610f\u80fd\u88ab\u5176\u4ed6\u7a0b\u5e8f\u4f7f\u7528\u7684\u4ee3\u7801\uff0c\u4f46\u662f\u4e0d\u80fd\u81ea\u6267\u884c\u3002 \u5728\u4f7f\u7528 rand \u7f16\u5199\u4ee3\u7801\u4e4b\u524d\uff0c\u9700\u8981\u4fee\u6539 Cargo.toml \u6587\u4ef6\uff0c\u5f15\u5165\u4e00\u4e2a rand \u4f9d\u8d56\u3002\u73b0\u5728\u6253\u5f00\u8fd9\u4e2a\u6587\u4ef6\u5e76\u5c06\u4e0b\u9762\u8fd9\u4e00\u884c\u6dfb\u52a0\u5230 [dependencies] \u7247\u6bb5\u6807\u9898\u4e4b\u4e0b\u3002 \u6587\u4ef6\u540d: Cargo.toml rand = \"0.8.3\" [dependencies] \u7247\u6bb5\u544a\u8bc9 Cargo \u672c\u9879\u76ee\u4f9d\u8d56\u4e86\u54ea\u4e9b\u5916\u90e8 crate \u53ca\u5176\u7248\u672c\u3002\u672c\u4f8b\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u8bed\u4e49\u5316\u7248\u672c 0.8.3 \u6765\u6307\u5b9a rand crate \u7684\u7248\u672c\u3002Cargo \u7406\u89e3 \u8bed\u4e49\u5316\u7248\u672c \uff08Semantic Versioning\uff09\uff08\u6709\u65f6\u4e5f\u79f0\u4e3a SemVer\uff09\uff0c\u8fd9\u662f\u4e00\u79cd\u5b9a\u4e49\u7248\u672c\u53f7\u7684\u6807\u51c6\u3002 0.8.3 \u4e8b\u5b9e\u4e0a\u662f ^0.8.3 \u7684\u7b80\u5199\uff0c\u5b83\u8868\u793a\u4efb\u4f55\u81f3\u5c11\u662f 0.8.3 \u4f46\u5c0f\u4e8e 0.9.0 \u7684\u7248\u672c\u3002 Cargo \u8ba4\u4e3a\u8fd9\u4e9b\u7248\u672c\u4e0e 0.8.3 \u7248\u672c\u7684\u516c\u6709 API \u76f8\u517c\u5bb9\uff0c\u8fd9\u6837\u7684\u7248\u672c\u6307\u5b9a\u786e\u4fdd\u4e86\u6211\u4eec\u53ef\u4ee5\u83b7\u53d6\u80fd\u4f7f\u672c\u7ae0\u4ee3\u7801\u7f16\u8bd1\u7684\u6700\u65b0\u7684\u8865\u4e01\uff08patch\uff09\u7248\u672c\u3002\u4efb\u4f55\u5927\u4e8e\u7b49\u4e8e 0.9.0 \u7684\u7248\u672c\u4e0d\u80fd\u4fdd\u8bc1\u548c\u63a5\u4e0b\u6765\u7684\u793a\u4f8b\u91c7\u7528\u4e86\u76f8\u540c\u7684 API\u3002 \u73b0\u5728\uff0c\u4e0d\u4fee\u6539\u4efb\u4f55\u4ee3\u7801\uff0c\u6784\u5efa\u9879\u76ee\uff0c\u5982\u4e0b\u6240\u793a\uff1a $ cargo build Updating crates.io index Downloaded ppv-lite86 v0.2.17 Downloaded rand v0.8.5 Downloaded rand_chacha v0.3.1 Downloaded rand_core v0.6.4 Downloaded cfg-if v1.0.0 Downloaded getrandom v0.2.8 Downloaded libc v0.2.138 Downloaded 7 crates ( 794 .8 KB ) in 2 .72s Compiling libc v0.2.138 Compiling cfg-if v1.0.0 Compiling ppv-lite86 v0.2.17 Compiling getrandom v0.2.8 Compiling rand_core v0.6.4 Compiling rand_chacha v0.3.1 Compiling rand v0.8.5 Compiling guessing-game v0.1.0 ( file:///projects/guessing_game ) Finished dev [ unoptimized + debuginfo ] target ( s ) in 3m 45s # \u5c06 rand crate \u6dfb\u52a0\u4e3a\u4f9d\u8d56\u4e4b\u540e\u8fd0\u884c cargo build \u7684\u8f93\u51fa \u73b0\u5728\u7cfb\u7edf\u6709\u4e86\u4e00\u4e2a\u5916\u90e8\u4f9d\u8d56\uff0cCargo \u4ece registry \u4e0a\u83b7\u53d6\u6240\u6709\u5305\u7684\u6700\u65b0\u7248\u672c\u4fe1\u606f\uff0c\u8fd9\u662f\u4e00\u4efd\u6765\u81ea Crates.io \u7684\u6570\u636e\u62f7\u8d1d\u3002Crates.io \u662f Rust \u751f\u6001\u73af\u5883\u4e2d\u7684\u5f00\u53d1\u8005\u4eec\u5411\u4ed6\u4eba\u8d21\u732e Rust \u5f00\u6e90\u9879\u76ee\u7684\u5730\u65b9\u3002 \u5728\u66f4\u65b0\u5b8c registry \u540e\uff0cCargo \u68c0\u67e5 [dependencies] \u90e8\u5206\u5e76\u4e0b\u8f7d\u5217\u8868\u4e2d\u5305\u542b\u4f46\u8fd8\u672a\u4e0b\u8f7d\u7684 crates \u3002\u672c\u4f8b\u4e2d\uff0c\u867d\u7136\u53ea\u58f0\u660e\u4e86 rand \u4e00\u4e2a\u4f9d\u8d56\uff0c\u7136\u800c Cargo \u8fd8\u662f\u989d\u5916\u83b7\u53d6\u4e86 rand \u6240\u9700\u8981\u7684\u5176\u4ed6 crates\uff0c\u56e0\u4e3a rand \u4f9d\u8d56\u5b83\u4eec\u6765\u6b63\u5e38\u5de5\u4f5c\u3002\u4e0b\u8f7d\u5b8c\u6210\u540e\uff0cRust \u7f16\u8bd1\u4f9d\u8d56\uff0c\u7136\u540e\u4f7f\u7528\u8fd9\u4e9b\u4f9d\u8d56\u7f16\u8bd1\u9879\u76ee\u3002 \u6587\u4ef6\u540d: src/main.rs // \u65b0\u589e\u4e86\u4e00\u884c use rand::Rng\u3002 // Rng \u662f\u4e00\u4e2a trait\uff0c\u5b83\u5b9a\u4e49\u4e86\u968f\u673a\u6570\u751f\u6210\u5668\u5e94\u5b9e\u73b0\u7684\u65b9\u6cd5\uff0c\u60f3\u4f7f\u7528\u8fd9\u4e9b\u65b9\u6cd5\u7684\u8bdd\uff0c\u6b64 trait \u5fc5\u987b\u5728\u4f5c\u7528\u57df\u4e2d\u3002 use rand :: Rng ; use std :: io ; fn main () { println! ( \"\u731c\u6570\u6e38\u620f\uff01\uff01\" ); let secret_number = rand :: thread_rng (). gen_range ( 1 ..= 100 ); // \u8c03\u7528\u4e86 rand::thread_rng \u51fd\u6570\u63d0\u4f9b\u5b9e\u9645\u4f7f\u7528\u7684\u968f\u673a\u6570\u751f\u6210\u5668\uff1a\u5b83\u4f4d\u4e8e\u5f53\u524d\u6267\u884c\u7ebf\u7a0b\u7684\u672c\u5730\u73af\u5883\u4e2d\uff0c\u5e76\u4ece\u64cd\u4f5c\u7cfb\u7edf\u83b7\u53d6 seed\u3002 // \u63a5\u7740\u8c03\u7528\u968f\u673a\u6570\u751f\u6210\u5668\u7684 gen_range \u65b9\u6cd5\u3002\u8fd9\u4e2a\u65b9\u6cd5\u7531 use rand::Rng \u8bed\u53e5\u5f15\u5165\u5230\u4f5c\u7528\u57df\u7684 Rng trait \u5b9a\u4e49\u3002 // gen_range \u65b9\u6cd5\u83b7\u53d6\u4e00\u4e2a\u8303\u56f4\u8868\u8fbe\u5f0f\uff08range expression\uff09\u4f5c\u4e3a\u53c2\u6570\uff0c\u5e76\u751f\u6210\u4e00\u4e2a\u5728\u6b64\u8303\u56f4\u4e4b\u95f4\u7684\u968f\u673a\u6570\u3002 // \u8fd9\u91cc\u4f7f\u7528\u7684\u8fd9\u7c7b\u8303\u56f4\u8868\u8fbe\u5f0f\u4f7f\u7528\u4e86 start..=end \u8fd9\u6837\u7684\u5f62\u5f0f\uff0c\u4e5f\u5c31\u662f\u8bf4\u5305\u542b\u4e86\u4e0a\u4e0b\u7aef\u70b9\uff0c\u6240\u4ee5\u9700\u8981\u6307\u5b9a 1..=100 \u6765\u8bf7\u6c42\u4e00\u4e2a 1 \u548c 100 \u4e4b\u95f4\u7684\u6570\u3002 println! ( \"\u751f\u6210\u7684\u5bc6\u7801\u6570\u5b57\u662f: {secret_number}\" ); println! ( \"\u8bf7\u8f93\u5165\u4e00\u4e2a\u503c:\" ); let mut guess = String :: new (); io :: stdin (). read_line ( & mut guess ). expect ( \"\u8bfb\u6570\u5931\u8d25!\" ); println! ( \"\u4f60\u731c\u6d4b\u7684\u6570\u4e3a: {guess}\" ) } \u6ce8\u610f \uff1a \u4f60\u4e0d\u53ef\u80fd\u51ed\u7a7a\u5c31\u77e5\u9053\u5e94\u8be5 use \u54ea\u4e2a trait \u4ee5\u53ca\u8be5\u4ece crate \u4e2d\u8c03\u7528\u54ea\u4e2a\u65b9\u6cd5\uff0c\u56e0\u6b64\u6bcf\u4e2acrate \u6709\u4f7f\u7528\u8bf4\u660e\u6587\u6863\u3002 Cargo \u6709\u4e00\u4e2a\u5f88\u68d2\u7684\u529f\u80fd\u662f\uff1a\u8fd0\u884c cargo doc --open \u547d\u4ee4\u6765\u6784\u5efa\u6240\u6709\u672c\u5730\u4f9d\u8d56\u63d0\u4f9b\u7684\u6587\u6863\uff0c\u5e76\u5728\u6d4f\u89c8\u5668\u4e2d\u6253\u5f00\u3002 \u4f8b\u5982\uff0c\u5047\u8bbe\u4f60\u5bf9 rand crate \u4e2d\u7684\u5176\u4ed6\u529f\u80fd\u611f\u5174\u8da3\uff0c\u4f60\u53ef\u4ee5\u8fd0\u884c cargo doc --open \u5e76\u70b9\u51fb\u5de6\u4fa7\u5bfc\u822a\u680f\u4e2d\u7684 rand\u3002","title":"\u751f\u6210\u4e00\u4e2a\u79d8\u5bc6\u6570\u5b57"},{"location":"guessing-game/#_5","text":"\u6587\u4ef6\u540d: src/main.rs use rand :: Rng ; use std :: cmp :: Ordering ; // \u4ece\u6807\u51c6\u5e93\u5f15\u5165\u4e86\u4e00\u4e2a\u53eb\u505a std::cmp::Ordering \u7684\u7c7b\u578b\u5230\u4f5c\u7528\u57df\u4e2d\u3002 // Ordering \u4e5f\u662f\u4e00\u4e2a\u679a\u4e3e\uff0c\u4e0d\u8fc7\u5b83\u7684\u6210\u5458\u662f Less\u3001Greater \u548c Equal\u3002 // \u8fd9\u662f\u6bd4\u8f83\u4e24\u4e2a\u503c\u65f6\u53ef\u80fd\u51fa\u73b0\u7684\u4e09\u79cd\u7ed3\u679c\u3002 use std :: io ; fn main () { println! ( \"\u731c\u6570\u6e38\u620f\uff01\uff01\" ); let secret_number = rand :: thread_rng (). gen_range ( 1 ..= 100 ); println! ( \"\u751f\u6210\u7684\u5bc6\u7801\u6570\u5b57\u662f: {secret_number}\" ); println! ( \"\u8bf7\u8f93\u5165\u4e00\u4e2a\u503c:\" ); let mut guess = String :: new (); io :: stdin (). read_line ( & mut guess ). expect ( \"\u8bfb\u6570\u5931\u8d25!\" ); println! ( \"\u4f60\u731c\u6d4b\u7684\u6570\u4e3a: {guess}\" ); match guess . cmp ( & secret_number ){ // cmp \u65b9\u6cd5\u7528\u6765\u6bd4\u8f83\u4e24\u4e2a\u503c\u5e76\u53ef\u4ee5\u5728\u4efb\u4f55\u53ef\u6bd4\u8f83\u7684\u503c\u4e0a\u8c03\u7528\u3002 // \u5b83\u83b7\u53d6\u4e00\u4e2a\u88ab\u6bd4\u8f83\u503c\u7684\u5f15\u7528\uff1a\u8fd9\u91cc\u662f\u628a guess \u4e0e secret_number \u505a\u6bd4\u8f83\u3002 // \u7136\u540e\u5b83\u4f1a\u8fd4\u56de\u4e00\u4e2a\u521a\u624d\u901a\u8fc7 use \u5f15\u5165\u4f5c\u7528\u57df\u7684 Ordering \u679a\u4e3e\u7684\u6210\u5458\u3002 // \u4f7f\u7528\u4e00\u4e2a match \u8868\u8fbe\u5f0f\uff0c\u6839\u636e\u5bf9 guess \u548c secret_number \u8c03\u7528 cmp \u8fd4\u56de\u7684 Ordering \u6210\u5458\u6765\u51b3\u5b9a\u63a5\u4e0b\u6765\u505a\u4ec0\u4e48\u3002 Ordering :: Less => println! ( \"\u592a\u5c0f\u4e86\uff01\" ), Ordering :: Greater => println! ( \"\u592a\u5927\u4e86\uff01\" ), Ordering :: Equal => println! ( \"\u731c\u5bf9\u4e86\uff01\" ), } } \u4e00\u4e2a match \u8868\u8fbe\u5f0f\u7531 \u5206\u652f\uff08arms\uff09 \u6784\u6210\u3002 \u4e00\u4e2a\u5206\u652f\u5305\u542b\u4e00\u4e2a \u6a21\u5f0f\uff08pattern\uff09\u548c\u8868\u8fbe\u5f0f\u5f00\u5934\u7684\u503c\u4e0e\u5206\u652f\u6a21\u5f0f\u76f8\u5339\u914d\u65f6\u5e94\u8be5\u6267\u884c\u7684\u4ee3\u7801\u3002 Rust \u83b7\u53d6\u63d0\u4f9b\u7ed9 match \u7684\u503c\u5e76\u6328\u4e2a\u68c0\u67e5\u6bcf\u4e2a\u5206\u652f\u7684\u6a21\u5f0f\u3002 \u6b64\u65f6\u8fdb\u884c cargo build \u4f1a\u51fa\u73b0\u5982\u4e0b\u9519\u8bef: cargo build Compiling guessing-game v0.1.0 ( /files/rust-example-apps/src/guessing-game ) error [ E0308 ] : mismatched types --> src/main.rs:20:21 | 20 | match guess.cmp ( & secret_number ) { | --- ^^^^^^^^^^^^^^ expected struct ` String ` , found integer | | | arguments to this function are incorrect | = note: expected reference ` & String ` found reference ` & { integer } ` note: associated function defined here For more information about this error, try ` rustc --explain E0308 ` . error: could not compile ` guessing-game ` due to previous error \u9519\u8bef\u7684\u6838\u5fc3\u8868\u660e\u8fd9\u91cc\u6709 \u4e0d\u5339\u914d\u7684\u7c7b\u578b\uff08mismatched types\uff09 \u3002 Rust \u6709\u4e00\u4e2a\u9759\u6001\u5f3a\u7c7b\u578b\u7cfb\u7edf\uff0c\u540c\u65f6\u4e5f\u6709\u7c7b\u578b\u63a8\u65ad\u3002 \u5f53\u6211\u4eec\u5199\u51fa let guess = String::new() \u65f6\uff0cRust \u63a8\u65ad\u51fa guess \u5e94\u8be5\u662f String \u7c7b\u578b\uff0c\u5e76\u4e0d\u9700\u8981\u6211\u4eec\u5199\u51fa\u7c7b\u578b\u3002 \u53e6\u4e00\u65b9\u9762\uff0csecret_number\uff0c\u662f\u6570\u5b57\u7c7b\u578b\u3002\u51e0\u4e2a\u6570\u5b57\u7c7b\u578b\u62e5\u6709 1 \u5230 100 \u4e4b\u95f4\u7684\u503c\uff1a32 \u4f4d\u6570\u5b57 i32\uff1b32 \u4f4d\u65e0\u7b26\u53f7\u6570\u5b57 u32\uff1b64 \u4f4d\u6570\u5b57 i64 \u7b49\u7b49\u3002 Rust \u9ed8\u8ba4\u4f7f\u7528 i32\uff0c\u6240\u4ee5\u5b83\u662f secret_number \u7684\u7c7b\u578b\uff0c\u9664\u975e\u589e\u52a0\u7c7b\u578b\u4fe1\u606f\uff0c\u6216\u4efb\u4f55\u80fd\u8ba9 Rust \u63a8\u65ad\u51fa\u4e0d\u540c\u6570\u503c\u7c7b\u578b\u7684\u4fe1\u606f\u3002 \u8fd9\u91cc\u9519\u8bef\u7684\u539f\u56e0\u5728\u4e8e Rust \u4e0d\u4f1a\u6bd4\u8f83\u5b57\u7b26\u4e32\u7c7b\u578b\u548c\u6570\u5b57\u7c7b\u578b\u3002 \u6240\u4ee5\u6211\u4eec\u5fc5\u987b\u628a\u4ece\u8f93\u5165\u4e2d\u8bfb\u53d6\u5230\u7684 String \u8f6c\u6362\u4e3a\u4e00\u4e2a\u771f\u6b63\u7684\u6570\u5b57\u7c7b\u578b\uff0c\u624d\u597d\u4e0e\u79d8\u5bc6\u6570\u5b57\u8fdb\u884c\u6bd4\u8f83\u3002\u8fd9\u53ef\u4ee5\u901a\u8fc7\u5728 main \u51fd\u6570\u4f53\u4e2d\u589e\u52a0\u5982\u4e0b\u4ee3\u7801\u6765\u5b9e\u73b0\uff1a \u6587\u4ef6\u540d: src/main.rs use rand :: Rng ; use std :: cmp :: Ordering ; use std :: io ; fn main () { println! ( \"\u731c\u6570\u6e38\u620f\uff01\uff01\" ); let secret_number = rand :: thread_rng (). gen_range ( 1 ..= 100 ); println! ( \"\u751f\u6210\u7684\u5bc6\u7801\u6570\u5b57\u662f: {secret_number}\" ); println! ( \"\u8bf7\u8f93\u5165\u4e00\u4e2a\u503c:\" ); let mut guess = String :: new (); io :: stdin (). read_line ( & mut guess ). expect ( \"\u8bfb\u6570\u5931\u8d25!\" ); let guess : u32 = guess . trim (). parse (). expect ( \"\u8bf7\u8f93\u5165\u6570\u5b57!\" ); // \u8fd9\u91cc\u521b\u5efa\u4e86\u4e00\u4e2a\u53eb\u505a guess \u7684\u53d8\u91cf\u3002 // \u4e0d\u8fc7\u7b49\u7b49\uff0c\u4e0d\u662f\u5df2\u7ecf\u6709\u4e86\u4e00\u4e2a\u53eb\u505a guess \u7684\u53d8\u91cf\u4e86\u5417\uff1f // \u786e\u5b9e\u5982\u6b64\uff0c\u4e0d\u8fc7 Rust \u5141\u8bb8\u7528\u4e00\u4e2a\u65b0\u503c\u6765 \u9690\u85cf \uff08shadow\uff09 guess \u4e4b\u524d\u7684\u503c\u3002 // \u8fd9\u4e2a\u529f\u80fd\u5e38\u7528\u5728\u9700\u8981\u8f6c\u6362\u503c\u7c7b\u578b\u4e4b\u7c7b\u7684\u573a\u666f\u3002 // \u5b83\u5141\u8bb8\u6211\u4eec\u590d\u7528 guess \u53d8\u91cf\u7684\u540d\u5b57\uff0c\u800c\u4e0d\u662f\u88ab\u8feb\u521b\u5efa\u4e24\u4e2a\u4e0d\u540c\u53d8\u91cf\uff0c\u8bf8\u5982 guess_str \u548c guess \u4e4b\u7c7b\u3002 // \u5c06\u8fd9\u4e2a\u65b0\u53d8\u91cf\u7ed1\u5b9a\u5230 guess.trim().parse() \u8868\u8fbe\u5f0f\u4e0a\u3002 // \u8868\u8fbe\u5f0f\u4e2d\u7684 guess \u6307\u7684\u662f\u5305\u542b\u8f93\u5165\u7684\u5b57\u7b26\u4e32\u7c7b\u578b guess \u53d8\u91cf\u3002 // String \u5b9e\u4f8b\u7684 trim \u65b9\u6cd5\u4f1a\u53bb\u9664\u5b57\u7b26\u4e32\u5f00\u5934\u548c\u7ed3\u5c3e\u7684\u7a7a\u767d\u5b57\u7b26\uff0c\u6211\u4eec\u5fc5\u987b\u6267\u884c\u6b64\u65b9\u6cd5\u624d\u80fd\u5c06\u5b57\u7b26\u4e32\u4e0e u32 \u6bd4\u8f83\uff0c\u56e0\u4e3a u32 \u53ea\u80fd\u5305\u542b\u6570\u503c\u578b\u6570\u636e\u3002 // \u7528\u6237\u5fc5\u987b\u8f93\u5165 enter \u952e\u624d\u80fd\u8ba9 read_line \u8fd4\u56de\u5e76\u8f93\u5165\u4ed6\u4eec\u7684\u731c\u60f3\uff0c\u8fd9\u5c06\u4f1a\u5728\u5b57\u7b26\u4e32\u4e2d\u589e\u52a0\u4e00\u4e2a\u6362\u884c\uff08newline\uff09\u7b26\u3002 // \u4f8b\u5982\uff0c\u7528\u6237\u8f93\u5165 5 \u5e76\u6309\u4e0b enter, guess \u770b\u8d77\u6765\u50cf\u8fd9\u6837\uff1a5\\n \u6216\u8005 5\\r\\n\u3002 // \\n \u4ee3\u8868 \u201c\u6362\u884c\u201d\uff0c\u56de\u8f66\u952e\uff1b\\r \u4ee3\u8868 \u201c\u56de\u8f66\u201d\uff0c\u56de\u8f66\u952e\u3002 // trim \u65b9\u6cd5\u4f1a\u6d88\u9664 \\n \u6216\u8005 \\r\\n\uff0c\u53ea\u7559\u4e0b 5\u3002 // \u5b57\u7b26\u4e32\u7684 parse \u65b9\u6cd5 \u5c06\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u5176\u4ed6\u7c7b\u578b\u3002 // \u8fd9\u91cc\u7528\u5b83\u6765\u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u503c\u3002\u6211\u4eec\u9700\u8981\u544a\u8bc9 Rust \u5177\u4f53\u7684\u6570\u5b57\u7c7b\u578b\uff0c\u8fd9\u91cc\u901a\u8fc7 let guess: u32 \u6307\u5b9a\u3002 // guess \u540e\u9762\u7684\u5192\u53f7\uff08:\uff09\u544a\u8bc9 Rust \u6211\u4eec\u6307\u5b9a\u4e86\u53d8\u91cf\u7684\u7c7b\u578b\u3002 // Rust \u6709\u4e00\u4e9b\u5185\u5efa\u7684\u6570\u5b57\u7c7b\u578b\uff1bu32 \u662f\u4e00\u4e2a\u65e0\u7b26\u53f7\u7684 32 \u4f4d\u6574\u578b\u3002 // \u5bf9\u4e8e\u4e0d\u5927\u7684\u6b63\u6574\u6570\u6765\u8bf4\uff0c\u5b83\u662f\u4e0d\u9519\u7684\u9ed8\u8ba4\u7c7b\u578b\uff0c\u7b2c\u4e09\u7ae0\u8fd8\u4f1a\u8bb2\u5230\u5176\u4ed6\u6570\u5b57\u7c7b\u578b\u3002 // \u53e6\u5916\uff0c\u7a0b\u5e8f\u4e2d\u7684 u32 \u6ce8\u89e3\u4ee5\u53ca\u4e0e secret_number \u7684\u6bd4\u8f83\uff0c\u610f\u5473\u7740 Rust \u4f1a\u63a8\u65ad\u51fa secret_number \u4e5f\u662f u32 \u7c7b\u578b\u3002 // \u73b0\u5728\u53ef\u4ee5\u4f7f\u7528\u76f8\u540c\u7c7b\u578b\u6bd4\u8f83\u4e24\u4e2a\u503c\u4e86\uff01 // parse \u65b9\u6cd5\u53ea\u6709\u5728\u5b57\u7b26\u903b\u8f91\u4e0a\u53ef\u4ee5\u8f6c\u6362\u4e3a\u6570\u5b57\u7684\u65f6\u5019\u624d\u80fd\u5de5\u4f5c\u6240\u4ee5\u975e\u5e38\u5bb9\u6613\u51fa\u9519\u3002 // \u4f8b\u5982\uff0c\u5b57\u7b26\u4e32\u4e2d\u5305\u542b A\ud83d\udc4d%\uff0c\u5c31\u65e0\u6cd5\u5c06\u5176\u8f6c\u6362\u4e3a\u4e00\u4e2a\u6570\u5b57\u3002 // \u56e0\u6b64\uff0cparse \u65b9\u6cd5\u8fd4\u56de\u4e00\u4e2a Result \u7c7b\u578b\u3002 // \u50cf\u4e4b\u524d \u201c\u4f7f\u7528 Result \u7c7b\u578b\u6765\u5904\u7406\u6f5c\u5728\u7684\u9519\u8bef\u201d \u8ba8\u8bba\u7684 read_line \u65b9\u6cd5\u90a3\u6837\uff0c\u518d\u6b21\u6309\u90e8\u5c31\u73ed\u7684\u7528 expect \u65b9\u6cd5\u5904\u7406\u5373\u53ef\u3002 // \u5982\u679c parse \u4e0d\u80fd\u4ece\u5b57\u7b26\u4e32\u751f\u6210\u4e00\u4e2a\u6570\u5b57\uff0c\u8fd4\u56de\u4e00\u4e2a Result \u7684 Err \u6210\u5458\u65f6\uff0cexpect \u4f1a\u4f7f\u6e38\u620f\u5d29\u6e83\u5e76\u6253\u5370\u9644\u5e26\u7684\u4fe1\u606f\u3002 // \u5982\u679c parse \u6210\u529f\u5730\u5c06\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u4e00\u4e2a\u6570\u5b57\uff0c\u5b83\u4f1a\u8fd4\u56de Result \u7684 Ok \u6210\u5458\uff0c\u7136\u540e expect \u4f1a\u8fd4\u56de Ok \u503c\u4e2d\u7684\u6570\u5b57\u3002 println! ( \"\u4f60\u731c\u6d4b\u7684\u6570\u4e3a: {guess}\" ); match guess . cmp ( & secret_number ) { Ordering :: Less => println! ( \"\u592a\u5c0f\u4e86\uff01\" ), Ordering :: Greater => println! ( \"\u592a\u5927\u4e86\uff01\" ), Ordering :: Equal => println! ( \"\u731c\u5bf9\u4e86\uff01\" ), } }","title":"\u6bd4\u8f83\u731c\u6d4b\u7684\u6570\u5b57\u548c\u79d8\u5bc6\u6570\u5b57"},{"location":"guessing-game/#_6","text":"loop \u5173\u952e\u5b57\u521b\u5efa\u4e86\u4e00\u4e2a\u65e0\u9650\u5faa\u73af\u3002 \u6587\u4ef6\u540d: src/main.rs use rand :: Rng ; use std :: cmp :: Ordering ; use std :: io ; fn main () { println! ( \"\u731c\u6570\u6e38\u620f\uff01\uff01\" ); let secret_number = rand :: thread_rng (). gen_range ( 1 ..= 100 ); println! ( \"\u751f\u6210\u7684\u5bc6\u7801\u6570\u5b57\u662f: {secret_number}\" ); loop { println! ( \"\u8bf7\u8f93\u5165\u4e00\u4e2a\u503c:\" ); let mut guess = String :: new (); io :: stdin (). read_line ( & mut guess ). expect ( \"\u8bfb\u6570\u5931\u8d25!\" ); let guess : u32 = guess . trim (). parse (). expect ( \"\u8bf7\u8f93\u5165\u6570\u5b57!\" ); println! ( \"\u4f60\u731c\u6d4b\u7684\u6570\u4e3a: {guess}\" ); match guess . cmp ( & secret_number ) { Ordering :: Less => println! ( \"\u592a\u5c0f\u4e86\uff01\" ), Ordering :: Greater => println! ( \"\u592a\u5927\u4e86\uff01\" ), Ordering :: Equal => println! ( \"\u731c\u5bf9\u4e86\uff01\" ), } } } \u5982\u4e0a\u6240\u793a\uff0c\u6211\u4eec\u5c06\u63d0\u793a\u7528\u6237\u731c\u6d4b\u4e4b\u540e\u7684\u6240\u6709\u5185\u5bb9\u79fb\u52a8\u5230\u4e86\u5faa\u73af\u4e2d\u3002\u786e\u4fdd loop \u5faa\u73af\u4e2d\u7684\u4ee3\u7801\u591a\u7f29\u8fdb\u56db\u4e2a\u7a7a\u683c\uff0c\u518d\u6b21\u8fd0\u884c\u7a0b\u5e8f\u3002\u6ce8\u610f\u8fd9\u91cc\u6709\u4e00\u4e2a\u65b0\u95ee\u9898\uff0c\u56e0\u4e3a\u7a0b\u5e8f\u5fe0\u5b9e\u5730\u6267\u884c\u4e86\u6211\u4eec\u7684\u8981\u6c42\uff1a\u6c38\u8fdc\u5730\u8bf7\u6c42\u53e6\u4e00\u4e2a\u731c\u6d4b\uff0c\u7528\u6237\u597d\u50cf\u65e0\u6cd5\u9000\u51fa\u554a\uff01 \u7528\u6237\u603b\u80fd\u4f7f\u7528 ctrl-c \u7ec8\u6b62\u7a0b\u5e8f\u3002\u4e0d\u8fc7\u8fd8\u6709\u53e6\u4e00\u4e2a\u65b9\u6cd5\u8df3\u51fa\u65e0\u9650\u5faa\u73af\uff0c\u5c31\u662f \u201c\u6bd4\u8f83\u731c\u6d4b\u4e0e\u79d8\u5bc6\u6570\u5b57\u201d \u90e8\u5206\u63d0\u5230\u7684 parse\uff1a\u5982\u679c\u7528\u6237\u8f93\u5165\u7684\u7b54\u6848\u4e0d\u662f\u4e00\u4e2a\u6570\u5b57\uff0c\u7a0b\u5e8f\u4f1a\u5d29\u6e83\u3002\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u8fd9\u4e00\u70b9\u6765\u9000\u51fa\uff0c\u5982\u4e0b\u6240\u793a\uff1a $ cargo run Compiling guessing_game v0.1.0 ( file:///projects/guessing_game ) Finished dev [ unoptimized + debuginfo ] target ( s ) in 1 .50s Running ` target/debug/guessing_game ` \u731c\u6570\u6e38\u620f\uff01\uff01 \u751f\u6210\u7684\u5bc6\u7801\u6570\u5b57\u662f: 57 \u8bf7\u8f93\u5165\u4e00\u4e2a\u503c: 12 \u4f60\u731c\u6d4b\u7684\u6570\u4e3a: 12 \u592a\u5c0f\u4e86\uff01 \u8bf7\u8f93\u5165\u4e00\u4e2a\u503c: 57 \u4f60\u731c\u6d4b\u7684\u6570\u4e3a: 57 \u731c\u5bf9\u4e86\uff01 \u8bf7\u8f93\u5165\u4e00\u4e2a\u503c: asdf thread 'main' panicked at '\u8bf7\u8f93\u5165\u6570\u5b57!: ParseIntError { kind: InvalidDigit }' , src/main.rs:19:47 note: run with ` RUST_BACKTRACE = 1 ` environment variable to display a backtrace","title":"\u4f7f\u7528\u5faa\u73af\u6765\u5141\u8bb8\u591a\u6b21\u731c\u6d4b"},{"location":"guessing-game/#_7","text":"\u8ba9\u6211\u4eec\u589e\u52a0\u4e00\u4e2a break \u8bed\u53e5\uff0c\u5728\u7528\u6237\u731c\u5bf9\u65f6\u9000\u51fa\u6e38\u620f\uff1a \u6587\u4ef6\u540d: src/main.rs use rand :: Rng ; use std :: cmp :: Ordering ; use std :: io ; fn main () { println! ( \"\u731c\u6570\u6e38\u620f\uff01\uff01\" ); let secret_number = rand :: thread_rng (). gen_range ( 1 ..= 100 ); println! ( \"\u751f\u6210\u7684\u5bc6\u7801\u6570\u5b57\u662f: {secret_number}\" ); loop { println! ( \"\u8bf7\u8f93\u5165\u4e00\u4e2a\u503c:\" ); let mut guess = String :: new (); io :: stdin (). read_line ( & mut guess ). expect ( \"\u8bfb\u6570\u5931\u8d25!\" ); let guess : u32 = guess . trim (). parse (). expect ( \"\u8bf7\u8f93\u5165\u6570\u5b57!\" ); println! ( \"\u4f60\u731c\u6d4b\u7684\u6570\u4e3a: {guess}\" ); match guess . cmp ( & secret_number ) { Ordering :: Less => println! ( \"\u592a\u5c0f\u4e86\uff01\" ), Ordering :: Greater => println! ( \"\u592a\u5927\u4e86\uff01\" ), Ordering :: Equal => { println! ( \"\u731c\u5bf9\u4e86\uff01\" ); break ; } } } } a \u901a\u8fc7\u5728 You win! \u4e4b\u540e\u589e\u52a0\u4e00\u884c break\uff0c\u7528\u6237\u731c\u5bf9\u4e86\u795e\u79d8\u6570\u5b57\u540e\u4f1a\u9000\u51fa\u5faa\u73af\u3002\u9000\u51fa\u5faa\u73af\u4e5f\u610f\u5473\u7740\u9000\u51fa\u7a0b\u5e8f\uff0c\u56e0\u4e3a\u5faa\u73af\u662f main \u7684\u6700\u540e\u4e00\u90e8\u5206\u3002","title":"\u731c\u6d4b\u6b63\u786e\u540e\u9000\u51fa"},{"location":"guessing-game/#_8","text":"\u4e3a\u4e86\u8fdb\u4e00\u6b65\u6539\u5584\u6e38\u620f\u6027\uff0c\u4e0d\u8981\u5728\u7528\u6237\u8f93\u5165\u975e\u6570\u5b57\u65f6\u5d29\u6e83\uff0c\u9700\u8981\u5ffd\u7565\u975e\u6570\u5b57\uff0c\u8ba9\u7528\u6237\u53ef\u4ee5\u7ee7\u7eed\u731c\u6d4b\u3002\u53ef\u4ee5\u901a\u8fc7\u4fee\u6539 guess \u5c06 String \u8f6c\u5316\u4e3a u32 \u90a3\u90e8\u5206\u4ee3\u7801\u6765\u5b9e\u73b0 \u6587\u4ef6\u540d: src/main.rs use rand :: Rng ; use std :: cmp :: Ordering ; use std :: io ; fn main () { println! ( \"\u731c\u6570\u6e38\u620f\uff01\uff01\" ); let secret_number = rand :: thread_rng (). gen_range ( 1 ..= 100 ); println! ( \"\u751f\u6210\u7684\u5bc6\u7801\u6570\u5b57\u662f: {secret_number}\" ); loop { println! ( \"\u8bf7\u8f93\u5165\u4e00\u4e2a\u503c:\" ); let mut guess = String :: new (); io :: stdin (). read_line ( & mut guess ). expect ( \"\u8bfb\u6570\u5931\u8d25!\" ); let guess : u32 = match guess . trim (). parse () { Ok ( num ) => num , Err ( _ ) => continue , }; // \u5c06 expect \u8c03\u7528\u6362\u6210 match \u8bed\u53e5\uff0c\u4ee5\u4ece\u9047\u5230\u9519\u8bef\u5c31\u5d29\u6e83\u8f6c\u6362\u4e3a\u5904\u7406\u9519\u8bef\u3002 // \u987b\u77e5 parse \u8fd4\u56de\u4e00\u4e2a Result \u7c7b\u578b\uff0c\u800c Result \u662f\u4e00\u4e2a\u62e5\u6709 Ok \u6216 Err \u6210\u5458\u7684\u679a\u4e3e\u3002 // \u8fd9\u91cc\u4f7f\u7528\u7684 match \u8868\u8fbe\u5f0f\uff0c\u548c\u5904\u7406 cmp \u65b9\u6cd5\u8fd4\u56de Ordering \u65f6\u7528\u7684\u4e00\u6837\u3002 // \u5982\u679c parse \u80fd\u591f\u6210\u529f\u7684\u5c06\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u4e00\u4e2a\u6570\u5b57\uff0c\u5b83\u4f1a\u8fd4\u56de\u4e00\u4e2a\u5305\u542b\u7ed3\u679c\u6570\u5b57\u7684 Ok\u3002 // \u8fd9\u4e2a Ok \u503c\u4e0e match \u7b2c\u4e00\u4e2a\u5206\u652f\u7684\u6a21\u5f0f\u76f8\u5339\u914d\uff0c\u8be5\u5206\u652f\u5bf9\u5e94\u7684\u52a8\u4f5c\u8fd4\u56de Ok \u503c\u4e2d\u7684\u6570\u5b57 num\uff0c // \u6700\u540e\u5982\u613f\u53d8\u6210\u65b0\u521b\u5efa\u7684 guess \u53d8\u91cf\u3002 // \u5982\u679c parse \u4e0d\u80fd\u5c06\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u4e00\u4e2a\u6570\u5b57\uff0c\u5b83\u4f1a\u8fd4\u56de\u4e00\u4e2a\u5305\u542b\u66f4\u591a\u9519\u8bef\u4fe1\u606f\u7684 Err\u3002 // Err \u503c\u4e0d\u80fd\u5339\u914d\u7b2c\u4e00\u4e2a match \u5206\u652f\u7684 Ok(num) \u6a21\u5f0f\uff0c\u4f46\u662f\u4f1a\u5339\u914d\u7b2c\u4e8c\u4e2a\u5206\u652f\u7684 Err(_) \u6a21\u5f0f\uff1a // _ \u662f\u4e00\u4e2a\u901a\u914d\u7b26\u503c\uff0c\u672c\u4f8b\u4e2d\u7528\u6765\u5339\u914d\u6240\u6709 Err \u503c\uff0c\u4e0d\u7ba1\u5176\u4e2d\u6709\u4f55\u79cd\u4fe1\u606f\u3002 // \u6240\u4ee5\u7a0b\u5e8f\u4f1a\u6267\u884c\u7b2c\u4e8c\u4e2a\u5206\u652f\u7684\u52a8\u4f5c\uff0ccontinue \u610f\u5473\u7740\u8fdb\u5165 loop \u7684\u4e0b\u4e00\u6b21\u5faa\u73af\uff0c\u8bf7\u6c42\u53e6\u4e00\u4e2a\u731c\u6d4b\u3002 // \u8fd9\u6837\u7a0b\u5e8f\u5c31\u6709\u6548\u7684\u5ffd\u7565\u4e86 parse \u53ef\u80fd\u9047\u5230\u7684\u6240\u6709\u9519\u8bef\uff01 println! ( \"\u4f60\u731c\u6d4b\u7684\u6570\u4e3a: {guess}\" ); match guess . cmp ( & secret_number ) { Ordering :: Less => println! ( \"\u592a\u5c0f\u4e86\uff01\" ), Ordering :: Greater => println! ( \"\u592a\u5927\u4e86\uff01\" ), Ordering :: Equal => { println! ( \"\u731c\u5bf9\u4e86\uff01\" ); break ; } } } } \u73b0\u5728\u4e07\u4e8b\u4ff1\u5907\uff0c\u53ea\u9700\u8fd0\u884c cargo run\uff1a $ cargo run Compiling guessing_game v0.1.0 ( file:///projects/guessing_game ) Finished dev [ unoptimized + debuginfo ] target ( s ) in 4 .45s Running ` target/debug/guessing_game ` \u731c\u6570\u6e38\u620f\uff01\uff01 \u751f\u6210\u7684\u5bc6\u7801\u6570\u5b57\u662f: 66 \u8bf7\u8f93\u5165\u4e00\u4e2a\u503c: 12d \u8bf7\u8f93\u5165\u4e00\u4e2a\u503c: 12 \u4f60\u731c\u6d4b\u7684\u6570\u4e3a: 12 \u592a\u5c0f\u4e86\uff01 \u8bf7\u8f93\u5165\u4e00\u4e2a\u503c: 66 \u4f60\u731c\u6d4b\u7684\u6570\u4e3a: 66 \u731c\u5bf9\u4e86\uff01","title":"\u5904\u7406\u65e0\u6548\u8f93\u5165"},{"location":"guessing-game/#_9","text":"\u592a\u68d2\u4e86\uff01\u518d\u6709\u6700\u540e\u4e00\u4e2a\u5c0f\u7684\u4fee\u6539\uff0c\u5c31\u80fd\u5b8c\u6210\u731c\u731c\u770b\u6e38\u620f\u4e86\uff1a\u8fd8\u8bb0\u5f97\u7a0b\u5e8f\u4f9d\u7136\u4f1a\u6253\u5370\u51fa\u79d8\u5bc6\u6570\u5b57\u3002\u5728\u6d4b\u8bd5\u65f6\u8fd8\u597d\uff0c\u4f46\u6b63\u5f0f\u53d1\u5e03\u65f6\u4f1a\u6bc1\u4e86\u6e38\u620f\u3002\u5220\u6389\u6253\u5370\u79d8\u5bc6\u6570\u5b57\u7684 println!\u3002 \u6700\u7ec8\u4ee3\u7801\uff1a \u6587\u4ef6\u540d: src/main.rs use rand :: Rng ; use std :: cmp :: Ordering ; use std :: io ; fn main () { println! ( \"\u731c\u6570\u6e38\u620f\uff01\uff01\" ); let secret_number = rand :: thread_rng (). gen_range ( 1 ..= 100 ); loop { println! ( \"\u8bf7\u8f93\u5165\u4e00\u4e2a\u503c:\" ); let mut guess = String :: new (); io :: stdin (). read_line ( & mut guess ). expect ( \"\u8bfb\u6570\u5931\u8d25!\" ); let guess : u32 = match guess . trim (). parse () { Ok ( num ) => num , Err ( _ ) => continue , }; println! ( \"\u4f60\u731c\u6d4b\u7684\u6570\u4e3a: {guess}\" ); match guess . cmp ( & secret_number ) { Ordering :: Less => println! ( \"\u592a\u5c0f\u4e86\uff01\" ), Ordering :: Greater => println! ( \"\u592a\u5927\u4e86\uff01\" ), Ordering :: Equal => { println! ( \"\u731c\u5bf9\u4e86\uff01\" ); break ; } } } }","title":"\u6700\u7ec8\u7248\u672c"},{"location":"hello-cargo/","text":"Hello Cargo Cargo \u662f Rust \u7684\u6784\u5efa\u7cfb\u7edf\u548c\u5305\u7ba1\u7406\u5668\u3002 \u5b89\u88c5cargo \u5b98\u65b9\u81ea\u5e26\u7684 \u5b89\u88c5 \u90e8\u5206\u5df2\u7ecf\u5b89\u88c5\u4e86Cargo \u67e5\u770b\u7248\u672c $ cargo --version cargo 1 .66.0 ( d65d197ad 2022 -11-15 ) \u4f7f\u7528cargo\u521b\u5efa\u9879\u76ee cargo new Cargo \u5c06\u4ee3\u7801\u653e\u5728 src \u76ee\u5f55\uff0c\u540c\u65f6\u9879\u76ee\u6839\u76ee\u5f55\u5305\u542b\u4e00\u4e2a Cargo.toml \u914d\u7f6e\u6587\u4ef6\u3002 $ cargo new hello-cargo $ cd hello-cargo $ ls Cargo.toml src Cargo.toml \u914d\u7f6e\u6587\u4ef6\uff0c \u5982\u4e0b: # \u4e00\u4e2a\u7247\u6bb5\uff08section\uff09\u6807\u9898\uff0c\u8868\u660e\u4e0b\u9762\u7684\u8bed\u53e5\u7528\u6765\u914d\u7f6e\u4e00\u4e2a\u5305 [package] name = \"hello-cargo\" # \u9879\u76ee\u7684\u540d\u79f0 version = \"0.1.0\" # \u9879\u76ee\u7684\u7248\u672c edition = \"2021\" # Rust \u7248\u672c # See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html # \u7f57\u5217\u9879\u76ee\u4f9d\u8d56\u7684\u4ee3\u7801\u5305, \u4ee3\u7801\u5305\u88ab\u79f0\u4e3a crates\u3002\u8fd9\u4e2a\u9879\u76ee\u5e76\u4e0d\u9700\u8981\u5176\u4ed6\u7684 crate [dependencies] TOML \u683c\u5f0f\u662f Cargo \u914d\u7f6e\u6587\u4ef6\u7684\u683c\u5f0f\u3002 edition \u7684\u503c\u53c2\u8003 \u9644\u5f55E src \u9879\u76ee\u6e90\u6587\u4ef6\u5b58\u653e\u5728 src \u76ee\u5f55\u4e2d\u3002 \u9879\u76ee\u6839\u76ee\u5f55\u53ea\u5b58\u653e README \u3001 license \u4fe1\u606f\u3001 \u914d\u7f6e\u6587\u4ef6 \u548c \u5176\u4ed6\u8ddf\u4ee3\u7801\u65e0\u5173\u7684\u6587\u4ef6 \u3002 src/main.rs Cargo \u4e3a\u751f\u6210\u7684\u4e00\u4e2a \u201cHello, world!\u201d \u7a0b\u5e8f fn main () { println! ( \"Hello, world!\" ); } \u6784\u5efa\u5e76\u8fd0\u884c Cargo \u9879\u76ee \u901a\u8fc7 Cargo \u6784\u5efa\u548c\u8fd0\u884c \u201cHello, world!\u201d \u7a0b\u5e8f cargo build # \u5728hello-cargo\u76ee\u5f55\u6267\u884c $ cargo build Compiling hello_cargo v0.1.0 ( file:///projects/hello_cargo ) Finished dev [ unoptimized + debuginfo ] target ( s ) in 2 .85 secs $ ls Cargo.lock Cargo.toml src target # \u4f1a\u521b\u5efa\u4e00\u4e2a\u53ef\u6267\u884c\u6587\u4ef6 target/debug/hello-cargo, \u800c\u4e0d\u662f\u653e\u5728\u76ee\u524d\u76ee\u5f55\u4e0b\u3002 # \u7531\u4e8e\u9ed8\u8ba4\u7684\u6784\u5efa\u65b9\u6cd5\u662f\u8c03\u8bd5\u6784\u5efa\uff08debug build\uff09\uff0cCargo \u4f1a\u5c06\u53ef\u6267\u884c\u6587\u4ef6\u653e\u5728\u540d\u4e3a debug \u7684\u76ee\u5f55\u4e2d\u3002 \u8fd0\u884c\u53ef\u6267\u884c\u6587\u4ef6: $ ./target/debug/hello-cargo Hello, world! \u9996\u6b21\u8fd0\u884c cargo build \u65f6\uff0c\u4e5f\u4f1a\u4f7f Cargo \u5728\u9879\u76ee\u6839\u76ee\u5f55\u521b\u5efa\u4e00\u4e2a\u65b0\u6587\u4ef6\uff1a Cargo.lock \u3002\u8fd9\u4e2a\u6587\u4ef6\u8bb0\u5f55\u9879\u76ee\u4f9d\u8d56\u7684\u5b9e\u9645\u7248\u672c\u3002\u8fd9\u4e2a\u9879\u76ee\u5e76\u6ca1\u6709\u4f9d\u8d56\uff0c\u6240\u4ee5\u5176\u5185\u5bb9\u6bd4\u8f83\u5c11\u3002\u81ea\u5df1\u6c38\u8fdc\u4e5f\u4e0d\u9700\u8981\u78b0\u8fd9\u4e2a\u6587\u4ef6\uff0c\u8ba9 Cargo \u5904\u7406\u5b83\u5c31\u884c\u4e86\u3002 cargo run \u53ef\u4ee5\u4f7f\u7528 cargo run \u5728\u4e00\u4e2a\u547d\u4ee4\u4e2d\u540c\u65f6\u7f16\u8bd1\u5e76\u8fd0\u884c\u751f\u6210\u7684\u53ef\u6267\u884c\u6587\u4ef6\uff1a $ cargo run Finished dev [ unoptimized + debuginfo ] target ( s ) in 0 .00s Running ` target/debug/hello-cargo ` Hello, world! Cargo \u53d1\u73b0\u6587\u4ef6\u5e76\u6ca1\u6709\u88ab\u6539\u53d8\uff0c\u6240\u4ee5\u5b83\u5e76\u6ca1\u6709\u91cd\u65b0\u7f16\u8bd1\uff0c\u800c\u662f\u76f4\u63a5\u8fd0\u884c\u4e86\u53ef\u6267\u884c\u6587\u4ef6\u3002 \u5982\u679c\u4fee\u6539\u4e86\u6e90\u6587\u4ef6\u7684\u8bdd\uff0cCargo \u4f1a\u5728\u8fd0\u884c\u4e4b\u524d\u91cd\u65b0\u6784\u5efa\u9879\u76ee\uff0c\u5e76\u4f1a\u51fa\u73b0\u50cf\u8fd9\u6837\u7684\u8f93\u51fa\uff1a $ cargo run Compiling hello-cargo v0.1.0 ( file:///projects/hello_cargo ) Finished dev [ unoptimized + debuginfo ] target ( s ) in 0 .33 secs Running ` target/debug/hello_cargo ` Hello, world! cargo check \u8be5\u547d\u4ee4\u5feb\u901f\u68c0\u67e5\u4ee3\u7801\u786e\u4fdd\u5176\u53ef\u4ee5\u7f16\u8bd1\uff0c\u4f46\u5e76\u4e0d\u4ea7\u751f\u53ef\u6267\u884c\u6587\u4ef6: $ cargo check Checking hello_cargo v0.1.0 ( file:///projects/hello_cargo ) Finished dev [ unoptimized + debuginfo ] target ( s ) in 0 .32 secs \u4e3a\u4ec0\u4e48\u4f60\u4f1a\u4e0d\u9700\u8981\u53ef\u6267\u884c\u6587\u4ef6\u5462\uff1f \u901a\u5e38 cargo check \u8981\u6bd4 cargo build \u5feb\u5f97\u591a\uff0c\u56e0\u4e3a\u5b83\u7701\u7565\u4e86\u751f\u6210\u53ef\u6267\u884c\u6587\u4ef6\u7684\u6b65\u9aa4\u3002 \u5982\u679c\u4f60\u5728\u7f16\u5199\u4ee3\u7801\u65f6\u6301\u7eed\u7684\u8fdb\u884c\u68c0\u67e5\uff0c cargo check \u53ef\u4ee5\u8ba9\u4f60\u5feb\u901f\u4e86\u89e3\u73b0\u5728\u7684\u4ee3\u7801\u80fd\u4e0d\u80fd\u6b63\u5e38\u901a\u8fc7\u7f16\u8bd1\uff01 \u4e3a\u6b64\u5f88\u591a Rustaceans \u7f16\u5199\u4ee3\u7801\u65f6\u5b9a\u671f\u8fd0\u884c cargo check \u786e\u4fdd\u5b83\u4eec\u53ef\u4ee5\u7f16\u8bd1\u3002 \u5f53\u51c6\u5907\u597d\u4f7f\u7528\u53ef\u6267\u884c\u6587\u4ef6\u65f6\u624d\u8fd0\u884c cargo build \u3002 \u5176\u4ed6 git\u4ed3\u5e93 Cargo\u521b\u5efa\u9879\u76ee\u65f6\uff0c\u4f1a\u521d\u59cb\u5316\u4e00\u4e2a git \u4ed3\u5e93\uff0c\u4ee5\u53ca\u4e00\u4e2a .gitignore \u6587\u4ef6\u3002\u5982\u679c\u5728\u4e00\u4e2a\u5df2\u7ecf\u5b58\u5728\u7684 git \u4ed3\u5e93\u4e2d\u8fd0\u884c cargo new \uff0c\u5219\u8fd9\u4e9b git \u76f8\u5173\u6587\u4ef6\u5219\u4e0d\u4f1a\u751f\u6210\uff1b\u53ef\u4ee5\u901a\u8fc7\u8fd0\u884c cargo new --vcs=git \u6765\u8986\u76d6\u8fd9\u4e9b\u884c\u4e3a\u3002 \u53d1\u5e03\uff08release\uff09\u6784\u5efa \u5f53\u9879\u76ee\u6700\u7ec8\u51c6\u5907\u597d\u53d1\u5e03\u65f6\uff0c\u53ef\u4ee5\u4f7f\u7528 cargo build --release \u6765\u4f18\u5316\u7f16\u8bd1\u9879\u76ee\u3002 \u8fd9\u4f1a\u5728 target/release \u800c\u4e0d\u662f target/debug \u4e0b\u751f\u6210\u53ef\u6267\u884c\u6587\u4ef6\u3002 \u8fd9\u4e9b\u4f18\u5316\u53ef\u4ee5\u8ba9 Rust \u4ee3\u7801\u8fd0\u884c\u7684\u66f4\u5feb\uff0c\u4e0d\u8fc7\u542f\u7528\u8fd9\u4e9b\u4f18\u5316\u4e5f\u9700\u8981\u6d88\u8017\u66f4\u957f\u7684\u7f16\u8bd1\u65f6\u95f4\u3002 \u8fd9\u4e5f\u5c31\u662f\u4e3a\u4ec0\u4e48\u4f1a\u6709\u4e24\u79cd\u4e0d\u540c\u7684\u914d\u7f6e\uff1a \u4e00\u79cd\u662f\u4e3a\u4e86\u5f00\u53d1\uff0c\u4f60\u9700\u8981\u7ecf\u5e38\u5feb\u901f\u91cd\u65b0\u6784\u5efa\uff1b \u53e6\u4e00\u79cd\u662f\u4e3a\u7528\u6237\u6784\u5efa\u6700\u7ec8\u7a0b\u5e8f\uff0c\u5b83\u4eec\u4e0d\u4f1a\u7ecf\u5e38\u91cd\u65b0\u6784\u5efa\uff0c\u5e76\u4e14\u5e0c\u671b\u7a0b\u5e8f\u8fd0\u884c\u5f97\u8d8a\u5feb\u8d8a\u597d\u3002 \u5982\u679c\u4f60\u5728\u6d4b\u8bd5\u4ee3\u7801\u7684\u8fd0\u884c\u65f6\u95f4\uff0c\u8bf7\u786e\u4fdd\u8fd0\u884c cargo build --release \u5e76\u4f7f\u7528 target/release \u4e0b\u7684\u53ef\u6267\u884c\u6587\u4ef6\u8fdb\u884c\u6d4b\u8bd5\u3002 \u628a Cargo \u5f53\u4f5c\u4e60\u60ef \u5bf9\u4e8e\u7b80\u5355\u9879\u76ee\uff0c Cargo \u5e76\u4e0d\u6bd4 rustc \u63d0\u4f9b\u4e86\u66f4\u591a\u7684\u4f18\u52bf\uff0c\u4e0d\u8fc7\u968f\u7740\u5f00\u53d1\u7684\u6df1\u5165\uff0c\u7ec8\u5c06\u8bc1\u660e\u5176\u4ef7\u503c\u3002 \u4e00\u65e6\u7a0b\u5e8f\u58ee\u5927\u5230\u7531\u591a\u4e2a\u6587\u4ef6\u7ec4\u6210\uff0c\u4ea6\u6216\u8005\u662f\u9700\u8981\u5176\u4ed6\u7684\u4f9d\u8d56\uff0c\u8ba9 Cargo \u534f\u8c03\u6784\u5efa\u8fc7\u7a0b\u5c31\u4f1a\u7b80\u5355\u5f97\u591a\u3002 \u5373\u4fbf hello_cargo \u9879\u76ee\u5341\u5206\u7b80\u5355\uff0c\u5b83\u73b0\u5728\u4e5f\u4f7f\u7528\u4e86\u5f88\u591a\u5728\u4f60\u4e4b\u540e\u7684 Rust \u751f\u6daf\u5c06\u4f1a\u7528\u5230\u7684\u5b9e\u7528\u5de5\u5177\u3002 \u5176\u5b9e\uff0c\u8981\u5728\u4efb\u4f55\u5df2\u5b58\u5728\u7684\u9879\u76ee\u4e0a\u5de5\u4f5c\u65f6\uff0c\u53ef\u4ee5\u4f7f\u7528\u5982\u4e0b\u547d\u4ee4\u901a\u8fc7 Git \u68c0\u51fa\u4ee3\u7801\uff0c\u79fb\u52a8\u5230\u8be5\u9879\u76ee\u76ee\u5f55\u5e76\u6784\u5efa\uff1a git clone example.org/someproject cd someproject cargo build \u5173\u4e8e\u66f4\u591a Cargo \u7684\u4fe1\u606f\uff0c\u8bf7\u67e5\u9605 \u5176\u6587\u6863 \u3002","title":"Hello Cargo"},{"location":"hello-cargo/#hello-cargo","text":"Cargo \u662f Rust \u7684\u6784\u5efa\u7cfb\u7edf\u548c\u5305\u7ba1\u7406\u5668\u3002","title":"Hello Cargo"},{"location":"hello-cargo/#cargo","text":"\u5b98\u65b9\u81ea\u5e26\u7684 \u5b89\u88c5 \u90e8\u5206\u5df2\u7ecf\u5b89\u88c5\u4e86Cargo","title":"\u5b89\u88c5cargo"},{"location":"hello-cargo/#_1","text":"$ cargo --version cargo 1 .66.0 ( d65d197ad 2022 -11-15 )","title":"\u67e5\u770b\u7248\u672c"},{"location":"hello-cargo/#cargo_1","text":"","title":"\u4f7f\u7528cargo\u521b\u5efa\u9879\u76ee"},{"location":"hello-cargo/#cargo-new","text":"Cargo \u5c06\u4ee3\u7801\u653e\u5728 src \u76ee\u5f55\uff0c\u540c\u65f6\u9879\u76ee\u6839\u76ee\u5f55\u5305\u542b\u4e00\u4e2a Cargo.toml \u914d\u7f6e\u6587\u4ef6\u3002 $ cargo new hello-cargo $ cd hello-cargo $ ls Cargo.toml src","title":"cargo new"},{"location":"hello-cargo/#cargotoml","text":"\u914d\u7f6e\u6587\u4ef6\uff0c \u5982\u4e0b: # \u4e00\u4e2a\u7247\u6bb5\uff08section\uff09\u6807\u9898\uff0c\u8868\u660e\u4e0b\u9762\u7684\u8bed\u53e5\u7528\u6765\u914d\u7f6e\u4e00\u4e2a\u5305 [package] name = \"hello-cargo\" # \u9879\u76ee\u7684\u540d\u79f0 version = \"0.1.0\" # \u9879\u76ee\u7684\u7248\u672c edition = \"2021\" # Rust \u7248\u672c # See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html # \u7f57\u5217\u9879\u76ee\u4f9d\u8d56\u7684\u4ee3\u7801\u5305, \u4ee3\u7801\u5305\u88ab\u79f0\u4e3a crates\u3002\u8fd9\u4e2a\u9879\u76ee\u5e76\u4e0d\u9700\u8981\u5176\u4ed6\u7684 crate [dependencies] TOML \u683c\u5f0f\u662f Cargo \u914d\u7f6e\u6587\u4ef6\u7684\u683c\u5f0f\u3002 edition \u7684\u503c\u53c2\u8003 \u9644\u5f55E","title":"Cargo.toml"},{"location":"hello-cargo/#src","text":"\u9879\u76ee\u6e90\u6587\u4ef6\u5b58\u653e\u5728 src \u76ee\u5f55\u4e2d\u3002 \u9879\u76ee\u6839\u76ee\u5f55\u53ea\u5b58\u653e README \u3001 license \u4fe1\u606f\u3001 \u914d\u7f6e\u6587\u4ef6 \u548c \u5176\u4ed6\u8ddf\u4ee3\u7801\u65e0\u5173\u7684\u6587\u4ef6 \u3002","title":"src"},{"location":"hello-cargo/#srcmainrs","text":"Cargo \u4e3a\u751f\u6210\u7684\u4e00\u4e2a \u201cHello, world!\u201d \u7a0b\u5e8f fn main () { println! ( \"Hello, world!\" ); }","title":"src/main.rs"},{"location":"hello-cargo/#cargo_2","text":"\u901a\u8fc7 Cargo \u6784\u5efa\u548c\u8fd0\u884c \u201cHello, world!\u201d \u7a0b\u5e8f","title":"\u6784\u5efa\u5e76\u8fd0\u884c Cargo \u9879\u76ee"},{"location":"hello-cargo/#cargo-build","text":"# \u5728hello-cargo\u76ee\u5f55\u6267\u884c $ cargo build Compiling hello_cargo v0.1.0 ( file:///projects/hello_cargo ) Finished dev [ unoptimized + debuginfo ] target ( s ) in 2 .85 secs $ ls Cargo.lock Cargo.toml src target # \u4f1a\u521b\u5efa\u4e00\u4e2a\u53ef\u6267\u884c\u6587\u4ef6 target/debug/hello-cargo, \u800c\u4e0d\u662f\u653e\u5728\u76ee\u524d\u76ee\u5f55\u4e0b\u3002 # \u7531\u4e8e\u9ed8\u8ba4\u7684\u6784\u5efa\u65b9\u6cd5\u662f\u8c03\u8bd5\u6784\u5efa\uff08debug build\uff09\uff0cCargo \u4f1a\u5c06\u53ef\u6267\u884c\u6587\u4ef6\u653e\u5728\u540d\u4e3a debug \u7684\u76ee\u5f55\u4e2d\u3002 \u8fd0\u884c\u53ef\u6267\u884c\u6587\u4ef6: $ ./target/debug/hello-cargo Hello, world! \u9996\u6b21\u8fd0\u884c cargo build \u65f6\uff0c\u4e5f\u4f1a\u4f7f Cargo \u5728\u9879\u76ee\u6839\u76ee\u5f55\u521b\u5efa\u4e00\u4e2a\u65b0\u6587\u4ef6\uff1a Cargo.lock \u3002\u8fd9\u4e2a\u6587\u4ef6\u8bb0\u5f55\u9879\u76ee\u4f9d\u8d56\u7684\u5b9e\u9645\u7248\u672c\u3002\u8fd9\u4e2a\u9879\u76ee\u5e76\u6ca1\u6709\u4f9d\u8d56\uff0c\u6240\u4ee5\u5176\u5185\u5bb9\u6bd4\u8f83\u5c11\u3002\u81ea\u5df1\u6c38\u8fdc\u4e5f\u4e0d\u9700\u8981\u78b0\u8fd9\u4e2a\u6587\u4ef6\uff0c\u8ba9 Cargo \u5904\u7406\u5b83\u5c31\u884c\u4e86\u3002","title":"cargo build"},{"location":"hello-cargo/#cargo-run","text":"\u53ef\u4ee5\u4f7f\u7528 cargo run \u5728\u4e00\u4e2a\u547d\u4ee4\u4e2d\u540c\u65f6\u7f16\u8bd1\u5e76\u8fd0\u884c\u751f\u6210\u7684\u53ef\u6267\u884c\u6587\u4ef6\uff1a $ cargo run Finished dev [ unoptimized + debuginfo ] target ( s ) in 0 .00s Running ` target/debug/hello-cargo ` Hello, world! Cargo \u53d1\u73b0\u6587\u4ef6\u5e76\u6ca1\u6709\u88ab\u6539\u53d8\uff0c\u6240\u4ee5\u5b83\u5e76\u6ca1\u6709\u91cd\u65b0\u7f16\u8bd1\uff0c\u800c\u662f\u76f4\u63a5\u8fd0\u884c\u4e86\u53ef\u6267\u884c\u6587\u4ef6\u3002 \u5982\u679c\u4fee\u6539\u4e86\u6e90\u6587\u4ef6\u7684\u8bdd\uff0cCargo \u4f1a\u5728\u8fd0\u884c\u4e4b\u524d\u91cd\u65b0\u6784\u5efa\u9879\u76ee\uff0c\u5e76\u4f1a\u51fa\u73b0\u50cf\u8fd9\u6837\u7684\u8f93\u51fa\uff1a $ cargo run Compiling hello-cargo v0.1.0 ( file:///projects/hello_cargo ) Finished dev [ unoptimized + debuginfo ] target ( s ) in 0 .33 secs Running ` target/debug/hello_cargo ` Hello, world!","title":"cargo run"},{"location":"hello-cargo/#cargo-check","text":"\u8be5\u547d\u4ee4\u5feb\u901f\u68c0\u67e5\u4ee3\u7801\u786e\u4fdd\u5176\u53ef\u4ee5\u7f16\u8bd1\uff0c\u4f46\u5e76\u4e0d\u4ea7\u751f\u53ef\u6267\u884c\u6587\u4ef6: $ cargo check Checking hello_cargo v0.1.0 ( file:///projects/hello_cargo ) Finished dev [ unoptimized + debuginfo ] target ( s ) in 0 .32 secs \u4e3a\u4ec0\u4e48\u4f60\u4f1a\u4e0d\u9700\u8981\u53ef\u6267\u884c\u6587\u4ef6\u5462\uff1f \u901a\u5e38 cargo check \u8981\u6bd4 cargo build \u5feb\u5f97\u591a\uff0c\u56e0\u4e3a\u5b83\u7701\u7565\u4e86\u751f\u6210\u53ef\u6267\u884c\u6587\u4ef6\u7684\u6b65\u9aa4\u3002 \u5982\u679c\u4f60\u5728\u7f16\u5199\u4ee3\u7801\u65f6\u6301\u7eed\u7684\u8fdb\u884c\u68c0\u67e5\uff0c cargo check \u53ef\u4ee5\u8ba9\u4f60\u5feb\u901f\u4e86\u89e3\u73b0\u5728\u7684\u4ee3\u7801\u80fd\u4e0d\u80fd\u6b63\u5e38\u901a\u8fc7\u7f16\u8bd1\uff01 \u4e3a\u6b64\u5f88\u591a Rustaceans \u7f16\u5199\u4ee3\u7801\u65f6\u5b9a\u671f\u8fd0\u884c cargo check \u786e\u4fdd\u5b83\u4eec\u53ef\u4ee5\u7f16\u8bd1\u3002 \u5f53\u51c6\u5907\u597d\u4f7f\u7528\u53ef\u6267\u884c\u6587\u4ef6\u65f6\u624d\u8fd0\u884c cargo build \u3002","title":"cargo check"},{"location":"hello-cargo/#_2","text":"","title":"\u5176\u4ed6"},{"location":"hello-cargo/#git","text":"Cargo\u521b\u5efa\u9879\u76ee\u65f6\uff0c\u4f1a\u521d\u59cb\u5316\u4e00\u4e2a git \u4ed3\u5e93\uff0c\u4ee5\u53ca\u4e00\u4e2a .gitignore \u6587\u4ef6\u3002\u5982\u679c\u5728\u4e00\u4e2a\u5df2\u7ecf\u5b58\u5728\u7684 git \u4ed3\u5e93\u4e2d\u8fd0\u884c cargo new \uff0c\u5219\u8fd9\u4e9b git \u76f8\u5173\u6587\u4ef6\u5219\u4e0d\u4f1a\u751f\u6210\uff1b\u53ef\u4ee5\u901a\u8fc7\u8fd0\u884c cargo new --vcs=git \u6765\u8986\u76d6\u8fd9\u4e9b\u884c\u4e3a\u3002","title":"git\u4ed3\u5e93"},{"location":"hello-cargo/#release","text":"\u5f53\u9879\u76ee\u6700\u7ec8\u51c6\u5907\u597d\u53d1\u5e03\u65f6\uff0c\u53ef\u4ee5\u4f7f\u7528 cargo build --release \u6765\u4f18\u5316\u7f16\u8bd1\u9879\u76ee\u3002 \u8fd9\u4f1a\u5728 target/release \u800c\u4e0d\u662f target/debug \u4e0b\u751f\u6210\u53ef\u6267\u884c\u6587\u4ef6\u3002 \u8fd9\u4e9b\u4f18\u5316\u53ef\u4ee5\u8ba9 Rust \u4ee3\u7801\u8fd0\u884c\u7684\u66f4\u5feb\uff0c\u4e0d\u8fc7\u542f\u7528\u8fd9\u4e9b\u4f18\u5316\u4e5f\u9700\u8981\u6d88\u8017\u66f4\u957f\u7684\u7f16\u8bd1\u65f6\u95f4\u3002 \u8fd9\u4e5f\u5c31\u662f\u4e3a\u4ec0\u4e48\u4f1a\u6709\u4e24\u79cd\u4e0d\u540c\u7684\u914d\u7f6e\uff1a \u4e00\u79cd\u662f\u4e3a\u4e86\u5f00\u53d1\uff0c\u4f60\u9700\u8981\u7ecf\u5e38\u5feb\u901f\u91cd\u65b0\u6784\u5efa\uff1b \u53e6\u4e00\u79cd\u662f\u4e3a\u7528\u6237\u6784\u5efa\u6700\u7ec8\u7a0b\u5e8f\uff0c\u5b83\u4eec\u4e0d\u4f1a\u7ecf\u5e38\u91cd\u65b0\u6784\u5efa\uff0c\u5e76\u4e14\u5e0c\u671b\u7a0b\u5e8f\u8fd0\u884c\u5f97\u8d8a\u5feb\u8d8a\u597d\u3002 \u5982\u679c\u4f60\u5728\u6d4b\u8bd5\u4ee3\u7801\u7684\u8fd0\u884c\u65f6\u95f4\uff0c\u8bf7\u786e\u4fdd\u8fd0\u884c cargo build --release \u5e76\u4f7f\u7528 target/release \u4e0b\u7684\u53ef\u6267\u884c\u6587\u4ef6\u8fdb\u884c\u6d4b\u8bd5\u3002","title":"\u53d1\u5e03\uff08release\uff09\u6784\u5efa"},{"location":"hello-cargo/#cargo_3","text":"\u5bf9\u4e8e\u7b80\u5355\u9879\u76ee\uff0c Cargo \u5e76\u4e0d\u6bd4 rustc \u63d0\u4f9b\u4e86\u66f4\u591a\u7684\u4f18\u52bf\uff0c\u4e0d\u8fc7\u968f\u7740\u5f00\u53d1\u7684\u6df1\u5165\uff0c\u7ec8\u5c06\u8bc1\u660e\u5176\u4ef7\u503c\u3002 \u4e00\u65e6\u7a0b\u5e8f\u58ee\u5927\u5230\u7531\u591a\u4e2a\u6587\u4ef6\u7ec4\u6210\uff0c\u4ea6\u6216\u8005\u662f\u9700\u8981\u5176\u4ed6\u7684\u4f9d\u8d56\uff0c\u8ba9 Cargo \u534f\u8c03\u6784\u5efa\u8fc7\u7a0b\u5c31\u4f1a\u7b80\u5355\u5f97\u591a\u3002 \u5373\u4fbf hello_cargo \u9879\u76ee\u5341\u5206\u7b80\u5355\uff0c\u5b83\u73b0\u5728\u4e5f\u4f7f\u7528\u4e86\u5f88\u591a\u5728\u4f60\u4e4b\u540e\u7684 Rust \u751f\u6daf\u5c06\u4f1a\u7528\u5230\u7684\u5b9e\u7528\u5de5\u5177\u3002 \u5176\u5b9e\uff0c\u8981\u5728\u4efb\u4f55\u5df2\u5b58\u5728\u7684\u9879\u76ee\u4e0a\u5de5\u4f5c\u65f6\uff0c\u53ef\u4ee5\u4f7f\u7528\u5982\u4e0b\u547d\u4ee4\u901a\u8fc7 Git \u68c0\u51fa\u4ee3\u7801\uff0c\u79fb\u52a8\u5230\u8be5\u9879\u76ee\u76ee\u5f55\u5e76\u6784\u5efa\uff1a git clone example.org/someproject cd someproject cargo build \u5173\u4e8e\u66f4\u591a Cargo \u7684\u4fe1\u606f\uff0c\u8bf7\u67e5\u9605 \u5176\u6587\u6863 \u3002","title":"\u628a Cargo \u5f53\u4f5c\u4e60\u60ef"},{"location":"hello-world/","text":"hello world \u521b\u5efars\u6587\u4ef6 \u521b\u5efa helloworld.rs \u6587\u4ef6 fn main (){ println! ( \"Hello, world!\" ); } \u7f16\u8bd1 # \u7f16\u8bd1\u6e90\u6587\u4ef6 rustc helloworld.rs # \u751f\u6210 helloworld \u53ef\u6267\u884c\u6587\u4ef6. \u6267\u884c # \u6267\u884c\u53ef\u6267\u884c\u6587\u4ef6 ./helloworld # \u8f93\u51fa: Hello, world! \u91ca\u4e49 main \u51fd\u6570: \u5728\u53ef\u6267\u884c\u7684 Rust \u7a0b\u5e8f\u4e2d\uff0c\u5b83\u603b\u662f\u6700\u5148\u8fd0\u884c\u7684\u4ee3\u7801\u3002 \u53c2\u8003: \u5206\u6790\u8fd9\u4e2a Rust \u7a0b\u5e8f println! \u51fd\u6570: \u4e00\u4e2a Rust \u5b8f\uff08macro\uff09\u3002 \"Hello, world!\": \u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\u3002\u6211\u4eec\u628a\u8fd9\u4e2a\u5b57\u7b26\u4e32\u4f5c\u4e3a\u4e00\u4e2a\u53c2\u6570\u4f20\u9012\u7ed9 println!\uff0c\u5b57\u7b26\u4e32\u5c06\u88ab\u6253\u5370\u5230\u5c4f\u5e55\u4e0a\u3002 \u8be5\u884c\u4ee5\u5206\u53f7\u7ed3\u5c3e\uff08;\uff09: \u8fd9\u4ee3\u8868\u4e00\u4e2a\u8868\u8fbe\u5f0f\u7684\u7ed3\u675f\u548c\u4e0b\u4e00\u4e2a\u8868\u8fbe\u5f0f\u7684\u5f00\u59cb\u3002\u5927\u90e8\u5206 Rust \u4ee3\u7801\u884c\u4ee5\u5206\u53f7\u7ed3\u5c3e\u3002 \u7f16\u8bd1\u548c\u8fd0\u884c\u662f\u5f7c\u6b64\u72ec\u7acb\u7684\u6b65\u9aa4 # \u8fd0\u884c Rust \u7a0b\u5e8f\u4e4b\u524d\uff0c\u5fc5\u987b\u5148\u4f7f\u7528 Rust \u7f16\u8bd1\u5668\u7f16\u8bd1, $ rustc main.rs # \u8f93\u51fa\u4e00\u4e2a\u4e8c\u8fdb\u5236\u7684\u53ef\u6267\u884c\u6587\u4ef6, \u5728 shell \u4e2d\u8f93\u5165 ls \u547d\u4ee4\u53ef\u4ee5\u770b\u89c1\u8fd9\u4e2a\u53ef\u6267\u884c\u6587\u4ef6 $ ls helloword helloword.rs # \u4ece\u8fd9\u91cc\u5f00\u59cb\u8fd0\u884c helloword \u6587\u4ef6 $ ./helloword Hello, world! Rust \u662f\u4e00\u79cd \u9884\u7f16\u8bd1\u9759\u6001\u7c7b\u578b\uff08ahead-of-time compiled\uff09\u8bed\u8a00\uff0c\u8fd9\u610f\u5473\u7740\u4f60\u53ef\u4ee5\u7f16\u8bd1\u7a0b\u5e8f\uff0c\u5e76\u5c06\u53ef\u6267\u884c\u6587\u4ef6\u9001\u7ed9\u5176\u4ed6\u4eba\uff0c\u4ed6\u4eec\u751a\u81f3\u4e0d\u9700\u8981\u5b89\u88c5 Rust \u5c31\u53ef\u4ee5\u8fd0\u884c\u3002","title":"hello world"},{"location":"hello-world/#hello-world","text":"","title":"hello world"},{"location":"hello-world/#rs","text":"\u521b\u5efa helloworld.rs \u6587\u4ef6 fn main (){ println! ( \"Hello, world!\" ); }","title":"\u521b\u5efars\u6587\u4ef6"},{"location":"hello-world/#_1","text":"# \u7f16\u8bd1\u6e90\u6587\u4ef6 rustc helloworld.rs # \u751f\u6210 helloworld \u53ef\u6267\u884c\u6587\u4ef6.","title":"\u7f16\u8bd1"},{"location":"hello-world/#_2","text":"# \u6267\u884c\u53ef\u6267\u884c\u6587\u4ef6 ./helloworld # \u8f93\u51fa: Hello, world!","title":"\u6267\u884c"},{"location":"hello-world/#_3","text":"main \u51fd\u6570: \u5728\u53ef\u6267\u884c\u7684 Rust \u7a0b\u5e8f\u4e2d\uff0c\u5b83\u603b\u662f\u6700\u5148\u8fd0\u884c\u7684\u4ee3\u7801\u3002 \u53c2\u8003: \u5206\u6790\u8fd9\u4e2a Rust \u7a0b\u5e8f println! \u51fd\u6570: \u4e00\u4e2a Rust \u5b8f\uff08macro\uff09\u3002 \"Hello, world!\": \u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\u3002\u6211\u4eec\u628a\u8fd9\u4e2a\u5b57\u7b26\u4e32\u4f5c\u4e3a\u4e00\u4e2a\u53c2\u6570\u4f20\u9012\u7ed9 println!\uff0c\u5b57\u7b26\u4e32\u5c06\u88ab\u6253\u5370\u5230\u5c4f\u5e55\u4e0a\u3002 \u8be5\u884c\u4ee5\u5206\u53f7\u7ed3\u5c3e\uff08;\uff09: \u8fd9\u4ee3\u8868\u4e00\u4e2a\u8868\u8fbe\u5f0f\u7684\u7ed3\u675f\u548c\u4e0b\u4e00\u4e2a\u8868\u8fbe\u5f0f\u7684\u5f00\u59cb\u3002\u5927\u90e8\u5206 Rust \u4ee3\u7801\u884c\u4ee5\u5206\u53f7\u7ed3\u5c3e\u3002","title":"\u91ca\u4e49"},{"location":"hello-world/#_4","text":"# \u8fd0\u884c Rust \u7a0b\u5e8f\u4e4b\u524d\uff0c\u5fc5\u987b\u5148\u4f7f\u7528 Rust \u7f16\u8bd1\u5668\u7f16\u8bd1, $ rustc main.rs # \u8f93\u51fa\u4e00\u4e2a\u4e8c\u8fdb\u5236\u7684\u53ef\u6267\u884c\u6587\u4ef6, \u5728 shell \u4e2d\u8f93\u5165 ls \u547d\u4ee4\u53ef\u4ee5\u770b\u89c1\u8fd9\u4e2a\u53ef\u6267\u884c\u6587\u4ef6 $ ls helloword helloword.rs # \u4ece\u8fd9\u91cc\u5f00\u59cb\u8fd0\u884c helloword \u6587\u4ef6 $ ./helloword Hello, world! Rust \u662f\u4e00\u79cd \u9884\u7f16\u8bd1\u9759\u6001\u7c7b\u578b\uff08ahead-of-time compiled\uff09\u8bed\u8a00\uff0c\u8fd9\u610f\u5473\u7740\u4f60\u53ef\u4ee5\u7f16\u8bd1\u7a0b\u5e8f\uff0c\u5e76\u5c06\u53ef\u6267\u884c\u6587\u4ef6\u9001\u7ed9\u5176\u4ed6\u4eba\uff0c\u4ed6\u4eec\u751a\u81f3\u4e0d\u9700\u8981\u5b89\u88c5 Rust \u5c31\u53ef\u4ee5\u8fd0\u884c\u3002","title":"\u7f16\u8bd1\u548c\u8fd0\u884c\u662f\u5f7c\u6b64\u72ec\u7acb\u7684\u6b65\u9aa4"}]}