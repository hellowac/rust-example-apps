{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u7b80\u4ecb \u8fd9\u662f\u6211\u7684\u5b66\u4e60Rust\u4e4b\u65c5\u7684\u5b9e\u4f8bAPP\u5408\u96c6 github\u5730\u5740: https://github.com/hellowac/rust-example-apps","title":"\u7b80\u4ecb"},{"location":"#_1","text":"\u8fd9\u662f\u6211\u7684\u5b66\u4e60Rust\u4e4b\u65c5\u7684\u5b9e\u4f8bAPP\u5408\u96c6 github\u5730\u5740: https://github.com/hellowac/rust-example-apps","title":"\u7b80\u4ecb"},{"location":"common-programing-concepts/","text":"\u5e38\u89c1\u7f16\u7a0b\u6982\u5ff5 \u53d8\u91cf\u548c\u53ef\u53d8\u6027 \u53d8\u91cf\u9ed8\u8ba4\u662f\u4e0d\u53ef\u6539\u53d8\u7684\uff08immutable\uff09\u3002 \u5f53\u53d8\u91cf\u4e0d\u53ef\u53d8\u65f6\uff0c\u4e00\u65e6\u503c\u88ab\u7ed1\u5b9a\u4e00\u4e2a\u540d\u79f0\u4e0a\uff0c\u4f60\u5c31\u4e0d\u80fd\u6539\u53d8\u8fd9\u4e2a\u503c\u3002 \u6587\u4ef6\u540d: src/main.rs fn main () { let x = 5 ; println! ( \"The value of x is: {x}\" ); x = 6 ; // \u9519\u8bef, \u4e0d\u80fd\u5bf9\u4e0d\u53ef\u53d8\u53d8\u91cf x \u4e8c\u6b21\u8d4b\u503c\uff08cannot assign twice to immutable variable `x` \uff09 println! ( \"The value of x is: {x}\" ); } \u4e0d\u8fc7\u53ef\u53d8\u6027\u4e5f\u662f\u975e\u5e38\u6709\u7528\u7684\uff0c\u53ef\u4ee5\u7528\u6765\u66f4\u65b9\u4fbf\u5730\u7f16\u5199\u4ee3\u7801\u3002\u5c3d\u7ba1\u53d8\u91cf\u9ed8\u8ba4\u662f\u4e0d\u53ef\u53d8\u7684\uff0c\u4f60\u4ecd\u7136\u53ef\u4ee5\u5728\u53d8\u91cf\u540d\u524d\u6dfb\u52a0 mut \u6765\u4f7f\u5176\u53ef\u53d8: fn main () { let mut x = 5 ; // \u6dfb\u52a0mut\uff0c\u4f7f\u5176\u53ef\u53d8\u3002\uff08\u8fdb\u884c\u591a\u6b21\u8d4b\u503c\uff09 println! ( \"The value of x is: {x}\" ); x = 6 ; println! ( \"The value of x is: {x}\" ); } \u5e38\u91cf \u7c7b\u4f3c\u4e8e\u4e0d\u53ef\u53d8\u53d8\u91cf\uff0c\u5e38\u91cf(constants) \u662f\u7ed1\u5b9a\u5230\u4e00\u4e2a\u540d\u79f0\u7684\u4e0d\u5141\u8bb8\u6539\u53d8\u7684\u503c\uff0c\u4e0d\u8fc7\u5e38\u91cf\u4e0e\u53d8\u91cf\u8fd8\u662f\u6709\u4e00\u4e9b\u533a\u522b\u3002 \u4e0d\u5141\u8bb8\u5bf9\u5e38\u91cf\u4f7f\u7528 mut\u3002\u5e38\u91cf\u4e0d\u5149\u9ed8\u8ba4\u4e0d\u80fd\u53d8\uff0c\u5b83\u603b\u662f\u4e0d\u80fd\u53d8\u3002 \u5e38\u91cf\u4f7f\u7528 const \u5173\u952e\u5b57\u800c\u4e0d\u662f let \uff0c\u5e76\u4e14 \u5fc5\u987b \u6ce8\u660e\u503c\u7684\u7c7b\u578b\u3002 \u5e38\u91cf\u53ef\u4ee5\u5728\u4efb\u4f55\u4f5c\u7528\u57df\u4e2d\u58f0\u660e\uff0c\u5305\u62ec\u5168\u5c40\u4f5c\u7528\u57df\uff0c\u8fd9\u5728\u4e00\u4e2a\u503c\u9700\u8981\u88ab\u5f88\u591a\u90e8\u5206\u7684\u4ee3\u7801\u7528\u5230\u65f6\u5f88\u6709\u7528\u3002 \u5e38\u91cf\u53ea\u80fd\u88ab\u8bbe\u7f6e\u4e3a\u5e38\u91cf\u8868\u8fbe\u5f0f\uff0c\u800c\u4e0d\u53ef\u4ee5\u662f\u5176\u4ed6\u4efb\u4f55\u53ea\u80fd\u5728\u8fd0\u884c\u65f6\u8ba1\u7b97\u51fa\u7684\u503c\u3002 \u4f8b\u5982\uff1a const THREE_HOURS_IN_SECONDS : u32 = 60 * 60 * 3 ; Rust \u5bf9\u5e38\u91cf\u7684\u547d\u540d\u7ea6\u5b9a\u662f\u5728\u5355\u8bcd\u4e4b\u95f4\u4f7f\u7528\u5168\u5927\u5199\u52a0\u4e0b\u5212\u7ebf \u6709\u5173\u58f0\u660e\u5e38\u91cf\u65f6\u53ef\u4ee5\u4f7f\u7528\u54ea\u4e9b\u64cd\u4f5c\u7684\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605 Rust Reference \u7684\u5e38\u91cf\u6c42\u503c\u90e8\u5206 \u3002 \u9690\u85cf \u53ef\u4ee5\u5b9a\u4e49\u4e00\u4e2a\u4e0e\u4e4b\u524d\u53d8\u91cf\u540c\u540d\u7684\u65b0\u53d8\u91cf\u3002\u79f0\u4e4b\u4e3a\u7b2c\u4e00\u4e2a\u53d8\u91cf\u88ab\u7b2c\u4e8c\u4e2a \u9690\u85cf \uff08Shadowing\uff09\u4e86, \u8fd9\u610f\u5473\u7740\u5728\u4f7f\u7528\u53d8\u91cf\u7684\u540d\u79f0\u65f6\uff0c\u7f16\u8bd1\u5668\u5c06\u770b\u5230\u7b2c\u4e8c\u4e2a\u53d8\u91cf\u3002 \u5b9e\u9645\u4e0a\uff0c\u7b2c\u4e8c\u4e2a\u53d8\u91cf\u201c\u906e\u853d\u201d\u4e86\u7b2c\u4e00\u4e2a\u53d8\u91cf\uff0c\u6b64\u65f6\u4efb\u4f55\u4f7f\u7528\u8be5\u53d8\u91cf\u540d\u7684\u884c\u4e3a\u4e2d\u90fd\u4f1a\u89c6\u4e3a\u662f\u5728\u4f7f\u7528\u7b2c\u4e8c\u4e2a\u53d8\u91cf\uff0c\u76f4\u5230\u7b2c\u4e8c\u4e2a\u53d8\u91cf\u81ea\u5df1\u4e5f\u88ab\u9690\u85cf\u6216\u7b2c\u4e8c\u4e2a\u53d8\u91cf\u7684\u4f5c\u7528\u57df\u7ed3\u675f\u3002 \u53ef\u4ee5\u7528\u76f8\u540c\u53d8\u91cf\u540d\u79f0\u6765\u9690\u85cf\u4e00\u4e2a\u53d8\u91cf\uff0c\u4ee5\u53ca\u91cd\u590d\u4f7f\u7528 let \u5173\u952e\u5b57\u6765\u591a\u6b21\u9690\u85cf\uff0c\u5982\u4e0b\u6240\u793a\uff1a fn main () { let x = 5 ; // \u9996\u5148\u5c06 x \u7ed1\u5b9a\u5230\u503c 5 \u4e0a let x = x + 1 ; // \u63a5\u7740\u901a\u8fc7 let x = \u521b\u5efa\u4e86\u4e00\u4e2a\u65b0\u53d8\u91cf x\uff0c\u83b7\u53d6\u521d\u59cb\u503c\u5e76\u52a0 1\uff0c\u8fd9\u6837 x \u7684\u503c\u5c31\u53d8\u6210 6 \u4e86 { // \u7136\u540e\uff0c\u5728\u4f7f\u7528\u82b1\u62ec\u53f7\u521b\u5efa\u7684\u5185\u90e8\u4f5c\u7528\u57df\u5185 let x = x * 2 ; // \u7b2c\u4e09\u4e2a let \u8bed\u53e5\u4e5f\u9690\u85cf\u4e86 x \u5e76\u521b\u5efa\u4e86\u4e00\u4e2a\u65b0\u7684\u53d8\u91cf\uff0c\u5c06\u4e4b\u524d\u7684\u503c\u4e58\u4ee5 2\uff0cx \u5f97\u5230\u7684\u503c\u662f 12 println! ( \"The value of x in the inner scope is: {x}\" ); } // \u5f53\u8be5\u4f5c\u7528\u57df\u7ed3\u675f\u65f6\uff0c\u5185\u90e8 shadowing \u7684\u4f5c\u7528\u57df\u4e5f\u7ed3\u675f\u4e86\uff0cx \u53c8\u8fd4\u56de\u5230 6 println! ( \"The value of x is: {x}\" ); } \u9690\u85cf\u4e0e\u5c06\u53d8\u91cf\u6807\u8bb0\u4e3a mut \u662f\u6709\u533a\u522b\u7684\u3002\u5f53\u4e0d\u5c0f\u5fc3\u5c1d\u8bd5\u5bf9\u53d8\u91cf\u91cd\u65b0\u8d4b\u503c\u65f6\uff0c\u5982\u679c\u6ca1\u6709\u4f7f\u7528 let \u5173\u952e\u5b57\uff0c\u5c31\u4f1a\u5bfc\u81f4\u7f16\u8bd1\u65f6\u9519\u8bef\u3002 \u901a\u8fc7\u4f7f\u7528 let\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u8fd9\u4e2a\u503c\u8fdb\u884c\u4e00\u4e9b\u8ba1\u7b97\uff0c\u4e0d\u8fc7\u8ba1\u7b97\u5b8c\u4e4b\u540e\u53d8\u91cf\u4ecd\u7136\u662f\u4e0d\u53ef\u53d8\u7684\u3002 mut \u4e0e\u9690\u85cf\u7684\u53e6\u4e00\u4e2a\u533a\u522b\u662f\uff0c\u5f53\u518d\u6b21\u4f7f\u7528 let \u65f6\uff0c\u5b9e\u9645\u4e0a\u521b\u5efa\u4e86\u4e00\u4e2a\u65b0\u53d8\u91cf\uff0c\u6211\u4eec\u53ef\u4ee5\u6539\u53d8\u503c\u7684\u7c7b\u578b\uff0c\u5e76\u4e14\u590d\u7528\u8fd9\u4e2a\u540d\u5b57\u3002 \u4f8b\u5982\uff0c\u5047\u8bbe\u7a0b\u5e8f\u8bf7\u6c42\u7528\u6237\u8f93\u5165\u7a7a\u683c\u5b57\u7b26\u6765\u8bf4\u660e\u5e0c\u671b\u5728\u6587\u672c\u4e4b\u95f4\u663e\u793a\u591a\u5c11\u4e2a\u7a7a\u683c\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u60f3\u5c06\u8f93\u5165\u5b58\u50a8\u6210\u6570\u5b57\uff08\u591a\u5c11\u4e2a\u7a7a\u683c\uff09\uff1a let spaces = \" \" ; // \u7b2c\u4e00\u4e2a spaces \u53d8\u91cf\u662f\u5b57\u7b26\u4e32\u7c7b\u578b let spaces = spaces . len (); // \u7b2c\u4e8c\u4e2a spaces \u53d8\u91cf\u662f\u6570\u5b57\u7c7b\u578b \u9690\u85cf\u4f7f\u6211\u4eec\u4e0d\u5fc5\u4f7f\u7528\u4e0d\u540c\u7684\u540d\u5b57\uff0c\u5982 spaces_str \u548c spaces_num\uff1b \u76f8\u53cd\uff0c\u6211\u4eec\u53ef\u4ee5\u590d\u7528 spaces \u8fd9\u4e2a\u66f4\u7b80\u5355\u7684\u540d\u5b57\u3002\u7136\u800c\uff0c\u5982\u679c\u5c1d\u8bd5\u4f7f\u7528 mut \uff0c\u5c06\u4f1a\u5f97\u5230\u4e00\u4e2a\u7f16\u8bd1\u65f6\u9519\u8bef\uff0c\u5982\u4e0b\u6240\u793a\uff1a let mut spaces = \" \" ; // string\u7c7b\u578b spaces = spaces . len (); // int \u7c7b\u578b \u9519\u8bef\u63d0\u793a: $ cargo run Compiling variables v0 . 1.0 ( file : ///projects/variables) error [ E0308 ] : mismatched types - -> src / main . rs : 3 : 14 | 2 | let mut spaces = \" \" ; | ----- expected due to this value 3 | spaces = spaces . len (); | ^^^^^^^^^^^^ expected ` & str ` , found ` usize ` For more information about this error , try ` rustc -- explain E0308 ` . error : could not compile ` variables ` due to previous error \u4e0d\u80fd\u6539\u53d8\u53d8\u91cf\u7684\u7c7b\u578b \u6570\u636e\u7c7b\u578b \u5728 Rust \u4e2d\uff0c\u6bcf\u4e00\u4e2a\u503c\u90fd\u5c5e\u4e8e\u67d0\u4e00\u4e2a \u6570\u636e\u7c7b\u578b\uff08data type\uff09\uff0c\u8fd9\u544a\u8bc9 Rust \u5b83\u88ab\u6307\u5b9a\u4e3a\u4f55\u79cd\u6570\u636e\uff0c\u4ee5\u4fbf\u660e\u786e\u6570\u636e\u5904\u7406\u65b9\u5f0f\u3002 \u6211\u4eec\u5c06\u770b\u5230\u4e24\u7c7b\u6570\u636e\u7c7b\u578b\u5b50\u96c6\uff1a \u6807\u91cf \uff08scalar\uff09\u548c \u590d\u5408 \uff08compound\uff09\u3002 Rust \u662f \u9759\u6001\u7c7b\u578b\uff08statically typed\uff09\u8bed\u8a00\uff0c\u4e5f\u5c31\u662f\u8bf4\u5728\u7f16\u8bd1\u65f6\u5c31\u5fc5\u987b\u77e5\u9053\u6240\u6709\u53d8\u91cf\u7684\u7c7b\u578b\u3002 \u4f7f\u7528 parse \u5c06 String \u8f6c\u6362\u4e3a\u6570\u5b57\u65f6\uff0c\u5fc5\u987b\u589e\u52a0\u7c7b\u578b\u6ce8\u89e3\uff0c\u50cf\u8fd9\u6837\uff1a let guess : u32 = \"42\" . parse (). expect ( \"Not a number!\" ); \u5982\u679c\u4e0d\u50cf\u4e0a\u9762\u8fd9\u6837\u6dfb\u52a0\u7c7b\u578b\u6ce8\u89e3 : u32\uff0cRust \u4f1a\u663e\u793a\u5982\u4e0b\u9519\u8bef\uff0c\u8fd9\u8bf4\u660e\u7f16\u8bd1\u5668\u9700\u8981\u6211\u4eec\u63d0\u4f9b\u66f4\u591a\u4fe1\u606f\uff0c\u6765\u4e86\u89e3\u6211\u4eec\u60f3\u8981\u7684\u7c7b\u578b\uff1a $ cargo build Compiling no_type_annotations v0.1.0 ( file:///projects/no_type_annotations ) error [ E0282 ] : type annotations needed --> src/main.rs:2:9 | 2 | let guess = \"42\" .parse () .expect ( \"Not a number!\" ) ; | ^^^^^ consider giving ` guess ` a type For more information about this error, try ` rustc --explain E0282 ` . error: could not compile ` no_type_annotations ` due to previous error \u6807\u91cf\u7c7b\u578b \u6807\u91cf \uff08scalar\uff09\u7c7b\u578b\u4ee3\u8868\u4e00\u4e2a\u5355\u72ec\u7684\u503c\u3002Rust \u6709\u56db\u79cd\u57fa\u672c\u7684\u6807\u91cf\u7c7b\u578b\uff1a \u6574\u578b \u3001 \u6d6e\u70b9\u578b \u3001 \u5e03\u5c14\u7c7b\u578b \u548c \u5b57\u7b26\u7c7b\u578b \u3002 \u6574\u578b \u6574\u6570 \u662f\u4e00\u4e2a\u6ca1\u6709\u5c0f\u6570\u90e8\u5206\u7684\u6570\u5b57\u3002 \u957f\u5ea6 \u6709\u7b26\u53f7 \u65e0\u7b26\u53f7 8-bit i8 u8 16-bit i16 u16 32-bit i32 u32 64-bit i64 u64 128-bit i128 u128 arch isize usize isize \u548c usize \u7c7b\u578b\u4f9d\u8d56\u8fd0\u884c\u7a0b\u5e8f\u7684\u8ba1\u7b97\u673a\u67b6\u6784\uff1a64 \u4f4d\u67b6\u6784\u4e0a\u5b83\u4eec\u662f 64 \u4f4d\u7684\uff0c 32 \u4f4d\u67b6\u6784\u4e0a\u5b83\u4eec\u662f 32 \u4f4d\u7684\u3002 \u53ef\u4ee5\u4f7f\u7528\u4e0b\u9762\u8868\u683c\u4e2d\u7684\u4efb\u4f55\u4e00\u79cd\u5f62\u5f0f\u7f16\u5199\u6570\u5b57\u5b57\u9762\u503c\u3002 \u8bf7\u6ce8\u610f\u53ef\u4ee5\u662f\u591a\u79cd\u6570\u5b57\u7c7b\u578b\u7684\u6570\u5b57\u5b57\u9762\u503c\u5141\u8bb8\u4f7f\u7528\u7c7b\u578b\u540e\u7f00\uff0c\u4f8b\u5982 57u8 \u6765\u6307\u5b9a\u7c7b\u578b\uff0c\u540c\u65f6\u4e5f\u5141\u8bb8\u4f7f\u7528 _ \u505a\u4e3a\u5206\u9694\u7b26\u4ee5\u65b9\u4fbf\u8bfb\u6570\uff0c\u4f8b\u5982 1_000 \uff0c\u5b83\u7684\u503c\u4e0e\u4f60\u6307\u5b9a\u7684 1000 \u76f8\u540c\u3002 \u6570\u5b57\u5b57\u9762\u503c \u4f8b\u5b50 Decimal (\u5341\u8fdb\u5236) 98_222 Hex (\u5341\u516d\u8fdb\u5236) 0xff Octal (\u516b\u8fdb\u5236) 0o77 Binary (\u4e8c\u8fdb\u5236) 0b1111_0000 Byte (\u5355\u5b57\u8282\u5b57\u7b26)(\u4ec5\u9650\u4e8eu8) b'A' Rust \u7684\u9ed8\u8ba4\u7c7b\u578b\u901a\u5e38\u662f\u4e2a\u4e0d\u9519\u7684\u8d77\u70b9\uff0c\u6570\u5b57\u7c7b\u578b\u9ed8\u8ba4\u662f i32 \u3002 isize \u6216 usize \u4e3b\u8981\u4f5c\u4e3a\u67d0\u4e9b\u96c6\u5408\u7684\u7d22\u5f15\u3002 \u5176\u4ed6 \u53c2\u8003: \u6574\u5f62\u6ea2\u51fa \u6d6e\u70b9\u578b Rust \u4e5f\u6709\u4e24\u4e2a\u539f\u751f\u7684 \u6d6e\u70b9\u6570\uff08floating-point numbers\uff09\u7c7b\u578b\uff0c\u5b83\u4eec\u662f\u5e26\u5c0f\u6570\u70b9\u7684\u6570\u5b57\u3002Rust \u7684\u6d6e\u70b9\u6570\u7c7b\u578b\u662f f32 \u548c f64\uff0c\u5206\u522b\u5360 32 \u4f4d\u548c 64 \u4f4d\u3002\u9ed8\u8ba4\u7c7b\u578b\u662f f64\uff0c\u56e0\u4e3a\u5728\u73b0\u4ee3 CPU \u4e2d\uff0c\u5b83\u4e0e f32 \u901f\u5ea6\u51e0\u4e4e\u4e00\u6837\uff0c\u4e0d\u8fc7\u7cbe\u5ea6\u66f4\u9ad8\u3002\u6240\u6709\u7684\u6d6e\u70b9\u578b\u90fd\u662f\u6709\u7b26\u53f7\u7684\u3002 \u8fd9\u662f\u4e00\u4e2a\u5c55\u793a\u6d6e\u70b9\u6570\u7684\u5b9e\u4f8b\uff1a \u6587\u4ef6\u540d: src/main.rs fn main () { let x = 2.0 ; // f64 let y : f32 = 3.0 ; // f32 } \u6d6e\u70b9\u6570\u91c7\u7528 IEEE-754 \u6807\u51c6\u8868\u793a\u3002f32 \u662f\u5355\u7cbe\u5ea6\u6d6e\u70b9\u6570\uff0cf64 \u662f\u53cc\u7cbe\u5ea6\u6d6e\u70b9\u6570\u3002 \u6570\u503c\u8fd0\u7b97 Rust \u4e2d\u7684\u6240\u6709\u6570\u5b57\u7c7b\u578b\u90fd\u652f\u6301\u57fa\u672c\u6570\u5b66\u8fd0\u7b97\uff1a\u52a0\u6cd5\u3001\u51cf\u6cd5\u3001\u4e58\u6cd5\u3001\u9664\u6cd5\u548c\u53d6\u4f59\u3002\u6574\u6570\u9664\u6cd5\u4f1a\u5411\u4e0b\u820d\u5165\u5230\u6700\u63a5\u8fd1\u7684\u6574\u6570\u3002\u4e0b\u9762\u7684\u4ee3\u7801\u5c55\u793a\u4e86\u5982\u4f55\u5728 let \u8bed\u53e5\u4e2d\u4f7f\u7528\u5b83\u4eec\uff1a \u6587\u4ef6\u540d: src/main.rs fn main () { // \u52a0\u6cd5 let sum = 5 + 10 ; // \u51cf\u6cd5 let difference = 95.5 - 4.3 ; // \u4e58\u6cd5 let product = 4 * 30 ; // \u9664\u6cd5 let quotient = 56.7 / 32.2 ; let floored = 2 / 3 ; // \u7ed3\u679c\u4e3a0 // \u53d6\u4f59 let remainder = 43 % 5 ; } \u8fd9\u4e9b\u8bed\u53e5\u4e2d\u7684\u6bcf\u4e2a\u8868\u8fbe\u5f0f\u4f7f\u7528\u4e86\u4e00\u4e2a\u6570\u5b66\u8fd0\u7b97\u7b26\u5e76\u8ba1\u7b97\u51fa\u4e86\u4e00\u4e2a\u503c\uff0c\u7136\u540e\u7ed1\u5b9a\u7ed9\u4e00\u4e2a\u53d8\u91cf\u3002 \u9644\u5f55 B \u5305\u542b Rust \u63d0\u4f9b\u7684\u6240\u6709\u8fd0\u7b97\u7b26\u7684\u5217\u8868\u3002 \u5e03\u5c14\u578b \u6b63\u5982\u5176\u4ed6\u5927\u90e8\u5206\u7f16\u7a0b\u8bed\u8a00\u4e00\u6837\uff0cRust \u4e2d\u7684\u5e03\u5c14\u7c7b\u578b\u6709\u4e24\u4e2a\u53ef\u80fd\u7684\u503c\uff1atrue \u548c false\u3002Rust \u4e2d\u7684\u5e03\u5c14\u7c7b\u578b\u4f7f\u7528 bool \u8868\u793a\u3002\u4f8b\u5982\uff1a fn main () { let t = true ; let f : bool = false ; // with explicit type annotation } \u5b57\u7b26\u7c7b\u578b Rust\u7684 char \u7c7b\u578b\u662f\u8bed\u8a00\u4e2d\u6700\u539f\u751f\u7684\u5b57\u6bcd\u7c7b\u578b\u3002\u4e0b\u9762\u662f\u4e00\u4e9b\u58f0\u660e char \u503c\u7684\u4f8b\u5b50\uff1a \u6587\u4ef6\u540d: src/main.rs fn main () { let c = 'z' ; let z : char = '\u2124' ; // with explicit type annotation let heart_eyed_cat = '\ud83d\ude3b' ; } \u6ce8\u610f\uff0c\u8fd9\u91cc\u7528\u5355\u5f15\u53f7\u58f0\u660e char \u5b57\u9762\u91cf\uff0c\u800c\u4e0e\u4e4b\u76f8\u53cd\u7684\u662f\uff0c\u4f7f\u7528 \u53cc\u5f15\u53f7 \u58f0\u660e\u5b57\u7b26\u4e32\u5b57\u9762\u91cf\u3002Rust \u7684 char \u7c7b\u578b\u7684\u5927\u5c0f\u4e3a\u56db\u4e2a\u5b57\u8282(four bytes)\uff0c\u5e76\u4ee3\u8868\u4e86\u4e00\u4e2a Unicode \u6807\u91cf\u503c\uff08Unicode Scalar Value\uff09\uff0c\u8fd9\u610f\u5473\u7740\u5b83\u53ef\u4ee5\u6bd4 ASCII \u8868\u793a\u66f4\u591a\u5185\u5bb9\u3002 \u5728 Rust \u4e2d\uff0c\u5e26\u53d8\u97f3\u7b26\u53f7\u7684\u5b57\u6bcd\uff08Accented letters\uff09\uff0c\u4e2d\u6587\u3001\u65e5\u6587\u3001\u97e9\u6587\u7b49\u5b57\u7b26\uff0cemoji\uff08\u7ed8\u6587\u5b57\uff09\u4ee5\u53ca\u96f6\u957f\u5ea6\u7684\u7a7a\u767d\u5b57\u7b26\u90fd\u662f\u6709\u6548\u7684 char \u503c\u3002 Unicode \u6807\u91cf\u503c\u5305\u542b\u4ece U+0000 \u5230 U+D7FF \u548c U+E000 \u5230 U+10FFFF \u5728\u5185\u7684\u503c \u3002 \u4e0d\u8fc7\uff0c\u201c\u5b57\u7b26\u201d \u5e76\u4e0d\u662f\u4e00\u4e2a Unicode \u4e2d\u7684\u6982\u5ff5\uff0c\u6240\u4ee5\u4eba\u76f4\u89c9\u4e0a\u7684 \u201c\u5b57\u7b26\u201d \u53ef\u80fd\u4e0e Rust \u4e2d\u7684 char \u5e76\u4e0d\u7b26\u5408\u3002 \u7b2c\u516b\u7ae0\u7684 \u201c \u4f7f\u7528\u5b57\u7b26\u4e32\u5b58\u50a8 UTF-8 \u7f16\u7801\u7684\u6587\u672c \u201d \u4e2d\u5c06\u8be6\u7ec6\u8ba8\u8bba\u8fd9\u4e2a\u4e3b\u9898\u3002 \u590d\u5408\u7c7b\u578b \u590d\u5408\u7c7b\u578b \uff08Compound types\uff09\u53ef\u4ee5\u5c06\u591a\u4e2a\u503c\u7ec4\u5408\u6210\u4e00\u4e2a\u7c7b\u578b\u3002Rust \u6709\u4e24\u4e2a\u539f\u751f\u7684\u590d\u5408\u7c7b\u578b\uff1a \u5143\u7ec4 \uff08tuple\uff09\u548c \u6570\u7ec4 \uff08array\uff09\u3002 \u5143\u7ec4\u7c7b\u578b \u5143\u7ec4\u662f\u4e00\u4e2a\u5c06\u591a\u4e2a\u5176\u4ed6\u7c7b\u578b\u7684\u503c\u7ec4\u5408\u8fdb\u4e00\u4e2a\u590d\u5408\u7c7b\u578b\u7684\u4e3b\u8981\u65b9\u5f0f\u3002 \u5143\u7ec4\u957f\u5ea6\u56fa\u5b9a\uff1a\u4e00\u65e6\u58f0\u660e\uff0c\u5176\u957f\u5ea6\u4e0d\u4f1a\u589e\u5927\u6216\u7f29\u5c0f\u3002 \u4f7f\u7528\u5305\u542b\u5728\u5706\u62ec\u53f7\u4e2d\u7684\u9017\u53f7\u5206\u9694\u7684\u503c\u5217\u8868\u6765\u521b\u5efa\u4e00\u4e2a\u5143\u7ec4\u3002 \u5143\u7ec4\u4e2d\u7684\u6bcf\u4e00\u4e2a\u4f4d\u7f6e\u90fd\u6709\u4e00\u4e2a\u7c7b\u578b\uff0c\u800c\u4e14\u8fd9\u4e9b\u4e0d\u540c\u503c\u7684\u7c7b\u578b\u4e5f\u4e0d\u5fc5\u662f\u76f8\u540c\u7684\u3002\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\u4f7f\u7528\u4e86\u53ef\u9009\u7684\u7c7b\u578b\u6ce8\u89e3\uff1a fn main () { let tup : ( i32 , f64 , u8 ) = ( 500 , 6.4 , 1 ); } tup \u53d8\u91cf\u7ed1\u5b9a\u5230\u6574\u4e2a\u5143\u7ec4\u4e0a\uff0c\u56e0\u4e3a\u5143\u7ec4\u662f\u4e00\u4e2a\u5355\u72ec\u7684\u590d\u5408\u5143\u7d20\u3002 \u4e3a\u4e86\u4ece\u5143\u7ec4\u4e2d\u83b7\u53d6\u5355\u4e2a\u503c\uff0c\u53ef\u4ee5\u4f7f\u7528 \u6a21\u5f0f\u5339\u914d \uff08pattern matching\uff09\u6765 \u89e3\u6784 \uff08destructure\uff09\u5143\u7ec4\u503c\uff0c\u50cf\u8fd9\u6837\uff1a fn main () { let tup = ( 500 , 6.4 , 1 ); // \u7a0b\u5e8f\u9996\u5148\u521b\u5efa\u4e86\u4e00\u4e2a\u5143\u7ec4\u5e76\u7ed1\u5b9a\u5230 tup \u53d8\u91cf\u4e0a let ( x , y , z ) = tup ; // \u63a5\u7740\u4f7f\u7528\u4e86 let \u548c\u4e00\u4e2a\u6a21\u5f0f\u5c06 tup \u5206\u6210\u4e86\u4e09\u4e2a\u4e0d\u540c\u7684\u53d8\u91cf\uff0cx\u3001y \u548c z\u3002 // \u8fd9\u53eb\u505a \u89e3\u6784\uff08destructuring\uff09\u56e0\u4e3a\u5b83\u5c06\u4e00\u4e2a\u5143\u7ec4\u62c6\u6210\u4e86\u4e09\u4e2a\u90e8\u5206\u3002 println! ( \"The value of y is: {y}\" ); // \u6700\u540e\uff0c\u7a0b\u5e8f\u6253\u5370\u51fa\u4e86 y \u7684\u503c\uff0c\u4e5f\u5c31\u662f 6.4\u3002 } \u4e5f\u53ef\u4ee5\u4f7f\u7528\u70b9\u53f7\uff08.\uff09\u540e\u8ddf\u503c\u7684\u7d22\u5f15\u6765\u76f4\u63a5\u8bbf\u95ee\u5b83\u4eec\u3002\u4f8b\u5982\uff1a \u6587\u4ef6\u540d: src/main.rs fn main () { let x : ( i32 , f64 , u8 ) = ( 500 , 6.4 , 1 ); let five_hundred = x . 0 ; let six_point_four = x . 1 ; let one = x . 2 ; } \u4e0d\u5e26\u4efb\u4f55\u503c\u7684\u5143\u7ec4\u6709\u4e2a\u7279\u6b8a\u7684\u540d\u79f0\uff0c\u53eb\u505a \u5355\u5143 \uff08unit\uff09 \u5143\u7ec4\u3002\u8fd9\u79cd\u503c\u4ee5\u53ca\u5bf9\u5e94\u7684\u7c7b\u578b\u90fd\u5199\u4f5c () \uff0c \u8868\u793a\u7a7a\u503c\u6216\u7a7a\u7684\u8fd4\u56de\u7c7b\u578b \u3002\u5982\u679c\u8868\u8fbe\u5f0f\u4e0d\u8fd4\u56de\u4efb\u4f55\u5176\u4ed6\u503c\uff0c\u5219\u4f1a\u9690\u5f0f\u8fd4\u56de\u5355\u5143\u503c\u3002 \u6570\u7ec4\u7c7b\u578b \u53e6\u4e00\u4e2a\u5305\u542b\u591a\u4e2a\u503c\u7684\u65b9\u5f0f\u662f \u6570\u7ec4 \uff08array\uff09\u3002\u4e0e\u5143\u7ec4\u4e0d\u540c\uff0c \u6570\u7ec4\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u7684\u7c7b\u578b\u5fc5\u987b\u76f8\u540c \u3002Rust \u4e2d\u7684\u6570\u7ec4\u4e0e\u4e00\u4e9b\u5176\u4ed6\u8bed\u8a00\u4e2d\u7684\u6570\u7ec4\u4e0d\u540c\uff0c Rust\u4e2d\u7684\u6570\u7ec4\u957f\u5ea6\u662f\u56fa\u5b9a\u7684 \u3002 \u5c06\u6570\u7ec4\u7684\u503c\u5199\u6210\u5728\u65b9\u62ec\u53f7\u5185\uff0c\u7528\u9017\u53f7\u5206\u9694\uff1a fn main () { let a = [ 1 , 2 , 3 , 4 , 5 ]; } \u5f53\u4f60\u60f3\u8981\u5728 \u6808 \uff08stack\uff09\u800c\u4e0d\u662f\u5728 \u5806 \uff08heap\uff09\u4e0a\u4e3a\u6570\u636e\u5206\u914d\u7a7a\u95f4\uff0c\u6216\u8005\u662f\u60f3\u8981\u786e\u4fdd\u603b\u662f\u6709\u56fa\u5b9a\u6570\u91cf\u7684\u5143\u7d20\u65f6\uff0c\u6570\u7ec4\u975e\u5e38\u6709\u7528\u3002 \u4f46\u662f\u6570\u7ec4\u5e76\u4e0d\u5982 vector \u7c7b\u578b\u7075\u6d3b\u3002 vector \u7c7b\u578b\u662f\u6807\u51c6\u5e93\u63d0\u4f9b\u7684\u4e00\u4e2a \u5141\u8bb8 \u589e\u957f\u548c\u7f29\u5c0f\u957f\u5ea6\u7684\u7c7b\u4f3c\u6570\u7ec4\u7684\u96c6\u5408\u7c7b\u578b\u3002 \u5f53\u4e0d\u786e\u5b9a\u662f\u5e94\u8be5\u4f7f\u7528\u6570\u7ec4\u8fd8\u662f vector \u7684\u65f6\u5019\uff0c\u90a3\u4e48\u5f88\u53ef\u80fd\u5e94\u8be5\u4f7f\u7528 vector \u3002 \u7b2c\u516b\u7ae0 \u4f1a\u8be6\u7ec6\u8ba8\u8bba vector \u3002 \u7136\u800c\uff0c\u5f53\u4f60\u786e\u5b9a\u5143\u7d20\u4e2a\u6570\u4e0d\u4f1a\u6539\u53d8\u65f6\uff0c\u6570\u7ec4\u4f1a\u66f4\u6709\u7528\u3002\u4f8b\u5982\uff0c\u5f53\u4f60\u5728\u4e00\u4e2a\u7a0b\u5e8f\u4e2d\u4f7f\u7528\u6708\u4efd\u540d\u5b57\u65f6\uff0c\u4f60\u66f4\u5e94\u8d8b\u5411\u4e8e\u4f7f\u7528\u6570\u7ec4\u800c\u4e0d\u662f vector\uff0c\u56e0\u4e3a\u4f60\u786e\u5b9a\u53ea\u4f1a\u670912\u4e2a\u5143\u7d20\u3002 let months = [ \"January\" , \"February\" , \"March\" , \"April\" , \"May\" , \"June\" , \"July\" , \"August\" , \"September\" , \"October\" , \"November\" , \"December\" ]; \u53ef\u4ee5\u50cf\u8fd9\u6837\u7f16\u5199\u6570\u7ec4\u7684\u7c7b\u578b\uff1a\u5728\u65b9\u62ec\u53f7\u4e2d\u5305\u542b\u6bcf\u4e2a\u5143\u7d20\u7684\u7c7b\u578b\uff0c\u540e\u8ddf\u5206\u53f7\uff0c\u518d\u540e\u8ddf\u6570\u7ec4\u5143\u7d20\u7684\u6570\u91cf\u3002 let a : [ i32 ; 5 ] = [ 1 , 2 , 3 , 4 , 5 ]; // i32 \u662f\u6bcf\u4e2a\u5143\u7d20\u7684\u7c7b\u578b\u3002\u5206\u53f7\u4e4b\u540e\uff0c\u6570\u5b57 5 \u8868\u660e\u8be5\u6570\u7ec4\u5305\u542b\u4e94\u4e2a\u5143\u7d20\u3002 let a = [ 3 ; 5 ]; // \u901a\u8fc7\u5728\u65b9\u62ec\u53f7\u4e2d\u6307\u5b9a\u521d\u59cb\u503c\u52a0\u5206\u53f7\u518d\u52a0\u5143\u7d20\u4e2a\u6570\u7684\u65b9\u5f0f\u6765\u521b\u5efa\u4e00\u4e2a\u6bcf\u4e2a\u5143\u7d20\u90fd\u4e3a\u76f8\u540c\u503c\u7684\u6570\u7ec4\uff1a // \u53d8\u91cf\u540d\u4e3a a \u7684\u6570\u7ec4\u5c06\u5305\u542b 5 \u4e2a\u5143\u7d20\uff0c\u8fd9\u4e9b\u5143\u7d20\u7684\u503c\u6700\u521d\u90fd\u5c06\u88ab\u8bbe\u7f6e\u4e3a 3\u3002 // \u8fd9\u79cd\u5199\u6cd5\u4e0e let a = [3, 3, 3, 3, 3]; \u6548\u679c\u76f8\u540c\uff0c\u4f46\u66f4\u7b80\u6d01\u3002 \u8bbf\u95ee\u6570\u7ec4\u5143\u7d20 \u6570\u7ec4\u662f\u53ef\u4ee5\u5728\u6808(stack)\u4e0a\u5206\u914d\u7684\u5df2\u77e5\u56fa\u5b9a\u5927\u5c0f\u7684\u5355\u4e2a\u5185\u5b58\u5757\u3002\u53ef\u4ee5\u4f7f\u7528\u7d22\u5f15\u6765\u8bbf\u95ee\u6570\u7ec4\u7684\u5143\u7d20\uff0c\u50cf\u8fd9\u6837\uff1a fn main () { let a = [ 1 , 2 , 3 , 4 , 5 ]; let first = a [ 0 ]; let second = a [ 1 ]; } \u6570\u7ec4\u8d8a\u754c\u8bbf\u95ee \u8ba9\u6211\u4eec\u770b\u770b\u5982\u679c\u6211\u4eec\u8bbf\u95ee\u6570\u7ec4\u7ed3\u5c3e\u4e4b\u540e\u7684\u5143\u7d20\u4f1a\u53d1\u751f\u4ec0\u4e48\u5462\uff1f\u6bd4\u5982\u4f60\u6267\u884c\u4ee5\u4e0b\u4ee3\u7801\uff0c\u5b83\u4f7f\u7528\u7c7b\u4f3c\u4e8e\u7b2c 2 \u7ae0\u4e2d\u7684\u731c\u6570\u5b57\u6e38\u620f\u7684\u4ee3\u7801\u4ece\u7528\u6237\u90a3\u91cc\u83b7\u53d6\u6570\u7ec4\u7d22\u5f15\uff1a use std :: io ; fn main () { let a = [ 1 , 2 , 3 , 4 , 5 ]; println! ( \"\u8bf7\u8f93\u5165\u6570\u7ec4\u7d22\u5f15\" ); let mut index = String :: new (); io :: stdin () . read_line ( & mut index ) . expect ( \"\u8bfb\u53d6\u6570\u636e\u5931\u8d25\" ); let index : usize = index . trim () . parse () . expect ( \"\u8bf7\u8f93\u5165\u6570\u5b57\" ); let element = a [ index ]; println! ( \"\u6570\u7ec4\u4e2d\u7d22\u5f15\u4e3a {index} \u7684\u503c\u65f6: {element}\" ); } \u6b64\u4ee3\u7801\u7f16\u8bd1\u6210\u529f\u3002\u5982\u679c\u60a8\u4f7f\u7528 cargo run \u8fd0\u884c\u6b64\u4ee3\u7801\u5e76\u8f93\u5165 0\u30011\u30012\u30013 \u6216 4\uff0c\u7a0b\u5e8f\u5c06\u5728\u6570\u7ec4\u4e2d\u7684\u7d22\u5f15\u5904\u6253\u5370\u51fa\u76f8\u5e94\u7684\u503c\u3002\u5982\u679c\u4f60\u8f93\u5165\u4e00\u4e2a\u8d85\u8fc7\u6570\u7ec4\u672b\u7aef\u7684\u6570\u5b57\uff0c\u5982 10\uff0c\u4f60\u4f1a\u770b\u5230\u8fd9\u6837\u7684\u8f93\u51fa\uff1a thread 'main' panicked at 'index out of bounds: the len is 5 but the index is 10' , src/main.rs:19:19 note: run with ` RUST_BACKTRACE = 1 ` environment variable to display a backtrace \u7a0b\u5e8f\u5728\u7d22\u5f15\u64cd\u4f5c\u4e2d\u4f7f\u7528\u4e00\u4e2a\u65e0\u6548\u7684\u503c\u65f6\u5bfc\u81f4 \u8fd0\u884c\u65f6 \u9519\u8bef\u3002 \u7a0b\u5e8f\u5e26\u7740\u9519\u8bef\u4fe1\u606f\u9000\u51fa\uff0c\u5e76\u4e14\u6ca1\u6709\u6267\u884c\u6700\u540e\u7684 println! \u8bed\u53e5\u3002 \u5f53\u5c1d\u8bd5\u7528\u7d22\u5f15\u8bbf\u95ee\u4e00\u4e2a\u5143\u7d20\u65f6\uff0cRust \u4f1a\u68c0\u67e5\u6307\u5b9a\u7684\u7d22\u5f15\u662f\u5426\u5c0f\u4e8e\u6570\u7ec4\u7684\u957f\u5ea6\u3002 \u5982\u679c\u7d22\u5f15\u8d85\u51fa\u4e86\u6570\u7ec4\u957f\u5ea6\uff0cRust \u4f1a panic\uff0c\u8fd9\u662f Rust \u672f\u8bed\uff0c \u5b83\u7528\u4e8e\u7a0b\u5e8f\u56e0\u4e3a\u9519\u8bef\u800c\u9000\u51fa\u7684\u60c5\u51b5 \u3002 \u8fd9\u79cd\u68c0\u67e5\u5fc5\u987b\u5728\u8fd0\u884c\u65f6\u8fdb\u884c\uff0c\u7279\u522b\u662f\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u56e0\u4e3a\u7f16\u8bd1\u5668\u4e0d\u53ef\u80fd\u77e5\u9053\u7528\u6237\u5728\u4ee5\u540e\u8fd0\u884c\u4ee3\u7801\u65f6\u5c06\u8f93\u5165\u4ec0\u4e48\u503c\u3002 \u8fd9\u662f\u7b2c\u4e00\u4e2a\u5728\u5b9e\u6218\u4e2d\u9047\u5230\u7684 Rust \u5b89\u5168\u539f\u5219\u7684\u4f8b\u5b50\u3002 \u5728\u5f88\u591a\u5e95\u5c42\u8bed\u8a00\u4e2d\uff0c\u5e76\u6ca1\u6709\u8fdb\u884c\u8fd9\u7c7b\u68c0\u67e5\uff0c\u8fd9\u6837\u5f53\u63d0\u4f9b\u4e86\u4e00\u4e2a\u4e0d\u6b63\u786e\u7684\u7d22\u5f15\u65f6\uff0c\u5c31\u4f1a\u8bbf\u95ee\u65e0\u6548\u7684\u5185\u5b58\u3002 \u901a\u8fc7\u7acb\u5373\u9000\u51fa\u800c\u4e0d\u662f\u5141\u8bb8\u5185\u5b58\u8bbf\u95ee\u5e76\u7ee7\u7eed\u6267\u884c\uff0cRust \u8ba9\u4f60\u907f\u5f00\u6b64\u7c7b\u9519\u8bef\u3002 \u7b2c\u4e5d\u7ae0 \u4f1a\u66f4\u8be6\u7ec6\u5730\u8ba8\u8bba Rust \u7684\u9519\u8bef\u5904\u7406\u673a\u5236\uff0c\u4ee5\u53ca\u5982\u4f55\u7f16\u5199\u53ef\u8bfb\u6027\u5f3a\u800c\u53c8\u5b89\u5168\u7684\u4ee3\u7801\uff0c\u4f7f\u7a0b\u5e8f\u65e2\u4e0d\u4f1a panic \u4e5f\u4e0d\u4f1a\u5bfc\u81f4\u975e\u6cd5\u5185\u5b58\u8bbf\u95ee\u3002 \u51fd\u6570 \u51fd\u6570\u5728 Rust \u4ee3\u7801\u4e2d\u975e\u5e38\u666e\u904d\u3002\u4f60\u5df2\u7ecf\u89c1\u8fc7\u8bed\u8a00\u4e2d\u6700\u91cd\u8981\u7684\u51fd\u6570\u4e4b\u4e00\uff1a main \u51fd\u6570\uff0c\u5b83\u662f\u5f88\u591a\u7a0b\u5e8f\u7684\u5165\u53e3\u70b9\u3002\u4f60\u4e5f\u89c1\u8fc7 fn \u5173\u952e\u5b57\uff0c\u5b83\u7528\u6765\u58f0\u660e\u65b0\u51fd\u6570\u3002 Rust \u4ee3\u7801\u4e2d\u7684\u51fd\u6570\u548c\u53d8\u91cf\u540d\u4f7f\u7528 snake case \u89c4\u8303\u98ce\u683c\u3002\u5728 snake case \u4e2d\uff0c \u6240\u6709\u5b57\u6bcd\u90fd\u662f\u5c0f\u5199\u5e76\u4f7f\u7528\u4e0b\u5212\u7ebf\u5206\u9694\u5355\u8bcd \u3002\u8fd9\u662f\u4e00\u4e2a\u5305\u542b\u51fd\u6570\u5b9a\u4e49\u793a\u4f8b\u7684\u7a0b\u5e8f\uff1a \u6587\u4ef6\u540d: src/main.rs fn main () { println! ( \"Hello, world!\" ); another_function (); } // \u901a\u8fc7\u8f93\u5165 fn \u540e\u9762\u8ddf\u7740\u51fd\u6570\u540d\u548c\u4e00\u5bf9\u5706\u62ec\u53f7\u6765\u5b9a\u4e49\u51fd\u6570\u3002\u5927\u62ec\u53f7\u544a\u8bc9\u7f16\u8bd1\u5668\u54ea\u91cc\u662f\u51fd\u6570\u4f53\u7684\u5f00\u59cb\u548c\u7ed3\u5c3e\u3002 fn another_function () { println! ( \"Another function.\" ); } // main \u51fd\u6570\u4e2d\u7684\u4ee3\u7801\u4f1a\u6309\u987a\u5e8f\u6267\u884c\u3002\u9996\u5148\uff0c\u6253\u5370 \u201cHello, world!\u201d \u4fe1\u606f\uff0c\u7136\u540e\u8c03\u7528 another_function \u51fd\u6570\u5e76\u6253\u5370\u5b83\u7684\u4fe1\u606f\u3002 \u53ef\u4ee5\u4f7f\u7528\u51fd\u6570\u540d\u540e\u8ddf\u5706\u62ec\u53f7\u6765\u8c03\u7528\u6211\u4eec\u5b9a\u4e49\u8fc7\u7684\u4efb\u610f\u51fd\u6570\u3002 \u56e0\u4e3a\u7a0b\u5e8f\u4e2d\u5df2\u5b9a\u4e49 another_function \u51fd\u6570\uff0c\u6240\u4ee5\u53ef\u4ee5\u5728 main \u51fd\u6570\u4e2d\u8c03\u7528\u5b83\u3002\u6ce8\u610f\uff0c \u6e90\u7801\u4e2d another_function \u5b9a\u4e49\u5728 main \u51fd\u6570 \u4e4b\u540e\uff1b\u4e5f\u53ef\u4ee5\u5b9a\u4e49\u5728\u4e4b\u524d \u3002 Rust \u4e0d\u5173\u5fc3\u51fd\u6570\u5b9a\u4e49\u6240\u5728\u7684\u4f4d\u7f6e\uff0c\u53ea\u8981\u51fd\u6570\u88ab\u8c03\u7528\u65f6\u51fa\u73b0\u5728\u8c03\u7528\u4e4b\u5904\u53ef\u89c1\u7684\u4f5c\u7528\u57df\u5185\u5c31\u884c\u3002 \u53c2\u6570 \u6211\u4eec\u53ef\u4ee5\u5b9a\u4e49\u4e3a\u62e5\u6709 \u53c2\u6570 \uff08parameters\uff09\u7684\u51fd\u6570\uff0c\u53c2\u6570\u662f\u7279\u6b8a\u53d8\u91cf\uff0c\u662f\u51fd\u6570\u7b7e\u540d\u7684\u4e00\u90e8\u5206\u3002\u5f53\u51fd\u6570\u62e5\u6709\u53c2\u6570\uff08\u5f62\u53c2\uff09\u65f6\uff0c\u53ef\u4ee5\u4e3a\u8fd9\u4e9b\u53c2\u6570\u63d0\u4f9b\u5177\u4f53\u7684\u503c\uff08\u5b9e\u53c2\uff09\u3002 \u6280\u672f\u4e0a\u8bb2\uff0c\u8fd9\u4e9b\u5177\u4f53\u503c\u88ab\u79f0\u4e3a\u53c2\u6570\uff08arguments\uff09\uff0c\u4f46\u662f\u5728\u65e5\u5e38\u4ea4\u6d41\u4e2d\uff0c\u4eba\u4eec\u503e\u5411\u4e8e\u4e0d\u533a\u5206\u4f7f\u7528 parameter \u548c argument \u6765\u8868\u793a\u51fd\u6570\u5b9a\u4e49\u4e2d\u7684\u53d8\u91cf\u6216\u8c03\u7528\u51fd\u6570\u65f6\u4f20\u5165\u7684\u5177\u4f53\u503c\u3002 \u5728\u8fd9\u7248 another_function \u4e2d\uff0c\u6211\u4eec\u589e\u52a0\u4e86\u4e00\u4e2a\u53c2\u6570\uff1a fn main () { another_function ( 5 ); // \u6211\u4eec\u5c06 5 \u4f20\u7ed9 another_function \u65f6\uff0c // println! \u5b8f\u4f1a\u628a 5 \u653e\u5728\u683c\u5f0f\u5b57\u7b26\u4e32\u4e2d\u5305\u542b x \u7684\u90a3\u5bf9\u82b1\u62ec\u53f7\u7684\u4f4d\u7f6e\u3002 } // another_function \u7684\u58f0\u660e\u4e2d\u6709\u4e00\u4e2a\u547d\u540d\u4e3a x \u7684\u53c2\u6570\u3002 // x \u7684\u7c7b\u578b\u88ab\u6307\u5b9a\u4e3a i32\u3002 fn another_function ( x : i32 ) { println! ( \"The value of x is: {x}\" ); } \u5728\u51fd\u6570\u7b7e\u540d\u4e2d\uff0c \u5fc5\u987b \u58f0\u660e\u6bcf\u4e2a\u53c2\u6570\u7684\u7c7b\u578b\u3002 \u8fd9\u662f Rust \u8bbe\u8ba1\u4e2d\u4e00\u4e2a\u7ecf\u8fc7\u614e\u91cd\u8003\u8651\u7684\u51b3\u5b9a\uff1a \u8981\u6c42\u5728\u51fd\u6570\u5b9a\u4e49\u4e2d\u63d0\u4f9b\u7c7b\u578b\u6ce8\u89e3 \uff0c\u610f\u5473\u7740\u7f16\u8bd1\u5668\u518d\u4e5f\u4e0d\u9700\u8981\u4f60\u5728\u4ee3\u7801\u7684\u5176\u4ed6\u5730\u65b9\u6ce8\u660e\u7c7b\u578b\u6765\u6307\u51fa\u4f60\u7684\u610f\u56fe\u3002 \u800c\u4e14\uff0c\u5728\u77e5\u9053\u51fd\u6570\u9700\u8981\u4ec0\u4e48\u7c7b\u578b\u540e\uff0c\u7f16\u8bd1\u5668\u5c31\u80fd\u591f\u7ed9\u51fa\u66f4\u6709\u7528\u7684\u9519\u8bef\u6d88\u606f\u3002 \u5f53\u5b9a\u4e49\u591a\u4e2a\u53c2\u6570\u65f6\uff0c\u4f7f\u7528\u9017\u53f7\u5206\u9694\uff0c\u50cf\u8fd9\u6837\uff1a fn main () { print_labeled_measurement ( 5 , 'h' ); } // \u5b83\u6709\u4e24\u4e2a\u53c2\u6570\u3002\u7b2c\u4e00\u4e2a\u53c2\u6570\u540d\u4e3a value\uff0c \u7c7b\u578b\u662f i32\u3002 // \u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f unit_label \uff0c\u7c7b\u578b\u662f char\u3002 fn print_labeled_measurement ( value : i32 , unit_label : char ) { println! ( \"The measurement is: {value}{unit_label}\" ); } \u8bed\u53e5\u548c\u8868\u8fbe\u5f0f \u51fd\u6570\u4f53\u7531\u4e00\u7cfb\u5217\u7684 \u8bed\u53e5 \u548c\u4e00\u4e2a\u53ef\u9009\u7684 \u7ed3\u5c3e\u8868\u8fbe\u5f0f \u6784\u6210\u3002 \u76ee\u524d\u4e3a\u6b62\uff0c\u6211\u4eec\u63d0\u5230\u7684\u51fd\u6570\u8fd8\u4e0d\u5305\u542b\u7ed3\u5c3e\u8868\u8fbe\u5f0f\uff0c\u4e0d\u8fc7\u4f60\u5df2\u7ecf\u89c1\u8fc7\u4f5c\u4e3a\u8bed\u53e5\u4e00\u90e8\u5206\u7684\u8868\u8fbe\u5f0f\u3002 \u56e0\u4e3a Rust \u662f\u4e00\u95e8\u57fa\u4e8e \u8868\u8fbe\u5f0f \uff08expression-based\uff09\u7684\u8bed\u8a00\uff0c\u8fd9\u662f\u4e00\u4e2a\u9700\u8981\u7406\u89e3\u7684\uff08\u4e0d\u540c\u4e8e\u5176\u4ed6\u8bed\u8a00\uff09\u91cd\u8981\u533a\u522b\u3002 \u5176\u4ed6\u8bed\u8a00\u5e76\u6ca1\u6709\u8fd9\u6837\u7684\u533a\u522b\uff0c\u6240\u4ee5\u8ba9\u6211\u4eec\u770b\u770b\u8bed\u53e5\u4e0e\u8868\u8fbe\u5f0f\u6709\u4ec0\u4e48\u533a\u522b\u4ee5\u53ca\u8fd9\u4e9b\u533a\u522b\u662f\u5982\u4f55\u5f71\u54cd\u51fd\u6570\u4f53\u7684\u3002 \u8bed\u53e5 \uff08Statements\uff09\u662f\u6267\u884c\u4e00\u4e9b\u64cd\u4f5c\u4f46\u4e0d\u8fd4\u56de\u503c\u7684\u6307\u4ee4 \u3002 \u8868\u8fbe\u5f0f \uff08Expressions\uff09\u8ba1\u7b97\u5e76\u4ea7\u751f\u4e00\u4e2a\u503c\u3002 \u8ba9\u6211\u4eec\u770b\u4e00\u4e9b\u4f8b\u5b50\u3002 \u5b9e\u9645\u4e0a\uff0c\u6211\u4eec\u5df2\u7ecf\u4f7f\u7528\u8fc7\u8bed\u53e5\u548c\u8868\u8fbe\u5f0f\u3002\u4f7f\u7528 let \u5173\u952e\u5b57\u521b\u5efa\u53d8\u91cf\u5e76\u7ed1\u5b9a\u4e00\u4e2a\u503c\u662f\u4e00\u4e2a\u8bed\u53e5\u3002\u5728\u4e0b\u9762\u793a\u4f8b \u4e2d\uff0c let y = 6; \u662f\u4e00\u4e2a\u8bed\u53e5\u3002 fn main () { let y = 6 ; } // \u51fd\u6570\u5b9a\u4e49\u4e5f\u662f\u8bed\u53e5\uff0c\u4e0a\u9762\u6574\u4e2a\u4f8b\u5b50\u672c\u8eab\u5c31\u662f\u4e00\u4e2a\u8bed\u53e5\u3002 \u8bed\u53e5\u4e0d\u8fd4\u56de\u503c\u3002\u56e0\u6b64\uff0c\u4e0d\u80fd\u628a let \u8bed\u53e5\u8d4b\u503c\u7ed9\u53e6\u4e00\u4e2a\u53d8\u91cf\uff0c\u6bd4\u5982\u4e0b\u9762\u7684\u4f8b\u5b50\u5c1d\u8bd5\u505a\u7684\uff0c\u4f1a\u4ea7\u751f\u4e00\u4e2a\u9519\u8bef\uff1a fn main () { let x = ( let y = 6 ); } \u5f53\u8fd0\u884c\u8fd9\u4e2a\u7a0b\u5e8f\u65f6\uff0c\u4f1a\u5f97\u5230\u5982\u4e0b\u9519\u8bef\uff1a $ cargo run Compiling functions v0.1.0 ( file:///projects/functions ) error: expected expression, found statement ( ` let ` ) --> src/main.rs:2:14 | 2 | let x = ( let y = 6 ) ; | ^^^^^^^^^ | = note: variable declaration using ` let ` is a statement error [ E0658 ] : ` let ` expressions in this position are unstable --> src/main.rs:2:14 | 2 | let x = ( let y = 6 ) ; | ^^^^^^^^^ | = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information warning: unnecessary parentheses around assigned value --> src/main.rs:2:13 | 2 | let x = ( let y = 6 ) ; | ^ ^ | = note: ` #[warn(unused_parens)]` on by default help: remove these parentheses | 2 - let x = ( let y = 6 ) ; 2 + let x = let y = 6 ; | For more information about this error, try ` rustc --explain E0658 ` . warning: ` functions ` ( bin \"functions\" ) generated 1 warning error: could not compile ` functions ` due to 2 previous errors ; 1 warning emitted let y = 6 \u8bed\u53e5\u5e76\u4e0d\u8fd4\u56de\u503c\uff0c\u6240\u4ee5\u6ca1\u6709\u53ef\u4ee5\u7ed1\u5b9a\u5230 x \u4e0a\u7684\u503c\u3002 \u8fd9\u4e0e\u5176\u4ed6\u8bed\u8a00\u4e0d\u540c\uff0c\u4f8b\u5982 C \u548c Ruby\uff0c\u5b83\u4eec\u7684\u8d4b\u503c\u8bed\u53e5\u4f1a\u8fd4\u56de\u6240\u8d4b\u7684\u503c\u3002 \u5728\u8fd9\u4e9b\u8bed\u8a00\u4e2d\uff0c\u53ef\u4ee5\u8fd9\u4e48\u5199 x = y = 6\uff0c\u8fd9\u6837 x \u548c y \u7684\u503c\u90fd\u662f 6\uff1bRust \u4e2d\u4e0d\u80fd\u8fd9\u6837\u5199\u3002 \u8868\u8fbe\u5f0f\u4f1a\u8ba1\u7b97\u51fa\u4e00\u4e2a\u503c\uff0c\u5e76\u4e14\u4f60\u5c06\u7f16\u5199\u7684\u5927\u90e8\u5206 Rust \u4ee3\u7801\u662f\u7531\u8868\u8fbe\u5f0f\u7ec4\u6210\u7684\u3002 \u8003\u8651\u4e00\u4e2a\u6570\u5b66\u8fd0\u7b97\uff0c\u6bd4\u5982 5 + 6\uff0c\u8fd9\u662f\u4e00\u4e2a\u8868\u8fbe\u5f0f\u5e76\u8ba1\u7b97\u51fa\u503c 11\u3002 \u8868\u8fbe\u5f0f\u53ef\u4ee5\u662f\u8bed\u53e5\u7684\u4e00\u90e8\u5206\uff1a\u5728\u4e0a\u9762\u4e2d\uff0c\u8bed\u53e5 let y = 6; \u4e2d\u7684 6 \u662f\u4e00\u4e2a\u8868\u8fbe\u5f0f\uff0c\u5b83\u8ba1\u7b97\u51fa\u7684\u503c\u662f 6\u3002 \u51fd\u6570\u8c03\u7528\u662f\u4e00\u4e2a\u8868\u8fbe\u5f0f \u3002 \u5b8f\u8c03\u7528\u662f\u4e00\u4e2a\u8868\u8fbe\u5f0f \u3002 \u7528\u5927\u62ec\u53f7\u521b\u5efa\u7684\u4e00\u4e2a\u65b0\u7684\u5757\u4f5c\u7528\u57df\u4e5f\u662f\u4e00\u4e2a\u8868\u8fbe\u5f0f \uff0c\u4f8b\u5982\uff1a fn main () { let y = { let x = 3 ; x + 1 }; // \u662f\u4e00\u4e2a\u4ee3\u7801\u5757\uff0c\u5b83\u7684\u503c\u662f 4 // \u8fd9\u4e2a\u503c\u4f5c\u4e3a let \u8bed\u53e5\u7684\u4e00\u90e8\u5206\u88ab\u7ed1\u5b9a\u5230 y \u4e0a\u3002 // \u6ce8\u610f x+1 \u8fd9\u4e00\u884c\u5728\u7ed3\u5c3e\u6ca1\u6709\u5206\u53f7\uff0c\u4e0e\u4f60\u89c1\u8fc7\u7684\u5927\u90e8\u5206\u4ee3\u7801\u884c\u4e0d\u540c\u3002 // \u8868\u8fbe\u5f0f\u7684\u7ed3\u5c3e\u6ca1\u6709\u5206\u53f7\u3002 // \u5982\u679c\u5728\u8868\u8fbe\u5f0f\u7684\u7ed3\u5c3e\u52a0\u4e0a\u5206\u53f7\uff0c\u5b83\u5c31\u53d8\u6210\u4e86\u8bed\u53e5\uff0c\u800c\u8bed\u53e5\u4e0d\u4f1a\u8fd4\u56de\u503c\u3002 // \u5728\u63a5\u4e0b\u6765\u63a2\u7d22\u5177\u6709\u8fd4\u56de\u503c\u7684\u51fd\u6570\u548c\u8868\u8fbe\u5f0f\u65f6\u8981\u8c28\u8bb0\u8fd9\u4e00\u70b9\u3002 println! ( \"The value of y is: {y}\" ); } \u5177\u6709\u8fd4\u56de\u503c\u7684\u51fd\u6570 \u51fd\u6570\u53ef\u4ee5\u5411\u8c03\u7528\u5b83\u7684\u4ee3\u7801\u8fd4\u56de\u503c\u3002\u6211\u4eec \u5e76\u4e0d\u5bf9\u8fd4\u56de\u503c\u547d\u540d\uff0c\u4f46\u8981\u5728\u7bad\u5934\uff08->\uff09\u540e\u58f0\u660e\u5b83\u7684\u7c7b\u578b \u3002 \u5728 Rust \u4e2d\uff0c \u51fd\u6570\u7684\u8fd4\u56de\u503c\u7b49\u540c\u4e8e\u51fd\u6570\u4f53\u6700\u540e\u4e00\u4e2a\u8868\u8fbe\u5f0f\u7684\u503c \u3002 \u4f7f\u7528 return \u5173\u952e\u5b57\u548c\u6307\u5b9a\u503c\uff0c\u53ef\u4ece\u51fd\u6570\u4e2d\u63d0\u524d\u8fd4\u56de\uff1b \u4f46\u5927\u90e8\u5206\u51fd\u6570\u9690\u5f0f\u7684\u8fd4\u56de\u6700\u540e\u7684\u8868\u8fbe\u5f0f\u3002 \u8fd9\u662f\u4e00\u4e2a\u6709\u8fd4\u56de\u503c\u7684\u51fd\u6570\u7684\u4f8b\u5b50\uff1a // \u5728 five \u51fd\u6570\u4e2d\u6ca1\u6709\u51fd\u6570\u8c03\u7528\u3001\u5b8f\u3001\u751a\u81f3\u6ca1\u6709 let \u8bed\u53e5 \u2014\u2014 \u53ea\u6709\u6570\u5b57 5\u3002 // \u8fd9\u5728 Rust \u4e2d\u662f\u4e00\u4e2a\u5b8c\u5168\u6709\u6548\u7684\u51fd\u6570\u3002 // \u6ce8\u610f\uff0c\u4e5f\u6307\u5b9a\u4e86\u51fd\u6570\u8fd4\u56de\u503c\u7684\u7c7b\u578b\uff0c\u5c31\u662f -> i32\u3002 fn five () -> i32 { 5 // five \u51fd\u6570\u6ca1\u6709\u53c2\u6570\u5e76\u5b9a\u4e49\u4e86\u8fd4\u56de\u503c\u7c7b\u578b\uff0c\u4e0d\u8fc7\u51fd\u6570\u4f53\u53ea\u6709\u5355\u5355\u4e00\u4e2a 5 \u4e5f\u6ca1\u6709\u5206\u53f7\uff0c\u56e0\u4e3a\u8fd9\u662f\u4e00\u4e2a\u8868\u8fbe\u5f0f\uff0c\u6211\u4eec\u60f3\u8981\u8fd4\u56de\u5b83\u7684\u503c\u3002 } fn main () { // \u8fd9\u4e00\u884c\u8868\u660e\u6211\u4eec\u4f7f\u7528\u51fd\u6570\u7684\u8fd4\u56de\u503c\u521d\u59cb\u5316\u4e00\u4e2a\u53d8\u91cf\u3002 // \u56e0\u4e3a five \u51fd\u6570\u8fd4\u56de 5\uff0c\u8fd9\u4e00\u884c\u4e0e\u4ee3\u7801 let x = 5; \u76f8\u540c let x = five (); println! ( \"The value of x is: {x}\" ); } \u8ba9\u6211\u4eec\u770b\u770b\u53e6\u4e00\u4e2a\u4f8b\u5b50\uff1a fn main () { let x = plus_one ( 5 ); println! ( \"The value of x is: {x}\" ); } fn plus_one ( x : i32 ) -> i32 { x + 1 // \u5982\u679c\u5728\u5305\u542b x + 1 \u7684\u884c\u5c3e\u52a0\u4e0a\u4e00\u4e2a\u5206\u53f7\uff0c\u628a\u5b83\u4ece\u8868\u8fbe\u5f0f\u53d8\u6210\u8bed\u53e5\uff0c\u6211\u4eec\u5c06\u770b\u5230\u4e00\u4e2a\u9519\u8bef\u3002 } \u6ce8\u91ca \u7a0b\u5e8f\u5458\u5728\u6e90\u7801\u4e2d\u7559\u4e0b \u6ce8\u91ca \uff08comments\uff09\uff0c\u7f16\u8bd1\u5668\u4f1a\u5ffd\u7565\u5b83\u4eec\uff0c\u4e0d\u8fc7\u9605\u8bfb\u4ee3\u7801\u7684\u4eba\u53ef\u80fd\u89c9\u5f97\u6709\u7528\u3002 \u5355\u884c\u6ce8\u91ca \u60ef\u7528\u7684\u6ce8\u91ca\u6837\u5f0f\u662f\u4ee5\u4e24\u4e2a\u659c\u6760\u5f00\u59cb\u6ce8\u91ca\uff0c\u5e76\u6301\u7eed\u5230\u672c\u884c\u7684\u7ed3\u5c3e\u3002\u5bf9\u4e8e\u8d85\u8fc7\u4e00\u884c\u7684\u6ce8\u91ca\uff0c\u9700\u8981\u5728\u6bcf\u4e00\u884c\u524d\u90fd\u52a0\u4e0a // // So we\u2019re doing something complicated here, long enough that we need // multiple lines of comments to do it! Whew! Hopefully, this comment will // explain what\u2019s going on. \u6ce8\u91ca\u4e5f\u53ef\u4ee5\u653e\u5728\u5305\u542b\u4ee3\u7801\u7684\u884c\u7684\u672b\u5c3e\uff1a fn main () { let lucky_number = 7 ; // I\u2019m feeling lucky today } \u6587\u6863\u6ce8\u91ca \u63a7\u5236\u6d41 \u6839\u636e\u6761\u4ef6\u662f\u5426\u4e3a\u771f\u6765\u51b3\u5b9a\u662f\u5426\u6267\u884c\u67d0\u4e9b\u4ee3\u7801\uff0c\u4ee5\u53ca\u6839\u636e\u6761\u4ef6\u662f\u5426\u4e3a\u771f\u6765\u91cd\u590d\u8fd0\u884c\u4e00\u6bb5\u4ee3\u7801\u7684\u80fd\u529b\u662f\u5927\u90e8\u5206\u7f16\u7a0b\u8bed\u8a00\u7684\u57fa\u672c\u7ec4\u6210\u90e8\u5206\u3002 if\u8868\u8fbe\u5f0f if \u8868\u8fbe\u5f0f\u5141\u8bb8\u6839\u636e\u6761\u4ef6\u6267\u884c\u4e0d\u540c\u7684\u4ee3\u7801\u5206\u652f\u3002 fn main () { let number = 3 ; // \u6240\u6709\u7684 if \u8868\u8fbe\u5f0f\u90fd\u4ee5 if \u5173\u952e\u5b57\u5f00\u5934\uff0c\u5176\u540e\u8ddf\u4e00\u4e2a\u6761\u4ef6\u3002 if number < 5 { // \u5728\u6761\u4ef6\u4e3a\u771f\u65f6\u5e0c\u671b\u6267\u884c\u7684\u4ee3\u7801\u5757\u4f4d\u4e8e\u7d27\u8ddf\u6761\u4ef6\u4e4b\u540e\u7684\u5927\u62ec\u53f7\u4e2d\u3002 println! ( \"condition was true\" ); } else { // \u4e00\u4e2a\u53ef\u9009\u7684 else \u8868\u8fbe\u5f0f\u6765\u63d0\u4f9b\u4e00\u4e2a\u5728\u6761\u4ef6\u4e3a\u5047\u65f6\u5e94\u5f53\u6267\u884c\u7684\u4ee3\u7801\u5757 println! ( \"condition was false\" ); } } \u503c\u5f97\u6ce8\u610f\u7684\u662f\u4ee3\u7801\u4e2d\u7684\u6761\u4ef6 \u5fc5\u987b \u662f bool \u503c\u3002\u5982\u679c\u6761\u4ef6\u4e0d\u662f bool \u503c\uff0c\u6211\u4eec\u5c06\u5f97\u5230\u4e00\u4e2a\u9519\u8bef\u3002 fn main () { let number = 3 ; // \u4f1a\u62a5\uff0cexpected `bool`, found integer \u9519\u8bef\u3002 // Rust \u5e76\u4e0d\u4f1a\u5c1d\u8bd5\u81ea\u52a8\u5730\u5c06\u975e\u5e03\u5c14\u503c\u8f6c\u6362\u4e3a\u5e03\u5c14\u503c\u3002 // \u5fc5\u987b\u603b\u662f\u663e\u5f0f\u5730\u4f7f\u7528\u5e03\u5c14\u503c\u4f5c\u4e3a if \u7684\u6761\u4ef6\u3002 if number { println! ( \"number was three\" ); } } else if \u8868\u8fbe\u5f0f \u53ef\u4ee5\u5c06 else if \u8868\u8fbe\u5f0f\u4e0e if \u548c else \u7ec4\u5408\u6765\u5b9e\u73b0\u591a\u91cd\u6761\u4ef6\u3002 fn main () { let number = 6 ; // \u6309\u987a\u5e8f\u68c0\u67e5\u6bcf\u4e2a if \u8868\u8fbe\u5f0f\u5e76\u6267\u884c\u7b2c\u4e00\u4e2a\u6761\u4ef6\u4e3a\u771f\u7684\u4ee3\u7801\u5757\u3002 if number % 4 == 0 { println! ( \"number is divisible by 4\" ); } else if number % 3 == 0 { println! ( \"number is divisible by 3\" ); } else if number % 2 == 0 { println! ( \"number is divisible by 2\" ); } else { println! ( \"number is not divisible by 4, 3, or 2\" ); } // Rust \u53ea\u4f1a\u6267\u884c\u7b2c\u4e00\u4e2a\u6761\u4ef6\u4e3a\u771f\u7684\u4ee3\u7801\u5757\uff0c\u5e76\u4e14\u4e00\u65e6\u5b83\u627e\u5230\u4e00\u4e2a\u4ee5\u540e\uff0c\u751a\u81f3\u90fd\u4e0d\u4f1a\u68c0\u67e5\u5269\u4e0b\u7684\u6761\u4ef6\u4e86\u3002 } \u4f7f\u7528\u8fc7\u591a\u7684 else if \u8868\u8fbe\u5f0f\u4f1a\u4f7f\u4ee3\u7801\u663e\u5f97\u6742\u4e71\u65e0\u7ae0\uff0c\u6240\u4ee5\u5982\u679c\u6709\u591a\u4e8e\u4e00\u4e2a else if \u8868\u8fbe\u5f0f\uff0c\u6700\u597d\u91cd\u6784\u4ee3\u7801\u3002 \u4e3a\u6b64\uff0c\u7b2c\u516d\u7ae0\u4f1a\u4ecb\u7ecd\u4e00\u4e2a\u5f3a\u5927\u7684 Rust \u5206\u652f\u7ed3\u6784\uff08branching construct\uff09\uff0c\u53eb\u505a match \u3002 let\u4e2d\u7684if \u56e0\u4e3a if \u662f\u4e00\u4e2a\u8868\u8fbe\u5f0f\uff0c\u53ef\u4ee5\u5728 let \u8bed\u53e5\u7684\u53f3\u4fa7\u4f7f\u7528\u5b83\uff0c fn main () { let condition = true ; let number = if condition { 5 } else { 6 }; // \u5c06 if \u8868\u8fbe\u5f0f\u7684\u8fd4\u56de\u503c\u8d4b\u7ed9\u4e00\u4e2a\u53d8\u91cf // \u4ee3\u7801\u5757\u7684\u503c\u662f\u5176\u6700\u540e\u4e00\u4e2a\u8868\u8fbe\u5f0f\u7684\u503c\uff0c\u800c\u6570\u5b57\u672c\u8eab\u5c31\u662f\u4e00\u4e2a\u8868\u8fbe\u5f0f\u3002 println! ( \"The value of number is: {number}\" ); } \u7c7b\u578b\u9700\u7edf\u4e00 fn main () { let condition = true ; let number = if condition { 5 } else { \"six\" }; // \u7c7b\u578b\u4e0d\u7edf\u4e00\uff0c\u4f1a\u62a5\u9519\uff0cexpected integer, found `&str` println! ( \"The value of number is: {number}\" ); } \u5faa\u73af\u8868\u8fbe\u5f0f \u591a\u6b21\u6267\u884c\u540c\u4e00\u6bb5\u4ee3\u7801\u662f\u5f88\u5e38\u7528\u7684\uff0cRust \u4e3a\u6b64\u63d0\u4f9b\u4e86\u591a\u79cd \u5faa\u73af\uff08loops\uff09\u3002 loop \u5faa\u73af loop \u5173\u952e\u5b57\u544a\u8bc9 Rust \u4e00\u904d\u53c8\u4e00\u904d\u5730\u6267\u884c\u4e00\u6bb5\u4ee3\u7801\u76f4\u5230\u4f60\u660e\u786e\u8981\u6c42\u505c\u6b62\u3002 fn main () { loop { // \u4f1a\u770b\u5230\u8fde\u7eed\u7684\u53cd\u590d\u6253\u5370 again!\uff0c\u76f4\u5230\u6211\u4eec\u624b\u52a8\u505c\u6b62\u7a0b\u5e8f\u3002 // \u5927\u90e8\u5206\u7ec8\u7aef\u90fd\u652f\u6301\u4e00\u4e2a\u5feb\u6377\u952e\uff0cctrl-c\uff0c\u6765\u7ec8\u6b62\u4e00\u4e2a\u9677\u5165\u65e0\u9650\u5faa\u73af\u7684\u7a0b\u5e8f\u3002 println! ( \"again!\" ); } } break \u5173\u952e\u5b57\u6765\u544a\u8bc9\u7a0b\u5e8f\u4f55\u65f6\u505c\u6b62\u5faa\u73af\u3002 continue \u5173\u952e\u5b57\u544a\u8bc9\u7a0b\u5e8f\u8df3\u8fc7\u8fd9\u4e2a\u5faa\u73af\u8fed\u4ee3\u4e2d\u7684\u4efb\u4f55\u5269\u4f59\u4ee3\u7801\uff0c\u5e76\u8f6c\u5230\u4e0b\u4e00\u4e2a\u8fed\u4ee3\u3002 \u4ece\u5faa\u73af\u8fd4\u56de\u503c loop \u7684\u4e00\u4e2a\u7528\u4f8b\u662f\u91cd\u8bd5\u53ef\u80fd\u4f1a\u5931\u8d25\u7684\u64cd\u4f5c\uff0c\u6bd4\u5982\u68c0\u67e5\u7ebf\u7a0b\u662f\u5426\u5b8c\u6210\u4e86\u4efb\u52a1\u3002\u7136\u800c\u4f60\u53ef\u80fd\u4f1a\u9700\u8981\u5c06\u64cd\u4f5c\u7684\u7ed3\u679c\u4f20\u9012\u7ed9\u5176\u5b83\u7684\u4ee3\u7801\u3002\u5982\u679c\u5c06\u8fd4\u56de\u503c\u52a0\u5165\u4f60\u7528\u6765\u505c\u6b62\u5faa\u73af\u7684 break \u8868\u8fbe\u5f0f\uff0c\u5b83\u4f1a\u88ab\u505c\u6b62\u7684\u5faa\u73af\u8fd4\u56de\uff1a fn main () { // \u4e00\u4e2a\u540d\u4e3a counter \u7684\u53d8\u91cf\u5e76\u521d\u59cb\u5316\u4e3a 0 let mut counter = 0 ; // \u63a5\u7740\u58f0\u660e\u4e86\u4e00\u4e2a\u540d\u4e3a result \u6765\u5b58\u653e\u5faa\u73af\u7684\u8fd4\u56de\u503c\u3002 let result = loop { // \u5728\u5faa\u73af\u7684\u6bcf\u4e00\u6b21\u8fed\u4ee3\u4e2d\uff0c\u6211\u4eec\u5c06 counter \u53d8\u91cf\u52a0 1 counter += 1 ; // \u63a5\u7740\u68c0\u67e5\u8ba1\u6570\u662f\u5426\u7b49\u4e8e 10\u3002 if counter == 10 { // \u4f7f\u7528 break \u5173\u952e\u5b57\u8fd4\u56de\u503c counter * 2 break counter * 2 ; // \u901a\u8fc7\u5206\u53f7\u7ed3\u675f\u8d4b\u503c\u7ed9 result \u7684\u8bed\u53e5\u3002 } }; // \u6700\u540e\u6253\u5370\u51fa result \u7684\u503c\uff0c\u4e5f\u5c31\u662f 20\u3002 println! ( \"The result is {result}\" ); } \u5faa\u73af\u6807\u7b7e \u5982\u679c\u5b58\u5728\u5d4c\u5957\u5faa\u73af\uff0c break \u548c continue \u5e94\u7528\u4e8e\u6b64\u65f6\u6700\u5185\u5c42\u7684\u5faa\u73af\u3002\u4f60\u53ef\u4ee5\u9009\u62e9\u5728\u4e00\u4e2a\u5faa\u73af\u4e0a\u6307\u5b9a\u4e00\u4e2a \u5faa\u73af\u6807\u7b7e \uff08loop label\uff09\uff0c\u7136\u540e\u5c06\u6807\u7b7e\u4e0e break \u6216 continue \u4e00\u8d77\u4f7f\u7528\uff0c\u4f7f\u8fd9\u4e9b\u5173\u952e\u5b57\u5e94\u7528\u4e8e\u5df2\u6807\u8bb0\u7684\u5faa\u73af\u800c\u4e0d\u662f\u6700\u5185\u5c42\u7684\u5faa\u73af\u3002 fn main () { let mut count = 0 ; // \u5916\u5c42\u5faa\u73af\u6709\u4e00\u4e2a\u6807\u7b7e counting_up ' counting_up : loop { println! ( \"count = {count}\" ); let mut remaining = 10 ; // \u6ca1\u6709\u6807\u7b7e\u7684\u5185\u90e8\u5faa\u73af\u4ece 10 \u5411\u4e0b\u6570\u5230 9\u3002 loop { println! ( \"remaining = {remaining}\" ); if remaining == 9 { // \u6ca1\u6709\u6307\u5b9a\u6807\u7b7e\u7684 break \u5c06\u53ea\u9000\u51fa\u5185\u5c42\u5faa\u73af\u3002 break ; } if count == 2 { // break 'counting_up; \u8bed\u53e5\u5c06\u9000\u51fa\u5916\u5c42\u5faa\u73af\u3002 break 'counting_up ; } remaining -= 1 ; } count += 1 ; } println! ( \"End count = {count}\" ); } while \u5faa\u73af \u5f53\u6761\u4ef6\u4e3a\u771f\uff0c\u6267\u884c\u5faa\u73af\u3002\u5f53\u6761\u4ef6\u4e0d\u518d\u4e3a\u771f\uff0c\u8c03\u7528 break \u505c\u6b62\u5faa\u73af\u3002 \u6bd4\u5982\uff1a fn main () { let mut number = 3 ; // \u5f53\u6761\u4ef6\u4e3a\u771f\u65f6\uff0c\u4f7f\u7528 while \u5faa\u73af\u8fd0\u884c\u4ee3\u7801 // \u8fd9\u79cd\u7ed3\u6784\u6d88\u9664\u4e86\u5f88\u591a\u4f7f\u7528 loop\u3001if\u3001else \u548c break \u65f6\u6240\u5fc5\u987b\u7684\u5d4c\u5957\uff0c\u8fd9\u6837\u66f4\u52a0\u6e05\u6670\u3002 while number != 0 { println! ( \"{number}!\" ); number -= 1 ; } println! ( \"LIFTOFF!!!\" ); } for \u5faa\u73af \u53ef\u4ee5\u4f7f\u7528 for \u5faa\u73af\u6765\u5bf9\u4e00\u4e2a\u96c6\u5408\u7684\u6bcf\u4e2a\u5143\u7d20\u6267\u884c\u4e00\u4e9b\u4ee3\u7801\u3002 fn main () { let a = [ 10 , 20 , 30 , 40 , 50 ]; for element in a { println! ( \"the value is: {element}\" ); } } for \u5faa\u73af\u7684\u5b89\u5168\u6027\u548c\u7b80\u6d01\u6027\u4f7f\u5f97\u5b83\u6210\u4e3a Rust \u4e2d\u5728\u7528\u4e8e\u904d\u5386\u6570\u7ec4\u65f6\u662f\u4f7f\u7528\u6700\u591a\u7684\u5faa\u73af\u7ed3\u6784\u3002 \u53e6\u4e00\u4e2a\u4f8b\u5b50\uff1a fn main () { // \u904d\u5386\u6807\u51c6\u5e93\u63d0\u4f9b\u7684\u7c7b\u578bRange\u7c7b\u578b // \u7528\u6765\u751f\u6210\u4ece\u4e00\u4e2a\u6570\u5b57\u5f00\u59cb\u5230\u53e6\u4e00\u4e2a\u6570\u5b57\u4e4b\u524d\u7ed3\u675f\u7684\u6240\u6709\u6570\u5b57\u7684\u5e8f\u5217\u3002 // rev\uff0c\u7528\u6765\u53cd\u8f6c range for number in ( 1 .. 4 ). rev () { println! ( \"{number}!\" ); } println! ( \"LIFTOFF!!!\" ); }","title":"\u5e38\u89c1\u7f16\u7a0b\u6982\u5ff5"},{"location":"common-programing-concepts/#_1","text":"","title":"\u5e38\u89c1\u7f16\u7a0b\u6982\u5ff5"},{"location":"common-programing-concepts/#_2","text":"\u53d8\u91cf\u9ed8\u8ba4\u662f\u4e0d\u53ef\u6539\u53d8\u7684\uff08immutable\uff09\u3002 \u5f53\u53d8\u91cf\u4e0d\u53ef\u53d8\u65f6\uff0c\u4e00\u65e6\u503c\u88ab\u7ed1\u5b9a\u4e00\u4e2a\u540d\u79f0\u4e0a\uff0c\u4f60\u5c31\u4e0d\u80fd\u6539\u53d8\u8fd9\u4e2a\u503c\u3002 \u6587\u4ef6\u540d: src/main.rs fn main () { let x = 5 ; println! ( \"The value of x is: {x}\" ); x = 6 ; // \u9519\u8bef, \u4e0d\u80fd\u5bf9\u4e0d\u53ef\u53d8\u53d8\u91cf x \u4e8c\u6b21\u8d4b\u503c\uff08cannot assign twice to immutable variable `x` \uff09 println! ( \"The value of x is: {x}\" ); } \u4e0d\u8fc7\u53ef\u53d8\u6027\u4e5f\u662f\u975e\u5e38\u6709\u7528\u7684\uff0c\u53ef\u4ee5\u7528\u6765\u66f4\u65b9\u4fbf\u5730\u7f16\u5199\u4ee3\u7801\u3002\u5c3d\u7ba1\u53d8\u91cf\u9ed8\u8ba4\u662f\u4e0d\u53ef\u53d8\u7684\uff0c\u4f60\u4ecd\u7136\u53ef\u4ee5\u5728\u53d8\u91cf\u540d\u524d\u6dfb\u52a0 mut \u6765\u4f7f\u5176\u53ef\u53d8: fn main () { let mut x = 5 ; // \u6dfb\u52a0mut\uff0c\u4f7f\u5176\u53ef\u53d8\u3002\uff08\u8fdb\u884c\u591a\u6b21\u8d4b\u503c\uff09 println! ( \"The value of x is: {x}\" ); x = 6 ; println! ( \"The value of x is: {x}\" ); }","title":"\u53d8\u91cf\u548c\u53ef\u53d8\u6027"},{"location":"common-programing-concepts/#_3","text":"\u7c7b\u4f3c\u4e8e\u4e0d\u53ef\u53d8\u53d8\u91cf\uff0c\u5e38\u91cf(constants) \u662f\u7ed1\u5b9a\u5230\u4e00\u4e2a\u540d\u79f0\u7684\u4e0d\u5141\u8bb8\u6539\u53d8\u7684\u503c\uff0c\u4e0d\u8fc7\u5e38\u91cf\u4e0e\u53d8\u91cf\u8fd8\u662f\u6709\u4e00\u4e9b\u533a\u522b\u3002 \u4e0d\u5141\u8bb8\u5bf9\u5e38\u91cf\u4f7f\u7528 mut\u3002\u5e38\u91cf\u4e0d\u5149\u9ed8\u8ba4\u4e0d\u80fd\u53d8\uff0c\u5b83\u603b\u662f\u4e0d\u80fd\u53d8\u3002 \u5e38\u91cf\u4f7f\u7528 const \u5173\u952e\u5b57\u800c\u4e0d\u662f let \uff0c\u5e76\u4e14 \u5fc5\u987b \u6ce8\u660e\u503c\u7684\u7c7b\u578b\u3002 \u5e38\u91cf\u53ef\u4ee5\u5728\u4efb\u4f55\u4f5c\u7528\u57df\u4e2d\u58f0\u660e\uff0c\u5305\u62ec\u5168\u5c40\u4f5c\u7528\u57df\uff0c\u8fd9\u5728\u4e00\u4e2a\u503c\u9700\u8981\u88ab\u5f88\u591a\u90e8\u5206\u7684\u4ee3\u7801\u7528\u5230\u65f6\u5f88\u6709\u7528\u3002 \u5e38\u91cf\u53ea\u80fd\u88ab\u8bbe\u7f6e\u4e3a\u5e38\u91cf\u8868\u8fbe\u5f0f\uff0c\u800c\u4e0d\u53ef\u4ee5\u662f\u5176\u4ed6\u4efb\u4f55\u53ea\u80fd\u5728\u8fd0\u884c\u65f6\u8ba1\u7b97\u51fa\u7684\u503c\u3002 \u4f8b\u5982\uff1a const THREE_HOURS_IN_SECONDS : u32 = 60 * 60 * 3 ; Rust \u5bf9\u5e38\u91cf\u7684\u547d\u540d\u7ea6\u5b9a\u662f\u5728\u5355\u8bcd\u4e4b\u95f4\u4f7f\u7528\u5168\u5927\u5199\u52a0\u4e0b\u5212\u7ebf \u6709\u5173\u58f0\u660e\u5e38\u91cf\u65f6\u53ef\u4ee5\u4f7f\u7528\u54ea\u4e9b\u64cd\u4f5c\u7684\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605 Rust Reference \u7684\u5e38\u91cf\u6c42\u503c\u90e8\u5206 \u3002","title":"\u5e38\u91cf"},{"location":"common-programing-concepts/#_4","text":"\u53ef\u4ee5\u5b9a\u4e49\u4e00\u4e2a\u4e0e\u4e4b\u524d\u53d8\u91cf\u540c\u540d\u7684\u65b0\u53d8\u91cf\u3002\u79f0\u4e4b\u4e3a\u7b2c\u4e00\u4e2a\u53d8\u91cf\u88ab\u7b2c\u4e8c\u4e2a \u9690\u85cf \uff08Shadowing\uff09\u4e86, \u8fd9\u610f\u5473\u7740\u5728\u4f7f\u7528\u53d8\u91cf\u7684\u540d\u79f0\u65f6\uff0c\u7f16\u8bd1\u5668\u5c06\u770b\u5230\u7b2c\u4e8c\u4e2a\u53d8\u91cf\u3002 \u5b9e\u9645\u4e0a\uff0c\u7b2c\u4e8c\u4e2a\u53d8\u91cf\u201c\u906e\u853d\u201d\u4e86\u7b2c\u4e00\u4e2a\u53d8\u91cf\uff0c\u6b64\u65f6\u4efb\u4f55\u4f7f\u7528\u8be5\u53d8\u91cf\u540d\u7684\u884c\u4e3a\u4e2d\u90fd\u4f1a\u89c6\u4e3a\u662f\u5728\u4f7f\u7528\u7b2c\u4e8c\u4e2a\u53d8\u91cf\uff0c\u76f4\u5230\u7b2c\u4e8c\u4e2a\u53d8\u91cf\u81ea\u5df1\u4e5f\u88ab\u9690\u85cf\u6216\u7b2c\u4e8c\u4e2a\u53d8\u91cf\u7684\u4f5c\u7528\u57df\u7ed3\u675f\u3002 \u53ef\u4ee5\u7528\u76f8\u540c\u53d8\u91cf\u540d\u79f0\u6765\u9690\u85cf\u4e00\u4e2a\u53d8\u91cf\uff0c\u4ee5\u53ca\u91cd\u590d\u4f7f\u7528 let \u5173\u952e\u5b57\u6765\u591a\u6b21\u9690\u85cf\uff0c\u5982\u4e0b\u6240\u793a\uff1a fn main () { let x = 5 ; // \u9996\u5148\u5c06 x \u7ed1\u5b9a\u5230\u503c 5 \u4e0a let x = x + 1 ; // \u63a5\u7740\u901a\u8fc7 let x = \u521b\u5efa\u4e86\u4e00\u4e2a\u65b0\u53d8\u91cf x\uff0c\u83b7\u53d6\u521d\u59cb\u503c\u5e76\u52a0 1\uff0c\u8fd9\u6837 x \u7684\u503c\u5c31\u53d8\u6210 6 \u4e86 { // \u7136\u540e\uff0c\u5728\u4f7f\u7528\u82b1\u62ec\u53f7\u521b\u5efa\u7684\u5185\u90e8\u4f5c\u7528\u57df\u5185 let x = x * 2 ; // \u7b2c\u4e09\u4e2a let \u8bed\u53e5\u4e5f\u9690\u85cf\u4e86 x \u5e76\u521b\u5efa\u4e86\u4e00\u4e2a\u65b0\u7684\u53d8\u91cf\uff0c\u5c06\u4e4b\u524d\u7684\u503c\u4e58\u4ee5 2\uff0cx \u5f97\u5230\u7684\u503c\u662f 12 println! ( \"The value of x in the inner scope is: {x}\" ); } // \u5f53\u8be5\u4f5c\u7528\u57df\u7ed3\u675f\u65f6\uff0c\u5185\u90e8 shadowing \u7684\u4f5c\u7528\u57df\u4e5f\u7ed3\u675f\u4e86\uff0cx \u53c8\u8fd4\u56de\u5230 6 println! ( \"The value of x is: {x}\" ); } \u9690\u85cf\u4e0e\u5c06\u53d8\u91cf\u6807\u8bb0\u4e3a mut \u662f\u6709\u533a\u522b\u7684\u3002\u5f53\u4e0d\u5c0f\u5fc3\u5c1d\u8bd5\u5bf9\u53d8\u91cf\u91cd\u65b0\u8d4b\u503c\u65f6\uff0c\u5982\u679c\u6ca1\u6709\u4f7f\u7528 let \u5173\u952e\u5b57\uff0c\u5c31\u4f1a\u5bfc\u81f4\u7f16\u8bd1\u65f6\u9519\u8bef\u3002 \u901a\u8fc7\u4f7f\u7528 let\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u8fd9\u4e2a\u503c\u8fdb\u884c\u4e00\u4e9b\u8ba1\u7b97\uff0c\u4e0d\u8fc7\u8ba1\u7b97\u5b8c\u4e4b\u540e\u53d8\u91cf\u4ecd\u7136\u662f\u4e0d\u53ef\u53d8\u7684\u3002 mut \u4e0e\u9690\u85cf\u7684\u53e6\u4e00\u4e2a\u533a\u522b\u662f\uff0c\u5f53\u518d\u6b21\u4f7f\u7528 let \u65f6\uff0c\u5b9e\u9645\u4e0a\u521b\u5efa\u4e86\u4e00\u4e2a\u65b0\u53d8\u91cf\uff0c\u6211\u4eec\u53ef\u4ee5\u6539\u53d8\u503c\u7684\u7c7b\u578b\uff0c\u5e76\u4e14\u590d\u7528\u8fd9\u4e2a\u540d\u5b57\u3002 \u4f8b\u5982\uff0c\u5047\u8bbe\u7a0b\u5e8f\u8bf7\u6c42\u7528\u6237\u8f93\u5165\u7a7a\u683c\u5b57\u7b26\u6765\u8bf4\u660e\u5e0c\u671b\u5728\u6587\u672c\u4e4b\u95f4\u663e\u793a\u591a\u5c11\u4e2a\u7a7a\u683c\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u60f3\u5c06\u8f93\u5165\u5b58\u50a8\u6210\u6570\u5b57\uff08\u591a\u5c11\u4e2a\u7a7a\u683c\uff09\uff1a let spaces = \" \" ; // \u7b2c\u4e00\u4e2a spaces \u53d8\u91cf\u662f\u5b57\u7b26\u4e32\u7c7b\u578b let spaces = spaces . len (); // \u7b2c\u4e8c\u4e2a spaces \u53d8\u91cf\u662f\u6570\u5b57\u7c7b\u578b \u9690\u85cf\u4f7f\u6211\u4eec\u4e0d\u5fc5\u4f7f\u7528\u4e0d\u540c\u7684\u540d\u5b57\uff0c\u5982 spaces_str \u548c spaces_num\uff1b \u76f8\u53cd\uff0c\u6211\u4eec\u53ef\u4ee5\u590d\u7528 spaces \u8fd9\u4e2a\u66f4\u7b80\u5355\u7684\u540d\u5b57\u3002\u7136\u800c\uff0c\u5982\u679c\u5c1d\u8bd5\u4f7f\u7528 mut \uff0c\u5c06\u4f1a\u5f97\u5230\u4e00\u4e2a\u7f16\u8bd1\u65f6\u9519\u8bef\uff0c\u5982\u4e0b\u6240\u793a\uff1a let mut spaces = \" \" ; // string\u7c7b\u578b spaces = spaces . len (); // int \u7c7b\u578b \u9519\u8bef\u63d0\u793a: $ cargo run Compiling variables v0 . 1.0 ( file : ///projects/variables) error [ E0308 ] : mismatched types - -> src / main . rs : 3 : 14 | 2 | let mut spaces = \" \" ; | ----- expected due to this value 3 | spaces = spaces . len (); | ^^^^^^^^^^^^ expected ` & str ` , found ` usize ` For more information about this error , try ` rustc -- explain E0308 ` . error : could not compile ` variables ` due to previous error \u4e0d\u80fd\u6539\u53d8\u53d8\u91cf\u7684\u7c7b\u578b","title":"\u9690\u85cf"},{"location":"common-programing-concepts/#_5","text":"\u5728 Rust \u4e2d\uff0c\u6bcf\u4e00\u4e2a\u503c\u90fd\u5c5e\u4e8e\u67d0\u4e00\u4e2a \u6570\u636e\u7c7b\u578b\uff08data type\uff09\uff0c\u8fd9\u544a\u8bc9 Rust \u5b83\u88ab\u6307\u5b9a\u4e3a\u4f55\u79cd\u6570\u636e\uff0c\u4ee5\u4fbf\u660e\u786e\u6570\u636e\u5904\u7406\u65b9\u5f0f\u3002 \u6211\u4eec\u5c06\u770b\u5230\u4e24\u7c7b\u6570\u636e\u7c7b\u578b\u5b50\u96c6\uff1a \u6807\u91cf \uff08scalar\uff09\u548c \u590d\u5408 \uff08compound\uff09\u3002 Rust \u662f \u9759\u6001\u7c7b\u578b\uff08statically typed\uff09\u8bed\u8a00\uff0c\u4e5f\u5c31\u662f\u8bf4\u5728\u7f16\u8bd1\u65f6\u5c31\u5fc5\u987b\u77e5\u9053\u6240\u6709\u53d8\u91cf\u7684\u7c7b\u578b\u3002 \u4f7f\u7528 parse \u5c06 String \u8f6c\u6362\u4e3a\u6570\u5b57\u65f6\uff0c\u5fc5\u987b\u589e\u52a0\u7c7b\u578b\u6ce8\u89e3\uff0c\u50cf\u8fd9\u6837\uff1a let guess : u32 = \"42\" . parse (). expect ( \"Not a number!\" ); \u5982\u679c\u4e0d\u50cf\u4e0a\u9762\u8fd9\u6837\u6dfb\u52a0\u7c7b\u578b\u6ce8\u89e3 : u32\uff0cRust \u4f1a\u663e\u793a\u5982\u4e0b\u9519\u8bef\uff0c\u8fd9\u8bf4\u660e\u7f16\u8bd1\u5668\u9700\u8981\u6211\u4eec\u63d0\u4f9b\u66f4\u591a\u4fe1\u606f\uff0c\u6765\u4e86\u89e3\u6211\u4eec\u60f3\u8981\u7684\u7c7b\u578b\uff1a $ cargo build Compiling no_type_annotations v0.1.0 ( file:///projects/no_type_annotations ) error [ E0282 ] : type annotations needed --> src/main.rs:2:9 | 2 | let guess = \"42\" .parse () .expect ( \"Not a number!\" ) ; | ^^^^^ consider giving ` guess ` a type For more information about this error, try ` rustc --explain E0282 ` . error: could not compile ` no_type_annotations ` due to previous error","title":"\u6570\u636e\u7c7b\u578b"},{"location":"common-programing-concepts/#_6","text":"\u6807\u91cf \uff08scalar\uff09\u7c7b\u578b\u4ee3\u8868\u4e00\u4e2a\u5355\u72ec\u7684\u503c\u3002Rust \u6709\u56db\u79cd\u57fa\u672c\u7684\u6807\u91cf\u7c7b\u578b\uff1a \u6574\u578b \u3001 \u6d6e\u70b9\u578b \u3001 \u5e03\u5c14\u7c7b\u578b \u548c \u5b57\u7b26\u7c7b\u578b \u3002","title":"\u6807\u91cf\u7c7b\u578b"},{"location":"common-programing-concepts/#_7","text":"\u6574\u6570 \u662f\u4e00\u4e2a\u6ca1\u6709\u5c0f\u6570\u90e8\u5206\u7684\u6570\u5b57\u3002 \u957f\u5ea6 \u6709\u7b26\u53f7 \u65e0\u7b26\u53f7 8-bit i8 u8 16-bit i16 u16 32-bit i32 u32 64-bit i64 u64 128-bit i128 u128 arch isize usize isize \u548c usize \u7c7b\u578b\u4f9d\u8d56\u8fd0\u884c\u7a0b\u5e8f\u7684\u8ba1\u7b97\u673a\u67b6\u6784\uff1a64 \u4f4d\u67b6\u6784\u4e0a\u5b83\u4eec\u662f 64 \u4f4d\u7684\uff0c 32 \u4f4d\u67b6\u6784\u4e0a\u5b83\u4eec\u662f 32 \u4f4d\u7684\u3002 \u53ef\u4ee5\u4f7f\u7528\u4e0b\u9762\u8868\u683c\u4e2d\u7684\u4efb\u4f55\u4e00\u79cd\u5f62\u5f0f\u7f16\u5199\u6570\u5b57\u5b57\u9762\u503c\u3002 \u8bf7\u6ce8\u610f\u53ef\u4ee5\u662f\u591a\u79cd\u6570\u5b57\u7c7b\u578b\u7684\u6570\u5b57\u5b57\u9762\u503c\u5141\u8bb8\u4f7f\u7528\u7c7b\u578b\u540e\u7f00\uff0c\u4f8b\u5982 57u8 \u6765\u6307\u5b9a\u7c7b\u578b\uff0c\u540c\u65f6\u4e5f\u5141\u8bb8\u4f7f\u7528 _ \u505a\u4e3a\u5206\u9694\u7b26\u4ee5\u65b9\u4fbf\u8bfb\u6570\uff0c\u4f8b\u5982 1_000 \uff0c\u5b83\u7684\u503c\u4e0e\u4f60\u6307\u5b9a\u7684 1000 \u76f8\u540c\u3002 \u6570\u5b57\u5b57\u9762\u503c \u4f8b\u5b50 Decimal (\u5341\u8fdb\u5236) 98_222 Hex (\u5341\u516d\u8fdb\u5236) 0xff Octal (\u516b\u8fdb\u5236) 0o77 Binary (\u4e8c\u8fdb\u5236) 0b1111_0000 Byte (\u5355\u5b57\u8282\u5b57\u7b26)(\u4ec5\u9650\u4e8eu8) b'A' Rust \u7684\u9ed8\u8ba4\u7c7b\u578b\u901a\u5e38\u662f\u4e2a\u4e0d\u9519\u7684\u8d77\u70b9\uff0c\u6570\u5b57\u7c7b\u578b\u9ed8\u8ba4\u662f i32 \u3002 isize \u6216 usize \u4e3b\u8981\u4f5c\u4e3a\u67d0\u4e9b\u96c6\u5408\u7684\u7d22\u5f15\u3002 \u5176\u4ed6 \u53c2\u8003: \u6574\u5f62\u6ea2\u51fa","title":"\u6574\u578b"},{"location":"common-programing-concepts/#_8","text":"Rust \u4e5f\u6709\u4e24\u4e2a\u539f\u751f\u7684 \u6d6e\u70b9\u6570\uff08floating-point numbers\uff09\u7c7b\u578b\uff0c\u5b83\u4eec\u662f\u5e26\u5c0f\u6570\u70b9\u7684\u6570\u5b57\u3002Rust \u7684\u6d6e\u70b9\u6570\u7c7b\u578b\u662f f32 \u548c f64\uff0c\u5206\u522b\u5360 32 \u4f4d\u548c 64 \u4f4d\u3002\u9ed8\u8ba4\u7c7b\u578b\u662f f64\uff0c\u56e0\u4e3a\u5728\u73b0\u4ee3 CPU \u4e2d\uff0c\u5b83\u4e0e f32 \u901f\u5ea6\u51e0\u4e4e\u4e00\u6837\uff0c\u4e0d\u8fc7\u7cbe\u5ea6\u66f4\u9ad8\u3002\u6240\u6709\u7684\u6d6e\u70b9\u578b\u90fd\u662f\u6709\u7b26\u53f7\u7684\u3002 \u8fd9\u662f\u4e00\u4e2a\u5c55\u793a\u6d6e\u70b9\u6570\u7684\u5b9e\u4f8b\uff1a \u6587\u4ef6\u540d: src/main.rs fn main () { let x = 2.0 ; // f64 let y : f32 = 3.0 ; // f32 } \u6d6e\u70b9\u6570\u91c7\u7528 IEEE-754 \u6807\u51c6\u8868\u793a\u3002f32 \u662f\u5355\u7cbe\u5ea6\u6d6e\u70b9\u6570\uff0cf64 \u662f\u53cc\u7cbe\u5ea6\u6d6e\u70b9\u6570\u3002","title":"\u6d6e\u70b9\u578b"},{"location":"common-programing-concepts/#_9","text":"Rust \u4e2d\u7684\u6240\u6709\u6570\u5b57\u7c7b\u578b\u90fd\u652f\u6301\u57fa\u672c\u6570\u5b66\u8fd0\u7b97\uff1a\u52a0\u6cd5\u3001\u51cf\u6cd5\u3001\u4e58\u6cd5\u3001\u9664\u6cd5\u548c\u53d6\u4f59\u3002\u6574\u6570\u9664\u6cd5\u4f1a\u5411\u4e0b\u820d\u5165\u5230\u6700\u63a5\u8fd1\u7684\u6574\u6570\u3002\u4e0b\u9762\u7684\u4ee3\u7801\u5c55\u793a\u4e86\u5982\u4f55\u5728 let \u8bed\u53e5\u4e2d\u4f7f\u7528\u5b83\u4eec\uff1a \u6587\u4ef6\u540d: src/main.rs fn main () { // \u52a0\u6cd5 let sum = 5 + 10 ; // \u51cf\u6cd5 let difference = 95.5 - 4.3 ; // \u4e58\u6cd5 let product = 4 * 30 ; // \u9664\u6cd5 let quotient = 56.7 / 32.2 ; let floored = 2 / 3 ; // \u7ed3\u679c\u4e3a0 // \u53d6\u4f59 let remainder = 43 % 5 ; } \u8fd9\u4e9b\u8bed\u53e5\u4e2d\u7684\u6bcf\u4e2a\u8868\u8fbe\u5f0f\u4f7f\u7528\u4e86\u4e00\u4e2a\u6570\u5b66\u8fd0\u7b97\u7b26\u5e76\u8ba1\u7b97\u51fa\u4e86\u4e00\u4e2a\u503c\uff0c\u7136\u540e\u7ed1\u5b9a\u7ed9\u4e00\u4e2a\u53d8\u91cf\u3002 \u9644\u5f55 B \u5305\u542b Rust \u63d0\u4f9b\u7684\u6240\u6709\u8fd0\u7b97\u7b26\u7684\u5217\u8868\u3002","title":"\u6570\u503c\u8fd0\u7b97"},{"location":"common-programing-concepts/#_10","text":"\u6b63\u5982\u5176\u4ed6\u5927\u90e8\u5206\u7f16\u7a0b\u8bed\u8a00\u4e00\u6837\uff0cRust \u4e2d\u7684\u5e03\u5c14\u7c7b\u578b\u6709\u4e24\u4e2a\u53ef\u80fd\u7684\u503c\uff1atrue \u548c false\u3002Rust \u4e2d\u7684\u5e03\u5c14\u7c7b\u578b\u4f7f\u7528 bool \u8868\u793a\u3002\u4f8b\u5982\uff1a fn main () { let t = true ; let f : bool = false ; // with explicit type annotation }","title":"\u5e03\u5c14\u578b"},{"location":"common-programing-concepts/#_11","text":"Rust\u7684 char \u7c7b\u578b\u662f\u8bed\u8a00\u4e2d\u6700\u539f\u751f\u7684\u5b57\u6bcd\u7c7b\u578b\u3002\u4e0b\u9762\u662f\u4e00\u4e9b\u58f0\u660e char \u503c\u7684\u4f8b\u5b50\uff1a \u6587\u4ef6\u540d: src/main.rs fn main () { let c = 'z' ; let z : char = '\u2124' ; // with explicit type annotation let heart_eyed_cat = '\ud83d\ude3b' ; } \u6ce8\u610f\uff0c\u8fd9\u91cc\u7528\u5355\u5f15\u53f7\u58f0\u660e char \u5b57\u9762\u91cf\uff0c\u800c\u4e0e\u4e4b\u76f8\u53cd\u7684\u662f\uff0c\u4f7f\u7528 \u53cc\u5f15\u53f7 \u58f0\u660e\u5b57\u7b26\u4e32\u5b57\u9762\u91cf\u3002Rust \u7684 char \u7c7b\u578b\u7684\u5927\u5c0f\u4e3a\u56db\u4e2a\u5b57\u8282(four bytes)\uff0c\u5e76\u4ee3\u8868\u4e86\u4e00\u4e2a Unicode \u6807\u91cf\u503c\uff08Unicode Scalar Value\uff09\uff0c\u8fd9\u610f\u5473\u7740\u5b83\u53ef\u4ee5\u6bd4 ASCII \u8868\u793a\u66f4\u591a\u5185\u5bb9\u3002 \u5728 Rust \u4e2d\uff0c\u5e26\u53d8\u97f3\u7b26\u53f7\u7684\u5b57\u6bcd\uff08Accented letters\uff09\uff0c\u4e2d\u6587\u3001\u65e5\u6587\u3001\u97e9\u6587\u7b49\u5b57\u7b26\uff0cemoji\uff08\u7ed8\u6587\u5b57\uff09\u4ee5\u53ca\u96f6\u957f\u5ea6\u7684\u7a7a\u767d\u5b57\u7b26\u90fd\u662f\u6709\u6548\u7684 char \u503c\u3002 Unicode \u6807\u91cf\u503c\u5305\u542b\u4ece U+0000 \u5230 U+D7FF \u548c U+E000 \u5230 U+10FFFF \u5728\u5185\u7684\u503c \u3002 \u4e0d\u8fc7\uff0c\u201c\u5b57\u7b26\u201d \u5e76\u4e0d\u662f\u4e00\u4e2a Unicode \u4e2d\u7684\u6982\u5ff5\uff0c\u6240\u4ee5\u4eba\u76f4\u89c9\u4e0a\u7684 \u201c\u5b57\u7b26\u201d \u53ef\u80fd\u4e0e Rust \u4e2d\u7684 char \u5e76\u4e0d\u7b26\u5408\u3002 \u7b2c\u516b\u7ae0\u7684 \u201c \u4f7f\u7528\u5b57\u7b26\u4e32\u5b58\u50a8 UTF-8 \u7f16\u7801\u7684\u6587\u672c \u201d \u4e2d\u5c06\u8be6\u7ec6\u8ba8\u8bba\u8fd9\u4e2a\u4e3b\u9898\u3002","title":"\u5b57\u7b26\u7c7b\u578b"},{"location":"common-programing-concepts/#_12","text":"\u590d\u5408\u7c7b\u578b \uff08Compound types\uff09\u53ef\u4ee5\u5c06\u591a\u4e2a\u503c\u7ec4\u5408\u6210\u4e00\u4e2a\u7c7b\u578b\u3002Rust \u6709\u4e24\u4e2a\u539f\u751f\u7684\u590d\u5408\u7c7b\u578b\uff1a \u5143\u7ec4 \uff08tuple\uff09\u548c \u6570\u7ec4 \uff08array\uff09\u3002","title":"\u590d\u5408\u7c7b\u578b"},{"location":"common-programing-concepts/#_13","text":"\u5143\u7ec4\u662f\u4e00\u4e2a\u5c06\u591a\u4e2a\u5176\u4ed6\u7c7b\u578b\u7684\u503c\u7ec4\u5408\u8fdb\u4e00\u4e2a\u590d\u5408\u7c7b\u578b\u7684\u4e3b\u8981\u65b9\u5f0f\u3002 \u5143\u7ec4\u957f\u5ea6\u56fa\u5b9a\uff1a\u4e00\u65e6\u58f0\u660e\uff0c\u5176\u957f\u5ea6\u4e0d\u4f1a\u589e\u5927\u6216\u7f29\u5c0f\u3002 \u4f7f\u7528\u5305\u542b\u5728\u5706\u62ec\u53f7\u4e2d\u7684\u9017\u53f7\u5206\u9694\u7684\u503c\u5217\u8868\u6765\u521b\u5efa\u4e00\u4e2a\u5143\u7ec4\u3002 \u5143\u7ec4\u4e2d\u7684\u6bcf\u4e00\u4e2a\u4f4d\u7f6e\u90fd\u6709\u4e00\u4e2a\u7c7b\u578b\uff0c\u800c\u4e14\u8fd9\u4e9b\u4e0d\u540c\u503c\u7684\u7c7b\u578b\u4e5f\u4e0d\u5fc5\u662f\u76f8\u540c\u7684\u3002\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\u4f7f\u7528\u4e86\u53ef\u9009\u7684\u7c7b\u578b\u6ce8\u89e3\uff1a fn main () { let tup : ( i32 , f64 , u8 ) = ( 500 , 6.4 , 1 ); } tup \u53d8\u91cf\u7ed1\u5b9a\u5230\u6574\u4e2a\u5143\u7ec4\u4e0a\uff0c\u56e0\u4e3a\u5143\u7ec4\u662f\u4e00\u4e2a\u5355\u72ec\u7684\u590d\u5408\u5143\u7d20\u3002 \u4e3a\u4e86\u4ece\u5143\u7ec4\u4e2d\u83b7\u53d6\u5355\u4e2a\u503c\uff0c\u53ef\u4ee5\u4f7f\u7528 \u6a21\u5f0f\u5339\u914d \uff08pattern matching\uff09\u6765 \u89e3\u6784 \uff08destructure\uff09\u5143\u7ec4\u503c\uff0c\u50cf\u8fd9\u6837\uff1a fn main () { let tup = ( 500 , 6.4 , 1 ); // \u7a0b\u5e8f\u9996\u5148\u521b\u5efa\u4e86\u4e00\u4e2a\u5143\u7ec4\u5e76\u7ed1\u5b9a\u5230 tup \u53d8\u91cf\u4e0a let ( x , y , z ) = tup ; // \u63a5\u7740\u4f7f\u7528\u4e86 let \u548c\u4e00\u4e2a\u6a21\u5f0f\u5c06 tup \u5206\u6210\u4e86\u4e09\u4e2a\u4e0d\u540c\u7684\u53d8\u91cf\uff0cx\u3001y \u548c z\u3002 // \u8fd9\u53eb\u505a \u89e3\u6784\uff08destructuring\uff09\u56e0\u4e3a\u5b83\u5c06\u4e00\u4e2a\u5143\u7ec4\u62c6\u6210\u4e86\u4e09\u4e2a\u90e8\u5206\u3002 println! ( \"The value of y is: {y}\" ); // \u6700\u540e\uff0c\u7a0b\u5e8f\u6253\u5370\u51fa\u4e86 y \u7684\u503c\uff0c\u4e5f\u5c31\u662f 6.4\u3002 } \u4e5f\u53ef\u4ee5\u4f7f\u7528\u70b9\u53f7\uff08.\uff09\u540e\u8ddf\u503c\u7684\u7d22\u5f15\u6765\u76f4\u63a5\u8bbf\u95ee\u5b83\u4eec\u3002\u4f8b\u5982\uff1a \u6587\u4ef6\u540d: src/main.rs fn main () { let x : ( i32 , f64 , u8 ) = ( 500 , 6.4 , 1 ); let five_hundred = x . 0 ; let six_point_four = x . 1 ; let one = x . 2 ; } \u4e0d\u5e26\u4efb\u4f55\u503c\u7684\u5143\u7ec4\u6709\u4e2a\u7279\u6b8a\u7684\u540d\u79f0\uff0c\u53eb\u505a \u5355\u5143 \uff08unit\uff09 \u5143\u7ec4\u3002\u8fd9\u79cd\u503c\u4ee5\u53ca\u5bf9\u5e94\u7684\u7c7b\u578b\u90fd\u5199\u4f5c () \uff0c \u8868\u793a\u7a7a\u503c\u6216\u7a7a\u7684\u8fd4\u56de\u7c7b\u578b \u3002\u5982\u679c\u8868\u8fbe\u5f0f\u4e0d\u8fd4\u56de\u4efb\u4f55\u5176\u4ed6\u503c\uff0c\u5219\u4f1a\u9690\u5f0f\u8fd4\u56de\u5355\u5143\u503c\u3002","title":"\u5143\u7ec4\u7c7b\u578b"},{"location":"common-programing-concepts/#_14","text":"\u53e6\u4e00\u4e2a\u5305\u542b\u591a\u4e2a\u503c\u7684\u65b9\u5f0f\u662f \u6570\u7ec4 \uff08array\uff09\u3002\u4e0e\u5143\u7ec4\u4e0d\u540c\uff0c \u6570\u7ec4\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u7684\u7c7b\u578b\u5fc5\u987b\u76f8\u540c \u3002Rust \u4e2d\u7684\u6570\u7ec4\u4e0e\u4e00\u4e9b\u5176\u4ed6\u8bed\u8a00\u4e2d\u7684\u6570\u7ec4\u4e0d\u540c\uff0c Rust\u4e2d\u7684\u6570\u7ec4\u957f\u5ea6\u662f\u56fa\u5b9a\u7684 \u3002 \u5c06\u6570\u7ec4\u7684\u503c\u5199\u6210\u5728\u65b9\u62ec\u53f7\u5185\uff0c\u7528\u9017\u53f7\u5206\u9694\uff1a fn main () { let a = [ 1 , 2 , 3 , 4 , 5 ]; } \u5f53\u4f60\u60f3\u8981\u5728 \u6808 \uff08stack\uff09\u800c\u4e0d\u662f\u5728 \u5806 \uff08heap\uff09\u4e0a\u4e3a\u6570\u636e\u5206\u914d\u7a7a\u95f4\uff0c\u6216\u8005\u662f\u60f3\u8981\u786e\u4fdd\u603b\u662f\u6709\u56fa\u5b9a\u6570\u91cf\u7684\u5143\u7d20\u65f6\uff0c\u6570\u7ec4\u975e\u5e38\u6709\u7528\u3002 \u4f46\u662f\u6570\u7ec4\u5e76\u4e0d\u5982 vector \u7c7b\u578b\u7075\u6d3b\u3002 vector \u7c7b\u578b\u662f\u6807\u51c6\u5e93\u63d0\u4f9b\u7684\u4e00\u4e2a \u5141\u8bb8 \u589e\u957f\u548c\u7f29\u5c0f\u957f\u5ea6\u7684\u7c7b\u4f3c\u6570\u7ec4\u7684\u96c6\u5408\u7c7b\u578b\u3002 \u5f53\u4e0d\u786e\u5b9a\u662f\u5e94\u8be5\u4f7f\u7528\u6570\u7ec4\u8fd8\u662f vector \u7684\u65f6\u5019\uff0c\u90a3\u4e48\u5f88\u53ef\u80fd\u5e94\u8be5\u4f7f\u7528 vector \u3002 \u7b2c\u516b\u7ae0 \u4f1a\u8be6\u7ec6\u8ba8\u8bba vector \u3002 \u7136\u800c\uff0c\u5f53\u4f60\u786e\u5b9a\u5143\u7d20\u4e2a\u6570\u4e0d\u4f1a\u6539\u53d8\u65f6\uff0c\u6570\u7ec4\u4f1a\u66f4\u6709\u7528\u3002\u4f8b\u5982\uff0c\u5f53\u4f60\u5728\u4e00\u4e2a\u7a0b\u5e8f\u4e2d\u4f7f\u7528\u6708\u4efd\u540d\u5b57\u65f6\uff0c\u4f60\u66f4\u5e94\u8d8b\u5411\u4e8e\u4f7f\u7528\u6570\u7ec4\u800c\u4e0d\u662f vector\uff0c\u56e0\u4e3a\u4f60\u786e\u5b9a\u53ea\u4f1a\u670912\u4e2a\u5143\u7d20\u3002 let months = [ \"January\" , \"February\" , \"March\" , \"April\" , \"May\" , \"June\" , \"July\" , \"August\" , \"September\" , \"October\" , \"November\" , \"December\" ]; \u53ef\u4ee5\u50cf\u8fd9\u6837\u7f16\u5199\u6570\u7ec4\u7684\u7c7b\u578b\uff1a\u5728\u65b9\u62ec\u53f7\u4e2d\u5305\u542b\u6bcf\u4e2a\u5143\u7d20\u7684\u7c7b\u578b\uff0c\u540e\u8ddf\u5206\u53f7\uff0c\u518d\u540e\u8ddf\u6570\u7ec4\u5143\u7d20\u7684\u6570\u91cf\u3002 let a : [ i32 ; 5 ] = [ 1 , 2 , 3 , 4 , 5 ]; // i32 \u662f\u6bcf\u4e2a\u5143\u7d20\u7684\u7c7b\u578b\u3002\u5206\u53f7\u4e4b\u540e\uff0c\u6570\u5b57 5 \u8868\u660e\u8be5\u6570\u7ec4\u5305\u542b\u4e94\u4e2a\u5143\u7d20\u3002 let a = [ 3 ; 5 ]; // \u901a\u8fc7\u5728\u65b9\u62ec\u53f7\u4e2d\u6307\u5b9a\u521d\u59cb\u503c\u52a0\u5206\u53f7\u518d\u52a0\u5143\u7d20\u4e2a\u6570\u7684\u65b9\u5f0f\u6765\u521b\u5efa\u4e00\u4e2a\u6bcf\u4e2a\u5143\u7d20\u90fd\u4e3a\u76f8\u540c\u503c\u7684\u6570\u7ec4\uff1a // \u53d8\u91cf\u540d\u4e3a a \u7684\u6570\u7ec4\u5c06\u5305\u542b 5 \u4e2a\u5143\u7d20\uff0c\u8fd9\u4e9b\u5143\u7d20\u7684\u503c\u6700\u521d\u90fd\u5c06\u88ab\u8bbe\u7f6e\u4e3a 3\u3002 // \u8fd9\u79cd\u5199\u6cd5\u4e0e let a = [3, 3, 3, 3, 3]; \u6548\u679c\u76f8\u540c\uff0c\u4f46\u66f4\u7b80\u6d01\u3002","title":"\u6570\u7ec4\u7c7b\u578b"},{"location":"common-programing-concepts/#_15","text":"\u6570\u7ec4\u662f\u53ef\u4ee5\u5728\u6808(stack)\u4e0a\u5206\u914d\u7684\u5df2\u77e5\u56fa\u5b9a\u5927\u5c0f\u7684\u5355\u4e2a\u5185\u5b58\u5757\u3002\u53ef\u4ee5\u4f7f\u7528\u7d22\u5f15\u6765\u8bbf\u95ee\u6570\u7ec4\u7684\u5143\u7d20\uff0c\u50cf\u8fd9\u6837\uff1a fn main () { let a = [ 1 , 2 , 3 , 4 , 5 ]; let first = a [ 0 ]; let second = a [ 1 ]; }","title":"\u8bbf\u95ee\u6570\u7ec4\u5143\u7d20"},{"location":"common-programing-concepts/#_16","text":"\u8ba9\u6211\u4eec\u770b\u770b\u5982\u679c\u6211\u4eec\u8bbf\u95ee\u6570\u7ec4\u7ed3\u5c3e\u4e4b\u540e\u7684\u5143\u7d20\u4f1a\u53d1\u751f\u4ec0\u4e48\u5462\uff1f\u6bd4\u5982\u4f60\u6267\u884c\u4ee5\u4e0b\u4ee3\u7801\uff0c\u5b83\u4f7f\u7528\u7c7b\u4f3c\u4e8e\u7b2c 2 \u7ae0\u4e2d\u7684\u731c\u6570\u5b57\u6e38\u620f\u7684\u4ee3\u7801\u4ece\u7528\u6237\u90a3\u91cc\u83b7\u53d6\u6570\u7ec4\u7d22\u5f15\uff1a use std :: io ; fn main () { let a = [ 1 , 2 , 3 , 4 , 5 ]; println! ( \"\u8bf7\u8f93\u5165\u6570\u7ec4\u7d22\u5f15\" ); let mut index = String :: new (); io :: stdin () . read_line ( & mut index ) . expect ( \"\u8bfb\u53d6\u6570\u636e\u5931\u8d25\" ); let index : usize = index . trim () . parse () . expect ( \"\u8bf7\u8f93\u5165\u6570\u5b57\" ); let element = a [ index ]; println! ( \"\u6570\u7ec4\u4e2d\u7d22\u5f15\u4e3a {index} \u7684\u503c\u65f6: {element}\" ); } \u6b64\u4ee3\u7801\u7f16\u8bd1\u6210\u529f\u3002\u5982\u679c\u60a8\u4f7f\u7528 cargo run \u8fd0\u884c\u6b64\u4ee3\u7801\u5e76\u8f93\u5165 0\u30011\u30012\u30013 \u6216 4\uff0c\u7a0b\u5e8f\u5c06\u5728\u6570\u7ec4\u4e2d\u7684\u7d22\u5f15\u5904\u6253\u5370\u51fa\u76f8\u5e94\u7684\u503c\u3002\u5982\u679c\u4f60\u8f93\u5165\u4e00\u4e2a\u8d85\u8fc7\u6570\u7ec4\u672b\u7aef\u7684\u6570\u5b57\uff0c\u5982 10\uff0c\u4f60\u4f1a\u770b\u5230\u8fd9\u6837\u7684\u8f93\u51fa\uff1a thread 'main' panicked at 'index out of bounds: the len is 5 but the index is 10' , src/main.rs:19:19 note: run with ` RUST_BACKTRACE = 1 ` environment variable to display a backtrace \u7a0b\u5e8f\u5728\u7d22\u5f15\u64cd\u4f5c\u4e2d\u4f7f\u7528\u4e00\u4e2a\u65e0\u6548\u7684\u503c\u65f6\u5bfc\u81f4 \u8fd0\u884c\u65f6 \u9519\u8bef\u3002 \u7a0b\u5e8f\u5e26\u7740\u9519\u8bef\u4fe1\u606f\u9000\u51fa\uff0c\u5e76\u4e14\u6ca1\u6709\u6267\u884c\u6700\u540e\u7684 println! \u8bed\u53e5\u3002 \u5f53\u5c1d\u8bd5\u7528\u7d22\u5f15\u8bbf\u95ee\u4e00\u4e2a\u5143\u7d20\u65f6\uff0cRust \u4f1a\u68c0\u67e5\u6307\u5b9a\u7684\u7d22\u5f15\u662f\u5426\u5c0f\u4e8e\u6570\u7ec4\u7684\u957f\u5ea6\u3002 \u5982\u679c\u7d22\u5f15\u8d85\u51fa\u4e86\u6570\u7ec4\u957f\u5ea6\uff0cRust \u4f1a panic\uff0c\u8fd9\u662f Rust \u672f\u8bed\uff0c \u5b83\u7528\u4e8e\u7a0b\u5e8f\u56e0\u4e3a\u9519\u8bef\u800c\u9000\u51fa\u7684\u60c5\u51b5 \u3002 \u8fd9\u79cd\u68c0\u67e5\u5fc5\u987b\u5728\u8fd0\u884c\u65f6\u8fdb\u884c\uff0c\u7279\u522b\u662f\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u56e0\u4e3a\u7f16\u8bd1\u5668\u4e0d\u53ef\u80fd\u77e5\u9053\u7528\u6237\u5728\u4ee5\u540e\u8fd0\u884c\u4ee3\u7801\u65f6\u5c06\u8f93\u5165\u4ec0\u4e48\u503c\u3002 \u8fd9\u662f\u7b2c\u4e00\u4e2a\u5728\u5b9e\u6218\u4e2d\u9047\u5230\u7684 Rust \u5b89\u5168\u539f\u5219\u7684\u4f8b\u5b50\u3002 \u5728\u5f88\u591a\u5e95\u5c42\u8bed\u8a00\u4e2d\uff0c\u5e76\u6ca1\u6709\u8fdb\u884c\u8fd9\u7c7b\u68c0\u67e5\uff0c\u8fd9\u6837\u5f53\u63d0\u4f9b\u4e86\u4e00\u4e2a\u4e0d\u6b63\u786e\u7684\u7d22\u5f15\u65f6\uff0c\u5c31\u4f1a\u8bbf\u95ee\u65e0\u6548\u7684\u5185\u5b58\u3002 \u901a\u8fc7\u7acb\u5373\u9000\u51fa\u800c\u4e0d\u662f\u5141\u8bb8\u5185\u5b58\u8bbf\u95ee\u5e76\u7ee7\u7eed\u6267\u884c\uff0cRust \u8ba9\u4f60\u907f\u5f00\u6b64\u7c7b\u9519\u8bef\u3002 \u7b2c\u4e5d\u7ae0 \u4f1a\u66f4\u8be6\u7ec6\u5730\u8ba8\u8bba Rust \u7684\u9519\u8bef\u5904\u7406\u673a\u5236\uff0c\u4ee5\u53ca\u5982\u4f55\u7f16\u5199\u53ef\u8bfb\u6027\u5f3a\u800c\u53c8\u5b89\u5168\u7684\u4ee3\u7801\uff0c\u4f7f\u7a0b\u5e8f\u65e2\u4e0d\u4f1a panic \u4e5f\u4e0d\u4f1a\u5bfc\u81f4\u975e\u6cd5\u5185\u5b58\u8bbf\u95ee\u3002","title":"\u6570\u7ec4\u8d8a\u754c\u8bbf\u95ee"},{"location":"common-programing-concepts/#_17","text":"\u51fd\u6570\u5728 Rust \u4ee3\u7801\u4e2d\u975e\u5e38\u666e\u904d\u3002\u4f60\u5df2\u7ecf\u89c1\u8fc7\u8bed\u8a00\u4e2d\u6700\u91cd\u8981\u7684\u51fd\u6570\u4e4b\u4e00\uff1a main \u51fd\u6570\uff0c\u5b83\u662f\u5f88\u591a\u7a0b\u5e8f\u7684\u5165\u53e3\u70b9\u3002\u4f60\u4e5f\u89c1\u8fc7 fn \u5173\u952e\u5b57\uff0c\u5b83\u7528\u6765\u58f0\u660e\u65b0\u51fd\u6570\u3002 Rust \u4ee3\u7801\u4e2d\u7684\u51fd\u6570\u548c\u53d8\u91cf\u540d\u4f7f\u7528 snake case \u89c4\u8303\u98ce\u683c\u3002\u5728 snake case \u4e2d\uff0c \u6240\u6709\u5b57\u6bcd\u90fd\u662f\u5c0f\u5199\u5e76\u4f7f\u7528\u4e0b\u5212\u7ebf\u5206\u9694\u5355\u8bcd \u3002\u8fd9\u662f\u4e00\u4e2a\u5305\u542b\u51fd\u6570\u5b9a\u4e49\u793a\u4f8b\u7684\u7a0b\u5e8f\uff1a \u6587\u4ef6\u540d: src/main.rs fn main () { println! ( \"Hello, world!\" ); another_function (); } // \u901a\u8fc7\u8f93\u5165 fn \u540e\u9762\u8ddf\u7740\u51fd\u6570\u540d\u548c\u4e00\u5bf9\u5706\u62ec\u53f7\u6765\u5b9a\u4e49\u51fd\u6570\u3002\u5927\u62ec\u53f7\u544a\u8bc9\u7f16\u8bd1\u5668\u54ea\u91cc\u662f\u51fd\u6570\u4f53\u7684\u5f00\u59cb\u548c\u7ed3\u5c3e\u3002 fn another_function () { println! ( \"Another function.\" ); } // main \u51fd\u6570\u4e2d\u7684\u4ee3\u7801\u4f1a\u6309\u987a\u5e8f\u6267\u884c\u3002\u9996\u5148\uff0c\u6253\u5370 \u201cHello, world!\u201d \u4fe1\u606f\uff0c\u7136\u540e\u8c03\u7528 another_function \u51fd\u6570\u5e76\u6253\u5370\u5b83\u7684\u4fe1\u606f\u3002 \u53ef\u4ee5\u4f7f\u7528\u51fd\u6570\u540d\u540e\u8ddf\u5706\u62ec\u53f7\u6765\u8c03\u7528\u6211\u4eec\u5b9a\u4e49\u8fc7\u7684\u4efb\u610f\u51fd\u6570\u3002 \u56e0\u4e3a\u7a0b\u5e8f\u4e2d\u5df2\u5b9a\u4e49 another_function \u51fd\u6570\uff0c\u6240\u4ee5\u53ef\u4ee5\u5728 main \u51fd\u6570\u4e2d\u8c03\u7528\u5b83\u3002\u6ce8\u610f\uff0c \u6e90\u7801\u4e2d another_function \u5b9a\u4e49\u5728 main \u51fd\u6570 \u4e4b\u540e\uff1b\u4e5f\u53ef\u4ee5\u5b9a\u4e49\u5728\u4e4b\u524d \u3002 Rust \u4e0d\u5173\u5fc3\u51fd\u6570\u5b9a\u4e49\u6240\u5728\u7684\u4f4d\u7f6e\uff0c\u53ea\u8981\u51fd\u6570\u88ab\u8c03\u7528\u65f6\u51fa\u73b0\u5728\u8c03\u7528\u4e4b\u5904\u53ef\u89c1\u7684\u4f5c\u7528\u57df\u5185\u5c31\u884c\u3002","title":"\u51fd\u6570"},{"location":"common-programing-concepts/#_18","text":"\u6211\u4eec\u53ef\u4ee5\u5b9a\u4e49\u4e3a\u62e5\u6709 \u53c2\u6570 \uff08parameters\uff09\u7684\u51fd\u6570\uff0c\u53c2\u6570\u662f\u7279\u6b8a\u53d8\u91cf\uff0c\u662f\u51fd\u6570\u7b7e\u540d\u7684\u4e00\u90e8\u5206\u3002\u5f53\u51fd\u6570\u62e5\u6709\u53c2\u6570\uff08\u5f62\u53c2\uff09\u65f6\uff0c\u53ef\u4ee5\u4e3a\u8fd9\u4e9b\u53c2\u6570\u63d0\u4f9b\u5177\u4f53\u7684\u503c\uff08\u5b9e\u53c2\uff09\u3002 \u6280\u672f\u4e0a\u8bb2\uff0c\u8fd9\u4e9b\u5177\u4f53\u503c\u88ab\u79f0\u4e3a\u53c2\u6570\uff08arguments\uff09\uff0c\u4f46\u662f\u5728\u65e5\u5e38\u4ea4\u6d41\u4e2d\uff0c\u4eba\u4eec\u503e\u5411\u4e8e\u4e0d\u533a\u5206\u4f7f\u7528 parameter \u548c argument \u6765\u8868\u793a\u51fd\u6570\u5b9a\u4e49\u4e2d\u7684\u53d8\u91cf\u6216\u8c03\u7528\u51fd\u6570\u65f6\u4f20\u5165\u7684\u5177\u4f53\u503c\u3002 \u5728\u8fd9\u7248 another_function \u4e2d\uff0c\u6211\u4eec\u589e\u52a0\u4e86\u4e00\u4e2a\u53c2\u6570\uff1a fn main () { another_function ( 5 ); // \u6211\u4eec\u5c06 5 \u4f20\u7ed9 another_function \u65f6\uff0c // println! \u5b8f\u4f1a\u628a 5 \u653e\u5728\u683c\u5f0f\u5b57\u7b26\u4e32\u4e2d\u5305\u542b x \u7684\u90a3\u5bf9\u82b1\u62ec\u53f7\u7684\u4f4d\u7f6e\u3002 } // another_function \u7684\u58f0\u660e\u4e2d\u6709\u4e00\u4e2a\u547d\u540d\u4e3a x \u7684\u53c2\u6570\u3002 // x \u7684\u7c7b\u578b\u88ab\u6307\u5b9a\u4e3a i32\u3002 fn another_function ( x : i32 ) { println! ( \"The value of x is: {x}\" ); } \u5728\u51fd\u6570\u7b7e\u540d\u4e2d\uff0c \u5fc5\u987b \u58f0\u660e\u6bcf\u4e2a\u53c2\u6570\u7684\u7c7b\u578b\u3002 \u8fd9\u662f Rust \u8bbe\u8ba1\u4e2d\u4e00\u4e2a\u7ecf\u8fc7\u614e\u91cd\u8003\u8651\u7684\u51b3\u5b9a\uff1a \u8981\u6c42\u5728\u51fd\u6570\u5b9a\u4e49\u4e2d\u63d0\u4f9b\u7c7b\u578b\u6ce8\u89e3 \uff0c\u610f\u5473\u7740\u7f16\u8bd1\u5668\u518d\u4e5f\u4e0d\u9700\u8981\u4f60\u5728\u4ee3\u7801\u7684\u5176\u4ed6\u5730\u65b9\u6ce8\u660e\u7c7b\u578b\u6765\u6307\u51fa\u4f60\u7684\u610f\u56fe\u3002 \u800c\u4e14\uff0c\u5728\u77e5\u9053\u51fd\u6570\u9700\u8981\u4ec0\u4e48\u7c7b\u578b\u540e\uff0c\u7f16\u8bd1\u5668\u5c31\u80fd\u591f\u7ed9\u51fa\u66f4\u6709\u7528\u7684\u9519\u8bef\u6d88\u606f\u3002 \u5f53\u5b9a\u4e49\u591a\u4e2a\u53c2\u6570\u65f6\uff0c\u4f7f\u7528\u9017\u53f7\u5206\u9694\uff0c\u50cf\u8fd9\u6837\uff1a fn main () { print_labeled_measurement ( 5 , 'h' ); } // \u5b83\u6709\u4e24\u4e2a\u53c2\u6570\u3002\u7b2c\u4e00\u4e2a\u53c2\u6570\u540d\u4e3a value\uff0c \u7c7b\u578b\u662f i32\u3002 // \u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f unit_label \uff0c\u7c7b\u578b\u662f char\u3002 fn print_labeled_measurement ( value : i32 , unit_label : char ) { println! ( \"The measurement is: {value}{unit_label}\" ); }","title":"\u53c2\u6570"},{"location":"common-programing-concepts/#_19","text":"\u51fd\u6570\u4f53\u7531\u4e00\u7cfb\u5217\u7684 \u8bed\u53e5 \u548c\u4e00\u4e2a\u53ef\u9009\u7684 \u7ed3\u5c3e\u8868\u8fbe\u5f0f \u6784\u6210\u3002 \u76ee\u524d\u4e3a\u6b62\uff0c\u6211\u4eec\u63d0\u5230\u7684\u51fd\u6570\u8fd8\u4e0d\u5305\u542b\u7ed3\u5c3e\u8868\u8fbe\u5f0f\uff0c\u4e0d\u8fc7\u4f60\u5df2\u7ecf\u89c1\u8fc7\u4f5c\u4e3a\u8bed\u53e5\u4e00\u90e8\u5206\u7684\u8868\u8fbe\u5f0f\u3002 \u56e0\u4e3a Rust \u662f\u4e00\u95e8\u57fa\u4e8e \u8868\u8fbe\u5f0f \uff08expression-based\uff09\u7684\u8bed\u8a00\uff0c\u8fd9\u662f\u4e00\u4e2a\u9700\u8981\u7406\u89e3\u7684\uff08\u4e0d\u540c\u4e8e\u5176\u4ed6\u8bed\u8a00\uff09\u91cd\u8981\u533a\u522b\u3002 \u5176\u4ed6\u8bed\u8a00\u5e76\u6ca1\u6709\u8fd9\u6837\u7684\u533a\u522b\uff0c\u6240\u4ee5\u8ba9\u6211\u4eec\u770b\u770b\u8bed\u53e5\u4e0e\u8868\u8fbe\u5f0f\u6709\u4ec0\u4e48\u533a\u522b\u4ee5\u53ca\u8fd9\u4e9b\u533a\u522b\u662f\u5982\u4f55\u5f71\u54cd\u51fd\u6570\u4f53\u7684\u3002 \u8bed\u53e5 \uff08Statements\uff09\u662f\u6267\u884c\u4e00\u4e9b\u64cd\u4f5c\u4f46\u4e0d\u8fd4\u56de\u503c\u7684\u6307\u4ee4 \u3002 \u8868\u8fbe\u5f0f \uff08Expressions\uff09\u8ba1\u7b97\u5e76\u4ea7\u751f\u4e00\u4e2a\u503c\u3002 \u8ba9\u6211\u4eec\u770b\u4e00\u4e9b\u4f8b\u5b50\u3002 \u5b9e\u9645\u4e0a\uff0c\u6211\u4eec\u5df2\u7ecf\u4f7f\u7528\u8fc7\u8bed\u53e5\u548c\u8868\u8fbe\u5f0f\u3002\u4f7f\u7528 let \u5173\u952e\u5b57\u521b\u5efa\u53d8\u91cf\u5e76\u7ed1\u5b9a\u4e00\u4e2a\u503c\u662f\u4e00\u4e2a\u8bed\u53e5\u3002\u5728\u4e0b\u9762\u793a\u4f8b \u4e2d\uff0c let y = 6; \u662f\u4e00\u4e2a\u8bed\u53e5\u3002 fn main () { let y = 6 ; } // \u51fd\u6570\u5b9a\u4e49\u4e5f\u662f\u8bed\u53e5\uff0c\u4e0a\u9762\u6574\u4e2a\u4f8b\u5b50\u672c\u8eab\u5c31\u662f\u4e00\u4e2a\u8bed\u53e5\u3002 \u8bed\u53e5\u4e0d\u8fd4\u56de\u503c\u3002\u56e0\u6b64\uff0c\u4e0d\u80fd\u628a let \u8bed\u53e5\u8d4b\u503c\u7ed9\u53e6\u4e00\u4e2a\u53d8\u91cf\uff0c\u6bd4\u5982\u4e0b\u9762\u7684\u4f8b\u5b50\u5c1d\u8bd5\u505a\u7684\uff0c\u4f1a\u4ea7\u751f\u4e00\u4e2a\u9519\u8bef\uff1a fn main () { let x = ( let y = 6 ); } \u5f53\u8fd0\u884c\u8fd9\u4e2a\u7a0b\u5e8f\u65f6\uff0c\u4f1a\u5f97\u5230\u5982\u4e0b\u9519\u8bef\uff1a $ cargo run Compiling functions v0.1.0 ( file:///projects/functions ) error: expected expression, found statement ( ` let ` ) --> src/main.rs:2:14 | 2 | let x = ( let y = 6 ) ; | ^^^^^^^^^ | = note: variable declaration using ` let ` is a statement error [ E0658 ] : ` let ` expressions in this position are unstable --> src/main.rs:2:14 | 2 | let x = ( let y = 6 ) ; | ^^^^^^^^^ | = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information warning: unnecessary parentheses around assigned value --> src/main.rs:2:13 | 2 | let x = ( let y = 6 ) ; | ^ ^ | = note: ` #[warn(unused_parens)]` on by default help: remove these parentheses | 2 - let x = ( let y = 6 ) ; 2 + let x = let y = 6 ; | For more information about this error, try ` rustc --explain E0658 ` . warning: ` functions ` ( bin \"functions\" ) generated 1 warning error: could not compile ` functions ` due to 2 previous errors ; 1 warning emitted let y = 6 \u8bed\u53e5\u5e76\u4e0d\u8fd4\u56de\u503c\uff0c\u6240\u4ee5\u6ca1\u6709\u53ef\u4ee5\u7ed1\u5b9a\u5230 x \u4e0a\u7684\u503c\u3002 \u8fd9\u4e0e\u5176\u4ed6\u8bed\u8a00\u4e0d\u540c\uff0c\u4f8b\u5982 C \u548c Ruby\uff0c\u5b83\u4eec\u7684\u8d4b\u503c\u8bed\u53e5\u4f1a\u8fd4\u56de\u6240\u8d4b\u7684\u503c\u3002 \u5728\u8fd9\u4e9b\u8bed\u8a00\u4e2d\uff0c\u53ef\u4ee5\u8fd9\u4e48\u5199 x = y = 6\uff0c\u8fd9\u6837 x \u548c y \u7684\u503c\u90fd\u662f 6\uff1bRust \u4e2d\u4e0d\u80fd\u8fd9\u6837\u5199\u3002 \u8868\u8fbe\u5f0f\u4f1a\u8ba1\u7b97\u51fa\u4e00\u4e2a\u503c\uff0c\u5e76\u4e14\u4f60\u5c06\u7f16\u5199\u7684\u5927\u90e8\u5206 Rust \u4ee3\u7801\u662f\u7531\u8868\u8fbe\u5f0f\u7ec4\u6210\u7684\u3002 \u8003\u8651\u4e00\u4e2a\u6570\u5b66\u8fd0\u7b97\uff0c\u6bd4\u5982 5 + 6\uff0c\u8fd9\u662f\u4e00\u4e2a\u8868\u8fbe\u5f0f\u5e76\u8ba1\u7b97\u51fa\u503c 11\u3002 \u8868\u8fbe\u5f0f\u53ef\u4ee5\u662f\u8bed\u53e5\u7684\u4e00\u90e8\u5206\uff1a\u5728\u4e0a\u9762\u4e2d\uff0c\u8bed\u53e5 let y = 6; \u4e2d\u7684 6 \u662f\u4e00\u4e2a\u8868\u8fbe\u5f0f\uff0c\u5b83\u8ba1\u7b97\u51fa\u7684\u503c\u662f 6\u3002 \u51fd\u6570\u8c03\u7528\u662f\u4e00\u4e2a\u8868\u8fbe\u5f0f \u3002 \u5b8f\u8c03\u7528\u662f\u4e00\u4e2a\u8868\u8fbe\u5f0f \u3002 \u7528\u5927\u62ec\u53f7\u521b\u5efa\u7684\u4e00\u4e2a\u65b0\u7684\u5757\u4f5c\u7528\u57df\u4e5f\u662f\u4e00\u4e2a\u8868\u8fbe\u5f0f \uff0c\u4f8b\u5982\uff1a fn main () { let y = { let x = 3 ; x + 1 }; // \u662f\u4e00\u4e2a\u4ee3\u7801\u5757\uff0c\u5b83\u7684\u503c\u662f 4 // \u8fd9\u4e2a\u503c\u4f5c\u4e3a let \u8bed\u53e5\u7684\u4e00\u90e8\u5206\u88ab\u7ed1\u5b9a\u5230 y \u4e0a\u3002 // \u6ce8\u610f x+1 \u8fd9\u4e00\u884c\u5728\u7ed3\u5c3e\u6ca1\u6709\u5206\u53f7\uff0c\u4e0e\u4f60\u89c1\u8fc7\u7684\u5927\u90e8\u5206\u4ee3\u7801\u884c\u4e0d\u540c\u3002 // \u8868\u8fbe\u5f0f\u7684\u7ed3\u5c3e\u6ca1\u6709\u5206\u53f7\u3002 // \u5982\u679c\u5728\u8868\u8fbe\u5f0f\u7684\u7ed3\u5c3e\u52a0\u4e0a\u5206\u53f7\uff0c\u5b83\u5c31\u53d8\u6210\u4e86\u8bed\u53e5\uff0c\u800c\u8bed\u53e5\u4e0d\u4f1a\u8fd4\u56de\u503c\u3002 // \u5728\u63a5\u4e0b\u6765\u63a2\u7d22\u5177\u6709\u8fd4\u56de\u503c\u7684\u51fd\u6570\u548c\u8868\u8fbe\u5f0f\u65f6\u8981\u8c28\u8bb0\u8fd9\u4e00\u70b9\u3002 println! ( \"The value of y is: {y}\" ); }","title":"\u8bed\u53e5\u548c\u8868\u8fbe\u5f0f"},{"location":"common-programing-concepts/#_20","text":"\u51fd\u6570\u53ef\u4ee5\u5411\u8c03\u7528\u5b83\u7684\u4ee3\u7801\u8fd4\u56de\u503c\u3002\u6211\u4eec \u5e76\u4e0d\u5bf9\u8fd4\u56de\u503c\u547d\u540d\uff0c\u4f46\u8981\u5728\u7bad\u5934\uff08->\uff09\u540e\u58f0\u660e\u5b83\u7684\u7c7b\u578b \u3002 \u5728 Rust \u4e2d\uff0c \u51fd\u6570\u7684\u8fd4\u56de\u503c\u7b49\u540c\u4e8e\u51fd\u6570\u4f53\u6700\u540e\u4e00\u4e2a\u8868\u8fbe\u5f0f\u7684\u503c \u3002 \u4f7f\u7528 return \u5173\u952e\u5b57\u548c\u6307\u5b9a\u503c\uff0c\u53ef\u4ece\u51fd\u6570\u4e2d\u63d0\u524d\u8fd4\u56de\uff1b \u4f46\u5927\u90e8\u5206\u51fd\u6570\u9690\u5f0f\u7684\u8fd4\u56de\u6700\u540e\u7684\u8868\u8fbe\u5f0f\u3002 \u8fd9\u662f\u4e00\u4e2a\u6709\u8fd4\u56de\u503c\u7684\u51fd\u6570\u7684\u4f8b\u5b50\uff1a // \u5728 five \u51fd\u6570\u4e2d\u6ca1\u6709\u51fd\u6570\u8c03\u7528\u3001\u5b8f\u3001\u751a\u81f3\u6ca1\u6709 let \u8bed\u53e5 \u2014\u2014 \u53ea\u6709\u6570\u5b57 5\u3002 // \u8fd9\u5728 Rust \u4e2d\u662f\u4e00\u4e2a\u5b8c\u5168\u6709\u6548\u7684\u51fd\u6570\u3002 // \u6ce8\u610f\uff0c\u4e5f\u6307\u5b9a\u4e86\u51fd\u6570\u8fd4\u56de\u503c\u7684\u7c7b\u578b\uff0c\u5c31\u662f -> i32\u3002 fn five () -> i32 { 5 // five \u51fd\u6570\u6ca1\u6709\u53c2\u6570\u5e76\u5b9a\u4e49\u4e86\u8fd4\u56de\u503c\u7c7b\u578b\uff0c\u4e0d\u8fc7\u51fd\u6570\u4f53\u53ea\u6709\u5355\u5355\u4e00\u4e2a 5 \u4e5f\u6ca1\u6709\u5206\u53f7\uff0c\u56e0\u4e3a\u8fd9\u662f\u4e00\u4e2a\u8868\u8fbe\u5f0f\uff0c\u6211\u4eec\u60f3\u8981\u8fd4\u56de\u5b83\u7684\u503c\u3002 } fn main () { // \u8fd9\u4e00\u884c\u8868\u660e\u6211\u4eec\u4f7f\u7528\u51fd\u6570\u7684\u8fd4\u56de\u503c\u521d\u59cb\u5316\u4e00\u4e2a\u53d8\u91cf\u3002 // \u56e0\u4e3a five \u51fd\u6570\u8fd4\u56de 5\uff0c\u8fd9\u4e00\u884c\u4e0e\u4ee3\u7801 let x = 5; \u76f8\u540c let x = five (); println! ( \"The value of x is: {x}\" ); } \u8ba9\u6211\u4eec\u770b\u770b\u53e6\u4e00\u4e2a\u4f8b\u5b50\uff1a fn main () { let x = plus_one ( 5 ); println! ( \"The value of x is: {x}\" ); } fn plus_one ( x : i32 ) -> i32 { x + 1 // \u5982\u679c\u5728\u5305\u542b x + 1 \u7684\u884c\u5c3e\u52a0\u4e0a\u4e00\u4e2a\u5206\u53f7\uff0c\u628a\u5b83\u4ece\u8868\u8fbe\u5f0f\u53d8\u6210\u8bed\u53e5\uff0c\u6211\u4eec\u5c06\u770b\u5230\u4e00\u4e2a\u9519\u8bef\u3002 }","title":"\u5177\u6709\u8fd4\u56de\u503c\u7684\u51fd\u6570"},{"location":"common-programing-concepts/#_21","text":"\u7a0b\u5e8f\u5458\u5728\u6e90\u7801\u4e2d\u7559\u4e0b \u6ce8\u91ca \uff08comments\uff09\uff0c\u7f16\u8bd1\u5668\u4f1a\u5ffd\u7565\u5b83\u4eec\uff0c\u4e0d\u8fc7\u9605\u8bfb\u4ee3\u7801\u7684\u4eba\u53ef\u80fd\u89c9\u5f97\u6709\u7528\u3002","title":"\u6ce8\u91ca"},{"location":"common-programing-concepts/#_22","text":"\u60ef\u7528\u7684\u6ce8\u91ca\u6837\u5f0f\u662f\u4ee5\u4e24\u4e2a\u659c\u6760\u5f00\u59cb\u6ce8\u91ca\uff0c\u5e76\u6301\u7eed\u5230\u672c\u884c\u7684\u7ed3\u5c3e\u3002\u5bf9\u4e8e\u8d85\u8fc7\u4e00\u884c\u7684\u6ce8\u91ca\uff0c\u9700\u8981\u5728\u6bcf\u4e00\u884c\u524d\u90fd\u52a0\u4e0a // // So we\u2019re doing something complicated here, long enough that we need // multiple lines of comments to do it! Whew! Hopefully, this comment will // explain what\u2019s going on. \u6ce8\u91ca\u4e5f\u53ef\u4ee5\u653e\u5728\u5305\u542b\u4ee3\u7801\u7684\u884c\u7684\u672b\u5c3e\uff1a fn main () { let lucky_number = 7 ; // I\u2019m feeling lucky today }","title":"\u5355\u884c\u6ce8\u91ca"},{"location":"common-programing-concepts/#_23","text":"","title":"\u6587\u6863\u6ce8\u91ca"},{"location":"common-programing-concepts/#_24","text":"\u6839\u636e\u6761\u4ef6\u662f\u5426\u4e3a\u771f\u6765\u51b3\u5b9a\u662f\u5426\u6267\u884c\u67d0\u4e9b\u4ee3\u7801\uff0c\u4ee5\u53ca\u6839\u636e\u6761\u4ef6\u662f\u5426\u4e3a\u771f\u6765\u91cd\u590d\u8fd0\u884c\u4e00\u6bb5\u4ee3\u7801\u7684\u80fd\u529b\u662f\u5927\u90e8\u5206\u7f16\u7a0b\u8bed\u8a00\u7684\u57fa\u672c\u7ec4\u6210\u90e8\u5206\u3002","title":"\u63a7\u5236\u6d41"},{"location":"common-programing-concepts/#if","text":"if \u8868\u8fbe\u5f0f\u5141\u8bb8\u6839\u636e\u6761\u4ef6\u6267\u884c\u4e0d\u540c\u7684\u4ee3\u7801\u5206\u652f\u3002 fn main () { let number = 3 ; // \u6240\u6709\u7684 if \u8868\u8fbe\u5f0f\u90fd\u4ee5 if \u5173\u952e\u5b57\u5f00\u5934\uff0c\u5176\u540e\u8ddf\u4e00\u4e2a\u6761\u4ef6\u3002 if number < 5 { // \u5728\u6761\u4ef6\u4e3a\u771f\u65f6\u5e0c\u671b\u6267\u884c\u7684\u4ee3\u7801\u5757\u4f4d\u4e8e\u7d27\u8ddf\u6761\u4ef6\u4e4b\u540e\u7684\u5927\u62ec\u53f7\u4e2d\u3002 println! ( \"condition was true\" ); } else { // \u4e00\u4e2a\u53ef\u9009\u7684 else \u8868\u8fbe\u5f0f\u6765\u63d0\u4f9b\u4e00\u4e2a\u5728\u6761\u4ef6\u4e3a\u5047\u65f6\u5e94\u5f53\u6267\u884c\u7684\u4ee3\u7801\u5757 println! ( \"condition was false\" ); } } \u503c\u5f97\u6ce8\u610f\u7684\u662f\u4ee3\u7801\u4e2d\u7684\u6761\u4ef6 \u5fc5\u987b \u662f bool \u503c\u3002\u5982\u679c\u6761\u4ef6\u4e0d\u662f bool \u503c\uff0c\u6211\u4eec\u5c06\u5f97\u5230\u4e00\u4e2a\u9519\u8bef\u3002 fn main () { let number = 3 ; // \u4f1a\u62a5\uff0cexpected `bool`, found integer \u9519\u8bef\u3002 // Rust \u5e76\u4e0d\u4f1a\u5c1d\u8bd5\u81ea\u52a8\u5730\u5c06\u975e\u5e03\u5c14\u503c\u8f6c\u6362\u4e3a\u5e03\u5c14\u503c\u3002 // \u5fc5\u987b\u603b\u662f\u663e\u5f0f\u5730\u4f7f\u7528\u5e03\u5c14\u503c\u4f5c\u4e3a if \u7684\u6761\u4ef6\u3002 if number { println! ( \"number was three\" ); } }","title":"if\u8868\u8fbe\u5f0f"},{"location":"common-programing-concepts/#else-if","text":"\u53ef\u4ee5\u5c06 else if \u8868\u8fbe\u5f0f\u4e0e if \u548c else \u7ec4\u5408\u6765\u5b9e\u73b0\u591a\u91cd\u6761\u4ef6\u3002 fn main () { let number = 6 ; // \u6309\u987a\u5e8f\u68c0\u67e5\u6bcf\u4e2a if \u8868\u8fbe\u5f0f\u5e76\u6267\u884c\u7b2c\u4e00\u4e2a\u6761\u4ef6\u4e3a\u771f\u7684\u4ee3\u7801\u5757\u3002 if number % 4 == 0 { println! ( \"number is divisible by 4\" ); } else if number % 3 == 0 { println! ( \"number is divisible by 3\" ); } else if number % 2 == 0 { println! ( \"number is divisible by 2\" ); } else { println! ( \"number is not divisible by 4, 3, or 2\" ); } // Rust \u53ea\u4f1a\u6267\u884c\u7b2c\u4e00\u4e2a\u6761\u4ef6\u4e3a\u771f\u7684\u4ee3\u7801\u5757\uff0c\u5e76\u4e14\u4e00\u65e6\u5b83\u627e\u5230\u4e00\u4e2a\u4ee5\u540e\uff0c\u751a\u81f3\u90fd\u4e0d\u4f1a\u68c0\u67e5\u5269\u4e0b\u7684\u6761\u4ef6\u4e86\u3002 } \u4f7f\u7528\u8fc7\u591a\u7684 else if \u8868\u8fbe\u5f0f\u4f1a\u4f7f\u4ee3\u7801\u663e\u5f97\u6742\u4e71\u65e0\u7ae0\uff0c\u6240\u4ee5\u5982\u679c\u6709\u591a\u4e8e\u4e00\u4e2a else if \u8868\u8fbe\u5f0f\uff0c\u6700\u597d\u91cd\u6784\u4ee3\u7801\u3002 \u4e3a\u6b64\uff0c\u7b2c\u516d\u7ae0\u4f1a\u4ecb\u7ecd\u4e00\u4e2a\u5f3a\u5927\u7684 Rust \u5206\u652f\u7ed3\u6784\uff08branching construct\uff09\uff0c\u53eb\u505a match \u3002","title":"else if \u8868\u8fbe\u5f0f"},{"location":"common-programing-concepts/#letif","text":"\u56e0\u4e3a if \u662f\u4e00\u4e2a\u8868\u8fbe\u5f0f\uff0c\u53ef\u4ee5\u5728 let \u8bed\u53e5\u7684\u53f3\u4fa7\u4f7f\u7528\u5b83\uff0c fn main () { let condition = true ; let number = if condition { 5 } else { 6 }; // \u5c06 if \u8868\u8fbe\u5f0f\u7684\u8fd4\u56de\u503c\u8d4b\u7ed9\u4e00\u4e2a\u53d8\u91cf // \u4ee3\u7801\u5757\u7684\u503c\u662f\u5176\u6700\u540e\u4e00\u4e2a\u8868\u8fbe\u5f0f\u7684\u503c\uff0c\u800c\u6570\u5b57\u672c\u8eab\u5c31\u662f\u4e00\u4e2a\u8868\u8fbe\u5f0f\u3002 println! ( \"The value of number is: {number}\" ); } \u7c7b\u578b\u9700\u7edf\u4e00 fn main () { let condition = true ; let number = if condition { 5 } else { \"six\" }; // \u7c7b\u578b\u4e0d\u7edf\u4e00\uff0c\u4f1a\u62a5\u9519\uff0cexpected integer, found `&str` println! ( \"The value of number is: {number}\" ); }","title":"let\u4e2d\u7684if"},{"location":"common-programing-concepts/#_25","text":"\u591a\u6b21\u6267\u884c\u540c\u4e00\u6bb5\u4ee3\u7801\u662f\u5f88\u5e38\u7528\u7684\uff0cRust \u4e3a\u6b64\u63d0\u4f9b\u4e86\u591a\u79cd \u5faa\u73af\uff08loops\uff09\u3002","title":"\u5faa\u73af\u8868\u8fbe\u5f0f"},{"location":"common-programing-concepts/#loop","text":"loop \u5173\u952e\u5b57\u544a\u8bc9 Rust \u4e00\u904d\u53c8\u4e00\u904d\u5730\u6267\u884c\u4e00\u6bb5\u4ee3\u7801\u76f4\u5230\u4f60\u660e\u786e\u8981\u6c42\u505c\u6b62\u3002 fn main () { loop { // \u4f1a\u770b\u5230\u8fde\u7eed\u7684\u53cd\u590d\u6253\u5370 again!\uff0c\u76f4\u5230\u6211\u4eec\u624b\u52a8\u505c\u6b62\u7a0b\u5e8f\u3002 // \u5927\u90e8\u5206\u7ec8\u7aef\u90fd\u652f\u6301\u4e00\u4e2a\u5feb\u6377\u952e\uff0cctrl-c\uff0c\u6765\u7ec8\u6b62\u4e00\u4e2a\u9677\u5165\u65e0\u9650\u5faa\u73af\u7684\u7a0b\u5e8f\u3002 println! ( \"again!\" ); } } break \u5173\u952e\u5b57\u6765\u544a\u8bc9\u7a0b\u5e8f\u4f55\u65f6\u505c\u6b62\u5faa\u73af\u3002 continue \u5173\u952e\u5b57\u544a\u8bc9\u7a0b\u5e8f\u8df3\u8fc7\u8fd9\u4e2a\u5faa\u73af\u8fed\u4ee3\u4e2d\u7684\u4efb\u4f55\u5269\u4f59\u4ee3\u7801\uff0c\u5e76\u8f6c\u5230\u4e0b\u4e00\u4e2a\u8fed\u4ee3\u3002","title":"loop \u5faa\u73af"},{"location":"common-programing-concepts/#_26","text":"loop \u7684\u4e00\u4e2a\u7528\u4f8b\u662f\u91cd\u8bd5\u53ef\u80fd\u4f1a\u5931\u8d25\u7684\u64cd\u4f5c\uff0c\u6bd4\u5982\u68c0\u67e5\u7ebf\u7a0b\u662f\u5426\u5b8c\u6210\u4e86\u4efb\u52a1\u3002\u7136\u800c\u4f60\u53ef\u80fd\u4f1a\u9700\u8981\u5c06\u64cd\u4f5c\u7684\u7ed3\u679c\u4f20\u9012\u7ed9\u5176\u5b83\u7684\u4ee3\u7801\u3002\u5982\u679c\u5c06\u8fd4\u56de\u503c\u52a0\u5165\u4f60\u7528\u6765\u505c\u6b62\u5faa\u73af\u7684 break \u8868\u8fbe\u5f0f\uff0c\u5b83\u4f1a\u88ab\u505c\u6b62\u7684\u5faa\u73af\u8fd4\u56de\uff1a fn main () { // \u4e00\u4e2a\u540d\u4e3a counter \u7684\u53d8\u91cf\u5e76\u521d\u59cb\u5316\u4e3a 0 let mut counter = 0 ; // \u63a5\u7740\u58f0\u660e\u4e86\u4e00\u4e2a\u540d\u4e3a result \u6765\u5b58\u653e\u5faa\u73af\u7684\u8fd4\u56de\u503c\u3002 let result = loop { // \u5728\u5faa\u73af\u7684\u6bcf\u4e00\u6b21\u8fed\u4ee3\u4e2d\uff0c\u6211\u4eec\u5c06 counter \u53d8\u91cf\u52a0 1 counter += 1 ; // \u63a5\u7740\u68c0\u67e5\u8ba1\u6570\u662f\u5426\u7b49\u4e8e 10\u3002 if counter == 10 { // \u4f7f\u7528 break \u5173\u952e\u5b57\u8fd4\u56de\u503c counter * 2 break counter * 2 ; // \u901a\u8fc7\u5206\u53f7\u7ed3\u675f\u8d4b\u503c\u7ed9 result \u7684\u8bed\u53e5\u3002 } }; // \u6700\u540e\u6253\u5370\u51fa result \u7684\u503c\uff0c\u4e5f\u5c31\u662f 20\u3002 println! ( \"The result is {result}\" ); }","title":"\u4ece\u5faa\u73af\u8fd4\u56de\u503c"},{"location":"common-programing-concepts/#_27","text":"\u5982\u679c\u5b58\u5728\u5d4c\u5957\u5faa\u73af\uff0c break \u548c continue \u5e94\u7528\u4e8e\u6b64\u65f6\u6700\u5185\u5c42\u7684\u5faa\u73af\u3002\u4f60\u53ef\u4ee5\u9009\u62e9\u5728\u4e00\u4e2a\u5faa\u73af\u4e0a\u6307\u5b9a\u4e00\u4e2a \u5faa\u73af\u6807\u7b7e \uff08loop label\uff09\uff0c\u7136\u540e\u5c06\u6807\u7b7e\u4e0e break \u6216 continue \u4e00\u8d77\u4f7f\u7528\uff0c\u4f7f\u8fd9\u4e9b\u5173\u952e\u5b57\u5e94\u7528\u4e8e\u5df2\u6807\u8bb0\u7684\u5faa\u73af\u800c\u4e0d\u662f\u6700\u5185\u5c42\u7684\u5faa\u73af\u3002 fn main () { let mut count = 0 ; // \u5916\u5c42\u5faa\u73af\u6709\u4e00\u4e2a\u6807\u7b7e counting_up ' counting_up : loop { println! ( \"count = {count}\" ); let mut remaining = 10 ; // \u6ca1\u6709\u6807\u7b7e\u7684\u5185\u90e8\u5faa\u73af\u4ece 10 \u5411\u4e0b\u6570\u5230 9\u3002 loop { println! ( \"remaining = {remaining}\" ); if remaining == 9 { // \u6ca1\u6709\u6307\u5b9a\u6807\u7b7e\u7684 break \u5c06\u53ea\u9000\u51fa\u5185\u5c42\u5faa\u73af\u3002 break ; } if count == 2 { // break 'counting_up; \u8bed\u53e5\u5c06\u9000\u51fa\u5916\u5c42\u5faa\u73af\u3002 break 'counting_up ; } remaining -= 1 ; } count += 1 ; } println! ( \"End count = {count}\" ); }","title":"\u5faa\u73af\u6807\u7b7e"},{"location":"common-programing-concepts/#while","text":"\u5f53\u6761\u4ef6\u4e3a\u771f\uff0c\u6267\u884c\u5faa\u73af\u3002\u5f53\u6761\u4ef6\u4e0d\u518d\u4e3a\u771f\uff0c\u8c03\u7528 break \u505c\u6b62\u5faa\u73af\u3002 \u6bd4\u5982\uff1a fn main () { let mut number = 3 ; // \u5f53\u6761\u4ef6\u4e3a\u771f\u65f6\uff0c\u4f7f\u7528 while \u5faa\u73af\u8fd0\u884c\u4ee3\u7801 // \u8fd9\u79cd\u7ed3\u6784\u6d88\u9664\u4e86\u5f88\u591a\u4f7f\u7528 loop\u3001if\u3001else \u548c break \u65f6\u6240\u5fc5\u987b\u7684\u5d4c\u5957\uff0c\u8fd9\u6837\u66f4\u52a0\u6e05\u6670\u3002 while number != 0 { println! ( \"{number}!\" ); number -= 1 ; } println! ( \"LIFTOFF!!!\" ); }","title":"while \u5faa\u73af"},{"location":"common-programing-concepts/#for","text":"\u53ef\u4ee5\u4f7f\u7528 for \u5faa\u73af\u6765\u5bf9\u4e00\u4e2a\u96c6\u5408\u7684\u6bcf\u4e2a\u5143\u7d20\u6267\u884c\u4e00\u4e9b\u4ee3\u7801\u3002 fn main () { let a = [ 10 , 20 , 30 , 40 , 50 ]; for element in a { println! ( \"the value is: {element}\" ); } } for \u5faa\u73af\u7684\u5b89\u5168\u6027\u548c\u7b80\u6d01\u6027\u4f7f\u5f97\u5b83\u6210\u4e3a Rust \u4e2d\u5728\u7528\u4e8e\u904d\u5386\u6570\u7ec4\u65f6\u662f\u4f7f\u7528\u6700\u591a\u7684\u5faa\u73af\u7ed3\u6784\u3002 \u53e6\u4e00\u4e2a\u4f8b\u5b50\uff1a fn main () { // \u904d\u5386\u6807\u51c6\u5e93\u63d0\u4f9b\u7684\u7c7b\u578bRange\u7c7b\u578b // \u7528\u6765\u751f\u6210\u4ece\u4e00\u4e2a\u6570\u5b57\u5f00\u59cb\u5230\u53e6\u4e00\u4e2a\u6570\u5b57\u4e4b\u524d\u7ed3\u675f\u7684\u6240\u6709\u6570\u5b57\u7684\u5e8f\u5217\u3002 // rev\uff0c\u7528\u6765\u53cd\u8f6c range for number in ( 1 .. 4 ). rev () { println! ( \"{number}!\" ); } println! ( \"LIFTOFF!!!\" ); }","title":"for \u5faa\u73af"},{"location":"guessing-game/","text":"\u731c\u6570\u6e38\u620f \u521b\u5efa\u65b0\u9879\u76ee cargo new guessing_game cd guessing_game \u5904\u7406\u4e00\u6b21\u731c\u6d4b\u8f93\u5165 \u6587\u4ef6\u540d: src/main.rs // \u9884\u5bfc\u5165 // io\u8f93\u5165/\u8f93\u51fa\u5e93\u5f15\u5165\u5f53\u524d\u4f5c\u7528\u57df; // io \u5e93\u6765\u81ea\u4e8e\u6807\u51c6\u5e93\uff0c\u4e5f\u88ab\u79f0\u4e3a std use std :: io ; // main \u51fd\u6570\u662f\u7a0b\u5e8f\u7684\u5165\u53e3\u70b9 // fn \u8bed\u6cd5\u58f0\u660e\u4e86\u4e00\u4e2a\u65b0\u51fd\u6570 // () \u8868\u660e\u6ca1\u6709\u53c2\u6570 // { \u4f5c\u4e3a\u51fd\u6570\u4f53\u7684\u5f00\u59cb fn main () { println! ( \"Guess the number!\" ); // println! \u662f\u4e00\u4e2a\u5728\u5c4f\u5e55\u4e0a\u6253\u5370\u5b57\u7b26\u4e32\u7684\u5b8f println! ( \"Please input your guess.\" ); // println! \u662f\u4e00\u4e2a\u5728\u5c4f\u5e55\u4e0a\u6253\u5370\u5b57\u7b26\u4e32\u7684\u5b8f // \u521b\u5efa\u4e00\u4e2a \u53d8\u91cf\uff08variable\uff09\u6765\u50a8\u5b58\u7528\u6237\u8f93\u5165 // \u5728 Rust \u4e2d\uff0c\u53d8\u91cf\u9ed8\u8ba4\u662f\u4e0d\u53ef\u53d8\u7684\uff0c\u8fd9\u610f\u5473\u7740\u4e00\u65e6\u6211\u4eec\u7ed9\u53d8\u91cf\u8d4b\u503c\uff0c\u8fd9\u4e2a\u503c\u5c31\u4e0d\u518d\u53ef\u4ee5\u4fee\u6539\u4e86\u3002 let mut guess = String :: new (); // \u5728\u53d8\u91cf\u540d\u524d\u4f7f\u7528 mut \u6765\u4f7f\u4e00\u4e2a\u53d8\u91cf\u53ef\u53d8 // String \u662f\u4e00\u4e2a\u6807\u51c6\u5e93\u63d0\u4f9b\u7684\u5b57\u7b26\u4e32\u7c7b\u578b\uff0c\u5b83\u662f UTF-8 \u7f16\u7801\u7684\u53ef\u589e\u957f\u6587\u672c\u5757\u3002 // ::new \u90a3\u4e00\u884c\u7684 :: \u8bed\u6cd5\u8868\u660e new \u662f String \u7c7b\u578b\u7684\u4e00\u4e2a \u5173\u8054\u51fd\u6570\uff08associated function\uff09\u3002 // \u5173\u8054\u51fd\u6570\u662f\u9488\u5bf9\u7c7b\u578b\u5b9e\u73b0\u7684\uff0c\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\u662f String\uff0c\u800c\u4e0d\u662f String \u7684\u67d0\u4e2a\u7279\u5b9a\u5b9e\u4f8b\u3002\u4e00\u4e9b\u8bed\u8a00\u4e2d\u628a\u5b83\u79f0\u4e3a \u9759\u6001\u65b9\u6cd5\uff08static method\uff09\u3002 // new \u51fd\u6570\u521b\u5efa\u4e86\u4e00\u4e2a\u65b0\u7684\u7a7a\u5b57\u7b26\u4e32\uff0c\u4f60\u4f1a\u53d1\u73b0\u5f88\u591a\u7c7b\u578b\u4e0a\u6709 new \u51fd\u6570\uff0c\u56e0\u4e3a\u5b83\u662f\u521b\u5efa\u7c7b\u578b\u5b9e\u4f8b\u7684\u60ef\u7528\u51fd\u6570\u540d\u3002 // \u603b\u7684\u6765\u8bf4\uff0clet mut guess = String::new(); \u8fd9\u4e00\u884c\u521b\u5efa\u4e86\u4e00\u4e2a\u53ef\u53d8\u53d8\u91cf\uff0c\u5f53\u524d\u5b83\u7ed1\u5b9a\u5230\u4e00\u4e2a\u65b0\u7684 String \u7a7a\u5b9e\u4f8b\u4e0a\u3002 // \u5982\u679c\u7a0b\u5e8f\u7684\u5f00\u5934\u6ca1\u6709\u4f7f\u7528 use std::io \u5f15\u5165 io \u5e93\uff0c\u6211\u4eec\u4ecd\u53ef\u4ee5\u901a\u8fc7\u628a\u51fd\u6570\u8c03\u7528\u5199\u6210 std::io::stdin \u6765\u4f7f\u7528\u51fd\u6570\u3002 // stdin \u51fd\u6570\u8fd4\u56de\u4e00\u4e2a std::io::Stdin \u7684\u5b9e\u4f8b\uff0c\u8fd9\u4ee3\u8868\u7ec8\u7aef\u6807\u51c6\u8f93\u5165\u53e5\u67c4\u7684\u7c7b\u578b\u3002 io :: stdin () . read_line ( & mut guess ) // \u4ece\u6807\u51c6\u8f93\u5165\u53e5\u67c4\u83b7\u53d6\u7528\u6237\u8f93\u5165\u3002 // \u5c06 &mut guess \u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\u7ed9 read_line() \u51fd\u6570\uff0c\u8ba9\u5176\u5c06\u7528\u6237\u8f93\u5165\u50a8\u5b58\u5230\u8fd9\u4e2a\u5b57\u7b26\u4e32\u4e2d\u3002 // read_line \u7684\u5de5\u4f5c\u662f\uff0c\u65e0\u8bba\u7528\u6237\u5728\u6807\u51c6\u8f93\u5165\u4e2d\u952e\u5165\u4ec0\u4e48\u5185\u5bb9\uff0c\u90fd\u5c06\u5176\u8ffd\u52a0\uff08\u4e0d\u4f1a\u8986\u76d6\u5176\u539f\u6709\u5185\u5bb9\uff09\u5230\u4e00\u4e2a\u5b57\u7b26\u4e32\u4e2d\uff0c\u56e0\u6b64\u5b83\u9700\u8981\u5b57\u7b26\u4e32\u4f5c\u4e3a\u53c2\u6570\u3002 // \u8fd9\u4e2a\u5b57\u7b26\u4e32\u53c2\u6570\u5e94\u8be5\u662f\u53ef\u53d8\u7684\uff0c\u4ee5\u4fbf read_line \u5c06\u7528\u6237\u8f93\u5165\u9644\u52a0\u4e0a\u53bb\u3002 // & \u8868\u793a\u8fd9\u4e2a\u53c2\u6570\u662f\u4e00\u4e2a \u5f15\u7528\uff08reference\uff09\uff0c\u5b83\u5141\u8bb8\u591a\u5904\u4ee3\u7801\u8bbf\u95ee\u540c\u4e00\u5904\u6570\u636e\uff0c\u800c\u65e0\u9700\u5728\u5185\u5b58\u4e2d\u591a\u6b21\u62f7\u8d1d\u3002 . expect ( \"Failed to read line\" ); // \u4f1a\u8fd4\u56de\u4e00\u4e2a\u7c7b\u578b\u4e3a Result \u7684\u503c\u3002 Result \u662f\u4e00\u79cd\u679a\u4e3e\u7c7b\u578b\uff0c\u901a\u5e38\u4e5f\u5199\u4f5c enum\u3002 // \u679a\u4e3e\u7c7b\u578b\u53d8\u91cf\u7684\u503c\u53ef\u4ee5\u662f\u591a\u79cd\u53ef\u80fd\u72b6\u6001\u4e2d\u7684\u4e00\u4e2a\u3002\u6211\u4eec\u628a\u6bcf\u79cd\u53ef\u80fd\u7684\u72b6\u6001\u79f0\u4e3a\u4e00\u79cd \u679a\u4e3e\u6210\u5458\uff08variant\uff09\u3002 // \u8fd9\u91cc\u7684 Result \u7c7b\u578b\u5c06\u7528\u6765\u7f16\u7801\u9519\u8bef\u5904\u7406\u7684\u4fe1\u606f\u3002 // Result \u7684\u6210\u5458\u662f Ok \u548c Err\uff0c // Ok \u6210\u5458\u8868\u793a\u64cd\u4f5c\u6210\u529f\uff0c\u5185\u90e8\u5305\u542b\u6210\u529f\u65f6\u4ea7\u751f\u7684\u503c\u3002 // Err \u6210\u5458\u5219\u610f\u5473\u7740\u64cd\u4f5c\u5931\u8d25\uff0c\u5e76\u4e14\u5305\u542b\u5931\u8d25\u7684\u524d\u56e0\u540e\u679c\u3002 // Result \u7c7b\u578b\u7684\u503c\uff0c\u50cf\u5176\u4ed6\u7c7b\u578b\u4e00\u6837\uff0c\u62e5\u6709\u5b9a\u4e49\u4e8e\u5176\u4e0a\u7684\u65b9\u6cd5\u3002Result \u7684\u5b9e\u4f8b\u62e5\u6709 expect \u65b9\u6cd5\u3002 // \u5982\u679c io::Result \u5b9e\u4f8b\u7684\u503c\u662f Err\uff0cexpect \u4f1a\u5bfc\u81f4\u7a0b\u5e8f\u5d29\u6e83\uff0c\u5e76\u663e\u793a\u5f53\u505a\u53c2\u6570\u4f20\u9012\u7ed9 expect \u7684\u4fe1\u606f\u3002 // \u5982\u679c read_line \u65b9\u6cd5\u8fd4\u56de Err\uff0c\u5219\u53ef\u80fd\u662f\u6765\u6e90\u4e8e\u5e95\u5c42\u64cd\u4f5c\u7cfb\u7edf\u9519\u8bef\u7684\u7ed3\u679c\u3002 // \u5982\u679c Result \u5b9e\u4f8b\u7684\u503c\u662f Ok\uff0cexpect \u4f1a\u83b7\u53d6 Ok \u4e2d\u7684\u503c\u5e76\u539f\u6837\u8fd4\u56de\u3002 // \u5728\u672c\u4f8b\u4e2d\uff0c\u8fd9\u4e2a\u503c\u662f\u7528\u6237\u8f93\u5165\u5230\u6807\u51c6\u8f93\u5165\u4e2d\u7684\u5b57\u8282\u6570\u3002 // \u5982\u679c\u4e0d\u8c03\u7528 expect\uff0c\u7a0b\u5e8f\u4e5f\u80fd\u7f16\u8bd1\uff0c\u4e0d\u8fc7\u4f1a\u51fa\u73b0\u4e00\u4e2a\u8b66\u544a\uff1a // note: this `Result` may be an `Err` variant, which should be handled // Rust \u8b66\u544a\u6211\u4eec\u6ca1\u6709\u4f7f\u7528 read_line \u7684\u8fd4\u56de\u503c Result\uff0c\u8bf4\u660e\u6709\u4e00\u4e2a\u53ef\u80fd\u7684\u9519\u8bef\u6ca1\u6709\u5904\u7406\u3002 // \u6d88\u9664\u8b66\u544a\u7684\u6b63\u786e\u505a\u6cd5\u662f\u5b9e\u9645\u53bb\u7f16\u5199\u9519\u8bef\u5904\u7406\u4ee3\u7801\uff0c\u4e0d\u8fc7\u7531\u4e8e\u6211\u4eec\u5c31\u662f\u5e0c\u671b\u7a0b\u5e8f\u5728\u51fa\u73b0\u95ee\u9898\u65f6\u7acb\u5373\u5d29\u6e83\uff0c\u6240\u4ee5\u76f4\u63a5\u4f7f\u7528 expect\u3002 // \u7ee7\u7eed\u6df1\u5165\u5b66\u4e60\u7684\u8bdd\uff0c\u5c06\u4f1a\u5b66\u4e60\u5230\u5982\u4f55\u4ece\u9519\u8bef\u4e2d\u6062\u590d\u3002 println! ( \"You guessed: {guess}\" ); // \u6253\u5370\u4e86\u5b58\u50a8\u7528\u6237\u8f93\u5165\u7684\u5b57\u7b26\u4e32\u3002 // \u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\uff0c\u91cc\u9762\u7684 {} \u662f\u9884\u7559\u5728\u7279\u5b9a\u4f4d\u7f6e\u7684\u5360\u4f4d\u7b26 // \u4f7f\u7528 {} \u4e5f\u53ef\u4ee5\u6253\u5370\u591a\u4e2a\u503c\uff1a // \u7b2c\u4e00\u5bf9 {} \u4f7f\u7528\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u4e4b\u540e\u7684\u7b2c\u4e00\u4e2a\u503c\uff0c\u7b2c\u4e8c\u5bf9\u5219\u4f7f\u7528\u7b2c\u4e8c\u4e2a\u503c\uff0c\u4f9d\u6b64\u7c7b\u63a8\u3002\u8c03 // \u7528\u4e00\u6b21 println! \u6253\u5370\u591a\u4e2a\u503c\u770b\u8d77\u6765\u50cf\u8fd9\u6837\uff1a // println!(\"x = {} and y = {}\", x, y); } \u751f\u6210\u4e00\u4e2a\u79d8\u5bc6\u6570\u5b57 Rust \u6807\u51c6\u5e93\u4e2d\u5c1a\u672a\u5305\u542b\u968f\u673a\u6570\u529f\u80fd\u3002\u7136\u800c\uff0cRust \u56e2\u961f\u8fd8\u662f\u63d0\u4f9b\u4e86\u4e00\u4e2a\u5305\u542b\u4e0a\u8ff0\u529f\u80fd\u7684 rand crate \u3002 rand crate \u662f\u4e00\u4e2a \u5e93 crate \uff0c \u5e93 crate \u53ef\u4ee5\u5305\u542b\u4efb\u610f\u80fd\u88ab\u5176\u4ed6\u7a0b\u5e8f\u4f7f\u7528\u7684\u4ee3\u7801\uff0c\u4f46\u662f\u4e0d\u80fd\u81ea\u6267\u884c\u3002 \u5728\u4f7f\u7528 rand \u7f16\u5199\u4ee3\u7801\u4e4b\u524d\uff0c\u9700\u8981\u4fee\u6539 Cargo.toml \u6587\u4ef6\uff0c\u5f15\u5165\u4e00\u4e2a rand \u4f9d\u8d56\u3002\u73b0\u5728\u6253\u5f00\u8fd9\u4e2a\u6587\u4ef6\u5e76\u5c06\u4e0b\u9762\u8fd9\u4e00\u884c\u6dfb\u52a0\u5230 [dependencies] \u7247\u6bb5\u6807\u9898\u4e4b\u4e0b\u3002 \u6587\u4ef6\u540d: Cargo.toml rand = \"0.8.3\" [dependencies] \u7247\u6bb5\u544a\u8bc9 Cargo \u672c\u9879\u76ee\u4f9d\u8d56\u4e86\u54ea\u4e9b\u5916\u90e8 crate \u53ca\u5176\u7248\u672c\u3002\u672c\u4f8b\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u8bed\u4e49\u5316\u7248\u672c 0.8.3 \u6765\u6307\u5b9a rand crate \u7684\u7248\u672c\u3002Cargo \u7406\u89e3 \u8bed\u4e49\u5316\u7248\u672c \uff08Semantic Versioning\uff09\uff08\u6709\u65f6\u4e5f\u79f0\u4e3a SemVer\uff09\uff0c\u8fd9\u662f\u4e00\u79cd\u5b9a\u4e49\u7248\u672c\u53f7\u7684\u6807\u51c6\u3002 0.8.3 \u4e8b\u5b9e\u4e0a\u662f ^0.8.3 \u7684\u7b80\u5199\uff0c\u5b83\u8868\u793a\u4efb\u4f55\u81f3\u5c11\u662f 0.8.3 \u4f46\u5c0f\u4e8e 0.9.0 \u7684\u7248\u672c\u3002 Cargo \u8ba4\u4e3a\u8fd9\u4e9b\u7248\u672c\u4e0e 0.8.3 \u7248\u672c\u7684\u516c\u6709 API \u76f8\u517c\u5bb9\uff0c\u8fd9\u6837\u7684\u7248\u672c\u6307\u5b9a\u786e\u4fdd\u4e86\u6211\u4eec\u53ef\u4ee5\u83b7\u53d6\u80fd\u4f7f\u672c\u7ae0\u4ee3\u7801\u7f16\u8bd1\u7684\u6700\u65b0\u7684\u8865\u4e01\uff08patch\uff09\u7248\u672c\u3002\u4efb\u4f55\u5927\u4e8e\u7b49\u4e8e 0.9.0 \u7684\u7248\u672c\u4e0d\u80fd\u4fdd\u8bc1\u548c\u63a5\u4e0b\u6765\u7684\u793a\u4f8b\u91c7\u7528\u4e86\u76f8\u540c\u7684 API\u3002 \u73b0\u5728\uff0c\u4e0d\u4fee\u6539\u4efb\u4f55\u4ee3\u7801\uff0c\u6784\u5efa\u9879\u76ee\uff0c\u5982\u4e0b\u6240\u793a\uff1a $ cargo build Updating crates.io index Downloaded ppv-lite86 v0.2.17 Downloaded rand v0.8.5 Downloaded rand_chacha v0.3.1 Downloaded rand_core v0.6.4 Downloaded cfg-if v1.0.0 Downloaded getrandom v0.2.8 Downloaded libc v0.2.138 Downloaded 7 crates ( 794 .8 KB ) in 2 .72s Compiling libc v0.2.138 Compiling cfg-if v1.0.0 Compiling ppv-lite86 v0.2.17 Compiling getrandom v0.2.8 Compiling rand_core v0.6.4 Compiling rand_chacha v0.3.1 Compiling rand v0.8.5 Compiling guessing-game v0.1.0 ( file:///projects/guessing_game ) Finished dev [ unoptimized + debuginfo ] target ( s ) in 3m 45s # \u5c06 rand crate \u6dfb\u52a0\u4e3a\u4f9d\u8d56\u4e4b\u540e\u8fd0\u884c cargo build \u7684\u8f93\u51fa \u73b0\u5728\u7cfb\u7edf\u6709\u4e86\u4e00\u4e2a\u5916\u90e8\u4f9d\u8d56\uff0cCargo \u4ece registry \u4e0a\u83b7\u53d6\u6240\u6709\u5305\u7684\u6700\u65b0\u7248\u672c\u4fe1\u606f\uff0c\u8fd9\u662f\u4e00\u4efd\u6765\u81ea Crates.io \u7684\u6570\u636e\u62f7\u8d1d\u3002Crates.io \u662f Rust \u751f\u6001\u73af\u5883\u4e2d\u7684\u5f00\u53d1\u8005\u4eec\u5411\u4ed6\u4eba\u8d21\u732e Rust \u5f00\u6e90\u9879\u76ee\u7684\u5730\u65b9\u3002 \u5728\u66f4\u65b0\u5b8c registry \u540e\uff0cCargo \u68c0\u67e5 [dependencies] \u90e8\u5206\u5e76\u4e0b\u8f7d\u5217\u8868\u4e2d\u5305\u542b\u4f46\u8fd8\u672a\u4e0b\u8f7d\u7684 crates \u3002\u672c\u4f8b\u4e2d\uff0c\u867d\u7136\u53ea\u58f0\u660e\u4e86 rand \u4e00\u4e2a\u4f9d\u8d56\uff0c\u7136\u800c Cargo \u8fd8\u662f\u989d\u5916\u83b7\u53d6\u4e86 rand \u6240\u9700\u8981\u7684\u5176\u4ed6 crates\uff0c\u56e0\u4e3a rand \u4f9d\u8d56\u5b83\u4eec\u6765\u6b63\u5e38\u5de5\u4f5c\u3002\u4e0b\u8f7d\u5b8c\u6210\u540e\uff0cRust \u7f16\u8bd1\u4f9d\u8d56\uff0c\u7136\u540e\u4f7f\u7528\u8fd9\u4e9b\u4f9d\u8d56\u7f16\u8bd1\u9879\u76ee\u3002 \u6587\u4ef6\u540d: src/main.rs // \u65b0\u589e\u4e86\u4e00\u884c use rand::Rng\u3002 // Rng \u662f\u4e00\u4e2a trait\uff0c\u5b83\u5b9a\u4e49\u4e86\u968f\u673a\u6570\u751f\u6210\u5668\u5e94\u5b9e\u73b0\u7684\u65b9\u6cd5\uff0c\u60f3\u4f7f\u7528\u8fd9\u4e9b\u65b9\u6cd5\u7684\u8bdd\uff0c\u6b64 trait \u5fc5\u987b\u5728\u4f5c\u7528\u57df\u4e2d\u3002 use rand :: Rng ; use std :: io ; fn main () { println! ( \"\u731c\u6570\u6e38\u620f\uff01\uff01\" ); let secret_number = rand :: thread_rng (). gen_range ( 1 ..= 100 ); // \u8c03\u7528\u4e86 rand::thread_rng \u51fd\u6570\u63d0\u4f9b\u5b9e\u9645\u4f7f\u7528\u7684\u968f\u673a\u6570\u751f\u6210\u5668\uff1a\u5b83\u4f4d\u4e8e\u5f53\u524d\u6267\u884c\u7ebf\u7a0b\u7684\u672c\u5730\u73af\u5883\u4e2d\uff0c\u5e76\u4ece\u64cd\u4f5c\u7cfb\u7edf\u83b7\u53d6 seed\u3002 // \u63a5\u7740\u8c03\u7528\u968f\u673a\u6570\u751f\u6210\u5668\u7684 gen_range \u65b9\u6cd5\u3002\u8fd9\u4e2a\u65b9\u6cd5\u7531 use rand::Rng \u8bed\u53e5\u5f15\u5165\u5230\u4f5c\u7528\u57df\u7684 Rng trait \u5b9a\u4e49\u3002 // gen_range \u65b9\u6cd5\u83b7\u53d6\u4e00\u4e2a\u8303\u56f4\u8868\u8fbe\u5f0f\uff08range expression\uff09\u4f5c\u4e3a\u53c2\u6570\uff0c\u5e76\u751f\u6210\u4e00\u4e2a\u5728\u6b64\u8303\u56f4\u4e4b\u95f4\u7684\u968f\u673a\u6570\u3002 // \u8fd9\u91cc\u4f7f\u7528\u7684\u8fd9\u7c7b\u8303\u56f4\u8868\u8fbe\u5f0f\u4f7f\u7528\u4e86 start..=end \u8fd9\u6837\u7684\u5f62\u5f0f\uff0c\u4e5f\u5c31\u662f\u8bf4\u5305\u542b\u4e86\u4e0a\u4e0b\u7aef\u70b9\uff0c\u6240\u4ee5\u9700\u8981\u6307\u5b9a 1..=100 \u6765\u8bf7\u6c42\u4e00\u4e2a 1 \u548c 100 \u4e4b\u95f4\u7684\u6570\u3002 println! ( \"\u751f\u6210\u7684\u5bc6\u7801\u6570\u5b57\u662f: {secret_number}\" ); println! ( \"\u8bf7\u8f93\u5165\u4e00\u4e2a\u503c:\" ); let mut guess = String :: new (); io :: stdin (). read_line ( & mut guess ). expect ( \"\u8bfb\u6570\u5931\u8d25!\" ); println! ( \"\u4f60\u731c\u6d4b\u7684\u6570\u4e3a: {guess}\" ) } \u6ce8\u610f \uff1a \u4f60\u4e0d\u53ef\u80fd\u51ed\u7a7a\u5c31\u77e5\u9053\u5e94\u8be5 use \u54ea\u4e2a trait \u4ee5\u53ca\u8be5\u4ece crate \u4e2d\u8c03\u7528\u54ea\u4e2a\u65b9\u6cd5\uff0c\u56e0\u6b64\u6bcf\u4e2acrate \u6709\u4f7f\u7528\u8bf4\u660e\u6587\u6863\u3002 Cargo \u6709\u4e00\u4e2a\u5f88\u68d2\u7684\u529f\u80fd\u662f\uff1a\u8fd0\u884c cargo doc --open \u547d\u4ee4\u6765\u6784\u5efa\u6240\u6709\u672c\u5730\u4f9d\u8d56\u63d0\u4f9b\u7684\u6587\u6863\uff0c\u5e76\u5728\u6d4f\u89c8\u5668\u4e2d\u6253\u5f00\u3002 \u4f8b\u5982\uff0c\u5047\u8bbe\u4f60\u5bf9 rand crate \u4e2d\u7684\u5176\u4ed6\u529f\u80fd\u611f\u5174\u8da3\uff0c\u4f60\u53ef\u4ee5\u8fd0\u884c cargo doc --open \u5e76\u70b9\u51fb\u5de6\u4fa7\u5bfc\u822a\u680f\u4e2d\u7684 rand\u3002 \u6bd4\u8f83\u731c\u6d4b\u7684\u6570\u5b57\u548c\u79d8\u5bc6\u6570\u5b57 \u6587\u4ef6\u540d: src/main.rs use rand :: Rng ; use std :: cmp :: Ordering ; // \u4ece\u6807\u51c6\u5e93\u5f15\u5165\u4e86\u4e00\u4e2a\u53eb\u505a std::cmp::Ordering \u7684\u7c7b\u578b\u5230\u4f5c\u7528\u57df\u4e2d\u3002 // Ordering \u4e5f\u662f\u4e00\u4e2a\u679a\u4e3e\uff0c\u4e0d\u8fc7\u5b83\u7684\u6210\u5458\u662f Less\u3001Greater \u548c Equal\u3002 // \u8fd9\u662f\u6bd4\u8f83\u4e24\u4e2a\u503c\u65f6\u53ef\u80fd\u51fa\u73b0\u7684\u4e09\u79cd\u7ed3\u679c\u3002 use std :: io ; fn main () { println! ( \"\u731c\u6570\u6e38\u620f\uff01\uff01\" ); let secret_number = rand :: thread_rng (). gen_range ( 1 ..= 100 ); println! ( \"\u751f\u6210\u7684\u5bc6\u7801\u6570\u5b57\u662f: {secret_number}\" ); println! ( \"\u8bf7\u8f93\u5165\u4e00\u4e2a\u503c:\" ); let mut guess = String :: new (); io :: stdin (). read_line ( & mut guess ). expect ( \"\u8bfb\u6570\u5931\u8d25!\" ); println! ( \"\u4f60\u731c\u6d4b\u7684\u6570\u4e3a: {guess}\" ); match guess . cmp ( & secret_number ){ // cmp \u65b9\u6cd5\u7528\u6765\u6bd4\u8f83\u4e24\u4e2a\u503c\u5e76\u53ef\u4ee5\u5728\u4efb\u4f55\u53ef\u6bd4\u8f83\u7684\u503c\u4e0a\u8c03\u7528\u3002 // \u5b83\u83b7\u53d6\u4e00\u4e2a\u88ab\u6bd4\u8f83\u503c\u7684\u5f15\u7528\uff1a\u8fd9\u91cc\u662f\u628a guess \u4e0e secret_number \u505a\u6bd4\u8f83\u3002 // \u7136\u540e\u5b83\u4f1a\u8fd4\u56de\u4e00\u4e2a\u521a\u624d\u901a\u8fc7 use \u5f15\u5165\u4f5c\u7528\u57df\u7684 Ordering \u679a\u4e3e\u7684\u6210\u5458\u3002 // \u4f7f\u7528\u4e00\u4e2a match \u8868\u8fbe\u5f0f\uff0c\u6839\u636e\u5bf9 guess \u548c secret_number \u8c03\u7528 cmp \u8fd4\u56de\u7684 Ordering \u6210\u5458\u6765\u51b3\u5b9a\u63a5\u4e0b\u6765\u505a\u4ec0\u4e48\u3002 Ordering :: Less => println! ( \"\u592a\u5c0f\u4e86\uff01\" ), Ordering :: Greater => println! ( \"\u592a\u5927\u4e86\uff01\" ), Ordering :: Equal => println! ( \"\u731c\u5bf9\u4e86\uff01\" ), } } \u4e00\u4e2a match \u8868\u8fbe\u5f0f\u7531 \u5206\u652f\uff08arms\uff09 \u6784\u6210\u3002 \u4e00\u4e2a\u5206\u652f\u5305\u542b\u4e00\u4e2a \u6a21\u5f0f\uff08pattern\uff09\u548c\u8868\u8fbe\u5f0f\u5f00\u5934\u7684\u503c\u4e0e\u5206\u652f\u6a21\u5f0f\u76f8\u5339\u914d\u65f6\u5e94\u8be5\u6267\u884c\u7684\u4ee3\u7801\u3002 Rust \u83b7\u53d6\u63d0\u4f9b\u7ed9 match \u7684\u503c\u5e76\u6328\u4e2a\u68c0\u67e5\u6bcf\u4e2a\u5206\u652f\u7684\u6a21\u5f0f\u3002 \u6b64\u65f6\u8fdb\u884c cargo build \u4f1a\u51fa\u73b0\u5982\u4e0b\u9519\u8bef: cargo build Compiling guessing-game v0.1.0 ( /files/rust-example-apps/src/guessing-game ) error [ E0308 ] : mismatched types --> src/main.rs:20:21 | 20 | match guess.cmp ( & secret_number ) { | --- ^^^^^^^^^^^^^^ expected struct ` String ` , found integer | | | arguments to this function are incorrect | = note: expected reference ` & String ` found reference ` & { integer } ` note: associated function defined here For more information about this error, try ` rustc --explain E0308 ` . error: could not compile ` guessing-game ` due to previous error \u9519\u8bef\u7684\u6838\u5fc3\u8868\u660e\u8fd9\u91cc\u6709 \u4e0d\u5339\u914d\u7684\u7c7b\u578b\uff08mismatched types\uff09 \u3002 Rust \u6709\u4e00\u4e2a\u9759\u6001\u5f3a\u7c7b\u578b\u7cfb\u7edf\uff0c\u540c\u65f6\u4e5f\u6709\u7c7b\u578b\u63a8\u65ad\u3002 \u5f53\u6211\u4eec\u5199\u51fa let guess = String::new() \u65f6\uff0cRust \u63a8\u65ad\u51fa guess \u5e94\u8be5\u662f String \u7c7b\u578b\uff0c\u5e76\u4e0d\u9700\u8981\u6211\u4eec\u5199\u51fa\u7c7b\u578b\u3002 \u53e6\u4e00\u65b9\u9762\uff0csecret_number\uff0c\u662f\u6570\u5b57\u7c7b\u578b\u3002\u51e0\u4e2a\u6570\u5b57\u7c7b\u578b\u62e5\u6709 1 \u5230 100 \u4e4b\u95f4\u7684\u503c\uff1a32 \u4f4d\u6570\u5b57 i32\uff1b32 \u4f4d\u65e0\u7b26\u53f7\u6570\u5b57 u32\uff1b64 \u4f4d\u6570\u5b57 i64 \u7b49\u7b49\u3002 Rust \u9ed8\u8ba4\u4f7f\u7528 i32\uff0c\u6240\u4ee5\u5b83\u662f secret_number \u7684\u7c7b\u578b\uff0c\u9664\u975e\u589e\u52a0\u7c7b\u578b\u4fe1\u606f\uff0c\u6216\u4efb\u4f55\u80fd\u8ba9 Rust \u63a8\u65ad\u51fa\u4e0d\u540c\u6570\u503c\u7c7b\u578b\u7684\u4fe1\u606f\u3002 \u8fd9\u91cc\u9519\u8bef\u7684\u539f\u56e0\u5728\u4e8e Rust \u4e0d\u4f1a\u6bd4\u8f83\u5b57\u7b26\u4e32\u7c7b\u578b\u548c\u6570\u5b57\u7c7b\u578b\u3002 \u6240\u4ee5\u6211\u4eec\u5fc5\u987b\u628a\u4ece\u8f93\u5165\u4e2d\u8bfb\u53d6\u5230\u7684 String \u8f6c\u6362\u4e3a\u4e00\u4e2a\u771f\u6b63\u7684\u6570\u5b57\u7c7b\u578b\uff0c\u624d\u597d\u4e0e\u79d8\u5bc6\u6570\u5b57\u8fdb\u884c\u6bd4\u8f83\u3002\u8fd9\u53ef\u4ee5\u901a\u8fc7\u5728 main \u51fd\u6570\u4f53\u4e2d\u589e\u52a0\u5982\u4e0b\u4ee3\u7801\u6765\u5b9e\u73b0\uff1a \u6587\u4ef6\u540d: src/main.rs use rand :: Rng ; use std :: cmp :: Ordering ; use std :: io ; fn main () { println! ( \"\u731c\u6570\u6e38\u620f\uff01\uff01\" ); let secret_number = rand :: thread_rng (). gen_range ( 1 ..= 100 ); println! ( \"\u751f\u6210\u7684\u5bc6\u7801\u6570\u5b57\u662f: {secret_number}\" ); println! ( \"\u8bf7\u8f93\u5165\u4e00\u4e2a\u503c:\" ); let mut guess = String :: new (); io :: stdin (). read_line ( & mut guess ). expect ( \"\u8bfb\u6570\u5931\u8d25!\" ); let guess : u32 = guess . trim (). parse (). expect ( \"\u8bf7\u8f93\u5165\u6570\u5b57!\" ); // \u8fd9\u91cc\u521b\u5efa\u4e86\u4e00\u4e2a\u53eb\u505a guess \u7684\u53d8\u91cf\u3002 // \u4e0d\u8fc7\u7b49\u7b49\uff0c\u4e0d\u662f\u5df2\u7ecf\u6709\u4e86\u4e00\u4e2a\u53eb\u505a guess \u7684\u53d8\u91cf\u4e86\u5417\uff1f // \u786e\u5b9e\u5982\u6b64\uff0c\u4e0d\u8fc7 Rust \u5141\u8bb8\u7528\u4e00\u4e2a\u65b0\u503c\u6765 \u9690\u85cf \uff08shadow\uff09 guess \u4e4b\u524d\u7684\u503c\u3002 // \u8fd9\u4e2a\u529f\u80fd\u5e38\u7528\u5728\u9700\u8981\u8f6c\u6362\u503c\u7c7b\u578b\u4e4b\u7c7b\u7684\u573a\u666f\u3002 // \u5b83\u5141\u8bb8\u6211\u4eec\u590d\u7528 guess \u53d8\u91cf\u7684\u540d\u5b57\uff0c\u800c\u4e0d\u662f\u88ab\u8feb\u521b\u5efa\u4e24\u4e2a\u4e0d\u540c\u53d8\u91cf\uff0c\u8bf8\u5982 guess_str \u548c guess \u4e4b\u7c7b\u3002 // \u5c06\u8fd9\u4e2a\u65b0\u53d8\u91cf\u7ed1\u5b9a\u5230 guess.trim().parse() \u8868\u8fbe\u5f0f\u4e0a\u3002 // \u8868\u8fbe\u5f0f\u4e2d\u7684 guess \u6307\u7684\u662f\u5305\u542b\u8f93\u5165\u7684\u5b57\u7b26\u4e32\u7c7b\u578b guess \u53d8\u91cf\u3002 // String \u5b9e\u4f8b\u7684 trim \u65b9\u6cd5\u4f1a\u53bb\u9664\u5b57\u7b26\u4e32\u5f00\u5934\u548c\u7ed3\u5c3e\u7684\u7a7a\u767d\u5b57\u7b26\uff0c\u6211\u4eec\u5fc5\u987b\u6267\u884c\u6b64\u65b9\u6cd5\u624d\u80fd\u5c06\u5b57\u7b26\u4e32\u4e0e u32 \u6bd4\u8f83\uff0c\u56e0\u4e3a u32 \u53ea\u80fd\u5305\u542b\u6570\u503c\u578b\u6570\u636e\u3002 // \u7528\u6237\u5fc5\u987b\u8f93\u5165 enter \u952e\u624d\u80fd\u8ba9 read_line \u8fd4\u56de\u5e76\u8f93\u5165\u4ed6\u4eec\u7684\u731c\u60f3\uff0c\u8fd9\u5c06\u4f1a\u5728\u5b57\u7b26\u4e32\u4e2d\u589e\u52a0\u4e00\u4e2a\u6362\u884c\uff08newline\uff09\u7b26\u3002 // \u4f8b\u5982\uff0c\u7528\u6237\u8f93\u5165 5 \u5e76\u6309\u4e0b enter, guess \u770b\u8d77\u6765\u50cf\u8fd9\u6837\uff1a5\\n \u6216\u8005 5\\r\\n\u3002 // \\n \u4ee3\u8868 \u201c\u6362\u884c\u201d\uff0c\u56de\u8f66\u952e\uff1b\\r \u4ee3\u8868 \u201c\u56de\u8f66\u201d\uff0c\u56de\u8f66\u952e\u3002 // trim \u65b9\u6cd5\u4f1a\u6d88\u9664 \\n \u6216\u8005 \\r\\n\uff0c\u53ea\u7559\u4e0b 5\u3002 // \u5b57\u7b26\u4e32\u7684 parse \u65b9\u6cd5 \u5c06\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u5176\u4ed6\u7c7b\u578b\u3002 // \u8fd9\u91cc\u7528\u5b83\u6765\u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u503c\u3002\u6211\u4eec\u9700\u8981\u544a\u8bc9 Rust \u5177\u4f53\u7684\u6570\u5b57\u7c7b\u578b\uff0c\u8fd9\u91cc\u901a\u8fc7 let guess: u32 \u6307\u5b9a\u3002 // guess \u540e\u9762\u7684\u5192\u53f7\uff08:\uff09\u544a\u8bc9 Rust \u6211\u4eec\u6307\u5b9a\u4e86\u53d8\u91cf\u7684\u7c7b\u578b\u3002 // Rust \u6709\u4e00\u4e9b\u5185\u5efa\u7684\u6570\u5b57\u7c7b\u578b\uff1bu32 \u662f\u4e00\u4e2a\u65e0\u7b26\u53f7\u7684 32 \u4f4d\u6574\u578b\u3002 // \u5bf9\u4e8e\u4e0d\u5927\u7684\u6b63\u6574\u6570\u6765\u8bf4\uff0c\u5b83\u662f\u4e0d\u9519\u7684\u9ed8\u8ba4\u7c7b\u578b\uff0c\u7b2c\u4e09\u7ae0\u8fd8\u4f1a\u8bb2\u5230\u5176\u4ed6\u6570\u5b57\u7c7b\u578b\u3002 // \u53e6\u5916\uff0c\u7a0b\u5e8f\u4e2d\u7684 u32 \u6ce8\u89e3\u4ee5\u53ca\u4e0e secret_number \u7684\u6bd4\u8f83\uff0c\u610f\u5473\u7740 Rust \u4f1a\u63a8\u65ad\u51fa secret_number \u4e5f\u662f u32 \u7c7b\u578b\u3002 // \u73b0\u5728\u53ef\u4ee5\u4f7f\u7528\u76f8\u540c\u7c7b\u578b\u6bd4\u8f83\u4e24\u4e2a\u503c\u4e86\uff01 // parse \u65b9\u6cd5\u53ea\u6709\u5728\u5b57\u7b26\u903b\u8f91\u4e0a\u53ef\u4ee5\u8f6c\u6362\u4e3a\u6570\u5b57\u7684\u65f6\u5019\u624d\u80fd\u5de5\u4f5c\u6240\u4ee5\u975e\u5e38\u5bb9\u6613\u51fa\u9519\u3002 // \u4f8b\u5982\uff0c\u5b57\u7b26\u4e32\u4e2d\u5305\u542b A\ud83d\udc4d%\uff0c\u5c31\u65e0\u6cd5\u5c06\u5176\u8f6c\u6362\u4e3a\u4e00\u4e2a\u6570\u5b57\u3002 // \u56e0\u6b64\uff0cparse \u65b9\u6cd5\u8fd4\u56de\u4e00\u4e2a Result \u7c7b\u578b\u3002 // \u50cf\u4e4b\u524d \u201c\u4f7f\u7528 Result \u7c7b\u578b\u6765\u5904\u7406\u6f5c\u5728\u7684\u9519\u8bef\u201d \u8ba8\u8bba\u7684 read_line \u65b9\u6cd5\u90a3\u6837\uff0c\u518d\u6b21\u6309\u90e8\u5c31\u73ed\u7684\u7528 expect \u65b9\u6cd5\u5904\u7406\u5373\u53ef\u3002 // \u5982\u679c parse \u4e0d\u80fd\u4ece\u5b57\u7b26\u4e32\u751f\u6210\u4e00\u4e2a\u6570\u5b57\uff0c\u8fd4\u56de\u4e00\u4e2a Result \u7684 Err \u6210\u5458\u65f6\uff0cexpect \u4f1a\u4f7f\u6e38\u620f\u5d29\u6e83\u5e76\u6253\u5370\u9644\u5e26\u7684\u4fe1\u606f\u3002 // \u5982\u679c parse \u6210\u529f\u5730\u5c06\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u4e00\u4e2a\u6570\u5b57\uff0c\u5b83\u4f1a\u8fd4\u56de Result \u7684 Ok \u6210\u5458\uff0c\u7136\u540e expect \u4f1a\u8fd4\u56de Ok \u503c\u4e2d\u7684\u6570\u5b57\u3002 println! ( \"\u4f60\u731c\u6d4b\u7684\u6570\u4e3a: {guess}\" ); match guess . cmp ( & secret_number ) { Ordering :: Less => println! ( \"\u592a\u5c0f\u4e86\uff01\" ), Ordering :: Greater => println! ( \"\u592a\u5927\u4e86\uff01\" ), Ordering :: Equal => println! ( \"\u731c\u5bf9\u4e86\uff01\" ), } } \u4f7f\u7528\u5faa\u73af\u6765\u5141\u8bb8\u591a\u6b21\u731c\u6d4b loop \u5173\u952e\u5b57\u521b\u5efa\u4e86\u4e00\u4e2a\u65e0\u9650\u5faa\u73af\u3002 \u6587\u4ef6\u540d: src/main.rs use rand :: Rng ; use std :: cmp :: Ordering ; use std :: io ; fn main () { println! ( \"\u731c\u6570\u6e38\u620f\uff01\uff01\" ); let secret_number = rand :: thread_rng (). gen_range ( 1 ..= 100 ); println! ( \"\u751f\u6210\u7684\u5bc6\u7801\u6570\u5b57\u662f: {secret_number}\" ); loop { println! ( \"\u8bf7\u8f93\u5165\u4e00\u4e2a\u503c:\" ); let mut guess = String :: new (); io :: stdin (). read_line ( & mut guess ). expect ( \"\u8bfb\u6570\u5931\u8d25!\" ); let guess : u32 = guess . trim (). parse (). expect ( \"\u8bf7\u8f93\u5165\u6570\u5b57!\" ); println! ( \"\u4f60\u731c\u6d4b\u7684\u6570\u4e3a: {guess}\" ); match guess . cmp ( & secret_number ) { Ordering :: Less => println! ( \"\u592a\u5c0f\u4e86\uff01\" ), Ordering :: Greater => println! ( \"\u592a\u5927\u4e86\uff01\" ), Ordering :: Equal => println! ( \"\u731c\u5bf9\u4e86\uff01\" ), } } } \u5982\u4e0a\u6240\u793a\uff0c\u6211\u4eec\u5c06\u63d0\u793a\u7528\u6237\u731c\u6d4b\u4e4b\u540e\u7684\u6240\u6709\u5185\u5bb9\u79fb\u52a8\u5230\u4e86\u5faa\u73af\u4e2d\u3002\u786e\u4fdd loop \u5faa\u73af\u4e2d\u7684\u4ee3\u7801\u591a\u7f29\u8fdb\u56db\u4e2a\u7a7a\u683c\uff0c\u518d\u6b21\u8fd0\u884c\u7a0b\u5e8f\u3002\u6ce8\u610f\u8fd9\u91cc\u6709\u4e00\u4e2a\u65b0\u95ee\u9898\uff0c\u56e0\u4e3a\u7a0b\u5e8f\u5fe0\u5b9e\u5730\u6267\u884c\u4e86\u6211\u4eec\u7684\u8981\u6c42\uff1a\u6c38\u8fdc\u5730\u8bf7\u6c42\u53e6\u4e00\u4e2a\u731c\u6d4b\uff0c\u7528\u6237\u597d\u50cf\u65e0\u6cd5\u9000\u51fa\u554a\uff01 \u7528\u6237\u603b\u80fd\u4f7f\u7528 ctrl-c \u7ec8\u6b62\u7a0b\u5e8f\u3002\u4e0d\u8fc7\u8fd8\u6709\u53e6\u4e00\u4e2a\u65b9\u6cd5\u8df3\u51fa\u65e0\u9650\u5faa\u73af\uff0c\u5c31\u662f \u201c\u6bd4\u8f83\u731c\u6d4b\u4e0e\u79d8\u5bc6\u6570\u5b57\u201d \u90e8\u5206\u63d0\u5230\u7684 parse\uff1a\u5982\u679c\u7528\u6237\u8f93\u5165\u7684\u7b54\u6848\u4e0d\u662f\u4e00\u4e2a\u6570\u5b57\uff0c\u7a0b\u5e8f\u4f1a\u5d29\u6e83\u3002\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u8fd9\u4e00\u70b9\u6765\u9000\u51fa\uff0c\u5982\u4e0b\u6240\u793a\uff1a $ cargo run Compiling guessing_game v0.1.0 ( file:///projects/guessing_game ) Finished dev [ unoptimized + debuginfo ] target ( s ) in 1 .50s Running ` target/debug/guessing_game ` \u731c\u6570\u6e38\u620f\uff01\uff01 \u751f\u6210\u7684\u5bc6\u7801\u6570\u5b57\u662f: 57 \u8bf7\u8f93\u5165\u4e00\u4e2a\u503c: 12 \u4f60\u731c\u6d4b\u7684\u6570\u4e3a: 12 \u592a\u5c0f\u4e86\uff01 \u8bf7\u8f93\u5165\u4e00\u4e2a\u503c: 57 \u4f60\u731c\u6d4b\u7684\u6570\u4e3a: 57 \u731c\u5bf9\u4e86\uff01 \u8bf7\u8f93\u5165\u4e00\u4e2a\u503c: asdf thread 'main' panicked at '\u8bf7\u8f93\u5165\u6570\u5b57!: ParseIntError { kind: InvalidDigit }' , src/main.rs:19:47 note: run with ` RUST_BACKTRACE = 1 ` environment variable to display a backtrace \u731c\u6d4b\u6b63\u786e\u540e\u9000\u51fa \u8ba9\u6211\u4eec\u589e\u52a0\u4e00\u4e2a break \u8bed\u53e5\uff0c\u5728\u7528\u6237\u731c\u5bf9\u65f6\u9000\u51fa\u6e38\u620f\uff1a \u6587\u4ef6\u540d: src/main.rs use rand :: Rng ; use std :: cmp :: Ordering ; use std :: io ; fn main () { println! ( \"\u731c\u6570\u6e38\u620f\uff01\uff01\" ); let secret_number = rand :: thread_rng (). gen_range ( 1 ..= 100 ); println! ( \"\u751f\u6210\u7684\u5bc6\u7801\u6570\u5b57\u662f: {secret_number}\" ); loop { println! ( \"\u8bf7\u8f93\u5165\u4e00\u4e2a\u503c:\" ); let mut guess = String :: new (); io :: stdin (). read_line ( & mut guess ). expect ( \"\u8bfb\u6570\u5931\u8d25!\" ); let guess : u32 = guess . trim (). parse (). expect ( \"\u8bf7\u8f93\u5165\u6570\u5b57!\" ); println! ( \"\u4f60\u731c\u6d4b\u7684\u6570\u4e3a: {guess}\" ); match guess . cmp ( & secret_number ) { Ordering :: Less => println! ( \"\u592a\u5c0f\u4e86\uff01\" ), Ordering :: Greater => println! ( \"\u592a\u5927\u4e86\uff01\" ), Ordering :: Equal => { println! ( \"\u731c\u5bf9\u4e86\uff01\" ); break ; } } } } a \u901a\u8fc7\u5728 You win! \u4e4b\u540e\u589e\u52a0\u4e00\u884c break\uff0c\u7528\u6237\u731c\u5bf9\u4e86\u795e\u79d8\u6570\u5b57\u540e\u4f1a\u9000\u51fa\u5faa\u73af\u3002\u9000\u51fa\u5faa\u73af\u4e5f\u610f\u5473\u7740\u9000\u51fa\u7a0b\u5e8f\uff0c\u56e0\u4e3a\u5faa\u73af\u662f main \u7684\u6700\u540e\u4e00\u90e8\u5206\u3002 \u5904\u7406\u65e0\u6548\u8f93\u5165 \u4e3a\u4e86\u8fdb\u4e00\u6b65\u6539\u5584\u6e38\u620f\u6027\uff0c\u4e0d\u8981\u5728\u7528\u6237\u8f93\u5165\u975e\u6570\u5b57\u65f6\u5d29\u6e83\uff0c\u9700\u8981\u5ffd\u7565\u975e\u6570\u5b57\uff0c\u8ba9\u7528\u6237\u53ef\u4ee5\u7ee7\u7eed\u731c\u6d4b\u3002\u53ef\u4ee5\u901a\u8fc7\u4fee\u6539 guess \u5c06 String \u8f6c\u5316\u4e3a u32 \u90a3\u90e8\u5206\u4ee3\u7801\u6765\u5b9e\u73b0 \u6587\u4ef6\u540d: src/main.rs use rand :: Rng ; use std :: cmp :: Ordering ; use std :: io ; fn main () { println! ( \"\u731c\u6570\u6e38\u620f\uff01\uff01\" ); let secret_number = rand :: thread_rng (). gen_range ( 1 ..= 100 ); println! ( \"\u751f\u6210\u7684\u5bc6\u7801\u6570\u5b57\u662f: {secret_number}\" ); loop { println! ( \"\u8bf7\u8f93\u5165\u4e00\u4e2a\u503c:\" ); let mut guess = String :: new (); io :: stdin (). read_line ( & mut guess ). expect ( \"\u8bfb\u6570\u5931\u8d25!\" ); let guess : u32 = match guess . trim (). parse () { Ok ( num ) => num , Err ( _ ) => continue , }; // \u5c06 expect \u8c03\u7528\u6362\u6210 match \u8bed\u53e5\uff0c\u4ee5\u4ece\u9047\u5230\u9519\u8bef\u5c31\u5d29\u6e83\u8f6c\u6362\u4e3a\u5904\u7406\u9519\u8bef\u3002 // \u987b\u77e5 parse \u8fd4\u56de\u4e00\u4e2a Result \u7c7b\u578b\uff0c\u800c Result \u662f\u4e00\u4e2a\u62e5\u6709 Ok \u6216 Err \u6210\u5458\u7684\u679a\u4e3e\u3002 // \u8fd9\u91cc\u4f7f\u7528\u7684 match \u8868\u8fbe\u5f0f\uff0c\u548c\u5904\u7406 cmp \u65b9\u6cd5\u8fd4\u56de Ordering \u65f6\u7528\u7684\u4e00\u6837\u3002 // \u5982\u679c parse \u80fd\u591f\u6210\u529f\u7684\u5c06\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u4e00\u4e2a\u6570\u5b57\uff0c\u5b83\u4f1a\u8fd4\u56de\u4e00\u4e2a\u5305\u542b\u7ed3\u679c\u6570\u5b57\u7684 Ok\u3002 // \u8fd9\u4e2a Ok \u503c\u4e0e match \u7b2c\u4e00\u4e2a\u5206\u652f\u7684\u6a21\u5f0f\u76f8\u5339\u914d\uff0c\u8be5\u5206\u652f\u5bf9\u5e94\u7684\u52a8\u4f5c\u8fd4\u56de Ok \u503c\u4e2d\u7684\u6570\u5b57 num\uff0c // \u6700\u540e\u5982\u613f\u53d8\u6210\u65b0\u521b\u5efa\u7684 guess \u53d8\u91cf\u3002 // \u5982\u679c parse \u4e0d\u80fd\u5c06\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u4e00\u4e2a\u6570\u5b57\uff0c\u5b83\u4f1a\u8fd4\u56de\u4e00\u4e2a\u5305\u542b\u66f4\u591a\u9519\u8bef\u4fe1\u606f\u7684 Err\u3002 // Err \u503c\u4e0d\u80fd\u5339\u914d\u7b2c\u4e00\u4e2a match \u5206\u652f\u7684 Ok(num) \u6a21\u5f0f\uff0c\u4f46\u662f\u4f1a\u5339\u914d\u7b2c\u4e8c\u4e2a\u5206\u652f\u7684 Err(_) \u6a21\u5f0f\uff1a // _ \u662f\u4e00\u4e2a\u901a\u914d\u7b26\u503c\uff0c\u672c\u4f8b\u4e2d\u7528\u6765\u5339\u914d\u6240\u6709 Err \u503c\uff0c\u4e0d\u7ba1\u5176\u4e2d\u6709\u4f55\u79cd\u4fe1\u606f\u3002 // \u6240\u4ee5\u7a0b\u5e8f\u4f1a\u6267\u884c\u7b2c\u4e8c\u4e2a\u5206\u652f\u7684\u52a8\u4f5c\uff0ccontinue \u610f\u5473\u7740\u8fdb\u5165 loop \u7684\u4e0b\u4e00\u6b21\u5faa\u73af\uff0c\u8bf7\u6c42\u53e6\u4e00\u4e2a\u731c\u6d4b\u3002 // \u8fd9\u6837\u7a0b\u5e8f\u5c31\u6709\u6548\u7684\u5ffd\u7565\u4e86 parse \u53ef\u80fd\u9047\u5230\u7684\u6240\u6709\u9519\u8bef\uff01 println! ( \"\u4f60\u731c\u6d4b\u7684\u6570\u4e3a: {guess}\" ); match guess . cmp ( & secret_number ) { Ordering :: Less => println! ( \"\u592a\u5c0f\u4e86\uff01\" ), Ordering :: Greater => println! ( \"\u592a\u5927\u4e86\uff01\" ), Ordering :: Equal => { println! ( \"\u731c\u5bf9\u4e86\uff01\" ); break ; } } } } \u73b0\u5728\u4e07\u4e8b\u4ff1\u5907\uff0c\u53ea\u9700\u8fd0\u884c cargo run\uff1a $ cargo run Compiling guessing_game v0.1.0 ( file:///projects/guessing_game ) Finished dev [ unoptimized + debuginfo ] target ( s ) in 4 .45s Running ` target/debug/guessing_game ` \u731c\u6570\u6e38\u620f\uff01\uff01 \u751f\u6210\u7684\u5bc6\u7801\u6570\u5b57\u662f: 66 \u8bf7\u8f93\u5165\u4e00\u4e2a\u503c: 12d \u8bf7\u8f93\u5165\u4e00\u4e2a\u503c: 12 \u4f60\u731c\u6d4b\u7684\u6570\u4e3a: 12 \u592a\u5c0f\u4e86\uff01 \u8bf7\u8f93\u5165\u4e00\u4e2a\u503c: 66 \u4f60\u731c\u6d4b\u7684\u6570\u4e3a: 66 \u731c\u5bf9\u4e86\uff01 \u6700\u7ec8\u7248\u672c \u592a\u68d2\u4e86\uff01\u518d\u6709\u6700\u540e\u4e00\u4e2a\u5c0f\u7684\u4fee\u6539\uff0c\u5c31\u80fd\u5b8c\u6210\u731c\u731c\u770b\u6e38\u620f\u4e86\uff1a\u8fd8\u8bb0\u5f97\u7a0b\u5e8f\u4f9d\u7136\u4f1a\u6253\u5370\u51fa\u79d8\u5bc6\u6570\u5b57\u3002\u5728\u6d4b\u8bd5\u65f6\u8fd8\u597d\uff0c\u4f46\u6b63\u5f0f\u53d1\u5e03\u65f6\u4f1a\u6bc1\u4e86\u6e38\u620f\u3002\u5220\u6389\u6253\u5370\u79d8\u5bc6\u6570\u5b57\u7684 println!\u3002 \u6700\u7ec8\u4ee3\u7801\uff1a \u6587\u4ef6\u540d: src/main.rs use rand :: Rng ; use std :: cmp :: Ordering ; use std :: io ; fn main () { println! ( \"\u731c\u6570\u6e38\u620f\uff01\uff01\" ); let secret_number = rand :: thread_rng (). gen_range ( 1 ..= 100 ); loop { println! ( \"\u8bf7\u8f93\u5165\u4e00\u4e2a\u503c:\" ); let mut guess = String :: new (); io :: stdin (). read_line ( & mut guess ). expect ( \"\u8bfb\u6570\u5931\u8d25!\" ); let guess : u32 = match guess . trim (). parse () { Ok ( num ) => num , Err ( _ ) => continue , }; println! ( \"\u4f60\u731c\u6d4b\u7684\u6570\u4e3a: {guess}\" ); match guess . cmp ( & secret_number ) { Ordering :: Less => println! ( \"\u592a\u5c0f\u4e86\uff01\" ), Ordering :: Greater => println! ( \"\u592a\u5927\u4e86\uff01\" ), Ordering :: Equal => { println! ( \"\u731c\u5bf9\u4e86\uff01\" ); break ; } } } }","title":"\u731c\u6570\u6e38\u620f"},{"location":"guessing-game/#_1","text":"","title":"\u731c\u6570\u6e38\u620f"},{"location":"guessing-game/#_2","text":"cargo new guessing_game cd guessing_game","title":"\u521b\u5efa\u65b0\u9879\u76ee"},{"location":"guessing-game/#_3","text":"\u6587\u4ef6\u540d: src/main.rs // \u9884\u5bfc\u5165 // io\u8f93\u5165/\u8f93\u51fa\u5e93\u5f15\u5165\u5f53\u524d\u4f5c\u7528\u57df; // io \u5e93\u6765\u81ea\u4e8e\u6807\u51c6\u5e93\uff0c\u4e5f\u88ab\u79f0\u4e3a std use std :: io ; // main \u51fd\u6570\u662f\u7a0b\u5e8f\u7684\u5165\u53e3\u70b9 // fn \u8bed\u6cd5\u58f0\u660e\u4e86\u4e00\u4e2a\u65b0\u51fd\u6570 // () \u8868\u660e\u6ca1\u6709\u53c2\u6570 // { \u4f5c\u4e3a\u51fd\u6570\u4f53\u7684\u5f00\u59cb fn main () { println! ( \"Guess the number!\" ); // println! \u662f\u4e00\u4e2a\u5728\u5c4f\u5e55\u4e0a\u6253\u5370\u5b57\u7b26\u4e32\u7684\u5b8f println! ( \"Please input your guess.\" ); // println! \u662f\u4e00\u4e2a\u5728\u5c4f\u5e55\u4e0a\u6253\u5370\u5b57\u7b26\u4e32\u7684\u5b8f // \u521b\u5efa\u4e00\u4e2a \u53d8\u91cf\uff08variable\uff09\u6765\u50a8\u5b58\u7528\u6237\u8f93\u5165 // \u5728 Rust \u4e2d\uff0c\u53d8\u91cf\u9ed8\u8ba4\u662f\u4e0d\u53ef\u53d8\u7684\uff0c\u8fd9\u610f\u5473\u7740\u4e00\u65e6\u6211\u4eec\u7ed9\u53d8\u91cf\u8d4b\u503c\uff0c\u8fd9\u4e2a\u503c\u5c31\u4e0d\u518d\u53ef\u4ee5\u4fee\u6539\u4e86\u3002 let mut guess = String :: new (); // \u5728\u53d8\u91cf\u540d\u524d\u4f7f\u7528 mut \u6765\u4f7f\u4e00\u4e2a\u53d8\u91cf\u53ef\u53d8 // String \u662f\u4e00\u4e2a\u6807\u51c6\u5e93\u63d0\u4f9b\u7684\u5b57\u7b26\u4e32\u7c7b\u578b\uff0c\u5b83\u662f UTF-8 \u7f16\u7801\u7684\u53ef\u589e\u957f\u6587\u672c\u5757\u3002 // ::new \u90a3\u4e00\u884c\u7684 :: \u8bed\u6cd5\u8868\u660e new \u662f String \u7c7b\u578b\u7684\u4e00\u4e2a \u5173\u8054\u51fd\u6570\uff08associated function\uff09\u3002 // \u5173\u8054\u51fd\u6570\u662f\u9488\u5bf9\u7c7b\u578b\u5b9e\u73b0\u7684\uff0c\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\u662f String\uff0c\u800c\u4e0d\u662f String \u7684\u67d0\u4e2a\u7279\u5b9a\u5b9e\u4f8b\u3002\u4e00\u4e9b\u8bed\u8a00\u4e2d\u628a\u5b83\u79f0\u4e3a \u9759\u6001\u65b9\u6cd5\uff08static method\uff09\u3002 // new \u51fd\u6570\u521b\u5efa\u4e86\u4e00\u4e2a\u65b0\u7684\u7a7a\u5b57\u7b26\u4e32\uff0c\u4f60\u4f1a\u53d1\u73b0\u5f88\u591a\u7c7b\u578b\u4e0a\u6709 new \u51fd\u6570\uff0c\u56e0\u4e3a\u5b83\u662f\u521b\u5efa\u7c7b\u578b\u5b9e\u4f8b\u7684\u60ef\u7528\u51fd\u6570\u540d\u3002 // \u603b\u7684\u6765\u8bf4\uff0clet mut guess = String::new(); \u8fd9\u4e00\u884c\u521b\u5efa\u4e86\u4e00\u4e2a\u53ef\u53d8\u53d8\u91cf\uff0c\u5f53\u524d\u5b83\u7ed1\u5b9a\u5230\u4e00\u4e2a\u65b0\u7684 String \u7a7a\u5b9e\u4f8b\u4e0a\u3002 // \u5982\u679c\u7a0b\u5e8f\u7684\u5f00\u5934\u6ca1\u6709\u4f7f\u7528 use std::io \u5f15\u5165 io \u5e93\uff0c\u6211\u4eec\u4ecd\u53ef\u4ee5\u901a\u8fc7\u628a\u51fd\u6570\u8c03\u7528\u5199\u6210 std::io::stdin \u6765\u4f7f\u7528\u51fd\u6570\u3002 // stdin \u51fd\u6570\u8fd4\u56de\u4e00\u4e2a std::io::Stdin \u7684\u5b9e\u4f8b\uff0c\u8fd9\u4ee3\u8868\u7ec8\u7aef\u6807\u51c6\u8f93\u5165\u53e5\u67c4\u7684\u7c7b\u578b\u3002 io :: stdin () . read_line ( & mut guess ) // \u4ece\u6807\u51c6\u8f93\u5165\u53e5\u67c4\u83b7\u53d6\u7528\u6237\u8f93\u5165\u3002 // \u5c06 &mut guess \u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\u7ed9 read_line() \u51fd\u6570\uff0c\u8ba9\u5176\u5c06\u7528\u6237\u8f93\u5165\u50a8\u5b58\u5230\u8fd9\u4e2a\u5b57\u7b26\u4e32\u4e2d\u3002 // read_line \u7684\u5de5\u4f5c\u662f\uff0c\u65e0\u8bba\u7528\u6237\u5728\u6807\u51c6\u8f93\u5165\u4e2d\u952e\u5165\u4ec0\u4e48\u5185\u5bb9\uff0c\u90fd\u5c06\u5176\u8ffd\u52a0\uff08\u4e0d\u4f1a\u8986\u76d6\u5176\u539f\u6709\u5185\u5bb9\uff09\u5230\u4e00\u4e2a\u5b57\u7b26\u4e32\u4e2d\uff0c\u56e0\u6b64\u5b83\u9700\u8981\u5b57\u7b26\u4e32\u4f5c\u4e3a\u53c2\u6570\u3002 // \u8fd9\u4e2a\u5b57\u7b26\u4e32\u53c2\u6570\u5e94\u8be5\u662f\u53ef\u53d8\u7684\uff0c\u4ee5\u4fbf read_line \u5c06\u7528\u6237\u8f93\u5165\u9644\u52a0\u4e0a\u53bb\u3002 // & \u8868\u793a\u8fd9\u4e2a\u53c2\u6570\u662f\u4e00\u4e2a \u5f15\u7528\uff08reference\uff09\uff0c\u5b83\u5141\u8bb8\u591a\u5904\u4ee3\u7801\u8bbf\u95ee\u540c\u4e00\u5904\u6570\u636e\uff0c\u800c\u65e0\u9700\u5728\u5185\u5b58\u4e2d\u591a\u6b21\u62f7\u8d1d\u3002 . expect ( \"Failed to read line\" ); // \u4f1a\u8fd4\u56de\u4e00\u4e2a\u7c7b\u578b\u4e3a Result \u7684\u503c\u3002 Result \u662f\u4e00\u79cd\u679a\u4e3e\u7c7b\u578b\uff0c\u901a\u5e38\u4e5f\u5199\u4f5c enum\u3002 // \u679a\u4e3e\u7c7b\u578b\u53d8\u91cf\u7684\u503c\u53ef\u4ee5\u662f\u591a\u79cd\u53ef\u80fd\u72b6\u6001\u4e2d\u7684\u4e00\u4e2a\u3002\u6211\u4eec\u628a\u6bcf\u79cd\u53ef\u80fd\u7684\u72b6\u6001\u79f0\u4e3a\u4e00\u79cd \u679a\u4e3e\u6210\u5458\uff08variant\uff09\u3002 // \u8fd9\u91cc\u7684 Result \u7c7b\u578b\u5c06\u7528\u6765\u7f16\u7801\u9519\u8bef\u5904\u7406\u7684\u4fe1\u606f\u3002 // Result \u7684\u6210\u5458\u662f Ok \u548c Err\uff0c // Ok \u6210\u5458\u8868\u793a\u64cd\u4f5c\u6210\u529f\uff0c\u5185\u90e8\u5305\u542b\u6210\u529f\u65f6\u4ea7\u751f\u7684\u503c\u3002 // Err \u6210\u5458\u5219\u610f\u5473\u7740\u64cd\u4f5c\u5931\u8d25\uff0c\u5e76\u4e14\u5305\u542b\u5931\u8d25\u7684\u524d\u56e0\u540e\u679c\u3002 // Result \u7c7b\u578b\u7684\u503c\uff0c\u50cf\u5176\u4ed6\u7c7b\u578b\u4e00\u6837\uff0c\u62e5\u6709\u5b9a\u4e49\u4e8e\u5176\u4e0a\u7684\u65b9\u6cd5\u3002Result \u7684\u5b9e\u4f8b\u62e5\u6709 expect \u65b9\u6cd5\u3002 // \u5982\u679c io::Result \u5b9e\u4f8b\u7684\u503c\u662f Err\uff0cexpect \u4f1a\u5bfc\u81f4\u7a0b\u5e8f\u5d29\u6e83\uff0c\u5e76\u663e\u793a\u5f53\u505a\u53c2\u6570\u4f20\u9012\u7ed9 expect \u7684\u4fe1\u606f\u3002 // \u5982\u679c read_line \u65b9\u6cd5\u8fd4\u56de Err\uff0c\u5219\u53ef\u80fd\u662f\u6765\u6e90\u4e8e\u5e95\u5c42\u64cd\u4f5c\u7cfb\u7edf\u9519\u8bef\u7684\u7ed3\u679c\u3002 // \u5982\u679c Result \u5b9e\u4f8b\u7684\u503c\u662f Ok\uff0cexpect \u4f1a\u83b7\u53d6 Ok \u4e2d\u7684\u503c\u5e76\u539f\u6837\u8fd4\u56de\u3002 // \u5728\u672c\u4f8b\u4e2d\uff0c\u8fd9\u4e2a\u503c\u662f\u7528\u6237\u8f93\u5165\u5230\u6807\u51c6\u8f93\u5165\u4e2d\u7684\u5b57\u8282\u6570\u3002 // \u5982\u679c\u4e0d\u8c03\u7528 expect\uff0c\u7a0b\u5e8f\u4e5f\u80fd\u7f16\u8bd1\uff0c\u4e0d\u8fc7\u4f1a\u51fa\u73b0\u4e00\u4e2a\u8b66\u544a\uff1a // note: this `Result` may be an `Err` variant, which should be handled // Rust \u8b66\u544a\u6211\u4eec\u6ca1\u6709\u4f7f\u7528 read_line \u7684\u8fd4\u56de\u503c Result\uff0c\u8bf4\u660e\u6709\u4e00\u4e2a\u53ef\u80fd\u7684\u9519\u8bef\u6ca1\u6709\u5904\u7406\u3002 // \u6d88\u9664\u8b66\u544a\u7684\u6b63\u786e\u505a\u6cd5\u662f\u5b9e\u9645\u53bb\u7f16\u5199\u9519\u8bef\u5904\u7406\u4ee3\u7801\uff0c\u4e0d\u8fc7\u7531\u4e8e\u6211\u4eec\u5c31\u662f\u5e0c\u671b\u7a0b\u5e8f\u5728\u51fa\u73b0\u95ee\u9898\u65f6\u7acb\u5373\u5d29\u6e83\uff0c\u6240\u4ee5\u76f4\u63a5\u4f7f\u7528 expect\u3002 // \u7ee7\u7eed\u6df1\u5165\u5b66\u4e60\u7684\u8bdd\uff0c\u5c06\u4f1a\u5b66\u4e60\u5230\u5982\u4f55\u4ece\u9519\u8bef\u4e2d\u6062\u590d\u3002 println! ( \"You guessed: {guess}\" ); // \u6253\u5370\u4e86\u5b58\u50a8\u7528\u6237\u8f93\u5165\u7684\u5b57\u7b26\u4e32\u3002 // \u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\uff0c\u91cc\u9762\u7684 {} \u662f\u9884\u7559\u5728\u7279\u5b9a\u4f4d\u7f6e\u7684\u5360\u4f4d\u7b26 // \u4f7f\u7528 {} \u4e5f\u53ef\u4ee5\u6253\u5370\u591a\u4e2a\u503c\uff1a // \u7b2c\u4e00\u5bf9 {} \u4f7f\u7528\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u4e4b\u540e\u7684\u7b2c\u4e00\u4e2a\u503c\uff0c\u7b2c\u4e8c\u5bf9\u5219\u4f7f\u7528\u7b2c\u4e8c\u4e2a\u503c\uff0c\u4f9d\u6b64\u7c7b\u63a8\u3002\u8c03 // \u7528\u4e00\u6b21 println! \u6253\u5370\u591a\u4e2a\u503c\u770b\u8d77\u6765\u50cf\u8fd9\u6837\uff1a // println!(\"x = {} and y = {}\", x, y); }","title":"\u5904\u7406\u4e00\u6b21\u731c\u6d4b\u8f93\u5165"},{"location":"guessing-game/#_4","text":"Rust \u6807\u51c6\u5e93\u4e2d\u5c1a\u672a\u5305\u542b\u968f\u673a\u6570\u529f\u80fd\u3002\u7136\u800c\uff0cRust \u56e2\u961f\u8fd8\u662f\u63d0\u4f9b\u4e86\u4e00\u4e2a\u5305\u542b\u4e0a\u8ff0\u529f\u80fd\u7684 rand crate \u3002 rand crate \u662f\u4e00\u4e2a \u5e93 crate \uff0c \u5e93 crate \u53ef\u4ee5\u5305\u542b\u4efb\u610f\u80fd\u88ab\u5176\u4ed6\u7a0b\u5e8f\u4f7f\u7528\u7684\u4ee3\u7801\uff0c\u4f46\u662f\u4e0d\u80fd\u81ea\u6267\u884c\u3002 \u5728\u4f7f\u7528 rand \u7f16\u5199\u4ee3\u7801\u4e4b\u524d\uff0c\u9700\u8981\u4fee\u6539 Cargo.toml \u6587\u4ef6\uff0c\u5f15\u5165\u4e00\u4e2a rand \u4f9d\u8d56\u3002\u73b0\u5728\u6253\u5f00\u8fd9\u4e2a\u6587\u4ef6\u5e76\u5c06\u4e0b\u9762\u8fd9\u4e00\u884c\u6dfb\u52a0\u5230 [dependencies] \u7247\u6bb5\u6807\u9898\u4e4b\u4e0b\u3002 \u6587\u4ef6\u540d: Cargo.toml rand = \"0.8.3\" [dependencies] \u7247\u6bb5\u544a\u8bc9 Cargo \u672c\u9879\u76ee\u4f9d\u8d56\u4e86\u54ea\u4e9b\u5916\u90e8 crate \u53ca\u5176\u7248\u672c\u3002\u672c\u4f8b\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u8bed\u4e49\u5316\u7248\u672c 0.8.3 \u6765\u6307\u5b9a rand crate \u7684\u7248\u672c\u3002Cargo \u7406\u89e3 \u8bed\u4e49\u5316\u7248\u672c \uff08Semantic Versioning\uff09\uff08\u6709\u65f6\u4e5f\u79f0\u4e3a SemVer\uff09\uff0c\u8fd9\u662f\u4e00\u79cd\u5b9a\u4e49\u7248\u672c\u53f7\u7684\u6807\u51c6\u3002 0.8.3 \u4e8b\u5b9e\u4e0a\u662f ^0.8.3 \u7684\u7b80\u5199\uff0c\u5b83\u8868\u793a\u4efb\u4f55\u81f3\u5c11\u662f 0.8.3 \u4f46\u5c0f\u4e8e 0.9.0 \u7684\u7248\u672c\u3002 Cargo \u8ba4\u4e3a\u8fd9\u4e9b\u7248\u672c\u4e0e 0.8.3 \u7248\u672c\u7684\u516c\u6709 API \u76f8\u517c\u5bb9\uff0c\u8fd9\u6837\u7684\u7248\u672c\u6307\u5b9a\u786e\u4fdd\u4e86\u6211\u4eec\u53ef\u4ee5\u83b7\u53d6\u80fd\u4f7f\u672c\u7ae0\u4ee3\u7801\u7f16\u8bd1\u7684\u6700\u65b0\u7684\u8865\u4e01\uff08patch\uff09\u7248\u672c\u3002\u4efb\u4f55\u5927\u4e8e\u7b49\u4e8e 0.9.0 \u7684\u7248\u672c\u4e0d\u80fd\u4fdd\u8bc1\u548c\u63a5\u4e0b\u6765\u7684\u793a\u4f8b\u91c7\u7528\u4e86\u76f8\u540c\u7684 API\u3002 \u73b0\u5728\uff0c\u4e0d\u4fee\u6539\u4efb\u4f55\u4ee3\u7801\uff0c\u6784\u5efa\u9879\u76ee\uff0c\u5982\u4e0b\u6240\u793a\uff1a $ cargo build Updating crates.io index Downloaded ppv-lite86 v0.2.17 Downloaded rand v0.8.5 Downloaded rand_chacha v0.3.1 Downloaded rand_core v0.6.4 Downloaded cfg-if v1.0.0 Downloaded getrandom v0.2.8 Downloaded libc v0.2.138 Downloaded 7 crates ( 794 .8 KB ) in 2 .72s Compiling libc v0.2.138 Compiling cfg-if v1.0.0 Compiling ppv-lite86 v0.2.17 Compiling getrandom v0.2.8 Compiling rand_core v0.6.4 Compiling rand_chacha v0.3.1 Compiling rand v0.8.5 Compiling guessing-game v0.1.0 ( file:///projects/guessing_game ) Finished dev [ unoptimized + debuginfo ] target ( s ) in 3m 45s # \u5c06 rand crate \u6dfb\u52a0\u4e3a\u4f9d\u8d56\u4e4b\u540e\u8fd0\u884c cargo build \u7684\u8f93\u51fa \u73b0\u5728\u7cfb\u7edf\u6709\u4e86\u4e00\u4e2a\u5916\u90e8\u4f9d\u8d56\uff0cCargo \u4ece registry \u4e0a\u83b7\u53d6\u6240\u6709\u5305\u7684\u6700\u65b0\u7248\u672c\u4fe1\u606f\uff0c\u8fd9\u662f\u4e00\u4efd\u6765\u81ea Crates.io \u7684\u6570\u636e\u62f7\u8d1d\u3002Crates.io \u662f Rust \u751f\u6001\u73af\u5883\u4e2d\u7684\u5f00\u53d1\u8005\u4eec\u5411\u4ed6\u4eba\u8d21\u732e Rust \u5f00\u6e90\u9879\u76ee\u7684\u5730\u65b9\u3002 \u5728\u66f4\u65b0\u5b8c registry \u540e\uff0cCargo \u68c0\u67e5 [dependencies] \u90e8\u5206\u5e76\u4e0b\u8f7d\u5217\u8868\u4e2d\u5305\u542b\u4f46\u8fd8\u672a\u4e0b\u8f7d\u7684 crates \u3002\u672c\u4f8b\u4e2d\uff0c\u867d\u7136\u53ea\u58f0\u660e\u4e86 rand \u4e00\u4e2a\u4f9d\u8d56\uff0c\u7136\u800c Cargo \u8fd8\u662f\u989d\u5916\u83b7\u53d6\u4e86 rand \u6240\u9700\u8981\u7684\u5176\u4ed6 crates\uff0c\u56e0\u4e3a rand \u4f9d\u8d56\u5b83\u4eec\u6765\u6b63\u5e38\u5de5\u4f5c\u3002\u4e0b\u8f7d\u5b8c\u6210\u540e\uff0cRust \u7f16\u8bd1\u4f9d\u8d56\uff0c\u7136\u540e\u4f7f\u7528\u8fd9\u4e9b\u4f9d\u8d56\u7f16\u8bd1\u9879\u76ee\u3002 \u6587\u4ef6\u540d: src/main.rs // \u65b0\u589e\u4e86\u4e00\u884c use rand::Rng\u3002 // Rng \u662f\u4e00\u4e2a trait\uff0c\u5b83\u5b9a\u4e49\u4e86\u968f\u673a\u6570\u751f\u6210\u5668\u5e94\u5b9e\u73b0\u7684\u65b9\u6cd5\uff0c\u60f3\u4f7f\u7528\u8fd9\u4e9b\u65b9\u6cd5\u7684\u8bdd\uff0c\u6b64 trait \u5fc5\u987b\u5728\u4f5c\u7528\u57df\u4e2d\u3002 use rand :: Rng ; use std :: io ; fn main () { println! ( \"\u731c\u6570\u6e38\u620f\uff01\uff01\" ); let secret_number = rand :: thread_rng (). gen_range ( 1 ..= 100 ); // \u8c03\u7528\u4e86 rand::thread_rng \u51fd\u6570\u63d0\u4f9b\u5b9e\u9645\u4f7f\u7528\u7684\u968f\u673a\u6570\u751f\u6210\u5668\uff1a\u5b83\u4f4d\u4e8e\u5f53\u524d\u6267\u884c\u7ebf\u7a0b\u7684\u672c\u5730\u73af\u5883\u4e2d\uff0c\u5e76\u4ece\u64cd\u4f5c\u7cfb\u7edf\u83b7\u53d6 seed\u3002 // \u63a5\u7740\u8c03\u7528\u968f\u673a\u6570\u751f\u6210\u5668\u7684 gen_range \u65b9\u6cd5\u3002\u8fd9\u4e2a\u65b9\u6cd5\u7531 use rand::Rng \u8bed\u53e5\u5f15\u5165\u5230\u4f5c\u7528\u57df\u7684 Rng trait \u5b9a\u4e49\u3002 // gen_range \u65b9\u6cd5\u83b7\u53d6\u4e00\u4e2a\u8303\u56f4\u8868\u8fbe\u5f0f\uff08range expression\uff09\u4f5c\u4e3a\u53c2\u6570\uff0c\u5e76\u751f\u6210\u4e00\u4e2a\u5728\u6b64\u8303\u56f4\u4e4b\u95f4\u7684\u968f\u673a\u6570\u3002 // \u8fd9\u91cc\u4f7f\u7528\u7684\u8fd9\u7c7b\u8303\u56f4\u8868\u8fbe\u5f0f\u4f7f\u7528\u4e86 start..=end \u8fd9\u6837\u7684\u5f62\u5f0f\uff0c\u4e5f\u5c31\u662f\u8bf4\u5305\u542b\u4e86\u4e0a\u4e0b\u7aef\u70b9\uff0c\u6240\u4ee5\u9700\u8981\u6307\u5b9a 1..=100 \u6765\u8bf7\u6c42\u4e00\u4e2a 1 \u548c 100 \u4e4b\u95f4\u7684\u6570\u3002 println! ( \"\u751f\u6210\u7684\u5bc6\u7801\u6570\u5b57\u662f: {secret_number}\" ); println! ( \"\u8bf7\u8f93\u5165\u4e00\u4e2a\u503c:\" ); let mut guess = String :: new (); io :: stdin (). read_line ( & mut guess ). expect ( \"\u8bfb\u6570\u5931\u8d25!\" ); println! ( \"\u4f60\u731c\u6d4b\u7684\u6570\u4e3a: {guess}\" ) } \u6ce8\u610f \uff1a \u4f60\u4e0d\u53ef\u80fd\u51ed\u7a7a\u5c31\u77e5\u9053\u5e94\u8be5 use \u54ea\u4e2a trait \u4ee5\u53ca\u8be5\u4ece crate \u4e2d\u8c03\u7528\u54ea\u4e2a\u65b9\u6cd5\uff0c\u56e0\u6b64\u6bcf\u4e2acrate \u6709\u4f7f\u7528\u8bf4\u660e\u6587\u6863\u3002 Cargo \u6709\u4e00\u4e2a\u5f88\u68d2\u7684\u529f\u80fd\u662f\uff1a\u8fd0\u884c cargo doc --open \u547d\u4ee4\u6765\u6784\u5efa\u6240\u6709\u672c\u5730\u4f9d\u8d56\u63d0\u4f9b\u7684\u6587\u6863\uff0c\u5e76\u5728\u6d4f\u89c8\u5668\u4e2d\u6253\u5f00\u3002 \u4f8b\u5982\uff0c\u5047\u8bbe\u4f60\u5bf9 rand crate \u4e2d\u7684\u5176\u4ed6\u529f\u80fd\u611f\u5174\u8da3\uff0c\u4f60\u53ef\u4ee5\u8fd0\u884c cargo doc --open \u5e76\u70b9\u51fb\u5de6\u4fa7\u5bfc\u822a\u680f\u4e2d\u7684 rand\u3002","title":"\u751f\u6210\u4e00\u4e2a\u79d8\u5bc6\u6570\u5b57"},{"location":"guessing-game/#_5","text":"\u6587\u4ef6\u540d: src/main.rs use rand :: Rng ; use std :: cmp :: Ordering ; // \u4ece\u6807\u51c6\u5e93\u5f15\u5165\u4e86\u4e00\u4e2a\u53eb\u505a std::cmp::Ordering \u7684\u7c7b\u578b\u5230\u4f5c\u7528\u57df\u4e2d\u3002 // Ordering \u4e5f\u662f\u4e00\u4e2a\u679a\u4e3e\uff0c\u4e0d\u8fc7\u5b83\u7684\u6210\u5458\u662f Less\u3001Greater \u548c Equal\u3002 // \u8fd9\u662f\u6bd4\u8f83\u4e24\u4e2a\u503c\u65f6\u53ef\u80fd\u51fa\u73b0\u7684\u4e09\u79cd\u7ed3\u679c\u3002 use std :: io ; fn main () { println! ( \"\u731c\u6570\u6e38\u620f\uff01\uff01\" ); let secret_number = rand :: thread_rng (). gen_range ( 1 ..= 100 ); println! ( \"\u751f\u6210\u7684\u5bc6\u7801\u6570\u5b57\u662f: {secret_number}\" ); println! ( \"\u8bf7\u8f93\u5165\u4e00\u4e2a\u503c:\" ); let mut guess = String :: new (); io :: stdin (). read_line ( & mut guess ). expect ( \"\u8bfb\u6570\u5931\u8d25!\" ); println! ( \"\u4f60\u731c\u6d4b\u7684\u6570\u4e3a: {guess}\" ); match guess . cmp ( & secret_number ){ // cmp \u65b9\u6cd5\u7528\u6765\u6bd4\u8f83\u4e24\u4e2a\u503c\u5e76\u53ef\u4ee5\u5728\u4efb\u4f55\u53ef\u6bd4\u8f83\u7684\u503c\u4e0a\u8c03\u7528\u3002 // \u5b83\u83b7\u53d6\u4e00\u4e2a\u88ab\u6bd4\u8f83\u503c\u7684\u5f15\u7528\uff1a\u8fd9\u91cc\u662f\u628a guess \u4e0e secret_number \u505a\u6bd4\u8f83\u3002 // \u7136\u540e\u5b83\u4f1a\u8fd4\u56de\u4e00\u4e2a\u521a\u624d\u901a\u8fc7 use \u5f15\u5165\u4f5c\u7528\u57df\u7684 Ordering \u679a\u4e3e\u7684\u6210\u5458\u3002 // \u4f7f\u7528\u4e00\u4e2a match \u8868\u8fbe\u5f0f\uff0c\u6839\u636e\u5bf9 guess \u548c secret_number \u8c03\u7528 cmp \u8fd4\u56de\u7684 Ordering \u6210\u5458\u6765\u51b3\u5b9a\u63a5\u4e0b\u6765\u505a\u4ec0\u4e48\u3002 Ordering :: Less => println! ( \"\u592a\u5c0f\u4e86\uff01\" ), Ordering :: Greater => println! ( \"\u592a\u5927\u4e86\uff01\" ), Ordering :: Equal => println! ( \"\u731c\u5bf9\u4e86\uff01\" ), } } \u4e00\u4e2a match \u8868\u8fbe\u5f0f\u7531 \u5206\u652f\uff08arms\uff09 \u6784\u6210\u3002 \u4e00\u4e2a\u5206\u652f\u5305\u542b\u4e00\u4e2a \u6a21\u5f0f\uff08pattern\uff09\u548c\u8868\u8fbe\u5f0f\u5f00\u5934\u7684\u503c\u4e0e\u5206\u652f\u6a21\u5f0f\u76f8\u5339\u914d\u65f6\u5e94\u8be5\u6267\u884c\u7684\u4ee3\u7801\u3002 Rust \u83b7\u53d6\u63d0\u4f9b\u7ed9 match \u7684\u503c\u5e76\u6328\u4e2a\u68c0\u67e5\u6bcf\u4e2a\u5206\u652f\u7684\u6a21\u5f0f\u3002 \u6b64\u65f6\u8fdb\u884c cargo build \u4f1a\u51fa\u73b0\u5982\u4e0b\u9519\u8bef: cargo build Compiling guessing-game v0.1.0 ( /files/rust-example-apps/src/guessing-game ) error [ E0308 ] : mismatched types --> src/main.rs:20:21 | 20 | match guess.cmp ( & secret_number ) { | --- ^^^^^^^^^^^^^^ expected struct ` String ` , found integer | | | arguments to this function are incorrect | = note: expected reference ` & String ` found reference ` & { integer } ` note: associated function defined here For more information about this error, try ` rustc --explain E0308 ` . error: could not compile ` guessing-game ` due to previous error \u9519\u8bef\u7684\u6838\u5fc3\u8868\u660e\u8fd9\u91cc\u6709 \u4e0d\u5339\u914d\u7684\u7c7b\u578b\uff08mismatched types\uff09 \u3002 Rust \u6709\u4e00\u4e2a\u9759\u6001\u5f3a\u7c7b\u578b\u7cfb\u7edf\uff0c\u540c\u65f6\u4e5f\u6709\u7c7b\u578b\u63a8\u65ad\u3002 \u5f53\u6211\u4eec\u5199\u51fa let guess = String::new() \u65f6\uff0cRust \u63a8\u65ad\u51fa guess \u5e94\u8be5\u662f String \u7c7b\u578b\uff0c\u5e76\u4e0d\u9700\u8981\u6211\u4eec\u5199\u51fa\u7c7b\u578b\u3002 \u53e6\u4e00\u65b9\u9762\uff0csecret_number\uff0c\u662f\u6570\u5b57\u7c7b\u578b\u3002\u51e0\u4e2a\u6570\u5b57\u7c7b\u578b\u62e5\u6709 1 \u5230 100 \u4e4b\u95f4\u7684\u503c\uff1a32 \u4f4d\u6570\u5b57 i32\uff1b32 \u4f4d\u65e0\u7b26\u53f7\u6570\u5b57 u32\uff1b64 \u4f4d\u6570\u5b57 i64 \u7b49\u7b49\u3002 Rust \u9ed8\u8ba4\u4f7f\u7528 i32\uff0c\u6240\u4ee5\u5b83\u662f secret_number \u7684\u7c7b\u578b\uff0c\u9664\u975e\u589e\u52a0\u7c7b\u578b\u4fe1\u606f\uff0c\u6216\u4efb\u4f55\u80fd\u8ba9 Rust \u63a8\u65ad\u51fa\u4e0d\u540c\u6570\u503c\u7c7b\u578b\u7684\u4fe1\u606f\u3002 \u8fd9\u91cc\u9519\u8bef\u7684\u539f\u56e0\u5728\u4e8e Rust \u4e0d\u4f1a\u6bd4\u8f83\u5b57\u7b26\u4e32\u7c7b\u578b\u548c\u6570\u5b57\u7c7b\u578b\u3002 \u6240\u4ee5\u6211\u4eec\u5fc5\u987b\u628a\u4ece\u8f93\u5165\u4e2d\u8bfb\u53d6\u5230\u7684 String \u8f6c\u6362\u4e3a\u4e00\u4e2a\u771f\u6b63\u7684\u6570\u5b57\u7c7b\u578b\uff0c\u624d\u597d\u4e0e\u79d8\u5bc6\u6570\u5b57\u8fdb\u884c\u6bd4\u8f83\u3002\u8fd9\u53ef\u4ee5\u901a\u8fc7\u5728 main \u51fd\u6570\u4f53\u4e2d\u589e\u52a0\u5982\u4e0b\u4ee3\u7801\u6765\u5b9e\u73b0\uff1a \u6587\u4ef6\u540d: src/main.rs use rand :: Rng ; use std :: cmp :: Ordering ; use std :: io ; fn main () { println! ( \"\u731c\u6570\u6e38\u620f\uff01\uff01\" ); let secret_number = rand :: thread_rng (). gen_range ( 1 ..= 100 ); println! ( \"\u751f\u6210\u7684\u5bc6\u7801\u6570\u5b57\u662f: {secret_number}\" ); println! ( \"\u8bf7\u8f93\u5165\u4e00\u4e2a\u503c:\" ); let mut guess = String :: new (); io :: stdin (). read_line ( & mut guess ). expect ( \"\u8bfb\u6570\u5931\u8d25!\" ); let guess : u32 = guess . trim (). parse (). expect ( \"\u8bf7\u8f93\u5165\u6570\u5b57!\" ); // \u8fd9\u91cc\u521b\u5efa\u4e86\u4e00\u4e2a\u53eb\u505a guess \u7684\u53d8\u91cf\u3002 // \u4e0d\u8fc7\u7b49\u7b49\uff0c\u4e0d\u662f\u5df2\u7ecf\u6709\u4e86\u4e00\u4e2a\u53eb\u505a guess \u7684\u53d8\u91cf\u4e86\u5417\uff1f // \u786e\u5b9e\u5982\u6b64\uff0c\u4e0d\u8fc7 Rust \u5141\u8bb8\u7528\u4e00\u4e2a\u65b0\u503c\u6765 \u9690\u85cf \uff08shadow\uff09 guess \u4e4b\u524d\u7684\u503c\u3002 // \u8fd9\u4e2a\u529f\u80fd\u5e38\u7528\u5728\u9700\u8981\u8f6c\u6362\u503c\u7c7b\u578b\u4e4b\u7c7b\u7684\u573a\u666f\u3002 // \u5b83\u5141\u8bb8\u6211\u4eec\u590d\u7528 guess \u53d8\u91cf\u7684\u540d\u5b57\uff0c\u800c\u4e0d\u662f\u88ab\u8feb\u521b\u5efa\u4e24\u4e2a\u4e0d\u540c\u53d8\u91cf\uff0c\u8bf8\u5982 guess_str \u548c guess \u4e4b\u7c7b\u3002 // \u5c06\u8fd9\u4e2a\u65b0\u53d8\u91cf\u7ed1\u5b9a\u5230 guess.trim().parse() \u8868\u8fbe\u5f0f\u4e0a\u3002 // \u8868\u8fbe\u5f0f\u4e2d\u7684 guess \u6307\u7684\u662f\u5305\u542b\u8f93\u5165\u7684\u5b57\u7b26\u4e32\u7c7b\u578b guess \u53d8\u91cf\u3002 // String \u5b9e\u4f8b\u7684 trim \u65b9\u6cd5\u4f1a\u53bb\u9664\u5b57\u7b26\u4e32\u5f00\u5934\u548c\u7ed3\u5c3e\u7684\u7a7a\u767d\u5b57\u7b26\uff0c\u6211\u4eec\u5fc5\u987b\u6267\u884c\u6b64\u65b9\u6cd5\u624d\u80fd\u5c06\u5b57\u7b26\u4e32\u4e0e u32 \u6bd4\u8f83\uff0c\u56e0\u4e3a u32 \u53ea\u80fd\u5305\u542b\u6570\u503c\u578b\u6570\u636e\u3002 // \u7528\u6237\u5fc5\u987b\u8f93\u5165 enter \u952e\u624d\u80fd\u8ba9 read_line \u8fd4\u56de\u5e76\u8f93\u5165\u4ed6\u4eec\u7684\u731c\u60f3\uff0c\u8fd9\u5c06\u4f1a\u5728\u5b57\u7b26\u4e32\u4e2d\u589e\u52a0\u4e00\u4e2a\u6362\u884c\uff08newline\uff09\u7b26\u3002 // \u4f8b\u5982\uff0c\u7528\u6237\u8f93\u5165 5 \u5e76\u6309\u4e0b enter, guess \u770b\u8d77\u6765\u50cf\u8fd9\u6837\uff1a5\\n \u6216\u8005 5\\r\\n\u3002 // \\n \u4ee3\u8868 \u201c\u6362\u884c\u201d\uff0c\u56de\u8f66\u952e\uff1b\\r \u4ee3\u8868 \u201c\u56de\u8f66\u201d\uff0c\u56de\u8f66\u952e\u3002 // trim \u65b9\u6cd5\u4f1a\u6d88\u9664 \\n \u6216\u8005 \\r\\n\uff0c\u53ea\u7559\u4e0b 5\u3002 // \u5b57\u7b26\u4e32\u7684 parse \u65b9\u6cd5 \u5c06\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u5176\u4ed6\u7c7b\u578b\u3002 // \u8fd9\u91cc\u7528\u5b83\u6765\u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6570\u503c\u3002\u6211\u4eec\u9700\u8981\u544a\u8bc9 Rust \u5177\u4f53\u7684\u6570\u5b57\u7c7b\u578b\uff0c\u8fd9\u91cc\u901a\u8fc7 let guess: u32 \u6307\u5b9a\u3002 // guess \u540e\u9762\u7684\u5192\u53f7\uff08:\uff09\u544a\u8bc9 Rust \u6211\u4eec\u6307\u5b9a\u4e86\u53d8\u91cf\u7684\u7c7b\u578b\u3002 // Rust \u6709\u4e00\u4e9b\u5185\u5efa\u7684\u6570\u5b57\u7c7b\u578b\uff1bu32 \u662f\u4e00\u4e2a\u65e0\u7b26\u53f7\u7684 32 \u4f4d\u6574\u578b\u3002 // \u5bf9\u4e8e\u4e0d\u5927\u7684\u6b63\u6574\u6570\u6765\u8bf4\uff0c\u5b83\u662f\u4e0d\u9519\u7684\u9ed8\u8ba4\u7c7b\u578b\uff0c\u7b2c\u4e09\u7ae0\u8fd8\u4f1a\u8bb2\u5230\u5176\u4ed6\u6570\u5b57\u7c7b\u578b\u3002 // \u53e6\u5916\uff0c\u7a0b\u5e8f\u4e2d\u7684 u32 \u6ce8\u89e3\u4ee5\u53ca\u4e0e secret_number \u7684\u6bd4\u8f83\uff0c\u610f\u5473\u7740 Rust \u4f1a\u63a8\u65ad\u51fa secret_number \u4e5f\u662f u32 \u7c7b\u578b\u3002 // \u73b0\u5728\u53ef\u4ee5\u4f7f\u7528\u76f8\u540c\u7c7b\u578b\u6bd4\u8f83\u4e24\u4e2a\u503c\u4e86\uff01 // parse \u65b9\u6cd5\u53ea\u6709\u5728\u5b57\u7b26\u903b\u8f91\u4e0a\u53ef\u4ee5\u8f6c\u6362\u4e3a\u6570\u5b57\u7684\u65f6\u5019\u624d\u80fd\u5de5\u4f5c\u6240\u4ee5\u975e\u5e38\u5bb9\u6613\u51fa\u9519\u3002 // \u4f8b\u5982\uff0c\u5b57\u7b26\u4e32\u4e2d\u5305\u542b A\ud83d\udc4d%\uff0c\u5c31\u65e0\u6cd5\u5c06\u5176\u8f6c\u6362\u4e3a\u4e00\u4e2a\u6570\u5b57\u3002 // \u56e0\u6b64\uff0cparse \u65b9\u6cd5\u8fd4\u56de\u4e00\u4e2a Result \u7c7b\u578b\u3002 // \u50cf\u4e4b\u524d \u201c\u4f7f\u7528 Result \u7c7b\u578b\u6765\u5904\u7406\u6f5c\u5728\u7684\u9519\u8bef\u201d \u8ba8\u8bba\u7684 read_line \u65b9\u6cd5\u90a3\u6837\uff0c\u518d\u6b21\u6309\u90e8\u5c31\u73ed\u7684\u7528 expect \u65b9\u6cd5\u5904\u7406\u5373\u53ef\u3002 // \u5982\u679c parse \u4e0d\u80fd\u4ece\u5b57\u7b26\u4e32\u751f\u6210\u4e00\u4e2a\u6570\u5b57\uff0c\u8fd4\u56de\u4e00\u4e2a Result \u7684 Err \u6210\u5458\u65f6\uff0cexpect \u4f1a\u4f7f\u6e38\u620f\u5d29\u6e83\u5e76\u6253\u5370\u9644\u5e26\u7684\u4fe1\u606f\u3002 // \u5982\u679c parse \u6210\u529f\u5730\u5c06\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u4e00\u4e2a\u6570\u5b57\uff0c\u5b83\u4f1a\u8fd4\u56de Result \u7684 Ok \u6210\u5458\uff0c\u7136\u540e expect \u4f1a\u8fd4\u56de Ok \u503c\u4e2d\u7684\u6570\u5b57\u3002 println! ( \"\u4f60\u731c\u6d4b\u7684\u6570\u4e3a: {guess}\" ); match guess . cmp ( & secret_number ) { Ordering :: Less => println! ( \"\u592a\u5c0f\u4e86\uff01\" ), Ordering :: Greater => println! ( \"\u592a\u5927\u4e86\uff01\" ), Ordering :: Equal => println! ( \"\u731c\u5bf9\u4e86\uff01\" ), } }","title":"\u6bd4\u8f83\u731c\u6d4b\u7684\u6570\u5b57\u548c\u79d8\u5bc6\u6570\u5b57"},{"location":"guessing-game/#_6","text":"loop \u5173\u952e\u5b57\u521b\u5efa\u4e86\u4e00\u4e2a\u65e0\u9650\u5faa\u73af\u3002 \u6587\u4ef6\u540d: src/main.rs use rand :: Rng ; use std :: cmp :: Ordering ; use std :: io ; fn main () { println! ( \"\u731c\u6570\u6e38\u620f\uff01\uff01\" ); let secret_number = rand :: thread_rng (). gen_range ( 1 ..= 100 ); println! ( \"\u751f\u6210\u7684\u5bc6\u7801\u6570\u5b57\u662f: {secret_number}\" ); loop { println! ( \"\u8bf7\u8f93\u5165\u4e00\u4e2a\u503c:\" ); let mut guess = String :: new (); io :: stdin (). read_line ( & mut guess ). expect ( \"\u8bfb\u6570\u5931\u8d25!\" ); let guess : u32 = guess . trim (). parse (). expect ( \"\u8bf7\u8f93\u5165\u6570\u5b57!\" ); println! ( \"\u4f60\u731c\u6d4b\u7684\u6570\u4e3a: {guess}\" ); match guess . cmp ( & secret_number ) { Ordering :: Less => println! ( \"\u592a\u5c0f\u4e86\uff01\" ), Ordering :: Greater => println! ( \"\u592a\u5927\u4e86\uff01\" ), Ordering :: Equal => println! ( \"\u731c\u5bf9\u4e86\uff01\" ), } } } \u5982\u4e0a\u6240\u793a\uff0c\u6211\u4eec\u5c06\u63d0\u793a\u7528\u6237\u731c\u6d4b\u4e4b\u540e\u7684\u6240\u6709\u5185\u5bb9\u79fb\u52a8\u5230\u4e86\u5faa\u73af\u4e2d\u3002\u786e\u4fdd loop \u5faa\u73af\u4e2d\u7684\u4ee3\u7801\u591a\u7f29\u8fdb\u56db\u4e2a\u7a7a\u683c\uff0c\u518d\u6b21\u8fd0\u884c\u7a0b\u5e8f\u3002\u6ce8\u610f\u8fd9\u91cc\u6709\u4e00\u4e2a\u65b0\u95ee\u9898\uff0c\u56e0\u4e3a\u7a0b\u5e8f\u5fe0\u5b9e\u5730\u6267\u884c\u4e86\u6211\u4eec\u7684\u8981\u6c42\uff1a\u6c38\u8fdc\u5730\u8bf7\u6c42\u53e6\u4e00\u4e2a\u731c\u6d4b\uff0c\u7528\u6237\u597d\u50cf\u65e0\u6cd5\u9000\u51fa\u554a\uff01 \u7528\u6237\u603b\u80fd\u4f7f\u7528 ctrl-c \u7ec8\u6b62\u7a0b\u5e8f\u3002\u4e0d\u8fc7\u8fd8\u6709\u53e6\u4e00\u4e2a\u65b9\u6cd5\u8df3\u51fa\u65e0\u9650\u5faa\u73af\uff0c\u5c31\u662f \u201c\u6bd4\u8f83\u731c\u6d4b\u4e0e\u79d8\u5bc6\u6570\u5b57\u201d \u90e8\u5206\u63d0\u5230\u7684 parse\uff1a\u5982\u679c\u7528\u6237\u8f93\u5165\u7684\u7b54\u6848\u4e0d\u662f\u4e00\u4e2a\u6570\u5b57\uff0c\u7a0b\u5e8f\u4f1a\u5d29\u6e83\u3002\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u8fd9\u4e00\u70b9\u6765\u9000\u51fa\uff0c\u5982\u4e0b\u6240\u793a\uff1a $ cargo run Compiling guessing_game v0.1.0 ( file:///projects/guessing_game ) Finished dev [ unoptimized + debuginfo ] target ( s ) in 1 .50s Running ` target/debug/guessing_game ` \u731c\u6570\u6e38\u620f\uff01\uff01 \u751f\u6210\u7684\u5bc6\u7801\u6570\u5b57\u662f: 57 \u8bf7\u8f93\u5165\u4e00\u4e2a\u503c: 12 \u4f60\u731c\u6d4b\u7684\u6570\u4e3a: 12 \u592a\u5c0f\u4e86\uff01 \u8bf7\u8f93\u5165\u4e00\u4e2a\u503c: 57 \u4f60\u731c\u6d4b\u7684\u6570\u4e3a: 57 \u731c\u5bf9\u4e86\uff01 \u8bf7\u8f93\u5165\u4e00\u4e2a\u503c: asdf thread 'main' panicked at '\u8bf7\u8f93\u5165\u6570\u5b57!: ParseIntError { kind: InvalidDigit }' , src/main.rs:19:47 note: run with ` RUST_BACKTRACE = 1 ` environment variable to display a backtrace","title":"\u4f7f\u7528\u5faa\u73af\u6765\u5141\u8bb8\u591a\u6b21\u731c\u6d4b"},{"location":"guessing-game/#_7","text":"\u8ba9\u6211\u4eec\u589e\u52a0\u4e00\u4e2a break \u8bed\u53e5\uff0c\u5728\u7528\u6237\u731c\u5bf9\u65f6\u9000\u51fa\u6e38\u620f\uff1a \u6587\u4ef6\u540d: src/main.rs use rand :: Rng ; use std :: cmp :: Ordering ; use std :: io ; fn main () { println! ( \"\u731c\u6570\u6e38\u620f\uff01\uff01\" ); let secret_number = rand :: thread_rng (). gen_range ( 1 ..= 100 ); println! ( \"\u751f\u6210\u7684\u5bc6\u7801\u6570\u5b57\u662f: {secret_number}\" ); loop { println! ( \"\u8bf7\u8f93\u5165\u4e00\u4e2a\u503c:\" ); let mut guess = String :: new (); io :: stdin (). read_line ( & mut guess ). expect ( \"\u8bfb\u6570\u5931\u8d25!\" ); let guess : u32 = guess . trim (). parse (). expect ( \"\u8bf7\u8f93\u5165\u6570\u5b57!\" ); println! ( \"\u4f60\u731c\u6d4b\u7684\u6570\u4e3a: {guess}\" ); match guess . cmp ( & secret_number ) { Ordering :: Less => println! ( \"\u592a\u5c0f\u4e86\uff01\" ), Ordering :: Greater => println! ( \"\u592a\u5927\u4e86\uff01\" ), Ordering :: Equal => { println! ( \"\u731c\u5bf9\u4e86\uff01\" ); break ; } } } } a \u901a\u8fc7\u5728 You win! \u4e4b\u540e\u589e\u52a0\u4e00\u884c break\uff0c\u7528\u6237\u731c\u5bf9\u4e86\u795e\u79d8\u6570\u5b57\u540e\u4f1a\u9000\u51fa\u5faa\u73af\u3002\u9000\u51fa\u5faa\u73af\u4e5f\u610f\u5473\u7740\u9000\u51fa\u7a0b\u5e8f\uff0c\u56e0\u4e3a\u5faa\u73af\u662f main \u7684\u6700\u540e\u4e00\u90e8\u5206\u3002","title":"\u731c\u6d4b\u6b63\u786e\u540e\u9000\u51fa"},{"location":"guessing-game/#_8","text":"\u4e3a\u4e86\u8fdb\u4e00\u6b65\u6539\u5584\u6e38\u620f\u6027\uff0c\u4e0d\u8981\u5728\u7528\u6237\u8f93\u5165\u975e\u6570\u5b57\u65f6\u5d29\u6e83\uff0c\u9700\u8981\u5ffd\u7565\u975e\u6570\u5b57\uff0c\u8ba9\u7528\u6237\u53ef\u4ee5\u7ee7\u7eed\u731c\u6d4b\u3002\u53ef\u4ee5\u901a\u8fc7\u4fee\u6539 guess \u5c06 String \u8f6c\u5316\u4e3a u32 \u90a3\u90e8\u5206\u4ee3\u7801\u6765\u5b9e\u73b0 \u6587\u4ef6\u540d: src/main.rs use rand :: Rng ; use std :: cmp :: Ordering ; use std :: io ; fn main () { println! ( \"\u731c\u6570\u6e38\u620f\uff01\uff01\" ); let secret_number = rand :: thread_rng (). gen_range ( 1 ..= 100 ); println! ( \"\u751f\u6210\u7684\u5bc6\u7801\u6570\u5b57\u662f: {secret_number}\" ); loop { println! ( \"\u8bf7\u8f93\u5165\u4e00\u4e2a\u503c:\" ); let mut guess = String :: new (); io :: stdin (). read_line ( & mut guess ). expect ( \"\u8bfb\u6570\u5931\u8d25!\" ); let guess : u32 = match guess . trim (). parse () { Ok ( num ) => num , Err ( _ ) => continue , }; // \u5c06 expect \u8c03\u7528\u6362\u6210 match \u8bed\u53e5\uff0c\u4ee5\u4ece\u9047\u5230\u9519\u8bef\u5c31\u5d29\u6e83\u8f6c\u6362\u4e3a\u5904\u7406\u9519\u8bef\u3002 // \u987b\u77e5 parse \u8fd4\u56de\u4e00\u4e2a Result \u7c7b\u578b\uff0c\u800c Result \u662f\u4e00\u4e2a\u62e5\u6709 Ok \u6216 Err \u6210\u5458\u7684\u679a\u4e3e\u3002 // \u8fd9\u91cc\u4f7f\u7528\u7684 match \u8868\u8fbe\u5f0f\uff0c\u548c\u5904\u7406 cmp \u65b9\u6cd5\u8fd4\u56de Ordering \u65f6\u7528\u7684\u4e00\u6837\u3002 // \u5982\u679c parse \u80fd\u591f\u6210\u529f\u7684\u5c06\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u4e00\u4e2a\u6570\u5b57\uff0c\u5b83\u4f1a\u8fd4\u56de\u4e00\u4e2a\u5305\u542b\u7ed3\u679c\u6570\u5b57\u7684 Ok\u3002 // \u8fd9\u4e2a Ok \u503c\u4e0e match \u7b2c\u4e00\u4e2a\u5206\u652f\u7684\u6a21\u5f0f\u76f8\u5339\u914d\uff0c\u8be5\u5206\u652f\u5bf9\u5e94\u7684\u52a8\u4f5c\u8fd4\u56de Ok \u503c\u4e2d\u7684\u6570\u5b57 num\uff0c // \u6700\u540e\u5982\u613f\u53d8\u6210\u65b0\u521b\u5efa\u7684 guess \u53d8\u91cf\u3002 // \u5982\u679c parse \u4e0d\u80fd\u5c06\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u4e00\u4e2a\u6570\u5b57\uff0c\u5b83\u4f1a\u8fd4\u56de\u4e00\u4e2a\u5305\u542b\u66f4\u591a\u9519\u8bef\u4fe1\u606f\u7684 Err\u3002 // Err \u503c\u4e0d\u80fd\u5339\u914d\u7b2c\u4e00\u4e2a match \u5206\u652f\u7684 Ok(num) \u6a21\u5f0f\uff0c\u4f46\u662f\u4f1a\u5339\u914d\u7b2c\u4e8c\u4e2a\u5206\u652f\u7684 Err(_) \u6a21\u5f0f\uff1a // _ \u662f\u4e00\u4e2a\u901a\u914d\u7b26\u503c\uff0c\u672c\u4f8b\u4e2d\u7528\u6765\u5339\u914d\u6240\u6709 Err \u503c\uff0c\u4e0d\u7ba1\u5176\u4e2d\u6709\u4f55\u79cd\u4fe1\u606f\u3002 // \u6240\u4ee5\u7a0b\u5e8f\u4f1a\u6267\u884c\u7b2c\u4e8c\u4e2a\u5206\u652f\u7684\u52a8\u4f5c\uff0ccontinue \u610f\u5473\u7740\u8fdb\u5165 loop \u7684\u4e0b\u4e00\u6b21\u5faa\u73af\uff0c\u8bf7\u6c42\u53e6\u4e00\u4e2a\u731c\u6d4b\u3002 // \u8fd9\u6837\u7a0b\u5e8f\u5c31\u6709\u6548\u7684\u5ffd\u7565\u4e86 parse \u53ef\u80fd\u9047\u5230\u7684\u6240\u6709\u9519\u8bef\uff01 println! ( \"\u4f60\u731c\u6d4b\u7684\u6570\u4e3a: {guess}\" ); match guess . cmp ( & secret_number ) { Ordering :: Less => println! ( \"\u592a\u5c0f\u4e86\uff01\" ), Ordering :: Greater => println! ( \"\u592a\u5927\u4e86\uff01\" ), Ordering :: Equal => { println! ( \"\u731c\u5bf9\u4e86\uff01\" ); break ; } } } } \u73b0\u5728\u4e07\u4e8b\u4ff1\u5907\uff0c\u53ea\u9700\u8fd0\u884c cargo run\uff1a $ cargo run Compiling guessing_game v0.1.0 ( file:///projects/guessing_game ) Finished dev [ unoptimized + debuginfo ] target ( s ) in 4 .45s Running ` target/debug/guessing_game ` \u731c\u6570\u6e38\u620f\uff01\uff01 \u751f\u6210\u7684\u5bc6\u7801\u6570\u5b57\u662f: 66 \u8bf7\u8f93\u5165\u4e00\u4e2a\u503c: 12d \u8bf7\u8f93\u5165\u4e00\u4e2a\u503c: 12 \u4f60\u731c\u6d4b\u7684\u6570\u4e3a: 12 \u592a\u5c0f\u4e86\uff01 \u8bf7\u8f93\u5165\u4e00\u4e2a\u503c: 66 \u4f60\u731c\u6d4b\u7684\u6570\u4e3a: 66 \u731c\u5bf9\u4e86\uff01","title":"\u5904\u7406\u65e0\u6548\u8f93\u5165"},{"location":"guessing-game/#_9","text":"\u592a\u68d2\u4e86\uff01\u518d\u6709\u6700\u540e\u4e00\u4e2a\u5c0f\u7684\u4fee\u6539\uff0c\u5c31\u80fd\u5b8c\u6210\u731c\u731c\u770b\u6e38\u620f\u4e86\uff1a\u8fd8\u8bb0\u5f97\u7a0b\u5e8f\u4f9d\u7136\u4f1a\u6253\u5370\u51fa\u79d8\u5bc6\u6570\u5b57\u3002\u5728\u6d4b\u8bd5\u65f6\u8fd8\u597d\uff0c\u4f46\u6b63\u5f0f\u53d1\u5e03\u65f6\u4f1a\u6bc1\u4e86\u6e38\u620f\u3002\u5220\u6389\u6253\u5370\u79d8\u5bc6\u6570\u5b57\u7684 println!\u3002 \u6700\u7ec8\u4ee3\u7801\uff1a \u6587\u4ef6\u540d: src/main.rs use rand :: Rng ; use std :: cmp :: Ordering ; use std :: io ; fn main () { println! ( \"\u731c\u6570\u6e38\u620f\uff01\uff01\" ); let secret_number = rand :: thread_rng (). gen_range ( 1 ..= 100 ); loop { println! ( \"\u8bf7\u8f93\u5165\u4e00\u4e2a\u503c:\" ); let mut guess = String :: new (); io :: stdin (). read_line ( & mut guess ). expect ( \"\u8bfb\u6570\u5931\u8d25!\" ); let guess : u32 = match guess . trim (). parse () { Ok ( num ) => num , Err ( _ ) => continue , }; println! ( \"\u4f60\u731c\u6d4b\u7684\u6570\u4e3a: {guess}\" ); match guess . cmp ( & secret_number ) { Ordering :: Less => println! ( \"\u592a\u5c0f\u4e86\uff01\" ), Ordering :: Greater => println! ( \"\u592a\u5927\u4e86\uff01\" ), Ordering :: Equal => { println! ( \"\u731c\u5bf9\u4e86\uff01\" ); break ; } } } }","title":"\u6700\u7ec8\u7248\u672c"},{"location":"hello-cargo/","text":"Hello Cargo Cargo \u662f Rust \u7684\u6784\u5efa\u7cfb\u7edf\u548c\u5305\u7ba1\u7406\u5668\u3002 \u5b89\u88c5cargo \u5b98\u65b9\u81ea\u5e26\u7684 \u5b89\u88c5 \u90e8\u5206\u5df2\u7ecf\u5b89\u88c5\u4e86Cargo \u67e5\u770b\u7248\u672c $ cargo --version cargo 1 .66.0 ( d65d197ad 2022 -11-15 ) \u4f7f\u7528cargo\u521b\u5efa\u9879\u76ee cargo new Cargo \u5c06\u4ee3\u7801\u653e\u5728 src \u76ee\u5f55\uff0c\u540c\u65f6\u9879\u76ee\u6839\u76ee\u5f55\u5305\u542b\u4e00\u4e2a Cargo.toml \u914d\u7f6e\u6587\u4ef6\u3002 $ cargo new hello-cargo $ cd hello-cargo $ ls Cargo.toml src Cargo.toml \u914d\u7f6e\u6587\u4ef6\uff0c \u5982\u4e0b: # \u4e00\u4e2a\u7247\u6bb5\uff08section\uff09\u6807\u9898\uff0c\u8868\u660e\u4e0b\u9762\u7684\u8bed\u53e5\u7528\u6765\u914d\u7f6e\u4e00\u4e2a\u5305 [package] name = \"hello-cargo\" # \u9879\u76ee\u7684\u540d\u79f0 version = \"0.1.0\" # \u9879\u76ee\u7684\u7248\u672c edition = \"2021\" # Rust \u7248\u672c # See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html # \u7f57\u5217\u9879\u76ee\u4f9d\u8d56\u7684\u4ee3\u7801\u5305, \u4ee3\u7801\u5305\u88ab\u79f0\u4e3a crates\u3002\u8fd9\u4e2a\u9879\u76ee\u5e76\u4e0d\u9700\u8981\u5176\u4ed6\u7684 crate [dependencies] TOML \u683c\u5f0f\u662f Cargo \u914d\u7f6e\u6587\u4ef6\u7684\u683c\u5f0f\u3002 edition \u7684\u503c\u53c2\u8003 \u9644\u5f55E src \u9879\u76ee\u6e90\u6587\u4ef6\u5b58\u653e\u5728 src \u76ee\u5f55\u4e2d\u3002 \u9879\u76ee\u6839\u76ee\u5f55\u53ea\u5b58\u653e README \u3001 license \u4fe1\u606f\u3001 \u914d\u7f6e\u6587\u4ef6 \u548c \u5176\u4ed6\u8ddf\u4ee3\u7801\u65e0\u5173\u7684\u6587\u4ef6 \u3002 src/main.rs Cargo \u4e3a\u751f\u6210\u7684\u4e00\u4e2a \u201cHello, world!\u201d \u7a0b\u5e8f fn main () { println! ( \"Hello, world!\" ); } \u6784\u5efa\u5e76\u8fd0\u884c Cargo \u9879\u76ee \u901a\u8fc7 Cargo \u6784\u5efa\u548c\u8fd0\u884c \u201cHello, world!\u201d \u7a0b\u5e8f cargo build # \u5728hello-cargo\u76ee\u5f55\u6267\u884c $ cargo build Compiling hello_cargo v0.1.0 ( file:///projects/hello_cargo ) Finished dev [ unoptimized + debuginfo ] target ( s ) in 2 .85 secs $ ls Cargo.lock Cargo.toml src target # \u4f1a\u521b\u5efa\u4e00\u4e2a\u53ef\u6267\u884c\u6587\u4ef6 target/debug/hello-cargo, \u800c\u4e0d\u662f\u653e\u5728\u76ee\u524d\u76ee\u5f55\u4e0b\u3002 # \u7531\u4e8e\u9ed8\u8ba4\u7684\u6784\u5efa\u65b9\u6cd5\u662f\u8c03\u8bd5\u6784\u5efa\uff08debug build\uff09\uff0cCargo \u4f1a\u5c06\u53ef\u6267\u884c\u6587\u4ef6\u653e\u5728\u540d\u4e3a debug \u7684\u76ee\u5f55\u4e2d\u3002 \u8fd0\u884c\u53ef\u6267\u884c\u6587\u4ef6: $ ./target/debug/hello-cargo Hello, world! \u9996\u6b21\u8fd0\u884c cargo build \u65f6\uff0c\u4e5f\u4f1a\u4f7f Cargo \u5728\u9879\u76ee\u6839\u76ee\u5f55\u521b\u5efa\u4e00\u4e2a\u65b0\u6587\u4ef6\uff1a Cargo.lock \u3002\u8fd9\u4e2a\u6587\u4ef6\u8bb0\u5f55\u9879\u76ee\u4f9d\u8d56\u7684\u5b9e\u9645\u7248\u672c\u3002\u8fd9\u4e2a\u9879\u76ee\u5e76\u6ca1\u6709\u4f9d\u8d56\uff0c\u6240\u4ee5\u5176\u5185\u5bb9\u6bd4\u8f83\u5c11\u3002\u81ea\u5df1\u6c38\u8fdc\u4e5f\u4e0d\u9700\u8981\u78b0\u8fd9\u4e2a\u6587\u4ef6\uff0c\u8ba9 Cargo \u5904\u7406\u5b83\u5c31\u884c\u4e86\u3002 cargo run \u53ef\u4ee5\u4f7f\u7528 cargo run \u5728\u4e00\u4e2a\u547d\u4ee4\u4e2d\u540c\u65f6\u7f16\u8bd1\u5e76\u8fd0\u884c\u751f\u6210\u7684\u53ef\u6267\u884c\u6587\u4ef6\uff1a $ cargo run Finished dev [ unoptimized + debuginfo ] target ( s ) in 0 .00s Running ` target/debug/hello-cargo ` Hello, world! Cargo \u53d1\u73b0\u6587\u4ef6\u5e76\u6ca1\u6709\u88ab\u6539\u53d8\uff0c\u6240\u4ee5\u5b83\u5e76\u6ca1\u6709\u91cd\u65b0\u7f16\u8bd1\uff0c\u800c\u662f\u76f4\u63a5\u8fd0\u884c\u4e86\u53ef\u6267\u884c\u6587\u4ef6\u3002 \u5982\u679c\u4fee\u6539\u4e86\u6e90\u6587\u4ef6\u7684\u8bdd\uff0cCargo \u4f1a\u5728\u8fd0\u884c\u4e4b\u524d\u91cd\u65b0\u6784\u5efa\u9879\u76ee\uff0c\u5e76\u4f1a\u51fa\u73b0\u50cf\u8fd9\u6837\u7684\u8f93\u51fa\uff1a $ cargo run Compiling hello-cargo v0.1.0 ( file:///projects/hello_cargo ) Finished dev [ unoptimized + debuginfo ] target ( s ) in 0 .33 secs Running ` target/debug/hello_cargo ` Hello, world! cargo check \u8be5\u547d\u4ee4\u5feb\u901f\u68c0\u67e5\u4ee3\u7801\u786e\u4fdd\u5176\u53ef\u4ee5\u7f16\u8bd1\uff0c\u4f46\u5e76\u4e0d\u4ea7\u751f\u53ef\u6267\u884c\u6587\u4ef6: $ cargo check Checking hello_cargo v0.1.0 ( file:///projects/hello_cargo ) Finished dev [ unoptimized + debuginfo ] target ( s ) in 0 .32 secs \u4e3a\u4ec0\u4e48\u4f60\u4f1a\u4e0d\u9700\u8981\u53ef\u6267\u884c\u6587\u4ef6\u5462\uff1f \u901a\u5e38 cargo check \u8981\u6bd4 cargo build \u5feb\u5f97\u591a\uff0c\u56e0\u4e3a\u5b83\u7701\u7565\u4e86\u751f\u6210\u53ef\u6267\u884c\u6587\u4ef6\u7684\u6b65\u9aa4\u3002 \u5982\u679c\u4f60\u5728\u7f16\u5199\u4ee3\u7801\u65f6\u6301\u7eed\u7684\u8fdb\u884c\u68c0\u67e5\uff0c cargo check \u53ef\u4ee5\u8ba9\u4f60\u5feb\u901f\u4e86\u89e3\u73b0\u5728\u7684\u4ee3\u7801\u80fd\u4e0d\u80fd\u6b63\u5e38\u901a\u8fc7\u7f16\u8bd1\uff01 \u4e3a\u6b64\u5f88\u591a Rustaceans \u7f16\u5199\u4ee3\u7801\u65f6\u5b9a\u671f\u8fd0\u884c cargo check \u786e\u4fdd\u5b83\u4eec\u53ef\u4ee5\u7f16\u8bd1\u3002 \u5f53\u51c6\u5907\u597d\u4f7f\u7528\u53ef\u6267\u884c\u6587\u4ef6\u65f6\u624d\u8fd0\u884c cargo build \u3002 \u5176\u4ed6 git\u4ed3\u5e93 Cargo\u521b\u5efa\u9879\u76ee\u65f6\uff0c\u4f1a\u521d\u59cb\u5316\u4e00\u4e2a git \u4ed3\u5e93\uff0c\u4ee5\u53ca\u4e00\u4e2a .gitignore \u6587\u4ef6\u3002\u5982\u679c\u5728\u4e00\u4e2a\u5df2\u7ecf\u5b58\u5728\u7684 git \u4ed3\u5e93\u4e2d\u8fd0\u884c cargo new \uff0c\u5219\u8fd9\u4e9b git \u76f8\u5173\u6587\u4ef6\u5219\u4e0d\u4f1a\u751f\u6210\uff1b\u53ef\u4ee5\u901a\u8fc7\u8fd0\u884c cargo new --vcs=git \u6765\u8986\u76d6\u8fd9\u4e9b\u884c\u4e3a\u3002 \u53d1\u5e03\uff08release\uff09\u6784\u5efa \u5f53\u9879\u76ee\u6700\u7ec8\u51c6\u5907\u597d\u53d1\u5e03\u65f6\uff0c\u53ef\u4ee5\u4f7f\u7528 cargo build --release \u6765\u4f18\u5316\u7f16\u8bd1\u9879\u76ee\u3002 \u8fd9\u4f1a\u5728 target/release \u800c\u4e0d\u662f target/debug \u4e0b\u751f\u6210\u53ef\u6267\u884c\u6587\u4ef6\u3002 \u8fd9\u4e9b\u4f18\u5316\u53ef\u4ee5\u8ba9 Rust \u4ee3\u7801\u8fd0\u884c\u7684\u66f4\u5feb\uff0c\u4e0d\u8fc7\u542f\u7528\u8fd9\u4e9b\u4f18\u5316\u4e5f\u9700\u8981\u6d88\u8017\u66f4\u957f\u7684\u7f16\u8bd1\u65f6\u95f4\u3002 \u8fd9\u4e5f\u5c31\u662f\u4e3a\u4ec0\u4e48\u4f1a\u6709\u4e24\u79cd\u4e0d\u540c\u7684\u914d\u7f6e\uff1a \u4e00\u79cd\u662f\u4e3a\u4e86\u5f00\u53d1\uff0c\u4f60\u9700\u8981\u7ecf\u5e38\u5feb\u901f\u91cd\u65b0\u6784\u5efa\uff1b \u53e6\u4e00\u79cd\u662f\u4e3a\u7528\u6237\u6784\u5efa\u6700\u7ec8\u7a0b\u5e8f\uff0c\u5b83\u4eec\u4e0d\u4f1a\u7ecf\u5e38\u91cd\u65b0\u6784\u5efa\uff0c\u5e76\u4e14\u5e0c\u671b\u7a0b\u5e8f\u8fd0\u884c\u5f97\u8d8a\u5feb\u8d8a\u597d\u3002 \u5982\u679c\u4f60\u5728\u6d4b\u8bd5\u4ee3\u7801\u7684\u8fd0\u884c\u65f6\u95f4\uff0c\u8bf7\u786e\u4fdd\u8fd0\u884c cargo build --release \u5e76\u4f7f\u7528 target/release \u4e0b\u7684\u53ef\u6267\u884c\u6587\u4ef6\u8fdb\u884c\u6d4b\u8bd5\u3002 \u628a Cargo \u5f53\u4f5c\u4e60\u60ef \u5bf9\u4e8e\u7b80\u5355\u9879\u76ee\uff0c Cargo \u5e76\u4e0d\u6bd4 rustc \u63d0\u4f9b\u4e86\u66f4\u591a\u7684\u4f18\u52bf\uff0c\u4e0d\u8fc7\u968f\u7740\u5f00\u53d1\u7684\u6df1\u5165\uff0c\u7ec8\u5c06\u8bc1\u660e\u5176\u4ef7\u503c\u3002 \u4e00\u65e6\u7a0b\u5e8f\u58ee\u5927\u5230\u7531\u591a\u4e2a\u6587\u4ef6\u7ec4\u6210\uff0c\u4ea6\u6216\u8005\u662f\u9700\u8981\u5176\u4ed6\u7684\u4f9d\u8d56\uff0c\u8ba9 Cargo \u534f\u8c03\u6784\u5efa\u8fc7\u7a0b\u5c31\u4f1a\u7b80\u5355\u5f97\u591a\u3002 \u5373\u4fbf hello_cargo \u9879\u76ee\u5341\u5206\u7b80\u5355\uff0c\u5b83\u73b0\u5728\u4e5f\u4f7f\u7528\u4e86\u5f88\u591a\u5728\u4f60\u4e4b\u540e\u7684 Rust \u751f\u6daf\u5c06\u4f1a\u7528\u5230\u7684\u5b9e\u7528\u5de5\u5177\u3002 \u5176\u5b9e\uff0c\u8981\u5728\u4efb\u4f55\u5df2\u5b58\u5728\u7684\u9879\u76ee\u4e0a\u5de5\u4f5c\u65f6\uff0c\u53ef\u4ee5\u4f7f\u7528\u5982\u4e0b\u547d\u4ee4\u901a\u8fc7 Git \u68c0\u51fa\u4ee3\u7801\uff0c\u79fb\u52a8\u5230\u8be5\u9879\u76ee\u76ee\u5f55\u5e76\u6784\u5efa\uff1a git clone example.org/someproject cd someproject cargo build \u5173\u4e8e\u66f4\u591a Cargo \u7684\u4fe1\u606f\uff0c\u8bf7\u67e5\u9605 \u5176\u6587\u6863 \u3002","title":"Hello Cargo"},{"location":"hello-cargo/#hello-cargo","text":"Cargo \u662f Rust \u7684\u6784\u5efa\u7cfb\u7edf\u548c\u5305\u7ba1\u7406\u5668\u3002","title":"Hello Cargo"},{"location":"hello-cargo/#cargo","text":"\u5b98\u65b9\u81ea\u5e26\u7684 \u5b89\u88c5 \u90e8\u5206\u5df2\u7ecf\u5b89\u88c5\u4e86Cargo","title":"\u5b89\u88c5cargo"},{"location":"hello-cargo/#_1","text":"$ cargo --version cargo 1 .66.0 ( d65d197ad 2022 -11-15 )","title":"\u67e5\u770b\u7248\u672c"},{"location":"hello-cargo/#cargo_1","text":"","title":"\u4f7f\u7528cargo\u521b\u5efa\u9879\u76ee"},{"location":"hello-cargo/#cargo-new","text":"Cargo \u5c06\u4ee3\u7801\u653e\u5728 src \u76ee\u5f55\uff0c\u540c\u65f6\u9879\u76ee\u6839\u76ee\u5f55\u5305\u542b\u4e00\u4e2a Cargo.toml \u914d\u7f6e\u6587\u4ef6\u3002 $ cargo new hello-cargo $ cd hello-cargo $ ls Cargo.toml src","title":"cargo new"},{"location":"hello-cargo/#cargotoml","text":"\u914d\u7f6e\u6587\u4ef6\uff0c \u5982\u4e0b: # \u4e00\u4e2a\u7247\u6bb5\uff08section\uff09\u6807\u9898\uff0c\u8868\u660e\u4e0b\u9762\u7684\u8bed\u53e5\u7528\u6765\u914d\u7f6e\u4e00\u4e2a\u5305 [package] name = \"hello-cargo\" # \u9879\u76ee\u7684\u540d\u79f0 version = \"0.1.0\" # \u9879\u76ee\u7684\u7248\u672c edition = \"2021\" # Rust \u7248\u672c # See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html # \u7f57\u5217\u9879\u76ee\u4f9d\u8d56\u7684\u4ee3\u7801\u5305, \u4ee3\u7801\u5305\u88ab\u79f0\u4e3a crates\u3002\u8fd9\u4e2a\u9879\u76ee\u5e76\u4e0d\u9700\u8981\u5176\u4ed6\u7684 crate [dependencies] TOML \u683c\u5f0f\u662f Cargo \u914d\u7f6e\u6587\u4ef6\u7684\u683c\u5f0f\u3002 edition \u7684\u503c\u53c2\u8003 \u9644\u5f55E","title":"Cargo.toml"},{"location":"hello-cargo/#src","text":"\u9879\u76ee\u6e90\u6587\u4ef6\u5b58\u653e\u5728 src \u76ee\u5f55\u4e2d\u3002 \u9879\u76ee\u6839\u76ee\u5f55\u53ea\u5b58\u653e README \u3001 license \u4fe1\u606f\u3001 \u914d\u7f6e\u6587\u4ef6 \u548c \u5176\u4ed6\u8ddf\u4ee3\u7801\u65e0\u5173\u7684\u6587\u4ef6 \u3002","title":"src"},{"location":"hello-cargo/#srcmainrs","text":"Cargo \u4e3a\u751f\u6210\u7684\u4e00\u4e2a \u201cHello, world!\u201d \u7a0b\u5e8f fn main () { println! ( \"Hello, world!\" ); }","title":"src/main.rs"},{"location":"hello-cargo/#cargo_2","text":"\u901a\u8fc7 Cargo \u6784\u5efa\u548c\u8fd0\u884c \u201cHello, world!\u201d \u7a0b\u5e8f","title":"\u6784\u5efa\u5e76\u8fd0\u884c Cargo \u9879\u76ee"},{"location":"hello-cargo/#cargo-build","text":"# \u5728hello-cargo\u76ee\u5f55\u6267\u884c $ cargo build Compiling hello_cargo v0.1.0 ( file:///projects/hello_cargo ) Finished dev [ unoptimized + debuginfo ] target ( s ) in 2 .85 secs $ ls Cargo.lock Cargo.toml src target # \u4f1a\u521b\u5efa\u4e00\u4e2a\u53ef\u6267\u884c\u6587\u4ef6 target/debug/hello-cargo, \u800c\u4e0d\u662f\u653e\u5728\u76ee\u524d\u76ee\u5f55\u4e0b\u3002 # \u7531\u4e8e\u9ed8\u8ba4\u7684\u6784\u5efa\u65b9\u6cd5\u662f\u8c03\u8bd5\u6784\u5efa\uff08debug build\uff09\uff0cCargo \u4f1a\u5c06\u53ef\u6267\u884c\u6587\u4ef6\u653e\u5728\u540d\u4e3a debug \u7684\u76ee\u5f55\u4e2d\u3002 \u8fd0\u884c\u53ef\u6267\u884c\u6587\u4ef6: $ ./target/debug/hello-cargo Hello, world! \u9996\u6b21\u8fd0\u884c cargo build \u65f6\uff0c\u4e5f\u4f1a\u4f7f Cargo \u5728\u9879\u76ee\u6839\u76ee\u5f55\u521b\u5efa\u4e00\u4e2a\u65b0\u6587\u4ef6\uff1a Cargo.lock \u3002\u8fd9\u4e2a\u6587\u4ef6\u8bb0\u5f55\u9879\u76ee\u4f9d\u8d56\u7684\u5b9e\u9645\u7248\u672c\u3002\u8fd9\u4e2a\u9879\u76ee\u5e76\u6ca1\u6709\u4f9d\u8d56\uff0c\u6240\u4ee5\u5176\u5185\u5bb9\u6bd4\u8f83\u5c11\u3002\u81ea\u5df1\u6c38\u8fdc\u4e5f\u4e0d\u9700\u8981\u78b0\u8fd9\u4e2a\u6587\u4ef6\uff0c\u8ba9 Cargo \u5904\u7406\u5b83\u5c31\u884c\u4e86\u3002","title":"cargo build"},{"location":"hello-cargo/#cargo-run","text":"\u53ef\u4ee5\u4f7f\u7528 cargo run \u5728\u4e00\u4e2a\u547d\u4ee4\u4e2d\u540c\u65f6\u7f16\u8bd1\u5e76\u8fd0\u884c\u751f\u6210\u7684\u53ef\u6267\u884c\u6587\u4ef6\uff1a $ cargo run Finished dev [ unoptimized + debuginfo ] target ( s ) in 0 .00s Running ` target/debug/hello-cargo ` Hello, world! Cargo \u53d1\u73b0\u6587\u4ef6\u5e76\u6ca1\u6709\u88ab\u6539\u53d8\uff0c\u6240\u4ee5\u5b83\u5e76\u6ca1\u6709\u91cd\u65b0\u7f16\u8bd1\uff0c\u800c\u662f\u76f4\u63a5\u8fd0\u884c\u4e86\u53ef\u6267\u884c\u6587\u4ef6\u3002 \u5982\u679c\u4fee\u6539\u4e86\u6e90\u6587\u4ef6\u7684\u8bdd\uff0cCargo \u4f1a\u5728\u8fd0\u884c\u4e4b\u524d\u91cd\u65b0\u6784\u5efa\u9879\u76ee\uff0c\u5e76\u4f1a\u51fa\u73b0\u50cf\u8fd9\u6837\u7684\u8f93\u51fa\uff1a $ cargo run Compiling hello-cargo v0.1.0 ( file:///projects/hello_cargo ) Finished dev [ unoptimized + debuginfo ] target ( s ) in 0 .33 secs Running ` target/debug/hello_cargo ` Hello, world!","title":"cargo run"},{"location":"hello-cargo/#cargo-check","text":"\u8be5\u547d\u4ee4\u5feb\u901f\u68c0\u67e5\u4ee3\u7801\u786e\u4fdd\u5176\u53ef\u4ee5\u7f16\u8bd1\uff0c\u4f46\u5e76\u4e0d\u4ea7\u751f\u53ef\u6267\u884c\u6587\u4ef6: $ cargo check Checking hello_cargo v0.1.0 ( file:///projects/hello_cargo ) Finished dev [ unoptimized + debuginfo ] target ( s ) in 0 .32 secs \u4e3a\u4ec0\u4e48\u4f60\u4f1a\u4e0d\u9700\u8981\u53ef\u6267\u884c\u6587\u4ef6\u5462\uff1f \u901a\u5e38 cargo check \u8981\u6bd4 cargo build \u5feb\u5f97\u591a\uff0c\u56e0\u4e3a\u5b83\u7701\u7565\u4e86\u751f\u6210\u53ef\u6267\u884c\u6587\u4ef6\u7684\u6b65\u9aa4\u3002 \u5982\u679c\u4f60\u5728\u7f16\u5199\u4ee3\u7801\u65f6\u6301\u7eed\u7684\u8fdb\u884c\u68c0\u67e5\uff0c cargo check \u53ef\u4ee5\u8ba9\u4f60\u5feb\u901f\u4e86\u89e3\u73b0\u5728\u7684\u4ee3\u7801\u80fd\u4e0d\u80fd\u6b63\u5e38\u901a\u8fc7\u7f16\u8bd1\uff01 \u4e3a\u6b64\u5f88\u591a Rustaceans \u7f16\u5199\u4ee3\u7801\u65f6\u5b9a\u671f\u8fd0\u884c cargo check \u786e\u4fdd\u5b83\u4eec\u53ef\u4ee5\u7f16\u8bd1\u3002 \u5f53\u51c6\u5907\u597d\u4f7f\u7528\u53ef\u6267\u884c\u6587\u4ef6\u65f6\u624d\u8fd0\u884c cargo build \u3002","title":"cargo check"},{"location":"hello-cargo/#_2","text":"","title":"\u5176\u4ed6"},{"location":"hello-cargo/#git","text":"Cargo\u521b\u5efa\u9879\u76ee\u65f6\uff0c\u4f1a\u521d\u59cb\u5316\u4e00\u4e2a git \u4ed3\u5e93\uff0c\u4ee5\u53ca\u4e00\u4e2a .gitignore \u6587\u4ef6\u3002\u5982\u679c\u5728\u4e00\u4e2a\u5df2\u7ecf\u5b58\u5728\u7684 git \u4ed3\u5e93\u4e2d\u8fd0\u884c cargo new \uff0c\u5219\u8fd9\u4e9b git \u76f8\u5173\u6587\u4ef6\u5219\u4e0d\u4f1a\u751f\u6210\uff1b\u53ef\u4ee5\u901a\u8fc7\u8fd0\u884c cargo new --vcs=git \u6765\u8986\u76d6\u8fd9\u4e9b\u884c\u4e3a\u3002","title":"git\u4ed3\u5e93"},{"location":"hello-cargo/#release","text":"\u5f53\u9879\u76ee\u6700\u7ec8\u51c6\u5907\u597d\u53d1\u5e03\u65f6\uff0c\u53ef\u4ee5\u4f7f\u7528 cargo build --release \u6765\u4f18\u5316\u7f16\u8bd1\u9879\u76ee\u3002 \u8fd9\u4f1a\u5728 target/release \u800c\u4e0d\u662f target/debug \u4e0b\u751f\u6210\u53ef\u6267\u884c\u6587\u4ef6\u3002 \u8fd9\u4e9b\u4f18\u5316\u53ef\u4ee5\u8ba9 Rust \u4ee3\u7801\u8fd0\u884c\u7684\u66f4\u5feb\uff0c\u4e0d\u8fc7\u542f\u7528\u8fd9\u4e9b\u4f18\u5316\u4e5f\u9700\u8981\u6d88\u8017\u66f4\u957f\u7684\u7f16\u8bd1\u65f6\u95f4\u3002 \u8fd9\u4e5f\u5c31\u662f\u4e3a\u4ec0\u4e48\u4f1a\u6709\u4e24\u79cd\u4e0d\u540c\u7684\u914d\u7f6e\uff1a \u4e00\u79cd\u662f\u4e3a\u4e86\u5f00\u53d1\uff0c\u4f60\u9700\u8981\u7ecf\u5e38\u5feb\u901f\u91cd\u65b0\u6784\u5efa\uff1b \u53e6\u4e00\u79cd\u662f\u4e3a\u7528\u6237\u6784\u5efa\u6700\u7ec8\u7a0b\u5e8f\uff0c\u5b83\u4eec\u4e0d\u4f1a\u7ecf\u5e38\u91cd\u65b0\u6784\u5efa\uff0c\u5e76\u4e14\u5e0c\u671b\u7a0b\u5e8f\u8fd0\u884c\u5f97\u8d8a\u5feb\u8d8a\u597d\u3002 \u5982\u679c\u4f60\u5728\u6d4b\u8bd5\u4ee3\u7801\u7684\u8fd0\u884c\u65f6\u95f4\uff0c\u8bf7\u786e\u4fdd\u8fd0\u884c cargo build --release \u5e76\u4f7f\u7528 target/release \u4e0b\u7684\u53ef\u6267\u884c\u6587\u4ef6\u8fdb\u884c\u6d4b\u8bd5\u3002","title":"\u53d1\u5e03\uff08release\uff09\u6784\u5efa"},{"location":"hello-cargo/#cargo_3","text":"\u5bf9\u4e8e\u7b80\u5355\u9879\u76ee\uff0c Cargo \u5e76\u4e0d\u6bd4 rustc \u63d0\u4f9b\u4e86\u66f4\u591a\u7684\u4f18\u52bf\uff0c\u4e0d\u8fc7\u968f\u7740\u5f00\u53d1\u7684\u6df1\u5165\uff0c\u7ec8\u5c06\u8bc1\u660e\u5176\u4ef7\u503c\u3002 \u4e00\u65e6\u7a0b\u5e8f\u58ee\u5927\u5230\u7531\u591a\u4e2a\u6587\u4ef6\u7ec4\u6210\uff0c\u4ea6\u6216\u8005\u662f\u9700\u8981\u5176\u4ed6\u7684\u4f9d\u8d56\uff0c\u8ba9 Cargo \u534f\u8c03\u6784\u5efa\u8fc7\u7a0b\u5c31\u4f1a\u7b80\u5355\u5f97\u591a\u3002 \u5373\u4fbf hello_cargo \u9879\u76ee\u5341\u5206\u7b80\u5355\uff0c\u5b83\u73b0\u5728\u4e5f\u4f7f\u7528\u4e86\u5f88\u591a\u5728\u4f60\u4e4b\u540e\u7684 Rust \u751f\u6daf\u5c06\u4f1a\u7528\u5230\u7684\u5b9e\u7528\u5de5\u5177\u3002 \u5176\u5b9e\uff0c\u8981\u5728\u4efb\u4f55\u5df2\u5b58\u5728\u7684\u9879\u76ee\u4e0a\u5de5\u4f5c\u65f6\uff0c\u53ef\u4ee5\u4f7f\u7528\u5982\u4e0b\u547d\u4ee4\u901a\u8fc7 Git \u68c0\u51fa\u4ee3\u7801\uff0c\u79fb\u52a8\u5230\u8be5\u9879\u76ee\u76ee\u5f55\u5e76\u6784\u5efa\uff1a git clone example.org/someproject cd someproject cargo build \u5173\u4e8e\u66f4\u591a Cargo \u7684\u4fe1\u606f\uff0c\u8bf7\u67e5\u9605 \u5176\u6587\u6863 \u3002","title":"\u628a Cargo \u5f53\u4f5c\u4e60\u60ef"},{"location":"hello-world/","text":"hello world \u521b\u5efars\u6587\u4ef6 \u521b\u5efa helloworld.rs \u6587\u4ef6 fn main (){ println! ( \"Hello, world!\" ); } \u7f16\u8bd1 # \u7f16\u8bd1\u6e90\u6587\u4ef6 rustc helloworld.rs # \u751f\u6210 helloworld \u53ef\u6267\u884c\u6587\u4ef6. \u6267\u884c # \u6267\u884c\u53ef\u6267\u884c\u6587\u4ef6 ./helloworld # \u8f93\u51fa: Hello, world! \u91ca\u4e49 main \u51fd\u6570: \u5728\u53ef\u6267\u884c\u7684 Rust \u7a0b\u5e8f\u4e2d\uff0c\u5b83\u603b\u662f\u6700\u5148\u8fd0\u884c\u7684\u4ee3\u7801\u3002 \u53c2\u8003: \u5206\u6790\u8fd9\u4e2a Rust \u7a0b\u5e8f println! \u51fd\u6570: \u4e00\u4e2a Rust \u5b8f\uff08macro\uff09\u3002 \"Hello, world!\": \u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\u3002\u6211\u4eec\u628a\u8fd9\u4e2a\u5b57\u7b26\u4e32\u4f5c\u4e3a\u4e00\u4e2a\u53c2\u6570\u4f20\u9012\u7ed9 println!\uff0c\u5b57\u7b26\u4e32\u5c06\u88ab\u6253\u5370\u5230\u5c4f\u5e55\u4e0a\u3002 \u8be5\u884c\u4ee5\u5206\u53f7\u7ed3\u5c3e\uff08;\uff09: \u8fd9\u4ee3\u8868\u4e00\u4e2a\u8868\u8fbe\u5f0f\u7684\u7ed3\u675f\u548c\u4e0b\u4e00\u4e2a\u8868\u8fbe\u5f0f\u7684\u5f00\u59cb\u3002\u5927\u90e8\u5206 Rust \u4ee3\u7801\u884c\u4ee5\u5206\u53f7\u7ed3\u5c3e\u3002 \u7f16\u8bd1\u548c\u8fd0\u884c\u662f\u5f7c\u6b64\u72ec\u7acb\u7684\u6b65\u9aa4 # \u8fd0\u884c Rust \u7a0b\u5e8f\u4e4b\u524d\uff0c\u5fc5\u987b\u5148\u4f7f\u7528 Rust \u7f16\u8bd1\u5668\u7f16\u8bd1, $ rustc main.rs # \u8f93\u51fa\u4e00\u4e2a\u4e8c\u8fdb\u5236\u7684\u53ef\u6267\u884c\u6587\u4ef6, \u5728 shell \u4e2d\u8f93\u5165 ls \u547d\u4ee4\u53ef\u4ee5\u770b\u89c1\u8fd9\u4e2a\u53ef\u6267\u884c\u6587\u4ef6 $ ls helloword helloword.rs # \u4ece\u8fd9\u91cc\u5f00\u59cb\u8fd0\u884c helloword \u6587\u4ef6 $ ./helloword Hello, world! Rust \u662f\u4e00\u79cd \u9884\u7f16\u8bd1\u9759\u6001\u7c7b\u578b\uff08ahead-of-time compiled\uff09\u8bed\u8a00\uff0c\u8fd9\u610f\u5473\u7740\u4f60\u53ef\u4ee5\u7f16\u8bd1\u7a0b\u5e8f\uff0c\u5e76\u5c06\u53ef\u6267\u884c\u6587\u4ef6\u9001\u7ed9\u5176\u4ed6\u4eba\uff0c\u4ed6\u4eec\u751a\u81f3\u4e0d\u9700\u8981\u5b89\u88c5 Rust \u5c31\u53ef\u4ee5\u8fd0\u884c\u3002","title":"hello world"},{"location":"hello-world/#hello-world","text":"","title":"hello world"},{"location":"hello-world/#rs","text":"\u521b\u5efa helloworld.rs \u6587\u4ef6 fn main (){ println! ( \"Hello, world!\" ); }","title":"\u521b\u5efars\u6587\u4ef6"},{"location":"hello-world/#_1","text":"# \u7f16\u8bd1\u6e90\u6587\u4ef6 rustc helloworld.rs # \u751f\u6210 helloworld \u53ef\u6267\u884c\u6587\u4ef6.","title":"\u7f16\u8bd1"},{"location":"hello-world/#_2","text":"# \u6267\u884c\u53ef\u6267\u884c\u6587\u4ef6 ./helloworld # \u8f93\u51fa: Hello, world!","title":"\u6267\u884c"},{"location":"hello-world/#_3","text":"main \u51fd\u6570: \u5728\u53ef\u6267\u884c\u7684 Rust \u7a0b\u5e8f\u4e2d\uff0c\u5b83\u603b\u662f\u6700\u5148\u8fd0\u884c\u7684\u4ee3\u7801\u3002 \u53c2\u8003: \u5206\u6790\u8fd9\u4e2a Rust \u7a0b\u5e8f println! \u51fd\u6570: \u4e00\u4e2a Rust \u5b8f\uff08macro\uff09\u3002 \"Hello, world!\": \u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\u3002\u6211\u4eec\u628a\u8fd9\u4e2a\u5b57\u7b26\u4e32\u4f5c\u4e3a\u4e00\u4e2a\u53c2\u6570\u4f20\u9012\u7ed9 println!\uff0c\u5b57\u7b26\u4e32\u5c06\u88ab\u6253\u5370\u5230\u5c4f\u5e55\u4e0a\u3002 \u8be5\u884c\u4ee5\u5206\u53f7\u7ed3\u5c3e\uff08;\uff09: \u8fd9\u4ee3\u8868\u4e00\u4e2a\u8868\u8fbe\u5f0f\u7684\u7ed3\u675f\u548c\u4e0b\u4e00\u4e2a\u8868\u8fbe\u5f0f\u7684\u5f00\u59cb\u3002\u5927\u90e8\u5206 Rust \u4ee3\u7801\u884c\u4ee5\u5206\u53f7\u7ed3\u5c3e\u3002","title":"\u91ca\u4e49"},{"location":"hello-world/#_4","text":"# \u8fd0\u884c Rust \u7a0b\u5e8f\u4e4b\u524d\uff0c\u5fc5\u987b\u5148\u4f7f\u7528 Rust \u7f16\u8bd1\u5668\u7f16\u8bd1, $ rustc main.rs # \u8f93\u51fa\u4e00\u4e2a\u4e8c\u8fdb\u5236\u7684\u53ef\u6267\u884c\u6587\u4ef6, \u5728 shell \u4e2d\u8f93\u5165 ls \u547d\u4ee4\u53ef\u4ee5\u770b\u89c1\u8fd9\u4e2a\u53ef\u6267\u884c\u6587\u4ef6 $ ls helloword helloword.rs # \u4ece\u8fd9\u91cc\u5f00\u59cb\u8fd0\u884c helloword \u6587\u4ef6 $ ./helloword Hello, world! Rust \u662f\u4e00\u79cd \u9884\u7f16\u8bd1\u9759\u6001\u7c7b\u578b\uff08ahead-of-time compiled\uff09\u8bed\u8a00\uff0c\u8fd9\u610f\u5473\u7740\u4f60\u53ef\u4ee5\u7f16\u8bd1\u7a0b\u5e8f\uff0c\u5e76\u5c06\u53ef\u6267\u884c\u6587\u4ef6\u9001\u7ed9\u5176\u4ed6\u4eba\uff0c\u4ed6\u4eec\u751a\u81f3\u4e0d\u9700\u8981\u5b89\u88c5 Rust \u5c31\u53ef\u4ee5\u8fd0\u884c\u3002","title":"\u7f16\u8bd1\u548c\u8fd0\u884c\u662f\u5f7c\u6b64\u72ec\u7acb\u7684\u6b65\u9aa4"},{"location":"ownership/","text":"\u6240\u6709\u6743 Rust \u7684\u6838\u5fc3\u529f\u80fd\uff08\u4e4b\u4e00\uff09\u662f \u6240\u6709\u6743\uff08ownership\uff09\u3002 \u6240\u6709\u7a0b\u5e8f\u90fd\u5fc5\u987b\u7ba1\u7406\u5176\u8fd0\u884c\u65f6\u4f7f\u7528\u8ba1\u7b97\u673a\u5185\u5b58\u7684\u65b9\u5f0f\u3002 \u4e00\u4e9b\u8bed\u8a00\u4e2d\u5177\u6709\u5783\u573e\u56de\u6536\u673a\u5236\uff0c\u5728\u7a0b\u5e8f\u8fd0\u884c\u65f6\u6709\u89c4\u5f8b\u5730\u5bfb\u627e\u4e0d\u518d\u4f7f\u7528\u7684\u5185\u5b58\uff1b \u5728\u53e6\u4e00\u4e9b\u8bed\u8a00\u4e2d\uff0c\u7a0b\u5e8f\u5458\u5fc5\u987b\u4eb2\u81ea\u5206\u914d\u548c\u91ca\u653e\u5185\u5b58\u3002 Rust \u5219\u9009\u62e9\u4e86\u7b2c\u4e09\u79cd\u65b9\u5f0f\uff1a \u901a\u8fc7\u6240\u6709\u6743\u7cfb\u7edf\u7ba1\u7406\u5185\u5b58\uff0c\u7f16\u8bd1\u5668\u5728\u7f16\u8bd1\u65f6\u4f1a\u6839\u636e\u4e00\u7cfb\u5217\u7684\u89c4\u5219\u8fdb\u884c\u68c0\u67e5\u3002\u5982\u679c\u8fdd\u53cd\u4e86\u4efb\u4f55\u8fd9\u4e9b\u89c4\u5219\uff0c\u7a0b\u5e8f\u90fd\u4e0d\u80fd\u7f16\u8bd1\u3002\u5728\u8fd0\u884c\u65f6\uff0c\u6240\u6709\u6743\u7cfb\u7edf\u7684\u4efb\u4f55\u529f\u80fd\u90fd\u4e0d\u4f1a\u51cf\u6162\u7a0b\u5e8f\u3002 \u7b80\u4ecb \u6808\uff08Stack\uff09\u4e0e\u5806\uff08Heap\uff09 \u5728\u5f88\u591a\u8bed\u8a00\u4e2d\uff0c\u4f60\u5e76\u4e0d\u9700\u8981\u7ecf\u5e38\u8003\u8651\u5230\u6808\u4e0e\u5806\u3002\u4e0d\u8fc7\u5728\u50cf Rust \u8fd9\u6837\u7684\u7cfb\u7edf\u7f16\u7a0b\u8bed\u8a00\u4e2d\uff0c\u503c\u662f\u4f4d\u4e8e\u6808\u4e0a\u8fd8\u662f\u5806\u4e0a\u5728\u66f4\u5927\u7a0b\u5ea6\u4e0a\u5f71\u54cd\u4e86\u8bed\u8a00\u7684\u884c\u4e3a\u4ee5\u53ca\u4e3a\u4f55\u5fc5\u987b\u505a\u51fa\u8fd9\u6837\u7684\u6289\u62e9\u3002 \u6808\u548c\u5806\u90fd\u662f\u4ee3\u7801\u5728\u8fd0\u884c\u65f6\u53ef\u4f9b\u4f7f\u7528\u7684\u5185\u5b58\uff0c\u4f46\u662f\u5b83\u4eec\u7684\u7ed3\u6784\u4e0d\u540c\u3002 \u6808\u4ee5\u653e\u5165\u503c\u7684\u987a\u5e8f\u5b58\u50a8\u503c\u5e76\u4ee5\u76f8\u53cd\u987a\u5e8f\u53d6\u51fa\u503c \u3002\u8fd9\u4e5f\u88ab\u79f0\u4f5c \u540e\u8fdb\u5148\u51fa \uff08last in, first out\uff09\u3002\u60f3\u8c61\u4e00\u4e0b\u4e00\u53e0\u76d8\u5b50\uff1a\u5f53\u589e\u52a0\u66f4\u591a\u76d8\u5b50\u65f6\uff0c\u628a\u5b83\u4eec\u653e\u5728\u76d8\u5b50\u5806\u7684\u9876\u90e8\uff0c\u5f53\u9700\u8981\u76d8\u5b50\u65f6\uff0c\u4e5f\u4ece\u9876\u90e8\u62ff\u8d70\u3002\u4e0d\u80fd\u4ece\u4e2d\u95f4\u4e5f\u4e0d\u80fd\u4ece\u5e95\u90e8\u589e\u52a0\u6216\u62ff\u8d70\u76d8\u5b50\uff01\u589e\u52a0\u6570\u636e\u53eb\u505a \u8fdb\u6808 \uff08pushing onto the stack\uff09\uff0c\u800c\u79fb\u51fa\u6570\u636e\u53eb\u505a \u51fa\u6808 \uff08popping off the stack\uff09\u3002 \u6808\u4e2d\u7684\u6240\u6709\u6570\u636e\u90fd\u5fc5\u987b\u5360\u7528\u5df2\u77e5\u4e14\u56fa\u5b9a\u7684\u5927\u5c0f \u3002 \u5728\u7f16\u8bd1\u65f6\u5927\u5c0f\u672a\u77e5\u6216\u5927\u5c0f\u53ef\u80fd\u53d8\u5316\u7684\u6570\u636e\uff0c\u8981\u6539\u4e3a\u5b58\u50a8\u5728\u5806\u4e0a \u3002 \u5806\u662f\u7f3a\u4e4f\u7ec4\u7ec7\u7684\uff1a\u5f53\u5411\u5806\u653e\u5165\u6570\u636e\u65f6\uff0c\u4f60\u8981\u8bf7\u6c42\u4e00\u5b9a\u5927\u5c0f\u7684\u7a7a\u95f4\u3002 \u5185\u5b58\u5206\u914d\u5668 \uff08memory allocator\uff09\u5728\u5806\u7684\u67d0\u5904\u627e\u5230\u4e00\u5757\u8db3\u591f\u5927\u7684\u7a7a\u4f4d\uff0c\u628a\u5b83\u6807\u8bb0\u4e3a\u5df2\u4f7f\u7528\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a\u8868\u793a\u8be5\u4f4d\u7f6e\u5730\u5740\u7684 \u6307\u9488 \uff08pointer\uff09\u3002\u8fd9\u4e2a\u8fc7\u7a0b\u79f0\u4f5c \u5728\u5806\u4e0a\u5206\u914d\u5185\u5b58 \uff08allocating on the heap\uff09\uff0c\u6709\u65f6\u7b80\u79f0\u4e3a \u201c \u5206\u914d \u201d\uff08allocating\uff09\u3002\uff08\u5c06\u6570\u636e\u63a8\u5165\u6808\u4e2d\u5e76\u4e0d\u88ab\u8ba4\u4e3a\u662f\u5206\u914d\uff09\u3002\u56e0\u4e3a\u6307\u5411\u653e\u5165\u5806\u4e2d\u6570\u636e\u7684\u6307\u9488\u662f\u5df2\u77e5\u7684\u5e76\u4e14\u5927\u5c0f\u662f\u56fa\u5b9a\u7684\uff0c\u4f60\u53ef\u4ee5\u5c06\u8be5\u6307\u9488\u5b58\u50a8\u5728\u6808\u4e0a\uff0c\u4e0d\u8fc7\u5f53\u9700\u8981\u5b9e\u9645\u6570\u636e\u65f6\uff0c\u5fc5\u987b\u8bbf\u95ee\u6307\u9488\u3002\u60f3\u8c61\u4e00\u4e0b\u53bb\u9910\u9986\u5c31\u5ea7\u5403\u996d\u3002\u5f53\u8fdb\u5165\u65f6\uff0c\u4f60\u8bf4\u660e\u6709\u51e0\u4e2a\u4eba\uff0c\u9910\u9986\u5458\u5de5\u4f1a\u627e\u5230\u4e00\u4e2a\u591f\u5927\u7684\u7a7a\u684c\u5b50\u5e76\u9886\u4f60\u4eec\u8fc7\u53bb\u3002\u5982\u679c\u6709\u4eba\u6765\u8fdf\u4e86\uff0c\u4ed6\u4eec\u4e5f\u53ef\u4ee5\u901a\u8fc7\u8be2\u95ee\u6765\u627e\u5230\u4f60\u4eec\u5750\u5728\u54ea\u3002 \u5165\u6808\u6bd4\u5728\u5806\u4e0a\u5206\u914d\u5185\u5b58\u8981\u5feb \uff0c\u56e0\u4e3a\uff08\u5165\u6808\u65f6\uff09\u5206\u914d\u5668\u65e0\u9700\u4e3a\u5b58\u50a8\u65b0\u6570\u636e\u53bb\u641c\u7d22\u5185\u5b58\u7a7a\u95f4\uff1b\u5176\u4f4d\u7f6e\u603b\u662f\u5728\u6808\u9876\u3002\u76f8\u6bd4\u4e4b\u4e0b\uff0c \u5728\u5806\u4e0a\u5206\u914d\u5185\u5b58\u5219\u9700\u8981\u66f4\u591a\u7684\u5de5\u4f5c\uff0c\u8fd9\u662f\u56e0\u4e3a\u5206\u914d\u5668\u5fc5\u987b\u9996\u5148\u627e\u5230\u4e00\u5757\u8db3\u591f\u5b58\u653e\u6570\u636e\u7684\u5185\u5b58\u7a7a\u95f4\uff0c\u5e76\u63a5\u7740\u505a\u4e00\u4e9b\u8bb0\u5f55\u4e3a\u4e0b\u4e00\u6b21\u5206\u914d\u505a\u51c6\u5907\u3002 \u8bbf\u95ee\u5806\u4e0a\u7684\u6570\u636e\u6bd4\u8bbf\u95ee\u6808\u4e0a\u7684\u6570\u636e\u6162\uff0c\u56e0\u4e3a\u5fc5\u987b\u901a\u8fc7\u6307\u9488\u6765\u8bbf\u95ee \u3002\u73b0\u4ee3\u5904\u7406\u5668\u5728\u5185\u5b58\u4e2d\u8df3\u8f6c\u8d8a\u5c11\u5c31\u8d8a\u5feb\uff08\u7f13\u5b58\uff09\u3002\u7ee7\u7eed\u7c7b\u6bd4\uff0c\u5047\u8bbe\u6709\u4e00\u4e2a\u670d\u52a1\u5458\u5728\u9910\u5385\u91cc\u5904\u7406\u591a\u4e2a\u684c\u5b50\u7684\u70b9\u83dc\u3002\u5728\u4e00\u4e2a\u684c\u5b50\u62a5\u5b8c\u6240\u6709\u83dc\u540e\u518d\u79fb\u52a8\u5230\u4e0b\u4e00\u4e2a\u684c\u5b50\u662f\u6700\u6709\u6548\u7387\u7684\u3002\u4ece\u684c\u5b50 A \u542c\u4e00\u4e2a\u83dc\uff0c\u63a5\u7740\u684c\u5b50 B \u542c\u4e00\u4e2a\u83dc\uff0c\u7136\u540e\u518d\u684c\u5b50 A\uff0c\u7136\u540e\u518d\u684c\u5b50 B \u8fd9\u6837\u7684\u6d41\u7a0b\u4f1a\u66f4\u52a0\u7f13\u6162\u3002\u51fa\u4e8e\u540c\u6837\u539f\u56e0\uff0c\u5904\u7406\u5668\u5728\u5904\u7406\u7684\u6570\u636e\u5f7c\u6b64\u8f83\u8fd1\u7684\u65f6\u5019\uff08\u6bd4\u5982\u5728\u6808\u4e0a\uff09\u6bd4\u8f83\u8fdc\u7684\u65f6\u5019\uff08\u6bd4\u5982\u53ef\u80fd\u5728\u5806\u4e0a\uff09\u80fd\u66f4\u597d\u7684\u5de5\u4f5c\u3002 \u5f53\u4f60\u7684\u4ee3\u7801\u8c03\u7528\u4e00\u4e2a\u51fd\u6570\u65f6\uff0c\u4f20\u9012\u7ed9\u51fd\u6570\u7684\u503c\uff08\u5305\u62ec\u53ef\u80fd\u6307\u5411\u5806\u4e0a\u6570\u636e\u7684\u6307\u9488\uff09\u548c\u51fd\u6570\u7684\u5c40\u90e8\u53d8\u91cf\u88ab\u538b\u5165\u6808\u4e2d\u3002\u5f53\u51fd\u6570\u7ed3\u675f\u65f6\uff0c\u8fd9\u4e9b\u503c\u88ab\u79fb\u51fa\u6808\u3002 \u8ddf\u8e2a\u54ea\u90e8\u5206\u4ee3\u7801\u6b63\u5728\u4f7f\u7528\u5806\u4e0a\u7684\u54ea\u4e9b\u6570\u636e\uff0c\u6700\u5927\u9650\u5ea6\u7684\u51cf\u5c11\u5806\u4e0a\u7684\u91cd\u590d\u6570\u636e\u7684\u6570\u91cf\uff0c\u4ee5\u53ca\u6e05\u7406\u5806\u4e0a\u4e0d\u518d\u4f7f\u7528\u7684\u6570\u636e\u786e\u4fdd\u4e0d\u4f1a\u8017\u5c3d\u7a7a\u95f4\uff0c\u8fd9\u4e9b\u95ee\u9898\u6b63\u662f\u6240\u6709\u6743\u7cfb\u7edf\u8981\u5904\u7406\u7684 \u3002\u4e00\u65e6\u7406\u89e3\u4e86\u6240\u6709\u6743\uff0c\u4f60\u5c31\u4e0d\u9700\u8981\u7ecf\u5e38\u8003\u8651\u6808\u548c\u5806\u4e86\uff0c\u4e0d\u8fc7\u660e\u767d\u4e86\u6240\u6709\u6743\u7684\u4e3b\u8981\u76ee\u7684\u5c31\u662f\u4e3a\u4e86\u7ba1\u7406\u5806\u6570\u636e\uff0c\u80fd\u591f\u5e2e\u52a9\u89e3\u91ca\u4e3a\u4ec0\u4e48\u6240\u6709\u6743\u8981\u4ee5\u8fd9\u79cd\u65b9\u5f0f\u5de5\u4f5c\u3002 \u6240\u6709\u6743\u89c4\u5219 \u9996\u5148\uff0c\u8ba9\u6211\u4eec\u770b\u4e00\u4e0b\u6240\u6709\u6743\u7684\u89c4\u5219. Rust \u4e2d\u7684\u6bcf\u4e00\u4e2a\u503c\u90fd\u6709\u4e00\u4e2a \u6240\u6709\u8005 \uff08owner\uff09\u3002 \u503c\u5728\u4efb\u4e00\u65f6\u523b\u6709\u4e14\u53ea\u6709\u4e00\u4e2a\u6240\u6709\u8005\u3002 \u5f53\u6240\u6709\u8005\uff08\u53d8\u91cf\uff09\u79bb\u5f00\u4f5c\u7528\u57df\uff0c\u8fd9\u4e2a\u503c\u5c06\u88ab\u4e22\u5f03\u3002 \u53d8\u91cf\u4f5c\u7528\u57df \u4f5c\u7528\u57df\u662f\u4e00\u4e2a\u9879\uff08item\uff09\u5728\u7a0b\u5e8f\u4e2d\u6709\u6548\u7684\u8303\u56f4\u3002\u5047\u8bbe\u6709\u8fd9\u6837\u4e00\u4e2a\u53d8\u91cf\uff1a { // s \u5728\u8fd9\u91cc\u65e0\u6548, \u5b83\u5c1a\u672a\u58f0\u660e let s = \"hello\" ; // \u4ece\u6b64\u5904\u8d77\uff0cs \u662f\u6709\u6548\u7684 // \u4f7f\u7528 s println! ( \"s is {s}\" ) } // \u6b64\u4f5c\u7528\u57df\u5df2\u7ed3\u675f\uff0cs \u4e0d\u518d\u6709\u6548 \u4e24\u4e2a\u91cd\u8981\u7684\u65f6\u95f4\u70b9\uff1a \u5f53 s \u8fdb\u5165\u4f5c\u7528\u57df \u65f6\uff0c\u5b83\u5c31\u662f\u6709\u6548\u7684\u3002 \u8fd9\u4e00\u76f4\u6301\u7eed\u5230\u5b83 \u79bb\u5f00\u4f5c\u7528\u57df \u4e3a\u6b62\u3002 String \u7c7b\u578b \u5df2\u7ecf\u89c1\u8fc7\u5b57\u7b26\u4e32\u5b57\u9762\u503c\uff0c\u5373\u88ab\u786c\u7f16\u7801\u8fdb\u7a0b\u5e8f\u91cc\u7684\u5b57\u7b26\u4e32\u503c\u3002\u5b57\u7b26\u4e32\u5b57\u9762\u503c\u662f\u5f88\u65b9\u4fbf\u7684\uff0c\u4e0d\u8fc7\u5b83\u4eec\u5e76\u4e0d\u9002\u5408\u4f7f\u7528\u6587\u672c\u7684\u6bcf\u4e00\u79cd\u573a\u666f\u3002\u539f\u56e0\u4e4b\u4e00\u5c31\u662f \u5b83\u4eec\u662f\u4e0d\u53ef\u53d8\u7684 \u3002\u53e6\u4e00\u4e2a\u539f\u56e0\u662f \u5e76\u975e\u6240\u6709\u5b57\u7b26\u4e32\u7684\u503c\u90fd\u80fd\u5728\u7f16\u5199\u4ee3\u7801\u65f6\u5c31\u77e5\u9053 \uff1a\u4f8b\u5982\uff0c\u8981\u662f\u60f3\u83b7\u53d6\u7528\u6237\u8f93\u5165\u5e76\u5b58\u50a8\u8be5\u600e\u4e48\u529e\u5462\uff1f\u4e3a\u6b64\uff0cRust \u6709\u7b2c\u4e8c\u4e2a\u5b57\u7b26\u4e32\u7c7b\u578b\uff0cString\u3002\u8fd9\u4e2a\u7c7b\u578b\u7ba1\u7406\u88ab\u5206\u914d\u5230\u5806\u4e0a\u7684\u6570\u636e\uff0c\u6240\u4ee5\u80fd\u591f\u5b58\u50a8\u5728\u7f16\u8bd1\u65f6\u672a\u77e5\u5927\u5c0f\u7684\u6587\u672c\u3002\u53ef\u4ee5\u4f7f\u7528 from \u51fd\u6570\u57fa\u4e8e\u5b57\u7b26\u4e32\u5b57\u9762\u503c\u6765\u521b\u5efa String \uff0c\u5982\u4e0b\uff1a let s = String :: from ( \"hello\" ); // \u4e24\u4e2a\u5192\u53f7 :: \u662f\u8fd0\u7b97\u7b26\uff0c\u5141\u8bb8\u5c06\u7279\u5b9a\u7684 from \u51fd\u6570\u7f6e\u4e8e String \u7c7b\u578b\u7684\u547d\u540d\u7a7a\u95f4\uff08namespace\uff09\u4e0b\uff0c\u800c\u4e0d\u9700\u8981\u4f7f\u7528\u7c7b\u4f3c string_from \u8fd9\u6837\u7684\u540d\u5b57\u3002 \u53ef\u4ee5 \u4fee\u6539\u6b64\u7c7b\u5b57\u7b26\u4e32 \uff1a let mut s = String :: from ( \"hello\" ); s . push_str ( \", world!\" ); // push_str() \u5728\u5b57\u7b26\u4e32\u540e\u8ffd\u52a0\u5b57\u9762\u503c println! ( \"{}\" , s ); // \u5c06\u6253\u5370 `hello, world!` // \u90a3\u4e48\u8fd9\u91cc\u6709\u4ec0\u4e48\u533a\u522b\u5462\uff1f // \u4e3a\u4ec0\u4e48 String \u53ef\u53d8\u800c\u5b57\u9762\u503c\u5374\u4e0d\u884c\u5462\uff1f // \u533a\u522b\u5728\u4e8e\u4e24\u4e2a\u7c7b\u578b\u5bf9\u5185\u5b58\u7684\u5904\u7406\u4e0a\u3002 \u5185\u5b58\u4e0e\u5206\u914d \u5c31\u5b57\u7b26\u4e32\u5b57\u9762\u503c\u6765\u8bf4\uff0c\u6211\u4eec\u5728\u7f16\u8bd1\u65f6\u5c31\u77e5\u9053\u5176\u5185\u5bb9\uff0c\u6240\u4ee5\u6587\u672c\u88ab\u76f4\u63a5\u786c\u7f16\u7801\u8fdb\u6700\u7ec8\u7684\u53ef\u6267\u884c\u6587\u4ef6\u4e2d\u3002\u8fd9\u4f7f\u5f97\u5b57\u7b26\u4e32\u5b57\u9762\u503c\u5feb\u901f\u4e14\u9ad8\u6548\u3002 \u4e0d\u8fc7\u8fd9\u4e9b\u7279\u6027\u90fd\u53ea\u5f97\u76ca\u4e8e\u5b57\u7b26\u4e32\u5b57\u9762\u503c\u7684\u4e0d\u53ef\u53d8\u6027\u3002 \u4e0d\u5e78\u7684\u662f\uff0c\u6211\u4eec\u4e0d\u80fd\u4e3a\u4e86\u6bcf\u4e00\u4e2a\u5728\u7f16\u8bd1\u65f6\u5927\u5c0f\u672a\u77e5\u7684\u6587\u672c\u800c\u5c06\u4e00\u5757\u5185\u5b58\u653e\u5165\u4e8c\u8fdb\u5236\u6587\u4ef6\u4e2d\uff0c\u5e76\u4e14\u5b83\u7684\u5927\u5c0f\u8fd8\u53ef\u80fd\u968f\u7740\u7a0b\u5e8f\u8fd0\u884c\u800c\u6539\u53d8\u3002 \u5bf9\u4e8e String \u7c7b\u578b\uff0c\u4e3a\u4e86\u652f\u6301\u4e00\u4e2a\u53ef\u53d8\uff0c\u53ef\u589e\u957f\u7684\u6587\u672c\u7247\u6bb5\uff0c \u9700\u8981\u5728\u5806\u4e0a\u5206\u914d\u4e00\u5757\u5728\u7f16\u8bd1\u65f6\u672a\u77e5\u5927\u5c0f\u7684\u5185\u5b58\u6765\u5b58\u653e\u5185\u5bb9 \u3002\u8fd9\u610f\u5473\u7740\uff1a \u5fc5\u987b\u5728\u8fd0\u884c\u65f6\u5411\u5185\u5b58\u5206\u914d\u5668\uff08memory allocator\uff09\u8bf7\u6c42\u5185\u5b58\u3002 \u9700\u8981\u4e00\u4e2a\u5f53\u6211\u4eec\u5904\u7406\u5b8c String \u65f6\u5c06\u5185\u5b58\u8fd4\u56de\u7ed9\u5206\u914d\u5668\u7684\u65b9\u6cd5\u3002 \u7b2c\u4e00\u90e8\u5206\u7531\u6211\u4eec\u5b8c\u6210\uff1a\u5f53\u8c03\u7528 String::from \u65f6\uff0c\u5b83\u7684\u5b9e\u73b0 (implementation) \u8bf7\u6c42\u5176\u6240\u9700\u7684\u5185\u5b58\u3002\u8fd9\u5728\u7f16\u7a0b\u8bed\u8a00\u4e2d\u662f\u975e\u5e38\u901a\u7528\u7684\u3002 \u7136\u800c\uff0c\u7b2c\u4e8c\u90e8\u5206\u5b9e\u73b0\u8d77\u6765\u5c31\u5404\u6709\u533a\u522b\u4e86\u3002\u5728\u6709 \u5783\u573e\u56de\u6536 \uff08garbage collector\uff0c GC \uff09\u7684\u8bed\u8a00\u4e2d\uff0c GC \u8bb0\u5f55\u5e76\u6e05\u9664\u4e0d\u518d\u4f7f\u7528\u7684\u5185\u5b58\uff0c\u800c\u6211\u4eec\u5e76\u4e0d\u9700\u8981\u5173\u5fc3\u5b83\u3002\u5728\u5927\u90e8\u5206\u6ca1\u6709 GC \u7684\u8bed\u8a00\u4e2d\uff0c\u8bc6\u522b\u51fa\u4e0d\u518d\u4f7f\u7528\u7684\u5185\u5b58\u5e76\u8c03\u7528\u4ee3\u7801\u663e\u5f0f\u91ca\u653e\u5c31\u662f\u6211\u4eec\u7684\u8d23\u4efb\u4e86\uff0c\u8ddf\u8bf7\u6c42\u5185\u5b58\u7684\u65f6\u5019\u4e00\u6837\u3002\u4ece\u5386\u53f2\u7684\u89d2\u5ea6\u4e0a\u8bf4\u6b63\u786e\u5904\u7406\u5185\u5b58\u56de\u6536\u66fe\u7ecf\u662f\u4e00\u4e2a\u56f0\u96be\u7684\u7f16\u7a0b\u95ee\u9898\u3002\u5982\u679c\u5fd8\u8bb0\u56de\u6536\u4e86\u4f1a\u6d6a\u8d39\u5185\u5b58\u3002\u5982\u679c\u8fc7\u65e9\u56de\u6536\u4e86\uff0c\u5c06\u4f1a\u51fa\u73b0\u65e0\u6548\u53d8\u91cf\u3002\u5982\u679c\u91cd\u590d\u56de\u6536\uff0c\u8fd9\u4e5f\u662f\u4e2a bug\u3002\u6211\u4eec\u9700\u8981 \u7cbe\u786e\u7684\u4e3a\u4e00\u4e2a allocate \u914d\u5bf9\u4e00\u4e2a free \u3002 Rust \u91c7\u53d6\u4e86\u4e00\u4e2a\u4e0d\u540c\u7684\u7b56\u7565\uff1a \u5185\u5b58\u5728\u62e5\u6709\u5b83\u7684\u53d8\u91cf\u79bb\u5f00\u4f5c\u7528\u57df\u540e\u5c31\u88ab\u81ea\u52a8\u91ca\u653e \u3002\u4e0b\u9762\u662f\u4f5c\u7528\u57df\u4f8b\u5b50\u7684\u4e00\u4e2a\u4f7f\u7528 String \u800c\u4e0d\u662f\u5b57\u7b26\u4e32\u5b57\u9762\u503c\u7684\u7248\u672c\uff1a { let s = String :: from ( \"hello\" ); // \u4ece\u6b64\u5904\u8d77\uff0cs \u662f\u6709\u6548\u7684 // \u4f7f\u7528 s println! ( \"s is {s}\" ) } // \u6b64\u4f5c\u7528\u57df\u5df2\u7ed3\u675f\uff0c // s \u4e0d\u518d\u6709\u6548 \u5f53\u53d8\u91cf\u79bb\u5f00\u4f5c\u7528\u57df\uff0cRust \u4e3a\u6211\u4eec\u8c03\u7528\u4e00\u4e2a\u7279\u6b8a\u7684\u51fd\u6570\u3002\u8fd9\u4e2a\u51fd\u6570\u53eb\u505a drop \uff0cRust \u5728\u7ed3\u5c3e\u7684 } \u5904\u81ea\u52a8\u8c03\u7528 drop \u3002 \u6570\u636e\u4ea4\u4e92\uff1a\u79fb\u52a8 \u591a\u4e2a\u53d8\u91cf\u53ef\u4ee5\u91c7\u53d6\u4e0d\u540c\u7684\u65b9\u5f0f\u4e0e\u540c\u4e00\u6570\u636e\u8fdb\u884c\u4ea4\u4e92\u3002 fn main () { let x = 5 ; let y = x ; // \u5c06\u53d8\u91cf x \u7684\u6574\u6570\u503c\u8d4b\u7ed9 y } \u201c\u5c06 5 \u7ed1\u5b9a\u5230 x\uff1b\u63a5\u7740\u751f\u6210\u4e00\u4e2a\u503c x \u7684\u62f7\u8d1d\u5e76\u7ed1\u5b9a\u5230 y\u201d\u3002 \u73b0\u5728\u6709\u4e86\u4e24\u4e2a\u53d8\u91cf\uff0cx \u548c y\uff0c\u90fd\u7b49\u4e8e 5\u3002\u8fd9\u4e5f\u6b63\u662f\u4e8b\u5b9e\u4e0a\u53d1\u751f\u4e86\u7684\uff0c\u56e0\u4e3a\u6574\u6570\u662f\u6709 \u5df2\u77e5\u56fa\u5b9a\u5927\u5c0f \u7684\u7b80\u5355\u503c\uff0c\u6240\u4ee5\u8fd9 \u4e24\u4e2a 5 \u88ab\u653e\u5165\u4e86\u6808\u4e2d \u3002 String \u7248\u672c\uff1a let s1 = String :: from ( \"hello\" ); let s2 = s1 ; // \u5f53\u6211\u4eec\u5c06 s1 \u8d4b\u503c\u7ed9 s2\uff0cString \u7684\u6570\u636e\u88ab\u590d\u5236\u4e86\uff0c\u8fd9\u610f\u5473\u7740\u6211\u4eec\u4ece\u6808\u4e0a\u62f7\u8d1d\u4e86\u5b83\u7684\u6307\u9488\u3001\u957f\u5ea6\u548c\u5bb9\u91cf\u3002 // Rust\u5e76\u6ca1\u6709\u590d\u5236\u6307\u9488\u6307\u5411\u7684\u5806\u4e0a\u6570\u636e\u3002 // \u5982\u679c Rust \u4e5f\u62f7\u8d1d\u4e86\u5806\u4e0a\u7684\u6570\u636e\uff0c\u90a3\u4e48\u64cd\u4f5c s2 = s1 \u5728\u5806\u4e0a\u6570\u636e\u6bd4\u8f83\u5927\u7684\u65f6\u5019\u4f1a\u5bf9\u8fd0\u884c\u65f6\u6027\u80fd\u9020\u6210\u975e\u5e38\u5927\u7684\u5f71\u54cd\u3002 \u8fc7\u5f53\u53d8\u91cf\u79bb\u5f00\u4f5c\u7528\u57df\u540e\uff0cRust \u81ea\u52a8\u8c03\u7528 drop \u51fd\u6570\u5e76\u6e05\u7406\u53d8\u91cf\u7684\u5806\u5185\u5b58\u3002\u4e0d\u8fc7\u4e24\u4e2a\u6570\u636e\u6307\u9488\u6307\u5411\u4e86\u540c\u4e00\u4f4d\u7f6e\u3002 \u8fd9\u5c31\u6709\u4e86\u4e00\u4e2a\u95ee\u9898\uff1a\u5f53 s2 \u548c s1 \u79bb\u5f00\u4f5c\u7528\u57df\uff0c\u4ed6\u4eec\u90fd\u4f1a\u5c1d\u8bd5\u91ca\u653e\u76f8\u540c\u7684\u5185\u5b58\u3002 \u8fd9\u662f\u4e00\u4e2a\u53eb\u505a \u4e8c\u6b21\u91ca\u653e \uff08double free\uff09\u7684\u9519\u8bef\uff0c\u4e5f\u662f\u4e4b\u524d\u63d0\u5230\u8fc7\u7684\u5185\u5b58\u5b89\u5168\u6027 bug \u4e4b\u4e00\u3002 \u4e24\u6b21\u91ca\u653e \uff08\u76f8\u540c\uff09\u5185\u5b58\u4f1a\u5bfc\u81f4\u5185\u5b58\u6c61\u67d3\uff0c\u5b83\u53ef\u80fd\u4f1a\u5bfc\u81f4\u6f5c\u5728\u7684\u5b89\u5168\u6f0f\u6d1e\u3002 \u4e3a\u4e86\u786e\u4fdd\u5185\u5b58\u5b89\u5168\uff0c\u5728 let s2 = s1 \u4e4b\u540e\uff0cRust \u8ba4\u4e3a s1 \u4e0d\u518d\u6709\u6548\uff0c\u56e0\u6b64 Rust \u4e0d\u9700\u8981\u5728 s1 \u79bb\u5f00\u4f5c\u7528\u57df\u540e\u6e05\u7406\u4efb\u4f55\u4e1c\u897f\u3002 \u5728 s2 \u88ab\u521b\u5efa\u4e4b\u540e\u5c1d\u8bd5\u4f7f\u7528 s1 \u4f1a\u53d1\u751f\u4ec0\u4e48\uff1b\u8fd9\u6bb5\u4ee3\u7801\u4e0d\u80fd\u8fd0\u884c\uff1a let s1 = String :: from ( \"hello\" ); let s2 = s1 ; println! ( \"{}, world!\" , s1 ); // \u4f1a\u5f97\u5230\u4e00\u4e2a\u9519\u8bef: value borrowed here after move // \u56e0\u4e3a Rust \u7981\u6b62\u4f7f\u7528\u65e0\u6548\u7684\u5f15\u7528\u3002 \u5982\u679c\u5728\u5176\u4ed6\u8bed\u8a00\u4e2d\u542c\u8bf4\u8fc7\u672f\u8bed \u6d45\u62f7\u8d1d \uff08shallow copy\uff09\u548c \u6df1\u62f7\u8d1d \uff08deep copy\uff09\uff0c\u90a3\u4e48\u62f7\u8d1d\u6307\u9488\u3001\u957f\u5ea6\u548c\u5bb9\u91cf\u800c\u4e0d\u62f7\u8d1d\u6570\u636e\u53ef\u80fd\u542c\u8d77\u6765\u50cf\u6d45\u62f7\u8d1d\u3002\u4e0d\u8fc7\u56e0\u4e3a Rust \u540c\u65f6\u4f7f\u7b2c\u4e00\u4e2a\u53d8\u91cf\u65e0\u6548\u4e86\uff0c\u8fd9\u4e2a\u64cd\u4f5c\u88ab\u79f0\u4e3a \u79fb\u52a8 \uff08move\uff09\uff0c\u800c\u4e0d\u662f\u6d45\u62f7\u8d1d\u3002\u4e0a\u9762\u7684\u4f8b\u5b50\u53ef\u4ee5\u89e3\u8bfb\u4e3a s1 \u88ab \u79fb\u52a8 \u5230\u4e86 s2 \u4e2d\u3002 \u8fd9\u6837\u5c31\u89e3\u51b3\u4e86\u4e8c\u6b21\u91ca\u653e\u7684\u95ee\u9898\uff01\u56e0\u4e3a\u53ea\u6709 s2 \u662f\u6709\u6548\u7684\uff0c\u5f53\u5176\u79bb\u5f00\u4f5c\u7528\u57df\uff0c\u5b83\u5c31\u91ca\u653e\u4e86\u81ea\u5df1\u7684\u5185\u5b58\u3002 \u8fd9\u91cc\u8fd8\u9690\u542b\u4e86\u4e00\u4e2a\u8bbe\u8ba1\u9009\u62e9\uff1a Rust \u6c38\u8fdc\u4e5f\u4e0d\u4f1a\u81ea\u52a8\u521b\u5efa\u6570\u636e\u7684 \u201c\u6df1\u62f7\u8d1d\u201d \u3002\u56e0\u6b64\uff0c\u4efb\u4f55 \u81ea\u52a8 \u7684\u590d\u5236\u53ef\u4ee5\u88ab\u8ba4\u4e3a\u5bf9\u8fd0\u884c\u65f6\u6027\u80fd\u5f71\u54cd\u8f83\u5c0f\u3002 \u6570\u636e\u4ea4\u4e92\uff1a\u514b\u9686 \u5982\u679c \u786e\u5b9e \u9700\u8981\u6df1\u5ea6\u590d\u5236 String \u4e2d\u5806\u4e0a\u7684\u6570\u636e\uff0c\u800c\u4e0d\u4ec5\u4ec5\u662f\u6808\u4e0a\u7684\u6570\u636e\uff0c\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a\u53eb\u505a clone \u7684\u901a\u7528\u51fd\u6570\u3002 let s1 = String :: from ( \"hello\" ); let s2 = s1 . clone (); println! ( \"s1 = {}, s2 = {}\" , s1 , s2 ); \u8fd9\u6bb5\u4ee3\u7801\u80fd\u6b63\u5e38\u8fd0\u884c\uff0c\u8fd9\u91cc\u5806\u4e0a\u7684\u6570\u636e \u786e\u5b9e \u88ab\u590d\u5236\u4e86\u3002 \u5f53\u51fa\u73b0 clone \u8c03\u7528\u65f6\uff0c\u4f60\u77e5\u9053\u4e00\u4e9b\u7279\u5b9a\u7684\u4ee3\u7801\u88ab\u6267\u884c\u800c\u4e14\u8fd9\u4e9b\u4ee3\u7801\u53ef\u80fd\u76f8\u5f53\u6d88\u8017\u8d44\u6e90\u3002 \u62f7\u8d1d \u8fd9\u91cc\u8fd8\u6709\u4e00\u4e2a\u6ca1\u6709\u63d0\u5230\u7684\u5c0f\u7a8d\u95e8\u3002\u8fd9\u4e9b\u4ee3\u7801\u4f7f\u7528\u4e86\u6574\u578b\u5e76\u4e14\u662f\u6709\u6548\u7684! let x = 5 ; let y = x ; println! ( \"x = {}, y = {}\" , x , y ); \u4f46\u8fd9\u6bb5\u4ee3\u7801\u4f3c\u4e4e\u4e0e\u521a\u521a\u5b66\u5230\u7684\u5185\u5bb9\u76f8\u77db\u76fe\uff1a\u6ca1\u6709\u8c03\u7528 clone\uff0c\u4e0d\u8fc7 x \u4f9d\u7136\u6709\u6548\u4e14\u6ca1\u6709\u88ab\u79fb\u52a8\u5230 y \u4e2d\u3002 \u539f\u56e0\u662f\u50cf\u6574\u578b\u8fd9\u6837\u7684\u5728\u7f16\u8bd1\u65f6\u5df2\u77e5\u5927\u5c0f\u7684\u7c7b\u578b\u88ab\u6574\u4e2a\u5b58\u50a8\u5728\u6808\u4e0a\uff0c\u6240\u4ee5\u62f7\u8d1d\u5176\u5b9e\u9645\u7684\u503c\u662f\u5feb\u901f\u7684\u3002\u8fd9\u610f\u5473\u7740\u6ca1\u6709\u7406\u7531\u5728\u521b\u5efa\u53d8\u91cf y \u540e\u4f7f x \u65e0\u6548\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c \u8fd9\u91cc\u6ca1\u6709\u6df1\u6d45\u62f7\u8d1d\u7684\u533a\u522b \uff0c\u6240\u4ee5\u8fd9\u91cc\u8c03\u7528 clone \u5e76\u4e0d\u4f1a\u4e0e\u901a\u5e38\u7684\u6d45\u62f7\u8d1d\u6709\u4ec0\u4e48\u4e0d\u540c\uff0c\u6211\u4eec\u53ef\u4ee5\u4e0d\u7528\u7ba1\u5b83\u3002 Rust \u6709\u4e00\u4e2a\u53eb\u505a Copy trait \u7684\u7279\u6b8a\u6ce8\u89e3\uff0c\u53ef\u4ee5\u7528\u5728\u7c7b\u4f3c\u6574\u578b\u8fd9\u6837\u7684\u5b58\u50a8\u5728\u6808\u4e0a\u7684\u7c7b\u578b\u4e0a\uff08 \u7b2c\u5341\u7ae0 \u5c06\u4f1a\u8be6\u7ec6\u8bb2\u89e3 trait\uff09\u3002\u5982\u679c\u4e00\u4e2a\u7c7b\u578b\u5b9e\u73b0\u4e86 Copy trait \uff0c\u90a3\u4e48\u4e00\u4e2a\u65e7\u7684\u53d8\u91cf\u5728\u5c06\u5176\u8d4b\u503c\u7ed9\u5176\u4ed6\u53d8\u91cf\u540e\u4ecd\u7136\u53ef\u7528\u3002 Rust \u4e0d\u5141\u8bb8\u81ea\u8eab\u6216\u5176\u4efb\u4f55\u90e8\u5206\u5b9e\u73b0\u4e86 Drop trait \u7684\u7c7b\u578b\u4f7f\u7528 Copy trait \u3002\u5982\u679c\u6211\u4eec\u5bf9\u5176\u503c\u79bb\u5f00\u4f5c\u7528\u57df\u65f6\u9700\u8981\u7279\u6b8a\u5904\u7406\u7684\u7c7b\u578b\u4f7f\u7528 Copy \u6ce8\u89e3\uff0c\u5c06\u4f1a\u51fa\u73b0\u4e00\u4e2a\u7f16\u8bd1\u65f6\u9519\u8bef\u3002\u8981\u5b66\u4e60\u5982\u4f55\u4e3a\u4f60\u7684\u7c7b\u578b\u6dfb\u52a0 Copy \u6ce8\u89e3\u4ee5\u5b9e\u73b0\u8be5 trait\uff0c\u8bf7\u9605\u8bfb \u9644\u5f55 C \u4e2d\u7684 \u201c\u53ef\u6d3e\u751f\u7684 trait\u201d \u3002 \u90a3\u4e48\u54ea\u4e9b\u7c7b\u578b\u5b9e\u73b0\u4e86 Copy trait \u5462\uff1f\u53ef\u4ee5\u67e5\u770b\u7ed9\u5b9a\u7c7b\u578b\u7684\u6587\u6863\u6765\u786e\u8ba4\uff0c\u4e0d\u8fc7\u4f5c\u4e3a\u4e00\u4e2a\u901a\u7528\u7684\u89c4\u5219\uff0c\u4efb\u4f55\u4e00\u7ec4\u7b80\u5355\u6807\u91cf\u503c\u7684\u7ec4\u5408\u90fd\u53ef\u4ee5\u5b9e\u73b0 Copy\uff0c\u4efb\u4f55\u4e0d\u9700\u8981\u5206\u914d\u5185\u5b58\u6216\u67d0\u79cd\u5f62\u5f0f\u8d44\u6e90\u7684\u7c7b\u578b\u90fd\u53ef\u4ee5\u5b9e\u73b0 Copy \u3002\u5982\u4e0b\u662f\u4e00\u4e9b Copy \u7684\u7c7b\u578b\uff1a \u6240\u6709\u6574\u6570\u7c7b\u578b\uff0c\u6bd4\u5982 u32\u3002 \u5e03\u5c14\u7c7b\u578b\uff0cbool\uff0c\u5b83\u7684\u503c\u662f true \u548c false\u3002 \u6240\u6709\u6d6e\u70b9\u6570\u7c7b\u578b\uff0c\u6bd4\u5982 f64\u3002 \u5b57\u7b26\u7c7b\u578b\uff0cchar\u3002 \u5143\u7ec4\uff0c\u5f53\u4e14\u4ec5\u5f53\u5176\u5305\u542b\u7684\u7c7b\u578b\u4e5f\u90fd\u5b9e\u73b0 Copy \u7684\u65f6\u5019\u3002\u6bd4\u5982\uff0c(i32, i32) \u5b9e\u73b0\u4e86 Copy\uff0c\u4f46 (i32, String) \u5c31\u6ca1\u6709\u3002 \u6240\u6709\u6743\u4e0e\u51fd\u6570 \u5c06\u503c\u4f20\u9012\u7ed9\u51fd\u6570\u4e0e\u7ed9\u53d8\u91cf\u8d4b\u503c\u7684\u539f\u7406\u76f8\u4f3c\u3002\u5411\u51fd\u6570\u4f20\u9012\u503c\u53ef\u80fd\u4f1a\u79fb\u52a8\u6216\u8005\u590d\u5236\uff0c\u5c31\u50cf\u8d4b\u503c\u8bed\u53e5\u4e00\u6837\u3002 fn main () { let s = String :: from ( \"hello\" ); // s \u8fdb\u5165\u4f5c\u7528\u57df takes_ownership ( s ); // s \u7684\u503c\u79fb\u52a8\u5230\u51fd\u6570\u91cc ... // ... \u6240\u4ee5\u5230\u8fd9\u91cc\u4e0d\u518d\u6709\u6548 let x = 5 ; // x \u8fdb\u5165\u4f5c\u7528\u57df makes_copy ( x ); // x \u5e94\u8be5\u79fb\u52a8\u51fd\u6570\u91cc\uff0c // \u4f46 i32 \u662f Copy \u7684\uff0c // \u6240\u4ee5\u5728\u540e\u9762\u53ef\u7ee7\u7eed\u4f7f\u7528 x } // \u8fd9\u91cc, x \u5148\u79fb\u51fa\u4e86\u4f5c\u7528\u57df\uff0c\u7136\u540e\u662f s\u3002\u4f46\u56e0\u4e3a s \u7684\u503c\u5df2\u88ab\u79fb\u8d70\uff0c // \u6ca1\u6709\u7279\u6b8a\u4e4b\u5904 fn takes_ownership ( some_string : String ) { // some_string \u8fdb\u5165\u4f5c\u7528\u57df println! ( \"{}\" , some_string ); } // \u8fd9\u91cc\uff0csome_string \u79fb\u51fa\u4f5c\u7528\u57df\u5e76\u8c03\u7528 `drop` \u65b9\u6cd5\u3002 // \u5360\u7528\u7684\u5185\u5b58\u88ab\u91ca\u653e fn makes_copy ( some_integer : i32 ) { // some_integer \u8fdb\u5165\u4f5c\u7528\u57df println! ( \"{}\" , some_integer ); } // \u8fd9\u91cc\uff0csome_integer \u79fb\u51fa\u4f5c\u7528\u57df\u3002\u6ca1\u6709\u7279\u6b8a\u4e4b\u5904 \u5f53\u5c1d\u8bd5\u5728\u8c03\u7528 takes_ownership \u540e\u4f7f\u7528 s \u65f6\uff0cRust \u4f1a\u629b\u51fa\u4e00\u4e2a\u7f16\u8bd1\u65f6\u9519\u8bef\u3002\u8fd9\u4e9b\u9759\u6001\u68c0\u67e5\u4f7f\u6211\u4eec\u514d\u4e8e\u72af\u9519\u3002 \u8bd5\u8bd5\u5728 main \u51fd\u6570\u4e2d\u6dfb\u52a0\u4f7f\u7528 s \u548c x \u7684\u4ee3\u7801\u6765\u770b\u770b\u54ea\u91cc\u80fd\u4f7f\u7528\u4ed6\u4eec\uff0c\u4ee5\u53ca\u6240\u6709\u6743\u89c4\u5219\u4f1a\u5728\u54ea\u91cc\u963b\u6b62\u6211\u4eec\u8fd9\u4e48\u505a\u3002 \u8fd4\u56de\u503c\u4e0e\u4f5c\u7528\u57df \u8fd4\u56de\u503c\u4e5f\u53ef\u4ee5\u8f6c\u79fb\u6240\u6709\u6743\u3002 ffn main () { let s1 = gives_ownership (); // gives_ownership \u5c06\u8fd4\u56de\u503c // \u8f6c\u79fb\u7ed9 s1 let s2 = String :: from ( \"hello\" ); // s2 \u8fdb\u5165\u4f5c\u7528\u57df let s3 = takes_and_gives_back ( s2 ); // s2 \u88ab\u79fb\u52a8\u5230 // takes_and_gives_back \u4e2d, // \u5b83\u4e5f\u5c06\u8fd4\u56de\u503c\u79fb\u7ed9 s3 } // \u8fd9\u91cc, s3 \u79fb\u51fa\u4f5c\u7528\u57df\u5e76\u88ab\u4e22\u5f03\u3002s2 \u4e5f\u79fb\u51fa\u4f5c\u7528\u57df\uff0c\u4f46\u5df2\u88ab\u79fb\u8d70\uff0c // \u6240\u4ee5\u4ec0\u4e48\u4e5f\u4e0d\u4f1a\u53d1\u751f\u3002s1 \u79bb\u5f00\u4f5c\u7528\u57df\u5e76\u88ab\u4e22\u5f03 fn gives_ownership () -> String { // gives_ownership \u4f1a\u5c06 // \u8fd4\u56de\u503c\u79fb\u52a8\u7ed9 // \u8c03\u7528\u5b83\u7684\u51fd\u6570 let some_string = String :: from ( \"yours\" ); // some_string \u8fdb\u5165\u4f5c\u7528\u57df. some_string // \u8fd4\u56de some_string // \u5e76\u79fb\u51fa\u7ed9\u8c03\u7528\u7684\u51fd\u6570 // } // takes_and_gives_back \u5c06\u4f20\u5165\u5b57\u7b26\u4e32\u5e76\u8fd4\u56de\u8be5\u503c fn takes_and_gives_back ( a_string : String ) -> String { // a_string \u8fdb\u5165\u4f5c\u7528\u57df // a_string // \u8fd4\u56de a_string \u5e76\u79fb\u51fa\u7ed9\u8c03\u7528\u7684\u51fd\u6570 } \u53d8\u91cf\u7684\u6240\u6709\u6743\u603b\u662f\u9075\u5faa\u76f8\u540c\u7684\u6a21\u5f0f\uff1a \u5c06\u503c\u8d4b\u7ed9\u53e6\u4e00\u4e2a\u53d8\u91cf\u65f6\u79fb\u52a8\u5b83\u3002\u5f53\u6301\u6709\u5806\u4e2d\u6570\u636e\u503c\u7684\u53d8\u91cf\u79bb\u5f00\u4f5c\u7528\u57df\u65f6\uff0c\u5176\u503c\u5c06\u901a\u8fc7 drop \u88ab\u6e05\u7406\u6389\uff0c\u9664\u975e\u6570\u636e\u88ab\u79fb\u52a8\u4e3a\u53e6\u4e00\u4e2a\u53d8\u91cf\u6240\u6709\u3002 \u867d\u7136\u8fd9\u6837\u662f\u53ef\u4ee5\u7684\uff0c\u4f46\u662f\u5728\u6bcf\u4e00\u4e2a\u51fd\u6570\u4e2d\u90fd\u83b7\u53d6\u6240\u6709\u6743\u5e76\u63a5\u7740\u8fd4\u56de\u6240\u6709\u6743\u6709\u4e9b\u5570\u55e6\u3002\u5982\u679c\u6211\u4eec\u60f3\u8981\u51fd\u6570\u4f7f\u7528\u4e00\u4e2a\u503c\u4f46\u4e0d\u83b7\u53d6\u6240\u6709\u6743\u8be5\u600e\u4e48\u529e\u5462\uff1f\u5982\u679c\u6211\u4eec\u8fd8\u8981\u63a5\u7740\u4f7f\u7528\u5b83\u7684\u8bdd\uff0c\u6bcf\u6b21\u90fd\u4f20\u8fdb\u53bb\u518d\u8fd4\u56de\u6765\u5c31\u6709\u70b9\u70e6\u4eba\u4e86\uff0c\u9664\u6b64\u4e4b\u5916\uff0c\u6211\u4eec\u4e5f\u53ef\u80fd\u60f3\u8fd4\u56de\u51fd\u6570\u4f53\u4e2d\u4ea7\u751f\u7684\u4e00\u4e9b\u6570\u636e\u3002 \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u5143\u7ec4\u6765\u8fd4\u56de\u591a\u4e2a\u503c\uff0c\u793a\u4f8b\uff1a fn main () { let s1 = String :: from ( \"hello\" ); let ( s2 , len ) = calculate_length ( s1 ); println! ( \"The length of '{}' is {}.\" , s2 , len ); } fn calculate_length ( s : String ) -> ( String , usize ) { let length = s . len (); // len() \u8fd4\u56de\u5b57\u7b26\u4e32\u7684\u957f\u5ea6 ( s , length ) } \u4f46\u662f\u8fd9\u672a\u514d\u6709\u4e9b\u5f62\u5f0f\u4e3b\u4e49\uff0c\u800c\u4e14\u8fd9\u79cd\u573a\u666f\u5e94\u8be5\u5f88\u5e38\u89c1\u3002\u5e78\u8fd0\u7684\u662f\uff0cRust \u5bf9\u6b64\u63d0\u4f9b\u4e86\u4e00\u4e2a\u4e0d\u7528\u83b7\u53d6\u6240\u6709\u6743\u5c31\u53ef\u4ee5\u4f7f\u7528\u503c\u7684\u529f\u80fd\uff0c\u53eb\u505a \u5f15\u7528 \uff08references\uff09\u3002 \u5f15\u7528\u4e0e\u501f\u7528 \u4ee5\u63d0\u4f9b\u4e00\u4e2a String \u503c\u7684\u5f15\u7528\uff08reference\uff09\u3002 \u5f15\u7528 \uff08reference\uff09\u50cf\u4e00\u4e2a\u6307\u9488\uff0c\u56e0\u4e3a\u5b83\u662f\u4e00\u4e2a\u5730\u5740\uff0c\u6211\u4eec\u53ef\u4ee5\u7531\u6b64\u8bbf\u95ee\u50a8\u5b58\u4e8e\u8be5\u5730\u5740\u7684\u5c5e\u4e8e\u5176\u4ed6\u53d8\u91cf\u7684\u6570\u636e\u3002 \u4e0e\u6307\u9488\u4e0d\u540c\uff0c \u5f15\u7528\u786e\u4fdd\u6307\u5411\u67d0\u4e2a\u7279\u5b9a\u7c7b\u578b\u7684\u6709\u6548\u503c \u3002 fn main () { let s1 = String :: from ( \"hello\" ); // \u4f20\u9012 &s1 \u7ed9 calculate_length // \u8fd9\u4e9b & \u7b26\u53f7\u5c31\u662f \u5f15\u7528\uff0c\u5b83\u4eec\u5141\u8bb8\u4f60\u4f7f\u7528\u503c\u4f46\u4e0d\u83b7\u53d6\u5176\u6240\u6709\u6743\u3002 // &s1 \u8bed\u6cd5\u8ba9\u6211\u4eec\u521b\u5efa\u4e00\u4e2a \u6307\u5411 \u503c s1 \u7684\u5f15\u7528\uff0c\u4f46\u662f\u5e76\u4e0d\u62e5\u6709\u5b83\u3002 // \u56e0\u4e3a\u5e76\u4e0d\u62e5\u6709\u8fd9\u4e2a\u503c\uff0c\u6240\u4ee5\u5f53\u5f15\u7528\u505c\u6b62\u4f7f\u7528\u65f6\uff0c\u5b83\u6240\u6307\u5411\u7684\u503c\u4e5f\u4e0d\u4f1a\u88ab\u4e22\u5f03\u3002 let len = calculate_length ( & s1 ); println! ( \"The length of '{}' is {}.\" , s1 , len ); } // \u51fd\u6570\u7b7e\u540d\u4f7f\u7528 & \u6765\u8868\u660e\u53c2\u6570 s \u7684\u7c7b\u578b\u662f\u4e00\u4e2a\u5f15\u7528\u3002 fn calculate_length ( s : & String ) -> usize { // s\u662fString\u7684\u5f15\u7528 s . len () } // \u8fd9\u91cc\uff0cs \u79bb\u5f00\u4e86\u4f5c\u7528\u57df\u3002\u4f46\u56e0\u4e3a\u5b83\u5e76\u4e0d\u62e5\u6709\u5f15\u7528\u503c\u7684\u6240\u6709\u6743\uff0c // \u6240\u4ee5\u4ec0\u4e48\u4e5f\u4e0d\u4f1a\u53d1\u751f (Rust \u4e0d\u4f1a\u8c03\u7528drop) \u5f53\u51fd\u6570\u4f7f\u7528\u5f15\u7528\u800c\u4e0d\u662f\u5b9e\u9645\u503c\u4f5c\u4e3a\u53c2\u6570\uff0c\u65e0\u9700\u8fd4\u56de\u503c\u6765\u4ea4\u8fd8\u6240\u6709\u6743\uff0c\u56e0\u4e3a\u5c31\u4e0d\u66fe\u62e5\u6709\u6240\u6709\u6743\u3002 \u5c06\u521b\u5efa\u4e00\u4e2a\u5f15\u7528\u7684\u884c\u4e3a\u79f0\u4e3a \u501f\u7528 \uff08borrowing\uff09\u3002\u6b63\u5982\u73b0\u5b9e\u751f\u6d3b\u4e2d\uff0c\u5982\u679c\u4e00\u4e2a\u4eba\u62e5\u6709\u67d0\u6837\u4e1c\u897f\uff0c\u4f60\u53ef\u4ee5\u4ece\u4ed6\u90a3\u91cc\u501f\u6765\u3002\u5f53\u4f60\u4f7f\u7528\u5b8c\u6bd5\uff0c\u5fc5\u987b\u8fd8\u56de\u53bb\u3002 \u6b63\u5982\u53d8\u91cf\u9ed8\u8ba4\u662f\u4e0d\u53ef\u53d8\u7684\uff0c\u5f15\u7528\u4e5f\u4e00\u6837\u3002\uff08\u9ed8\u8ba4\uff09\u4e0d\u5141\u8bb8\u4fee\u6539 \u5f15\u7528 \u7684\u503c\u3002 \u53ef\u53d8\u5f15\u7528 \u5141\u8bb8\u6211\u4eec\u4fee\u6539\u4e00\u4e2a\u501f\u7528\u7684\u503c\uff0c\u8fd9\u5c31\u662f \u53ef\u53d8\u5f15\u7528 \uff08mutable reference\uff09 fn main () { let mut s = String :: from ( \"hello\" ); // \u5fc5\u987b\u5c06 s \u6539\u4e3a mut\uff0c \u58f0\u660e\u53ef\u53d8 change ( & mut s ); // \u4f20\u5165\u53ef\u53d8\u5f15\u7528 } // \u58f0\u660e\u53ef\u53d8\u5f15\u7528 fn change ( some_string : & mut String ) { some_string . push_str ( \", world\" ); // \u56e0\u4e3a\u53ef\u53d8\uff0c\u6240\u4ee5\u53ef\u4ee5\u66f4\u6539\u3002 } \u53ef\u53d8\u5f15\u7528\u6709\u4e00\u4e2a\u5f88\u5927\u7684\u9650\u5236\uff1a \u5982\u679c\u4f60\u6709\u4e00\u4e2a\u5bf9\u8be5\u53d8\u91cf\u7684\u53ef\u53d8\u5f15\u7528\uff0c\u4f60\u5c31\u4e0d\u80fd\u518d\u521b\u5efa\u5bf9\u8be5\u53d8\u91cf\u7684\u5f15\u7528 \u3002\u8fd9\u4e9b\u5c1d\u8bd5\u521b\u5efa\u4e24\u4e2a s \u7684\u53ef\u53d8\u5f15\u7528\u7684\u4ee3\u7801\u4f1a\u5931\u8d25\uff1a let mut s = String :: from ( \"hello\" ); let r1 = & mut s ; // \u6709\u4e00\u4e2a\u4e86 let r2 = & mut s ; // \u7b2c\u4e8c\u4e2a\u5c06\u4f1a\u62a5\u9519\u3002 println! ( \"{}, {}\" , r1 , r2 ); \u62a5\u9519\u5982\u4e0b: $ cargo run Compiling ownership v0 . 1.0 ( file : ///projects/ownership) error [ E0499 ] : cannot borrow ` s ` as mutable more than once at a time - -> src / main . rs : 5 : 14 | 4 | let r1 = & mut s ; | ------ first mutable borrow occurs here 5 | let r2 = & mut s ; | ^^^^^^ second mutable borrow occurs here 6 | 7 | println! ( \"{}, {}\" , r1 , r2 ); | -- first borrow later used here For more information about this error , try ` rustc -- explain E0499 ` . error : could not compile ` ownership ` due to previous error \u8fd9\u4e00\u9650\u5236\u4ee5\u4e00\u79cd\u975e\u5e38\u5c0f\u5fc3\u8c28\u614e\u7684\u65b9\u5f0f\u5141\u8bb8\u53ef\u53d8\u6027\uff0c \u9632\u6b62\u540c\u4e00\u65f6\u95f4\u5bf9\u540c\u4e00\u6570\u636e\u5b58\u5728\u591a\u4e2a\u53ef\u53d8\u5f15\u7528 \u3002\u65b0 Rustacean \u4eec\u7ecf\u5e38\u96be\u4ee5\u9002\u5e94\u8fd9\u4e00\u70b9\uff0c\u56e0\u4e3a\u5927\u90e8\u5206\u8bed\u8a00\u4e2d\u53d8\u91cf\u4efb\u4f55\u65f6\u5019\u90fd\u662f\u53ef\u53d8\u7684\u3002\u8fd9\u4e2a\u9650\u5236\u7684\u597d\u5904\u662f Rust \u53ef\u4ee5\u5728\u7f16\u8bd1\u65f6\u5c31\u907f\u514d\u6570\u636e\u7ade\u4e89\u3002 \u6570\u636e\u7ade\u4e89 \uff08data race\uff09\u7c7b\u4f3c\u4e8e\u7ade\u6001\u6761\u4ef6\uff0c\u5b83\u53ef\u7531\u8fd9\u4e09\u4e2a\u884c\u4e3a\u9020\u6210\uff1a \u4e24\u4e2a\u6216\u66f4\u591a\u6307\u9488\u540c\u65f6\u8bbf\u95ee\u540c\u4e00\u6570\u636e\u3002 \u81f3\u5c11\u6709\u4e00\u4e2a\u6307\u9488\u88ab\u7528\u6765\u5199\u5165\u6570\u636e\u3002 \u6ca1\u6709\u540c\u6b65\u6570\u636e\u8bbf\u95ee\u7684\u673a\u5236\u3002 \u6570\u636e\u7ade\u4e89\u4f1a\u5bfc\u81f4\u672a\u5b9a\u4e49\u884c\u4e3a\uff0c\u96be\u4ee5\u5728\u8fd0\u884c\u65f6\u8ffd\u8e2a\uff0c\u5e76\u4e14\u96be\u4ee5\u8bca\u65ad\u548c\u4fee\u590d\uff1bRust \u907f\u514d\u4e86\u8fd9\u79cd\u60c5\u51b5\u7684\u53d1\u751f\uff0c\u56e0\u4e3a\u5b83\u751a\u81f3\u4e0d\u4f1a\u7f16\u8bd1\u5b58\u5728\u6570\u636e\u7ade\u4e89\u7684\u4ee3\u7801\uff01 \u4e00\u5982\u65e2\u5f80\uff0c\u53ef\u4ee5\u4f7f\u7528\u5927\u62ec\u53f7\u6765\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u4f5c\u7528\u57df\uff0c\u4ee5\u5141\u8bb8\u62e5\u6709\u591a\u4e2a\u53ef\u53d8\u5f15\u7528\uff0c\u53ea\u662f\u4e0d\u80fd \u540c\u65f6 \u62e5\u6709\uff1a fn main () { let mut s = String :: from ( \"hello\" ); { let r1 = & mut s ; } // r1 \u5728\u8fd9\u91cc\u79bb\u5f00\u4e86\u4f5c\u7528\u57df\uff0c\u6240\u4ee5\u6211\u4eec\u5b8c\u5168\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u5f15\u7528 let r2 = & mut s ; } Rust \u5728\u540c\u65f6\u4f7f\u7528\u53ef\u53d8\u4e0e\u4e0d\u53ef\u53d8\u5f15\u7528\u65f6\u4e5f\u91c7\u7528\u7684\u7c7b\u4f3c\u7684\u89c4\u5219\u3002\u8fd9\u4e9b\u4ee3\u7801\u4f1a\u5bfc\u81f4\u4e00\u4e2a\u9519\u8bef\uff1a let mut s = String :: from ( \"hello\" ); let r1 = & s ; // \u6ca1\u95ee\u9898 let r2 = & s ; // \u6ca1\u95ee\u9898 let r3 = & mut s ; // \u5927\u95ee\u9898 println! ( \"{}, {}, and {}\" , r1 , r2 , r3 ); // \u4f7f\u7528\u4e0d\u53ef\u53d8\u5f15\u7528\u65f6\uff0c\u540c\u65f6\u53c8\u4f7f\u7528\u4e86\u53ef\u53d8\u5f15\u7528\u3002 \u9519\u8bef\u5982\u4e0b\uff1a $ cargo run Compiling ownership v0 . 1.0 ( file : ///projects/ownership) error [ E0502 ] : cannot borrow ` s ` as mutable because it is also borrowed as immutable - -> src / main . rs : 6 : 14 | 4 | let r1 = & s ; // no problem | -- immutable borrow occurs here 5 | let r2 = & s ; // no problem 6 | let r3 = & mut s ; // BIG PROBLEM | ^^^^^^ mutable borrow occurs here 7 | 8 | println! ( \"{}, {}, and {}\" , r1 , r2 , r3 ); | -- immutable borrow later used here For more information about this error , try ` rustc -- explain E0502 ` . error : could not compile ` ownership ` due to previous error \u54c7\u54e6\uff01\u6211\u4eec \u4e5f \u4e0d\u80fd\u5728\u62e5\u6709\u4e0d\u53ef\u53d8\u5f15\u7528\u7684\u540c\u65f6\u62e5\u6709\u53ef\u53d8\u5f15\u7528\u3002 \u6ce8\u610f \u4e00\u4e2a\u5f15\u7528\u7684\u4f5c\u7528\u57df\u4ece\u58f0\u660e\u7684\u5730\u65b9\u5f00\u59cb\u4e00\u76f4\u6301\u7eed\u5230\u6700\u540e\u4e00\u6b21\u4f7f\u7528\u4e3a\u6b62 \u3002\u4f8b\u5982\uff0c\u56e0\u4e3a\u6700\u540e\u4e00\u6b21\u4f7f\u7528 \u4e0d\u53ef\u53d8\u5f15\u7528 \uff08println!)\uff0c\u53d1\u751f\u5728\u58f0\u660e\u53ef\u53d8\u5f15\u7528\u4e4b\u524d\uff0c\u6240\u4ee5\u5982\u4e0b\u4ee3\u7801\u662f\u53ef\u4ee5\u7f16\u8bd1\u7684\uff1a let mut s = String :: from ( \"hello\" ); let r1 = & s ; // \u6ca1\u95ee\u9898 let r2 = & s ; // \u6ca1\u95ee\u9898 println! ( \"{} and {}\" , r1 , r2 ); // \u6b64\u4f4d\u7f6e\u4e4b\u540e r1 \u548c r2 \u4e0d\u518d\u4f7f\u7528 let r3 = & mut s ; // \u6ca1\u95ee\u9898 println! ( \"{}\" , r3 ); \u4e0d\u53ef\u53d8\u5f15\u7528 r1 \u548c r2 \u7684\u4f5c\u7528\u57df\u5728 println! \u6700\u540e\u4e00\u6b21\u4f7f\u7528\u4e4b\u540e\u7ed3\u675f\uff0c\u8fd9\u4e5f\u662f\u521b\u5efa\u53ef\u53d8\u5f15\u7528 r3 \u7684\u5730\u65b9\u3002\u5b83\u4eec\u7684\u4f5c\u7528\u57df \u6ca1\u6709\u91cd\u53e0 \uff0c\u6240\u4ee5\u4ee3\u7801\u662f\u53ef\u4ee5\u7f16\u8bd1\u7684\u3002 \u7f16\u8bd1\u5668\u5728\u4f5c\u7528\u57df\u7ed3\u675f\u4e4b\u524d\u5224\u65ad\u4e0d\u518d\u4f7f\u7528\u7684\u5f15\u7528\u7684\u80fd\u529b\u88ab\u79f0\u4e3a \u975e\u8bcd\u6cd5\u4f5c\u7528\u57df\u751f\u547d\u5468\u671f \uff08Non-Lexical Lifetimes\uff0c\u7b80\u79f0 NLL\uff09\u3002\u4f60\u53ef\u4ee5\u5728 The Edition Guide \u4e2d\u9605\u8bfb\u66f4\u591a\u5173\u4e8e\u5b83\u7684\u4fe1\u606f\u3002 \u60ac\u5782\u5f15\u7528\uff08Dangling References\uff09 \u6240\u8c13 \u60ac\u5782\u6307\u9488 \u662f\u5176\u6307\u5411\u7684\u5185\u5b58\u53ef\u80fd\u5df2\u7ecf\u88ab\u5206\u914d\u7ed9\u5176\u5b83\u6301\u6709\u8005\u3002\u76f8\u6bd4\u4e4b\u4e0b\uff0c\u5728 Rust \u4e2d\u7f16\u8bd1\u5668\u786e\u4fdd\u5f15\u7528\u6c38\u8fdc\u4e5f\u4e0d\u4f1a\u53d8\u6210\u60ac\u5782\u72b6\u6001\uff1a \u5f53\u4f60\u62e5\u6709\u4e00\u4e9b\u6570\u636e\u7684\u5f15\u7528\uff0c\u7f16\u8bd1\u5668\u786e\u4fdd\u6570\u636e\u4e0d\u4f1a\u5728\u5176\u5f15\u7528\u4e4b\u524d\u79bb\u5f00\u4f5c\u7528\u57df\u3002 \u5f53\u5c1d\u8bd5\u521b\u5efa\u4e00\u4e2a\u60ac\u5782\u5f15\u7528\u65f6\uff0cRust \u4f1a\u901a\u8fc7\u4e00\u4e2a\u7f16\u8bd1\u65f6\u9519\u8bef\u6765\u907f\u514d\uff1a fn main () { let reference_to_nothing = dangle (); } fn dangle () -> & String { // dangle \u8fd4\u56de\u4e00\u4e2a\u5b57\u7b26\u4e32\u7684\u5f15\u7528 let s = String :: from ( \"hello\" ); // s \u662f\u4e00\u4e2a\u65b0\u5b57\u7b26\u4e32 & s // \u8fd4\u56de\u5b57\u7b26\u4e32 s \u7684\u5f15\u7528 } // \u8fd9\u91cc s \u79bb\u5f00\u4f5c\u7528\u57df\u5e76\u88ab\u4e22\u5f03\u3002\u5176\u5185\u5b58\u88ab\u91ca\u653e\u3002 // \u5371\u9669\uff01 \u9519\u8bef: $ cargo run Compiling ownership v0.1.0 ( file:///projects/ownership ) error [ E0106 ] : missing lifetime specifier --> src/main.rs:5:16 | 5 | fn dangle () -> & String { | ^ expected named lifetime parameter | = help: this function 's return type contains a borrowed value, but there is no value for it to be borrowed from help: consider using the `' static ` lifetime | 5 | fn dangle () -> & ' static String { | ~~~~~~~~ For more information about this error, try ` rustc --explain E0106 ` . error: could not compile ` ownership ` due to previous error \u56e0\u4e3a s \u662f\u5728 dangle \u51fd\u6570\u5185\u521b\u5efa\u7684\uff0c\u5f53 dangle \u7684\u4ee3\u7801\u6267\u884c\u5b8c\u6bd5\u540e\uff0cs \u5c06\u88ab\u91ca\u653e\u3002\u4e0d\u8fc7\u6211\u4eec\u5c1d\u8bd5\u8fd4\u56de\u5b83\u7684\u5f15\u7528\u3002\u8fd9\u610f\u5473\u7740\u8fd9\u4e2a\u5f15\u7528\u4f1a\u6307\u5411\u4e00\u4e2a\u65e0\u6548\u7684 String\uff0c\u8fd9\u53ef\u4e0d\u5bf9\uff01Rust \u4e0d\u4f1a\u5141\u8bb8\u8fd9\u4e48\u505a\u3002 \u8fd9\u91cc\u7684\u89e3\u51b3\u65b9\u6cd5\u662f\u76f4\u63a5\u8fd4\u56de String\uff1a fn no_dangle () -> String { let s = String :: from ( \"hello\" ); s // \u76f4\u63a5\u8fd4\u56des // \u6240\u6709\u6743\u88ab\u79fb\u52a8\u51fa\u53bb\uff0c\u6240\u4ee5\u6ca1\u6709\u503c\u88ab\u91ca\u653e\u3002 } \u6982\u62ec\uff1a \u5728\u4efb\u610f\u7ed9\u5b9a\u65f6\u95f4\uff0c\u8981\u4e48 \u53ea\u80fd\u6709\u4e00\u4e2a\u53ef\u53d8\u5f15\u7528\uff0c\u8981\u4e48 \u53ea\u80fd\u6709\u591a\u4e2a\u4e0d\u53ef\u53d8\u5f15\u7528\u3002 \u5f15\u7528\u5fc5\u987b\u603b\u662f\u6709\u6548\u7684\u3002 \u5f15\u7528\u7684\u89c4\u5219 Slice\u7c7b\u578b","title":"\u6240\u6709\u6743"},{"location":"ownership/#_1","text":"Rust \u7684\u6838\u5fc3\u529f\u80fd\uff08\u4e4b\u4e00\uff09\u662f \u6240\u6709\u6743\uff08ownership\uff09\u3002 \u6240\u6709\u7a0b\u5e8f\u90fd\u5fc5\u987b\u7ba1\u7406\u5176\u8fd0\u884c\u65f6\u4f7f\u7528\u8ba1\u7b97\u673a\u5185\u5b58\u7684\u65b9\u5f0f\u3002 \u4e00\u4e9b\u8bed\u8a00\u4e2d\u5177\u6709\u5783\u573e\u56de\u6536\u673a\u5236\uff0c\u5728\u7a0b\u5e8f\u8fd0\u884c\u65f6\u6709\u89c4\u5f8b\u5730\u5bfb\u627e\u4e0d\u518d\u4f7f\u7528\u7684\u5185\u5b58\uff1b \u5728\u53e6\u4e00\u4e9b\u8bed\u8a00\u4e2d\uff0c\u7a0b\u5e8f\u5458\u5fc5\u987b\u4eb2\u81ea\u5206\u914d\u548c\u91ca\u653e\u5185\u5b58\u3002 Rust \u5219\u9009\u62e9\u4e86\u7b2c\u4e09\u79cd\u65b9\u5f0f\uff1a \u901a\u8fc7\u6240\u6709\u6743\u7cfb\u7edf\u7ba1\u7406\u5185\u5b58\uff0c\u7f16\u8bd1\u5668\u5728\u7f16\u8bd1\u65f6\u4f1a\u6839\u636e\u4e00\u7cfb\u5217\u7684\u89c4\u5219\u8fdb\u884c\u68c0\u67e5\u3002\u5982\u679c\u8fdd\u53cd\u4e86\u4efb\u4f55\u8fd9\u4e9b\u89c4\u5219\uff0c\u7a0b\u5e8f\u90fd\u4e0d\u80fd\u7f16\u8bd1\u3002\u5728\u8fd0\u884c\u65f6\uff0c\u6240\u6709\u6743\u7cfb\u7edf\u7684\u4efb\u4f55\u529f\u80fd\u90fd\u4e0d\u4f1a\u51cf\u6162\u7a0b\u5e8f\u3002","title":"\u6240\u6709\u6743"},{"location":"ownership/#_2","text":"\u6808\uff08Stack\uff09\u4e0e\u5806\uff08Heap\uff09 \u5728\u5f88\u591a\u8bed\u8a00\u4e2d\uff0c\u4f60\u5e76\u4e0d\u9700\u8981\u7ecf\u5e38\u8003\u8651\u5230\u6808\u4e0e\u5806\u3002\u4e0d\u8fc7\u5728\u50cf Rust \u8fd9\u6837\u7684\u7cfb\u7edf\u7f16\u7a0b\u8bed\u8a00\u4e2d\uff0c\u503c\u662f\u4f4d\u4e8e\u6808\u4e0a\u8fd8\u662f\u5806\u4e0a\u5728\u66f4\u5927\u7a0b\u5ea6\u4e0a\u5f71\u54cd\u4e86\u8bed\u8a00\u7684\u884c\u4e3a\u4ee5\u53ca\u4e3a\u4f55\u5fc5\u987b\u505a\u51fa\u8fd9\u6837\u7684\u6289\u62e9\u3002 \u6808\u548c\u5806\u90fd\u662f\u4ee3\u7801\u5728\u8fd0\u884c\u65f6\u53ef\u4f9b\u4f7f\u7528\u7684\u5185\u5b58\uff0c\u4f46\u662f\u5b83\u4eec\u7684\u7ed3\u6784\u4e0d\u540c\u3002 \u6808\u4ee5\u653e\u5165\u503c\u7684\u987a\u5e8f\u5b58\u50a8\u503c\u5e76\u4ee5\u76f8\u53cd\u987a\u5e8f\u53d6\u51fa\u503c \u3002\u8fd9\u4e5f\u88ab\u79f0\u4f5c \u540e\u8fdb\u5148\u51fa \uff08last in, first out\uff09\u3002\u60f3\u8c61\u4e00\u4e0b\u4e00\u53e0\u76d8\u5b50\uff1a\u5f53\u589e\u52a0\u66f4\u591a\u76d8\u5b50\u65f6\uff0c\u628a\u5b83\u4eec\u653e\u5728\u76d8\u5b50\u5806\u7684\u9876\u90e8\uff0c\u5f53\u9700\u8981\u76d8\u5b50\u65f6\uff0c\u4e5f\u4ece\u9876\u90e8\u62ff\u8d70\u3002\u4e0d\u80fd\u4ece\u4e2d\u95f4\u4e5f\u4e0d\u80fd\u4ece\u5e95\u90e8\u589e\u52a0\u6216\u62ff\u8d70\u76d8\u5b50\uff01\u589e\u52a0\u6570\u636e\u53eb\u505a \u8fdb\u6808 \uff08pushing onto the stack\uff09\uff0c\u800c\u79fb\u51fa\u6570\u636e\u53eb\u505a \u51fa\u6808 \uff08popping off the stack\uff09\u3002 \u6808\u4e2d\u7684\u6240\u6709\u6570\u636e\u90fd\u5fc5\u987b\u5360\u7528\u5df2\u77e5\u4e14\u56fa\u5b9a\u7684\u5927\u5c0f \u3002 \u5728\u7f16\u8bd1\u65f6\u5927\u5c0f\u672a\u77e5\u6216\u5927\u5c0f\u53ef\u80fd\u53d8\u5316\u7684\u6570\u636e\uff0c\u8981\u6539\u4e3a\u5b58\u50a8\u5728\u5806\u4e0a \u3002 \u5806\u662f\u7f3a\u4e4f\u7ec4\u7ec7\u7684\uff1a\u5f53\u5411\u5806\u653e\u5165\u6570\u636e\u65f6\uff0c\u4f60\u8981\u8bf7\u6c42\u4e00\u5b9a\u5927\u5c0f\u7684\u7a7a\u95f4\u3002 \u5185\u5b58\u5206\u914d\u5668 \uff08memory allocator\uff09\u5728\u5806\u7684\u67d0\u5904\u627e\u5230\u4e00\u5757\u8db3\u591f\u5927\u7684\u7a7a\u4f4d\uff0c\u628a\u5b83\u6807\u8bb0\u4e3a\u5df2\u4f7f\u7528\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a\u8868\u793a\u8be5\u4f4d\u7f6e\u5730\u5740\u7684 \u6307\u9488 \uff08pointer\uff09\u3002\u8fd9\u4e2a\u8fc7\u7a0b\u79f0\u4f5c \u5728\u5806\u4e0a\u5206\u914d\u5185\u5b58 \uff08allocating on the heap\uff09\uff0c\u6709\u65f6\u7b80\u79f0\u4e3a \u201c \u5206\u914d \u201d\uff08allocating\uff09\u3002\uff08\u5c06\u6570\u636e\u63a8\u5165\u6808\u4e2d\u5e76\u4e0d\u88ab\u8ba4\u4e3a\u662f\u5206\u914d\uff09\u3002\u56e0\u4e3a\u6307\u5411\u653e\u5165\u5806\u4e2d\u6570\u636e\u7684\u6307\u9488\u662f\u5df2\u77e5\u7684\u5e76\u4e14\u5927\u5c0f\u662f\u56fa\u5b9a\u7684\uff0c\u4f60\u53ef\u4ee5\u5c06\u8be5\u6307\u9488\u5b58\u50a8\u5728\u6808\u4e0a\uff0c\u4e0d\u8fc7\u5f53\u9700\u8981\u5b9e\u9645\u6570\u636e\u65f6\uff0c\u5fc5\u987b\u8bbf\u95ee\u6307\u9488\u3002\u60f3\u8c61\u4e00\u4e0b\u53bb\u9910\u9986\u5c31\u5ea7\u5403\u996d\u3002\u5f53\u8fdb\u5165\u65f6\uff0c\u4f60\u8bf4\u660e\u6709\u51e0\u4e2a\u4eba\uff0c\u9910\u9986\u5458\u5de5\u4f1a\u627e\u5230\u4e00\u4e2a\u591f\u5927\u7684\u7a7a\u684c\u5b50\u5e76\u9886\u4f60\u4eec\u8fc7\u53bb\u3002\u5982\u679c\u6709\u4eba\u6765\u8fdf\u4e86\uff0c\u4ed6\u4eec\u4e5f\u53ef\u4ee5\u901a\u8fc7\u8be2\u95ee\u6765\u627e\u5230\u4f60\u4eec\u5750\u5728\u54ea\u3002 \u5165\u6808\u6bd4\u5728\u5806\u4e0a\u5206\u914d\u5185\u5b58\u8981\u5feb \uff0c\u56e0\u4e3a\uff08\u5165\u6808\u65f6\uff09\u5206\u914d\u5668\u65e0\u9700\u4e3a\u5b58\u50a8\u65b0\u6570\u636e\u53bb\u641c\u7d22\u5185\u5b58\u7a7a\u95f4\uff1b\u5176\u4f4d\u7f6e\u603b\u662f\u5728\u6808\u9876\u3002\u76f8\u6bd4\u4e4b\u4e0b\uff0c \u5728\u5806\u4e0a\u5206\u914d\u5185\u5b58\u5219\u9700\u8981\u66f4\u591a\u7684\u5de5\u4f5c\uff0c\u8fd9\u662f\u56e0\u4e3a\u5206\u914d\u5668\u5fc5\u987b\u9996\u5148\u627e\u5230\u4e00\u5757\u8db3\u591f\u5b58\u653e\u6570\u636e\u7684\u5185\u5b58\u7a7a\u95f4\uff0c\u5e76\u63a5\u7740\u505a\u4e00\u4e9b\u8bb0\u5f55\u4e3a\u4e0b\u4e00\u6b21\u5206\u914d\u505a\u51c6\u5907\u3002 \u8bbf\u95ee\u5806\u4e0a\u7684\u6570\u636e\u6bd4\u8bbf\u95ee\u6808\u4e0a\u7684\u6570\u636e\u6162\uff0c\u56e0\u4e3a\u5fc5\u987b\u901a\u8fc7\u6307\u9488\u6765\u8bbf\u95ee \u3002\u73b0\u4ee3\u5904\u7406\u5668\u5728\u5185\u5b58\u4e2d\u8df3\u8f6c\u8d8a\u5c11\u5c31\u8d8a\u5feb\uff08\u7f13\u5b58\uff09\u3002\u7ee7\u7eed\u7c7b\u6bd4\uff0c\u5047\u8bbe\u6709\u4e00\u4e2a\u670d\u52a1\u5458\u5728\u9910\u5385\u91cc\u5904\u7406\u591a\u4e2a\u684c\u5b50\u7684\u70b9\u83dc\u3002\u5728\u4e00\u4e2a\u684c\u5b50\u62a5\u5b8c\u6240\u6709\u83dc\u540e\u518d\u79fb\u52a8\u5230\u4e0b\u4e00\u4e2a\u684c\u5b50\u662f\u6700\u6709\u6548\u7387\u7684\u3002\u4ece\u684c\u5b50 A \u542c\u4e00\u4e2a\u83dc\uff0c\u63a5\u7740\u684c\u5b50 B \u542c\u4e00\u4e2a\u83dc\uff0c\u7136\u540e\u518d\u684c\u5b50 A\uff0c\u7136\u540e\u518d\u684c\u5b50 B \u8fd9\u6837\u7684\u6d41\u7a0b\u4f1a\u66f4\u52a0\u7f13\u6162\u3002\u51fa\u4e8e\u540c\u6837\u539f\u56e0\uff0c\u5904\u7406\u5668\u5728\u5904\u7406\u7684\u6570\u636e\u5f7c\u6b64\u8f83\u8fd1\u7684\u65f6\u5019\uff08\u6bd4\u5982\u5728\u6808\u4e0a\uff09\u6bd4\u8f83\u8fdc\u7684\u65f6\u5019\uff08\u6bd4\u5982\u53ef\u80fd\u5728\u5806\u4e0a\uff09\u80fd\u66f4\u597d\u7684\u5de5\u4f5c\u3002 \u5f53\u4f60\u7684\u4ee3\u7801\u8c03\u7528\u4e00\u4e2a\u51fd\u6570\u65f6\uff0c\u4f20\u9012\u7ed9\u51fd\u6570\u7684\u503c\uff08\u5305\u62ec\u53ef\u80fd\u6307\u5411\u5806\u4e0a\u6570\u636e\u7684\u6307\u9488\uff09\u548c\u51fd\u6570\u7684\u5c40\u90e8\u53d8\u91cf\u88ab\u538b\u5165\u6808\u4e2d\u3002\u5f53\u51fd\u6570\u7ed3\u675f\u65f6\uff0c\u8fd9\u4e9b\u503c\u88ab\u79fb\u51fa\u6808\u3002 \u8ddf\u8e2a\u54ea\u90e8\u5206\u4ee3\u7801\u6b63\u5728\u4f7f\u7528\u5806\u4e0a\u7684\u54ea\u4e9b\u6570\u636e\uff0c\u6700\u5927\u9650\u5ea6\u7684\u51cf\u5c11\u5806\u4e0a\u7684\u91cd\u590d\u6570\u636e\u7684\u6570\u91cf\uff0c\u4ee5\u53ca\u6e05\u7406\u5806\u4e0a\u4e0d\u518d\u4f7f\u7528\u7684\u6570\u636e\u786e\u4fdd\u4e0d\u4f1a\u8017\u5c3d\u7a7a\u95f4\uff0c\u8fd9\u4e9b\u95ee\u9898\u6b63\u662f\u6240\u6709\u6743\u7cfb\u7edf\u8981\u5904\u7406\u7684 \u3002\u4e00\u65e6\u7406\u89e3\u4e86\u6240\u6709\u6743\uff0c\u4f60\u5c31\u4e0d\u9700\u8981\u7ecf\u5e38\u8003\u8651\u6808\u548c\u5806\u4e86\uff0c\u4e0d\u8fc7\u660e\u767d\u4e86\u6240\u6709\u6743\u7684\u4e3b\u8981\u76ee\u7684\u5c31\u662f\u4e3a\u4e86\u7ba1\u7406\u5806\u6570\u636e\uff0c\u80fd\u591f\u5e2e\u52a9\u89e3\u91ca\u4e3a\u4ec0\u4e48\u6240\u6709\u6743\u8981\u4ee5\u8fd9\u79cd\u65b9\u5f0f\u5de5\u4f5c\u3002","title":"\u7b80\u4ecb"},{"location":"ownership/#_3","text":"\u9996\u5148\uff0c\u8ba9\u6211\u4eec\u770b\u4e00\u4e0b\u6240\u6709\u6743\u7684\u89c4\u5219. Rust \u4e2d\u7684\u6bcf\u4e00\u4e2a\u503c\u90fd\u6709\u4e00\u4e2a \u6240\u6709\u8005 \uff08owner\uff09\u3002 \u503c\u5728\u4efb\u4e00\u65f6\u523b\u6709\u4e14\u53ea\u6709\u4e00\u4e2a\u6240\u6709\u8005\u3002 \u5f53\u6240\u6709\u8005\uff08\u53d8\u91cf\uff09\u79bb\u5f00\u4f5c\u7528\u57df\uff0c\u8fd9\u4e2a\u503c\u5c06\u88ab\u4e22\u5f03\u3002","title":"\u6240\u6709\u6743\u89c4\u5219"},{"location":"ownership/#_4","text":"\u4f5c\u7528\u57df\u662f\u4e00\u4e2a\u9879\uff08item\uff09\u5728\u7a0b\u5e8f\u4e2d\u6709\u6548\u7684\u8303\u56f4\u3002\u5047\u8bbe\u6709\u8fd9\u6837\u4e00\u4e2a\u53d8\u91cf\uff1a { // s \u5728\u8fd9\u91cc\u65e0\u6548, \u5b83\u5c1a\u672a\u58f0\u660e let s = \"hello\" ; // \u4ece\u6b64\u5904\u8d77\uff0cs \u662f\u6709\u6548\u7684 // \u4f7f\u7528 s println! ( \"s is {s}\" ) } // \u6b64\u4f5c\u7528\u57df\u5df2\u7ed3\u675f\uff0cs \u4e0d\u518d\u6709\u6548 \u4e24\u4e2a\u91cd\u8981\u7684\u65f6\u95f4\u70b9\uff1a \u5f53 s \u8fdb\u5165\u4f5c\u7528\u57df \u65f6\uff0c\u5b83\u5c31\u662f\u6709\u6548\u7684\u3002 \u8fd9\u4e00\u76f4\u6301\u7eed\u5230\u5b83 \u79bb\u5f00\u4f5c\u7528\u57df \u4e3a\u6b62\u3002","title":"\u53d8\u91cf\u4f5c\u7528\u57df"},{"location":"ownership/#string","text":"\u5df2\u7ecf\u89c1\u8fc7\u5b57\u7b26\u4e32\u5b57\u9762\u503c\uff0c\u5373\u88ab\u786c\u7f16\u7801\u8fdb\u7a0b\u5e8f\u91cc\u7684\u5b57\u7b26\u4e32\u503c\u3002\u5b57\u7b26\u4e32\u5b57\u9762\u503c\u662f\u5f88\u65b9\u4fbf\u7684\uff0c\u4e0d\u8fc7\u5b83\u4eec\u5e76\u4e0d\u9002\u5408\u4f7f\u7528\u6587\u672c\u7684\u6bcf\u4e00\u79cd\u573a\u666f\u3002\u539f\u56e0\u4e4b\u4e00\u5c31\u662f \u5b83\u4eec\u662f\u4e0d\u53ef\u53d8\u7684 \u3002\u53e6\u4e00\u4e2a\u539f\u56e0\u662f \u5e76\u975e\u6240\u6709\u5b57\u7b26\u4e32\u7684\u503c\u90fd\u80fd\u5728\u7f16\u5199\u4ee3\u7801\u65f6\u5c31\u77e5\u9053 \uff1a\u4f8b\u5982\uff0c\u8981\u662f\u60f3\u83b7\u53d6\u7528\u6237\u8f93\u5165\u5e76\u5b58\u50a8\u8be5\u600e\u4e48\u529e\u5462\uff1f\u4e3a\u6b64\uff0cRust \u6709\u7b2c\u4e8c\u4e2a\u5b57\u7b26\u4e32\u7c7b\u578b\uff0cString\u3002\u8fd9\u4e2a\u7c7b\u578b\u7ba1\u7406\u88ab\u5206\u914d\u5230\u5806\u4e0a\u7684\u6570\u636e\uff0c\u6240\u4ee5\u80fd\u591f\u5b58\u50a8\u5728\u7f16\u8bd1\u65f6\u672a\u77e5\u5927\u5c0f\u7684\u6587\u672c\u3002\u53ef\u4ee5\u4f7f\u7528 from \u51fd\u6570\u57fa\u4e8e\u5b57\u7b26\u4e32\u5b57\u9762\u503c\u6765\u521b\u5efa String \uff0c\u5982\u4e0b\uff1a let s = String :: from ( \"hello\" ); // \u4e24\u4e2a\u5192\u53f7 :: \u662f\u8fd0\u7b97\u7b26\uff0c\u5141\u8bb8\u5c06\u7279\u5b9a\u7684 from \u51fd\u6570\u7f6e\u4e8e String \u7c7b\u578b\u7684\u547d\u540d\u7a7a\u95f4\uff08namespace\uff09\u4e0b\uff0c\u800c\u4e0d\u9700\u8981\u4f7f\u7528\u7c7b\u4f3c string_from \u8fd9\u6837\u7684\u540d\u5b57\u3002 \u53ef\u4ee5 \u4fee\u6539\u6b64\u7c7b\u5b57\u7b26\u4e32 \uff1a let mut s = String :: from ( \"hello\" ); s . push_str ( \", world!\" ); // push_str() \u5728\u5b57\u7b26\u4e32\u540e\u8ffd\u52a0\u5b57\u9762\u503c println! ( \"{}\" , s ); // \u5c06\u6253\u5370 `hello, world!` // \u90a3\u4e48\u8fd9\u91cc\u6709\u4ec0\u4e48\u533a\u522b\u5462\uff1f // \u4e3a\u4ec0\u4e48 String \u53ef\u53d8\u800c\u5b57\u9762\u503c\u5374\u4e0d\u884c\u5462\uff1f // \u533a\u522b\u5728\u4e8e\u4e24\u4e2a\u7c7b\u578b\u5bf9\u5185\u5b58\u7684\u5904\u7406\u4e0a\u3002","title":"String \u7c7b\u578b"},{"location":"ownership/#_5","text":"\u5c31\u5b57\u7b26\u4e32\u5b57\u9762\u503c\u6765\u8bf4\uff0c\u6211\u4eec\u5728\u7f16\u8bd1\u65f6\u5c31\u77e5\u9053\u5176\u5185\u5bb9\uff0c\u6240\u4ee5\u6587\u672c\u88ab\u76f4\u63a5\u786c\u7f16\u7801\u8fdb\u6700\u7ec8\u7684\u53ef\u6267\u884c\u6587\u4ef6\u4e2d\u3002\u8fd9\u4f7f\u5f97\u5b57\u7b26\u4e32\u5b57\u9762\u503c\u5feb\u901f\u4e14\u9ad8\u6548\u3002 \u4e0d\u8fc7\u8fd9\u4e9b\u7279\u6027\u90fd\u53ea\u5f97\u76ca\u4e8e\u5b57\u7b26\u4e32\u5b57\u9762\u503c\u7684\u4e0d\u53ef\u53d8\u6027\u3002 \u4e0d\u5e78\u7684\u662f\uff0c\u6211\u4eec\u4e0d\u80fd\u4e3a\u4e86\u6bcf\u4e00\u4e2a\u5728\u7f16\u8bd1\u65f6\u5927\u5c0f\u672a\u77e5\u7684\u6587\u672c\u800c\u5c06\u4e00\u5757\u5185\u5b58\u653e\u5165\u4e8c\u8fdb\u5236\u6587\u4ef6\u4e2d\uff0c\u5e76\u4e14\u5b83\u7684\u5927\u5c0f\u8fd8\u53ef\u80fd\u968f\u7740\u7a0b\u5e8f\u8fd0\u884c\u800c\u6539\u53d8\u3002 \u5bf9\u4e8e String \u7c7b\u578b\uff0c\u4e3a\u4e86\u652f\u6301\u4e00\u4e2a\u53ef\u53d8\uff0c\u53ef\u589e\u957f\u7684\u6587\u672c\u7247\u6bb5\uff0c \u9700\u8981\u5728\u5806\u4e0a\u5206\u914d\u4e00\u5757\u5728\u7f16\u8bd1\u65f6\u672a\u77e5\u5927\u5c0f\u7684\u5185\u5b58\u6765\u5b58\u653e\u5185\u5bb9 \u3002\u8fd9\u610f\u5473\u7740\uff1a \u5fc5\u987b\u5728\u8fd0\u884c\u65f6\u5411\u5185\u5b58\u5206\u914d\u5668\uff08memory allocator\uff09\u8bf7\u6c42\u5185\u5b58\u3002 \u9700\u8981\u4e00\u4e2a\u5f53\u6211\u4eec\u5904\u7406\u5b8c String \u65f6\u5c06\u5185\u5b58\u8fd4\u56de\u7ed9\u5206\u914d\u5668\u7684\u65b9\u6cd5\u3002 \u7b2c\u4e00\u90e8\u5206\u7531\u6211\u4eec\u5b8c\u6210\uff1a\u5f53\u8c03\u7528 String::from \u65f6\uff0c\u5b83\u7684\u5b9e\u73b0 (implementation) \u8bf7\u6c42\u5176\u6240\u9700\u7684\u5185\u5b58\u3002\u8fd9\u5728\u7f16\u7a0b\u8bed\u8a00\u4e2d\u662f\u975e\u5e38\u901a\u7528\u7684\u3002 \u7136\u800c\uff0c\u7b2c\u4e8c\u90e8\u5206\u5b9e\u73b0\u8d77\u6765\u5c31\u5404\u6709\u533a\u522b\u4e86\u3002\u5728\u6709 \u5783\u573e\u56de\u6536 \uff08garbage collector\uff0c GC \uff09\u7684\u8bed\u8a00\u4e2d\uff0c GC \u8bb0\u5f55\u5e76\u6e05\u9664\u4e0d\u518d\u4f7f\u7528\u7684\u5185\u5b58\uff0c\u800c\u6211\u4eec\u5e76\u4e0d\u9700\u8981\u5173\u5fc3\u5b83\u3002\u5728\u5927\u90e8\u5206\u6ca1\u6709 GC \u7684\u8bed\u8a00\u4e2d\uff0c\u8bc6\u522b\u51fa\u4e0d\u518d\u4f7f\u7528\u7684\u5185\u5b58\u5e76\u8c03\u7528\u4ee3\u7801\u663e\u5f0f\u91ca\u653e\u5c31\u662f\u6211\u4eec\u7684\u8d23\u4efb\u4e86\uff0c\u8ddf\u8bf7\u6c42\u5185\u5b58\u7684\u65f6\u5019\u4e00\u6837\u3002\u4ece\u5386\u53f2\u7684\u89d2\u5ea6\u4e0a\u8bf4\u6b63\u786e\u5904\u7406\u5185\u5b58\u56de\u6536\u66fe\u7ecf\u662f\u4e00\u4e2a\u56f0\u96be\u7684\u7f16\u7a0b\u95ee\u9898\u3002\u5982\u679c\u5fd8\u8bb0\u56de\u6536\u4e86\u4f1a\u6d6a\u8d39\u5185\u5b58\u3002\u5982\u679c\u8fc7\u65e9\u56de\u6536\u4e86\uff0c\u5c06\u4f1a\u51fa\u73b0\u65e0\u6548\u53d8\u91cf\u3002\u5982\u679c\u91cd\u590d\u56de\u6536\uff0c\u8fd9\u4e5f\u662f\u4e2a bug\u3002\u6211\u4eec\u9700\u8981 \u7cbe\u786e\u7684\u4e3a\u4e00\u4e2a allocate \u914d\u5bf9\u4e00\u4e2a free \u3002 Rust \u91c7\u53d6\u4e86\u4e00\u4e2a\u4e0d\u540c\u7684\u7b56\u7565\uff1a \u5185\u5b58\u5728\u62e5\u6709\u5b83\u7684\u53d8\u91cf\u79bb\u5f00\u4f5c\u7528\u57df\u540e\u5c31\u88ab\u81ea\u52a8\u91ca\u653e \u3002\u4e0b\u9762\u662f\u4f5c\u7528\u57df\u4f8b\u5b50\u7684\u4e00\u4e2a\u4f7f\u7528 String \u800c\u4e0d\u662f\u5b57\u7b26\u4e32\u5b57\u9762\u503c\u7684\u7248\u672c\uff1a { let s = String :: from ( \"hello\" ); // \u4ece\u6b64\u5904\u8d77\uff0cs \u662f\u6709\u6548\u7684 // \u4f7f\u7528 s println! ( \"s is {s}\" ) } // \u6b64\u4f5c\u7528\u57df\u5df2\u7ed3\u675f\uff0c // s \u4e0d\u518d\u6709\u6548 \u5f53\u53d8\u91cf\u79bb\u5f00\u4f5c\u7528\u57df\uff0cRust \u4e3a\u6211\u4eec\u8c03\u7528\u4e00\u4e2a\u7279\u6b8a\u7684\u51fd\u6570\u3002\u8fd9\u4e2a\u51fd\u6570\u53eb\u505a drop \uff0cRust \u5728\u7ed3\u5c3e\u7684 } \u5904\u81ea\u52a8\u8c03\u7528 drop \u3002","title":"\u5185\u5b58\u4e0e\u5206\u914d"},{"location":"ownership/#_6","text":"\u591a\u4e2a\u53d8\u91cf\u53ef\u4ee5\u91c7\u53d6\u4e0d\u540c\u7684\u65b9\u5f0f\u4e0e\u540c\u4e00\u6570\u636e\u8fdb\u884c\u4ea4\u4e92\u3002 fn main () { let x = 5 ; let y = x ; // \u5c06\u53d8\u91cf x \u7684\u6574\u6570\u503c\u8d4b\u7ed9 y } \u201c\u5c06 5 \u7ed1\u5b9a\u5230 x\uff1b\u63a5\u7740\u751f\u6210\u4e00\u4e2a\u503c x \u7684\u62f7\u8d1d\u5e76\u7ed1\u5b9a\u5230 y\u201d\u3002 \u73b0\u5728\u6709\u4e86\u4e24\u4e2a\u53d8\u91cf\uff0cx \u548c y\uff0c\u90fd\u7b49\u4e8e 5\u3002\u8fd9\u4e5f\u6b63\u662f\u4e8b\u5b9e\u4e0a\u53d1\u751f\u4e86\u7684\uff0c\u56e0\u4e3a\u6574\u6570\u662f\u6709 \u5df2\u77e5\u56fa\u5b9a\u5927\u5c0f \u7684\u7b80\u5355\u503c\uff0c\u6240\u4ee5\u8fd9 \u4e24\u4e2a 5 \u88ab\u653e\u5165\u4e86\u6808\u4e2d \u3002 String \u7248\u672c\uff1a let s1 = String :: from ( \"hello\" ); let s2 = s1 ; // \u5f53\u6211\u4eec\u5c06 s1 \u8d4b\u503c\u7ed9 s2\uff0cString \u7684\u6570\u636e\u88ab\u590d\u5236\u4e86\uff0c\u8fd9\u610f\u5473\u7740\u6211\u4eec\u4ece\u6808\u4e0a\u62f7\u8d1d\u4e86\u5b83\u7684\u6307\u9488\u3001\u957f\u5ea6\u548c\u5bb9\u91cf\u3002 // Rust\u5e76\u6ca1\u6709\u590d\u5236\u6307\u9488\u6307\u5411\u7684\u5806\u4e0a\u6570\u636e\u3002 // \u5982\u679c Rust \u4e5f\u62f7\u8d1d\u4e86\u5806\u4e0a\u7684\u6570\u636e\uff0c\u90a3\u4e48\u64cd\u4f5c s2 = s1 \u5728\u5806\u4e0a\u6570\u636e\u6bd4\u8f83\u5927\u7684\u65f6\u5019\u4f1a\u5bf9\u8fd0\u884c\u65f6\u6027\u80fd\u9020\u6210\u975e\u5e38\u5927\u7684\u5f71\u54cd\u3002 \u8fc7\u5f53\u53d8\u91cf\u79bb\u5f00\u4f5c\u7528\u57df\u540e\uff0cRust \u81ea\u52a8\u8c03\u7528 drop \u51fd\u6570\u5e76\u6e05\u7406\u53d8\u91cf\u7684\u5806\u5185\u5b58\u3002\u4e0d\u8fc7\u4e24\u4e2a\u6570\u636e\u6307\u9488\u6307\u5411\u4e86\u540c\u4e00\u4f4d\u7f6e\u3002 \u8fd9\u5c31\u6709\u4e86\u4e00\u4e2a\u95ee\u9898\uff1a\u5f53 s2 \u548c s1 \u79bb\u5f00\u4f5c\u7528\u57df\uff0c\u4ed6\u4eec\u90fd\u4f1a\u5c1d\u8bd5\u91ca\u653e\u76f8\u540c\u7684\u5185\u5b58\u3002 \u8fd9\u662f\u4e00\u4e2a\u53eb\u505a \u4e8c\u6b21\u91ca\u653e \uff08double free\uff09\u7684\u9519\u8bef\uff0c\u4e5f\u662f\u4e4b\u524d\u63d0\u5230\u8fc7\u7684\u5185\u5b58\u5b89\u5168\u6027 bug \u4e4b\u4e00\u3002 \u4e24\u6b21\u91ca\u653e \uff08\u76f8\u540c\uff09\u5185\u5b58\u4f1a\u5bfc\u81f4\u5185\u5b58\u6c61\u67d3\uff0c\u5b83\u53ef\u80fd\u4f1a\u5bfc\u81f4\u6f5c\u5728\u7684\u5b89\u5168\u6f0f\u6d1e\u3002 \u4e3a\u4e86\u786e\u4fdd\u5185\u5b58\u5b89\u5168\uff0c\u5728 let s2 = s1 \u4e4b\u540e\uff0cRust \u8ba4\u4e3a s1 \u4e0d\u518d\u6709\u6548\uff0c\u56e0\u6b64 Rust \u4e0d\u9700\u8981\u5728 s1 \u79bb\u5f00\u4f5c\u7528\u57df\u540e\u6e05\u7406\u4efb\u4f55\u4e1c\u897f\u3002 \u5728 s2 \u88ab\u521b\u5efa\u4e4b\u540e\u5c1d\u8bd5\u4f7f\u7528 s1 \u4f1a\u53d1\u751f\u4ec0\u4e48\uff1b\u8fd9\u6bb5\u4ee3\u7801\u4e0d\u80fd\u8fd0\u884c\uff1a let s1 = String :: from ( \"hello\" ); let s2 = s1 ; println! ( \"{}, world!\" , s1 ); // \u4f1a\u5f97\u5230\u4e00\u4e2a\u9519\u8bef: value borrowed here after move // \u56e0\u4e3a Rust \u7981\u6b62\u4f7f\u7528\u65e0\u6548\u7684\u5f15\u7528\u3002 \u5982\u679c\u5728\u5176\u4ed6\u8bed\u8a00\u4e2d\u542c\u8bf4\u8fc7\u672f\u8bed \u6d45\u62f7\u8d1d \uff08shallow copy\uff09\u548c \u6df1\u62f7\u8d1d \uff08deep copy\uff09\uff0c\u90a3\u4e48\u62f7\u8d1d\u6307\u9488\u3001\u957f\u5ea6\u548c\u5bb9\u91cf\u800c\u4e0d\u62f7\u8d1d\u6570\u636e\u53ef\u80fd\u542c\u8d77\u6765\u50cf\u6d45\u62f7\u8d1d\u3002\u4e0d\u8fc7\u56e0\u4e3a Rust \u540c\u65f6\u4f7f\u7b2c\u4e00\u4e2a\u53d8\u91cf\u65e0\u6548\u4e86\uff0c\u8fd9\u4e2a\u64cd\u4f5c\u88ab\u79f0\u4e3a \u79fb\u52a8 \uff08move\uff09\uff0c\u800c\u4e0d\u662f\u6d45\u62f7\u8d1d\u3002\u4e0a\u9762\u7684\u4f8b\u5b50\u53ef\u4ee5\u89e3\u8bfb\u4e3a s1 \u88ab \u79fb\u52a8 \u5230\u4e86 s2 \u4e2d\u3002 \u8fd9\u6837\u5c31\u89e3\u51b3\u4e86\u4e8c\u6b21\u91ca\u653e\u7684\u95ee\u9898\uff01\u56e0\u4e3a\u53ea\u6709 s2 \u662f\u6709\u6548\u7684\uff0c\u5f53\u5176\u79bb\u5f00\u4f5c\u7528\u57df\uff0c\u5b83\u5c31\u91ca\u653e\u4e86\u81ea\u5df1\u7684\u5185\u5b58\u3002 \u8fd9\u91cc\u8fd8\u9690\u542b\u4e86\u4e00\u4e2a\u8bbe\u8ba1\u9009\u62e9\uff1a Rust \u6c38\u8fdc\u4e5f\u4e0d\u4f1a\u81ea\u52a8\u521b\u5efa\u6570\u636e\u7684 \u201c\u6df1\u62f7\u8d1d\u201d \u3002\u56e0\u6b64\uff0c\u4efb\u4f55 \u81ea\u52a8 \u7684\u590d\u5236\u53ef\u4ee5\u88ab\u8ba4\u4e3a\u5bf9\u8fd0\u884c\u65f6\u6027\u80fd\u5f71\u54cd\u8f83\u5c0f\u3002","title":"\u6570\u636e\u4ea4\u4e92\uff1a\u79fb\u52a8"},{"location":"ownership/#_7","text":"\u5982\u679c \u786e\u5b9e \u9700\u8981\u6df1\u5ea6\u590d\u5236 String \u4e2d\u5806\u4e0a\u7684\u6570\u636e\uff0c\u800c\u4e0d\u4ec5\u4ec5\u662f\u6808\u4e0a\u7684\u6570\u636e\uff0c\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a\u53eb\u505a clone \u7684\u901a\u7528\u51fd\u6570\u3002 let s1 = String :: from ( \"hello\" ); let s2 = s1 . clone (); println! ( \"s1 = {}, s2 = {}\" , s1 , s2 ); \u8fd9\u6bb5\u4ee3\u7801\u80fd\u6b63\u5e38\u8fd0\u884c\uff0c\u8fd9\u91cc\u5806\u4e0a\u7684\u6570\u636e \u786e\u5b9e \u88ab\u590d\u5236\u4e86\u3002 \u5f53\u51fa\u73b0 clone \u8c03\u7528\u65f6\uff0c\u4f60\u77e5\u9053\u4e00\u4e9b\u7279\u5b9a\u7684\u4ee3\u7801\u88ab\u6267\u884c\u800c\u4e14\u8fd9\u4e9b\u4ee3\u7801\u53ef\u80fd\u76f8\u5f53\u6d88\u8017\u8d44\u6e90\u3002","title":"\u6570\u636e\u4ea4\u4e92\uff1a\u514b\u9686"},{"location":"ownership/#_8","text":"\u8fd9\u91cc\u8fd8\u6709\u4e00\u4e2a\u6ca1\u6709\u63d0\u5230\u7684\u5c0f\u7a8d\u95e8\u3002\u8fd9\u4e9b\u4ee3\u7801\u4f7f\u7528\u4e86\u6574\u578b\u5e76\u4e14\u662f\u6709\u6548\u7684! let x = 5 ; let y = x ; println! ( \"x = {}, y = {}\" , x , y ); \u4f46\u8fd9\u6bb5\u4ee3\u7801\u4f3c\u4e4e\u4e0e\u521a\u521a\u5b66\u5230\u7684\u5185\u5bb9\u76f8\u77db\u76fe\uff1a\u6ca1\u6709\u8c03\u7528 clone\uff0c\u4e0d\u8fc7 x \u4f9d\u7136\u6709\u6548\u4e14\u6ca1\u6709\u88ab\u79fb\u52a8\u5230 y \u4e2d\u3002 \u539f\u56e0\u662f\u50cf\u6574\u578b\u8fd9\u6837\u7684\u5728\u7f16\u8bd1\u65f6\u5df2\u77e5\u5927\u5c0f\u7684\u7c7b\u578b\u88ab\u6574\u4e2a\u5b58\u50a8\u5728\u6808\u4e0a\uff0c\u6240\u4ee5\u62f7\u8d1d\u5176\u5b9e\u9645\u7684\u503c\u662f\u5feb\u901f\u7684\u3002\u8fd9\u610f\u5473\u7740\u6ca1\u6709\u7406\u7531\u5728\u521b\u5efa\u53d8\u91cf y \u540e\u4f7f x \u65e0\u6548\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c \u8fd9\u91cc\u6ca1\u6709\u6df1\u6d45\u62f7\u8d1d\u7684\u533a\u522b \uff0c\u6240\u4ee5\u8fd9\u91cc\u8c03\u7528 clone \u5e76\u4e0d\u4f1a\u4e0e\u901a\u5e38\u7684\u6d45\u62f7\u8d1d\u6709\u4ec0\u4e48\u4e0d\u540c\uff0c\u6211\u4eec\u53ef\u4ee5\u4e0d\u7528\u7ba1\u5b83\u3002 Rust \u6709\u4e00\u4e2a\u53eb\u505a Copy trait \u7684\u7279\u6b8a\u6ce8\u89e3\uff0c\u53ef\u4ee5\u7528\u5728\u7c7b\u4f3c\u6574\u578b\u8fd9\u6837\u7684\u5b58\u50a8\u5728\u6808\u4e0a\u7684\u7c7b\u578b\u4e0a\uff08 \u7b2c\u5341\u7ae0 \u5c06\u4f1a\u8be6\u7ec6\u8bb2\u89e3 trait\uff09\u3002\u5982\u679c\u4e00\u4e2a\u7c7b\u578b\u5b9e\u73b0\u4e86 Copy trait \uff0c\u90a3\u4e48\u4e00\u4e2a\u65e7\u7684\u53d8\u91cf\u5728\u5c06\u5176\u8d4b\u503c\u7ed9\u5176\u4ed6\u53d8\u91cf\u540e\u4ecd\u7136\u53ef\u7528\u3002 Rust \u4e0d\u5141\u8bb8\u81ea\u8eab\u6216\u5176\u4efb\u4f55\u90e8\u5206\u5b9e\u73b0\u4e86 Drop trait \u7684\u7c7b\u578b\u4f7f\u7528 Copy trait \u3002\u5982\u679c\u6211\u4eec\u5bf9\u5176\u503c\u79bb\u5f00\u4f5c\u7528\u57df\u65f6\u9700\u8981\u7279\u6b8a\u5904\u7406\u7684\u7c7b\u578b\u4f7f\u7528 Copy \u6ce8\u89e3\uff0c\u5c06\u4f1a\u51fa\u73b0\u4e00\u4e2a\u7f16\u8bd1\u65f6\u9519\u8bef\u3002\u8981\u5b66\u4e60\u5982\u4f55\u4e3a\u4f60\u7684\u7c7b\u578b\u6dfb\u52a0 Copy \u6ce8\u89e3\u4ee5\u5b9e\u73b0\u8be5 trait\uff0c\u8bf7\u9605\u8bfb \u9644\u5f55 C \u4e2d\u7684 \u201c\u53ef\u6d3e\u751f\u7684 trait\u201d \u3002 \u90a3\u4e48\u54ea\u4e9b\u7c7b\u578b\u5b9e\u73b0\u4e86 Copy trait \u5462\uff1f\u53ef\u4ee5\u67e5\u770b\u7ed9\u5b9a\u7c7b\u578b\u7684\u6587\u6863\u6765\u786e\u8ba4\uff0c\u4e0d\u8fc7\u4f5c\u4e3a\u4e00\u4e2a\u901a\u7528\u7684\u89c4\u5219\uff0c\u4efb\u4f55\u4e00\u7ec4\u7b80\u5355\u6807\u91cf\u503c\u7684\u7ec4\u5408\u90fd\u53ef\u4ee5\u5b9e\u73b0 Copy\uff0c\u4efb\u4f55\u4e0d\u9700\u8981\u5206\u914d\u5185\u5b58\u6216\u67d0\u79cd\u5f62\u5f0f\u8d44\u6e90\u7684\u7c7b\u578b\u90fd\u53ef\u4ee5\u5b9e\u73b0 Copy \u3002\u5982\u4e0b\u662f\u4e00\u4e9b Copy \u7684\u7c7b\u578b\uff1a \u6240\u6709\u6574\u6570\u7c7b\u578b\uff0c\u6bd4\u5982 u32\u3002 \u5e03\u5c14\u7c7b\u578b\uff0cbool\uff0c\u5b83\u7684\u503c\u662f true \u548c false\u3002 \u6240\u6709\u6d6e\u70b9\u6570\u7c7b\u578b\uff0c\u6bd4\u5982 f64\u3002 \u5b57\u7b26\u7c7b\u578b\uff0cchar\u3002 \u5143\u7ec4\uff0c\u5f53\u4e14\u4ec5\u5f53\u5176\u5305\u542b\u7684\u7c7b\u578b\u4e5f\u90fd\u5b9e\u73b0 Copy \u7684\u65f6\u5019\u3002\u6bd4\u5982\uff0c(i32, i32) \u5b9e\u73b0\u4e86 Copy\uff0c\u4f46 (i32, String) \u5c31\u6ca1\u6709\u3002","title":"\u62f7\u8d1d"},{"location":"ownership/#_9","text":"\u5c06\u503c\u4f20\u9012\u7ed9\u51fd\u6570\u4e0e\u7ed9\u53d8\u91cf\u8d4b\u503c\u7684\u539f\u7406\u76f8\u4f3c\u3002\u5411\u51fd\u6570\u4f20\u9012\u503c\u53ef\u80fd\u4f1a\u79fb\u52a8\u6216\u8005\u590d\u5236\uff0c\u5c31\u50cf\u8d4b\u503c\u8bed\u53e5\u4e00\u6837\u3002 fn main () { let s = String :: from ( \"hello\" ); // s \u8fdb\u5165\u4f5c\u7528\u57df takes_ownership ( s ); // s \u7684\u503c\u79fb\u52a8\u5230\u51fd\u6570\u91cc ... // ... \u6240\u4ee5\u5230\u8fd9\u91cc\u4e0d\u518d\u6709\u6548 let x = 5 ; // x \u8fdb\u5165\u4f5c\u7528\u57df makes_copy ( x ); // x \u5e94\u8be5\u79fb\u52a8\u51fd\u6570\u91cc\uff0c // \u4f46 i32 \u662f Copy \u7684\uff0c // \u6240\u4ee5\u5728\u540e\u9762\u53ef\u7ee7\u7eed\u4f7f\u7528 x } // \u8fd9\u91cc, x \u5148\u79fb\u51fa\u4e86\u4f5c\u7528\u57df\uff0c\u7136\u540e\u662f s\u3002\u4f46\u56e0\u4e3a s \u7684\u503c\u5df2\u88ab\u79fb\u8d70\uff0c // \u6ca1\u6709\u7279\u6b8a\u4e4b\u5904 fn takes_ownership ( some_string : String ) { // some_string \u8fdb\u5165\u4f5c\u7528\u57df println! ( \"{}\" , some_string ); } // \u8fd9\u91cc\uff0csome_string \u79fb\u51fa\u4f5c\u7528\u57df\u5e76\u8c03\u7528 `drop` \u65b9\u6cd5\u3002 // \u5360\u7528\u7684\u5185\u5b58\u88ab\u91ca\u653e fn makes_copy ( some_integer : i32 ) { // some_integer \u8fdb\u5165\u4f5c\u7528\u57df println! ( \"{}\" , some_integer ); } // \u8fd9\u91cc\uff0csome_integer \u79fb\u51fa\u4f5c\u7528\u57df\u3002\u6ca1\u6709\u7279\u6b8a\u4e4b\u5904 \u5f53\u5c1d\u8bd5\u5728\u8c03\u7528 takes_ownership \u540e\u4f7f\u7528 s \u65f6\uff0cRust \u4f1a\u629b\u51fa\u4e00\u4e2a\u7f16\u8bd1\u65f6\u9519\u8bef\u3002\u8fd9\u4e9b\u9759\u6001\u68c0\u67e5\u4f7f\u6211\u4eec\u514d\u4e8e\u72af\u9519\u3002 \u8bd5\u8bd5\u5728 main \u51fd\u6570\u4e2d\u6dfb\u52a0\u4f7f\u7528 s \u548c x \u7684\u4ee3\u7801\u6765\u770b\u770b\u54ea\u91cc\u80fd\u4f7f\u7528\u4ed6\u4eec\uff0c\u4ee5\u53ca\u6240\u6709\u6743\u89c4\u5219\u4f1a\u5728\u54ea\u91cc\u963b\u6b62\u6211\u4eec\u8fd9\u4e48\u505a\u3002","title":"\u6240\u6709\u6743\u4e0e\u51fd\u6570"},{"location":"ownership/#_10","text":"\u8fd4\u56de\u503c\u4e5f\u53ef\u4ee5\u8f6c\u79fb\u6240\u6709\u6743\u3002 ffn main () { let s1 = gives_ownership (); // gives_ownership \u5c06\u8fd4\u56de\u503c // \u8f6c\u79fb\u7ed9 s1 let s2 = String :: from ( \"hello\" ); // s2 \u8fdb\u5165\u4f5c\u7528\u57df let s3 = takes_and_gives_back ( s2 ); // s2 \u88ab\u79fb\u52a8\u5230 // takes_and_gives_back \u4e2d, // \u5b83\u4e5f\u5c06\u8fd4\u56de\u503c\u79fb\u7ed9 s3 } // \u8fd9\u91cc, s3 \u79fb\u51fa\u4f5c\u7528\u57df\u5e76\u88ab\u4e22\u5f03\u3002s2 \u4e5f\u79fb\u51fa\u4f5c\u7528\u57df\uff0c\u4f46\u5df2\u88ab\u79fb\u8d70\uff0c // \u6240\u4ee5\u4ec0\u4e48\u4e5f\u4e0d\u4f1a\u53d1\u751f\u3002s1 \u79bb\u5f00\u4f5c\u7528\u57df\u5e76\u88ab\u4e22\u5f03 fn gives_ownership () -> String { // gives_ownership \u4f1a\u5c06 // \u8fd4\u56de\u503c\u79fb\u52a8\u7ed9 // \u8c03\u7528\u5b83\u7684\u51fd\u6570 let some_string = String :: from ( \"yours\" ); // some_string \u8fdb\u5165\u4f5c\u7528\u57df. some_string // \u8fd4\u56de some_string // \u5e76\u79fb\u51fa\u7ed9\u8c03\u7528\u7684\u51fd\u6570 // } // takes_and_gives_back \u5c06\u4f20\u5165\u5b57\u7b26\u4e32\u5e76\u8fd4\u56de\u8be5\u503c fn takes_and_gives_back ( a_string : String ) -> String { // a_string \u8fdb\u5165\u4f5c\u7528\u57df // a_string // \u8fd4\u56de a_string \u5e76\u79fb\u51fa\u7ed9\u8c03\u7528\u7684\u51fd\u6570 } \u53d8\u91cf\u7684\u6240\u6709\u6743\u603b\u662f\u9075\u5faa\u76f8\u540c\u7684\u6a21\u5f0f\uff1a \u5c06\u503c\u8d4b\u7ed9\u53e6\u4e00\u4e2a\u53d8\u91cf\u65f6\u79fb\u52a8\u5b83\u3002\u5f53\u6301\u6709\u5806\u4e2d\u6570\u636e\u503c\u7684\u53d8\u91cf\u79bb\u5f00\u4f5c\u7528\u57df\u65f6\uff0c\u5176\u503c\u5c06\u901a\u8fc7 drop \u88ab\u6e05\u7406\u6389\uff0c\u9664\u975e\u6570\u636e\u88ab\u79fb\u52a8\u4e3a\u53e6\u4e00\u4e2a\u53d8\u91cf\u6240\u6709\u3002 \u867d\u7136\u8fd9\u6837\u662f\u53ef\u4ee5\u7684\uff0c\u4f46\u662f\u5728\u6bcf\u4e00\u4e2a\u51fd\u6570\u4e2d\u90fd\u83b7\u53d6\u6240\u6709\u6743\u5e76\u63a5\u7740\u8fd4\u56de\u6240\u6709\u6743\u6709\u4e9b\u5570\u55e6\u3002\u5982\u679c\u6211\u4eec\u60f3\u8981\u51fd\u6570\u4f7f\u7528\u4e00\u4e2a\u503c\u4f46\u4e0d\u83b7\u53d6\u6240\u6709\u6743\u8be5\u600e\u4e48\u529e\u5462\uff1f\u5982\u679c\u6211\u4eec\u8fd8\u8981\u63a5\u7740\u4f7f\u7528\u5b83\u7684\u8bdd\uff0c\u6bcf\u6b21\u90fd\u4f20\u8fdb\u53bb\u518d\u8fd4\u56de\u6765\u5c31\u6709\u70b9\u70e6\u4eba\u4e86\uff0c\u9664\u6b64\u4e4b\u5916\uff0c\u6211\u4eec\u4e5f\u53ef\u80fd\u60f3\u8fd4\u56de\u51fd\u6570\u4f53\u4e2d\u4ea7\u751f\u7684\u4e00\u4e9b\u6570\u636e\u3002 \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u5143\u7ec4\u6765\u8fd4\u56de\u591a\u4e2a\u503c\uff0c\u793a\u4f8b\uff1a fn main () { let s1 = String :: from ( \"hello\" ); let ( s2 , len ) = calculate_length ( s1 ); println! ( \"The length of '{}' is {}.\" , s2 , len ); } fn calculate_length ( s : String ) -> ( String , usize ) { let length = s . len (); // len() \u8fd4\u56de\u5b57\u7b26\u4e32\u7684\u957f\u5ea6 ( s , length ) } \u4f46\u662f\u8fd9\u672a\u514d\u6709\u4e9b\u5f62\u5f0f\u4e3b\u4e49\uff0c\u800c\u4e14\u8fd9\u79cd\u573a\u666f\u5e94\u8be5\u5f88\u5e38\u89c1\u3002\u5e78\u8fd0\u7684\u662f\uff0cRust \u5bf9\u6b64\u63d0\u4f9b\u4e86\u4e00\u4e2a\u4e0d\u7528\u83b7\u53d6\u6240\u6709\u6743\u5c31\u53ef\u4ee5\u4f7f\u7528\u503c\u7684\u529f\u80fd\uff0c\u53eb\u505a \u5f15\u7528 \uff08references\uff09\u3002","title":"\u8fd4\u56de\u503c\u4e0e\u4f5c\u7528\u57df"},{"location":"ownership/#_11","text":"\u4ee5\u63d0\u4f9b\u4e00\u4e2a String \u503c\u7684\u5f15\u7528\uff08reference\uff09\u3002 \u5f15\u7528 \uff08reference\uff09\u50cf\u4e00\u4e2a\u6307\u9488\uff0c\u56e0\u4e3a\u5b83\u662f\u4e00\u4e2a\u5730\u5740\uff0c\u6211\u4eec\u53ef\u4ee5\u7531\u6b64\u8bbf\u95ee\u50a8\u5b58\u4e8e\u8be5\u5730\u5740\u7684\u5c5e\u4e8e\u5176\u4ed6\u53d8\u91cf\u7684\u6570\u636e\u3002 \u4e0e\u6307\u9488\u4e0d\u540c\uff0c \u5f15\u7528\u786e\u4fdd\u6307\u5411\u67d0\u4e2a\u7279\u5b9a\u7c7b\u578b\u7684\u6709\u6548\u503c \u3002 fn main () { let s1 = String :: from ( \"hello\" ); // \u4f20\u9012 &s1 \u7ed9 calculate_length // \u8fd9\u4e9b & \u7b26\u53f7\u5c31\u662f \u5f15\u7528\uff0c\u5b83\u4eec\u5141\u8bb8\u4f60\u4f7f\u7528\u503c\u4f46\u4e0d\u83b7\u53d6\u5176\u6240\u6709\u6743\u3002 // &s1 \u8bed\u6cd5\u8ba9\u6211\u4eec\u521b\u5efa\u4e00\u4e2a \u6307\u5411 \u503c s1 \u7684\u5f15\u7528\uff0c\u4f46\u662f\u5e76\u4e0d\u62e5\u6709\u5b83\u3002 // \u56e0\u4e3a\u5e76\u4e0d\u62e5\u6709\u8fd9\u4e2a\u503c\uff0c\u6240\u4ee5\u5f53\u5f15\u7528\u505c\u6b62\u4f7f\u7528\u65f6\uff0c\u5b83\u6240\u6307\u5411\u7684\u503c\u4e5f\u4e0d\u4f1a\u88ab\u4e22\u5f03\u3002 let len = calculate_length ( & s1 ); println! ( \"The length of '{}' is {}.\" , s1 , len ); } // \u51fd\u6570\u7b7e\u540d\u4f7f\u7528 & \u6765\u8868\u660e\u53c2\u6570 s \u7684\u7c7b\u578b\u662f\u4e00\u4e2a\u5f15\u7528\u3002 fn calculate_length ( s : & String ) -> usize { // s\u662fString\u7684\u5f15\u7528 s . len () } // \u8fd9\u91cc\uff0cs \u79bb\u5f00\u4e86\u4f5c\u7528\u57df\u3002\u4f46\u56e0\u4e3a\u5b83\u5e76\u4e0d\u62e5\u6709\u5f15\u7528\u503c\u7684\u6240\u6709\u6743\uff0c // \u6240\u4ee5\u4ec0\u4e48\u4e5f\u4e0d\u4f1a\u53d1\u751f (Rust \u4e0d\u4f1a\u8c03\u7528drop) \u5f53\u51fd\u6570\u4f7f\u7528\u5f15\u7528\u800c\u4e0d\u662f\u5b9e\u9645\u503c\u4f5c\u4e3a\u53c2\u6570\uff0c\u65e0\u9700\u8fd4\u56de\u503c\u6765\u4ea4\u8fd8\u6240\u6709\u6743\uff0c\u56e0\u4e3a\u5c31\u4e0d\u66fe\u62e5\u6709\u6240\u6709\u6743\u3002 \u5c06\u521b\u5efa\u4e00\u4e2a\u5f15\u7528\u7684\u884c\u4e3a\u79f0\u4e3a \u501f\u7528 \uff08borrowing\uff09\u3002\u6b63\u5982\u73b0\u5b9e\u751f\u6d3b\u4e2d\uff0c\u5982\u679c\u4e00\u4e2a\u4eba\u62e5\u6709\u67d0\u6837\u4e1c\u897f\uff0c\u4f60\u53ef\u4ee5\u4ece\u4ed6\u90a3\u91cc\u501f\u6765\u3002\u5f53\u4f60\u4f7f\u7528\u5b8c\u6bd5\uff0c\u5fc5\u987b\u8fd8\u56de\u53bb\u3002 \u6b63\u5982\u53d8\u91cf\u9ed8\u8ba4\u662f\u4e0d\u53ef\u53d8\u7684\uff0c\u5f15\u7528\u4e5f\u4e00\u6837\u3002\uff08\u9ed8\u8ba4\uff09\u4e0d\u5141\u8bb8\u4fee\u6539 \u5f15\u7528 \u7684\u503c\u3002","title":"\u5f15\u7528\u4e0e\u501f\u7528"},{"location":"ownership/#_12","text":"\u5141\u8bb8\u6211\u4eec\u4fee\u6539\u4e00\u4e2a\u501f\u7528\u7684\u503c\uff0c\u8fd9\u5c31\u662f \u53ef\u53d8\u5f15\u7528 \uff08mutable reference\uff09 fn main () { let mut s = String :: from ( \"hello\" ); // \u5fc5\u987b\u5c06 s \u6539\u4e3a mut\uff0c \u58f0\u660e\u53ef\u53d8 change ( & mut s ); // \u4f20\u5165\u53ef\u53d8\u5f15\u7528 } // \u58f0\u660e\u53ef\u53d8\u5f15\u7528 fn change ( some_string : & mut String ) { some_string . push_str ( \", world\" ); // \u56e0\u4e3a\u53ef\u53d8\uff0c\u6240\u4ee5\u53ef\u4ee5\u66f4\u6539\u3002 } \u53ef\u53d8\u5f15\u7528\u6709\u4e00\u4e2a\u5f88\u5927\u7684\u9650\u5236\uff1a \u5982\u679c\u4f60\u6709\u4e00\u4e2a\u5bf9\u8be5\u53d8\u91cf\u7684\u53ef\u53d8\u5f15\u7528\uff0c\u4f60\u5c31\u4e0d\u80fd\u518d\u521b\u5efa\u5bf9\u8be5\u53d8\u91cf\u7684\u5f15\u7528 \u3002\u8fd9\u4e9b\u5c1d\u8bd5\u521b\u5efa\u4e24\u4e2a s \u7684\u53ef\u53d8\u5f15\u7528\u7684\u4ee3\u7801\u4f1a\u5931\u8d25\uff1a let mut s = String :: from ( \"hello\" ); let r1 = & mut s ; // \u6709\u4e00\u4e2a\u4e86 let r2 = & mut s ; // \u7b2c\u4e8c\u4e2a\u5c06\u4f1a\u62a5\u9519\u3002 println! ( \"{}, {}\" , r1 , r2 ); \u62a5\u9519\u5982\u4e0b: $ cargo run Compiling ownership v0 . 1.0 ( file : ///projects/ownership) error [ E0499 ] : cannot borrow ` s ` as mutable more than once at a time - -> src / main . rs : 5 : 14 | 4 | let r1 = & mut s ; | ------ first mutable borrow occurs here 5 | let r2 = & mut s ; | ^^^^^^ second mutable borrow occurs here 6 | 7 | println! ( \"{}, {}\" , r1 , r2 ); | -- first borrow later used here For more information about this error , try ` rustc -- explain E0499 ` . error : could not compile ` ownership ` due to previous error \u8fd9\u4e00\u9650\u5236\u4ee5\u4e00\u79cd\u975e\u5e38\u5c0f\u5fc3\u8c28\u614e\u7684\u65b9\u5f0f\u5141\u8bb8\u53ef\u53d8\u6027\uff0c \u9632\u6b62\u540c\u4e00\u65f6\u95f4\u5bf9\u540c\u4e00\u6570\u636e\u5b58\u5728\u591a\u4e2a\u53ef\u53d8\u5f15\u7528 \u3002\u65b0 Rustacean \u4eec\u7ecf\u5e38\u96be\u4ee5\u9002\u5e94\u8fd9\u4e00\u70b9\uff0c\u56e0\u4e3a\u5927\u90e8\u5206\u8bed\u8a00\u4e2d\u53d8\u91cf\u4efb\u4f55\u65f6\u5019\u90fd\u662f\u53ef\u53d8\u7684\u3002\u8fd9\u4e2a\u9650\u5236\u7684\u597d\u5904\u662f Rust \u53ef\u4ee5\u5728\u7f16\u8bd1\u65f6\u5c31\u907f\u514d\u6570\u636e\u7ade\u4e89\u3002 \u6570\u636e\u7ade\u4e89 \uff08data race\uff09\u7c7b\u4f3c\u4e8e\u7ade\u6001\u6761\u4ef6\uff0c\u5b83\u53ef\u7531\u8fd9\u4e09\u4e2a\u884c\u4e3a\u9020\u6210\uff1a \u4e24\u4e2a\u6216\u66f4\u591a\u6307\u9488\u540c\u65f6\u8bbf\u95ee\u540c\u4e00\u6570\u636e\u3002 \u81f3\u5c11\u6709\u4e00\u4e2a\u6307\u9488\u88ab\u7528\u6765\u5199\u5165\u6570\u636e\u3002 \u6ca1\u6709\u540c\u6b65\u6570\u636e\u8bbf\u95ee\u7684\u673a\u5236\u3002 \u6570\u636e\u7ade\u4e89\u4f1a\u5bfc\u81f4\u672a\u5b9a\u4e49\u884c\u4e3a\uff0c\u96be\u4ee5\u5728\u8fd0\u884c\u65f6\u8ffd\u8e2a\uff0c\u5e76\u4e14\u96be\u4ee5\u8bca\u65ad\u548c\u4fee\u590d\uff1bRust \u907f\u514d\u4e86\u8fd9\u79cd\u60c5\u51b5\u7684\u53d1\u751f\uff0c\u56e0\u4e3a\u5b83\u751a\u81f3\u4e0d\u4f1a\u7f16\u8bd1\u5b58\u5728\u6570\u636e\u7ade\u4e89\u7684\u4ee3\u7801\uff01 \u4e00\u5982\u65e2\u5f80\uff0c\u53ef\u4ee5\u4f7f\u7528\u5927\u62ec\u53f7\u6765\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u4f5c\u7528\u57df\uff0c\u4ee5\u5141\u8bb8\u62e5\u6709\u591a\u4e2a\u53ef\u53d8\u5f15\u7528\uff0c\u53ea\u662f\u4e0d\u80fd \u540c\u65f6 \u62e5\u6709\uff1a fn main () { let mut s = String :: from ( \"hello\" ); { let r1 = & mut s ; } // r1 \u5728\u8fd9\u91cc\u79bb\u5f00\u4e86\u4f5c\u7528\u57df\uff0c\u6240\u4ee5\u6211\u4eec\u5b8c\u5168\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u5f15\u7528 let r2 = & mut s ; } Rust \u5728\u540c\u65f6\u4f7f\u7528\u53ef\u53d8\u4e0e\u4e0d\u53ef\u53d8\u5f15\u7528\u65f6\u4e5f\u91c7\u7528\u7684\u7c7b\u4f3c\u7684\u89c4\u5219\u3002\u8fd9\u4e9b\u4ee3\u7801\u4f1a\u5bfc\u81f4\u4e00\u4e2a\u9519\u8bef\uff1a let mut s = String :: from ( \"hello\" ); let r1 = & s ; // \u6ca1\u95ee\u9898 let r2 = & s ; // \u6ca1\u95ee\u9898 let r3 = & mut s ; // \u5927\u95ee\u9898 println! ( \"{}, {}, and {}\" , r1 , r2 , r3 ); // \u4f7f\u7528\u4e0d\u53ef\u53d8\u5f15\u7528\u65f6\uff0c\u540c\u65f6\u53c8\u4f7f\u7528\u4e86\u53ef\u53d8\u5f15\u7528\u3002 \u9519\u8bef\u5982\u4e0b\uff1a $ cargo run Compiling ownership v0 . 1.0 ( file : ///projects/ownership) error [ E0502 ] : cannot borrow ` s ` as mutable because it is also borrowed as immutable - -> src / main . rs : 6 : 14 | 4 | let r1 = & s ; // no problem | -- immutable borrow occurs here 5 | let r2 = & s ; // no problem 6 | let r3 = & mut s ; // BIG PROBLEM | ^^^^^^ mutable borrow occurs here 7 | 8 | println! ( \"{}, {}, and {}\" , r1 , r2 , r3 ); | -- immutable borrow later used here For more information about this error , try ` rustc -- explain E0502 ` . error : could not compile ` ownership ` due to previous error \u54c7\u54e6\uff01\u6211\u4eec \u4e5f \u4e0d\u80fd\u5728\u62e5\u6709\u4e0d\u53ef\u53d8\u5f15\u7528\u7684\u540c\u65f6\u62e5\u6709\u53ef\u53d8\u5f15\u7528\u3002 \u6ce8\u610f \u4e00\u4e2a\u5f15\u7528\u7684\u4f5c\u7528\u57df\u4ece\u58f0\u660e\u7684\u5730\u65b9\u5f00\u59cb\u4e00\u76f4\u6301\u7eed\u5230\u6700\u540e\u4e00\u6b21\u4f7f\u7528\u4e3a\u6b62 \u3002\u4f8b\u5982\uff0c\u56e0\u4e3a\u6700\u540e\u4e00\u6b21\u4f7f\u7528 \u4e0d\u53ef\u53d8\u5f15\u7528 \uff08println!)\uff0c\u53d1\u751f\u5728\u58f0\u660e\u53ef\u53d8\u5f15\u7528\u4e4b\u524d\uff0c\u6240\u4ee5\u5982\u4e0b\u4ee3\u7801\u662f\u53ef\u4ee5\u7f16\u8bd1\u7684\uff1a let mut s = String :: from ( \"hello\" ); let r1 = & s ; // \u6ca1\u95ee\u9898 let r2 = & s ; // \u6ca1\u95ee\u9898 println! ( \"{} and {}\" , r1 , r2 ); // \u6b64\u4f4d\u7f6e\u4e4b\u540e r1 \u548c r2 \u4e0d\u518d\u4f7f\u7528 let r3 = & mut s ; // \u6ca1\u95ee\u9898 println! ( \"{}\" , r3 ); \u4e0d\u53ef\u53d8\u5f15\u7528 r1 \u548c r2 \u7684\u4f5c\u7528\u57df\u5728 println! \u6700\u540e\u4e00\u6b21\u4f7f\u7528\u4e4b\u540e\u7ed3\u675f\uff0c\u8fd9\u4e5f\u662f\u521b\u5efa\u53ef\u53d8\u5f15\u7528 r3 \u7684\u5730\u65b9\u3002\u5b83\u4eec\u7684\u4f5c\u7528\u57df \u6ca1\u6709\u91cd\u53e0 \uff0c\u6240\u4ee5\u4ee3\u7801\u662f\u53ef\u4ee5\u7f16\u8bd1\u7684\u3002 \u7f16\u8bd1\u5668\u5728\u4f5c\u7528\u57df\u7ed3\u675f\u4e4b\u524d\u5224\u65ad\u4e0d\u518d\u4f7f\u7528\u7684\u5f15\u7528\u7684\u80fd\u529b\u88ab\u79f0\u4e3a \u975e\u8bcd\u6cd5\u4f5c\u7528\u57df\u751f\u547d\u5468\u671f \uff08Non-Lexical Lifetimes\uff0c\u7b80\u79f0 NLL\uff09\u3002\u4f60\u53ef\u4ee5\u5728 The Edition Guide \u4e2d\u9605\u8bfb\u66f4\u591a\u5173\u4e8e\u5b83\u7684\u4fe1\u606f\u3002","title":"\u53ef\u53d8\u5f15\u7528"},{"location":"ownership/#dangling-references","text":"\u6240\u8c13 \u60ac\u5782\u6307\u9488 \u662f\u5176\u6307\u5411\u7684\u5185\u5b58\u53ef\u80fd\u5df2\u7ecf\u88ab\u5206\u914d\u7ed9\u5176\u5b83\u6301\u6709\u8005\u3002\u76f8\u6bd4\u4e4b\u4e0b\uff0c\u5728 Rust \u4e2d\u7f16\u8bd1\u5668\u786e\u4fdd\u5f15\u7528\u6c38\u8fdc\u4e5f\u4e0d\u4f1a\u53d8\u6210\u60ac\u5782\u72b6\u6001\uff1a \u5f53\u4f60\u62e5\u6709\u4e00\u4e9b\u6570\u636e\u7684\u5f15\u7528\uff0c\u7f16\u8bd1\u5668\u786e\u4fdd\u6570\u636e\u4e0d\u4f1a\u5728\u5176\u5f15\u7528\u4e4b\u524d\u79bb\u5f00\u4f5c\u7528\u57df\u3002 \u5f53\u5c1d\u8bd5\u521b\u5efa\u4e00\u4e2a\u60ac\u5782\u5f15\u7528\u65f6\uff0cRust \u4f1a\u901a\u8fc7\u4e00\u4e2a\u7f16\u8bd1\u65f6\u9519\u8bef\u6765\u907f\u514d\uff1a fn main () { let reference_to_nothing = dangle (); } fn dangle () -> & String { // dangle \u8fd4\u56de\u4e00\u4e2a\u5b57\u7b26\u4e32\u7684\u5f15\u7528 let s = String :: from ( \"hello\" ); // s \u662f\u4e00\u4e2a\u65b0\u5b57\u7b26\u4e32 & s // \u8fd4\u56de\u5b57\u7b26\u4e32 s \u7684\u5f15\u7528 } // \u8fd9\u91cc s \u79bb\u5f00\u4f5c\u7528\u57df\u5e76\u88ab\u4e22\u5f03\u3002\u5176\u5185\u5b58\u88ab\u91ca\u653e\u3002 // \u5371\u9669\uff01 \u9519\u8bef: $ cargo run Compiling ownership v0.1.0 ( file:///projects/ownership ) error [ E0106 ] : missing lifetime specifier --> src/main.rs:5:16 | 5 | fn dangle () -> & String { | ^ expected named lifetime parameter | = help: this function 's return type contains a borrowed value, but there is no value for it to be borrowed from help: consider using the `' static ` lifetime | 5 | fn dangle () -> & ' static String { | ~~~~~~~~ For more information about this error, try ` rustc --explain E0106 ` . error: could not compile ` ownership ` due to previous error \u56e0\u4e3a s \u662f\u5728 dangle \u51fd\u6570\u5185\u521b\u5efa\u7684\uff0c\u5f53 dangle \u7684\u4ee3\u7801\u6267\u884c\u5b8c\u6bd5\u540e\uff0cs \u5c06\u88ab\u91ca\u653e\u3002\u4e0d\u8fc7\u6211\u4eec\u5c1d\u8bd5\u8fd4\u56de\u5b83\u7684\u5f15\u7528\u3002\u8fd9\u610f\u5473\u7740\u8fd9\u4e2a\u5f15\u7528\u4f1a\u6307\u5411\u4e00\u4e2a\u65e0\u6548\u7684 String\uff0c\u8fd9\u53ef\u4e0d\u5bf9\uff01Rust \u4e0d\u4f1a\u5141\u8bb8\u8fd9\u4e48\u505a\u3002 \u8fd9\u91cc\u7684\u89e3\u51b3\u65b9\u6cd5\u662f\u76f4\u63a5\u8fd4\u56de String\uff1a fn no_dangle () -> String { let s = String :: from ( \"hello\" ); s // \u76f4\u63a5\u8fd4\u56des // \u6240\u6709\u6743\u88ab\u79fb\u52a8\u51fa\u53bb\uff0c\u6240\u4ee5\u6ca1\u6709\u503c\u88ab\u91ca\u653e\u3002 } \u6982\u62ec\uff1a \u5728\u4efb\u610f\u7ed9\u5b9a\u65f6\u95f4\uff0c\u8981\u4e48 \u53ea\u80fd\u6709\u4e00\u4e2a\u53ef\u53d8\u5f15\u7528\uff0c\u8981\u4e48 \u53ea\u80fd\u6709\u591a\u4e2a\u4e0d\u53ef\u53d8\u5f15\u7528\u3002 \u5f15\u7528\u5fc5\u987b\u603b\u662f\u6709\u6548\u7684\u3002","title":"\u60ac\u5782\u5f15\u7528\uff08Dangling References\uff09"},{"location":"ownership/#_13","text":"","title":"\u5f15\u7528\u7684\u89c4\u5219"},{"location":"ownership/#slice","text":"","title":"Slice\u7c7b\u578b"}]}